CGPath *ppk_bezierPathWithContinuousCornerRoundedRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return ppk_bezierPathWithRoundedRect(0, 0, a1, a2, a3, a4, a5, a5, a5, a5);
}

CGPath *ppk_bezierPathWithRoundedRect(int a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10)
{
  CGPath *Mutable;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double MinX;
  CGFloat MinY;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CGFloat Width;
  double v34;
  double v35;
  double v36;
  double v37;
  CGFloat v38;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  Mutable = CGPathCreateMutable();
  if (a1)
  {
    _sanitizeRadiusForRect(a7, a3, a4, a5, a6);
    v40 = v21;
    _sanitizeRadiusForRect(a8, a3, a4, a5, a6);
    v42 = v22;
    _sanitizeRadiusForRect(a9, a3, a4, a5, a6);
    v44 = v23;
    _sanitizeRadiusForRect(a10, a3, a4, a5, a6);
    v25 = v24;
    v46.origin.x = a3;
    v46.origin.y = a4;
    v46.size.width = a5;
    v46.size.height = a6;
    MinX = CGRectGetMinX(v46);
    v47.origin.x = a3;
    v47.origin.y = a4;
    v47.size.width = a5;
    v47.size.height = a6;
    MinY = CGRectGetMinY(v47);
    CGPathMoveToPoint(Mutable, 0, v25 + MinX, MinY);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 0, a2, a3, a4, a5, a6, v40);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 1, a2, a3, a4, a5, a6, v42);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 2, a2, a3, a4, a5, a6, v44);
    _addLegacyRectangleQuarterThroughCorner(Mutable, 3, a2, a3, a4, a5, a6, v25);
  }
  else
  {
    _sanitizeRadiusForRect(a7, a3, a4, a5, a6);
    v41 = v28;
    _sanitizeRadiusForRect(a8, a3, a4, a5, a6);
    v43 = v29;
    _sanitizeRadiusForRect(a9, a3, a4, a5, a6);
    v45 = v30;
    _sanitizeRadiusForRect(a10, a3, a4, a5, a6);
    v32 = v31;
    v48.origin.x = a3;
    v48.origin.y = a4;
    v48.size.width = a5;
    v48.size.height = a6;
    Width = CGRectGetWidth(v48);
    v34 = Width * 0.5;
    v35 = Width - v41 * 1.528665;
    if (v34 >= v35)
      v35 = v34;
    if (v35 >= v32 * 1.528665)
      v36 = v32 * 1.528665;
    else
      v36 = v35;
    v49.origin.x = a3;
    v49.origin.y = a4;
    v49.size.width = a5;
    v49.size.height = a6;
    v37 = CGRectGetMinX(v49);
    v50.origin.x = a3;
    v50.origin.y = a4;
    v50.size.width = a5;
    v50.size.height = a6;
    v38 = CGRectGetMinY(v50);
    CGPathMoveToPoint(Mutable, 0, v37 + v36, v38);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 0, a2, a3, a4, a5, a6, v41, v32, v43);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 1, a2, a3, a4, a5, a6, v43, v45, v41);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 2, a2, a3, a4, a5, a6, v45, v43, v32);
    _addContinuousRectangleQuarterThroughCorner(Mutable, 3, a2, a3, a4, a5, a6, v32, v41, v45);
  }
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

CGPath *ppk_bezierPathWithLegacyRoundedRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  return ppk_bezierPathWithRoundedRect(1, 0, a1, a2, a3, a4, a5, a5, a5, a5);
}

double ppk_minimumLengthForSideToHaveFullContinuityWithCornerRadius(double a1, double a2)
{
  return a2 * 1.528665 + a1 * 1.528665;
}

void _sanitizeRadiusForRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGRect v9;
  CGRect v10;

  v9.origin.x = a2;
  v9.origin.y = a3;
  v9.size.width = a4;
  v9.size.height = a5;
  CGRectGetWidth(v9);
  v10.origin.x = a2;
  v10.origin.y = a3;
  v10.size.width = a4;
  v10.size.height = a5;
  CGRectGetHeight(v10);
}

double _cornerPointOnRect(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v5;
  double MaxX;
  double MinX;
  CGRect v13;
  CGRect v14;

  switch(a1)
  {
    case 0:
      MaxX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_7;
    case 1:
      MinX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_5;
    case 2:
      MinX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_5:
      v5 = MinX;
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      CGRectGetMaxY(v13);
      break;
    case 3:
      MaxX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_7:
      v5 = MaxX;
      v14.origin.x = a2;
      v14.origin.y = a3;
      v14.size.width = a4;
      v14.size.height = a5;
      CGRectGetMinY(v14);
      break;
    default:
      return v5;
  }
  return v5;
}

void _addContinuousRectangleQuarterThroughCorner(CGPath *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10)
{
  double Width;
  double Height;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  CGFloat v35;
  CGFloat v36;
  CGPoint CurrentPoint;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  __double2 v48;
  __double2 v49;
  double v50;
  double v51;
  double v52;
  double v53;
  __double2 v54;
  double v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  CGRect v72;

  Width = CGRectGetWidth(*(CGRect *)&a4);
  v72.origin.x = a4;
  v72.origin.y = a5;
  v72.size.width = a6;
  v72.size.height = a7;
  Height = CGRectGetHeight(v72);
  v22 = Width * 0.5;
  v23 = Height * 0.5;
  if (Width * 0.5 < Width - a9 * 1.528665)
    v22 = Width - a9 * 1.528665;
  v24 = Height - a10 * 1.528665;
  if (v23 < v24)
    v23 = v24;
  v25 = a8 * 1.528665;
  if (v22 >= a8 * 1.528665)
    v26 = a8 * 1.528665;
  else
    v26 = v22;
  if (v23 >= v25)
    v27 = a8 * 1.528665;
  else
    v27 = v23;
  v67 = a8;
  v28 = v25 - a8;
  v70 = 0.0;
  v64 = 0.0;
  if (v25 - a8 != 0.0)
  {
    v64 = 1.0 - (v25 - v26) / v28;
    v70 = 1.0 - (v25 - v27) / v28;
  }
  v29 = _cornerPointOnRect(a2, a4, a5, a6, a7);
  v31 = v30;
  v32 = _insetCorner(a2, v29, v30, v26);
  v34 = a2 & 0xFFFFFFFFFFFFFFFDLL;
  v68 = v31;
  v65 = v33;
  v66 = v32;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    v35 = v33;
  else
    v35 = v31;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    v36 = v29;
  else
    v36 = v32;
  if ((a3 & 1) != 0)
  {
    CGPathAddLineToPoint(a1, 0, v36, v35);
LABEL_30:
    if ((unint64_t)(a2 - 1) > 2)
      v38 = 290.0;
    else
      v38 = dbl_1DDF2F010[a2 - 1];
    v39 = v70;
    if (v64 < v70)
      v39 = v64;
    v40 = 1.0 - v39;
    v41 = _insetCorner(a2, v29, v68, ((1.0 - v39) * 0.05 + 0.95) * v67);
    v43 = v42;
    v44 = v40 * 0.06875015 + 0.93124985;
    v45 = v38 * 0.0174532925;
    v46 = (v38 + 50.0) * 0.0174532925;
    v47 = v44 * v67;
    v48 = __sincos_stret(v45);
    v61 = v43 + v47 * v48.__sinval;
    v62 = v41 + v47 * v48.__cosval;
    v49 = __sincos_stret(v46);
    if (v34)
      v50 = v64;
    else
      v50 = v70;
    v63 = v50;
    if (v34)
      v51 = v70;
    else
      v51 = v64;
    if (v34)
      v52 = v66;
    else
      v52 = v29;
    v53 = v65;
    if (v34)
      v53 = v68;
    v69 = v53;
    v71 = v52;
    _addContinuationSegment(a1, a2, 1, v62, v61, v67, v51);
    v54 = __sincos_stret((v46 - v45) * 0.5);
    v55 = v47 * ((1.0 - v54.__cosval) * 4.0 / (v54.__sinval * 3.0));
    CGPathAddCurveToPoint(a1, 0, v62 - v55 * v48.__sinval, v61 + v55 * v48.__cosval, v41 + v47 * v49.__cosval + v55 * v49.__sinval, v43 + v47 * v49.__sinval - v55 * v49.__cosval, v41 + v47 * v49.__cosval, v43 + v47 * v49.__sinval);
    _addContinuationSegment(a1, a2, 0, v71, v69, v67, v63);
    return;
  }
  CurrentPoint = CGPathGetCurrentPoint(a1);
  if (CurrentPoint.x != v36 && vabdd_f64(CurrentPoint.x, v36) >= 0.1
    || CurrentPoint.y != v35 && vabdd_f64(CurrentPoint.y, v35) >= 0.1
    || ((v56 = a4, v57 = a5, v58 = a6, v59 = a7, !v34)
      ? (v60 = CGRectGetWidth(*(CGRect *)&v56))
      : (v60 = CGRectGetHeight(*(CGRect *)&v56)),
        v60 == 0.0 || fabs(v60) < 0.00999999978))
  {
    CGPathAddLineToPoint(a1, 0, v36, v35);
  }
  if (v29 != v66 && vabdd_f64(v29, v66) >= 0.1 || v31 != v65 && vabdd_f64(v31, v65) >= 0.1)
    goto LABEL_30;
}

double _insetCorner(uint64_t a1, double result, double a3, double a4)
{
  switch(a1)
  {
    case 0:
      result = result - a4;
      break;
    case 1:
      result = result - a4;
      break;
    case 2:
      result = result + a4;
      break;
    case 3:
      result = result + a4;
      break;
    default:
      return result;
  }
  return result;
}

void _addContinuationSegment(const CGPath *a1, uint64_t a2, int a3, CGFloat a4, CGFloat a5, double a6, double a7)
{
  CGPoint CurrentPoint;
  double v15;
  int v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double y;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double x;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  __double2 v35;
  double v36;
  __double2 v37;
  __double2 v38;
  double v39;
  double v40;
  double v41;
  double v42;

  CurrentPoint = CGPathGetCurrentPoint(a1);
  if ((unint64_t)(a2 - 1) > 2)
    v15 = 270.0;
  else
    v15 = dbl_1DDF2F028[a2 - 1];
  v16 = (a2 & 0xFFFFFFFFFFFFFFFDLL) != 0;
  v17 = 0.8;
  v18 = 0.0;
  if (v16 != a3)
    v19 = 0.0;
  else
    v19 = 0.8;
  if (v16 != a3)
    v20 = 0.0;
  else
    v20 = 0.5;
  if (v16 != a3)
    v18 = 0.5;
  else
    v17 = 0.0;
  if (a3)
    y = a5;
  else
    y = CurrentPoint.y;
  if (a3)
    v22 = CurrentPoint.y;
  else
    v22 = a5;
  v23 = y - v22;
  v24 = v22 + v23 * v19;
  v25 = v22 + v23 * v20;
  if (a3)
    v26 = v24;
  else
    v26 = v25;
  v42 = v26;
  if (a3)
    x = a4;
  else
    x = CurrentPoint.x;
  if (a3)
    v28 = CurrentPoint.x;
  else
    v28 = a4;
  v29 = x - v28;
  v30 = v28 + v29 * v17;
  v31 = v28 + v29 * v18;
  if (a3)
    v32 = v30;
  else
    v32 = v31;
  if (a3)
    v24 = v25;
  v40 = v24;
  v41 = v32;
  if (a3)
    v30 = v31;
  v39 = v30;
  if (!a3)
    v15 = v15 + 50.0 + 20.0;
  v33 = v15 * 0.0174532925;
  v34 = (v15 + 20.0) * 0.0174532925;
  v35 = __sincos_stret((v34 - v15 * 0.0174532925) * 0.5);
  v36 = (1.0 - v35.__cosval) * 4.0 / (v35.__sinval * 3.0) * a6;
  v37 = __sincos_stret(v33);
  v38 = __sincos_stret(v34);
  CGPathAddCurveToPoint(a1, 0, v39 * a7 + (CurrentPoint.x - v36 * v37.__sinval) * (1.0 - a7), v40 * a7 + (CurrentPoint.y + v36 * v37.__cosval) * (1.0 - a7), v41 * a7 + (a4 + v36 * v38.__sinval) * (1.0 - a7), v42 * a7 + (a5 - v36 * v38.__cosval) * (1.0 - a7), a4, a5);
}

void _addLegacyRectangleQuarterThroughCorner(CGPath *a1, uint64_t a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGPoint v23;
  CGPoint CurrentPoint;
  double v25;
  double v26;
  double v27;
  double v28;
  __double2 v29;
  double v30;
  __double2 v31;
  __double2 v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  double Width;
  double v38;

  v16 = _cornerPointOnRect(a2, a4, a5, a6, a7);
  v18 = v17;
  v38 = a8;
  v19 = _insetCorner(a2, v16, v17, a8);
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    v21 = v16;
  else
    v21 = v19;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    v22 = v20;
  else
    v22 = v18;
  if ((a2 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    v16 = v19;
  else
    v18 = v20;
  if ((a3 & 1) != 0)
  {
    CGPathAddLineToPoint(a1, 0, v21, v22);
LABEL_21:
    CurrentPoint = CGPathGetCurrentPoint(a1);
    v25 = v18;
    if ((unint64_t)(a2 - 1) > 2)
      v26 = 270.0;
    else
      v26 = dbl_1DDF2F028[a2 - 1];
    v27 = v26 * 0.0174532925;
    v28 = (v26 + 90.0) * 0.0174532925;
    v29 = __sincos_stret((v28 - v26 * 0.0174532925) * 0.5);
    v30 = (1.0 - v29.__cosval) * 4.0 / (v29.__sinval * 3.0) * v38;
    v31 = __sincos_stret(v27);
    v32 = __sincos_stret(v28);
    CGPathAddCurveToPoint(a1, 0, CurrentPoint.x - v30 * v31.__sinval, CurrentPoint.y + v30 * v31.__cosval, v16 + v30 * v32.__sinval, v25 - v30 * v32.__cosval, v16, v25);
    return;
  }
  v23 = CGPathGetCurrentPoint(a1);
  if (v23.x != v21 && vabdd_f64(v23.x, v21) >= 0.1
    || v23.y != v22 && vabdd_f64(v23.y, v22) >= 0.1
    || ((v33 = a4, v34 = a5, v35 = a6, v36 = a7, (a2 & 0xFFFFFFFFFFFFFFFDLL) == 0)
      ? (Width = CGRectGetWidth(*(CGRect *)&v33))
      : (Width = CGRectGetHeight(*(CGRect *)&v33)),
        Width == 0.0 || fabs(Width) < 0.00999999978))
  {
    CGPathAddLineToPoint(a1, 0, v21, v22);
  }
  if (v21 != v16 && vabdd_f64(v21, v16) >= 0.1 || v22 != v18 && vabdd_f64(v22, v18) >= 0.1)
    goto LABEL_21;
}

void generateRandomKey(_QWORD *__buf)
{
  BOOL v2;

  do
  {
    arc4random_buf(__buf, 0x10uLL);
    if (*__buf)
      v2 = 0;
    else
      v2 = __buf[1] == 0;
  }
  while (v2 || (*__buf & __buf[1]) == -1);
}

void sub_1DDB1408C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id getMUImageReaderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getMUImageReaderClass_softClass;
  v7 = getMUImageReaderClass_softClass;
  if (!getMUImageReaderClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMUImageReaderClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getMUImageReaderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getMUImageReaderClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!MarkupUILibraryCore_frameworkLibrary)
  {
    MarkupUILibraryCore_frameworkLibrary = _sl_dlopen();
    if (!MarkupUILibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("MUImageReader");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getMUImageReaderClass_block_invoke_cold_1();
    free(v3);
  }
  getMUImageReaderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double PDFDegToRad(double a1)
{
  return a1 / 180.0 * 3.14159265;
}

void sub_1DDB17F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1DDB180A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1DDB186E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, id *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20,id a21)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(&a20);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1DDB188E4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1DDB195FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1DDB197E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1DDB1A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1DDB1AC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB1BBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getMAImageCaptioningSetCaptionIntoMetadataSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (MediaAccessibilityLibraryCore_frameworkLibrary)
  {
    v2 = (void *)MediaAccessibilityLibraryCore_frameworkLibrary;
  }
  else
  {
    MediaAccessibilityLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)MediaAccessibilityLibraryCore_frameworkLibrary;
    if (!MediaAccessibilityLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MAImageCaptioningSetCaptionIntoMetadata");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getMAImageCaptioningSetCaptionIntoMetadataSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1DDB1CCA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

id getPXFileBackedUIMediaProviderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPXFileBackedUIMediaProviderClass_softClass;
  v7 = getPXFileBackedUIMediaProviderClass_softClass;
  if (!getPXFileBackedUIMediaProviderClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPXFileBackedUIMediaProviderClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getPXFileBackedUIMediaProviderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1CE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPXFileBackedAssetClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPXFileBackedAssetClass_softClass;
  v7 = getPXFileBackedAssetClass_softClass;
  if (!getPXFileBackedAssetClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPXFileBackedAssetClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getPXFileBackedAssetClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1CF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB1D9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB1E0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  uint64_t v15;

  _Block_object_dispose((const void *)(v15 - 80), 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getPXDisplayAssetViewClass_block_invoke(uint64_t a1)
{
  Class result;

  PhotosUICoreLibrary();
  result = objc_getClass("PXDisplayAssetView");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPXDisplayAssetViewClass_block_invoke_cold_1();
  getPXDisplayAssetViewClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void PhotosUICoreLibrary()
{
  void *v0;

  if (!PhotosUICoreLibraryCore_frameworkLibrary)
    PhotosUICoreLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!PhotosUICoreLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getPXFileBackedUIMediaProviderClass_block_invoke(uint64_t a1)
{
  Class result;

  PhotosUICoreLibrary();
  result = objc_getClass("PXFileBackedUIMediaProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPXFileBackedUIMediaProviderClass_block_invoke_cold_1();
  getPXFileBackedUIMediaProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getPXFileBackedAssetClass_block_invoke(uint64_t a1)
{
  Class result;

  PhotosUICoreLibrary();
  result = objc_getClass("PXFileBackedAsset");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPXFileBackedAssetClass_block_invoke_cold_1();
  getPXFileBackedAssetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getVKCImageAnalyzerClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionKitCoreLibrary();
  result = objc_getClass("VKCImageAnalyzer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVKCImageAnalyzerClass_block_invoke_cold_1();
  getVKCImageAnalyzerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void VisionKitCoreLibrary()
{
  void *v0;

  if (!VisionKitCoreLibraryCore_frameworkLibrary)
    VisionKitCoreLibraryCore_frameworkLibrary = _sl_dlopen();
  if (!VisionKitCoreLibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getVKCImageAnalysisInteractionClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionKitCoreLibrary();
  result = objc_getClass("VKCImageAnalysisInteraction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVKCImageAnalysisInteractionClass_block_invoke_cold_1();
  getVKCImageAnalysisInteractionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getVKCImageAnalyzerRequestClass_block_invoke(uint64_t a1)
{
  Class result;

  VisionKitCoreLibrary();
  result = objc_getClass("VKCImageAnalyzerRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getVKCImageAnalyzerRequestClass_block_invoke_cold_1();
  getVKCImageAnalyzerRequestClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id getGPAppleConnectTokenProviderClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGPAppleConnectTokenProviderClass_softClass;
  v7 = getGPAppleConnectTokenProviderClass_softClass;
  if (!getGPAppleConnectTokenProviderClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGPAppleConnectTokenProviderClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getGPAppleConnectTokenProviderClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1FA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPInProcessMagicPaperViewControllerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGPInProcessMagicPaperViewControllerClass_softClass;
  v7 = getGPInProcessMagicPaperViewControllerClass_softClass;
  if (!getGPInProcessMagicPaperViewControllerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGPInProcessMagicPaperViewControllerClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getGPInProcessMagicPaperViewControllerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1FB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPRecipeClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGPRecipeClass_softClass;
  v7 = getGPRecipeClass_softClass;
  if (!getGPRecipeClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGPRecipeClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getGPRecipeClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB1FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB1FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB20658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getGPPromptElementClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getGPPromptElementClass_softClass;
  v7 = getGPPromptElementClass_softClass;
  if (!getGPPromptElementClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getGPPromptElementClass_block_invoke;
    v3[3] = &unk_1EA839030;
    v3[4] = &v4;
    __getGPPromptElementClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1DDB20E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DDB21840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getGPAppleConnectTokenProviderClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPAppleConnectTokenProvider");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPAppleConnectTokenProviderClass_block_invoke_cold_1();
  getGPAppleConnectTokenProviderClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void GenerativePlaygroundUILibrary()
{
  void *v0;

  if (!GenerativePlaygroundUILibraryCore_frameworkLibrary)
    GenerativePlaygroundUILibraryCore_frameworkLibrary = _sl_dlopen();
  if (!GenerativePlaygroundUILibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class __getGPInProcessMagicPaperViewControllerClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPInProcessMagicPaperViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPInProcessMagicPaperViewControllerClass_block_invoke_cold_1();
  getGPInProcessMagicPaperViewControllerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPRecipeClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPRecipe");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPRecipeClass_block_invoke_cold_1();
  getGPRecipeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPDrawOnImageRecipeClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPDrawOnImageRecipe");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPDrawOnImageRecipeClass_block_invoke_cold_1();
  getGPDrawOnImageRecipeClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPMagicPaperStateClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPMagicPaperState");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPMagicPaperStateClass_block_invoke_cold_1();
  getGPMagicPaperStateClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPPromptElementClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPPromptElement");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPPromptElementClass_block_invoke_cold_1();
  getGPPromptElementClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getGPGenerationRecipeDataClass_block_invoke(uint64_t a1)
{
  Class result;

  GenerativePlaygroundUILibrary();
  result = objc_getClass("GPGenerationRecipeData");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getGPGenerationRecipeDataClass_block_invoke_cold_1();
  getGPGenerationRecipeDataClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t one-time initialization function for mathLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, mathLogger);
  __swift_project_value_buffer(v0, (uint64_t)mathLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t AnyCanvas.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void *v23;
  id v24;
  PKDrawing *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v5 = (unint64_t)v4;
  v35 = a2;
  v36 = a3;
  v8 = type metadata accessor for PKDrawing();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x720))(v11);
  if (result)
  {
    v17 = result;
    v18 = v16;
    v19 = (void *)(*(uint64_t (**)(void))((*v14 & *v4) + 0x2F8))();
    v21 = v20;
    ObjectType = swift_getObjectType();
    v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(ObjectType, v21);

    if (v23)
    {
      v24 = objc_msgSend(v23, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      PKDrawing._bridgeToObjectiveC()(v25);
      v27 = v26;
      v28 = objc_msgSend(v26, sel_uuid);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      v37 = &unk_1F046F2B8;
      v29 = swift_dynamicCastObjCProtocolConditional();
      if (v29
        && ((v30 = (void *)v29,
             swift_getObjectType(),
             type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (v31 = v30): (v31 = 0), v31))
      {
        v32 = specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(v31, v17, v18, v5);
        v33 = (char *)specialized _arrayForceCast<A, B>(_:)(a4);
        CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(a1, v35, v36, v33);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        return swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;

  v39 = a4;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F8))(v14);
  v19 = v18;
  ObjectType = swift_getObjectType();
  v40 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(ObjectType, v19);

  v21 = v40;
  if (v40)
  {
    v38 = a3;
    v22 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate;
    v23 = *(_QWORD *)&v40[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v23)
    {
      v24 = *(void **)(v23 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v24)
      {
        v25 = v24;
        if (a2)
          a2 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v24, sel_mathResult_itemUUID_, a2, isa);

        v21 = v40;
      }
    }
    if ((v39 & 1) != 0)
    {
      v27 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v16, 1, 1, v27);
      v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v8);
      type metadata accessor for MainActor();
      swift_retain();
      v29 = static MainActor.shared.getter();
      v30 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v31 = (char *)swift_allocObject();
      v32 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v31 + 2) = v29;
      *((_QWORD *)v31 + 3) = v32;
      *((_QWORD *)v31 + 4) = v28;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v31[v30], (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
      swift_release();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v16, (uint64_t)&async function pointer to partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:), (uint64_t)v31);

      swift_release();
    }
    else
    {
      v33 = *(_QWORD *)&v21[v22];
      if (v33)
      {
        v34 = *(void **)(v33 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
        if (v34)
        {
          v35 = v34;
          v36 = UUID._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v35, sel_mathResultAttributionImage_darkModeImage_string_date_itemUUID_, 0, 0, 0, 0, v36);

          v21 = v40;
        }
      }

    }
  }
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  v5[12] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[13] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 112) = v2;
  if (v2)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v5 = (uint64_t (*)(void))((char *)&async function pointer to specialized CalculateResultAttributionHandler.lightModeImage()
                           + async function pointer to specialized CalculateResultAttributionHandler.lightModeImage());
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v3;
    *v3 = v0;
    v3[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
    return v5();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CalculateResultAttributionHandler.darkModeImage()
                             + async function pointer to specialized CalculateResultAttributionHandler.darkModeImage());
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v1;
  *v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v3();
}

{
  _QWORD *v0;
  uint64_t v1;

  v0[19] = static MainActor.shared.getter();
  v0[20] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[21] = v1;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  v0[22] = type metadata accessor for StocksKitCurrencyCache();
  v0[23] = static StocksKitCurrencyCache.shared.getter();
  v1 = (_QWORD *)swift_task_alloc();
  v0[24] = v1;
  *v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return StocksKitCurrencyCache.provider.getter();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 184);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[9];
  swift_release();
  v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = v0[9];
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0[9], &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    v6 = StocksKitCurrencyCache.Provider.name.getter();
    v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  v0[25] = v6;
  v0[26] = v7;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;

  v0[27] = static MainActor.shared.getter();
  v0[28] = dispatch thunk of Actor.unownedExecutor.getter();
  v0[29] = v1;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v0[30] = static StocksKitCurrencyCache.shared.getter();
  v3 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0D09E08] + MEMORY[0x1E0D09E08]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[31] = v1;
  *v1 = v0;
  v1[1] = closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v3(v0[8]);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 240);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  Class v25;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate);
  if (v2)
  {
    v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
    v4 = *(_QWORD *)(v0 + 208);
    if (v3)
    {
      if (v4)
      {
        v5 = *(_QWORD *)(v0 + 200);
        v6 = v3;
        v7 = (void *)MEMORY[0x1DF0E41AC](v5, v4);
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = v3;
        v7 = 0;
      }
      v16 = *(_QWORD *)(v0 + 56);
      outlined init with copy of Date?(*(_QWORD *)(v0 + 64), v16);
      v17 = type metadata accessor for Date();
      v18 = *(_QWORD *)(v17 - 8);
      isa = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
      {
        v20 = *(_QWORD *)(v0 + 56);
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v17);
      }
      v21 = *(void **)(v0 + 144);
      v22 = *(void **)(v0 + 128);
      v23 = *(void **)(v0 + 112);
      v24 = *(_QWORD *)(v0 + 64);
      v25 = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v3, sel_mathResultAttributionImage_darkModeImage_string_date_itemUUID_, v22, v21, v7, isa, v25);

      v14 = v24;
    }
    else
    {
      v11 = *(void **)(v0 + 144);
      v12 = *(void **)(v0 + 128);
      v13 = *(_QWORD *)(v0 + 64);

      swift_bridgeObjectRelease();
      v14 = v13;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v14, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    v8 = *(void **)(v0 + 144);
    v9 = *(void **)(v0 + 128);
    v10 = *(void **)(v0 + 112);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 64), &demangling cache variable for type metadata for Date?);

    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(void *a1)
{
  uint64_t v1;
  id v3;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc();
  v3 = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  id v3;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc();
  v3 = a1;
  return swift_task_switch();
}

void AnyCanvas.calculateDocumentSetTokens(_:itemUUID:graphable:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  Class isa;
  Class v14;
  char *v15;

  v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
  v7 = v6;
  ObjectType = swift_getObjectType();
  v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);

  v9 = v15;
  if (v15)
  {
    v10 = *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v10)
    {
      v11 = *(void **)(v10 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v11)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionToken);
        v12 = v11;
        isa = Array._bridgeToObjectiveC()().super.isa;
        v14 = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v12, sel_setTokens_forItemUUID_graphable_, isa, v14, a3 & 1);

        v9 = v15;
      }
    }

  }
}

Swift::Void __swiftcall AnyCanvas.calculateDocumentExpressionsChanged()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;
  id v11;
  PKDrawing *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  char v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78]();
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))(v3);
  v8 = v7;
  ObjectType = swift_getObjectType();
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);

  if (!v10)
    return;
  v11 = objc_msgSend(v10, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  PKDrawing._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = objc_msgSend(v13, sel_uuid);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v40 = &unk_1F046F2B8;
  v16 = swift_dynamicCastObjCProtocolConditional();
  if (!v16
    || ((v17 = (void *)v16,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (v18 = v17): (v18 = 0), !v18))
  {
    swift_unknownObjectRelease();

    return;
  }
  v19 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v19 != -1)
    swift_once();
  swift_beginAccess();
  v20 = static CalculateDocumentController.controllers;
  if (!*((_QWORD *)static CalculateDocumentController.controllers + 2))
  {
LABEL_19:
    swift_endAccess();

    swift_unknownObjectRelease_n();
    return;
  }
  swift_unknownObjectRetain();
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18);
  if ((v22 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  v23 = *(void **)(v20[7] + 8 * v21);
  swift_endAccess();
  v24 = v23;
  swift_unknownObjectRelease_n();
  v25 = (void *)CalculateDocumentController.calculateDocumentProvider.getter();
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)mathLogger);
  swift_unknownObjectRetain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    *(_DWORD *)v29 = 134218240;
    v30 = objc_msgSend(v25, sel_recognizedExpressions);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CHMathExpression);
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v38 = v24;
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease();
    v39 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    v33 = objc_msgSend(v25, sel_declaredVariables);
    v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    v35 = *(_QWORD *)(v34 + 16);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v27, v28, "Updating CalculateDocumentProvider: %ld, %ld", (uint8_t *)v29, 0x16u);
    MEMORY[0x1DF0E6558](v29, -1, -1);

    v24 = v38;
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  v36 = objc_msgSend(v10, sel_recognitionController);
  objc_msgSend(v36, sel_setCalculateDocumentProvider_, v25);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

void type metadata accessor for UIRectEdge(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIRectEdge);
}

void type metadata accessor for CGMutablePathRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGMutablePathRef);
}

uint64_t type metadata completion function for CGMutablePathRef(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for CGPathRef(255);
  *(_QWORD *)(a1 + 16) = v2;
  return 0;
}

void type metadata accessor for CGPathRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGPathRef);
}

void type metadata accessor for UIKeyModifierFlags(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for UIKeyModifierFlags);
}

void type metadata accessor for PDFDisplayBox(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PDFDisplayBox);
}

void type metadata accessor for CGContextRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGContextRef);
}

void type metadata accessor for UITextContentType(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UITextContentType);
}

void type metadata accessor for UITextStorageDirection(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UITextStorageDirection);
}

void type metadata accessor for CHMathExpressionType(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CHMathExpressionType);
}

void type metadata accessor for UILayoutConstraintAxis(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UILayoutConstraintAxis);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSDirectionalEdgeInsets);
}

uint64_t initializeBufferWithCopyOfBuffer for UIEdgeInsets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for UIEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UIEdgeInsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIEdgeInsets);
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSTextAlignment);
}

void type metadata accessor for NSWritingDirection(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for NSWritingDirection);
}

void type metadata accessor for NSUnderlineStyle(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSUnderlineStyle);
}

void type metadata accessor for CGLineCap(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGLineCap);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGImageRef);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CFStringRef);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGPathElement(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for CGPathElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGPathElement);
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for PDFDocumentWriteOption(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PDFDocumentWriteOption);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGPoint);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGColorRef);
}

void type metadata accessor for NSAttributedStringKey(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSAttributedStringKey);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CGAffineTransform(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGAffineTransform(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for CGAffineTransform);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGRect);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1DF0E15F0](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x1DF0E15FC](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight(double *a1@<X8>)
{
  *a1 = MEMORY[0x1DF0E1608]();
}

void protocol witness for SetAlgebra.init() in conformance UIRectCorner(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance UIRectCorner(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance UIRectCorner@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance UIRectCorner(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance UIRectCorner(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance UIRectCorner(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance UIRectCorner(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance UIRectCorner(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance UIRectCorner(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance UIRectCorner()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance UIRectCorner()
{
  return SetAlgebra.init<A>(_:)();
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance UIRectCorner(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CalculateKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CGContextType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UILayoutPriority()
{
  return Float._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UILayoutPriority(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1DF0E45D8](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UILayoutPriority(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x1DF0E45E4](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UILayoutPriority(float *a1@<X8>)
{
  *a1 = MEMORY[0x1DF0E45F0]();
}

void protocol witness for Hashable.hash(into:) in conformance NSTextAlignment()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UIRectEdge@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UIRectEdge(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef(uint64_t a1)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGColorRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CGLineCap()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CGLineCap()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGLineCap()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSTextAlignment()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSTextAlignment()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for SYErrorCode()
{
  id *v0;

  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for SYErrorCode@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSAttributedStringKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSAttributedStringKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x1DF0E41AC](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIRectEdge(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIRectCorner@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance UIRectCorner@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CGContextType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGPathRef(uint64_t a1)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGPathRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGPathRef()
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGPathRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CGPathRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x1DF0E6450](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGColorRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for SYErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for SYErrorCode(void *a1)
{
  id v2;

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for SYErrorCode()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for SYErrorCode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance UIKeyModifierFlags@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSAttributedStringKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1DF0E6450](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNotificationName()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CalculateKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CalculateKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&protocol conformance descriptor for CalculateKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&protocol conformance descriptor for CalculateKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance UILayoutPriority@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

float protocol witness for RawRepresentable.rawValue.getter in conformance UILayoutPriority@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UILayoutPriority()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance PDFDocumentWriteOption()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CGLineCap()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, (uint64_t (*)(uint64_t))type metadata accessor for CGLineCap, (uint64_t)&protocol conformance descriptor for CGLineCap);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AFTextContentType()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, (uint64_t (*)(uint64_t))type metadata accessor for AFTextContentType, (uint64_t)&protocol conformance descriptor for AFTextContentType);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, (uint64_t (*)(uint64_t))type metadata accessor for AFTextContentType, (uint64_t)&protocol conformance descriptor for AFTextContentType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGPathRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGPathRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UITextContentType()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t base witness table accessor for RawRepresentable in UITextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UITextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
}

uint64_t base witness table accessor for Equatable in UITextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
}

uint64_t base witness table accessor for Equatable in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, (uint64_t (*)(uint64_t))type metadata accessor for UIKeyModifierFlags, (uint64_t)&protocol conformance descriptor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, (uint64_t (*)(uint64_t))type metadata accessor for UIKeyModifierFlags, (uint64_t)&protocol conformance descriptor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for RawRepresentable in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, (uint64_t (*)(uint64_t))type metadata accessor for UIKeyModifierFlags, (uint64_t)&protocol conformance descriptor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for SetAlgebra in UIKeyModifierFlags()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIKeyModifierFlags and conformance UIKeyModifierFlags, (uint64_t (*)(uint64_t))type metadata accessor for UIKeyModifierFlags, (uint64_t)&protocol conformance descriptor for UIKeyModifierFlags);
}

uint64_t base witness table accessor for Equatable in CGPathRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, (uint64_t (*)(uint64_t))type metadata accessor for CGPathRef, (uint64_t)&protocol conformance descriptor for CGPathRef);
}

uint64_t base witness table accessor for Equatable in NSTextAlignment()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
}

uint64_t base witness table accessor for Equatable in NSWritingDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Hashable in CGPathRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, (uint64_t (*)(uint64_t))type metadata accessor for CGPathRef, (uint64_t)&protocol conformance descriptor for CGPathRef);
}

uint64_t base witness table accessor for Equatable in PDFDocumentWriteOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFDocumentWriteOption and conformance PDFDocumentWriteOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFDocumentWriteOption, (uint64_t)&protocol conformance descriptor for PDFDocumentWriteOption);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in NSAttributedStringKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorAttributeName()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance PDFPageImageInitializationOption()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for SYErrorCode()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorTraitKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance UITextContentType@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x1DF0E41AC](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  return Double.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UILayoutPriority()
{
  return Float.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UILayoutPriority()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  if ((*v0 & 0x7FFFFFFF) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UILayoutPriority()
{
  JUMPOUT(0x1DF0E51CCLL);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSAttributedStringKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CalculateKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalculateKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AFTextContentType()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UILayoutPriority(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF0E6438]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1DDB27B08()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDB27B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of StocksKitCurrencyCache.Provider?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for CGImageSourceRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGImageSourceRef);
}

void type metadata accessor for CFDictionaryRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CFDictionaryRef);
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIFontWeight);
}

void type metadata accessor for UIFontDescriptorTraitKey(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIFontDescriptorTraitKey);
}

void type metadata accessor for CFDataRef(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CFDataRef);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UILayoutPriority);
}

void type metadata accessor for PDFDocumentPermissions(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PDFDocumentPermissions);
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSNotificationName);
}

void type metadata accessor for PDFPageImageInitializationOption(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PDFPageImageInitializationOption);
}

void type metadata accessor for related decl 'e' for SYErrorCode(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, (unint64_t *)&lazy cache variable for type metadata for related decl 'e' for SYErrorCode);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

void type metadata accessor for AFTextContentType(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for AFTextContentType);
}

void type metadata accessor for UIPopoverArrowDirection(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIPopoverArrowDirection);
}

void type metadata accessor for PKGenerationModelAvailabilityStatus(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PKGenerationModelAvailabilityStatus);
}

void type metadata accessor for UIFontDescriptorAttributeName(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIFontDescriptorAttributeName);
}

void type metadata accessor for CalculateKey(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CalculateKey);
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for _NSRange);
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for CGPathElementType);
}

uint64_t base witness table accessor for RawRepresentable in CalculateKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&protocol conformance descriptor for CalculateKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CalculateKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&protocol conformance descriptor for CalculateKey);
}

uint64_t base witness table accessor for Equatable in CalculateKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CalculateKey and conformance CalculateKey, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&protocol conformance descriptor for CalculateKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

uint64_t base witness table accessor for Equatable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for SetAlgebra in UIPopoverArrowDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIPopoverArrowDirection and conformance UIPopoverArrowDirection, (uint64_t (*)(uint64_t))type metadata accessor for UIPopoverArrowDirection, (uint64_t)&protocol conformance descriptor for UIPopoverArrowDirection);
}

uint64_t base witness table accessor for RawRepresentable in AFTextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, (uint64_t (*)(uint64_t))type metadata accessor for AFTextContentType, (uint64_t)&protocol conformance descriptor for AFTextContentType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in AFTextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, (uint64_t (*)(uint64_t))type metadata accessor for AFTextContentType, (uint64_t)&protocol conformance descriptor for AFTextContentType);
}

uint64_t base witness table accessor for Equatable in AFTextContentType()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AFTextContentType and conformance AFTextContentType, (uint64_t (*)(uint64_t))type metadata accessor for AFTextContentType, (uint64_t)&protocol conformance descriptor for AFTextContentType);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Error in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for RawRepresentable in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for RawRepresentable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for Equatable in NSNotificationName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSNotificationName and conformance NSNotificationName, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, (uint64_t)&protocol conformance descriptor for NSNotificationName);
}

uint64_t base witness table accessor for RawRepresentable in UILayoutPriority()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UILayoutPriority()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
}

uint64_t base witness table accessor for Equatable in UILayoutPriority()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UILayoutPriority and conformance UILayoutPriority, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&protocol conformance descriptor for UILayoutPriority);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorTraitKey()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorTraitKey and conformance UIFontDescriptorTraitKey, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorTraitKey, (uint64_t)&protocol conformance descriptor for UIFontDescriptorTraitKey);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, (uint64_t (*)(uint64_t))type metadata accessor for UIFontWeight, (uint64_t)&protocol conformance descriptor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in PDFPageImageInitializationOption()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for SYErrorCode, (uint64_t)&protocol conformance descriptor for SYErrorCode);
}

void type metadata accessor for SYErrorCode(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for SYErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for SYErrorCode, (uint64_t)&protocol conformance descriptor for SYErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEB440], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SYErrorCode and conformance SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for SYErrorCode, (uint64_t)&protocol conformance descriptor for SYErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in SYErrorCode()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type related decl 'e' for SYErrorCode and conformance related decl 'e' for SYErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for SYErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for SYErrorCode);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorAttributeName()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF060], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGFloat, MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGFloat, MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CGFloat, MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF070], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF078], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEF098], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for UIRectCorner);
}

void type metadata accessor for PKSelectionType(uint64_t a1)
{
  type metadata accessor for UIRectEdge(a1, &lazy cache variable for type metadata for PKSelectionType);
}

void type metadata accessor for UIRectEdge(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Equatable in UIRectCorner()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&protocol conformance descriptor for UIRectCorner);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIRectCorner()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&protocol conformance descriptor for UIRectCorner);
}

uint64_t base witness table accessor for RawRepresentable in UIRectCorner()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&protocol conformance descriptor for UIRectCorner);
}

uint64_t base witness table accessor for SetAlgebra in UIRectCorner()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UIRectCorner and conformance UIRectCorner, (uint64_t (*)(uint64_t))type metadata accessor for UIRectCorner, (uint64_t)&protocol conformance descriptor for UIRectCorner);
}

void one-time initialization function for sidebarAttributedString()
{
  uint64_t v0;

  closure #1 in variable initialization expression of static PageLabelView.sidebarAttributedString();
  static PageLabelView.sidebarAttributedString = v0;
}

void closure #1 in variable initialization expression of static PageLabelView.sidebarAttributedString()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v0 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4C020);
  v1 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v0);

  if (v1)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_textAttachmentWithImage_, v1);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableAttributedString);
    v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_attributedStringWithAttachment_, v2);
    v4 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v5 = v3;
    v6 = (void *)MEMORY[0x1DF0E41AC](32, 0xE100000000000000);
    v7 = objc_msgSend(v4, sel_initWithString_, v6);

    objc_msgSend(v5, sel_appendAttributedString_, v7);
  }
  else
  {
    __break(1u);
  }
}

char *PageLabelView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  Class isa;
  id v57;
  objc_super v58;

  v9 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect;
  v10 = (void *)objc_opt_self();
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_effectWithStyle_, 0);
  v12 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  *(_QWORD *)&v11[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F58]), sel_initWithEffect_, 0);
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer] = 0;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 50.0, 50.0);
  v14 = OBJC_IVAR____TtC8PaperKit13PageLabelView_label;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit13PageLabelView_label] = v13;
  objc_msgSend(v13, sel_setOpaque_, 0);
  objc_msgSend(v13, sel_setBackgroundColor_, 0);
  objc_msgSend(v13, sel_setTextAlignment_, 1);
  v15 = (void *)objc_opt_self();
  v16 = v13;
  v17 = objc_msgSend(v15, sel_boldSystemFontOfSize_, 16.0);
  objc_msgSend(v16, sel_setFont_, v17);

  v18 = *(void **)&v11[v14];
  v19 = (void *)objc_opt_self();
  v20 = v18;
  v21 = objc_msgSend(v19, sel_blackColor);
  objc_msgSend(v20, sel_setTextColor_, v21);

  v22 = *(id *)&v11[v14];
  objc_msgSend(v22, sel_setAlpha_, 0.0);

  v58.receiver = v11;
  v58.super_class = (Class)type metadata accessor for PageLabelView();
  v23 = (char *)objc_msgSendSuper2(&v58, sel_initWithFrame_, a1, a2, a3, a4);
  v24 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  v25 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView];
  v26 = v23;
  objc_msgSend(v26, sel_addSubview_, v25);
  v27 = objc_msgSend(v25, sel_contentView);
  v28 = OBJC_IVAR____TtC8PaperKit13PageLabelView_label;
  objc_msgSend(v27, sel_addSubview_, *(_QWORD *)&v26[OBJC_IVAR____TtC8PaperKit13PageLabelView_label]);

  v29 = *(void **)&v23[v24];
  objc_msgSend(v29, sel__setContinuousCornerRadius_, 7.0);
  objc_msgSend(*(id *)&v26[v28], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v29, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v57 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1DDF31350;
  v31 = objc_msgSend(v29, sel_topAnchor);
  v32 = objc_msgSend(v26, sel_topAnchor);
  v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v32);

  *(_QWORD *)(v30 + 32) = v33;
  v34 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  v35 = objc_msgSend(v26, sel_bottomAnchor);
  v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_, v35);

  *(_QWORD *)(v30 + 40) = v36;
  v37 = objc_msgSend(*(id *)&v23[v24], sel_trailingAnchor);
  v38 = objc_msgSend(v26, (SEL)&selRef_done_);
  v39 = objc_msgSend(v37, sel_constraintEqualToAnchor_, v38);

  *(_QWORD *)(v30 + 48) = v39;
  v40 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  v41 = objc_msgSend(v26, sel_leadingAnchor);
  v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

  *(_QWORD *)(v30 + 56) = v42;
  v43 = objc_msgSend(*(id *)&v26[v28], sel_topAnchor);
  v44 = objc_msgSend(*(id *)&v23[v24], sel_topAnchor);
  v45 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v44, 6.0);

  *(_QWORD *)(v30 + 64) = v45;
  v46 = objc_msgSend(*(id *)&v26[v28], sel_bottomAnchor);
  v47 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  v48 = objc_msgSend(v46, sel_constraintEqualToAnchor_constant_, v47, -6.0);

  *(_QWORD *)(v30 + 72) = v48;
  v49 = objc_msgSend(*(id *)&v26[v28], sel_leadingAnchor);
  v50 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  v51 = objc_msgSend(v49, sel_constraintEqualToAnchor_constant_, v50, 10.0);

  *(_QWORD *)(v30 + 80) = v51;
  v52 = objc_msgSend(*(id *)&v26[v28], sel_trailingAnchor);
  v53 = objc_msgSend(*(id *)&v23[v24], sel_trailingAnchor);
  v54 = objc_msgSend(v52, sel_constraintEqualToAnchor_constant_, v53, -10.0);

  *(_QWORD *)(v30 + 88) = v54;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_activateConstraints_, isa);

  return v26;
}

id PageLabelView.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  void *v2;
  objc_super v4;

  v1 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer], sel_invalidate);
  v2 = *(void **)&v0[v1];
  *(_QWORD *)&v0[v1] = 0;

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PageLabelView();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall PageLabelView.showNow(in:with:)(UIView *in, Swift::String with)
{
  char *v2;
  char *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  char **v18;
  void *v19;
  UIView *v20;
  char v21;
  uint64_t v22;
  void *v23;
  id v24;
  Class isa;
  id v26;
  uint64_t v27;
  id v28;

  v3 = v2;
  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit13PageLabelView_label];
  objc_msgSend(v12, sel_setAlpha_, 0.4);
  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView], sel_setEffect_, *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect]);
  if (one-time initialization token for sidebarAttributedString != -1)
    swift_once();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, static PageLabelView.sidebarAttributedString);
  v14 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  swift_bridgeObjectRetain();
  v15 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v14, sel_initWithString_, v15);

  objc_msgSend(v13, sel_appendAttributedString_, v16);
  objc_msgSend(v12, sel_setAttributedText_, v13);
  v17 = objc_msgSend(v3, sel_superview);
  v18 = &selRef_addSubview_;
  if (v17)
  {
    v19 = v17;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v20 = in;
    v21 = static NSObject.== infix(_:_:)();

    if ((v21 & 1) != 0)
      v18 = &selRef_bringSubviewToFront_;
  }
  objc_msgSend(in, *v18, v3);
  v22 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
  v23 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer];
  if (v23)
  {
    v24 = v23;
    Date.init(timeIntervalSinceNow:)();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    objc_msgSend(v24, sel_setFireDate_, isa);

  }
  else
  {
    v26 = objc_msgSend((id)objc_opt_self(), sel_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_, v3, sel_fadeOut, 0, 1, 2.0);
    v28 = *(id *)&v3[v22];
    *(_QWORD *)&v3[v22] = v26;

  }
}

Swift::Void __swiftcall PageLabelView.fadeOut()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit13PageLabelView_timer))
  {
    v1 = (void *)objc_opt_self();
    v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v11 = partial apply for closure #1 in PageLabelView.fadeOut();
    v12 = v2;
    v3 = MEMORY[0x1E0C809B0];
    v7 = MEMORY[0x1E0C809B0];
    v8 = 1107296256;
    v9 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v10 = &block_descriptor;
    v4 = _Block_copy(&v7);
    swift_release();
    v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v11 = partial apply for closure #2 in PageLabelView.fadeOut();
    v12 = v5;
    v7 = v3;
    v8 = 1107296256;
    v9 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
    v10 = &block_descriptor_4;
    v6 = _Block_copy(&v7);
    swift_release();
    objc_msgSend(v1, sel_animateWithDuration_animations_completion_, v4, v6, 0.5);
    _Block_release(v6);
    _Block_release(v4);
  }
}

void closure #1 in PageLabelView.fadeOut()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (char *)v2;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit13PageLabelView_label), sel_setAlpha_, 0.0);
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView], sel_setEffect_, 0);

  }
}

void closure #2 in PageLabelView.fadeOut()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void *v6;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (char *)MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_removeFromSuperview);
    v5 = OBJC_IVAR____TtC8PaperKit13PageLabelView_timer;
    objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer], sel_invalidate);
    v6 = *(void **)&v4[v5];
    *(_QWORD *)&v4[v5] = 0;

  }
}

uint64_t type metadata accessor for PageLabelView()
{
  return objc_opt_self();
}

uint64_t sub_1DDB297D0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PageLabelView.fadeOut()()
{
  uint64_t v0;

  closure #1 in PageLabelView.fadeOut()(v0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void partial apply for closure #2 in PageLabelView.fadeOut()(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PageLabelView.fadeOut()(a1, v1);
}

void specialized PageLabelView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurEffect;
  *(_QWORD *)&v0[v1] = objc_msgSend((id)objc_opt_self(), sel_effectWithStyle_, 0);
  v2 = OBJC_IVAR____TtC8PaperKit13PageLabelView_blurView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F58]), sel_initWithEffect_, 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13PageLabelView_timer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(PPKGPInProcessMagicPaperViewController *_, UIImage didGenerate)
{
  void *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_class *v9;
  id v10;
  objc_class *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  PPKGPInProcessMagicPaperViewController *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  PPKGPInProcessMagicPaperViewController *v30;
  uint64_t v31;
  uint64_t v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78]();
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)generativeLogger);
  v8 = v2;
  v9 = didGenerate.super.isa;
  v10 = v8;
  v11 = v9;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v30 = _;
    v15 = v14;
    v16 = swift_slowAlloc();
    v32 = v16;
    *(_DWORD *)v15 = 136315650;
    v17 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001DDF4C0F0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2080;
    v19 = MEMORY[0x1DF0E49D4](-[objc_class size](v11, sel_size));
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v12, v13, "%s - %s: (image.size = %s)", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v16, -1, -1);
    v21 = v15;
    _ = v30;
    MEMORY[0x1DF0E6558](v21, -1, -1);

  }
  else
  {

  }
  v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
  v23 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  v24 = v11;
  swift_retain();
  v25 = _;
  v26 = static MainActor.shared.getter();
  v27 = (_QWORD *)swift_allocObject();
  v28 = MEMORY[0x1E0DF06E8];
  v27[2] = v26;
  v27[3] = v28;
  v27[4] = v23;
  v27[5] = v25;
  v27[6] = v24;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:), (uint64_t)v27);
  swift_release();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v6[18] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  v6[19] = v7;
  v6[20] = *(_QWORD *)(v7 - 8);
  v6[21] = swift_task_alloc();
  type metadata accessor for MainActor();
  v6[22] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 144);
    v7 = v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
    swift_beginAccess();
    outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v7, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    {
      outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(*(_QWORD *)(v0 + 144));
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
      v9 = v3;
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        *(_DWORD *)v12 = 136315138;
        v46 = v13;
        v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v10, v11, "%s returning (continuation is nil)", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v13, -1, -1);
        MEMORY[0x1DF0E6558](v12, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v21 = *(void **)(v0 + 128);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
      v22 = objc_msgSend(v21, sel_encodedRecipe);
      if (v22)
      {
        v23 = v22;
        v25 = *(_QWORD *)(v0 + 160);
        v24 = *(_QWORD *)(v0 + 168);
        v26 = *(_QWORD *)(v0 + 152);
        v27 = *(void **)(v0 + 136);
        v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v30 = v29;

        outlined copy of Data._Representation(v28, v30);
        CanvasGenerationTool.magicGenerativeState.setter(8u);
        *(_QWORD *)(v0 + 40) = v27;
        *(_QWORD *)(v0 + 48) = v28;
        *(_QWORD *)(v0 + 56) = v30;
        v31 = v27;
        CheckedContinuation.resume(returning:)();
        outlined consume of Data._Representation(v28, v30);

        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      }
      else
      {
        if (one-time initialization token for generativeLogger != -1)
          swift_once();
        v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)generativeLogger);
        v33 = v3;
        v34 = Logger.logObject.getter();
        v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc();
          v37 = swift_slowAlloc();
          v46 = v37;
          *(_DWORD *)v36 = 136315138;
          v38 = CanvasGenerationTool.nameAndPointerDescription.getter();
          *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1DDB0F000, v34, v35, "%s returning (encodedRecipe is nil)", v36, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1DF0E6558](v37, -1, -1);
          MEMORY[0x1DF0E6558](v36, -1, -1);
        }
        else
        {

        }
        v41 = *(_QWORD *)(v0 + 160);
        v40 = *(_QWORD *)(v0 + 168);
        v42 = *(_QWORD *)(v0 + 152);
        CanvasGenerationTool.magicGenerativeState.setter(9u);
        lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
        v43 = swift_allocError();
        *(_QWORD *)v44 = 0xD000000000000015;
        *(_QWORD *)(v44 + 8) = 0x80000001DDF4C120;
        *(_BYTE *)(v44 + 16) = 1;
        *(_QWORD *)(v0 + 96) = v43;
        CheckedContinuation.resume(throwing:)();

        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v46 = v20;
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001DDF4C0D0, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v17, v18, "%s returning (self is nil)", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v20, -1, -1);
      MEMORY[0x1DF0E6558](v19, -1, -1);
    }

  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[12] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  v4[13] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>);
  v4[14] = v5;
  v4[15] = *(_QWORD *)(v5 - 8);
  v4[16] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[17] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 104);
    v7 = v2 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_continuation;
    swift_beginAccess();
    outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(v7, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    {
      outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(*(_QWORD *)(v0 + 104));
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)generativeLogger);
      v9 = v3;
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v42 = swift_slowAlloc();
        v13 = v42;
        *(_DWORD *)v12 = 136315138;
        v14 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v10, v11, "%s returning (continuation is nil)", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v13, -1, -1);
        MEMORY[0x1DF0E6558](v12, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
      if (MagicGenerativePlaygroundState.rawValue.getter(*((_BYTE *)v3
                                                          + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool__magicGenerativeState)) == 0xD000000000000011
        && v21 == 0x80000001DDF4B8E0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
          v36 = *(_QWORD *)(v0 + 120);
          v35 = *(_QWORD *)(v0 + 128);
          v37 = *(_QWORD *)(v0 + 112);
          CanvasGenerationTool.magicGenerativeState.setter(7u);
          lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError();
          v38 = swift_allocError();
          *(_QWORD *)v39 = 0;
          *(_QWORD *)(v39 + 8) = 0;
          *(_BYTE *)(v39 + 16) = 2;
          *(_QWORD *)(v0 + 80) = v38;
          CheckedContinuation.resume(throwing:)();

          (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
          goto LABEL_23;
        }
      }
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)generativeLogger);
      v24 = v3;
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.error.getter();
      v27 = os_log_type_enabled(v25, v26);
      v29 = *(_QWORD *)(v0 + 120);
      v28 = *(_QWORD *)(v0 + 128);
      v30 = *(_QWORD *)(v0 + 112);
      if (v27)
      {
        v41 = *(_QWORD *)(v0 + 120);
        v31 = (uint8_t *)swift_slowAlloc();
        v32 = swift_slowAlloc();
        v42 = v32;
        *(_DWORD *)v31 = 136315138;
        v33 = CanvasGenerationTool.nameAndPointerDescription.getter();
        *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v25, v26, "%s returning (continuation has been cancelled already)", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v32, -1, -1);
        MEMORY[0x1DF0E6558](v31, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v28, v30);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      }
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)generativeLogger);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v42 = v20;
      *(_DWORD *)v19 = 136315138;
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001DDF4C0D0, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v17, v18, "%s returning (self is nil)", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v20, -1, -1);
      MEMORY[0x1DF0E6558](v19, -1, -1);
    }

  }
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78]();
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  v4 = v0;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v18 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001DDF4C0A0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v5, v6, "%s - %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v8, -1, -1);
    MEMORY[0x1DF0E6558](v7, -1, -1);

  }
  else
  {

  }
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v13 = static MainActor.shared.getter();
  v14 = (_QWORD *)swift_allocObject();
  v15 = MEMORY[0x1E0DF06E8];
  v14[2] = v13;
  v14[3] = v15;
  v14[4] = v12;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:), (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1DDB2AD60()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDB2AD84()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:)(a1, v4, v5, v6);
}

uint64_t outlined init with copy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CheckedContinuation<ImageWithEncodedRecipe, Error>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<ImageWithEncodedRecipe, Error>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CanvasGenerationToolError and conformance CanvasGenerationToolError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError;
  if (!lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasGenerationToolError, &type metadata for CanvasGenerationToolError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasGenerationToolError and conformance CanvasGenerationToolError);
  }
  return result;
}

uint64_t sub_1DDB2AEE8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasGenerationTool.magicPaperViewController(_:didGenerate:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

id TiledDocumentView.init(in:)(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  uint64_t ObjCClassFromMetadata;
  id v7;
  id v8;
  void *v9;
  id v10;
  objc_super v12;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  v3 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController;
  v4 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, sel_init);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments] = MEMORY[0x1E0DEE9D8];

  type metadata accessor for PKDrawingCoherence(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for TiledDocumentView();
  v7 = objc_msgSendSuper2(&v12, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, a1, 1, ObjCClassFromMetadata, 0);
  v8 = objc_msgSend(v7, sel_canvasView);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, sel_setOpaque_, 0);

  }
  v10 = v7;
  objc_msgSend(v10, sel_setCanvasViewZOrderPolicy_, 1);

  return v10;
}

Swift::Void __swiftcall TiledDocumentView.didMoveToWindow()()
{
  char *v0;
  char *v1;
  id v2;
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  id v10;
  objc_super v11;
  objc_super v12;

  v1 = v0;
  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for TiledDocumentView();
  objc_msgSendSuper2(&v12, sel_didMoveToWindow);
  v2 = objc_msgSend(v0, sel_window);

  if (v2)
  {
    v3 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TiledSelectionInteractionDelegate<TiledDocumentView>);
    v4 = objc_allocWithZone(v3);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v11.receiver = v4;
    v11.super_class = v3;
    v5 = objc_msgSendSuper2(&v11, sel_init);
    v6 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate;
    v7 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate];
    *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = v5;

    v8 = objc_msgSend(v1, sel_selectionInteraction);
    objc_msgSend(v8, sel_setDelegate_, *(_QWORD *)&v1[v6]);

    *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = &protocol witness table for TiledDocumentView;
    swift_unknownObjectWeakAssign();
    v9 = v1;
    CanvasElementController.delegate.didset();

  }
  else
  {
    v10 = objc_msgSend(v0, sel_selectionInteraction);
    objc_msgSend(v10, sel_setDelegate_, 0);

    *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController]
              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate
              + 8) = 0;
    swift_unknownObjectWeakAssign();
    CanvasElementController.delegate.didset();
  }
}

uint64_t TiledDocumentView.paperAttachments.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t);
  id v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  v2 = *v1;
  result = MEMORY[0x1E0DEE9D8];
  v12 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v5 = (uint64_t *)(v2 + 40);
    do
    {
      v6 = (void *)*(v5 - 1);
      v7 = *v5;
      ObjectType = swift_getObjectType();
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 104);
      v10 = v6;
      v11 = v9(ObjectType, v7);

      specialized Array.append<A>(contentsOf:)(v11);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

char *TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter()
{
  void *v0;
  char *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  char *v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t (*v18)(uint64_t, uint64_t);
  id v19;
  unint64_t v20;
  uint64_t v21;

  v1 = v0;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = (id)v2;
    v4 = v1;
LABEL_7:

    v6 = v4;
    v7 = specialized UIView.firstDescendent(where:)(v3);

    if (v7)
    {
      type metadata accessor for TiledTextView();
      if (swift_dynamicCastClass())
      {
        v8 = v7;
        v9 = TiledTextView.paperAttachmentsIncludingSubAttachments.getter();

        return v9;
      }

    }
  }
  else
  {
    v4 = v1;
    while (1)
    {
      v3 = objc_msgSend(v4, sel_superview);

      if (!v3)
        break;
      v4 = v3;
      objc_opt_self();
      v5 = swift_dynamicCastObjCClass();
      if (v5)
      {
        v3 = (id)v5;
        goto LABEL_7;
      }
    }
  }
  v11 = &v1[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments];
  swift_beginAccess();
  v12 = *(_QWORD *)v11;
  v21 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = (uint64_t *)(v12 + 40);
    do
    {
      v15 = (void *)*(v14 - 1);
      v16 = *v14;
      ObjectType = swift_getObjectType();
      v18 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 104);
      v19 = v15;
      v20 = v18(ObjectType, v16);

      specialized Array.append<A>(contentsOf:)(v20);
      v14 += 2;
      --v13;
    }
    while (v13);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  return (char *)v21;
}

uint64_t TiledDocumentView.attachments()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t ObjectType;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v15;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  v2 = *v1;
  v3 = MEMORY[0x1E0DEE9D8];
  v15 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n();
    v5 = (uint64_t *)(v2 + 40);
    v6 = MEMORY[0x1E0DEE9D8];
    do
    {
      v8 = (void *)*(v5 - 1);
      v9 = *v5;
      ObjectType = swift_getObjectType();
      v11 = v8;
      v12 = objc_msgSend(v11, sel_window);

      if (v12)
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 96))(ObjectType, v9);
      else
        v7 = v6;

      specialized Array.append<A>(contentsOf:)(v7);
      v5 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n();
    v3 = v15;
  }
  swift_bridgeObjectRetain();
  if (v3 >> 62)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKAttachment);
    v13 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    v13 = v3;
  }
  swift_bridgeObjectRelease();
  return v13;
}

char *specialized TiledPaperKitView.selectedOrMostVisibleAttachment()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *result;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v45 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v6);
  v44 = (char *)&v34 - v7;
  v8 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v0;
  v12 = TiledTextView.paperAttachments.getter();
  v13 = v12;
  if (!(v12 >> 62))
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease_n();
    return (char *)specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledTextView.paperAttachmentsIncludingSubAttachments.getter);
  }
LABEL_31:
  swift_bridgeObjectRetain();
  v14 = _CocoaArrayWrapper.endIndex.getter();
  if (!v14)
    goto LABEL_25;
LABEL_3:
  v15 = 0;
  v37 = v13;
  v38 = v13 & 0xC000000000000001;
  v35 = v13 + 32;
  v36 = v14;
  v41 = v11;
  while (1)
  {
    if (v38)
    {
      result = (char *)MEMORY[0x1DF0E4D64](v15, v13);
      v17 = __OFADD__(v15++, 1);
      if (v17)
        goto LABEL_30;
    }
    else
    {
      result = (char *)*(id *)(v35 + 8 * v15);
      v17 = __OFADD__(v15++, 1);
      if (v17)
        goto LABEL_30;
    }
    v18 = *(_QWORD *)&result[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v18)
      break;
    v40 = result;
    v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v39 = v15;
      v47 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
      v21 = specialized Set.startIndex.getter(v19);
      v23 = v22;
      v25 = v24 & 1;
      v46 = v19 + 56;
      while ((v21 & 0x8000000000000000) == 0 && v21 < 1 << *(_BYTE *)(v19 + 32))
      {
        if (((*(_QWORD *)(v46 + (((unint64_t)v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_28;
        if (*(_DWORD *)(v19 + 36) != (_DWORD)v23)
          goto LABEL_29;
        v26 = v44;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v44, *(_QWORD *)(v19 + 48) + *(_QWORD *)(v2 + 72) * v21, v1);
        v27 = v45;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v45, v26, v1);
        MEMORY[0x1DF0E3168](v1);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v27, v1);
        v28 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v28 = v47;
        }
        v13 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v13 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v13 + 1, 1);
          v28 = v47;
        }
        *(_QWORD *)(v28 + 16) = v13 + 1;
        v11 = v41;
        (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v28+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v13, v41, v43);
        v47 = v28;
        v30 = specialized _NativeSet.index(after:)(v21, v23, v25 & 1, v19);
        v21 = v30;
        v23 = v31;
        v25 = v32 & 1;
        if (!--v20)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v30, v31, v32 & 1);
          swift_bridgeObjectRelease();
          v14 = v36;
          v13 = v37;
          v15 = v39;
          goto LABEL_23;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v28 = MEMORY[0x1E0DEE9D8];
LABEL_23:
    v33 = *(_QWORD *)(v28 + 16);
    swift_bridgeObjectRelease();
    if (v33)
    {
      swift_bridgeObjectRelease_n();
      return (char *)v40;
    }

    if (v15 == v14)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

void specialized TiledPaperKitView.selectedOrMostVisibleAttachment()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t (*v19)(uint64_t, uint64_t);
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v54 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v6);
  v53 = (char *)&v45 - v7;
  v8 = type metadata accessor for CRKeyPath();
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v56 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v0;
  v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments);
  swift_beginAccess();
  v12 = *v11;
  v13 = MEMORY[0x1E0DEE9D8];
  v57 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    v15 = (uint64_t *)(v12 + 40);
    do
    {
      v16 = (void *)*(v15 - 1);
      v17 = *v15;
      ObjectType = swift_getObjectType();
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 104);
      v20 = v16;
      v21 = v19(ObjectType, v17);

      specialized Array.append<A>(contentsOf:)(v21);
      v15 += 2;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    v22 = v57;
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9D8];
  }
  v46 = v22;
  if (!(v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v47 = v23;
    if (v23)
      goto LABEL_8;
LABEL_26:
    swift_bridgeObjectRelease_n();
    specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
    return;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  v47 = _CocoaArrayWrapper.endIndex.getter();
  if (!v47)
    goto LABEL_26;
LABEL_8:
  v24 = 0;
  v48 = v46 + 32;
  while (1)
  {
    v25 = v24 + 1;
    if (__OFADD__(v24, 1))
      goto LABEL_31;
    v26 = *(char **)(v48 + 8 * v24);
    v27 = *(_QWORD *)&v26[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v27)
      break;
    v28 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v49 = v25;
      v50 = v26;
      v57 = v13;
      v30 = v26;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      v31 = specialized Set.startIndex.getter(v28);
      v13 = v32;
      v34 = v33 & 1;
      v55 = v28 + 56;
      while ((v31 & 0x8000000000000000) == 0 && v31 < 1 << *(_BYTE *)(v28 + 32))
      {
        if (((*(_QWORD *)(v55 + (((unint64_t)v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_29;
        if (*(_DWORD *)(v28 + 36) != (_DWORD)v13)
          goto LABEL_30;
        v35 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v53, *(_QWORD *)(v28 + 48) + *(_QWORD *)(v2 + 72) * v31, v1);
        v36 = v54;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v54, v35, v1);
        MEMORY[0x1DF0E3168](v1);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v36, v1);
        v37 = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = v57;
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          v37 = v57;
        }
        *(_QWORD *)(v37 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v37+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v39, v56, v52);
        v57 = v37;
        v40 = specialized _NativeSet.index(after:)(v31, v13, v34 & 1, v28);
        v31 = v40;
        v13 = v41;
        v34 = v42 & 1;
        if (!--v29)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v40, v41, v42 & 1);
          swift_bridgeObjectRelease();
          v13 = MEMORY[0x1E0DEE9D8];
          v25 = v49;
          v26 = v50;
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v43 = v26;
    v37 = v13;
LABEL_24:
    v44 = *(_QWORD *)(v37 + 16);
    swift_bridgeObjectRelease();
    if (v44)
    {
      swift_bridgeObjectRelease_n();
      return;
    }

    v24 = v25;
    if (v25 == v47)
      goto LABEL_26;
  }
  __break(1u);
}

id specialized TiledPaperKitView.mostVisibleAttachment()()
{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledTextView.paperAttachmentsIncludingSubAttachments.getter);
}

{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
}

id specialized TiledPaperKitView.mostVisibleAttachment()(uint64_t (*a1)(void))
{
  void *v1;
  id v3;
  void *v4;
  unint64_t v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  double v18;
  id v19;
  double *v20;
  double v21;
  CGRect v23;
  CGRect v24;

  v3 = objc_msgSend(v1, sel_window);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = specialized TiledPaperKitView.paperAttachments(includeStandInAttachment:)(1, a1);
  objc_msgSend(v4, sel_bounds);
  x = v23.origin.x;
  y = v23.origin.y;
  width = v23.size.width;
  height = v23.size.height;
  MidX = CGRectGetMidX(v23);
  v24.origin.x = x;
  v24.origin.y = y;
  v24.size.width = width;
  v24.size.height = height;
  MidY = CGRectGetMidY(v24);
  v12 = v4;
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit9AnyCanvasCG_AH_12CoreGraphics7CGFloatVts5NeverOTg503_s8d47Kit05TiledaB4ViewPAAE21mostVisibleAttachmentAA9fg10CSgyFAF_12h9Graphics7J9VtAFXEfU_So8UIWindowCSo7CGPointVTf1cn_nTf4ngn_n(v5, (uint64_t)v12, MidX, MidY);
  swift_bridgeObjectRelease();

  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();

    return 0;
  }
  v15 = *(void **)(v13 + 32);
  v16 = v14 - 1;
  if (v14 == 1)
  {
    v17 = v15;
    swift_bridgeObjectRelease();

  }
  else
  {
    v18 = *(double *)(v13 + 40);
    v19 = v15;
    swift_bridgeObjectRetain();
    v20 = (double *)(v13 + 56);
    v17 = v19;
    do
    {
      v21 = *v20;
      if (*v20 < v18)
      {
        v17 = *((id *)v20 - 1);

        v19 = v17;
        v18 = v21;
      }
      v20 += 2;
      --v16;
    }
    while (v16);

    swift_bridgeObjectRelease_n();
  }
  return v17;
}

id TiledDocumentView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TiledDocumentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TiledDocumentView()
{
  return objc_opt_self();
}

uint64_t protocol witness for TiledPaperKitView.currentPaperView.getter in conformance TiledDocumentView()
{
  uint64_t v0;

  return MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView);
}

void protocol witness for TiledPaperKitView.currentPaperView.setter in conformance TiledDocumentView(void *a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8) = a2;
  swift_unknownObjectWeakAssign();

}

id protocol witness for TiledPaperKitView.canvasElementController.getter in conformance TiledDocumentView()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
}

id protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance TiledDocumentView()
{
  return specialized TiledPaperKitView.mostVisibleAttachment()((uint64_t (*)(void))TiledDocumentView.paperAttachmentsIncludingSubAttachments.getter);
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerToolPicker.getter in conformance TiledDocumentView()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker);
  v2 = v1;
  return v1;
}

uint64_t specialized TiledPaperKitView.paperAttachments(includeStandInAttachment:)(char a1, uint64_t (*a2)(void))
{
  void *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  id v19;
  uint64_t v21;
  CGRect v22;
  CGRect v23;

  v4 = a2();
  v21 = v4;
  if ((a1 & 1) != 0)
  {
    v5 = specialized TiledPaperKitView.visibleStandInPaperAttachmentView()();
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, sel_bounds);
      objc_msgSend(v6, sel_convertRect_toCoordinateSpace_, v2);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;
      objc_msgSend(v2, sel_bounds);
      v23.origin.x = v15;
      v23.origin.y = v16;
      v23.size.width = v17;
      v23.size.height = v18;
      v22.origin.x = v8;
      v22.origin.y = v10;
      v22.size.width = v12;
      v22.size.height = v14;
      if (CGRectIntersectsRect(v22, v23))
      {
        v19 = v6;
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        return v21;
      }
      else
      {

      }
    }
  }
  return v4;
}

void *specialized TiledPaperKitView.visibleStandInPaperAttachmentView()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;

  objc_msgSend(v0, sel_updateEndAttachment);
  v1 = objc_msgSend(v0, sel_standInAttachmentView);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_attachmentContainerView);

    if (!v3)
      return 0;
    type metadata accessor for AnyCanvas();
    v4 = (void *)swift_dynamicCastClass();
    v2 = v4;
    if (!v4)
    {

      return v2;
    }
    if ((objc_msgSend(v4, sel_isHidden) & 1) != 0)
    {

      return 0;
    }
  }
  return v2;
}

void specialized TiledDocumentView.init(coder:)()
{
  char *v0;
  uint64_t v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_currentPaperView + 8] = 0;
  swift_unknownObjectWeakInit();
  v1 = OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementController()), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_selectionInteractionDelegate] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17TiledDocumentView__paperAttachments] = MEMORY[0x1E0DEE9D8];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay8PaperKit9AnyCanvasCG_AH_12CoreGraphics7CGFloatVts5NeverOTg503_s8d47Kit05TiledaB4ViewPAAE21mostVisibleAttachmentAA9fg10CSgyFAF_12h9Graphics7J9VtAFXEfU_So8UIWindowCSo7CGPointVTf1cn_nTf4ngn_n(unint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  id v22;
  double MinX;
  double MaxX;
  double v25;
  double MinY;
  double MaxY;
  double v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  if (a1 >> 62)
    goto LABEL_26;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    if (!v8)
      return v9;
    v33 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v33;
    while (v8 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1DF0E4D64](v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      objc_msgSend(v12, sel_bounds);
      objc_msgSend(v13, sel_convertRect_toCoordinateSpace_, a2);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v22 = v13;
      v34.origin.x = v15;
      v34.origin.y = v17;
      v34.size.width = v19;
      v34.size.height = v21;
      MinX = CGRectGetMinX(v34);
      v35.origin.x = v15;
      v35.origin.y = v17;
      v35.size.width = v19;
      v35.size.height = v21;
      MaxX = CGRectGetMaxX(v35);
      if (MaxX >= a3)
        MaxX = a3;
      if (MinX <= a3)
        v25 = MaxX;
      else
        v25 = MinX;
      v36.origin.x = v15;
      v36.origin.y = v17;
      v36.size.width = v19;
      v36.size.height = v21;
      MinY = CGRectGetMinY(v36);
      v37.origin.x = v15;
      v37.origin.y = v17;
      v37.size.width = v19;
      v37.size.height = v21;
      MaxY = CGRectGetMaxY(v37);

      if (MaxY >= a4)
        v28 = a4;
      else
        v28 = MaxY;
      if (MinY <= a4)
        v29 = v28;
      else
        v29 = MinY;
      v31 = *(_QWORD *)(v33 + 16);
      v30 = *(_QWORD *)(v33 + 24);
      if (v31 >= v30 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
      ++v11;
      *(_QWORD *)(v33 + 16) = v31 + 1;
      v32 = v33 + 16 * v31;
      *(_QWORD *)(v32 + 32) = v22;
      *(double *)(v32 + 40) = (v25 - a3) * (v25 - a3) + (v29 - a4) * (v29 - a4);
      if (v8 == v11)
        return v9;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined destroy of weak AnyContainerCanvasElementView?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t GraphableExpressionState.expression.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_retain();
}

uint64_t closure #1 in GraphableExpressionState.expression.setter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  swift_retain();
  return swift_release();
}

uint64_t GraphableExpressionState.enabled.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t closure #1 in GraphableExpressionState.enabled.setter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t GraphableExpressionState.color.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_retain();
}

uint64_t closure #1 in GraphableExpressionState.color.setter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = a2;
  swift_retain();
  return swift_release();
}

uint64_t GraphableExpressionState.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v3 = v1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t key path getter for GraphableExpressionState.id : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t key path setter for GraphableExpressionState.id : GraphableExpressionState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v9 = *a2;
  swift_getKeyPath();
  v12 = v9;
  v13 = v8;
  v14 = v9;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t closure #1 in GraphableExpressionState.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a2, v4);
  return swift_endAccess();
}

uint64_t GraphableExpressionState.shouldBeObserved.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved);
}

uint64_t closure #1 in GraphableExpressionState.shouldBeObserved.setter(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) = a2;
  return result;
}

uint64_t GraphableExpressionState.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
  v4 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GraphableExpressionState()
{
  return type metadata accessor for GraphableExpressionState();
}

uint64_t type metadata accessor for GraphableExpressionState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GraphableExpressionState;
  if (!type metadata singleton initialization cache for GraphableExpressionState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GraphableExpressionState()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in GraphableExpressionState()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
}

uint64_t protocol witness for Identifiable.id.getter in conformance GraphableExpressionState@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v4 = v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t partial apply for closure #1 in GraphableExpressionState.id.setter()
{
  uint64_t v0;

  return closure #1 in GraphableExpressionState.id.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void one-time initialization function for spacing()
{
  static AttributeStylingButton.spacing = 0x4000000000000000;
}

UIColor_optional __swiftcall AttributeStylingButton.resolvedBackgroundColor()()
{
  unsigned __int8 *v0;
  void *v1;
  char **v2;
  int v3;
  objc_class *v4;
  Swift::Bool v5;
  objc_super v6;
  UIColor_optional result;

  v6.receiver = v0;
  v6.super_class = (Class)swift_getObjectType();
  if ((objc_msgSendSuper2(&v6, sel_isSelected) & 1) != 0
    || objc_msgSend(v0, sel_isHighlighted))
  {
    v1 = (void *)objc_opt_self();
    v2 = &selRef_systemBlueColor;
  }
  else
  {
    v3 = v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle];
    v1 = (void *)objc_opt_self();
    v2 = &selRef_tertiarySystemFillColor;
    if (v3)
      v2 = &selRef_quaternarySystemFillColor;
  }
  v4 = (objc_class *)objc_msgSend(v1, *v2);
  result.value.super.isa = v4;
  result.is_nil = v5;
  return result;
}

id AttributeStylingButton.resolvedTintColor()()
{
  unsigned __int8 *v0;
  objc_class *ObjectType;
  int v2;
  void *v3;
  char **v4;
  id v5;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  if (!objc_msgSend(v0, sel_isEnabled))
    return objc_msgSend((id)objc_opt_self(), sel_systemGray2Color);
  v2 = v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle];
  v3 = (void *)objc_opt_self();
  v4 = &selRef_systemGray3Color;
  if (!v2)
    v4 = &selRef_secondaryLabelColor;
  v5 = objc_msgSend(v3, *v4);
  v8.receiver = v0;
  v8.super_class = ObjectType;
  if ((objc_msgSendSuper2(&v8, sel_isSelected) & 1) != 0
    || objc_msgSend(v0, sel_isHighlighted))
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);

    return v6;
  }
  return v5;
}

Swift::Void __swiftcall AttributeStylingButton.updateTintColor()()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  if (v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] == 1)
  {
    v1 = objc_msgSend(v0, sel_traitCollection);
    v2 = objc_msgSend(v1, sel_userInterfaceStyle);

    v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView];
    v4 = AttributeStylingButton.resolvedTintColor()();
    objc_msgSend(v3, sel_setTintColor_, v4);

    if (v2 == (id)2)
      v5 = 1;
    else
      v5 = 2;
    objc_msgSend(v3, sel_setOverrideUserInterfaceStyle_, v5);
  }
  else
  {
    v6 = AttributeStylingButton.resolvedTintColor()();
    objc_msgSend(v0, sel_setTintColor_, v6);

  }
}

id AttributeStylingButton.isSelected.didset()
{
  void *v0;
  unsigned __int8 v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  objc_super v10;

  v10.receiver = v0;
  v10.super_class = (Class)swift_getObjectType();
  v1 = objc_msgSendSuper2(&v10, sel_isSelected);
  v2 = *MEMORY[0x1E0DC46B0];
  v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  if ((v3 & v2) == v2)
    v4 = 0;
  else
    v4 = v2;
  v5 = v4 | v3;
  v6 = -1;
  if ((v3 & v2) != 0)
    v6 = ~v2;
  v7 = v6 & v3;
  if ((v1 & 1) != 0)
    v8 = v5;
  else
    v8 = v7;
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

id AttributeStylingButton.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AttributeStylingButton()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for UIPointerRegion()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIPointerRegion;
  if (!lazy cache variable for type metadata for UIPointerRegion)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPointerRegion);
  }
  return result;
}

uint64_t UnknownCanvasElementView.sharedCanvasElement.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD v10[5];
  char v11;

  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[4] = *(_QWORD *)((char *)v0 + direct field offset for UnknownCanvasElementView.canvasElementTag);
  v11 = 1;
  v8 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v8, v3);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  Capsule<>.rootID.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

_QWORD *UnknownCanvasElementView.init(canvasElement:tag:canvas:parentCanvasElement:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;

  v43 = a4;
  v44 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v4[direct field offset for UnknownCanvasElementView.displayedAsset];
  v13 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)&v4[direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels] = 0;
  *(_QWORD *)&v4[direct field offset for UnknownCanvasElementView.getImageTask] = 0;
  *(_QWORD *)&v4[direct field offset for UnknownCanvasElementView.appearanceStreamView] = 0;
  *(_QWORD *)&v4[direct field offset for UnknownCanvasElementView.canvasElementTag] = a2;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  v14 = v4;
  Capsule<>.subscript.getter();
  swift_release();
  v15 = v46;
  v16 = v47;
  v17 = v48;
  v18 = v49;
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, v46, v47, v48, v49);
  v20 = direct field offset for UnknownCanvasElementView.thumbnailView;
  *(_QWORD *)&v14[direct field offset for UnknownCanvasElementView.thumbnailView] = v19;
  objc_msgSend(v19, sel_setContentMode_, 2);
  objc_msgSend(*(id *)&v14[v20], sel_setClipsToBounds_, 1);
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, v15, v16, v17, v18);
  v22 = direct field offset for UnknownCanvasElementView.questionMarkView;
  *(_QWORD *)&v14[direct field offset for UnknownCanvasElementView.questionMarkView] = v21;
  objc_msgSend(v21, sel_setContentMode_, 1);
  objc_msgSend(*(id *)&v14[v22], sel_setClipsToBounds_, 1);
  v23 = *(id *)&v14[v22];
  v24 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF4C4C0);
  v25 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v24);

  objc_msgSend(v23, sel_setImage_, v25);
  v26 = objc_msgSend((id)objc_opt_self(), sel_effectWithStyle_, 18);
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F58]), sel_initWithEffect_, v26);
  *(_QWORD *)&v14[direct field offset for UnknownCanvasElementView.blurEffectView] = v27;
  objc_msgSend(v27, sel_setMaskView_, *(_QWORD *)&v14[v22]);
  v28 = v27;
  objc_msgSend(v28, sel_setFrame_, v15, v16, v17, v18);

  v45 = v8;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v30 = a1;
  v42 = v7;
  v29(v11, a1, v7);
  v31 = v43;
  v32 = v43;
  v33 = v44;
  v34 = v44;
  v35 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, v33, v31, v15, v16, v17, v18);

  v36 = *(_QWORD *)((char *)v35 + direct field offset for UnknownCanvasElementView.thumbnailView);
  v37 = v35;
  objc_msgSend(v37, sel_addSubview_, v36);
  objc_msgSend(v37, sel_addSubview_, *(_QWORD *)((char *)v37 + direct field offset for UnknownCanvasElementView.blurEffectView));
  v38 = one-time initialization token for imageMissingBackgroundColor;
  v39 = v37;
  if (v38 != -1)
    swift_once();
  objc_msgSend(v39, sel_setBackgroundColor_, static UIConstants.imageMissingBackgroundColor);
  v40 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4C4E0);
  objc_msgSend(v39, sel_setAccessibilityIdentifier_, v40);

  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v30, v42);
  return v39;
}

void @objc UnknownCanvasElementView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  char *v5;
  uint64_t v6;
  id v7;

  v5 = &a1[direct field offset for UnknownCanvasElementView.displayedAsset];
  v6 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)&a1[direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels] = 0;
  *(_QWORD *)&a1[direct field offset for UnknownCanvasElementView.getImageTask] = 0;
  *(_QWORD *)&a1[direct field offset for UnknownCanvasElementView.appearanceStreamView] = 0;
  v7 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void UnknownCanvasElementView.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + direct field offset for UnknownCanvasElementView.displayedAsset, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  swift_release();

}

id UnknownCanvasElementView.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  objc_super v3;

  if (*(_QWORD *)&v0[direct field offset for UnknownCanvasElementView.getImageTask])
  {
    v1 = swift_retain();
    MEMORY[0x1DF0E453C](v1, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id @objc UnknownCanvasElementView.__deallocating_deinit(char *a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  objc_super v6;

  if (*(_QWORD *)&a1[direct field offset for UnknownCanvasElementView.getImageTask])
  {
    v2 = a1;
    v3 = swift_retain();
    MEMORY[0x1DF0E453C](v3, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  else
  {
    v4 = a1;
  }
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

void @objc UnknownCanvasElementView.__ivar_destroyer(uint64_t a1)
{

  outlined destroy of StocksKitCurrencyCache.Provider?(a1 + direct field offset for UnknownCanvasElementView.displayedAsset, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  swift_release();

}

Swift::Void __swiftcall UnknownCanvasElementView.layoutSubviews()()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  id v15;
  objc_super v16;
  CGRect v17;
  CGRect v18;

  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for UnknownCanvasElementView();
  objc_msgSendSuper2(&v16, sel_layoutSubviews);
  v1 = *(id *)&v0[direct field offset for UnknownCanvasElementView.thumbnailView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);

  v2 = *(void **)&v0[direct field offset for UnknownCanvasElementView.blurEffectView];
  objc_msgSend(v0, sel_bounds);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(v0, sel_bounds);
  v12 = v11 * 0.2;
  objc_msgSend(v0, sel_bounds);
  v14 = v13 * 0.2;
  v17.origin.x = v4;
  v17.origin.y = v6;
  v17.size.width = v8;
  v17.size.height = v10;
  v18 = CGRectInset(v17, v12, v14);
  objc_msgSend(v2, sel_setFrame_, v18.origin.x, v18.origin.y, v18.size.width, v18.size.height);
  v15 = *(id *)&v0[direct field offset for UnknownCanvasElementView.questionMarkView];
  objc_msgSend(v2, sel_bounds);
  objc_msgSend(v15, sel_setFrame_);

  specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
}

void @objc UnknownCanvasElementView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  UnknownCanvasElementView.layoutSubviews()();

}

uint64_t type metadata accessor for UnknownCanvasElementView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for UnknownCanvasElementView;
  if (!type metadata singleton initialization cache for UnknownCanvasElementView)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for UnknownCanvasElementView()
{
  unint64_t v0;

  type metadata accessor for CRAsset?();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

Swift::Void __swiftcall UnknownCanvasElementView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(char *, uint64_t, uint64_t);
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  double Width;
  double Height;
  double v55;
  id v56;
  uint64_t v57;
  void *v58;
  id v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t *, char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  CGRect v105;
  CGRect v106;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2, v3);
  v92 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset?, CRAsset?));
  MEMORY[0x1E0C80A78](v93, v5);
  v95 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v100 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v90 = (uint64_t)&v87 - v13;
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v96 = (uint64_t *)((char *)&v87 - v16);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v87 - v18;
  v20 = type metadata accessor for CRAsset();
  v101 = *(_QWORD *)(v20 - 8);
  v102 = v20;
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v94 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v23;
  MEMORY[0x1E0C80A78](v22, v24);
  v103 = (char *)&v87 - v25;
  v26 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v87 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v31 = *(_QWORD *)(v30 - 8);
  v33 = MEMORY[0x1E0C80A78](v30, v32);
  v35 = (char *)&v87 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v36);
  v104 = (char *)&v87 - v37;
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  v38 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v38)
  {
    v40 = v38;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v38) + 0x668))();

  }
  v41 = (char *)v1 + *(_QWORD *)((*v39 & *v1) + 0x380);
  swift_beginAccess();
  v42 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v43 = v104;
  v42(v104, v41, v30);
  v44 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  Capsule<>.root.getter();
  v45 = *(void (**)(char *, uint64_t))(v31 + 8);
  v45(v43, v30);
  outlined destroy of UnknownCanvasElement((uint64_t)v29);
  v98 = v42;
  v99 = v41;
  v42(v35, v41, v30);
  v46 = v45;
  swift_getKeyPath();
  v97 = v44;
  Capsule<>.subscript.getter();
  swift_release();
  v45(v35, v30);
  v48 = v101;
  v47 = v102;
  v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
  v50 = (_QWORD *)&metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
  v51 = (_QWORD *)&metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
  if (v49(v19, 1, v102) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    objc_msgSend(*(id *)((char *)v1 + direct field offset for UnknownCanvasElementView.thumbnailView), sel_setImage_, 0);
    v52 = 0;
LABEL_26:
    *(_QWORD *)((char *)v1 + v50[276]) = v52;
    v84 = v104;
    v98(v104, v99, v30);
    swift_getKeyPath();
    v85 = (uint64_t)v100;
    Capsule<>.subscript.getter();
    swift_release();
    v46(v84, v30);
    v86 = (uint64_t)v1 + v51[275];
    swift_beginAccess();
    outlined assign with take of CRAsset?(v85, v86);
    swift_endAccess();
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    return;
  }
  v89 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v89(v103, v19, v47);
  objc_msgSend(v1, sel_bounds);
  Width = CGRectGetWidth(v105);
  objc_msgSend(v1, sel_bounds);
  Height = CGRectGetHeight(v106);
  if (Width > Height)
    v55 = Width;
  else
    v55 = Height;
  v56 = objc_msgSend(v1, sel_window);
  v57 = v47;
  if (v56)
  {
    v58 = v56;
    v59 = objc_msgSend(v56, sel_screen);

    objc_msgSend(v59, sel_scale);
    v61 = v60;

  }
  else
  {
    v61 = 1.0;
  }
  v63 = (uint64_t)v95;
  v62 = (uint64_t)v96;
  v64 = v55 * v61;
  if ((~COERCE__INT64(v55 * v61) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v64 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v64 < 9.22337204e18)
  {
    v95 = (char *)(uint64_t)v64;
    v88 = *(void (**)(uint64_t *, char *, uint64_t))(v48 + 16);
    v88(v96, v103, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v62, 0, 1, v57);
    v65 = (uint64_t)v1 + direct field offset for UnknownCanvasElementView.displayedAsset;
    swift_beginAccess();
    v66 = v63 + *(int *)(v93 + 48);
    outlined init with copy of CRAsset?(v62, v63);
    outlined init with copy of CRAsset?(v65, v66);
    if (v49((char *)v63, 1, v57) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v62, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      if (v49((char *)v66, 1, v57) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v51 = (_QWORD *)&metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
        v67 = v103;
LABEL_21:
        if (*(char **)((char *)v1 + direct field offset for UnknownCanvasElementView.displayedMaxDimensionInPixels) == v95)
        {
LABEL_25:
          (*(void (**)(char *, uint64_t))(v48 + 8))(v67, v57);
          v50 = &metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
          v52 = v95;
          goto LABEL_26;
        }
LABEL_22:
        v96 = (uint64_t *)v46;
        v93 = direct field offset for UnknownCanvasElementView.getImageTask;
        if (*(_QWORD *)((char *)v1 + direct field offset for UnknownCanvasElementView.getImageTask))
        {
          v73 = swift_retain();
          MEMORY[0x1DF0E453C](v73, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
          swift_release();
        }
        v74 = type metadata accessor for TaskPriority();
        v75 = (uint64_t)v92;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v92, 1, 1, v74);
        v76 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v77 = v94;
        v88((uint64_t *)v94, v67, v57);
        v78 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
        v79 = (v91 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
        v80 = swift_allocObject();
        v81 = v80 + v78;
        v82 = v102;
        v67 = v103;
        *(_QWORD *)(v80 + 16) = 0;
        *(_QWORD *)(v80 + 24) = 0;
        v89((char *)v81, v77, v82);
        *(_QWORD *)(v80 + v79) = v95;
        *(_QWORD *)(v80 + ((v79 + 15) & 0xFFFFFFFFFFFFFFF8)) = v76;
        v48 = v101;
        v57 = v102;
        v83 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v75, (uint64_t)&async function pointer to partial apply for closure #1 in UnknownCanvasElementView.updateUI(), v80);
        outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for TaskPriority?);
        *(_QWORD *)((char *)v1 + v93) = v83;
        swift_release();
        v46 = (void (*)(char *, uint64_t))v96;
        goto LABEL_25;
      }
    }
    else
    {
      v68 = v90;
      outlined init with copy of CRAsset?(v63, v90);
      if (v49((char *)v66, 1, v57) != 1)
      {
        v69 = v68;
        v70 = v94;
        v89(v94, (char *)v66, v57);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12978]);
        v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        v72 = *(void (**)(char *, uint64_t))(v48 + 8);
        v72(v70, v57);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v72((char *)v69, v57);
        v67 = v103;
        outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v51 = &metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
        if ((v71 & 1) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v96, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v68, v57);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for (CRAsset?, CRAsset?));
    v51 = (_QWORD *)&metadata instantiation cache for protocol conformance descriptor for ReflowEnum.CodingKeys;
    v67 = v103;
    goto LABEL_22;
  }
LABEL_29:
  __break(1u);
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;

  *(_QWORD *)(v6 + 40) = a6;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v8;
  *v8 = v6;
  v8[1] = closure #1 in UnknownCanvasElementView.updateUI();
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(a5, 1, 0);
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in UnknownCanvasElementView.updateUI()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40) + 16;
    swift_beginAccess();
    v3 = MEMORY[0x1DF0E666C](v2);
    *(_QWORD *)(v0 + 64) = v3;
    if (v3)
    {
      type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
      return swift_task_switch();
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v1 = *(char **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release();
  v3 = *(void **)&v1[direct field offset for UnknownCanvasElementView.thumbnailView];
  v4 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
  v5 = v3;
  v6 = objc_msgSend(v4, sel_initWithCGImage_, v2);
  objc_msgSend(v5, sel_setImage_, v6);

  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void UnknownCanvasElementView.flags.getter(_QWORD *a1@<X8>)
{
  *a1 = 172;
}

uint64_t (*UnknownCanvasElementView.flags.modify(_QWORD *a1))()
{
  *a1 = 172;
  return UnknownCanvasElementView.flags.modify;
}

void type metadata accessor for CRAsset?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRAsset?)
  {
    type metadata accessor for CRAsset();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRAsset?);
  }
}

uint64_t ObjC metadata update function for UnknownCanvasElementView()
{
  return type metadata accessor for UnknownCanvasElementView();
}

uint64_t outlined destroy of UnknownCanvasElement(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnknownCanvasElement();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of CRAsset?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CRAsset?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDB2EE6C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDB2EE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for CRAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UnknownCanvasElementView.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for CRAsset() - 8);
  v3 = (*(_QWORD *)(v2 + 64)
      + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(v0 + v3);
  v5 = *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v6[5] = v5;
  v7 = (_QWORD *)swift_task_alloc();
  v6[6] = v7;
  *v7 = v6;
  v7[1] = closure #1 in UnknownCanvasElementView.updateUI();
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v4, 1, 0);
}

unint64_t lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement;
  if (!lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedCanvasElement, &type metadata for TaggedCanvasElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedCanvasElement and conformance TaggedCanvasElement);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CalculateKey, Any>, &demangling cache variable for type metadata for (CalculateKey, Any), specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>, (uint64_t *)&demangling cache variable for type metadata for (NSAttributedStringKey, Any), (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, UUID));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (_QWORD *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (char *)v6 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (String, UUID));
    v15 = *v6;
    v16 = v6[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v6, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = (_OWORD *)(v8[7] + 48 * v17);
    v21 = *((_OWORD *)v10 + 1);
    v22 = *((_OWORD *)v10 + 2);
    *v20 = *(_OWORD *)v10;
    v20[1] = v21;
    v20[2] = v22;
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, FormPageAnalytics), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 3);
    v6 = *((_QWORD *)v4 - 2);
    v7 = *((_QWORD *)v4 - 1);
    v15 = *v4;
    v8 = *((id *)v4 - 4);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v8;
    v11 = v2[7] + 40 * result;
    *(_QWORD *)v11 = v5;
    *(_QWORD *)(v11 + 8) = v6;
    *(_QWORD *)(v11 + 16) = v7;
    *(_OWORD *)(v11 + 24) = v15;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 3);
    v13 = *v4;
    v14 = *(v4 - 1);
    v6 = *((id *)v4 - 4);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v6;
    v9 = v2[7] + 40 * result;
    *(_QWORD *)v9 = v5;
    *(_OWORD *)(v9 + 8) = v14;
    *(_OWORD *)(v9 + 24) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<FormAnalyticsKeys, NSObject>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, UIFont?>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = *v4;
    v8 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v2[6] + v11) = v8;
    *(_QWORD *)(v2[7] + v11) = v6;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  char v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Bool>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 40);
  while (1)
  {
    v5 = *(_BYTE *)v4;
    v6 = *(v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v6;
    *(_BYTE *)(v2[7] + result) = v5;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    outlined copy of Data._Representation(v5, v6);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, Ref<PDFAnnotationElement>), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>, (uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument), &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12958]);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, SortableCalculateExpression));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (UUID, SortableCalculateExpression));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = (_QWORD *)(v8[7] + 24 * v17);
    v21 = *((_QWORD *)v10 + 1);
    v22 = *((_QWORD *)v10 + 2);
    *v20 = *(_QWORD *)v10;
    v20[1] = v21;
    v20[2] = v22;
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, CFDataRef>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PDFPageID, Int));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (_QWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (PDFPageID, Int));
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for PDFPageID();
    result = outlined init with take of PKStrokeStruct((uint64_t)v6, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    *(_QWORD *)(v8[7] + 8 * v17) = *(Swift::UInt *)((char *)v6 + v10);
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, Int), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, SharedTagged_9<TaggedCanvasElement>), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<AnalyticsKeys, NSObject>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRAsset, Int), &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12958]);
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v12 = *v4;
    v5 = *((id *)v4 - 1);
    v6 = (id)v12;
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v12;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (CRKeyPath, PDFAnnotation), &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Any>, &demangling cache variable for type metadata for (PDFDocumentWriteOption, Any), specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, WeakCalculateExpression));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)&v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (UUID, WeakCalculateExpression));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    result = outlined init with take of WeakCalculateExpression(v10, v8[7] + 8 * v17);
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, NSNumber), &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, PKDrawing), &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>, (uint64_t (*)(char *))specialized __RawDictionaryStorage.find<A>(_:), (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = (void *)*((_QWORD *)v4 - 1);
    v9 = *v4;
    outlined copy of Data._Representation(v5, v6);
    outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v7, v8, v9);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 40;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CRAttributeStringDecodingKey.Type>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v13 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = (uint64_t *)(v2[6] + 16 * result);
    *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorTraitKey, UIFontWeight>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, [UIFontDescriptorTraitKey : UIFontWeight]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>, (uint64_t (*)(id))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, CheckedContinuation<CGImageRef?, Never>));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (UUID, CheckedContinuation<CGImageRef?, Never>));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = v8[7];
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, CanvasCollaborationStateView.CollaborationCursor));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v6[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v6, &demangling cache variable for type metadata for (UUID, CanvasCollaborationStateView.CollaborationCursor));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = (_OWORD *)(v8[7] + 32 * v17);
    v21 = *((_OWORD *)v10 + 1);
    *v20 = *(_OWORD *)v10;
    v20[1] = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, AnyCRValue));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AnyCRValue>);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v9 = (char *)v6 + *(int *)(v2 + 48);
    v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v11 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v10, (uint64_t)v6, &demangling cache variable for type metadata for (Int, AnyCRValue));
      v12 = *v6;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v6);
      if ((v14 & 1) != 0)
        break;
      v15 = result;
      *(_QWORD *)((char *)v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v8[6] + 8 * result) = v12;
      v16 = v8[7];
      v17 = type metadata accessor for AnyCRValue();
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v15, v9, v17);
      v18 = v8[2];
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        goto LABEL_10;
      v8[2] = v20;
      v10 += v11;
      if (!--v7)
        return (unint64_t)v8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E0];
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v11, (uint64_t)&v18, a3);
    v12 = v18;
    result = a4(v18);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v12;
    result = (unint64_t)outlined init with take of Any(&v19, (_OWORD *)(v8[7] + 32 * result));
    v15 = v8[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t (*v31)(_QWORD);
  uint64_t (*v32)(char *);

  v31 = a5;
  v32 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _DictionaryStorage.allocate(capacity:)();
  v14 = (_QWORD *)v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v14;
  }
  v16 = *(int *)(v8 + 48);
  v17 = a1;
  v18 = v13 + 64;
  v19 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v30[1] = v17;
  v20 = v17 + v19;
  v21 = *(_QWORD *)(v9 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v20, (uint64_t)v12, a2);
    result = v32(v12);
    if ((v23 & 1) != 0)
      break;
    v24 = result;
    *(_QWORD *)(v18 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v25 = v14[6];
    v26 = v31(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v24, v12, v26);
    *(_QWORD *)(v14[7] + 8 * v24) = *(_QWORD *)&v12[v16];
    v27 = v14[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_11;
    v14[2] = v29;
    v20 += v21;
    if (!--v15)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v12 = *v5;
    v6 = *((id *)v5 - 1);
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v6;
    *(_OWORD *)(v3[7] + 16 * result) = v12;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v3[2] = v11;
    v5 = (_OWORD *)((char *)v5 + 24);
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v31 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)();
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  v15 = &v11[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v18, (uint64_t)v11, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = v13[6];
    v24 = type metadata accessor for CRKeyPath();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v11, v24);
    v25 = v13[7];
    v26 = __swift_instantiateConcreteTypeFromMangledName(v31);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, v15, v26);
    v27 = v13[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_11;
    v13[2] = v29;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (id *)(a1 + 40);
  while (1)
  {
    v8 = *((unsigned __int8 *)v7 - 8);
    v9 = *v7;
    result = a3(v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v5[6] + result) = v8;
    *(_QWORD *)(v5[7] + 8 * result) = v9;
    v12 = v5[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5[2] = v14;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  id v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (void **)(a1 + 40);
  while (1)
  {
    v8 = *v7;
    v9 = *(v7 - 1);
    v10 = v8;
    result = a3(v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = 8 * result;
    *(_QWORD *)(v5[6] + v13) = v9;
    *(_QWORD *)(v5[7] + v13) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PKStrokeProperties.additionalFields.getter()
{
  type metadata accessor for PKStrokeProperties(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for PKStrokeProperties(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeProperties);
}

uint64_t PKStrokeProperties.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PKStrokeProperties(0) + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PKStrokeProperties.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PKStrokeProperties(0);
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;

  if ((unint64_t)(rawValue + 1) > 8)
    *v1 = 9;
  else
    *v1 = byte_1DDF32162[rawValue + 1];
  return (PaperKit::PKStrokeProperties::CodingKeys_optional)rawValue;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::PKStrokeProperties::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x7367616C665FLL && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x444970756F7267 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x7079546570616873 && object == (void *)0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 1752457584 && object == (void *)0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else if (countAndFlagsBits == 1802723693 && object == (void *)0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 4;
  }
  else if (countAndFlagsBits == 0x6E616C5070696C63 && object == (void *)0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 5;
  }
  else if (countAndFlagsBits == 0x6E6172546B6E695FLL && object == (void *)0xED00006D726F6673
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 6;
  }
  else if (countAndFlagsBits == 0x72477265646E6572 && object == (void *)0xED0000444970756FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 7;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x80000001DDF4C510)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 8;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 8;
    else
      v7 = 9;
  }
  *v2 = v7;
  return result;
}

PaperKit::PKStrokeProperties::CodingKeys_optional __swiftcall PKStrokeProperties.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  if ((unint64_t)(intValue + 1) > 8)
    *v1 = 9;
  else
    *v1 = byte_1DDF32162[intValue + 1];
  return (PaperKit::PKStrokeProperties::CodingKeys_optional)intValue;
}

void *static PKStrokeProperties.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PKStrokeProperties.CodingKeys.allCases.getter;
}

uint64_t PKStrokeProperties.CodingKeys.intValue.getter()
{
  char *v0;

  return qword_1DDF32170[*v0];
}

uint64_t PKStrokeProperties.CodingKeys.rawValue.getter()
{
  char *v0;

  return qword_1DDF32170[*v0];
}

uint64_t PKStrokeProperties.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDB31FD4 + 4 * byte_1DDF31640[*v0]))(0x7367616C665FLL, 0xE600000000000000);
}

uint64_t sub_1DDB31FD4()
{
  return 0x444970756F7267;
}

uint64_t sub_1DDB31FEC()
{
  return 0x7079546570616873;
}

uint64_t sub_1DDB3203C()
{
  return 0x6E6172546B6E695FLL;
}

uint64_t sub_1DDB32060()
{
  return 0x72477265646E6572;
}

unint64_t sub_1DDB32084()
{
  return 0xD000000000000010;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeProperties.CodingKeys(char *a1, char *a2)
{
  return qword_1DDF32170[*a1] == qword_1DDF32170[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PKStrokeProperties.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF32170[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PKStrokeProperties.CodingKeys()
{
  char *v0;

  Hasher._combine(_:)(qword_1DDF32170[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PKStrokeProperties.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF32170[v1]);
  return Hasher._finalize()();
}

PaperKit::PKStrokeProperties::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PKStrokeProperties.CodingKeys(Swift::Int *a1)
{
  return PKStrokeProperties.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PKStrokeProperties.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DDF32170[*v1];
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PKStrokeProperties.CodingKeys()
{
  char *v0;

  return qword_1DDF32170[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance PKStrokeProperties.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static PKStrokeProperties.CodingKeys.allCases.getter;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PKStrokeProperties.CodingKeys()
{
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PKStrokeProperties.CodingKeys()
{
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PKStrokeProperties.CodingKeys()
{
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PKStrokeProperties.visitReferences(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = type metadata accessor for AnyCRValue();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v34 - v14;
  v16 = type metadata accessor for PKStrokeProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v39 = a1;
  Ref.visitReferences(_:)();
  v17 = *(_QWORD *)(v1 + *(int *)(v16 + 48));
  v18 = *(_QWORD *)(v17 + 64);
  v36 = v17 + 64;
  v19 = 1 << *(_BYTE *)(v17 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v37 = (unint64_t)(v19 + 63) >> 6;
  v38 = v17;
  v35 = v37 - 1;
  result = swift_bridgeObjectRetain();
  v23 = 0;
  if (!v21)
    goto LABEL_8;
LABEL_6:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  v25 = v24 | (v23 << 6);
  while (2)
  {
    v26 = *(_QWORD *)(v38 + 56);
    *(_QWORD *)v12 = *(_QWORD *)(*(_QWORD *)(v38 + 48) + 8 * v25);
    v27 = v26 + *(_QWORD *)(v4 + 72) * v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(&v12[*(int *)(v28 + 48)], v27, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
    while (1)
    {
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v15, 1, v33) == 1)
        return swift_release();
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, &v15[*(int *)(v33 + 48)], v3);
      AnyCRValue.visitReferences(_:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      if (v21)
        goto LABEL_6;
LABEL_8:
      v29 = v23 + 1;
      if (__OFADD__(v23, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v29 < v37)
      {
        v30 = *(_QWORD *)(v36 + 8 * v29);
        if (v30)
          goto LABEL_11;
        v31 = v23 + 2;
        ++v23;
        if (v29 + 1 < v37)
        {
          v30 = *(_QWORD *)(v36 + 8 * v31);
          if (v30)
            goto LABEL_14;
          v23 = v29 + 1;
          if (v29 + 2 < v37)
          {
            v30 = *(_QWORD *)(v36 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            v31 = v29 + 3;
            v23 = v29 + 2;
            if (v29 + 3 < v37)
              break;
          }
        }
      }
LABEL_25:
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 1, 1, v32);
      v21 = 0;
    }
    v30 = *(_QWORD *)(v36 + 8 * v31);
    if (v30)
    {
LABEL_14:
      v29 = v31;
LABEL_11:
      v21 = (v30 - 1) & v30;
      v25 = __clz(__rbit64(v30)) + (v29 << 6);
      v23 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v37)
    {
      v23 = v35;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(v36 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t PKStrokeProperties.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v2, a2, type metadata accessor for PKStrokeProperties);
  v10 = type metadata accessor for PKStrokeProperties(0);
  Ref.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 40))(a2 + *(int *)(v10 + 32), v9, v5);
  v11 = *(_QWORD *)(v2 + *(int *)(v10 + 48));
  swift_bridgeObjectRetain();
  v12 = specialized _NativeDictionary.mapValues<A>(_:)(v11, a1);
  swift_bridgeObjectRelease();
  v13 = *(int *)(v10 + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + v13) = v12;
  return result;
}

uint64_t PKStrokeProperties.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  __int128 *v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  char v15;
  __int128 v16;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PKStrokeProperties.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10 = (int *)type metadata accessor for PKStrokeProperties(0);
    LOBYTE(v19) = 1;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18[1] = v3 + v10[8];
    LOBYTE(v19) = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>, MEMORY[0x1E0D12880]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v10[9]);
    v23 = 4;
    type metadata accessor for PKStrokeMaskStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11 = (__int128 *)(v3 + v10[10]);
    v12 = *((_BYTE *)v11 + 32);
    v13 = v11[1];
    v19 = *v11;
    v20 = v13;
    LOBYTE(v21) = v12;
    v23 = 5;
    lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v14 = (__int128 *)(v3 + v10[11]);
    v15 = *((_BYTE *)v14 + 48);
    v16 = v14[1];
    v19 = *v14;
    v20 = v16;
    v21 = v14[2];
    v22 = v15;
    v23 = 6;
    type metadata accessor for CGAffineTransform(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v19) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(_QWORD *)&v19 = *(_QWORD *)(v3 + v10[12]);
    v23 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t PKStrokeProperties.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  _OWORD *v39;
  char v40;
  __int128 v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[2];
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  char v71;

  v51 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v57 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v54 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v52 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v53 = (char *)v48 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PKStrokeProperties.CodingKeys>);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for PKStrokeProperties(0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (_QWORD *)((char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (uint64_t)v20 + *(int *)(v18 + 20);
  v22 = type metadata accessor for UUID();
  v23 = *(void (**)(void))(*(_QWORD *)(v22 - 8) + 56);
  v64 = v21;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v21, 1, 1, v22);
  v60 = (uint64_t)v20 + v16[6];
  v23();
  v66 = v16[9];
  *(uint64_t *)((char *)v20 + v66) = 0;
  v24 = (char *)v20 + v16[10];
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  v24[32] = 1;
  v25 = (char *)v20 + v16[11];
  *((_OWORD *)v25 + 1) = 0u;
  *((_OWORD *)v25 + 2) = 0u;
  *(_OWORD *)v25 = 0u;
  v25[48] = 1;
  v63 = v16;
  v26 = v16[12];
  v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v61 = v26;
  v62 = a1;
  *(uint64_t *)((char *)v20 + v26) = v27;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys();
  v59 = v15;
  v28 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28)
  {
    v31 = v64;
    v32 = v60;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    outlined destroy of StocksKitCurrencyCache.Provider?(v31, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for UUID?);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v29 = (uint64_t)v53;
    v49 = v25;
    v50 = v24;
    v30 = v54;
    v65 = v22;
    LOBYTE(v67) = 0;
    *v20 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67) = 1;
    v48[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v33 = v63;
    outlined assign with take of UUID?(v29, v64);
    LOBYTE(v67) = 2;
    *(uint64_t *)((char *)v20 + v33[7]) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v67) = 3;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>, MEMORY[0x1E0D12898]);
    v34 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)v20 + v33[8], v30, v34);
    type metadata accessor for PKStrokeMaskStruct();
    v71 = 4;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeMaskStruct and conformance PKStrokeMaskStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKStrokeMaskStruct, (uint64_t)&protocol conformance descriptor for PKStrokeMaskStruct);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v36 = v66;
    v35 = v67;
    swift_release();
    *(uint64_t *)((char *)v20 + v36) = v35;
    v71 = 5;
    lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v37 = v69;
    v38 = v68;
    v39 = v50;
    *v50 = v67;
    v39[1] = v38;
    *((_BYTE *)v39 + 32) = v37;
    type metadata accessor for CGAffineTransform(0);
    v71 = 6;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, MEMORY[0x1E0C9B9B0]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v40 = v70;
    v41 = v68;
    v42 = v49;
    *v49 = v67;
    v42[1] = v41;
    v42[2] = v69;
    *((_BYTE *)v42 + 48) = v40;
    LOBYTE(v67) = 7;
    v43 = (uint64_t)v52;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v44 = v61;
    outlined assign with take of UUID?(v43, v60);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    v71 = 8;
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v45 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v56);
    v46 = v67;
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v20 + v44) = v46;
    outlined init with copy of PKStrokeProperties((uint64_t)v20, v51, type metadata accessor for PKStrokeProperties);
    __swift_destroy_boxed_opaque_existential_1(v45);
    return outlined destroy of PKStrokeProperties((uint64_t)v20, type metadata accessor for PKStrokeProperties);
  }
}

uint64_t protocol witness for CRValue.__hasDelta(from:) in conformance PKStrokeProperties()
{
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PKStrokeProperties@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PKStrokeProperties.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKStrokeProperties(_QWORD *a1)
{
  return PKStrokeProperties.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeProperties@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v3, a3, type metadata accessor for PKStrokeProperties);
  Ref.copy(renamingReferences:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(a3 + *(int *)(a2 + 32), v11, v7);
  v12 = *(_QWORD *)(v3 + *(int *)(a2 + 48));
  swift_bridgeObjectRetain();
  v13 = specialized _NativeDictionary.mapValues<A>(_:)(v12, a1);
  swift_bridgeObjectRelease();
  v14 = *(int *)(a2 + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a3 + v14) = v13;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  return CRValueStruct.minEncodingVersion.getter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PKStrokeStructCache.BoundsParameters(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

uint64_t PKStrokeStructCache.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);

  return swift_deallocClassInstance();
}

PaperKit::TaggedStroke::Enum_optional __swiftcall TaggedStroke.Enum.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (PaperKit::TaggedStroke::Enum_optional)rawValue;
}

uint64_t TaggedStroke.Enum.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TaggedStroke.Enum(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TaggedStroke.Enum()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TaggedStroke.Enum()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TaggedStroke.Enum()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance TaggedStroke.Enum@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TaggedStroke.Enum(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t PKStrokeInheritedProperties.ink.getter()
{
  uint64_t v1;

  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double PKStrokeInheritedProperties.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__C::CGRect __swiftcall PKStrokeStruct.bounds(path:ink:transform:)(PKStrokePath_optional path, PKInk_optional ink, CGAffineTransform *transform)
{
  uint64_t v3;
  void *v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  objc_class *v28;
  id v29;
  uint64_t v30;
  char *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  objc_class *v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  void *v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  objc_class *v53;
  id v54;
  double v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  uint64_t v63;
  uint64_t v64;
  double v65[6];
  _QWORD v66[6];
  _OWORD v67[4];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  CGRect v72;
  __C::CGRect result;

  v4 = *(void **)&path.is_nil;
  isa = path.value.super.isa;
  v6 = *(_QWORD *)ink.value.super.isa;
  v7 = *((_QWORD *)ink.value.super.isa + 1);
  v8 = *((_QWORD *)ink.value.super.isa + 3);
  v63 = *((_QWORD *)ink.value.super.isa + 2);
  v9 = *((_QWORD *)ink.value.super.isa + 4);
  v64 = *((_QWORD *)ink.value.super.isa + 5);
  v10 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v59 - v16;
  if (one-time initialization token for unfairLock != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
  v18 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  v19 = *(_QWORD *)(v3 + v18);
  v21 = *(double *)(v19 + 16);
  v20 = *(double *)(v19 + 24);
  v22 = *(double *)(v19 + 32);
  v23 = *(double *)(v19 + 40);
  v25 = *(_OWORD *)(v19 + 48);
  v24 = *(_OWORD *)(v19 + 64);
  v26 = *(_OWORD *)(v19 + 96);
  v67[2] = *(_OWORD *)(v19 + 80);
  v67[3] = v26;
  v67[1] = v24;
  v67[0] = v25;
  outlined retain of PKStrokeStructCache.BoundsParameters((void **)v67);
  os_unfair_lock_unlock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
  swift_endAccess();
  *(_QWORD *)&v68 = isa;
  v60 = v6;
  *((_QWORD *)&v68 + 1) = v6;
  *(_QWORD *)&v69 = v7;
  v61 = v7;
  *((_QWORD *)&v69 + 1) = v63;
  *(_QWORD *)&v70 = v8;
  v27 = v8;
  v59 = v9;
  *((_QWORD *)&v70 + 1) = v9;
  *(_QWORD *)&v71 = v64;
  *((_QWORD *)&v71 + 1) = v4;
  v28 = isa;
  v29 = v4;
  v72.origin.x = v21;
  v72.origin.y = v20;
  v72.size.width = v22;
  v72.size.height = v23;
  if (CGRectIsNull(v72)
    || !specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)((uint64_t)v67, (uint64_t)&v68))
  {
    v62 = v28;
    v30 = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    CRRegister.wrappedValue.getter();
    v31 = &v17[*(int *)(v10 + 44)];
    if ((v31[48] & 1) != 0)
    {
      v32 = 1.0;
      v33 = 0.0;
      v34 = 0.0;
      v35 = 0.0;
      v36 = 0.0;
      v37 = 1.0;
    }
    else
    {
      v34 = *((double *)v31 + 4);
      v33 = *((double *)v31 + 5);
      v35 = *((double *)v31 + 2);
      v32 = *((double *)v31 + 3);
      v37 = *(double *)v31;
      v36 = *((double *)v31 + 1);
    }
    v38 = v61;
    outlined destroy of PKStrokeProperties((uint64_t)v17, type metadata accessor for PKStrokeProperties);
    if (v4 && isa)
    {
      v39 = v62;
      v40 = v29;
      CRRegister.wrappedValue.getter();
      v41 = *(_QWORD *)&v13[*(int *)(v10 + 36)];
      swift_retain();
      outlined destroy of PKStrokeProperties((uint64_t)v13, type metadata accessor for PKStrokeProperties);
      if (v41)
      {
        v42 = *(id *)(*(_QWORD *)(v41 + 16) + 16);
        swift_release();
      }
      else
      {
        v42 = 0;
      }
      v43 = (void *)objc_opt_self();
      v66[0] = v60;
      v66[1] = v38;
      v66[2] = v63;
      v66[3] = v27;
      v66[4] = v59;
      v66[5] = v64;
      v65[0] = v37;
      v65[1] = v36;
      v65[2] = v35;
      v65[3] = v32;
      v65[4] = v34;
      v65[5] = v33;
      objc_msgSend(v43, sel__calculateBounds_transform_ink_inkTransform_strokePath_, v42, v66, v40, v65, v39);
      v21 = v44;
      v20 = v45;
      v22 = v46;
      v23 = v47;

    }
    else
    {
      v21 = *MEMORY[0x1E0C9D628];
      v20 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v22 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v23 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    }
    swift_beginAccess();
    os_unfair_lock_lock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
    swift_endAccess();
    v48 = *(_QWORD *)(v30 + v18);
    *(CGFloat *)(v48 + 16) = v21;
    *(CGFloat *)(v48 + 24) = v20;
    *(CGFloat *)(v48 + 32) = v22;
    *(CGFloat *)(v48 + 40) = v23;
    v49 = *(void **)(v48 + 48);
    v50 = *(void **)(v48 + 104);
    v51 = v69;
    *(_OWORD *)(v48 + 48) = v68;
    *(_OWORD *)(v48 + 64) = v51;
    v52 = v71;
    *(_OWORD *)(v48 + 80) = v70;
    *(_OWORD *)(v48 + 96) = v52;
    v28 = v62;
    v53 = v62;
    v54 = v29;

    swift_beginAccess();
    os_unfair_lock_unlock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
    swift_endAccess();
  }

  outlined release of PKStrokeStructCache.BoundsParameters((uint64_t)v67);
  v55 = v21;
  v56 = v20;
  v57 = v22;
  v58 = v23;
  result.size.height = v58;
  result.size.width = v57;
  result.origin.y = v56;
  result.origin.x = v55;
  return result;
}

void closure #1 in CRRegister<>.bounds(in:)(CGFloat *a1@<X0>, _QWORD *a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  double v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  uint64_t v25;
  CGRect v26;
  CGRect v27;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (objc_class *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v15 = a2[3];
  v16 = a2[4];
  v17 = __swift_project_boxed_opaque_existential_1(a2, v15);
  v18 = specialized CRRegister<>.bounds(in:)((uint64_t)v17, v10, v15, v16);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  (*(void (**)(objc_class *, uint64_t))(v7 + 8))(v10, v6);
  v26.origin.x = v11;
  v26.origin.y = v12;
  v26.size.width = v13;
  v26.size.height = v14;
  v27.origin.x = v18;
  v27.origin.y = v20;
  v27.size.width = v22;
  v27.size.height = v24;
  *a3 = CGRectUnion(v26, v27);
}

uint64_t CRRegister<>.requiredContentVersion<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  Class isa;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  void *v135;

  v125 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v129 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v117 = (char *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v130 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v8);
  v128 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v133 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109, v13);
  v107 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v106 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132, v15);
  v131 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v116 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v123 = *(_QWORD *)(v20 - 8);
  v124 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v114 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v105 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v101, v26);
  v102 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v103 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v28);
  v100 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v98 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v112, v34);
  v113 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v98 - v38;
  v126 = a2;
  v127 = a3;
  v40 = type metadata accessor for Capsule();
  v122 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v41);
  v111 = (char *)&v98 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v45);
  v47 = (char *)&v98 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v120 = *(char **)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v98 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v98 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v99, v56);
  v121 = (uint64_t)&v98 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v119 = (uint64_t)&v98 - v60;
  v134 = v5;
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v61 = (void (*)(char *, uint64_t))*((_QWORD *)v120 + 1);
  v120 = v51;
  v115 = v48;
  v118 = v61;
  v61(v51, v48);
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v63 = *(_QWORD *)(v62 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v55, 1, v62) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    v65 = v126;
    v64 = v127;
    v66 = v125;
  }
  else
  {
    v67 = v125;
    v98 = v63;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v55, v62);
    outlined init with take of PKStrokeStruct(v121, v119, type metadata accessor for PKStrokeStruct);
    v68 = v111;
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v111, v67, v40);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    while (1)
    {
      MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v40);
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v39, type metadata accessor for PKStrokeInheritedProperties);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v33, 1, v43) == 1)
        break;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v47, v33, v43);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    (*(void (**)(char *, uint64_t))(v122 + 8))(v68, v40);
    v69 = (uint64_t)v113;
    v66 = v125;
    v65 = v126;
    v64 = v127;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    v70 = v135;
    outlined destroy of PKStrokeProperties(v69, type metadata accessor for PKStrokeInheritedProperties);
    if (v70)
    {
      v71 = (void *)objc_opt_self();
      v72 = v119;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      v73 = (uint64_t)v102;
      CRRegister.wrappedValue.getter();
      v74 = v103;
      v75 = v100;
      v76 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v100, v73 + *(int *)(v101 + 32), v104);
      outlined destroy of PKStrokeProperties(v73, type metadata accessor for PKStrokeProperties);
      v77 = v105;
      Ref.subscript.getter();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
      isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
      v79 = type metadata accessor for PKStrokePath();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v79 - 8) + 8))(v77, v79);
      v80 = (uint64_t)objc_msgSend(v71, sel__requiredContentVersionForStrokePath_ink_, isa, v70);

      outlined destroy of PKStrokeProperties(v72, type metadata accessor for PKStrokeStruct);
      return v80;
    }
    outlined destroy of PKStrokeProperties(v119, type metadata accessor for PKStrokeStruct);
  }
  v81 = v133;
  v82 = (uint64_t)v116;
  v83 = v117;
  v84 = v123;
  v85 = v115;
  v86 = v120;
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  v118(v86, v85);
  v87 = v124;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v82, 1, v124) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v82, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    return 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v114, v82, v87);
    v88 = v107;
    Ref.subscript.getter();
    v89 = v109;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v88, v89);
    CRSequence.Iterator.next()();
    v90 = v130;
    v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48);
    v80 = 1;
    v92 = v110;
    if (v91(v81, 1, v110) != 1)
    {
      v93 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
      v80 = 1;
      do
      {
        v94 = v81;
        v95 = v128;
        v93(v128, v94, v92);
        Ref.subscript.getter();
        v96 = CRRegister<>.requiredContentVersion<A>(in:)(v66, v65, v64);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v83, v134);
        if (v80 >= v96)
        {
          (*(void (**)(char *, uint64_t))(v130 + 8))(v95, v92);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v130 + 8))(v95, v92);
          v80 = v96;
          if (v96 == 3)
            break;
        }
        v81 = v133;
        CRSequence.Iterator.next()();
      }
      while (v91(v81, 1, v92) != 1);
    }
    (*(void (**)(char *, uint64_t))(v106 + 8))(v131, v132);
    (*(void (**)(char *, uint64_t))(v123 + 8))(v114, v124);
  }
  return v80;
}

uint64_t PKStrokeInheritedProperties.inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PKStrokeInheritedProperties.inherited : PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
}

uint64_t PKStrokeInheritedProperties.inherited.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
}

uint64_t (*PKStrokeInheritedProperties.inherited.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.projectedValue.getter();
}

uint64_t PKStrokeInheritedProperties.$inherited.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$inherited.setter(a1, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
}

uint64_t (*PKStrokeInheritedProperties.$inherited.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t key path getter for PKStrokeInheritedProperties.ink : PKStrokeInheritedProperties@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PKStrokeInheritedProperties.ink : PKStrokeInheritedProperties(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for PKStrokeInheritedProperties(0);
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PKStrokeInheritedProperties.ink.setter()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PKStrokeInheritedProperties.ink.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$ink.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PKStrokeInheritedProperties.$ink.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$ink.setter(a1, &demangling cache variable for type metadata for CRRegister<PKInk?>, (void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeInheritedProperties.$ink.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeInheritedProperties(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for PKStrokeInheritedProperties.transform : PKStrokeInheritedProperties@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t key path setter for PKStrokeInheritedProperties.transform : PKStrokeInheritedProperties()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PKStrokeInheritedProperties.transform.setter()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PKStrokeInheritedProperties.transform.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeInheritedProperties.$transform.getter()
{
  return PKStrokeInheritedProperties.$transform.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t key path setter for PKStrokeInheritedProperties.$transform : PKStrokeInheritedProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  type metadata accessor for PKStrokeInheritedProperties(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t PKStrokeInheritedProperties.$transform.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for PKStrokeInheritedProperties(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PKStrokeInheritedProperties.$transform.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeInheritedProperties(0) + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PKStrokeInheritedProperties.additionalFields.getter()
{
  return PKStrokeInheritedProperties.additionalFields.getter((void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t PKStrokeInheritedProperties.additionalFields.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.additionalFields.setter(a1, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeInheritedProperties.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  return UnknownCanvasElementView.flags.modify;
}

uint64_t one-time initialization function for fields()
{
  uint64_t result;

  static PKStrokeInheritedProperties.fields = 0x6574697265686E69;
  unk_1EDB6F210 = 0xE900000000000064;
  qword_1EDB6F218 = swift_getKeyPath();
  unk_1EDB6F220 = 7040617;
  qword_1EDB6F228 = 0xE300000000000000;
  qword_1EDB6F230 = swift_getKeyPath();
  qword_1EDB6F238 = 0x726F66736E617274;
  qword_1EDB6F240 = 0xE90000000000006DLL;
  result = swift_getKeyPath();
  qword_1EDB6F248 = result;
  return result;
}

{
  uint64_t result;

  static PKStrokeStruct.fields = 0x6574697265686E69;
  qword_1EDB6EFF8 = 0xE900000000000064;
  qword_1EDB6F000 = swift_getKeyPath();
  unk_1EDB6F008 = 0x69747265706F7270;
  qword_1EDB6F010 = 0xEA00000000007365;
  result = swift_getKeyPath();
  qword_1EDB6F018 = result;
  return result;
}

{
  uint64_t result;

  static Signature.fields = 0x656D617266;
  *(_QWORD *)algn_1F0409E48 = 0xE500000000000000;
  qword_1F0409E50 = swift_getKeyPath();
  unk_1F0409E58 = 0x6E6F697461746F72;
  qword_1F0409E60 = 0xE800000000000000;
  qword_1F0409E68 = swift_getKeyPath();
  strcpy((char *)&qword_1F0409E70, "signatureItem");
  HIWORD(qword_1F0409E78) = -4864;
  qword_1F0409E80 = swift_getKeyPath();
  unk_1F0409E88 = 0x726F6C6F63;
  qword_1F0409E90 = 0xE500000000000000;
  qword_1F0409E98 = swift_getKeyPath();
  qword_1F0409EA0 = 0x6874646977;
  qword_1F0409EA8 = 0xE500000000000000;
  result = swift_getKeyPath();
  qword_1F0409EB0 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static PDFAnnotationElement.fields = 7102838;
  *((_QWORD *)&static PDFAnnotationElement.fields + 1) = 0xE300000000000000;
  qword_1F040B890 = swift_getKeyPath();
  unk_1F040B898 = 7500915;
  *(_QWORD *)&xmmword_1F040B8A0 = 0xE300000000000000;
  *((_QWORD *)&xmmword_1F040B8A0 + 1) = swift_getKeyPath();
  unk_1F040B8B0 = 67;
  qword_1F040B8B8 = 0xE100000000000000;
  *(_QWORD *)&xmmword_1F040B8C0 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1F040B8C0 + 1) = 70;
  qword_1F040B8D0 = 0xE100000000000000;
  qword_1F040B8D8 = swift_getKeyPath();
  unk_1F040B8E0 = 77;
  qword_1F040B8E8 = 0xE100000000000000;
  qword_1F040B8F0 = swift_getKeyPath();
  unk_1F040B8F8 = 0x6570616873;
  *(_QWORD *)&xmmword_1F040B900 = 0xE500000000000000;
  *((_QWORD *)&xmmword_1F040B900 + 1) = swift_getKeyPath();
  unk_1F040B910 = 0x65707974627573;
  qword_1F040B918 = 0xE700000000000000;
  *(_QWORD *)&xmmword_1F040B920 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1F040B920 + 1) = 0x7075706F70;
  qword_1F040B930 = 0xE500000000000000;
  result = swift_getKeyPath();
  qword_1F040B938 = result;
  return result;
}

{
  uint64_t result;

  static GraphElement.fields = 0x656D617266;
  unk_1EDB6EF60 = 0xE500000000000000;
  qword_1EDB6EF68 = swift_getKeyPath();
  unk_1EDB6EF70 = 0x6E6F697461746F72;
  qword_1EDB6EF78 = 0xE800000000000000;
  qword_1EDB6EF80 = swift_getKeyPath();
  qword_1EDB6EF88 = 0x6973736572707865;
  qword_1EDB6EF90 = 0xEB00000000736E6FLL;
  qword_1EDB6EF98 = swift_getKeyPath();
  strcpy(byte_1EDB6EFA0, "visibleRange");
  BYTE5(qword_1EDB6EFA8) = 0;
  HIWORD(qword_1EDB6EFA8) = -5120;
  result = swift_getKeyPath();
  qword_1EDB6EFB0 = result;
  return result;
}

{
  uint64_t result;

  static GraphableExpression.fields = 0x6973736572707865;
  unk_1EDB6F170 = 0xEA00000000006E6FLL;
  qword_1EDB6F178 = swift_getKeyPath();
  unk_1EDB6F180 = 0x696669746E656469;
  qword_1EDB6F188 = 0xEA00000000007265;
  qword_1EDB6F190 = swift_getKeyPath();
  qword_1EDB6F198 = 0x726F6C6F63;
  qword_1EDB6F1A0 = 0xE500000000000000;
  result = swift_getKeyPath();
  qword_1EDB6F1A8 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static PaperDocumentPage.fields = 0x73646E756F62;
  *((_QWORD *)&static PaperDocumentPage.fields + 1) = 0xE600000000000000;
  qword_1F040D738 = swift_getKeyPath();
  unk_1F040D740 = 0x656D617266;
  *(_QWORD *)&xmmword_1F040D748 = 0xE500000000000000;
  *((_QWORD *)&xmmword_1F040D748 + 1) = swift_getKeyPath();
  unk_1F040D758 = 0x6E6F697461746F72;
  qword_1F040D760 = 0xE800000000000000;
  *(_QWORD *)&xmmword_1F040D768 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1F040D768 + 1) = 0x65676150666470;
  qword_1F040D778 = 0xE700000000000000;
  qword_1F040D780 = swift_getKeyPath();
  unk_1F040D788 = 0x676E6977617264;
  qword_1F040D790 = 0xE700000000000000;
  qword_1F040D798 = swift_getKeyPath();
  unk_1F040D7A0 = 0x656D656C65627573;
  *(_QWORD *)&xmmword_1F040D7A8 = 0xEB0000000073746ELL;
  *((_QWORD *)&xmmword_1F040D7A8 + 1) = swift_getKeyPath();
  unk_1F040D7B8 = 0x7344496F6E6E61;
  qword_1F040D7C0 = 0xE700000000000000;
  *(_QWORD *)&xmmword_1F040D7C8 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1F040D7C8 + 1) = 0x73646E756F4263;
  qword_1F040D7D8 = 0xE700000000000000;
  qword_1F040D7E0 = swift_getKeyPath();
  unk_1F040D7E8 = 0x7367616C66;
  qword_1F040D7F0 = 0xE500000000000000;
  result = swift_getKeyPath();
  qword_1F040D7F8 = result;
  return result;
}

{
  uint64_t result;

  static TextBox.fields = 0x656D617266;
  *(_QWORD *)algn_1F040EEE8 = 0xE500000000000000;
  qword_1F040EEF0 = swift_getKeyPath();
  unk_1F040EEF8 = 0x6E6F697461746F72;
  qword_1F040EF00 = 0xE800000000000000;
  qword_1F040EF08 = swift_getKeyPath();
  qword_1F040EF10 = 1954047348;
  qword_1F040EF18 = 0xE400000000000000;
  qword_1F040EF20 = swift_getKeyPath();
  strcpy(byte_1F040EF28, "isFixedWidth");
  BYTE5(qword_1F040EF30) = 0;
  HIWORD(qword_1F040EF30) = -5120;
  result = swift_getKeyPath();
  qword_1F040EF38 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static Image.fields = 0x73646E756F62;
  *((_QWORD *)&static Image.fields + 1) = 0xE600000000000000;
  qword_1EDB71210 = swift_getKeyPath();
  unk_1EDB71218 = 0x656D617266;
  *(_QWORD *)&xmmword_1EDB71220 = 0xE500000000000000;
  *((_QWORD *)&xmmword_1EDB71220 + 1) = swift_getKeyPath();
  unk_1EDB71230 = 0x6E6F697461746F72;
  qword_1EDB71238 = 0xE800000000000000;
  *(_QWORD *)&xmmword_1EDB71240 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB71240 + 1) = 0x6567616D69;
  qword_1EDB71250 = 0xE500000000000000;
  qword_1EDB71258 = swift_getKeyPath();
  unk_1EDB71260 = 0x7470697263736564;
  qword_1EDB71268 = 0xEB000000006E6F69;
  qword_1EDB71270 = swift_getKeyPath();
  unk_1EDB71278 = 0x676E6977617264;
  *(_QWORD *)&xmmword_1EDB71280 = 0xE700000000000000;
  *((_QWORD *)&xmmword_1EDB71280 + 1) = swift_getKeyPath();
  unk_1EDB71290 = 7234919;
  qword_1EDB71298 = 0xE300000000000000;
  *(_QWORD *)&xmmword_1EDB712A0 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB712A0 + 1) = 0x656D656C65627573;
  qword_1EDB712B0 = 0xEB0000000073746ELL;
  qword_1EDB712B8 = swift_getKeyPath();
  unk_1EDB712C0 = 0x73646E756F4263;
  qword_1EDB712C8 = 0xE700000000000000;
  qword_1EDB712D0 = swift_getKeyPath();
  unk_1EDB712D8 = 0x7265746C6966;
  *(_QWORD *)&xmmword_1EDB712E0 = 0xE600000000000000;
  result = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB712E0 + 1) = result;
  return result;
}

{
  uint64_t result;

  static PaperDocument.fields = 0x7365676170;
  *(_QWORD *)algn_1EDB72498 = 0xE500000000000000;
  qword_1EDB724A0 = swift_getKeyPath();
  unk_1EDB724A8 = 6710384;
  qword_1EDB724B0 = 0xE300000000000000;
  result = swift_getKeyPath();
  qword_1EDB724B8 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static Paper.fields = 0x73646E756F62;
  *((_QWORD *)&static Paper.fields + 1) = 0xE600000000000000;
  qword_1EDB6CFB8 = swift_getKeyPath();
  unk_1EDB6CFC0 = 0x656D617266;
  *(_QWORD *)&xmmword_1EDB6CFC8 = 0xE500000000000000;
  *((_QWORD *)&xmmword_1EDB6CFC8 + 1) = swift_getKeyPath();
  unk_1EDB6CFD8 = 0x6E6F697461746F72;
  qword_1EDB6CFE0 = 0xE800000000000000;
  *(_QWORD *)&xmmword_1EDB6CFE8 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6CFE8 + 1) = 0x676E6977617264;
  qword_1EDB6CFF8 = 0xE700000000000000;
  qword_1EDB6D000 = swift_getKeyPath();
  unk_1EDB6D008 = 0x756F72676B636162;
  qword_1EDB6D010 = 0xEF726F6C6F43646ELL;
  qword_1EDB6D018 = swift_getKeyPath();
  unk_1EDB6D020 = 1701667182;
  *(_QWORD *)&xmmword_1EDB6D028 = 0xE400000000000000;
  *((_QWORD *)&xmmword_1EDB6D028 + 1) = swift_getKeyPath();
  unk_1EDB6D038 = 0x7367616C66;
  qword_1EDB6D040 = 0xE500000000000000;
  *(_QWORD *)&xmmword_1EDB6D048 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6D048 + 1) = 0x656D656C65627573;
  qword_1EDB6D058 = 0xEB0000000073746ELL;
  result = swift_getKeyPath();
  qword_1EDB6D060 = result;
  return result;
}

{
  uint64_t result;

  static Link.fields = 0x656D617266;
  *(_QWORD *)algn_1F0412C08 = 0xE500000000000000;
  qword_1F0412C10 = swift_getKeyPath();
  unk_1F0412C18 = 0x6E6F697461746F72;
  qword_1F0412C20 = 0xE800000000000000;
  qword_1F0412C28 = swift_getKeyPath();
  qword_1F0412C30 = 0xD000000000000019;
  qword_1F0412C38 = 0x80000001DDF576C0;
  result = swift_getKeyPath();
  qword_1F0412C40 = result;
  return result;
}

{
  uint64_t result;

  static UnknownPage.fields = 0x656D617266;
  unk_1F0413E20 = 0xE500000000000000;
  result = swift_getKeyPath();
  qword_1F0413E28 = result;
  return result;
}

{
  uint64_t result;

  static UnknownCanvasElement.fields = 0x656D617266;
  *(_QWORD *)algn_1F04142E8 = 0xE500000000000000;
  qword_1F04142F0 = swift_getKeyPath();
  unk_1F04142F8 = 0x6E6F697461746F72;
  qword_1F0414300 = 0xE800000000000000;
  qword_1F0414308 = swift_getKeyPath();
  qword_1F0414310 = 0x69616E626D756874;
  qword_1F0414318 = 0xE90000000000006CLL;
  qword_1F0414320 = swift_getKeyPath();
  strcpy(byte_1F0414328, "minAppVersion");
  HIWORD(qword_1F0414330) = -4864;
  result = swift_getKeyPath();
  qword_1F0414338 = result;
  return result;
}

{
  uint64_t result;

  static CanvasState.fields = 0x6F697463656C6573;
  unk_1EDB71AC0 = 0xEA0000000000736ELL;
  result = swift_getKeyPath();
  qword_1EDB71AC8 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static Shape.fields = 0x656D617266;
  *((_QWORD *)&static Shape.fields + 1) = 0xE500000000000000;
  qword_1EDB6FB98 = swift_getKeyPath();
  unk_1EDB6FBA0 = 0x6E6F697461746F72;
  *(_QWORD *)&xmmword_1EDB6FBA8 = 0xE800000000000000;
  *((_QWORD *)&xmmword_1EDB6FBA8 + 1) = swift_getKeyPath();
  unk_1EDB6FBB8 = 0x6F6C6F436C6C6966;
  qword_1EDB6FBC0 = 0xE900000000000072;
  *(_QWORD *)&xmmword_1EDB6FBC8 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6FBC8 + 1) = 0x6F43656B6F727473;
  qword_1EDB6FBD8 = 0xEB00000000726F6CLL;
  qword_1EDB6FBE0 = swift_getKeyPath();
  unk_1EDB6FBE8 = 0x6957656B6F727473;
  qword_1EDB6FBF0 = 0xEB00000000687464;
  qword_1EDB6FBF8 = swift_getKeyPath();
  unk_1EDB6FC00 = 1701869940;
  *(_QWORD *)&xmmword_1EDB6FC08 = 0xE400000000000000;
  *((_QWORD *)&xmmword_1EDB6FC08 + 1) = swift_getKeyPath();
  unk_1EDB6FC18 = 0x7974696361706FLL;
  qword_1EDB6FC20 = 0xE700000000000000;
  *(_QWORD *)&xmmword_1EDB6FC28 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6FC28 + 1) = 0x6E694C7472617473;
  qword_1EDB6FC38 = 0xEC000000646E4565;
  qword_1EDB6FC40 = swift_getKeyPath();
  unk_1EDB6FC48 = 0x45656E694C646E65;
  qword_1EDB6FC50 = 0xEA0000000000646ELL;
  qword_1EDB6FC58 = swift_getKeyPath();
  unk_1EDB6FC60 = 0xD000000000000013;
  *(_QWORD *)&xmmword_1EDB6FC68 = 0x80000001DDF5A580;
  result = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6FC68 + 1) = result;
  return result;
}

{
  uint64_t result;

  strcpy((char *)&static PKDrawingStruct.fields, "canvasBounds");
  unk_1EDB71B85 = 0;
  unk_1EDB71B86 = -5120;
  qword_1EDB71B88 = swift_getKeyPath();
  unk_1EDB71B90 = 0x73656B6F727473;
  qword_1EDB71B98 = 0xE700000000000000;
  result = swift_getKeyPath();
  qword_1EDB71BA0 = result;
  return result;
}

{
  uint64_t result;

  *(_QWORD *)&static ShapeSecondaryProperties.fields = 1954047348;
  *((_QWORD *)&static ShapeSecondaryProperties.fields + 1) = 0xE400000000000000;
  qword_1EDB6F930 = swift_getKeyPath();
  unk_1EDB6F938 = 0xD000000000000015;
  *(_QWORD *)&xmmword_1EDB6F940 = 0x80000001DDF5C7B0;
  *((_QWORD *)&xmmword_1EDB6F940 + 1) = swift_getKeyPath();
  strcpy(byte_1EDB6F950, "resizeBehavior");
  HIBYTE(qword_1EDB6F958) = -18;
  *(_QWORD *)&xmmword_1EDB6F960 = swift_getKeyPath();
  *((_QWORD *)&xmmword_1EDB6F960 + 1) = 7894369;
  qword_1EDB6F970 = 0xE300000000000000;
  qword_1EDB6F978 = swift_getKeyPath();
  unk_1EDB6F980 = 0x7367616C66;
  qword_1EDB6F988 = 0xE500000000000000;
  qword_1EDB6F990 = swift_getKeyPath();
  unk_1EDB6F998 = 0x7453656B6F727473;
  *(_QWORD *)&xmmword_1EDB6F9A0 = 0xEB00000000656C79;
  *((_QWORD *)&xmmword_1EDB6F9A0 + 1) = swift_getKeyPath();
  unk_1EDB6F9B0 = 0x776F64616873;
  qword_1EDB6F9B8 = 0xE600000000000000;
  result = swift_getKeyPath();
  qword_1EDB6F9C0 = result;
  return result;
}

uint64_t static PKStrokeInheritedProperties.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6F210;
  v4 = qword_1EDB6F218;
  v3 = unk_1EDB6F220;
  v5 = qword_1EDB6F228;
  v6 = qword_1EDB6F230;
  v7 = qword_1EDB6F238;
  v8 = qword_1EDB6F240;
  v9 = qword_1EDB6F248;
  *a1 = static PKStrokeInheritedProperties.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PKStrokeInheritedProperties.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[6];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v13 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v6, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v11 = type metadata accessor for PKStrokeInheritedProperties(0);
  v13[0] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v13[0] = 0x3FF0000000000000;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  v13[4] = 0;
  v13[5] = 0;
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v11 + 28)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t PKStrokeInheritedProperties.init(ink:transform:)@<X0>(void *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t v24;
  char *v25;
  id v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  char *v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v40 = a2;
  v38 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v39 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v32 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v20, (uint64_t)v16, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v23 = (int *)type metadata accessor for PKStrokeInheritedProperties(0);
  v31 = a3 + v23[5];
  *(_QWORD *)&v43 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v24 = a3 + v23[6];
  v43 = 0x3FF0000000000000uLL;
  *(_QWORD *)&v44 = 0;
  *((_QWORD *)&v44 + 1) = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  v45 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a3 + v23[7]) = MEMORY[0x1E0DEE9E0];
  v22(v20, 1, 1, v21);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
  v25 = v32;
  CRRegister.init<A>(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 40))(a3, v25, v34);
  *(_QWORD *)&v43 = v38;
  v26 = v38;
  v27 = v35;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 40))(v31, v27, v37);
  v28 = v39;
  v29 = v40[1];
  v43 = *v40;
  v44 = v29;
  v45 = v40[2];
  CRRegister.init(_:)();

  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 40))(v24, v28, v42);
}

uint64_t PKStrokeInheritedProperties.init(inherited:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v37 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v40 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v36 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v33 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v31, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v32 = *(_QWORD *)(v19 - 8);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v20(v18, 1, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, (uint64_t)v14, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v30 = lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v21 = (int *)type metadata accessor for PKStrokeInheritedProperties(0);
  v29 = a2 + v21[5];
  v43 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  lazy protocol witness table accessor for type PKInk? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v28 = a2 + v21[6];
  v43 = 0x3FF0000000000000;
  v44 = 0;
  v45 = 0;
  v46 = 0x3FF0000000000000;
  type metadata accessor for CGAffineTransform(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
  v47 = 0;
  v48 = 0;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a2 + v21[7]) = MEMORY[0x1E0DEE9E0];
  v22 = v32;
  v23 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v18, v37, v19);
  v20(v18, 0, 1, v19);
  v24 = v33;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 40))(a2, v24, v35);
  v43 = 0;
  v25 = v36;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 40))(v29, v25, v39);
  v43 = 0x3FF0000000000000;
  v44 = 0;
  v45 = 0;
  v46 = 0x3FF0000000000000;
  v47 = 0;
  v48 = 0;
  v26 = v40;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v19);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 40))(v28, v26, v42);
}

uint64_t PKStrokeInheritedProperties.inkTimestamp.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11778]);
}

uint64_t PKStrokeInheritedProperties.$ink.getter(void (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;

  a1(0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  return a3(v5);
}

uint64_t PKStrokeInheritedProperties.transformTimestamp.getter()
{
  return PKStrokeInheritedProperties.$transform.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11778]);
}

uint64_t PKStrokeInheritedProperties.$transform.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PKStrokeInheritedProperties(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  return a1(v2);
}

uint64_t PKStrokeInheritedProperties.minAppFormatVersion.getter()
{
  id v0;
  uint64_t v1;
  id v3;

  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  if (!v3)
    return 0;
  v0 = objc_msgSend(v3, sel_requiredContentVersion);
  v1 = (uint64_t)objc_msgSend(v3, sel_inkFormatVersion);

  if (v1 <= 1)
  {
    if (v1 == 1)
    {
      if (v0 == (id)3)
        return 5;
      else
        return 3;
    }
    goto LABEL_11;
  }
  if (v1 != 2)
  {
    if (v1 == 250)
      return 250;
LABEL_11:
    if (v0 == (id)3)
      return 5;
    else
      return 0;
  }
  if (v0 == (id)3)
    return 5;
  else
    return 4;
}

uint64_t protocol witness for static CRStruct_Base_3.fields.getter in conformance PKStrokeInheritedProperties@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6F210;
  v4 = qword_1EDB6F218;
  v3 = unk_1EDB6F220;
  v5 = qword_1EDB6F228;
  v6 = qword_1EDB6F230;
  v7 = qword_1EDB6F238;
  v8 = qword_1EDB6F240;
  v9 = qword_1EDB6F248;
  *a1 = static PKStrokeInheritedProperties.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return static CRStruct_3.fieldKeys.getter();
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PKStrokeInheritedProperties())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeInheritedProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  return CRStruct_3.minEncodingVersion.getter();
}

uint64_t PKStrokeStruct.inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PKStrokeStruct.inherited : PKStrokeStruct(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t PKStrokeStruct.inherited.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PKStrokeStruct.inherited.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKStrokeStruct.$inherited.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v17 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15((char *)&v17 - v13, a1, v6);
  v15(v11, (uint64_t)v14, v6);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
}

uint64_t PKStrokeStruct.$inherited.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$inherited.setter(a1, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
}

uint64_t PKStrokeInheritedProperties.$inherited.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t (*PKStrokeStruct.$inherited.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

void PKStrokeInheritedProperties.$inherited.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 32), v3[5], v3[1]);
  v5 = (void *)v3[4];
  v6 = (void *)v3[5];
  v8 = v3[2];
  v7 = (void *)v3[3];
  v9 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4(v3[3], v3[4], v3[1]);
    CRRegister.projectedValue.setter();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    CRRegister.projectedValue.setter();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t PKStrokeStruct.properties.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(_QWORD))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for PKStrokeStruct.properties : PKStrokeStruct(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = type metadata accessor for PKStrokeProperties(0);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v11 - v8, type metadata accessor for PKStrokeProperties);
  outlined init with copy of PKStrokeProperties((uint64_t)v9, (uint64_t)v6, type metadata accessor for PKStrokeProperties);
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of PKStrokeProperties((uint64_t)v9, type metadata accessor for PKStrokeProperties);
}

uint64_t PKStrokeStruct.properties.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PKStrokeProperties);
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of PKStrokeProperties(a1, type metadata accessor for PKStrokeProperties);
}

uint64_t (*PKStrokeStruct.properties.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

void PKStrokeInheritedProperties.inherited.modify(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t PKStrokeStruct.$properties.getter()
{
  return PKStrokeInheritedProperties.$ink.getter((void (*)(_QWORD))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v19 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17((char *)&v19 - v15, a1, v8);
  v17(v13, (uint64_t)v16, v8);
  a6(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v16, v8);
}

uint64_t PKStrokeStruct.$properties.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.$ink.setter(a1, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (void (*)(_QWORD))type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.$ink.setter(uint64_t a1, uint64_t *a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  a3(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

uint64_t (*PKStrokeStruct.$properties.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PKStrokeStruct(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

void PKStrokeInheritedProperties.$ink.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 16) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 32), v3[5], v3[1]);
  v5 = (void *)v3[4];
  v6 = (void *)v3[5];
  v8 = v3[2];
  v7 = (void *)v3[3];
  v9 = v3[1];
  if ((a2 & 1) != 0)
  {
    v4(v3[3], v3[4], v3[1]);
    CRRegister.projectedValue.setter();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    CRRegister.projectedValue.setter();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t PKStrokeStruct.additionalFields.getter()
{
  return PKStrokeInheritedProperties.additionalFields.getter((void (*)(_QWORD))type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.additionalFields.getter(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t PKStrokeStruct.additionalFields.setter(uint64_t a1)
{
  return PKStrokeInheritedProperties.additionalFields.setter(a1, type metadata accessor for PKStrokeStruct);
}

uint64_t PKStrokeInheritedProperties.additionalFields.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2(0) + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*PKStrokeStruct.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PKStrokeStruct(0);
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PKStrokeStruct.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = qword_1EDB6EFF8;
  v4 = qword_1EDB6F000;
  v3 = unk_1EDB6F008;
  v5 = qword_1EDB6F010;
  v6 = qword_1EDB6F018;
  *a1 = static PKStrokeStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PKStrokeStruct.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;

  v2 = (int *)type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for PKStrokeStruct(0);
  v11 = *(int *)(v10 + 24);
  type metadata accessor for PKStrokeStructCache();
  v12 = swift_allocObject();
  v13 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v12 + 16) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(a1 + v11) = v12;
  *(_QWORD *)(v12 + 96) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  *(_QWORD *)(a1 + *(int *)(v10 + 28)) = MEMORY[0x1E0DEE9E0];
  static CRKeyPath.unique.getter();
  type metadata accessor for PKStrokeInheritedProperties(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  Ref.init(id:)();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
  CRRegister.init(_:)();
  v14 = &v5[v2[5]];
  v15 = type metadata accessor for UUID();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v16(&v5[v2[6]], 1, 1, v15);
  static CRKeyPath.unique.getter();
  type metadata accessor for PKStrokePathStruct(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  Ref.init(id:)();
  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)&v5[v2[7]] = 0;
  *(_QWORD *)&v5[v2[9]] = 0;
  v18 = &v5[v2[10]];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[32] = 1;
  v19 = &v5[v2[11]];
  *((_OWORD *)v19 + 1) = 0u;
  *((_OWORD *)v19 + 2) = 0u;
  *(_OWORD *)v19 = 0u;
  v19[48] = 1;
  *(_QWORD *)&v5[v2[12]] = v17;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  return CRRegister.init(_:)();
}

uint64_t PKStrokeStruct.init(inheritedProperties:path:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  PKStrokeStruct.init(inheritedProperties:path:flags:mask:)((uint64_t)v15, (uint64_t)v10, 0, 0, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
}

uint64_t PKStrokeStruct.init(inheritedProperties:path:flags:mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v52 = a4;
  v59 = a3;
  v48 = a2;
  v63 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v48 - v15;
  v17 = (int *)type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v60 = *(_QWORD *)(v21 - 8);
  v61 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v58 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for PKStrokeStruct(0);
  v30 = *(int *)(v29 + 24);
  type metadata accessor for PKStrokeStructCache();
  v31 = swift_allocObject();
  v32 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v31 + 16) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 48) = 0;
  *(_QWORD *)(v31 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(v31 + 64) = 0;
  *(_QWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v31 + 88) = 0;
  *(_QWORD *)(v31 + 96) = 0;
  *(_QWORD *)(v31 + 104) = 0;
  *(_QWORD *)(a5 + v30) = v31;
  v55 = v29;
  *(_QWORD *)(a5 + *(int *)(v29 + 28)) = MEMORY[0x1E0DEE9E0];
  v56 = v25;
  v33 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v63, v24);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
  v62 = a5;
  v34 = v49;
  v35 = v50;
  v53 = v24;
  CRRegister.init(_:)();
  v36 = type metadata accessor for UUID();
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v54 = v16;
  v37(v16, 1, 1, v36);
  v57 = v13;
  v37(v13, 1, 1, v36);
  v38 = v51;
  v39 = v33;
  v40 = v52;
  (*(void (**)(void))(v34 + 16))();
  type metadata accessor for PKStrokeMaskStruct();
  v41 = swift_allocObject();
  if (v40)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    v42 = swift_allocObject();
    *(_QWORD *)(v42 + 16) = v40;
    *(_QWORD *)(v41 + 16) = v42;
  }
  else
  {
    swift_deallocPartialClassInstance();
    v41 = 0;
  }
  v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)v20 = v59;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v54, (uint64_t)&v20[v17[5]], &demangling cache variable for type metadata for UUID?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v57, (uint64_t)&v20[v17[6]], &demangling cache variable for type metadata for UUID?);
  *(_QWORD *)&v20[v17[7]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v20[v17[8]], v38, v35);
  *(_QWORD *)&v20[v17[9]] = v41;
  v44 = &v20[v17[10]];
  *(_OWORD *)v44 = 0u;
  *((_OWORD *)v44 + 1) = 0u;
  v44[32] = 1;
  v45 = &v20[v17[11]];
  *((_OWORD *)v45 + 1) = 0u;
  *((_OWORD *)v45 + 2) = 0u;
  *(_OWORD *)v45 = 0u;
  v45[48] = 1;
  *(_QWORD *)&v20[v17[12]] = v43;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
  v46 = v58;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v39, v35);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v63, v53);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v60 + 32))(v62 + *(int *)(v55 + 20), v46, v61);
}

uint64_t PKStrokeStruct.minAppFormatVersion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  v4 = *v3;
  outlined destroy of PKStrokeProperties((uint64_t)v3, type metadata accessor for PKStrokeProperties);
  if (_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(v4 & 0xFFFFFFFFFFFFLL))
    return 6;
  else
    return 0;
}

uint64_t PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(_QWORD **, _QWORD);
  _QWORD v53[2];
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v53[0] = a2;
  v62 = *a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v56 = (uint64_t)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v55 = (char *)v53 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v53 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v53 - v16;
  v18 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v53[1] = (char *)v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v53 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v53 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v54 = (char *)v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v53 - v35;
  MEMORY[0x1E0C80A78](v37, v38);
  v58 = (char *)v53 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)v53 - v42;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v59 = v2;
  CRRegister.wrappedValue.getter();
  v60 = a1;
  Ref.subscript.getter();
  v44 = *(void (**)(char *, uint64_t))(v30 + 8);
  v44(v43, v29);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for PKStrokeInheritedProperties);
  v61 = v30;
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v43) = v45(v17, 1, v29);
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if ((_DWORD)v43 != 1)
  {
    CRRegister.wrappedValue.getter();
    v64 = v60;
    swift_retain_n();
    CRRegister.wrappedValue.getter();
    v47 = MEMORY[0x1E0D12A88];
    while (1)
    {
      v48 = type metadata accessor for Capsule.Ref();
      MEMORY[0x1DF0E6450](v47, v48);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v24, type metadata accessor for PKStrokeInheritedProperties);
      if (v45(v13, 1, v29) == 1)
        break;
      v44(v36, v29);
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v36, v13, v29);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    swift_release();
    Ref.subscript.getter();
    v44(v36, v29);
    v49 = v58;
    Ref.subscript.setter();
    v44(v49, v29);
    v50 = v54;
    CRRegister.wrappedValue.getter();
    v51 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v55, 1, 1, v29);
    v52 = (void (*)(_QWORD **, _QWORD))Ref.subscript.modify();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v51, v56, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v51, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v52(&v64, 0);
    return ((uint64_t (*)(char *, uint64_t))v44)(v50, v29);
  }
  return result;
}

Swift::Void __swiftcall PKStrokeStruct.didMerge()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  v1 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v2 = *(_QWORD *)(v0 + v1);
    v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v2 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v2 + 32) = v3;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    v4 = swift_allocObject();
    v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v4 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)(v0 + v1) = v4;
    swift_release();
  }
}

uint64_t PKStrokeStruct.apply(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD);
  uint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char *v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v37 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for fields != -1)
    swift_once();
  v20 = qword_1EDB6F010;
  v39 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v15, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?));
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48);
  v22 = v38(v15, 1, v21);
  v40 = v20;
  if (v22 == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v19, 1, 1, v23);
  }
  else
  {
    v24 = *(int *)(v21 + 48);
    v37 = v7;
    v25 = v2;
    v26 = &v15[v24];
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v15, (uint64_t)v19, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v27 = (uint64_t)v26;
    v2 = v25;
    v7 = v37;
    outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  }
  v28 = (void (*)(_BYTE *, _QWORD))swift_modifyAtWritableKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  v28(v41, 0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v39, (uint64_t)v12, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
  if (v38(v12, 1, v21) == 1)
  {
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for (CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?, CRRegister<PKStrokeProperties>.MutatingAction?)?);
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v7, 1, 1, v29);
  }
  else
  {
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v12[*(int *)(v21 + 48)], (uint64_t)v7, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
    swift_retain();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>.MutatingAction?);
  }
  v30 = (void (*)(_BYTE *, _QWORD))swift_modifyAtWritableKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>.MutatingAction?);
  v30(v41, 0);
  swift_release();
  v31 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v32 = *(_QWORD *)(v2 + v31);
    v33 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v32 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v32 + 32) = v33;
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    v34 = swift_allocObject();
    v35 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v34 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v34 + 32) = v35;
    *(_QWORD *)(v34 + 48) = 0;
    *(_QWORD *)(v34 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v34 + 64) = 0;
    *(_QWORD *)(v34 + 72) = 0;
    *(_QWORD *)(v34 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v34 + 88) = 0;
    *(_QWORD *)(v34 + 96) = 0;
    *(_QWORD *)(v34 + 104) = 0;
    *(_QWORD *)(v2 + v31) = v34;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void one-time initialization function for unfairLock()
{
  static PKStrokeStruct.unfairLock = 0;
}

uint64_t static PKStrokeStruct.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  _QWORD *v28;
  _QWORD *v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v4 = type metadata accessor for PKStrokeProperties(0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v8);
  v34 = (char *)&v32 - v9;
  v33 = type metadata accessor for PKStrokeStruct(0);
  v11 = MEMORY[0x1E0C80A78](v33, v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v32 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v23);
  v25 = (char *)&v32 - v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  CRRegister.wrappedValue.getter();
  type metadata accessor for PKStrokeInheritedProperties(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  v26 = static Ref.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v18 + 8);
  v27(v22, v17);
  v27(v25, v17);
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v16, type metadata accessor for PKStrokeStruct);
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v13, type metadata accessor for PKStrokeStruct);
  if ((v26 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v28 = v34;
    CRRegister.wrappedValue.getter();
    v29 = v35;
    CRRegister.wrappedValue.getter();
    v30 = specialized static PKStrokeProperties.== infix(_:_:)(v28, v29);
    outlined destroy of PKStrokeProperties((uint64_t)v29, type metadata accessor for PKStrokeProperties);
    outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for PKStrokeProperties);
  }
  else
  {
    v30 = 0;
  }
  outlined destroy of PKStrokeProperties((uint64_t)v13, type metadata accessor for PKStrokeStruct);
  outlined destroy of PKStrokeProperties((uint64_t)v16, type metadata accessor for PKStrokeStruct);
  return v30 & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.minEncodingVersion.getter();
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance PKStrokeStruct()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (uint64_t *)((char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  v4 = *v3;
  outlined destroy of PKStrokeProperties((uint64_t)v3, type metadata accessor for PKStrokeProperties);
  if (_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(v4 & 0xFFFFFFFFFFFFLL))
    return 6;
  else
    return 0;
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PKStrokeStruct@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = qword_1EDB6EFF8;
  v4 = qword_1EDB6F000;
  v3 = unk_1EDB6F008;
  v5 = qword_1EDB6F010;
  v6 = qword_1EDB6F018;
  *a1 = static PKStrokeStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return static CRStruct_2.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PKStrokeStruct()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRStruct_2.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKStrokeStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
  return CRDT.init(serializedData:)();
}

double specialized CRRegister<>.bounds(in:)(uint64_t a1, objc_class *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *boxed_opaque_existential_1;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  void (*v67)(char *, uint64_t);
  objc_class *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  objc_class *v86;
  uint64_t v87;
  void *v88;
  CGAffineTransform *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  objc_class *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  objc_class *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  objc_class *isa;
  char *v125;
  uint64_t v126[3];
  char *v127;
  objc_class *v128;
  uint64_t v129;
  PKStrokePath_optional v130;
  PKInk_optional v131;

  v121 = a4;
  v122 = a1;
  isa = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v114 = (objc_class *)((char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v113 = *(_QWORD **)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v8);
  v112 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v100 = (char *)&v99 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v117 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v99 - v18;
  v120 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v120, v20);
  v118 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v125 = (char *)&v99 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v115 = (char *)&v99 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v99 - v30;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v116 = (char *)&v99 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v99 - v38;
  v108 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v108, v40);
  v109 = (char *)&v99 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v42);
  v107 = (char *)&v99 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v44, v45);
  v119 = (uint64_t)&v99 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v48 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v49);
  v51 = (char *)&v99 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v99 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v106, v56);
  v105 = (char *)&v99 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v123 = (uint64_t)&v99 - v60;
  v127 = (char *)a3;
  v128 = (objc_class *)v121;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v126);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_1, v122, a3);
  v104 = v128;
  v121 = (uint64_t)v127;
  v103 = __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v62 = *(void (**)(char *, uint64_t))(v48 + 8);
  v122 = v47;
  v62(v51, v47);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v64 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v55, 1, v63) == 1)
  {
    v65 = v112;
    v66 = v113;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
    v67 = v62;
    CRRegister.value.getter();
    v68 = v114;
    v69 = v122;
    SharedTagged_2.tagged2.getter();
    v70 = (uint64_t)v68;
    v67(v51, v69);
    v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    v72 = *(_QWORD *)(v71 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v70, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      v73 = *MEMORY[0x1E0C9D628];
    }
    else
    {
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v71);
      v90 = v100;
      v91 = v101;
      v92 = ((uint64_t (*)(char *, char *, uint64_t))v66[4])(v100, v65, v101);
      v94 = MEMORY[0x1E0C80A78](v92, v93);
      *(&v99 - 2) = (uint64_t)v126;
      v73 = specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, char *))partial apply for closure #1 in CRRegister<>.bounds(in:), (uint64_t)(&v99 - 4), v94, v95, v96, v97);
      ((void (*)(char *, uint64_t))v66[1])(v90, v91);
    }
  }
  else
  {
    v74 = (uint64_t)v105;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v55, v63);
    outlined init with take of PKStrokeStruct(v74, v123, type metadata accessor for PKStrokeStruct);
    v122 = (uint64_t)v127;
    isa = v128;
    v121 = (uint64_t)__swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v75 = (uint64_t)v109;
    CRRegister.wrappedValue.getter();
    v76 = v110;
    v77 = v107;
    v78 = v111;
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v107, v75 + *(int *)(v108 + 32), v111);
    outlined destroy of PKStrokeProperties(v75, type metadata accessor for PKStrokeProperties);
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
    isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v114 = v128;
    v122 = (uint64_t)v127;
    v113 = __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
    v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v31, type metadata accessor for PKStrokeInheritedProperties);
      v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      if (v79(v19, 1, v32) == 1)
        break;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v39, v32);
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v39, v19, v32);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v80 = (uint64_t)v115;
    Ref.subscript.getter();
    v81 = *(void (**)(char *, uint64_t))(v33 + 8);
    v81(v39, v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    v122 = v129;
    outlined destroy of PKStrokeProperties(v80, type metadata accessor for PKStrokeInheritedProperties);
    v114 = v128;
    v115 = v127;
    v113 = __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
    v82 = v116;
    CRRegister.wrappedValue.getter();
    v83 = (uint64_t)v117;
    v84 = (uint64_t)v125;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v126, (uint64_t)v127);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v84, type metadata accessor for PKStrokeInheritedProperties);
      if (v79((char *)v83, 1, v32) == 1)
        break;
      v81(v82, v32);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v82, v83, v32);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v85 = (uint64_t)v118;
    Ref.subscript.getter();
    v81(v82, v32);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v85, type metadata accessor for PKStrokeInheritedProperties);
    v131.value.super.isa = (Class)&v129;
    v87 = v123;
    v86 = isa;
    v130.value.super.isa = isa;
    v88 = (void *)v122;
    v130.is_nil = v122;
    *(_QWORD *)&v73 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v130, v131, v89);

    outlined destroy of PKStrokeProperties(v119, type metadata accessor for PKStrokePathStruct);
    outlined destroy of PKStrokeProperties(v87, type metadata accessor for PKStrokeStruct);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
  return v73;
}

BOOL specialized static PKStrokeStructCache.BoundsParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[8];
  _BYTE v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  outlined init with take of (key: Int, value: AnyCRValue)?(a2, (uint64_t)v18, &demangling cache variable for type metadata for PKStrokePath?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for PKStrokePath?);
  v4 = v19;
  outlined init with take of (key: Int, value: AnyCRValue)?(a1, (uint64_t)v17, &demangling cache variable for type metadata for PKStrokePath?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v17, (uint64_t)&v20, &demangling cache variable for type metadata for PKStrokePath?);
  if (v20)
  {
    result = 0;
    if (!v4 || v20 != v4)
      return result;
  }
  else if (v4)
  {
    return 0;
  }
  v6 = *(_OWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 8);
  v15 = v6;
  v16 = *(_OWORD *)(a1 + 40);
  v7 = *(_OWORD *)(a2 + 24);
  v11 = *(_OWORD *)(a2 + 8);
  v12 = v7;
  v13 = *(_OWORD *)(a2 + 40);
  if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
    return 0;
  outlined init with take of (key: Int, value: AnyCRValue)?(a2 + 56, (uint64_t)v10, &demangling cache variable for type metadata for PKInk?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v10, (uint64_t)&v21, &demangling cache variable for type metadata for PKInk?);
  v8 = v21;
  outlined init with take of (key: Int, value: AnyCRValue)?(a1 + 56, (uint64_t)&v9, &demangling cache variable for type metadata for PKInk?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v9, (uint64_t)&v22, &demangling cache variable for type metadata for PKInk?);
  result = __PAIR128__(v22, v8) == 0;
  if (v22)
  {
    if (v8)
      return v22 == v8;
    else
      return __PAIR128__(v22, 0) == 0;
  }
  return result;
}

uint64_t specialized static PKStrokeProperties.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  _BYTE *v42;
  void (*v43)(_BYTE *, uint64_t);
  int *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _BYTE *v53;
  char v54;
  void (*v55)(_BYTE *, uint64_t);
  _QWORD *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int128 *v75;
  char v76;
  __int128 *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  __int128 *v90;
  char v91;
  _QWORD *v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[12];
  int v100;
  uint64_t v101;
  _BYTE *v102;
  _QWORD *v103;
  int *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v108 = &v99[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = &v99[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = &v99[-v14];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = &v99[-v25];
  v28 = MEMORY[0x1E0C80A78](v24, v27);
  v30 = &v99[-v29];
  MEMORY[0x1E0C80A78](v28, v31);
  v36 = &v99[-v35];
  if (*a1 != *a2)
    goto LABEL_16;
  v106 = v34;
  v107 = v33;
  v101 = v32;
  v102 = v12;
  v37 = type metadata accessor for PKStrokeProperties(0);
  v38 = *(int *)(v37 + 20);
  v105 = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)a1 + v38, (uint64_t)v36, &demangling cache variable for type metadata for UUID?);
  v103 = a2;
  v104 = (int *)v37;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)a2 + *(int *)(v37 + 20), (uint64_t)v30, &demangling cache variable for type metadata for UUID?);
  v39 = (uint64_t)&v15[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v36, (uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v30, v39, &demangling cache variable for type metadata for UUID?);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v40((uint64_t)v15, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for UUID?);
    if (v40(v39, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
      goto LABEL_9;
    }
LABEL_7:
    v41 = (uint64_t)v15;
LABEL_15:
    outlined destroy of StocksKitCurrencyCache.Provider?(v41, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_16;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v15, (uint64_t)v26, &demangling cache variable for type metadata for UUID?);
  if (v40(v39, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v26, v4);
    goto LABEL_7;
  }
  v42 = v108;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v108, v39, v4);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v100 = dispatch thunk of static Equatable.== infix(_:_:)();
  v43 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v43(v42, v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for UUID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for UUID?);
  v43(v26, v4);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  if ((v100 & 1) == 0)
    goto LABEL_16;
LABEL_9:
  v44 = v104;
  v45 = v107;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v105 + v104[6], v107, &demangling cache variable for type metadata for UUID?);
  v46 = v103;
  v47 = v106;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v103 + v44[6], v106, &demangling cache variable for type metadata for UUID?);
  v48 = (uint64_t)v102;
  v49 = (uint64_t)&v102[*(int *)(v8 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v45, (uint64_t)v102, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v47, v49, &demangling cache variable for type metadata for UUID?);
  if (v40(v48, 1, v4) != 1)
  {
    v50 = v101;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v48, v101, &demangling cache variable for type metadata for UUID?);
    if (v40(v49, 1, v4) != 1)
    {
      v53 = v108;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v108, v49, v4);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v54 = dispatch thunk of static Equatable.== infix(_:_:)();
      v55 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v55(v53, v4);
      outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for UUID?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for UUID?);
      v55((_BYTE *)v50, v4);
      outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for UUID?);
      if ((v54 & 1) == 0)
        goto LABEL_16;
      goto LABEL_19;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for UUID?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v50, v4);
    goto LABEL_14;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for UUID?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for UUID?);
  if (v40(v49, 1, v4) != 1)
  {
LABEL_14:
    v41 = v48;
    goto LABEL_15;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for UUID?);
LABEL_19:
  v57 = v104;
  v56 = v105;
  if (*(_QWORD *)((char *)v105 + v104[7]) != *(_QWORD *)((char *)v46 + v104[7]))
    goto LABEL_16;
  type metadata accessor for PKStrokePathStruct(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  if ((static Ref.== infix(_:_:)() & 1) == 0)
    goto LABEL_16;
  v58 = v57[9];
  v59 = *(_QWORD *)((char *)v56 + v58);
  v60 = *(_QWORD *)((char *)v46 + v58);
  if (v59)
  {
    if (!v60)
      goto LABEL_16;
    v61 = *(void **)(*(_QWORD *)(v59 + 16) + 16);
    swift_retain_n();
    swift_retain();
    v62 = objc_msgSend(v61, sel_rawValue);
    v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v65 = v64;

    v66 = objc_msgSend(*(id *)(*(_QWORD *)(v60 + 16) + 16), sel_rawValue);
    v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v69 = v68;

    specialized static Data.== infix(_:_:)(v63, v65);
    LOBYTE(v66) = v70;
    v71 = v67;
    v72 = v69;
    v57 = v104;
    v56 = v105;
    outlined consume of Data._Representation(v71, v72);
    v73 = v65;
    v46 = v103;
    outlined consume of Data._Representation(v63, v73);
    swift_release_n();
    swift_release();
    if ((v66 & 1) == 0)
      goto LABEL_16;
  }
  else if (v60)
  {
    goto LABEL_16;
  }
  v74 = v57[10];
  v75 = (__int128 *)((char *)v56 + v74);
  v76 = *((_BYTE *)v56 + v74 + 32);
  v77 = (__int128 *)((char *)v46 + v74);
  if ((v76 & 1) != 0)
  {
    if (!*((_BYTE *)v77 + 32))
      goto LABEL_16;
  }
  else
  {
    if ((v77[2] & 1) != 0)
      goto LABEL_16;
    v78 = v75[1];
    v79 = *v77;
    v80 = v77[1];
    v112 = *v75;
    v113 = v78;
    v109 = v79;
    v110 = v80;
    v81 = PKStrokeClipPlane.rawValue.getter();
    v83 = v82;
    v84 = PKStrokeClipPlane.rawValue.getter();
    v86 = v85;
    specialized static Data.== infix(_:_:)(v81, v83);
    v88 = v87;
    outlined consume of Data._Representation(v84, v86);
    outlined consume of Data._Representation(v81, v83);
    if ((v88 & 1) == 0)
      goto LABEL_16;
  }
  v89 = v57[11];
  v90 = (__int128 *)((char *)v56 + v89);
  v91 = *((_BYTE *)v56 + v89 + 48);
  v92 = v103;
  v93 = (char *)v103 + v89;
  if ((v91 & 1) != 0)
  {
    if (v93[48])
    {
LABEL_36:
      v51 = specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)((char *)v56 + v57[12]), *(_QWORD *)((char *)v92 + v57[12]));
      return v51 & 1;
    }
  }
  else if ((v93[48] & 1) == 0)
  {
    v94 = v90[1];
    v95 = v90[2];
    v96 = *(_OWORD *)v93;
    v97 = *((_OWORD *)v93 + 1);
    v98 = *((_OWORD *)v93 + 2);
    v109 = *v90;
    v110 = v94;
    v111 = v95;
    v112 = v96;
    v113 = v97;
    v114 = v98;
    if ((static CGAffineTransform.== infix(_:_:)() & 1) != 0)
      goto LABEL_36;
  }
LABEL_16:
  v51 = 0;
  return v51 & 1;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v43 = a2;
  v3 = type metadata accessor for AnyCRValue();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v39 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v7);
  v38 = (char *)&v33 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, AnyCRValue>);
  result = static _DictionaryStorage.copy(original:)();
  v10 = (_QWORD *)result;
  v11 = 0;
  v42 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v34 = v13;
  v35 = (unint64_t)(v15 + 63) >> 6;
  v36 = result + 64;
  v37 = (_QWORD *)result;
  v18 = v40;
  v19 = v41;
  v20 = v39;
  if ((v16 & v12) == 0)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v44 = v11;
  for (i = v21 | (v11 << 6); ; i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * i);
    v28 = *(_QWORD *)(v18 + 72) * i;
    v29 = v38;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v38, *(_QWORD *)(v42 + 56) + v28, v19);
    AnyCRValue.copy(renamingReferences:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v19);
    v10 = v37;
    *(_QWORD *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v10[6] + 8 * i) = v27;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(v10[7] + v28, v20, v19);
    v30 = v10[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v10[2] = v32;
    v11 = v44;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_24;
    if (v23 >= v35)
      return (uint64_t)v10;
    v24 = *(_QWORD *)(v34 + 8 * v23);
    v25 = v11 + 1;
    if (!v24)
    {
      v25 = v11 + 2;
      if (v11 + 2 >= v35)
        return (uint64_t)v10;
      v24 = *(_QWORD *)(v34 + 8 * v25);
      if (!v24)
      {
        v25 = v11 + 3;
        if (v11 + 3 >= v35)
          return (uint64_t)v10;
        v24 = *(_QWORD *)(v34 + 8 * v25);
        if (!v24)
          break;
      }
    }
LABEL_18:
    v17 = (v24 - 1) & v24;
    v44 = v25;
  }
  v26 = v11 + 4;
  if (v11 + 4 >= v35)
    return (uint64_t)v10;
  v24 = *(_QWORD *)(v34 + 8 * v26);
  if (v24)
  {
    v25 = v11 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v35)
      return (uint64_t)v10;
    v24 = *(_QWORD *)(v34 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  char *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v44 = a2;
  v40 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v3);
  v45 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v41 = (char *)&v35 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
  result = static _DictionaryStorage.copy(original:)();
  v9 = (_QWORD *)result;
  v10 = 0;
  v43 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v36 = v12;
  v37 = (unint64_t)(v14 + 63) >> 6;
  v38 = result + 64;
  v39 = (_QWORD *)result;
  v17 = v40;
  if ((v15 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v19 = v10;
  for (i = v18 | (v10 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v26 = v42;
    v25 = v43;
    v27 = *(_QWORD *)(v42 + 72) * i;
    v28 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, *(_QWORD *)(v43 + 48) + v27, v17);
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    v30 = *(uint64_t (**)(char *, char *, uint64_t))(v26 + 32);
    v31 = v45;
    result = v30(v45, v28, v17);
    v9 = v39;
    if (v29 >= v44)
    {
      v32 = __OFSUB__(v29--, 1);
      if (v32)
        goto LABEL_27;
      v31 = v45;
    }
    *(_QWORD *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v30((char *)(v9[6] + v27), v31, v17);
    *(_QWORD *)(v9[7] + 8 * i) = v29;
    v33 = v9[2];
    v32 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v32)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v9[2] = v34;
    v10 = v19;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_28;
    if (v21 >= v37)
      return (uint64_t)v9;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    v23 = v10 + 1;
    if (!v22)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v37)
        return (uint64_t)v9;
      v22 = *(_QWORD *)(v36 + 8 * v23);
      if (!v22)
      {
        v23 = v10 + 3;
        if (v10 + 3 >= v37)
          return (uint64_t)v9;
        v22 = *(_QWORD *)(v36 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_18:
    v16 = (v22 - 1) & v22;
    v19 = v23;
  }
  v24 = v10 + 4;
  if (v10 + 4 >= v37)
    return (uint64_t)v9;
  v22 = *(_QWORD *)(v36 + 8 * v24);
  if (v22)
  {
    v23 = v10 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v37)
      return (uint64_t)v9;
    v22 = *(_QWORD *)(v36 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  char *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v44 = a2;
  v40 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v3);
  v45 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v41 = (char *)&v35 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
  result = static _DictionaryStorage.copy(original:)();
  v9 = (_QWORD *)result;
  v10 = 0;
  v43 = a1;
  v13 = *(_QWORD *)(a1 + 64);
  v12 = a1 + 64;
  v11 = v13;
  v14 = 1 << *(_BYTE *)(v12 - 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v11;
  v36 = v12;
  v37 = (unint64_t)(v14 + 63) >> 6;
  v38 = result + 64;
  v39 = (_QWORD *)result;
  v17 = v40;
  if ((v15 & v11) == 0)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  v19 = v10;
  for (i = v18 | (v10 << 6); ; i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    v26 = v42;
    v25 = v43;
    v27 = *(_QWORD *)(v42 + 72) * i;
    v28 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, *(_QWORD *)(v43 + 48) + v27, v17);
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * i);
    v30 = *(uint64_t (**)(char *, char *, uint64_t))(v26 + 32);
    v31 = v45;
    result = v30(v45, v28, v17);
    v9 = v39;
    if (v29 >= v44)
    {
      v32 = __OFADD__(v29++, 1);
      if (v32)
        goto LABEL_27;
      v31 = v45;
    }
    *(_QWORD *)(v38 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = v30((char *)(v9[6] + v27), v31, v17);
    *(_QWORD *)(v9[7] + 8 * i) = v29;
    v33 = v9[2];
    v32 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v32)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v9[2] = v34;
    v10 = v19;
    if (v16)
      goto LABEL_4;
LABEL_5:
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_28;
    if (v21 >= v37)
      return (uint64_t)v9;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    v23 = v10 + 1;
    if (!v22)
    {
      v23 = v10 + 2;
      if (v10 + 2 >= v37)
        return (uint64_t)v9;
      v22 = *(_QWORD *)(v36 + 8 * v23);
      if (!v22)
      {
        v23 = v10 + 3;
        if (v10 + 3 >= v37)
          return (uint64_t)v9;
        v22 = *(_QWORD *)(v36 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_18:
    v16 = (v22 - 1) & v22;
    v19 = v23;
  }
  v24 = v10 + 4;
  if (v10 + 4 >= v37)
    return (uint64_t)v9;
  v22 = *(_QWORD *)(v36 + 8 * v24);
  if (v22)
  {
    v23 = v10 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v37)
      return (uint64_t)v9;
    v22 = *(_QWORD *)(v36 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a2;
  v3 = type metadata accessor for PDFPageID();
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v40 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v36 = (uint64_t)&v33 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  result = static _DictionaryStorage.copy(original:)();
  v10 = (_QWORD *)result;
  v11 = 0;
  v38 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v34 = v13;
  v35 = (unint64_t)(v15 + 63) >> 6;
  v18 = result + 64;
  if ((v16 & v12) == 0)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v11 << 6); ; i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    v24 = v38;
    v25 = *(_QWORD *)(v37 + 72) * i;
    v26 = v36;
    outlined init with copy of PKStrokeProperties(*(_QWORD *)(v38 + 48) + v25, v36, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * i);
    v28 = v26;
    v29 = v40;
    result = outlined init with take of PKStrokeStruct(v28, v40, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    if (v27 >= v39)
    {
      v30 = __OFSUB__(v27--, 1);
      if (v30)
        goto LABEL_27;
      v29 = v40;
    }
    *(_QWORD *)(v18 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = outlined init with take of PKStrokeStruct(v29, v10[6] + v25, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    *(_QWORD *)(v10[7] + 8 * i) = v27;
    v31 = v10[2];
    v30 = __OFADD__(v31, 1);
    v32 = v31 + 1;
    if (v30)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v10[2] = v32;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_28;
    if (v21 >= v35)
      return (uint64_t)v10;
    v22 = *(_QWORD *)(v34 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v35)
        return (uint64_t)v10;
      v22 = *(_QWORD *)(v34 + 8 * v11);
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v35)
          return (uint64_t)v10;
        v22 = *(_QWORD *)(v34 + 8 * v11);
        if (!v22)
          break;
      }
    }
LABEL_18:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v35)
    return (uint64_t)v10;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v35)
      return (uint64_t)v10;
    v22 = *(_QWORD *)(v34 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a2;
  v3 = type metadata accessor for PDFPageID();
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v40 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v36 = (uint64_t)&v33 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  result = static _DictionaryStorage.copy(original:)();
  v10 = (_QWORD *)result;
  v11 = 0;
  v38 = a1;
  v14 = *(_QWORD *)(a1 + 64);
  v13 = a1 + 64;
  v12 = v14;
  v15 = 1 << *(_BYTE *)(v13 - 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v12;
  v34 = v13;
  v35 = (unint64_t)(v15 + 63) >> 6;
  v18 = result + 64;
  if ((v16 & v12) == 0)
    goto LABEL_5;
LABEL_4:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v11 << 6); ; i = __clz(__rbit64(v22)) + (v11 << 6))
  {
    v24 = v38;
    v25 = *(_QWORD *)(v37 + 72) * i;
    v26 = v36;
    outlined init with copy of PKStrokeProperties(*(_QWORD *)(v38 + 48) + v25, v36, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * i);
    v28 = v26;
    v29 = v40;
    result = outlined init with take of PKStrokeStruct(v28, v40, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    if (v27 >= v39)
    {
      v30 = __OFADD__(v27++, 1);
      if (v30)
        goto LABEL_27;
      v29 = v40;
    }
    *(_QWORD *)(v18 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = outlined init with take of PKStrokeStruct(v29, v10[6] + v25, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    *(_QWORD *)(v10[7] + 8 * i) = v27;
    v31 = v10[2];
    v30 = __OFADD__(v31, 1);
    v32 = v31 + 1;
    if (v30)
    {
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v10[2] = v32;
    if (v17)
      goto LABEL_4;
LABEL_5:
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_28;
    if (v21 >= v35)
      return (uint64_t)v10;
    v22 = *(_QWORD *)(v34 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v35)
        return (uint64_t)v10;
      v22 = *(_QWORD *)(v34 + 8 * v11);
      if (!v22)
      {
        v11 = v21 + 2;
        if (v21 + 2 >= v35)
          return (uint64_t)v10;
        v22 = *(_QWORD *)(v34 + 8 * v11);
        if (!v22)
          break;
      }
    }
LABEL_18:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 3;
  if (v23 >= v35)
    return (uint64_t)v10;
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v35)
      return (uint64_t)v10;
    v22 = *(_QWORD *)(v34 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys;
  if (!lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeProperties.CodingKeys, &type metadata for PKStrokeProperties.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties.CodingKeys and conformance PKStrokeProperties.CodingKeys);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1DF0E6444](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKStrokeClipPlane and conformance PKStrokeClipPlane()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane;
  if (!lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKStrokeClipPlane, &type metadata for PKStrokeClipPlane);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeClipPlane and conformance PKStrokeClipPlane);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PKStrokeInheritedProperties(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeInheritedProperties);
}

unint64_t lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PKInk? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type PKInk? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PKInk? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PKInk?);
    v2 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKInk and conformance PKInk, (uint64_t (*)(uint64_t))type metadata accessor for PKInk, (uint64_t)&protocol conformance descriptor for PKInk);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKInk? and conformance <A> A?);
  }
  return result;
}

unint64_t type metadata accessor for PKInk()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PKInk;
  if (!lazy cache variable for type metadata for PKInk)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  }
  return result;
}

uint64_t type metadata accessor for PKStrokeStruct(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeStruct);
}

uint64_t type metadata accessor for PKStrokeProperties(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for PKStrokeStructCache()
{
  return objc_opt_self();
}

uint64_t _So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_shouldSolveMath_getter(unint64_t a1)
{
  return (a1 >> 41) & 1;
}

uint64_t outlined init with copy of PKStrokeProperties(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of PKStrokeProperties(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PKStrokeProperties.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKStrokeProperties.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [PKStrokeProperties.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t base witness table accessor for CRValue in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
}

uint64_t base witness table accessor for Decodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
}

uint64_t base witness table accessor for Encodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
}

uint64_t base witness table accessor for CRType in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
}

uint64_t base witness table accessor for CRCodable in PKStrokeProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
}

unint64_t lazy protocol witness table accessor for type TaggedStroke.Enum and conformance TaggedStroke.Enum()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum;
  if (!lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedStroke.Enum, &type metadata for TaggedStroke.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum;
  if (!lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedStroke.Enum, &type metadata for TaggedStroke.Enum);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke.Enum and conformance TaggedStroke.Enum);
  }
  return result;
}

uint64_t associated type witness table accessor for Tagged_2.Type1 : CRDT in TaggedStroke()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for Tagged_2.Type2 : CRDT in TaggedStroke()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11808]);
}

uint64_t associated type witness table accessor for Tagged_2.Unknown : CRDT in TaggedStroke()
{
  return MEMORY[0x1E0D128E0];
}

uint64_t base witness table accessor for CRStruct_Base_3 in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRStruct_Base in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_1 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKStrokeInheritedProperties>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_2 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<PKInk?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PKInk?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_3.Type_3 : CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CGAffineTransform> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGAffineTransform>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRMergeable in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRType in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_3<PKStrokeInheritedProperties> and conformance CRStructMergeableDelta_3<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_3<PKStrokeInheritedProperties>, MEMORY[0x1E0D12748]);
}

uint64_t base witness table accessor for CRCodable in PKStrokeInheritedProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
}

uint64_t base witness table accessor for CRStruct_Base_2 in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t base witness table accessor for CRStruct_Base in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_1 : CRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Ref<PKStrokeInheritedProperties>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<PKStrokeProperties> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRMergeable in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t base witness table accessor for CRType in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PKStrokeStruct> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PKStrokeStruct>, MEMORY[0x1E0D12738]);
}

uint64_t lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1DF0E6450](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CRCodable in PKStrokeStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
}

uint64_t sub_1DDB3AE08()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t sub_1DDB3AE40()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB3AE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
}

uint64_t sub_1DDB3AE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties, &demangling cache variable for type metadata for CRRegister<PKInk?>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t sub_1DDB3AEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<PKInk?>, (void (*)(_QWORD))type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t sub_1DDB3AEE0()
{
  type metadata accessor for PKStrokeInheritedProperties(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB3AF30()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.wrappedValue.getter();
}

uint64_t sub_1DDB3AF68()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB3AF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$inherited : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
}

uint64_t sub_1DDB3AFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t keypath_get_5Tm(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v8;

  a4(0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return a6(v8);
}

uint64_t sub_1DDB3B030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_5Tm(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for PKStrokeStruct, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t sub_1DDB3B04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeInheritedProperties.$ink : PKStrokeInheritedProperties(a1, a2, a3, a4, &demangling cache variable for type metadata for CRRegister<PKStrokeProperties>, (void (*)(_QWORD))type metadata accessor for PKStrokeStruct);
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    if (v12((char *)a2 + v15, 1, v10))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v19 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[10];
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    v24[32] = v25[32];
    v27 = a3[11];
    v28 = a3[12];
    v29 = (char *)v4 + v27;
    v30 = (char *)a2 + v27;
    v31 = *((_OWORD *)v30 + 1);
    *(_OWORD *)v29 = *(_OWORD *)v30;
    *((_OWORD *)v29 + 1) = v31;
    *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    v29[48] = v30[48];
    *(uint64_t *)((char *)v4 + v28) = *(uint64_t *)((char *)a2 + v28);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for PKStrokeProperties(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[6];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  v9 = a1 + a2[8];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PKStrokeProperties(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  v18 = (char *)a1 + v17;
  v19 = &a2[v17];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v21 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  v22 = (char *)a1 + v21;
  v23 = &a2[v21];
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v22[32] = v23[32];
  v25 = a3[11];
  v26 = a3[12];
  v27 = (char *)a1 + v25;
  v28 = &a2[v25];
  v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  v27[48] = v28[48];
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)&a2[v26];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for PKStrokeProperties(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char v33;
  __int128 v34;
  __int128 v35;

  *(_QWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)((char *)a2 + a3[7]);
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  v25 = a3[10];
  v26 = &a1[v25];
  v27 = (char *)a2 + v25;
  v28 = *(_OWORD *)v27;
  v29 = *((_OWORD *)v27 + 1);
  v26[32] = v27[32];
  *(_OWORD *)v26 = v28;
  *((_OWORD *)v26 + 1) = v29;
  v30 = a3[11];
  v31 = &a1[v30];
  v32 = (char *)a2 + v30;
  v33 = v32[48];
  v35 = *((_OWORD *)v32 + 1);
  v34 = *((_OWORD *)v32 + 2);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v35;
  *((_OWORD *)v31 + 2) = v34;
  v31[48] = v33;
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for PKStrokeProperties(_QWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;

  *a1 = *(_QWORD *)a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  v18 = (char *)a1 + v17;
  v19 = &a2[v17];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  v22 = (char *)a1 + v21;
  v23 = &a2[v21];
  v24 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v24;
  v22[32] = v23[32];
  v25 = a3[11];
  v26 = a3[12];
  v27 = (char *)a1 + v25;
  v28 = &a2[v25];
  v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  v27[48] = v28[48];
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)&a2[v26];
  return a1;
}

char *assignWithTake for PKStrokeProperties(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  *(_QWORD *)a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (char *)a2 + v15;
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  v21 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)((char *)a2 + a3[7]);
  v22 = &a1[v21];
  v23 = (char *)a2 + v21;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)((char *)a2 + a3[9]);
  swift_release();
  v25 = a3[10];
  v26 = a3[11];
  v27 = &a1[v25];
  v28 = (char *)a2 + v25;
  v27[32] = v28[32];
  v29 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v29;
  v30 = &a1[v26];
  v31 = (char *)a2 + v26;
  v30[48] = v31[48];
  v32 = *((_OWORD *)v31 + 2);
  v33 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = *((_OWORD *)v31 + 1);
  *((_OWORD *)v30 + 2) = v32;
  *(_OWORD *)v30 = v33;
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeProperties()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3BBCC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[12]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeProperties()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3BC84(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

void type metadata completion function for PKStrokeProperties()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Ref<PKStrokePathStruct>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

void type metadata accessor for Ref<PKStrokePathStruct>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Ref<PKStrokePathStruct>)
  {
    type metadata accessor for PKStrokePathStruct(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
    v0 = type metadata accessor for Ref();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Ref<PKStrokePathStruct>);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PKStrokeProperties.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeProperties.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1DDB3BFA4 + 4 * byte_1DDF3164E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1DDB3BFD8 + 4 * byte_1DDF31649[v4]))();
}

uint64_t sub_1DDB3BFD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3BFE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB3BFE8);
  return result;
}

uint64_t sub_1DDB3BFF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB3BFFCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1DDB3C000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3C008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PKStrokeProperties.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PKStrokeProperties.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PKStrokeProperties.CodingKeys()
{
  return &type metadata for PKStrokeProperties.CodingKeys;
}

ValueMetadata *type metadata accessor for TaggedStroke()
{
  return &type metadata for TaggedStroke;
}

uint64_t getEnumTagSinglePayload for TaggedStroke.Enum(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TaggedStroke.Enum(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDB3C120 + 4 * byte_1DDF31658[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDB3C154 + 4 * byte_1DDF31653[v4]))();
}

uint64_t sub_1DDB3C154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3C15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB3C164);
  return result;
}

uint64_t sub_1DDB3C170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB3C178);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDB3C17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3C184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for TaggedStroke.Enum(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TaggedStroke.Enum()
{
  return &type metadata for TaggedStroke.Enum;
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeInheritedProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for PKStrokeInheritedProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeInheritedProperties()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3C68C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeInheritedProperties()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3C770(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

void type metadata completion function for PKStrokeInheritedProperties()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKStrokeInheritedProperties>? and conformance <A> A?);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<PKInk?>, &demangling cache variable for type metadata for PKInk?, (void (*)(void))lazy protocol witness table accessor for type PKInk? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<PKStrokeProperties>(319, &lazy cache variable for type metadata for CRRegister<CGAffineTransform>, (uint64_t (*)(uint64_t))type metadata accessor for CGAffineTransform, (unint64_t *)&lazy protocol witness table cache variable for type CGAffineTransform and conformance CGAffineTransform, (uint64_t)&protocol conformance descriptor for CGAffineTransform);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(uint64_t a1, unint64_t *a2, uint64_t *a3, void (*a4)(void))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    a4();
    v6 = type metadata accessor for CRRegister();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void type metadata accessor for CRRegister<PKStrokeProperties>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
    v9 = type metadata accessor for CRRegister();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PKStrokeStruct(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for PKStrokeStruct(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_release();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeStruct()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3CE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeStruct()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3CF0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void type metadata completion function for PKStrokeStruct()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<PKStrokeProperties>(319, &lazy cache variable for type metadata for CRRegister<PKStrokeProperties>, type metadata accessor for PKStrokeProperties, (unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  }
}

void destroy for PKStrokeStructCache.BoundsParameters(id *a1)
{

}

uint64_t initializeWithCopy for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(void **)(a1 + 56);
  v8 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = v8;

  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PKStrokeStructCache.BoundsParameters(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v5 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for PKStrokeStructCache.BoundsParameters(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PKStrokeStructCache.BoundsParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PKStrokeStructCache.BoundsParameters()
{
  return &type metadata for PKStrokeStructCache.BoundsParameters;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void partial apply for closure #1 in CRRegister<>.bounds(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  uint64_t v2;

  closure #1 in CRRegister<>.bounds(in:)(a1, *(_QWORD **)(v2 + 16), a2);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

id outlined copy of AsyncCache<Data, CGImageRef>.CacheState(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t outlined init with take of WeakCalculateExpression(uint64_t a1, uint64_t a2)
{
  initializeWithTake for WeakCalculateExpression(a2, a1);
  return a2;
}

uint64_t outlined init with take of PKStrokeStruct(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void **outlined retain of PKStrokeStructCache.BoundsParameters(void **a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *a1;
  v3 = a1[7];
  v4 = v2;
  return a1;
}

uint64_t outlined release of PKStrokeStructCache.BoundsParameters(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);

  return a1;
}

uint64_t outlined init with take of (key: Int, value: AnyCRValue)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of Ref<PKStrokeInheritedProperties>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void one-time initialization function for paperKitBundle()
{
  void *v0;
  objc_class *v1;

  v0 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000012, 0x80000001DDF4B960);
  v1 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  if (v1)
    paperKitBundle.super.isa = v1;
  else
    __break(1u);
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (PaperKit::PDFPageID::CodingKeys_optional)rawValue;
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::PDFPageID::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x626D754E65676170 && stringValue._object == (void *)0xEA00000000007265;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x7465737361 && object == (void *)0xE500000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *v2 = v7;
  return result;
}

PaperKit::PDFPageID::CodingKeys_optional __swiftcall PDFPageID.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  if (intValue)
  {
    if (intValue == 1)
      *v1 = 1;
    else
      *v1 = 2;
  }
  else
  {
    *v1 = 0;
  }
  return (PaperKit::PDFPageID::CodingKeys_optional)intValue;
}

void *static PDFPageID.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PDFPageID.CodingKeys.allCases.getter;
}

uint64_t PDFPageID.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PDFPageID.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PDFPageID.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x7465737361;
  else
    return 0x626D754E65676170;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PDFPageID.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7465737361;
  else
    return 0x626D754E65676170;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PDFPageID.CodingKeys()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PDFPageID.CodingKeys@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PDFPageID.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PDFPageID.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PDFPageID.CodingKeys()
{
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PDFPageID.CodingKeys()
{
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PDFPageID.CodingKeys()
{
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PDFPageID.visitReferences(_:)()
{
  type metadata accessor for PDFPageID();
  return CRAsset.visitReferences(_:)();
}

uint64_t PDFPageID.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x3A7465737361202CLL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  type metadata accessor for PDFPageID();
  v2 = CRAsset.digest.getter();
  v4 = v3;
  v5 = Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v2, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 979857531;
}

uint64_t PDFPageID.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static PDFPageID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  type metadata accessor for PDFPageID();
  return static CRAsset.== infix(_:_:)();
}

uint64_t PDFPageID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PDFPageID.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PDFPageID();
    v9[14] = 1;
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12968]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Int PDFPageID.hashValue.getter()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PDFPageID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v25 = a2;
  v28 = type metadata accessor for CRAsset();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v4);
  v27 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PDFPageID.CodingKeys>);
  v6 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PDFPageID();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v24 = v10;
    v15 = v27;
    v14 = v28;
    v31 = 0;
    v16 = v29;
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = v13;
    *v13 = v17;
    v30 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12980]);
    v18 = v14;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v16);
    v19 = v25;
    v20 = (uint64_t)v23;
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))((char *)v23 + *(int *)(v24 + 20), v15, v18);
    outlined init with take of PDFPageID(v20, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PDFPageID()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PDFPageID()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PDFPageID()
{
  Swift::UInt *v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PDFPageID(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return static CRAsset.== infix(_:_:)();
  else
    return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PDFPageID@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PDFPageID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PDFPageID(_QWORD *a1)
{
  return PDFPageID.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFPageID@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PDFPageID(v1, a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFPageID()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PDFPageID()
{
  return CRAsset.visitReferences(_:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFPageID()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFPageID()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFPageID()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t type metadata accessor for PDFPageID()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PDFPageID;
  if (!type metadata singleton initialization cache for PDFPageID)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFPageID.CodingKeys, &type metadata for PDFPageID.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFPageID.CodingKeys and conformance PDFPageID.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [PDFPageID.CodingKeys] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PDFPageID.CodingKeys]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PDFPageID.CodingKeys] and conformance [A]);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t base witness table accessor for CRValue in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t base witness table accessor for Decodable in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t base witness table accessor for Encodable in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t base witness table accessor for CRType in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t base witness table accessor for CRCodable in PDFPageID()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageID and conformance PDFPageID, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageID, (uint64_t)&protocol conformance descriptor for PDFPageID);
}

uint64_t *initializeBufferWithCopyOfBuffer for PDFPageID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for PDFPageID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for PDFPageID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for PDFPageID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PDFPageID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFPageID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3E82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for PDFPageID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB3E878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t type metadata completion function for PDFPageID()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRAsset();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PDFPageID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDB3E980 + 4 * byte_1DDF321BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDB3E9B4 + 4 * byte_1DDF321B8[v4]))();
}

uint64_t sub_1DDB3E9B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3E9BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB3E9C4);
  return result;
}

uint64_t sub_1DDB3E9D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB3E9D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDB3E9DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB3E9E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PDFPageID.CodingKeys()
{
  return &type metadata for PDFPageID.CodingKeys;
}

uint64_t outlined init with copy of PDFPageID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double Signature.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Signature.frame : Signature@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Signature.frame : Signature()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$frame : Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t Signature.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Signature.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double Signature.rotation.getter()
{
  double v1;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for Signature()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Signature;
  if (!type metadata singleton initialization cache for Signature)
    return swift_getSingletonMetadata();
  return result;
}

double key path getter for Signature.rotation : Signature@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.rotation : Signature()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.rotation.setter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$rotation.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$rotation : Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t Signature.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.signatureItem.getter()
{
  uint64_t v1;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Signature.signatureItem : Signature@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.signatureItem : Signature(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for Signature();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.signatureItem.setter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.signatureItem.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$signatureItem.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$signatureItem : Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t Signature.$signatureItem.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$signatureItem.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.color.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Signature.color : Signature@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Signature.color : Signature(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for Signature();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.color.setter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.color.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$color.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$color : Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t Signature.$color.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$color.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.width.getter()
{
  uint64_t v1;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Signature.width : Signature@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  result = CRRegister.wrappedValue.getter();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for Signature.width : Signature()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Signature.width.setter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Signature.width.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Signature.$width.getter()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Signature.$width : Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11((char *)&v13 - v9, a1, v2);
  v11(v7, (uint64_t)v10, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t Signature.$width.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  type metadata accessor for Signature();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Signature.$width.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Signature() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Signature.additionalFields.getter()
{
  type metadata accessor for Signature();
  return swift_bridgeObjectRetain();
}

uint64_t Signature.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Signature() + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*Signature.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Signature();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static Signature.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F0409E48;
  v4 = qword_1F0409E50;
  v3 = unk_1F0409E58;
  v5 = qword_1F0409E60;
  v6 = qword_1F0409E68;
  v7 = qword_1F0409E70;
  v8 = qword_1F0409E78;
  v10 = qword_1F0409E80;
  v9 = unk_1F0409E88;
  v11 = qword_1F0409E90;
  v12 = qword_1F0409E98;
  v13 = qword_1F0409EA0;
  v14 = qword_1F0409EA8;
  v15 = qword_1F0409EB0;
  *a1 = static Signature.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void Signature.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v4 = type metadata accessor for Signature();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();

  *(_QWORD *)(a2 + *(int *)(v4 + 36)) = MEMORY[0x1E0DEE9E0];
}

unint64_t lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SignatureItem?);
    v2 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type SignatureItem and conformance SignatureItem, (uint64_t (*)(uint64_t))type metadata accessor for SignatureItem, (uint64_t)&protocol conformance descriptor for SignatureItem);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SignatureItem? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type Color? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Color? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Color?);
    v2 = lazy protocol witness table accessor for type Color and conformance Color();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Color and conformance Color()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color and conformance Color;
  if (!lazy protocol witness table cache variable for type Color and conformance Color)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color and conformance Color);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Int? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Int? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Int?);
    v2 = MEMORY[0x1E0D12D50];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int? and conformance <A> A?);
  }
  return result;
}

uint64_t Signature.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for Signature();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SignatureItem?);
  lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v2 + 36)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t Signature.minAppFormatVersion.getter()
{
  return 2;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.minEncodingVersion.getter();
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance Signature()
{
  return 2;
}

uint64_t protocol witness for static CRStruct_Base_5.fields.getter in conformance Signature@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F0409E48;
  v4 = qword_1F0409E50;
  v3 = unk_1F0409E58;
  v5 = qword_1F0409E60;
  v6 = qword_1F0409E68;
  v7 = qword_1F0409E70;
  v8 = qword_1F0409E78;
  v10 = qword_1F0409E80;
  v9 = unk_1F0409E88;
  v11 = qword_1F0409E90;
  v12 = qword_1F0409E98;
  v13 = qword_1F0409EA0;
  v14 = qword_1F0409EA8;
  v15 = qword_1F0409EB0;
  *a1 = static Signature.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  a1[12] = v13;
  a1[13] = v14;
  a1[14] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return static CRStruct_5.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance Signature()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 36);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance Signature())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRStruct_5.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Signature()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  return CRDT.init(serializedData:)();
}

uint64_t Signature.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v7[15] = 6;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Signature.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Signature.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Signature.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Signature.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

void Signature.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  int v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  id v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGFloat MinX;
  double v37;
  CGFloat v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGAffineTransform v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;
  CGAffineTransform v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;

  v12 = *(double *)a6;
  v13 = *(double *)(a6 + 24);
  v46 = *(double *)(a6 + 16);
  v47 = *(double *)(a6 + 8);
  v14 = *(double *)(a6 + 32);
  v44 = *(_QWORD *)(a6 + 48);
  v45 = *(double *)(a6 + 40);
  v42 = *(_QWORD *)(a6 + 64);
  v43 = *(_QWORD *)(a6 + 56);
  v15 = *(unsigned __int8 *)(a6 + 74);
  v16 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v18 = (void *)v17;
    v41 = a7;
    v19 = a8;
    v20 = v16 | (v15 << 16);
    *(_BYTE *)(v17 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;
    v24 = a3;
    v25 = (void *)MEMORY[0x1DF0E41AC](v21, v23);
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_setType_, v25);

    specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Signature, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], &v56);
    v50 = v56;
    v57.origin.x = 0.0;
    v57.origin.y = 0.0;
    v57.size.width = 1.0;
    v57.size.height = 1.0;
    v58 = CGRectApplyAffineTransform(v57, &v50);
    x = v58.origin.x;
    y = v58.origin.y;
    width = v58.size.width;
    height = v58.size.height;
    v30 = objc_msgSend(v18, sel_page);
    if (v30)
    {
      v31 = v30;
      objc_msgSend(v30, sel_boundsForBox_, 0);
      v33 = v32;
      v35 = v34;

      v59.origin.x = x;
      v59.origin.y = y;
      v59.size.width = width;
      v59.size.height = height;
      MinX = CGRectGetMinX(v59);
      v60.origin.x = x;
      v60.origin.y = y;
      v60.size.width = width;
      v60.size.height = height;
      v37 = v35 + v33 + v33 - CGRectGetMaxY(v60);
      v61.origin.x = x;
      v61.origin.y = y;
      v61.size.width = width;
      v61.size.height = height;
      v38 = CGRectGetWidth(v61);
      v62.origin.x = x;
      v62.origin.y = y;
      v62.size.width = width;
      v62.size.height = height;
      height = CGRectGetHeight(v62);
      width = v38;
      x = MinX;
      y = v37;
    }
    v39 = v24;
    v63.origin.x = x;
    v63.origin.y = y;
    v63.size.width = width;
    v63.size.height = height;
    v64 = CGRectIntegral(v63);
    objc_msgSend(v18, sel_setBounds_, v64.origin.x, v64.origin.y, v64.size.width, v64.size.height);

    v50.a = v12;
    v50.b = v47;
    v50.c = v46;
    v50.d = v13;
    v50.tx = v14;
    v50.ty = v45;
    v51 = v44;
    v52 = v43;
    v53 = v42;
    v55 = BYTE2(v20);
    v54 = v20;
    v40 = type metadata accessor for Signature();
    CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a4, v8, a5, (uint64_t)&v50, v41, v40, v19, (uint64_t)&protocol witness table for Signature);
    objc_msgSend(v18, sel_setShouldBurnIn_, 1);

  }
}

Swift::Void __swiftcall Signature.apply(_:)(CGAffineTransform *a1)
{
  double a;
  double b;
  CGFloat tx;
  CGFloat ty;
  double v5;
  __int128 v6;
  CGAffineTransform v7;
  CGAffineTransform t2;
  CGAffineTransform v9;
  CGAffineTransform t1;

  a = a1->a;
  b = a1->b;
  v6 = *(_OWORD *)&a1->c;
  tx = a1->tx;
  ty = a1->ty;
  specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Signature, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], &v9);
  t1 = v9;
  t2.a = a;
  t2.b = b;
  *(_OWORD *)&t2.c = v6;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v7, &t1, &t2);
  t1 = v7;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  CRRegister.wrappedValue.getter();
  if ((LOBYTE(t2.b) & 1) == 0)
  {
    v5 = sqrt(a * a + b * b) * (double)*(uint64_t *)&t2.a;
    if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) != 0)
    {
      if (v5 > -9.22337204e18)
      {
        if (v5 < 9.22337204e18)
        {
          *(_QWORD *)&t2.a = (uint64_t)v5;
          LOBYTE(t2.b) = 0;
          CRRegister.wrappedValue.setter();
          return;
        }
LABEL_9:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Paper, a1);
}

{
  double MidX;
  double MidY;
  CGFloat v4;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat c;
  CGFloat d;
  CGFloat v24;
  CGFloat v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v29;
  CGRect v30;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v24 = t1.b - t1.d * 0.0;
  v25 = t1.a - t1.c * 0.0;
  v29.origin.x = t1.a;
  v29.origin.y = t1.b;
  v29.size.width = t1.c;
  c = t1.c;
  d = t1.d;
  v29.size.height = t1.d;
  MidX = CGRectGetMidX(v29);
  v30.origin.x = t1.a;
  v30.origin.y = t1.b;
  v30.size.width = t1.c;
  v30.size.height = t1.d;
  MidY = CGRectGetMidY(v30);
  CGAffineTransformMakeRotation(&t1, t1.a);
  v18 = *(_OWORD *)&t1.c;
  v20 = *(_OWORD *)&t1.a;
  v4 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v4);
  a = t1.a;
  b = t1.b;
  v9 = t1.c;
  v10 = t1.d;
  v11 = t1.tx;
  v12 = t1.ty;
  *(_OWORD *)&t2.a = v20;
  *(_OWORD *)&t2.c = v18;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v26, &t1, &t2);
  v19 = *(_OWORD *)&v26.c;
  v21 = *(_OWORD *)&v26.a;
  v13 = v26.tx;
  v14 = v26.ty;
  t1.a = a;
  t1.b = b;
  t1.c = v9;
  t1.d = v10;
  t1.tx = v11;
  t1.ty = v12;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v21;
  *(_OWORD *)&t1.c = v19;
  t1.tx = v13;
  t1.ty = v14;
  CGAffineTransformConcat(&v26, &t1, &t2);
  t1.a = c;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = d;
  t1.tx = v25;
  t1.ty = v24;
  t2 = v26;
  CGAffineTransformConcat(&v26, &t1, &t2);
  result = v26.a;
  v16 = *(_OWORD *)&v26.c;
  v17 = *(_OWORD *)&v26.tx;
  *a1 = *(_OWORD *)&v26.a;
  a1[1] = v16;
  a1[2] = v17;
  return result;
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for GraphElement, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for UnknownCanvasElement, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Link, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Image, a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Signature, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for Shape, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11768], a1);
}

{
  return specialized CanvasElement.coordinateSpace.getter((void (*)(_QWORD))type metadata accessor for TextBox, (void (*)(CGAffineTransform *__return_ptr, uint64_t))MEMORY[0x1E0D11730], a1);
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(void (*a1)(_QWORD)@<X0>, _OWORD *a2@<X8>)
{
  double MidX;
  double MidY;
  CGFloat v5;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  CGFloat c;
  CGFloat d;
  CGFloat v25;
  CGFloat v26;
  CGAffineTransform v27;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v30;
  CGRect v31;

  a1(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v25 = t1.b - t1.d * 0.0;
  v26 = t1.a - t1.c * 0.0;
  v30.origin.x = t1.a;
  v30.origin.y = t1.b;
  v30.size.width = t1.c;
  c = t1.c;
  d = t1.d;
  v30.size.height = t1.d;
  MidX = CGRectGetMidX(v30);
  v31.origin.x = t1.a;
  v31.origin.y = t1.b;
  v31.size.width = t1.c;
  v31.size.height = t1.d;
  MidY = CGRectGetMidY(v31);
  CGAffineTransformMakeRotation(&t1, t1.a);
  v19 = *(_OWORD *)&t1.c;
  v21 = *(_OWORD *)&t1.a;
  v5 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v5);
  a = t1.a;
  b = t1.b;
  v10 = t1.c;
  v11 = t1.d;
  v12 = t1.tx;
  v13 = t1.ty;
  *(_OWORD *)&t2.a = v21;
  *(_OWORD *)&t2.c = v19;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v27, &t1, &t2);
  v20 = *(_OWORD *)&v27.c;
  v22 = *(_OWORD *)&v27.a;
  v14 = v27.tx;
  v15 = v27.ty;
  t1.a = a;
  t1.b = b;
  t1.c = v10;
  t1.d = v11;
  t1.tx = v12;
  t1.ty = v13;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v22;
  *(_OWORD *)&t1.c = v20;
  t1.tx = v14;
  t1.ty = v15;
  CGAffineTransformConcat(&v27, &t1, &t2);
  t1.a = c;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = d;
  t1.tx = v26;
  t1.ty = v25;
  t2 = v27;
  CGAffineTransformConcat(&v27, &t1, &t2);
  result = v27.a;
  v17 = *(_OWORD *)&v27.c;
  v18 = *(_OWORD *)&v27.tx;
  *a2 = *(_OWORD *)&v27.a;
  a2[1] = v17;
  a2[2] = v18;
  return result;
}

CGFloat specialized CanvasElement.coordinateSpace.getter@<D0>(void (*a1)(_QWORD)@<X0>, void (*a2)(CGAffineTransform *__return_ptr, uint64_t)@<X1>, _OWORD *a3@<X8>)
{
  double a;
  double b;
  double d;
  double c;
  uint64_t v10;
  CGFloat v11;
  double MidX;
  double MidY;
  CGFloat v14;
  CGFloat tx;
  CGFloat ty;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGAffineTransform v36;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v39;
  CGRect v40;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  a1(0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  a2(&t1, v10);
  v11 = t1.a;
  v34 = b - d * 0.0;
  v35 = a - c * 0.0;
  v39.origin.x = a;
  v39.origin.y = b;
  v39.size.width = c;
  v32 = c;
  v33 = d;
  v39.size.height = d;
  MidX = CGRectGetMidX(v39);
  v40.origin.x = a;
  v40.origin.y = b;
  v40.size.width = c;
  v40.size.height = d;
  MidY = CGRectGetMidY(v40);
  CGAffineTransformMakeRotation(&t1, v11);
  v28 = *(_OWORD *)&t1.c;
  v30 = *(_OWORD *)&t1.a;
  v14 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v14);
  v17 = t1.a;
  v18 = t1.b;
  v19 = t1.c;
  v20 = t1.d;
  v21 = t1.tx;
  v22 = t1.ty;
  *(_OWORD *)&t2.a = v30;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v36, &t1, &t2);
  v29 = *(_OWORD *)&v36.c;
  v31 = *(_OWORD *)&v36.a;
  v23 = v36.tx;
  v24 = v36.ty;
  t1.a = v17;
  t1.b = v18;
  t1.c = v19;
  t1.d = v20;
  t1.tx = v21;
  t1.ty = v22;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v31;
  *(_OWORD *)&t1.c = v29;
  t1.tx = v23;
  t1.ty = v24;
  CGAffineTransformConcat(&v36, &t1, &t2);
  t1.a = v32;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = v33;
  t1.tx = v35;
  t1.ty = v34;
  t2 = v36;
  CGAffineTransformConcat(&v36, &t1, &t2);
  result = v36.a;
  v26 = *(_OWORD *)&v36.c;
  v27 = *(_OWORD *)&v36.tx;
  *a3 = *(_OWORD *)&v36.a;
  a3[1] = v26;
  a3[2] = v27;
  return result;
}

BOOL specialized CanvasElement.coordinateSpace.setter()
{
  CGFloat x;
  CGFloat y;
  int8x16_t v2;
  float64x2_t v3;
  int8x16_t v4;
  unint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double Height;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  int8x16_t v14;
  int8x16_t v15;
  float64x2_t v16;
  CGFloat rect;
  CGFloat width;
  CGFloat v20;
  CGRect v21;
  CGRect v22;

  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v21, 0.0);
  x = v21.origin.x;
  y = v21.origin.y;
  rect = v21.size.height;
  width = v21.size.width;
  if (fabs(CGRectGetWidth(v21)) >= 1.0)
  {
    *(double *)&v5 = width;
  }
  else
  {
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.height = rect;
    v22.size.width = width;
    *(double *)v2.i64 = CGRectGetWidth(v22);
    v3.f64[0] = NAN;
    v3.f64[1] = NAN;
    v4.i64[0] = 1.0;
    v5 = vbslq_s8((int8x16_t)vnegq_f64(v3), v4, v2).u64[0];
  }
  v6 = x;
  v7 = y;
  v20 = *(double *)&v5;
  v8 = rect;
  Height = CGRectGetHeight(*(CGRect *)(&v5 - 2));
  v10 = rect;
  if (fabs(Height) < 1.0)
  {
    v11 = x;
    v12 = y;
    v13 = v20;
    *(double *)v14.i64 = CGRectGetHeight(*(CGRect *)(&v10 - 3));
    v15.i64[0] = 1.0;
    v16.f64[0] = NAN;
    v16.f64[1] = NAN;
    *(_QWORD *)&v10 = vbslq_s8((int8x16_t)vnegq_f64(v16), v15, v14).u64[0];
  }
  return CGRect.almostEqual(_:threshold:)(x, y, v20, v10, 0.1, 0.0, 0.0, 1.0, 1.0);
}

uint64_t specialized CanvasElement.coordinateSpace.setter(uint64_t a1)
{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for Image);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for Link);
}

{
  return specialized CanvasElement.coordinateSpace.setter(a1, (uint64_t (*)(_QWORD))type metadata accessor for UnknownCanvasElement);
}

uint64_t specialized CanvasElement.coordinateSpace.setter()
{
  CGFloat y;
  CGFloat x;
  double v2;
  int8x16_t v3;
  float64x2_t v4;
  int8x16_t v5;
  unint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int8x16_t v10;
  int8x16_t v11;
  float64x2_t v12;
  uint64_t result;
  CGFloat width;
  CGFloat v15;
  CGFloat rect;
  CGRect v17;
  double v18;
  CGRect v19;
  CGRect v20;

  type metadata accessor for Shape();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v17, v17.origin.x);
  x = v17.origin.x;
  y = v17.origin.y;
  v2 = v18;
  width = v17.size.width;
  rect = v17.size.height;
  if (fabs(CGRectGetWidth(v17)) >= 1.0)
  {
    *(double *)&v6 = width;
  }
  else
  {
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = rect;
    *(double *)v3.i64 = CGRectGetWidth(v19);
    v4.f64[0] = NAN;
    v4.f64[1] = NAN;
    v5.i64[0] = 1.0;
    v6 = vbslq_s8((int8x16_t)vnegq_f64(v4), v5, v3).u64[0];
  }
  v7 = x;
  v8 = y;
  v15 = *(double *)&v6;
  v9 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v6 - 2))) < 1.0)
  {
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = v15;
    v20.size.height = rect;
    *(double *)v10.i64 = CGRectGetHeight(v20);
    v11.i64[0] = 1.0;
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    *(_QWORD *)&rect = vbslq_s8((int8x16_t)vnegq_f64(v12), v11, v10).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v15, rect, 0.1, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height))
  {
    v17.origin.x = x;
    v17.origin.y = y;
    v17.size.width = v15;
    v17.size.height = rect;
    CRRegister.wrappedValue.setter();
  }
  result = CRRegister.value.getter();
  if (vabdd_f64(v17.origin.x, v2) > 0.00174532925)
  {
    result = CRRegister.value.getter();
    if (vabdd_f64(v17.origin.x, v2) > 0.01)
    {
      v17.origin.x = v2;
      return CRRegister.value.setter();
    }
  }
  return result;
}

{
  CGFloat y;
  CGFloat x;
  double v2;
  int8x16_t v3;
  float64x2_t v4;
  int8x16_t v5;
  unint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  int8x16_t v10;
  int8x16_t v11;
  float64x2_t v12;
  uint64_t result;
  CGFloat width;
  CGFloat v15;
  CGFloat rect;
  CGRect v17;
  double v18;
  CGRect v19;
  CGRect v20;

  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v17, v17.origin.x);
  x = v17.origin.x;
  y = v17.origin.y;
  v2 = v18;
  width = v17.size.width;
  rect = v17.size.height;
  if (fabs(CGRectGetWidth(v17)) >= 1.0)
  {
    *(double *)&v6 = width;
  }
  else
  {
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = rect;
    *(double *)v3.i64 = CGRectGetWidth(v19);
    v4.f64[0] = NAN;
    v4.f64[1] = NAN;
    v5.i64[0] = 1.0;
    v6 = vbslq_s8((int8x16_t)vnegq_f64(v4), v5, v3).u64[0];
  }
  v7 = x;
  v8 = y;
  v15 = *(double *)&v6;
  v9 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v6 - 2))) < 1.0)
  {
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = v15;
    v20.size.height = rect;
    *(double *)v10.i64 = CGRectGetHeight(v20);
    v11.i64[0] = 1.0;
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    *(_QWORD *)&rect = vbslq_s8((int8x16_t)vnegq_f64(v12), v11, v10).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v15, rect, 0.1, v17.origin.x, v17.origin.y, v17.size.width, v17.size.height))
  {
    v17.origin.x = x;
    v17.origin.y = y;
    v17.size.width = v15;
    v17.size.height = rect;
    CRRegister.wrappedValue.setter();
  }
  result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v17.origin.x, v2) > 0.00174532925)
  {
    v17.origin.x = v2;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t specialized CanvasElement.coordinateSpace.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  CGFloat y;
  CGFloat x;
  double v4;
  int8x16_t v5;
  float64x2_t v6;
  int8x16_t v7;
  unint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  int8x16_t v12;
  int8x16_t v13;
  float64x2_t v14;
  uint64_t result;
  CGFloat width;
  CGFloat v17;
  CGFloat rect;
  CGRect v19;
  double v20;
  CGRect v21;
  CGRect v22;

  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v19, v19.origin.x);
  x = v19.origin.x;
  y = v19.origin.y;
  v4 = v20;
  width = v19.size.width;
  rect = v19.size.height;
  if (fabs(CGRectGetWidth(v19)) >= 1.0)
  {
    *(double *)&v8 = width;
  }
  else
  {
    v21.origin.x = x;
    v21.origin.y = y;
    v21.size.width = width;
    v21.size.height = rect;
    *(double *)v5.i64 = CGRectGetWidth(v21);
    v6.f64[0] = NAN;
    v6.f64[1] = NAN;
    v7.i64[0] = 1.0;
    v8 = vbslq_s8((int8x16_t)vnegq_f64(v6), v7, v5).u64[0];
  }
  v9 = x;
  v10 = y;
  v17 = *(double *)&v8;
  v11 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v8 - 2))) < 1.0)
  {
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = v17;
    v22.size.height = rect;
    *(double *)v12.i64 = CGRectGetHeight(v22);
    v13.i64[0] = 1.0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(_QWORD *)&rect = vbslq_s8((int8x16_t)vnegq_f64(v14), v13, v12).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v17, rect, 0.1, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height))
  {
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = v17;
    v19.size.height = rect;
    CRRegister.wrappedValue.setter();
  }
  result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v19.origin.x, v4) > 0.00174532925)
  {
    v19.origin.x = v4;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

{
  CGFloat y;
  CGFloat x;
  double v4;
  int8x16_t v5;
  float64x2_t v6;
  int8x16_t v7;
  unint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  int8x16_t v12;
  int8x16_t v13;
  float64x2_t v14;
  uint64_t result;
  CGFloat width;
  CGFloat v17;
  CGFloat rect;
  CGRect v19;
  double v20;
  CGRect v21;
  CGRect v22;

  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&v19, v19.origin.x);
  x = v19.origin.x;
  y = v19.origin.y;
  v4 = v20;
  width = v19.size.width;
  rect = v19.size.height;
  if (fabs(CGRectGetWidth(v19)) >= 1.0)
  {
    *(double *)&v8 = width;
  }
  else
  {
    v21.origin.x = x;
    v21.origin.y = y;
    v21.size.width = width;
    v21.size.height = rect;
    *(double *)v5.i64 = CGRectGetWidth(v21);
    v6.f64[0] = NAN;
    v6.f64[1] = NAN;
    v7.i64[0] = 1.0;
    v8 = vbslq_s8((int8x16_t)vnegq_f64(v6), v7, v5).u64[0];
  }
  v9 = x;
  v10 = y;
  v17 = *(double *)&v8;
  v11 = rect;
  if (fabs(CGRectGetHeight(*(CGRect *)(&v8 - 2))) < 1.0)
  {
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = v17;
    v22.size.height = rect;
    *(double *)v12.i64 = CGRectGetHeight(v22);
    v13.i64[0] = 1.0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(_QWORD *)&rect = vbslq_s8((int8x16_t)vnegq_f64(v14), v13, v12).u64[0];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  if (!CGRect.almostEqual(_:threshold:)(x, y, v17, rect, 0.1, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height))
  {
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = v17;
    v19.size.height = rect;
    CRRegister.wrappedValue.setter();
  }
  result = CRRegister.wrappedValue.getter();
  if (vabdd_f64(v19.origin.x, v4) > 0.00174532925)
  {
    v19.origin.x = v4;
    return CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t protocol witness for CanvasElement.frame.setter in conformance Signature()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance Signature(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

double protocol witness for CanvasElement.rotation.getter in conformance Signature()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Signature()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance Signature(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Signature@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Signature(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[16];

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v7[15] = 6;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 16))(&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], a1);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

double protocol witness for PaperRenderable.frame.getter in conformance Signature()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Signature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Signature.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Signature.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized Signature.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = v1;
  return swift_task_switch();
}

uint64_t specialized Signature.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  Swift::Bool v8;
  CGImage *v9;
  CGImage *v10;
  CGImage *v11;
  CGContext *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double MidX;
  double MidY;
  CGFloat v20;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  double MinY;
  CGFloat MaxY;
  __int128 v42;
  __int128 v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  CGAffineTransform v49;
  Swift::Int_optional v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  CRRegister.wrappedValue.getter();
  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    v4 = *(void **)(v0 + 16);
    if (v4)
    {
      v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v4);

    }
    else
    {
      v5 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
    CRRegister.wrappedValue.getter();
    v6 = *(_QWORD *)(v0 + 16);
    v50.value = *(unsigned __int8 *)(v0 + 24);
    v7 = v5;
    v50.is_nil = 1;
    v9 = (CGImage *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v3, v2), *(UIColor_optional *)(&v6 - 1), v50, v8);

    if (v9)
    {
      v10 = (CGImage *)-[CGImage CGImage](v9, sel_CGImage);
      if (v10)
      {
        v11 = v10;
        v12 = *(CGContext **)(v0 + 112);
        CGContextSaveGState(v12);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        v13 = *(double *)(v0 + 16);
        CRRegister.wrappedValue.getter();
        v14 = *(double *)(v0 + 16);
        v15 = *(double *)(v0 + 24);
        v16 = *(double *)(v0 + 32);
        v17 = *(double *)(v0 + 40);
        v51.origin.x = v14;
        v51.origin.y = v15;
        v51.size.width = v16;
        v51.size.height = v17;
        MidX = CGRectGetMidX(v51);
        v52.origin.x = v14;
        v52.origin.y = v15;
        v52.size.width = v16;
        v52.size.height = v17;
        MidY = CGRectGetMidY(v52);
        CGAffineTransformMakeRotation(&v49, v13);
        v45 = *(_OWORD *)&v49.c;
        v47 = *(_OWORD *)&v49.a;
        v20 = -MidY;
        tx = v49.tx;
        ty = v49.ty;
        CGAffineTransformMakeTranslation(&v49, -MidX, v20);
        a = v49.a;
        b = v49.b;
        c = v49.c;
        d = v49.d;
        v27 = v49.tx;
        v28 = v49.ty;
        *(CGFloat *)(v0 + 16) = v49.a;
        *(CGFloat *)(v0 + 24) = b;
        *(CGFloat *)(v0 + 32) = c;
        *(CGFloat *)(v0 + 40) = d;
        *(CGFloat *)(v0 + 48) = v27;
        *(CGFloat *)(v0 + 56) = v28;
        *(_OWORD *)(v0 + 64) = v47;
        *(_OWORD *)(v0 + 80) = v45;
        *(CGFloat *)(v0 + 96) = tx;
        *(CGFloat *)(v0 + 104) = ty;
        CGAffineTransformConcat(&v49, (CGAffineTransform *)(v0 + 16), (CGAffineTransform *)(v0 + 64));
        v46 = *(_OWORD *)&v49.c;
        v48 = *(_OWORD *)&v49.a;
        v29 = v49.tx;
        v30 = v49.ty;
        *(CGFloat *)(v0 + 16) = a;
        *(CGFloat *)(v0 + 24) = b;
        *(CGFloat *)(v0 + 32) = c;
        *(CGFloat *)(v0 + 40) = d;
        *(CGFloat *)(v0 + 48) = v27;
        *(CGFloat *)(v0 + 56) = v28;
        CGAffineTransformInvert(&v49, (CGAffineTransform *)(v0 + 16));
        v31 = *(_OWORD *)&v49.a;
        v32 = *(_OWORD *)&v49.c;
        v33 = *(_OWORD *)&v49.tx;
        *(CGFloat *)(v0 + 96) = v29;
        *(CGFloat *)(v0 + 104) = v30;
        *(_OWORD *)(v0 + 16) = v31;
        *(_OWORD *)(v0 + 32) = v32;
        *(_OWORD *)(v0 + 64) = v48;
        *(_OWORD *)(v0 + 80) = v46;
        *(_OWORD *)(v0 + 48) = v33;
        CGAffineTransformConcat(&v49, (CGAffineTransform *)(v0 + 64), (CGAffineTransform *)(v0 + 16));
        v34 = *(_OWORD *)&v49.c;
        v35 = *(_OWORD *)&v49.tx;
        *(_OWORD *)(v0 + 16) = *(_OWORD *)&v49.a;
        *(_OWORD *)(v0 + 32) = v34;
        *(_OWORD *)(v0 + 48) = v35;
        CGContextConcatCTM(v12, (CGAffineTransform *)(v0 + 16));
        CRRegister.wrappedValue.getter();
        v36 = *(double *)(v0 + 16);
        v37 = *(double *)(v0 + 24);
        v38 = *(double *)(v0 + 32);
        v39 = *(double *)(v0 + 40);
        v53.origin.x = v36;
        v53.origin.y = v37;
        v53.size.width = v38;
        v53.size.height = v39;
        MinY = CGRectGetMinY(v53);
        v54.origin.x = v36;
        v54.origin.y = v37;
        v54.size.width = v38;
        v54.size.height = v39;
        MaxY = CGRectGetMaxY(v54);
        *(_QWORD *)(v0 + 64) = 0x3FF0000000000000;
        *(_QWORD *)(v0 + 72) = 0;
        *(_QWORD *)(v0 + 80) = 0;
        *(_QWORD *)(v0 + 88) = 0x3FF0000000000000;
        *(_QWORD *)(v0 + 96) = 0;
        *(_QWORD *)(v0 + 104) = 0;
        *(_QWORD *)(v0 + 16) = 0x3FF0000000000000;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = 0;
        *(_OWORD *)(v0 + 40) = xmmword_1DDF325E0;
        *(double *)(v0 + 56) = MinY + MaxY;
        CGAffineTransformConcat(&v49, (CGAffineTransform *)(v0 + 64), (CGAffineTransform *)(v0 + 16));
        v42 = *(_OWORD *)&v49.c;
        v43 = *(_OWORD *)&v49.tx;
        *(_OWORD *)(v0 + 16) = *(_OWORD *)&v49.a;
        *(_OWORD *)(v0 + 32) = v42;
        *(_OWORD *)(v0 + 48) = v43;
        CGContextConcatCTM(v12, (CGAffineTransform *)(v0 + 16));
        CRRegister.wrappedValue.getter();
        CGContextRef.draw(_:in:byTiling:)(v11, *(__C::CGRect *)(v0 + 16), 0);
        CGContextRestoreGState(v12);

        v9 = v11;
      }

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t base witness table accessor for CRStruct_Base_5 in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t base witness table accessor for CRStruct_Base in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_1 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CGRect> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGRect>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_2 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CGFloat> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CGFloat>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_3 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<SignatureItem?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SignatureItem?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_4 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Color?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Color?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_5.Type_5 : CRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Int?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Int?>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t base witness table accessor for CRMergeable in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t base witness table accessor for CRType in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Signature()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_5<Signature> and conformance CRStructMergeableDelta_5<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_5<Signature>, MEMORY[0x1E0D12768]);
}

uint64_t base witness table accessor for CRCodable in Signature()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

uint64_t sub_1DDB42B08()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB42B48()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB42BA0()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB42BF8()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB42C50()
{
  type metadata accessor for Signature();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Signature(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Signature(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for Signature(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB433B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_11;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_11;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a1 + a3[9]);
  if (v18 >= 0xFFFFFFFF)
    LODWORD(v18) = -1;
  return (v18 + 1);
}

uint64_t storeEnumTagSinglePayload for Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB434E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_11:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SignatureItem?>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_11;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[7];
    goto LABEL_11;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[8];
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
  return result;
}

void type metadata completion function for Signature()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<SignatureItem?>, (uint64_t *)&demangling cache variable for type metadata for SignatureItem?, (void (*)(void))lazy protocol witness table accessor for type SignatureItem? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Int?>, (uint64_t *)&demangling cache variable for type metadata for Int?, (void (*)(void))lazy protocol witness table accessor for type Int? and conformance <A> A?);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<CGRect>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<CGRect>)
  {
    type metadata accessor for CGRect(255);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGRect>);
  }
}

void type metadata accessor for CRRegister<CGFloat>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>);
  }
}

UIImage_optional __swiftcall UIImage.removeBackground()()
{
  void *v0;
  void *v1;
  double v2;
  double v3;
  UIImage *v4;
  Swift::Bool v5;
  UIImage *v6;
  CGImage *v7;
  CGImage *v8;
  _OWORD *v9;
  CGImage *v10;
  CGImageRef_optional v11;
  objc_class *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  objc_class *v17;
  UIImage_optional result;
  CGSize v19;

  v1 = v0;
  objc_msgSend(v0, sel_size);
  UIGraphicsBeginImageContextWithOptions(v19, 1, 0.0);
  objc_msgSend(v0, sel_size);
  objc_msgSend(v0, sel_drawInRect_, 0.0, 0.0, v2, v3);
  v4 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  if (!v4)
    goto LABEL_11;
  v6 = v4;
  v7 = -[UIImage CGImage](v6, sel_CGImage);
  v8 = v7;
  if (!v7)
  {
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DD90]), sel_init);
    v14 = objc_msgSend(v1, sel_CIImage);
    if (!v14)
    {

      goto LABEL_11;
    }
    v15 = v14;
    objc_msgSend(v14, sel_extent);
    v16 = objc_msgSend(v13, sel_createCGImage_fromRect_, v15);

    if (!v16)
    {

      goto LABEL_11;
    }
    v8 = (CGImage *)v16;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
  v9 = (_OWORD *)swift_allocObject();
  v9[1] = xmmword_1DDF32930;
  v9[2] = xmmword_1DDF32940;
  v9[3] = xmmword_1DDF32940;
  v9[4] = xmmword_1DDF32940;
  v10 = v7;
  v11.value = CGImageRef.copy(maskingColorComponents:)((Swift::OpaquePointer)v9).value;
  swift_bridgeObjectRelease();
  if (!v11.value)
  {

LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v12 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v11.value);

LABEL_12:
  v17 = v12;
  result.value.super.isa = v17;
  result.is_nil = v5;
  return result;
}

id one-time initialization function for maskAlphaVector()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDF8]), sel_initWithX_Y_Z_W_, 1.0, 1.0, 1.0, 0.0);
  static UIImage.maskAlphaVector = (uint64_t)result;
  return result;
}

UIImage_optional __swiftcall UIImage.alphaMaskForSketch()()
{
  void *v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  double v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  double v14;
  id v15;
  double Width;
  CGFloat v17;
  double Height;
  CGFloat v19;
  double v20;
  double v21;
  CGFloat v22;
  CGFloat MinY;
  CGFloat tx;
  CGFloat ty;
  id v26;
  id v27;
  double v28;
  double v29;
  objc_class *v30;
  Swift::Bool v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  objc_class *v54;
  __int128 v55;
  __int128 v56;
  CGAffineTransform v57;
  UIImage_optional result;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v1 = objc_msgSend(v0, sel_CIImage);
  v2 = v1;
  if (!v1)
  {
    v32 = objc_msgSend(v0, sel_CGImage);
    if (!v32
      || (v33 = v32,
          v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9DDC8]), sel_initWithCGImage_, v32),
          v33,
          !v34))
    {
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)generativeLogger);
      v2 = Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v2, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1DDB0F000, v2, v40, "Sketch conversion to CIImage failed", v41, 2u);
        MEMORY[0x1DF0E6558](v41, -1, -1);
      }
      goto LABEL_35;
    }
    v2 = v34;
  }
  v3 = v1;
  v4 = specialized _toMonochrome #1 (_:) in UIImage.alphaMaskForSketch()((uint64_t)v2);
  if (!v4)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)generativeLogger);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1DDB0F000, v36, v37, "Sketch processing failed (monochrome)", v38, 2u);
      MEMORY[0x1DF0E6558](v38, -1, -1);
    }

    goto LABEL_34;
  }
  v5 = v4;
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_colorThresholdFilter);
  objc_msgSend(v7, sel_setInputImage_, v5);
  LODWORD(v8) = 981668463;
  objc_msgSend(v7, sel_setThreshold_, v8);
  v9 = objc_msgSend(v7, sel_outputImage);

  if (!v9)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)generativeLogger);
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1DDB0F000, v43, v44, "Sketch processing failed (colorThreshold)", v45, 2u);
      MEMORY[0x1DF0E6558](v45, -1, -1);
    }

    goto LABEL_34;
  }
  v10 = objc_msgSend(v6, sel_morphologyMaximumFilter);
  objc_msgSend(v10, sel_setInputImage_, v9);
  LODWORD(v11) = 30.0;
  objc_msgSend(v10, sel_setRadius_, v11);
  v12 = objc_msgSend(v10, sel_outputImage);

  if (!v12)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)generativeLogger);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1DDB0F000, v47, v48, "Sketch processing failed (morphologyMaximum)", v49, 2u);
      MEMORY[0x1DF0E6558](v49, -1, -1);
    }

    goto LABEL_34;
  }
  v13 = objc_msgSend(v6, sel_morphologyMinimumFilter);
  objc_msgSend(v13, sel_setInputImage_, v12);
  LODWORD(v14) = 20.0;
  objc_msgSend(v13, sel_setRadius_, v14);
  v15 = objc_msgSend(v13, sel_outputImage);

  if (!v15)
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)generativeLogger);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1DDB0F000, v51, v52, "Sketch processing failed (morphologyMinimum)", v53, 2u);
      MEMORY[0x1DF0E6558](v53, -1, -1);
    }

LABEL_34:
LABEL_35:

    v30 = 0;
    goto LABEL_36;
  }
  objc_msgSend(v15, sel_extent);
  Width = CGRectGetWidth(v59);
  -[NSObject extent](v2, sel_extent);
  v17 = (Width - CGRectGetWidth(v60)) * 0.5;
  objc_msgSend(v15, sel_extent);
  Height = CGRectGetHeight(v61);
  -[NSObject extent](v2, sel_extent);
  v19 = (Height - CGRectGetHeight(v62)) * 0.5;
  -[NSObject extent](v2, sel_extent);
  v20 = CGRectGetWidth(v63);
  -[NSObject extent](v2, sel_extent);
  v21 = CGRectGetHeight(v64);
  v65.origin.x = v17;
  v65.origin.y = v19;
  v65.size.width = v20;
  v65.size.height = v21;
  v22 = -CGRectGetMinX(v65);
  v66.origin.x = v17;
  v66.origin.y = v19;
  v66.size.width = v20;
  v66.size.height = v21;
  MinY = CGRectGetMinY(v66);
  CGAffineTransformMakeTranslation(&v57, v22, -MinY);
  v55 = *(_OWORD *)&v57.c;
  v56 = *(_OWORD *)&v57.a;
  tx = v57.tx;
  ty = v57.ty;
  v26 = objc_msgSend(v15, sel_imageByCroppingToRect_, v17, v19, v20, v21);
  *(_OWORD *)&v57.a = v56;
  *(_OWORD *)&v57.c = v55;
  v57.tx = tx;
  v57.ty = ty;
  v27 = objc_msgSend(v26, sel_imageByApplyingTransform_, &v57);

  -[NSObject extent](v2, sel_extent);
  v28 = CGRectGetWidth(v67);
  objc_msgSend(v0, sel_size);
  v30 = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCIImage_scale_orientation_, v27, 0, v28 / v29);

LABEL_36:
  v54 = v30;
  result.value.super.isa = v54;
  result.is_nil = v31;
  return result;
}

uint64_t UIImage.padAndResizeImageToSquareOfLength(_:)(double a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t result;
  _QWORD v19[6];

  objc_msgSend(v1, sel_size);
  objc_msgSend(v1, sel_size);
  objc_msgSend(v1, sel_size);
  v3 = objc_msgSend(v1, sel_size);
  v5 = UnknownCanvasElementView.flags.modify(v3, v4);
  v7 = v6;
  v10 = UnknownCanvasElementView.flags.modify(v8, v9);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v10, v11);
  v13 = swift_allocObject();
  *(double *)(v13 + 16) = a1;
  *(double *)(v13 + 24) = v5;
  *(_QWORD *)(v13 + 32) = v7;
  *(_QWORD *)(v13 + 40) = v1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:);
  *(_QWORD *)(v14 + 24) = v13;
  v19[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v19[5] = v14;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v19[3] = &block_descriptor_0;
  v15 = _Block_copy(v19);
  v16 = v1;
  swift_retain();
  swift_release();
  v17 = objc_msgSend(v12, sel_imageWithActions_, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v12 & 1) == 0)
    return (uint64_t)v17;
  __break(1u);
  return result;
}

id closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:)(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  id v9;
  uint64_t v10;

  v4 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  objc_msgSend(v4, sel_setFill);

  v7 = UnknownCanvasElementView.flags.modify(v5, v6);
  v9 = objc_msgSend(a1, sel_fillRect_, 0.0, 0.0, v7, v8);
  return objc_msgSend(a2, sel_drawInRect_, UnknownCanvasElementView.flags.modify(v9, v10));
}

uint64_t sub_1DDB44428()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:)(void *a1)
{
  uint64_t v1;

  return closure #1 in UIImage.padAndResizeImageToSquareOfLength(_:)(a1, *(void **)(v1 + 40));
}

uint64_t sub_1DDB4445C()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

id specialized _toMonochrome #1 (_:) in UIImage.alphaMaskForSketch()(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;

  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_colorInvertFilter);
  objc_msgSend(v3, sel_setInputImage_, a1);
  v4 = objc_msgSend(v3, sel_outputImage);

  if (!v4)
    return 0;
  v5 = objc_msgSend(v2, sel_colorMatrixFilter);
  if (one-time initialization token for maskAlphaVector != -1)
    swift_once();
  v6 = static UIImage.maskAlphaVector;
  objc_msgSend(v5, sel_setRVector_, static UIImage.maskAlphaVector);
  objc_msgSend(v5, sel_setGVector_, v6);
  objc_msgSend(v5, sel_setBVector_, v6);
  objc_msgSend(v5, sel_setAVector_, v6);
  objc_msgSend(v5, sel_setInputImage_, v4);
  v7 = objc_msgSend(v5, sel_outputImage);

  return v7;
}

uint64_t TextBoxLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[3];
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _UNKNOWN **v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v40[0] = a4;
  v40[1] = a5;
  v41 = a3;
  v42 = a2;
  v40[2] = a1;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<TextBox>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v43 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)v40 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v5, v6);
  v24 = type metadata accessor for TextBox();
  v25 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<TextBox> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v44 = v24;
  v45 = v25;
  v46 = &protocol witness table for TextBox;
  swift_getKeyPath();
  v26 = v41;
  v27 = v41;
  v28 = v42;
  v29 = v42;
  Capsule<>.subscript.getter();
  swift_release();
  x = v47.origin.x;
  y = v47.origin.y;
  width = v47.size.width;
  height = v47.size.height;
  CGRectGetMinX(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  CGRectGetMinY(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  CGRectGetWidth(v49);
  v50.origin.x = x;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  v34 = CGRectGetHeight(v50);
  v35 = v43;
  (*(void (**)(char *, char *, uint64_t, CGFloat))(v43 + 16))(v20, v23, v16, v34);
  v36 = objc_allocWithZone((Class)type metadata accessor for TextBoxCanvasElementView());
  specialized TextBoxCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v20, v28, v26);
  v38 = v37;

  (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v16);
  return v38;
}

uint64_t closure #1 in static TextBoxLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t *a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, void (*a8)(char *), CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, void *a14)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  id v54[2];
  void (*v55)(char *);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v54[0] = a2;
  v54[1] = a14;
  v55 = a8;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)v54 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v56 = *(_QWORD *)(v33 - 8);
  v35.n128_f64[0] = MEMORY[0x1E0C80A78](v33, v34);
  v37 = (char *)v54 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1[1];
  if (v38)
  {
    v39 = *a1;
    LOBYTE(v58) = a4;
    static TextBoxLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v39, v38, a3, (unsigned __int8 *)&v58, *(double *)&a5, *(double *)&a6, a7 & 1, (uint64_t)v32, a9, a10, a11, a12, a13);
    v40 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v32, 1, v33) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v32, v33);
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v28, v37, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v33);
      v55(v28);
      outlined destroy of Capsule<Shape>?((uint64_t)v28);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v37, v33);
    }
    outlined destroy of Capsule<Shape>?((uint64_t)v32);
  }
  v41 = v33;
  v42 = v54[0];
  if (v54[0])
  {
    v43 = v54[0];
    if (one-time initialization token for logger != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)logger);
    v45 = v42;
    v46 = v42;
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      v50 = swift_slowAlloc();
      v58 = v50;
      *(_DWORD *)v49 = 136315138;
      swift_getErrorValue();
      v51 = Error.localizedDescription.getter();
      v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v47, v48, "Unable to decode string representation %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v50, -1, -1);
      MEMORY[0x1DF0E6558](v49, -1, -1);

    }
    else
    {

    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v56 + 56))(v28, 1, 1, v41, v35);
  v55(v28);
  return outlined destroy of Capsule<Shape>?((uint64_t)v28);
}

uint64_t outlined destroy of Capsule<Shape>?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static TextBoxLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, double a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, CGFloat a9@<D0>, CGFloat a10@<D1>, CGFloat a11@<D2>, CGFloat a12@<D3>, double a13@<D4>)
{
  double v21;
  double y;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  double x;
  double v43;
  double v44;
  double v45;
  char *v46;
  CGColorSpace *v47;
  CGColorSpace *v48;
  CGColorRef v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  id v53;
  void *v54;
  Class isa;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CGFloat v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  _OWORD v74[2];
  _QWORD v75[5];
  _BYTE v76[32];
  char v77;
  CGRect v78;
  __C::CGRect v79;
  __C::CGRect v80;

  v68 = a13;
  v62 = a12;
  v70 = a2;
  v63 = a1;
  v69 = a8;
  outlined init with take of CGRect?(a3, (uint64_t)v75);
  v21 = *(double *)v75;
  y = *(double *)&v75[1];
  v24 = *(double *)&v75[2];
  v23 = *(double *)&v75[3];
  v25 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v25, v26);
  v67 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v64 = (uint64_t)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v61 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v66, v35);
  v65 = (uint64_t)&v61 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v61 - v39;
  v41 = *a4;
  outlined init with take of CGRect?(a3, (uint64_t)v76);
  if ((v77 & 1) != 0)
    x = 0.0;
  else
    x = v21;
  if ((v77 & 1) != 0)
  {
    y = 0.0;
    v43 = 0.0;
  }
  else
  {
    v43 = v23;
  }
  if ((v77 & 1) != 0)
    v24 = 0.0;
  v78.origin.x = x;
  v78.origin.y = y;
  v78.size.width = v24;
  v78.size.height = v43;
  if (CGRectIsEmpty(v78) && one-time initialization token for canvasElementDefaultSize != -1)
    swift_once();
  if (one-time initialization token for maximumDropCanvasElementDimension == -1)
  {
    if (v41 == 9)
      goto LABEL_15;
    goto LABEL_14;
  }
  swift_once();
  if (v41 != 9)
  {
LABEL_14:
    LOBYTE(v73) = v41;
    v79.origin.x = a9;
    v79.origin.y = a10;
    v79.size.width = a11;
    v79.size.height = v62;
    v80 = CGRect.position(in:anchor:)(v79, (PaperKit::LayoutAnchor)&v73);
    x = v80.origin.x;
    y = v80.origin.y;
  }
LABEL_15:
  if ((a7 & 1) != 0)
    v44 = -0.0;
  else
    v44 = a5;
  if ((a7 & 1) != 0)
    v45 = -0.0;
  else
    v45 = a6;
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v46 = v34;
  TaggedValue_9.init(_:)();
  memset(v74, 0, sizeof(v74));
  v47 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (!v47)
  {
    __break(1u);
    goto LABEL_31;
  }
  v48 = v47;
  v49 = CGColorCreate(v47, (const CGFloat *)v74);

  v50 = v70;
  if (!v49)
  {
LABEL_31:
    __break(1u);
    return;
  }
  v51 = v44 + x;
  v73 = *(double *)&v49;
  v72 = 0;
  v52 = one-time initialization token for defaultTextBoxAttributes;
  swift_bridgeObjectRetain();
  if (v52 != -1)
    swift_once();
  v53 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  swift_bridgeObjectRetain();
  v54 = (void *)MEMORY[0x1DF0E41AC](v63, v50);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v53, sel_initWithString_attributes_, v54, isa);

  v57 = v64;
  CRAttributedString<>.init(nsAttributedString:scale:)(v56, v64, 1.0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
  v71 = 3;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v46, (uint64_t *)&v73, &v72, v57, &v71, (uint64_t)v40, v51 + -0.5, v45 + y + -0.5, 1.0, 1.0, 5.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.value.getter();
  if (vabdd_f64(v73, v68) > 0.01)
  {
    v73 = v68;
    CRRegister.value.setter();
  }
  outlined init with copy of Shape((uint64_t)v40, v65);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v59 = v69;
  Capsule<>.init(_:id:)();
  outlined destroy of Shape((uint64_t)v40);
  v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
}

id protocol witness for static Layout.canHandle(itemProvider:) in conformance TextBoxLayout(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v13;

  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UTType.utf8PlainText.getter();
  v7 = UTType.identifier.getter();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v10 = (void *)MEMORY[0x1DF0E41AC](v7, v9);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v10);

  return v11;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse and conformance Ellipse()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse and conformance Ellipse;
  if (!lazy protocol witness table cache variable for type Ellipse and conformance Ellipse)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse, &type metadata for Ellipse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse and conformance Ellipse);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Line and conformance Line()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line and conformance Line;
  if (!lazy protocol witness table cache variable for type Line and conformance Line)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line, &type metadata for Line);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line and conformance Line);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BezierPath and conformance BezierPath()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BezierPath, &type metadata for BezierPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BezierPath, &type metadata for BezierPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BezierPath and conformance BezierPath;
  if (!lazy protocol witness table cache variable for type BezierPath and conformance BezierPath)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BezierPath, &type metadata for BezierPath);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierPath and conformance BezierPath);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble;
  if (!lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble, &type metadata for CalloutBubble);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble and conformance CalloutBubble);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect;
  if (!lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect, &type metadata for RoundedRect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect and conformance RoundedRect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon;
  if (!lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon, &type metadata for RegularPolygon);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon and conformance RegularPolygon);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Star and conformance Star()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star and conformance Star;
  if (!lazy protocol witness table cache variable for type Star and conformance Star)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star, &type metadata for Star);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star and conformance Star);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape;
  if (!lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape and conformance ArrowShape);
  }
  return result;
}

uint64_t outlined init with copy of Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Shape(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for TextBoxLayout(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TextBoxLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextBoxLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB458BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TextBoxLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB45904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TextBoxLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextBoxLayout;
  if (!type metadata singleton initialization cache for TextBoxLayout)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TextBoxLayout()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for LayoutItemProvider.Model : CRDT in TextBoxLayout()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in TextBoxLayout()
{
  return &protocol witness table for Shape;
}

unint64_t lazy protocol witness table accessor for type Ref<TextBox> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<TextBox>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<TextBox> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_1DDB45A74()
{
  return 24;
}

__n128 sub_1DDB45A80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void ValueStepper.init(minValue:maxValue:unit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  char *v39;
  id v40;
  id v41;
  id v42;
  Class isa;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  Swift::String v49;
  Swift::String_optional v50;
  Swift::String v51;
  uint64_t countAndFlagsBits;
  void *v53;
  void *v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  double v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  id v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  id v78;
  id v79;
  void *v80;
  uint64_t v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  Class v87;
  uint64_t v88;
  id v89;
  void *v90;
  Class v91;
  id v92;
  Swift::String v93;
  Swift::String_optional v94;
  Swift::String v95;
  uint64_t v96;
  void *v97;
  void *v98;
  id v99;
  id v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  objc_class *ObjectType;
  _QWORD v108[3];
  objc_class *v109;
  objc_super v110;
  Swift::String v111;
  Swift::String v112;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = v4;
  v9 = (void *)MEMORY[0x1DF0E41AC](0x73756E696DLL, 0xE500000000000000);
  v10 = (void *)objc_opt_self();
  v11 = objc_msgSend(v10, sel_systemImageNamed_, v9);

  if (!v11)
  {
    __break(1u);
    goto LABEL_8;
  }
  v12 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  v13 = (objc_class *)type metadata accessor for StepperButton();
  v14 = objc_allocWithZone(v13);
  *(_QWORD *)&v8[v12] = StepperButton.init(image:)(v11);
  v15 = (void *)MEMORY[0x1DF0E41AC](1937075312, 0xE400000000000000);
  v16 = objc_msgSend(v10, sel_systemImageNamed_, v15);

  if (!v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v17 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
  v18 = objc_allocWithZone(v13);
  *(_QWORD *)&v8[v17] = StepperButton.init(image:)(v16);
  v19 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  *(_QWORD *)&v8[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v20 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  *(_QWORD *)&v8[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius] = 0x4020000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth] = 0x405A000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth] = 0x4008000000000000;
  v21 = &v8[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] = a1;
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue] = a2;
  v22 = &v8[OBJC_IVAR____TtC8PaperKit12ValueStepper_unit];
  *(_QWORD *)v22 = a3;
  *((_QWORD *)v22 + 1) = a4;

  v110.receiver = v8;
  v110.super_class = ObjectType;
  v23 = (char *)objc_msgSendSuper2(&v110, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v24 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  v25 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView];
  v26 = v23;
  objc_msgSend(v25, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v25, sel_setAxis_, 0);
  objc_msgSend(v25, sel_setAlignment_, 0);
  objc_msgSend(v25, sel_setDistribution_, 0);
  objc_msgSend(v25, sel_setSpacing_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing]);
  objc_msgSend(v26, sel_addSubview_, v25);
  v27 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1DDF329D0;
  v29 = objc_msgSend(v25, sel_topAnchor);
  v30 = objc_msgSend(v26, sel_topAnchor);
  v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(_QWORD *)(v28 + 32) = v31;
  v32 = objc_msgSend(*(id *)&v23[v24], sel_leadingAnchor);
  v33 = objc_msgSend(v26, sel_leadingAnchor);
  v34 = objc_msgSend(v32, sel_constraintEqualToAnchor_, v33);

  *(_QWORD *)(v28 + 40) = v34;
  v35 = objc_msgSend(*(id *)&v23[v24], sel_bottomAnchor);
  v36 = objc_msgSend(v26, sel_bottomAnchor);
  v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

  *(_QWORD *)(v28 + 48) = v37;
  v106 = v24;
  v38 = *(void **)&v23[v24];
  v39 = v23;
  v40 = objc_msgSend(v38, sel_trailingAnchor);
  v41 = objc_msgSend(v26, sel_trailingAnchor);
  v42 = objc_msgSend(v40, sel_constraintEqualToAnchor_, v41);

  *(_QWORD *)(v28 + 56) = v42;
  v108[0] = v28;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_activateConstraints_, isa);

  v44 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  v45 = *(id *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton];
  v46 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF4C690);
  objc_msgSend(v45, sel_setAccessibilityIdentifier_, v46);

  v47 = one-time initialization token for paperKitBundle;
  v48 = *(id *)&v26[v44];
  if (v47 != -1)
    swift_once();
  v111._countAndFlagsBits = 0xD000000000000039;
  v111._object = (void *)0x80000001DDF4C6B0;
  v49._countAndFlagsBits = 0x73756E694DLL;
  v49._object = (void *)0xE500000000000000;
  v50.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v50.value._object = (void *)0xEB00000000656C62;
  v51._countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, paperKitBundle, v51, v111)._countAndFlagsBits;
  v53 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setAccessibilityLabel_, v53);

  v54 = *(void **)&v26[v44];
  v104 = *MEMORY[0x1E0DC4660];
  objc_msgSend(v54, sel_setAccessibilityTraits_);
  objc_msgSend(v54, sel_setIsAccessibilityElement_, 1);
  v55 = objc_msgSend(v54, sel_layer);
  v103 = OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius;
  objc_msgSend(v55, sel_setCornerRadius_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius]);

  v56 = objc_msgSend(*(id *)&v26[v44], sel_layer);
  v57 = *MEMORY[0x1E0CD2A68];
  objc_msgSend(v56, sel_setCornerCurve_);

  objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, *(_QWORD *)&v26[v44]);
  v58 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  v59 = *(void **)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel];
  v60 = (void *)objc_opt_self();
  v61 = v59;
  v62 = objc_msgSend(v60, sel_labelColor);
  objc_msgSend(v61, sel_setTextColor_, v62);

  v63 = *(void **)&v26[v58];
  v64 = *MEMORY[0x1E0DC4A88];
  v65 = *MEMORY[0x1E0DC1440];
  v66 = (void *)*MEMORY[0x1E0DC4920];
  v67 = (void *)objc_opt_self();
  v68 = v63;
  v69 = v66;
  v70 = objc_msgSend(v67, sel_traitCollectionWithPreferredContentSizeCategory_, v69);
  v71 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v64, v65);
  if (v71)
  {
    v72 = v71;
    v73 = objc_msgSend(v71, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v70);

    objc_msgSend(v68, sel_setFont_, v73);
    v74 = *(id *)&v26[v58];
    v75 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000016, 0x80000001DDF4C6F0);
    objc_msgSend(v74, sel_setAccessibilityIdentifier_, v75);

    v76 = *(void **)&v26[v58];
    objc_msgSend(v76, sel_setAccessibilityTraits_, *MEMORY[0x1E0DC46C0]);
    objc_msgSend(v76, sel_setTextAlignment_, 1);
    v77 = objc_msgSend(v76, sel_layer);
    objc_msgSend(v77, sel_setCornerRadius_, *(double *)&v26[v103]);

    v78 = objc_msgSend(*(id *)&v26[v58], (SEL)&selRef_setAccessibilityLabel_);
    objc_msgSend(v78, sel_setCornerCurve_, v57);

    v79 = objc_msgSend(*(id *)&v26[v58], (SEL)&selRef_setAccessibilityLabel_);
    objc_msgSend(v79, sel_setBorderWidth_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth]);

    v80 = *(void **)&v26[v58];
    objc_msgSend(v80, sel_setClipsToBounds_, 1);
    objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, v80);
    v81 = swift_allocObject();
    *(_OWORD *)(v81 + 16) = xmmword_1DDF329E0;
    v82 = objc_msgSend(v80, sel_widthAnchor);
    v83 = objc_msgSend(v82, sel_constraintEqualToConstant_, *(double *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth]);

    *(_QWORD *)(v81 + 32) = v83;
    v84 = objc_msgSend(*(id *)&v26[v58], sel_centerXAnchor);
    v85 = objc_msgSend(v26, sel_centerXAnchor);
    v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_, v85);

    *(_QWORD *)(v81 + 40) = v86;
    v108[0] = v81;
    specialized Array._endMutation()();
    v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v27, sel_activateConstraints_, v87);

    v88 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
    v89 = *(id *)&v26[OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton];
    v90 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ALL, 0x80000001DDF4C710);
    objc_msgSend(v89, sel_setAccessibilityIdentifier_, v90);

    v91 = paperKitBundle.super.isa;
    v92 = *(id *)&v26[v88];
    v112._object = (void *)0x80000001DDF4C730;
    v93._countAndFlagsBits = 1937075280;
    v93._object = (void *)0xE400000000000000;
    v94.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v94.value._object = (void *)0xEB00000000656C62;
    v95._countAndFlagsBits = 0;
    v95._object = (void *)0xE000000000000000;
    v112._countAndFlagsBits = 0xD000000000000039;
    v96 = NSLocalizedString(_:tableName:bundle:value:comment:)(v93, v94, (NSBundle)v91, v95, v112)._countAndFlagsBits;
    v97 = (void *)MEMORY[0x1DF0E41AC](v96);
    swift_bridgeObjectRelease();
    objc_msgSend(v92, sel_setAccessibilityLabel_, v97);

    v98 = *(void **)&v26[v88];
    objc_msgSend(v98, sel_setAccessibilityTraits_, v104);
    objc_msgSend(v98, sel_setIsAccessibilityElement_, 1);
    v99 = objc_msgSend(v98, sel_layer);
    objc_msgSend(v99, sel_setCornerRadius_, *(double *)&v26[v103]);

    v100 = objc_msgSend(*(id *)&v26[v88], sel_layer);
    objc_msgSend(v100, sel_setCornerCurve_, v57);

    objc_msgSend(*(id *)&v39[v106], sel_addArrangedSubview_, *(_QWORD *)&v26[v88]);
    v109 = ObjectType;
    v108[0] = v26;
    v101 = v26;
    StepperButton.addTarget(_:action:for:)((uint64_t)v108, (uint64_t)sel_didTapLeftButton, 64);
    outlined destroy of Any?((uint64_t)v108);
    v109 = ObjectType;
    v108[0] = v101;
    v102 = v101;
    StepperButton.addTarget(_:action:for:)((uint64_t)v108, (uint64_t)sel_didTapRightButton, 64);
    outlined destroy of Any?((uint64_t)v108);
    ValueStepper.updateUI()();

    return;
  }
LABEL_9:
  __break(1u);
}

void ValueStepper.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  _BOOL8 v11;
  void *v12;
  objc_class *v13;
  id v14;
  id v15;
  id v16;
  objc_super v17;
  objc_super v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel);
  v19 = ValueStepper.currentValue.getter();
  v20 = dispatch thunk of CustomStringConvertible.description.getter();
  v21 = v3;
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_unit);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_unit + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = (void *)MEMORY[0x1DF0E41AC](v20, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setText_, v8);

  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue);
  v10 = v9 < *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue);
  v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue) < v9;
  v12 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton);
  v13 = (objc_class *)type metadata accessor for StepperButton();
  v18.receiver = v12;
  v18.super_class = v13;
  objc_msgSendSuper2(&v18, sel_setEnabled_, v10);
  StepperButton.updateUI()();
  v17.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton);
  v17.super_class = v13;
  objc_msgSendSuper2(&v17, sel_setEnabled_, v11);
  StepperButton.updateUI()();
  v14 = objc_msgSend(v2, sel_layer);
  v15 = objc_msgSend((id)objc_opt_self(), sel_quaternarySystemFillColor);
  v16 = objc_msgSend(v15, sel_CGColor);

  objc_msgSend(v14, sel_setBorderColor_, v16);
}

char *ValueStepper.didTapLeftButton()()
{
  char *v0;
  char *result;
  char *v2;
  char *v3;

  result = (char *)ValueStepper.currentValue.getter();
  v2 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > (uint64_t)v2)
      v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
    if ((uint64_t)v2 >= *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue])
      v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
    v3 = &v0[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
    *(_QWORD *)v3 = v2;
    v3[8] = 0;
    ValueStepper.updateUI()();
    return (char *)objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
  }
  return result;
}

uint64_t ValueStepper.currentValue.getter()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue + 8) != 1)
    return *(_QWORD *)v1;
  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue);
  *(_QWORD *)v1 = result;
  v1[8] = 0;
  return result;
}

char *ValueStepper.didTapRightButton()()
{
  char *v0;
  char *result;
  char *v2;
  char *v3;

  result = (char *)ValueStepper.currentValue.getter();
  v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue] > (uint64_t)v2)
      v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_minValue];
    if ((uint64_t)v2 >= *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue])
      v2 = *(char **)&v0[OBJC_IVAR____TtC8PaperKit12ValueStepper_maxValue];
    v3 = &v0[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
    *(_QWORD *)v3 = v2;
    v3[8] = 0;
    ValueStepper.updateUI()();
    return (char *)objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
  }
  return result;
}

uint64_t type metadata accessor for ValueStepper()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized ValueStepper.init(coder:)()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  v1 = v0;
  v2 = (void *)MEMORY[0x1DF0E41AC](0x73756E696DLL, 0xE500000000000000);
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_systemImageNamed_, v2);

  if (!v4)
    __break(1u);
  v5 = OBJC_IVAR____TtC8PaperKit12ValueStepper_decreaseButton;
  v6 = (objc_class *)type metadata accessor for StepperButton();
  v7 = objc_allocWithZone(v6);
  *(_QWORD *)&v1[v5] = StepperButton.init(image:)(v4);
  v8 = (void *)MEMORY[0x1DF0E41AC](1937075312, 0xE400000000000000);
  v9 = objc_msgSend(v3, sel_systemImageNamed_, v8);

  if (!v9)
    __break(1u);
  v10 = OBJC_IVAR____TtC8PaperKit12ValueStepper_increaseButton;
  v11 = objc_allocWithZone(v6);
  *(_QWORD *)&v1[v10] = StepperButton.init(image:)(v9);
  v12 = OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabel;
  *(_QWORD *)&v1[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  v13 = OBJC_IVAR____TtC8PaperKit12ValueStepper_contentStackView;
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_interItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_cornerRadius] = 0x4020000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelWidth] = 0x405A000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit12ValueStepper_valueLabelBorderWidth] = 0x4008000000000000;
  v14 = &v1[OBJC_IVAR____TtC8PaperKit12ValueStepper____lazy_storage___currentValue];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata instantiation function for ToggleButton()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ToggleButton()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2 = type metadata accessor for Optional();
    if (v5 > 0x3F)
    {
      return v2;
    }
    else
    {
      type metadata accessor for Inspected(255, v0, v3, v4);
      v0 = type metadata accessor for Binding();
      if (v6 <= 0x3F)
      {
        type metadata accessor for Environment<ColorScheme>.Content();
        v0 = v7;
        if (v8 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToggleButton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  void *v29;
  const void *v30;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  size_t __n;
  uint64_t v50;
  uint64_t v51;
  size_t v52;

  v51 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v51 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = v8 + 1;
  if (*(_DWORD *)(v5 + 84))
    v10 = *(_QWORD *)(v5 + 64);
  else
    v10 = v8 + 1;
  __n = v10;
  v50 = v8 + v6;
  v52 = v10 + (v6 | 7);
  v11 = (v6 + 16) & ~(unint64_t)v6;
  v12 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v13 = *(_DWORD *)(v12 + 80);
  v14 = v13 & 0xF8 | 7;
  v15 = 8;
  if (*(_QWORD *)(v12 + 64) > 8uLL)
    v15 = *(_QWORD *)(v12 + 64);
  v16 = (v13 | v6) & 0x100000;
  v17 = *a2;
  *a1 = *a2;
  if ((v14 | v6) != 7
    || v16 != 0
    || v15
     + ((v11
       + v9
       + v14
       + ((v52
         + ((v8 + v6 + ((v6 + 32) & ~(unint64_t)v6)) & ~(unint64_t)v6)) & ~(v6 | 7))) & ~v14)
     + 1 > 0x18)
  {
    v20 = (uint64_t *)(v17 + (((v14 | v6) + 16) & ~(v14 | v6)));
LABEL_26:
    swift_retain();
    return v20;
  }
  v47 = v11 + v9 + v14;
  v48 = v15;
  v44 = v12;
  v21 = ~(unint64_t)v6;
  v45 = ~(v7 | 7);
  v46 = ~v14;
  v22 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + v7 + 8) & ~v7;
  v27 = ((unint64_t)v25 + v7 + 8) & ~v7;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  swift_retain();
  v28(v26, v27, v51);
  v29 = (void *)((v50 + v26) & ~v7);
  v30 = (const void *)((v50 + v27) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, v51))
  {
    memcpy(v29, v30, __n);
  }
  else
  {
    v28((uint64_t)v29, (uint64_t)v30, v51);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v29, 0, 1, v51);
  }
  v32 = v28;
  v33 = (_QWORD *)(((unint64_t)v29 + v52) & v45);
  v34 = (_QWORD *)(((unint64_t)v30 + v52) & v45);
  *v33 = *v34;
  v35 = (_QWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = ((unint64_t)v35 + v7 + 8) & v21;
  v38 = ((unint64_t)v36 + v7 + 8) & v21;
  swift_retain();
  swift_retain();
  v32(v37, v38, v51);
  *(_BYTE *)(v37 + v8) = *(_BYTE *)(v38 + v8);
  v39 = (_QWORD *)(((unint64_t)v33 + v47) & v46);
  v40 = (_QWORD *)(((unint64_t)v34 + v47) & v46);
  v41 = *((unsigned __int8 *)v40 + v48);
  if (v41 >= 2)
  {
    if (v48 <= 3)
      v42 = v48;
    else
      v42 = 4;
    __asm { BR              X12 }
  }
  v20 = a1;
  if (v41 != 1)
  {
    *v39 = *v40;
    *((_BYTE *)v39 + v48) = 0;
    goto LABEL_26;
  }
  (*(void (**)(_QWORD *))(v44 + 16))(v39);
  *((_BYTE *)v39 + v48) = 1;
  return v20;
}

uint64_t destroy for ToggleButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v3 = a1 + 31;
  swift_release();
  swift_release();
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ~v7;
  v9 = (v7 + 8 + v4) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v10(v9, v5);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = (v11 + v7 + v9) & ~v7;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5))
    v10(v12, v5);
  if (*(_DWORD *)(v6 + 84))
    v13 = v11;
  else
    v13 = v11 + 1;
  v14 = (v12 + (v7 | 7) + v13) & ~(v7 | 7);
  swift_release();
  swift_release();
  v10((v7 + 8 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) & v8, v5);
  v15 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v16 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
  v17 = (((v7 + 16) & v8) + v11 + 1 + v16 + v14) & ~v16;
  v18 = *(_QWORD *)(v15 + 64);
  if (v18 <= 8)
    v18 = 8;
  v19 = *(unsigned __int8 *)(v17 + v18);
  if (v19 >= 2)
  {
    if (v18 <= 3)
      v20 = v18;
    else
      v20 = 4;
    __asm { BR              X14 }
  }
  if (v19 == 1)
    return (*(uint64_t (**)(void))(v15 + 8))();
  else
    return swift_release();
}

_QWORD *initializeWithCopy for ToggleButton(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t);
  size_t v15;
  void *v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  void (*v37)(unint64_t, unint64_t, uint64_t);
  uint64_t v38;

  v3 = (unint64_t)a2 + 15;
  v5 = *a2;
  v4 = (unint64_t)a2 + 31;
  *a1 = v5;
  v6 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v3 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v6 = *(_QWORD *)v3;
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v3 + 8);
  v7 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v10 + 8;
  v38 = ~v10;
  v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v13 = (v10 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v14(v12, v13, v8);
  v15 = *(_QWORD *)(v9 + 64);
  v16 = (void *)((v15 + v10 + v12) & ~v10);
  v37 = (void (*)(unint64_t, unint64_t, uint64_t))v14;
  if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v9 + 48))((v15 + v10 + v13) & ~v10, 1, v8))
  {
    v17 = *(_DWORD *)(v9 + 84);
    if (v17)
      v18 = v15;
    else
      v18 = v15 + 1;
    memcpy(v16, (const void *)((v15 + v10 + v13) & ~v10), v18);
  }
  else
  {
    v14((uint64_t)v16, (v15 + v10 + v13) & ~v10, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    v17 = *(_DWORD *)(v9 + 84);
  }
  if (v17)
    v19 = v15;
  else
    v19 = v15 + 1;
  v20 = (v10 | 7) + v19;
  v21 = (_QWORD *)((((v15 + v10 + v13) & ~v10) + v20) & ~(v10 | 7));
  v22 = (_QWORD *)(((unint64_t)v16 + v20) & ~(v10 | 7));
  *v22 = *v21;
  v23 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  v25 = ((unint64_t)v23 + v11) & v38;
  v26 = ((unint64_t)v24 + v11) & v38;
  swift_retain();
  swift_retain();
  v37(v25, v26, v8);
  *(_BYTE *)(v25 + v15) = *(_BYTE *)(v26 + v15);
  v27 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v28 = *(_DWORD *)(v27 + 80) & 0xF8 | 7;
  v29 = ((v10 + 16) & v38) + v15 + 1 + v28;
  v30 = (_QWORD *)(((unint64_t)v22 + v29) & ~v28);
  v31 = (_QWORD *)(((unint64_t)v21 + v29) & ~v28);
  if (*(_QWORD *)(v27 + 64) <= 8uLL)
    v32 = 8;
  else
    v32 = *(_QWORD *)(v27 + 64);
  v33 = *((unsigned __int8 *)v31 + v32);
  if (v33 >= 2)
  {
    if (v32 <= 3)
      v34 = v32;
    else
      v34 = 4;
    __asm { BR              X13 }
  }
  if (v33 == 1)
  {
    (*(void (**)(_QWORD *))(v27 + 16))(v30);
    v35 = 1;
  }
  else
  {
    *v30 = *v31;
    swift_retain();
    v35 = 0;
  }
  *((_BYTE *)v30 + v32) = v35;
  return a1;
}

_QWORD *assignWithCopy for ToggleButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  size_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  size_t v23;
  size_t v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void (*v45)(unint64_t, unint64_t, uint64_t);
  uint64_t v46;

  v6 = (unint64_t)a2 + 31;
  *a1 = *a2;
  swift_retain();
  swift_release();
  v7 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  swift_retain();
  swift_release();
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v10 = v6 & 0xFFFFFFFFFFFFFFF8;
  *v9 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = v13 + 8;
  v46 = ~v13;
  v15 = ((unint64_t)v9 + v13 + 8) & ~v13;
  v16 = (v13 + 8 + v10) & ~v13;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24);
  v17(v15, v16, v11);
  v18 = *(_QWORD *)(v12 + 64);
  v19 = (void *)((v18 + v13 + v15) & ~v13);
  v20 = (void *)((v18 + v13 + v16) & ~v13);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v8) = v21(v19, 1, v11);
  v22 = v21(v20, 1, v11);
  v45 = (void (*)(unint64_t, unint64_t, uint64_t))v17;
  if ((_DWORD)v8)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v22)
    {
      v17((uint64_t)v19, (uint64_t)v20, v11);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v19, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v23 = v18;
  else
    v23 = v18 + 1;
  memcpy(v19, v20, v23);
LABEL_10:
  if (*(_DWORD *)(v12 + 84))
    v24 = v18;
  else
    v24 = v18 + 1;
  v25 = (v13 | 7) + v24;
  v26 = (_QWORD *)(((unint64_t)v19 + v25) & ~(v13 | 7));
  v27 = (_QWORD *)(((unint64_t)v20 + v25) & ~(v13 | 7));
  *v26 = *v27;
  swift_retain();
  swift_release();
  v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v28 = *v29;
  swift_retain();
  swift_release();
  v30 = ((unint64_t)v28 + v14) & v46;
  v31 = ((unint64_t)v29 + v14) & v46;
  v45(v30, v31, v11);
  *(_BYTE *)(v30 + v18) = *(_BYTE *)(v31 + v18);
  v32 = type metadata accessor for ColorScheme();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8 | 7;
  v35 = ((v13 + 16) & v46) + v18 + 1 + v34;
  v36 = (_QWORD *)(((unint64_t)v26 + v35) & ~v34);
  v37 = (_QWORD *)(((unint64_t)v27 + v35) & ~v34);
  if (v36 != v37)
  {
    v38 = v32;
    if (*(_QWORD *)(v33 + 64) <= 8uLL)
      v39 = 8;
    else
      v39 = *(_QWORD *)(v33 + 64);
    v40 = *((unsigned __int8 *)v36 + v39);
    if (v40 >= 2)
    {
      if (v39 <= 3)
        v41 = v39;
      else
        v41 = 4;
      __asm { BR              X12 }
    }
    if (v40 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v36, v32);
    else
      swift_release();
    v42 = *((unsigned __int8 *)v37 + v39);
    if (v42 >= 2)
    {
      if (v39 <= 3)
        v43 = v39;
      else
        v43 = 4;
      __asm { BR              X12 }
    }
    if (v42 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v33 + 16))(v36, v37, v38);
      *((_BYTE *)v36 + v39) = 1;
    }
    else
    {
      *v36 = *v37;
      *((_BYTE *)v36 + v39) = 0;
      swift_retain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for ToggleButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  size_t v15;
  void *v16;
  const void *v17;
  int v18;
  size_t v19;
  size_t v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  char v36;

  *a1 = *a2;
  v3 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v3 = *(_QWORD *)v4;
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(v4 + 8);
  v5 = (_QWORD *)(((unint64_t)a1 + 31) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 31) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v9 + 8;
  v11 = ~v9;
  v12 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v13 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v14(v12, v13, v7);
  v15 = *(_QWORD *)(v8 + 64);
  v16 = (void *)((v15 + v9 + v12) & ~v9);
  v17 = (const void *)((v15 + v9 + v13) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7))
  {
    v18 = *(_DWORD *)(v8 + 84);
    if (v18)
      v19 = v15;
    else
      v19 = v15 + 1;
    memcpy(v16, v17, v19);
  }
  else
  {
    v14((uint64_t)v16, (uint64_t)v17, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    v18 = *(_DWORD *)(v8 + 84);
  }
  if (v18)
    v20 = v15;
  else
    v20 = v15 + 1;
  v21 = (v9 | 7) + v20;
  v22 = (_QWORD *)(((unint64_t)v17 + v21) & ~(v9 | 7));
  v23 = (_QWORD *)(((unint64_t)v16 + v21) & ~(v9 | 7));
  *v23 = *v22;
  v24 = (_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  v25 = (_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  v26 = ((unint64_t)v24 + v10) & v11;
  v27 = ((unint64_t)v25 + v10) & v11;
  v14(v26, v27, v7);
  *(_BYTE *)(v26 + v15) = *(_BYTE *)(v27 + v15);
  v28 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v29 = *(_DWORD *)(v28 + 80) & 0xF8 | 7;
  v30 = ((v9 + 16) & v11) + v15 + 1 + v29;
  v31 = (_QWORD *)(((unint64_t)v23 + v30) & ~v29);
  v32 = (_QWORD *)(((unint64_t)v22 + v30) & ~v29);
  if (*(_QWORD *)(v28 + 64) <= 8uLL)
    v33 = 8;
  else
    v33 = *(_QWORD *)(v28 + 64);
  v34 = *((unsigned __int8 *)v32 + v33);
  if (v34 >= 2)
  {
    if (v33 <= 3)
      v35 = v33;
    else
      v35 = 4;
    __asm { BR              X13 }
  }
  if (v34 == 1)
  {
    (*(void (**)(_QWORD *))(v28 + 32))(v31);
    v36 = 1;
  }
  else
  {
    v36 = 0;
    *v31 = *v32;
  }
  *((_BYTE *)v31 + v33) = v36;
  return a1;
}

_QWORD *assignWithTake for ToggleButton(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t, uint64_t);
  size_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  size_t v21;
  size_t v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  void (*v43)(unint64_t, unint64_t, uint64_t);
  uint64_t v44;

  v5 = (unint64_t)a2 + 31;
  v6 = (unint64_t)a1 + 15;
  *a1 = *a2;
  v7 = (unint64_t)a1 + 31;
  swift_release();
  v6 &= 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v6 = *(_QWORD *)v8;
  swift_release();
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(v8 + 8);
  v9 = v5 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = v12 + 8;
  v44 = ~v12;
  v14 = (v12 + 8 + v9) & ~v12;
  v15 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 40);
  v15((v12 + 8 + (v7 & 0xFFFFFFFFFFFFFFF8)) & ~v12, v14, v10);
  v16 = *(_QWORD *)(v11 + 64);
  v17 = (void *)((v16 + v12 + ((v12 + 8 + (v7 & 0xFFFFFFFFFFFFFFF8)) & ~v12)) & ~v12);
  v18 = (void *)((v16 + v12 + v14) & ~v12);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v7) = v19(v17, 1, v10);
  v20 = v19(v18, 1, v10);
  v43 = (void (*)(unint64_t, unint64_t, uint64_t))v15;
  if ((_DWORD)v7)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v20)
    {
      v15((unint64_t)v17, (uint64_t)v18, v10);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
  }
  if (*(_DWORD *)(v11 + 84))
    v21 = v16;
  else
    v21 = v16 + 1;
  memcpy(v17, v18, v21);
LABEL_10:
  if (*(_DWORD *)(v11 + 84))
    v22 = v16;
  else
    v22 = v16 + 1;
  v23 = (v12 | 7) + v22;
  v24 = (_QWORD *)(((unint64_t)v17 + v23) & ~(v12 | 7));
  v25 = (_QWORD *)(((unint64_t)v18 + v23) & ~(v12 | 7));
  *v24 = *v25;
  swift_release();
  v26 = (_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  swift_release();
  v28 = ((unint64_t)v26 + v13) & v44;
  v43(v28, ((unint64_t)v27 + v13) & v44, v10);
  *(_BYTE *)(v28 + v16) = *(_BYTE *)((((unint64_t)v27 + v13) & v44) + v16);
  v29 = type metadata accessor for ColorScheme();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  v32 = ((v12 + 16) & v44) + v16 + 1 + v31;
  v33 = (_QWORD *)(((unint64_t)v24 + v32) & ~v31);
  v34 = (_QWORD *)(((unint64_t)v25 + v32) & ~v31);
  if (v33 != v34)
  {
    v35 = v29;
    if (*(_QWORD *)(v30 + 64) <= 8uLL)
      v36 = 8;
    else
      v36 = *(_QWORD *)(v30 + 64);
    v37 = *((unsigned __int8 *)v33 + v36);
    if (v37 >= 2)
    {
      if (v36 <= 3)
        v38 = v36;
      else
        v38 = 4;
      __asm { BR              X12 }
    }
    if (v37 == 1)
      (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v33, v29);
    else
      swift_release();
    v39 = *((unsigned __int8 *)v34 + v36);
    if (v39 >= 2)
    {
      if (v36 <= 3)
        v40 = v36;
      else
        v40 = 4;
      __asm { BR              X12 }
    }
    if (v39 == 1)
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v30 + 32))(v33, v34, v35);
      v41 = 1;
    }
    else
    {
      v41 = 0;
      *v33 = *v34;
    }
    *((_BYTE *)v33 + v36) = v41;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleButton(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v19;
  int v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v10 = 8;
  if (*(_QWORD *)(v9 + 64) > 8uLL)
    v10 = *(_QWORD *)(v9 + 64);
  v11 = *(_QWORD *)(v6 + 64);
  if ((_DWORD)v7)
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v11 + 1;
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v6 + 80);
  if (a2 <= v8)
    goto LABEL_27;
  v14 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v15 = v10
      + ((((v13 + 16) & ~v13)
        + v11
        + 1
        + v14
        + (((v13 | 7) + v12 + ((v11 + v13 + ((v13 + 32) & ~v13)) & ~v13)) & ~(v13 | 7))) & ~v14)
      + 1;
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v19 = ((a2 - v8 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v19 > 0xFF)
    {
      v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(_WORD *)((char *)a1 + v15))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v19 < 2)
    {
LABEL_27:
      if ((v7 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 24) & ~v13, v7, v5);
      v21 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v21) = -1;
      return (v21 + 1);
    }
  }
  v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((_BYTE *)a1 + v15))
    goto LABEL_27;
LABEL_20:
  v20 = (v17 - 1) << v16;
  if (v15 > 3)
    v20 = 0;
  if ((_DWORD)v15)
  {
    if (v15 > 3)
      LODWORD(v15) = 4;
    __asm { BR              X11 }
  }
  return v8 + v20 + 1;
}

void storeEnumTagSinglePayload for ToggleButton(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF)
    v9 = 0x7FFFFFFF;
  else
    v9 = *(_DWORD *)(v7 + 84);
  v10 = *(_QWORD *)(type metadata accessor for ColorScheme() - 8);
  v11 = 8;
  if (*(_QWORD *)(v10 + 64) > 8uLL)
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 64);
  v14 = (v13 + v12 + ((v12 + 32) & ~v12)) & ~v12;
  v15 = v13 + 1;
  if (!v8)
    ++v13;
  v16 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  v17 = v11 + ((((v12 + 16) & ~v12) + v15 + v16 + (((v12 | 7) + v13 + v14) & ~(v12 | 7))) & ~v16) + 1;
  if (a3 <= v9)
  {
    v18 = 0u;
  }
  else if (v17 <= 3)
  {
    v20 = ((a3 - v9 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v20))
    {
      v18 = 4u;
    }
    else if (v20 >= 0x100)
    {
      v18 = 2;
    }
    else
    {
      v18 = v20 > 1;
    }
  }
  else
  {
    v18 = 1u;
  }
  if (v9 < a2)
  {
    v19 = ~v9 + a2;
    if (v17 < 4)
    {
      if ((_DWORD)v17)
      {
        v21 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if ((_DWORD)v17 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if ((_DWORD)v17 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for ToggleButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ToggleButton);
}

void type metadata accessor for Environment<ColorScheme>.Content()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Environment<ColorScheme>.Content)
  {
    type metadata accessor for ColorScheme();
    v0 = type metadata accessor for Environment.Content();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<ColorScheme>.Content);
  }
}

uint64_t associated type witness table accessor for View.Body : View in ToggleButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ToggleButton.binding.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Inspected(255, *(_QWORD *)(a1 + 16), a3, a4);
  v4 = type metadata accessor for Binding();
  return MEMORY[0x1DF0E24B4](v4);
}

uint64_t ToggleButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v28 = a2;
  v27 = type metadata accessor for PlainButtonStyle();
  v29 = *(_QWORD *)(v27 - 8);
  v6 = MEMORY[0x1E0C80A78](v27, v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v6, v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  v13 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  v26 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v18 = swift_allocObject();
  v19 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v18 + 16) = v19;
  *(_QWORD *)(v18 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v30 = v19;
  v31 = v20;
  v32 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  v21 = v27;
  v22 = v25;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v16, v22);
}

uint64_t closure #1 in ToggleButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;

  v7 = type metadata accessor for Inspected(0, a2, a3, a4);
  v34 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - v9;
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v33 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v14, v18);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v22);
  v35 = a3;
  v36 = (char *)&v33 - v23;
  v25 = type metadata accessor for ToggleButton(0, a2, a3, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, a1 + *(int *)(v25 + 52), v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v36, v16, a2);
    ToggleButton.binding.getter(v25, v26, v27, v28);
    Inspected.value.getter(v7, (uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v7);
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v17 + 8);
    v30(v21, a2);
    if ((v29 & 1) != 0)
    {
      v31 = v36;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v21, v36, a2);
      type metadata accessor for Binding();
      MEMORY[0x1DF0E24B4]();
      Inspected.value.setter((uint64_t)v21, v7);
      Binding.wrappedValue.setter();
      return ((uint64_t (*)(char *, uint64_t))v30)(v31, a2);
    }
    v30(v36, a2);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, a1 + *(int *)(v25 + 48), a2);
  type metadata accessor for Binding();
  MEMORY[0x1DF0E24B4]();
  Inspected.value.setter((uint64_t)v21, v7);
  return Binding.wrappedValue.setter();
}

uint64_t closure #2 in ToggleButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  void *v64;
  char **v65;
  uint64_t v66;
  uint64_t result;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  void (*v95)(char *);
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  _QWORD v108[2];
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  unsigned __int8 v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;

  v101 = a1;
  v82 = type metadata accessor for ColorScheme();
  v81 = *(_QWORD *)(v82 - 8);
  v8 = MEMORY[0x1E0C80A78](v82, v7);
  v80 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v79 = (uint64_t)&v76 - v12;
  v99 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Inspected(0, a2, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v76 - v21;
  v100 = a3;
  v24 = type metadata accessor for ToggleButton(0, a2, a3, v23);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v96 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v76 - v30;
  v32 = v101[1];
  v95 = *(void (**)(char *))(v25 + 16);
  v95((char *)&v76 - v30);
  v98 = v15;
  v97 = v18;
  v78 = v19;
  v77 = v22;
  v76 = a2;
  if (!v32)
  {
LABEL_5:
    v37 = *(void (**)(char *, uint64_t))(v25 + 8);
    v37(v31, v24);
    goto LABEL_6;
  }
  ToggleButton.binding.getter(v24, v33, v34, v35);
  Inspected.value.getter(v18, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v15, a2);
  v37 = *(void (**)(char *, uint64_t))(v25 + 8);
  v37(v31, v24);
  if ((v36 & 1) != 0)
  {
    v38 = v101;
    v39 = v101[1];
    if (v39)
      goto LABEL_7;
    __break(1u);
    goto LABEL_5;
  }
LABEL_6:
  v38 = v101;
  v39 = *v101;
LABEL_7:
  swift_retain();
  v40 = v97;
  v41 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, (uint64_t)v108, 0.0, 1, 36.0, 0, v41, v42, v39);
  swift_release();
  v43 = v108[0];
  v44 = v108[1];
  LODWORD(v101) = v109;
  v94 = v110;
  v93 = v111;
  v92 = v112;
  v91 = v113;
  v90 = v114;
  v89 = v115;
  v88 = v116;
  v87 = v117;
  v86 = v118;
  v85 = v119;
  v84 = v120;
  v83 = v121;
  v45 = *((unsigned __int8 *)v38 + 16);
  v46 = v96;
  ((void (*)(char *, uint64_t *, uint64_t))v95)(v96, v38, v24);
  v50 = (uint64_t)v98;
  if (v45 == 1)
  {
    v95 = (void (*)(char *))v37;
    v51 = v44;
    v52 = v43;
    v53 = v77;
    ToggleButton.binding.getter(v24, v47, v48, v49);
    Inspected.value.getter(v40, v50);
    v54 = v53;
    v43 = v52;
    v44 = v51;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v40);
    v55 = v76;
    v56 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v50, v55);
    ((void (*)(char *, uint64_t))v95)(v46, v24);
    if ((v56 & 1) != 0)
    {
      v57 = static Color.accentColor.getter();
      goto LABEL_14;
    }
  }
  else
  {
    v37(v46, v24);
  }
  v58 = v79;
  specialized Environment.wrappedValue.getter(v79);
  v59 = v81;
  v60 = v80;
  v61 = v82;
  (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v80, *MEMORY[0x1E0CD86E0], v82);
  v62 = static ColorScheme.== infix(_:_:)();
  v63 = *(void (**)(char *, uint64_t))(v59 + 8);
  v63(v60, v61);
  v63((char *)v58, v61);
  v64 = (void *)objc_opt_self();
  v65 = &selRef_secondarySystemBackgroundColor;
  if ((v62 & 1) == 0)
    v65 = &selRef_tertiarySystemBackgroundColor;
  v57 = MEMORY[0x1DF0E23A0](objc_msgSend(v64, *v65, v76));
LABEL_14:
  v66 = v57;
  result = static Edge.Set.all.getter();
  v68 = (char)v101;
  v107 = (char)v101;
  v69 = v93;
  v106 = v93;
  v70 = v91;
  v105 = v91;
  v71 = v89;
  v104 = v89;
  v72 = v87;
  v103 = v87;
  v73 = v85;
  v102 = v85;
  v74 = v38[3];
  *(_QWORD *)a4 = v43;
  *(_QWORD *)(a4 + 8) = v44;
  *(_BYTE *)(a4 + 16) = v68;
  *(_QWORD *)(a4 + 24) = v94;
  *(_BYTE *)(a4 + 32) = v69;
  *(_QWORD *)(a4 + 40) = v92;
  *(_BYTE *)(a4 + 48) = v70;
  *(_QWORD *)(a4 + 56) = v90;
  *(_BYTE *)(a4 + 64) = v71;
  *(_QWORD *)(a4 + 72) = v88;
  *(_BYTE *)(a4 + 80) = v72;
  *(_QWORD *)(a4 + 88) = v86;
  *(_BYTE *)(a4 + 96) = v73;
  v75 = v83;
  *(_QWORD *)(a4 + 104) = v84;
  *(_QWORD *)(a4 + 112) = v75;
  *(_QWORD *)(a4 + 120) = v66;
  *(_BYTE *)(a4 + 128) = result;
  *(_QWORD *)(a4 + 136) = 0x4014000000000000;
  *(_QWORD *)(a4 + 144) = v74;
  *(_WORD *)(a4 + 152) = 256;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToggleButton<A>()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_1DDB49164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = (int *)type metadata accessor for ToggleButton(0, v5, *(_QWORD *)(v4 + 24), a4);
  v7 = *(unsigned __int8 *)(*((_QWORD *)v6 - 1) + 80);
  v8 = v4 + ((v7 + 32) & ~v7);
  swift_release();
  swift_release();
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v8 + v6[12], v5);
  v11 = v8 + v6[13];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v5))
    v10(v11, v5);
  v12 = v8 + v6[14];
  swift_release();
  swift_release();
  type metadata accessor for Inspected(255, v5, v13, v14);
  v15 = type metadata accessor for Binding();
  v10(v12 + *(int *)(v15 + 32), v5);
  v16 = v8 + v6[15];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v17 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  else
  {
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToggleButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ToggleButton(0, v5, v6, a4) - 8) + 80);
  return closure #1 in ToggleButton.body.getter(v4 + ((v7 + 32) & ~v7), v5, v6, v8);
}

uint64_t partial apply for closure #2 in ToggleButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in ToggleButton.body.getter(*(uint64_t **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _ClipEffect<RoundedCorner> and conformance _ClipEffect<A>, (uint64_t *)&demangling cache variable for type metadata for _ClipEffect<RoundedCorner>, MEMORY[0x1E0CD89F0]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E0CDC6D0]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _FlexFrameLayout>);
    v2[0] = MEMORY[0x1E0CDF820];
    v2[1] = MEMORY[0x1E0CDA228];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    v1 = type metadata accessor for PlainButtonStyle();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9F68], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1DF0E63B4](a1, v6, a5);
}

uint64_t sub_1DDB494F4()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  type metadata accessor for PlainButtonStyle();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for Inspected()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Inspected()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for Inspected(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for Inspected(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for Inspected(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for Inspected(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_21;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) > 3)
    goto LABEL_7;
  v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    v11 = *(_DWORD *)(a1 + v9);
    if (v11)
      goto LABEL_14;
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2)
        goto LABEL_21;
LABEL_7:
      v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(_BYTE *)(a1 + v9))
        goto LABEL_21;
LABEL_14:
      v13 = (v11 - 1) << v10;
      if (v9 > 3)
        v13 = 0;
      if ((_DWORD)v7 == -1)
        return v6 + v13 + 1;
      if (v9 > 3)
        LODWORD(v9) = 4;
      return ((uint64_t (*)(void))((char *)&loc_1DDB49870 + 4 * byte_1DDF32AD8[(v9 - 1)]))();
    }
    v11 = *(unsigned __int16 *)(a1 + v9);
    if (*(_WORD *)(a1 + v9))
      goto LABEL_14;
  }
LABEL_21:
  if (v5 >= 0xFE)
    return (*(uint64_t (**)(void))(v4 + 48))();
  v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2)
    return 0;
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for Inspected(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  size_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu)
    v6 = 254;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0u;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t type metadata accessor for Inspected(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Inspected);
}

uint64_t Inspected.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Inspected.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
  *(_BYTE *)(v2 + *(int *)(a2 + 28)) = 0;
  return result;
}

uint64_t Inspected.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t type metadata accessor for SeparatorView()
{
  return objc_opt_self();
}

id ShapeStyleEditingController.currentStrokeColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD v20[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  v7 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v8 = *(_QWORD *)(v7 + 8),
        ObjectType = swift_getObjectType(),
        v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8),
        v11 = swift_unknownObjectRelease(),
        v10))
  {
    v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x428))(v11);

    v6 = v10;
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }

  v13 = *(_QWORD *)(v12 + 16);
  v14 = type metadata accessor for Shape();
  v15 = *(_QWORD *)(v14 - 8);
  if (v13)
  {
    outlined init with copy of Shape(v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v4);
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v4, v16, 1, v14);
  swift_bridgeObjectRelease();
  type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, v14) == 1)
  {
    outlined destroy of Shape?((uint64_t)v4);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  v17 = (void *)v20[1];
  outlined destroy of Shape((uint64_t)v4);
  if (!v17)
    return 0;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v17);

  return v18;
}

uint64_t ShapeStyleEditingController.hasMultipleStrokeColors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  char v35;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v40;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  v11 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_11:
    outlined destroy of Shape?((uint64_t)v4);
    return 0;
  }
  v12 = (void *)v11;
  v13 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v14 = *(_QWORD *)(v13 + 8),
        ObjectType = swift_getObjectType(),
        v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14),
        v17 = swift_unknownObjectRelease(),
        v16))
  {
    v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x428))(v17);

    v12 = v16;
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
  }

  if (*(_QWORD *)(v18 + 16))
  {
    outlined init with copy of Shape(v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v19, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    goto LABEL_11;
  outlined init with take of Shape((uint64_t)v4, (uint64_t)v9);
  v21 = MEMORY[0x1DF0E666C](v10);
  if (!v21)
  {
    v20 = 0;
    goto LABEL_32;
  }
  v22 = (void *)v21;
  v23 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v24 = *(_QWORD *)(v23 + 8),
        v25 = swift_getObjectType(),
        v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24),
        v27 = swift_unknownObjectRelease(),
        v26))
  {
    v28 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x428))(v27);

    v22 = v26;
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }

  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    goto LABEL_32;
  }
  v30 = v28 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v37 = v28;
  v38 = v9;
  v31 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    v32 = v40;
    CRRegister.wrappedValue.getter();
    v33 = v39;
    if (!v32)
      break;
    if (!v39)
      goto LABEL_29;
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v34 = v32;
    v35 = static _CFObject.== infix(_:_:)();

    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_30;
    }
LABEL_21:
    v30 += v31;
    if (!--v29)
    {
      swift_bridgeObjectRelease_n();
      v20 = 0;
      goto LABEL_31;
    }
  }
  if (!v39)
    goto LABEL_21;
  v32 = 0;
LABEL_29:
  swift_bridgeObjectRelease_n();

LABEL_30:
  v20 = 1;
LABEL_31:
  v9 = v38;
LABEL_32:
  outlined destroy of Shape((uint64_t)v9);
  return v20;
}

uint64_t ShapeStyleEditingController.currentStrokeWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _QWORD v19[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (v8 = *(_QWORD *)(v7 + 8),
          ObjectType = swift_getObjectType(),
          v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8),
          v11 = swift_unknownObjectRelease(),
          v10))
    {
      v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x428))(v11);

      v6 = v10;
    }
    else
    {
      v12 = MEMORY[0x1E0DEE9D8];
    }

    v13 = *(_QWORD *)(v12 + 16);
    v14 = type metadata accessor for Shape();
    v15 = *(_QWORD *)(v14 - 8);
    if (v13)
    {
      outlined init with copy of Shape(v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v4);
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v4, v16, 1, v14);
    swift_bridgeObjectRelease();
    type metadata accessor for Shape();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, v14) != 1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      v17 = *(double *)&v19[1];
      outlined destroy of Shape((uint64_t)v4);
      goto LABEL_14;
    }
    outlined destroy of Shape?((uint64_t)v4);
  }
  if (one-time initialization token for shapeDefaultStrokeWidth != -1)
    goto LABEL_21;
  while (1)
  {
    v17 = *(double *)&static UIConstants.shapeDefaultStrokeWidth;
LABEL_14:
    if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    if (v17 <= -9.22337204e18)
      goto LABEL_19;
    if (v17 < 9.22337204e18)
      return (uint64_t)v17;
LABEL_20:
    __break(1u);
LABEL_21:
    swift_once();
  }
}

uint64_t ShapeStyleEditingController.hasMultipleStrokeWidths.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v34;
  double v35;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  v11 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (v14 = *(_QWORD *)(v13 + 8),
          ObjectType = swift_getObjectType(),
          v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14),
          v17 = swift_unknownObjectRelease(),
          v16))
    {
      v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x428))(v17);

      v12 = v16;
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }

    if (*(_QWORD *)(v18 + 16))
    {
      outlined init with copy of Shape(v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v19, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      goto LABEL_11;
    outlined init with take of Shape((uint64_t)v4, (uint64_t)v9);
    v21 = MEMORY[0x1DF0E666C](v10);
    if (v21)
    {
      v22 = (void *)v21;
      v23 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x1DF0E666C](v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
        && (v24 = *(_QWORD *)(v23 + 8),
            v25 = swift_getObjectType(),
            v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24),
            v27 = swift_unknownObjectRelease(),
            v26))
      {
        v28 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x428))(v27);

        v22 = v26;
      }
      else
      {
        v28 = MEMORY[0x1E0DEE9D8];
      }

      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        v20 = 0;
        goto LABEL_26;
      }
      v30 = v28 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v31 = *(_QWORD *)(v6 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        v32 = v35;
        CRRegister.wrappedValue.getter();
        if (v32 != v35)
          break;
        v30 += v31;
        if (!--v29)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    v20 = 1;
LABEL_26:
    outlined destroy of Shape((uint64_t)v9);
    return v20;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_11:
  outlined destroy of Shape?((uint64_t)v4);
  return 0;
}

id ShapeStyleEditingController.currentFillColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD v20[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  v7 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v8 = *(_QWORD *)(v7 + 8),
        ObjectType = swift_getObjectType(),
        v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8),
        v11 = swift_unknownObjectRelease(),
        v10))
  {
    v12 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x428))(v11);

    v6 = v10;
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }

  v13 = *(_QWORD *)(v12 + 16);
  v14 = type metadata accessor for Shape();
  v15 = *(_QWORD *)(v14 - 8);
  if (v13)
  {
    outlined init with copy of Shape(v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v4);
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v4, v16, 1, v14);
  swift_bridgeObjectRelease();
  type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, v14) == 1)
  {
    outlined destroy of Shape?((uint64_t)v4);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.getter();
  v17 = (void *)v20[1];
  outlined destroy of Shape((uint64_t)v4);
  if (!v17)
    return 0;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v17);

  return v18;
}

uint64_t ShapeStyleEditingController.hasMultipleFillColors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  char v35;
  uint64_t v37;
  char *v38;
  void *v39;
  void *v40;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  v11 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (!v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_11:
    outlined destroy of Shape?((uint64_t)v4);
    return 0;
  }
  v12 = (void *)v11;
  v13 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v14 = *(_QWORD *)(v13 + 8),
        ObjectType = swift_getObjectType(),
        v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14),
        v17 = swift_unknownObjectRelease(),
        v16))
  {
    v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x428))(v17);

    v12 = v16;
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
  }

  if (*(_QWORD *)(v18 + 16))
  {
    outlined init with copy of Shape(v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v19, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    goto LABEL_11;
  outlined init with take of Shape((uint64_t)v4, (uint64_t)v9);
  v21 = MEMORY[0x1DF0E666C](v10);
  if (!v21)
  {
    v20 = 1;
    goto LABEL_32;
  }
  v22 = (void *)v21;
  v23 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v24 = *(_QWORD *)(v23 + 8),
        v25 = swift_getObjectType(),
        v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24),
        v27 = swift_unknownObjectRelease(),
        v26))
  {
    v28 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x428))(v27);

    v22 = v26;
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }

  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
    swift_bridgeObjectRelease();
    v20 = 0;
    goto LABEL_32;
  }
  v30 = v28 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v37 = v28;
  v38 = v9;
  v31 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    v32 = v40;
    CRRegister.wrappedValue.getter();
    v33 = v39;
    if (!v32)
      break;
    if (!v39)
      goto LABEL_29;
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v34 = v32;
    v35 = static _CFObject.== infix(_:_:)();

    if ((v35 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_30;
    }
LABEL_21:
    v30 += v31;
    if (!--v29)
    {
      swift_bridgeObjectRelease_n();
      v20 = 0;
      goto LABEL_31;
    }
  }
  if (!v39)
    goto LABEL_21;
  v32 = 0;
LABEL_29:
  swift_bridgeObjectRelease_n();

LABEL_30:
  v20 = 1;
LABEL_31:
  v9 = v38;
LABEL_32:
  outlined destroy of Shape((uint64_t)v9);
  return v20;
}

uint64_t ShapeStyleEditingController.hasMultipleOpacities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v34;
  double v35;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
  v11 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v11 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (v14 = *(_QWORD *)(v13 + 8),
          ObjectType = swift_getObjectType(),
          v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(ObjectType, v14),
          v17 = swift_unknownObjectRelease(),
          v16))
    {
      v18 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x428))(v17);

      v12 = v16;
    }
    else
    {
      v18 = MEMORY[0x1E0DEE9D8];
    }

    if (*(_QWORD *)(v18 + 16))
    {
      outlined init with copy of Shape(v18 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v4);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v19, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      goto LABEL_11;
    outlined init with take of Shape((uint64_t)v4, (uint64_t)v9);
    v21 = MEMORY[0x1DF0E666C](v10);
    if (v21)
    {
      v22 = (void *)v21;
      v23 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x1DF0E666C](v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
        && (v24 = *(_QWORD *)(v23 + 8),
            v25 = swift_getObjectType(),
            v26 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v25, v24),
            v27 = swift_unknownObjectRelease(),
            v26))
      {
        v28 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x428))(v27);

        v22 = v26;
      }
      else
      {
        v28 = MEMORY[0x1E0DEE9D8];
      }

      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        v20 = 0;
        goto LABEL_26;
      }
      v30 = v28 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v31 = *(_QWORD *)(v6 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        v32 = v35;
        CRRegister.wrappedValue.getter();
        if (v32 != v35)
          break;
        v30 += v31;
        if (!--v29)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    v20 = 1;
LABEL_26:
    outlined destroy of Shape((uint64_t)v9);
    return v20;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_11:
  outlined destroy of Shape?((uint64_t)v4);
  return 0;
}

Swift::Void __swiftcall ShapeStyleEditingController.changeStrokeColor(_:)(UIColor_optional a1)
{
  uint64_t v1;
  Class isa;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  CGColor *v14;
  CGColor *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  isa = a1.value.super.isa;
  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller, *(_QWORD *)&a1.is_nil);
  if (!v3)
    goto LABEL_10;
  v4 = (void *)v3;
  v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (v6 = *(_QWORD *)(v5 + 8),
        ObjectType = swift_getObjectType(),
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        !v8))
  {

LABEL_10:
    ShapeStyleEditingController.updateUIStrokeColor()();
    ShapeStyleEditingController.updateUIStrokeWidth()();
    return;
  }
  v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *((_BYTE *)v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v10 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v10)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x430))(v16, *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
    v11 = v17;
    v12 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if (isa)
    {
      v13 = isa;
      Color.init(cgColor:)((CGColor *)-[objc_class CGColor](v13, sel_CGColor), &v15);

      v14 = v15;
    }
    else
    {
      v14 = 0;
    }
    v15 = v14;
    (*(void (**)(CGColor **, uint64_t, uint64_t))(v12 + 112))(&v15, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *((_BYTE *)v4 + v9) = 0;

    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIStrokeWidth()()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  char *v6;
  void *v7;
  char **v8;
  id v9;
  uint64_t v10;
  id v11;
  objc_super v12;
  objc_super v13;

  v1 = ShapeStyleEditingController.hasMultipleStrokeWidths.getter();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  v3 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl;
  v11 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl);
  if ((v1 & 1) != 0)
  {
    ShapeEditingControl.setButtonMultiSelectBackground()();

    v4 = *(void **)(v2 + v3);
    v5 = (objc_class *)type metadata accessor for ShapeEditingControl();
    v13.receiver = v4;
    v13.super_class = v5;
    v6 = v4;
    objc_msgSendSuper2(&v13, sel_setUserInteractionEnabled_, 1);
    v12.receiver = v6;
    v12.super_class = v5;
    LODWORD(v5) = objc_msgSendSuper2(&v12, sel_isUserInteractionEnabled);
    v7 = (void *)objc_opt_self();
    v8 = &selRef_secondaryLabelColor;
    if (!(_DWORD)v5)
      v8 = &selRef_quaternaryLabelColor;
    v9 = objc_msgSend(v7, *v8);
    objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button], sel_setTitleColor_forState_, v9, 0);

  }
  else
  {
    v10 = ShapeStyleEditingController.currentStrokeWidth.getter();
    ShapeEditingControl.setButtonValue(_:isPercent:)((float)v10, 0);

  }
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIStrokeColor()()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = ShapeStyleEditingController.currentStrokeColor.getter();
  if (v2)
  {
    v12 = v2;
    v3 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider])();
    if (v3)
    {
      v4 = (void *)v3;
      ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
      v5 = (void *)static PKInkingTool.convertColor(_:from:to:)();
      v6 = objc_msgSend(v4, sel_traitCollection);
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v1;
      *(_QWORD *)(v7 + 24) = v5;
      v8 = swift_allocObject();
      *(_QWORD *)(v8 + 16) = partial apply for closure #1 in ShapeStyleEditingController.updateUIStrokeColor();
      *(_QWORD *)(v8 + 24) = v7;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      aBlock[5] = v8;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_14;
      v9 = _Block_copy(aBlock);
      v10 = v1;
      v11 = v5;
      swift_retain();
      swift_release();
      objc_msgSend(v6, sel_performAsCurrentTraitCollection_, v9);

      _Block_release(v9);
      LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v4 & 1) != 0)
        __break(1u);
    }
    else
    {

    }
  }
}

void closure #1 in ShapeStyleEditingController.updateUIStrokeColor()(uint64_t a1, objc_class *a2)
{
  uint64_t v3;
  id v4;
  Swift::Bool v5;
  Swift::Bool v6;
  id v7;
  UIColor_optional v8;
  UIColor_optional v9;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  v4 = *(id *)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeColorControl);
  v8.is_nil = ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1;
  v8.value.super.isa = a2;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v8, v5);

  v7 = *(id *)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows);
  v9.is_nil = ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1;
  v9.value.super.isa = a2;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v9, v6);

}

Swift::Void __swiftcall ShapeStyleEditingController.changeFillColor(_:)(UIColor_optional a1)
{
  uint64_t v1;
  Class isa;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  CGColor *v14;
  CGColor *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  isa = a1.value.super.isa;
  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller, *(_QWORD *)&a1.is_nil);
  if (!v3)
    goto LABEL_10;
  v4 = (void *)v3;
  v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (v6 = *(_QWORD *)(v5 + 8),
        ObjectType = swift_getObjectType(),
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        !v8))
  {

LABEL_10:
    ShapeStyleEditingController.updateUIFillColor()();
    return;
  }
  v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *((_BYTE *)v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v10 = *(_QWORD *)((char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v10)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x430))(v16, *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v10 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
    v11 = v17;
    v12 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    if (isa)
    {
      v13 = isa;
      Color.init(cgColor:)((CGColor *)-[objc_class CGColor](v13, sel_CGColor), &v15);

      v14 = v15;
    }
    else
    {
      v14 = 0;
    }
    v15 = v14;
    (*(void (**)(CGColor **, uint64_t, uint64_t))(v12 + 88))(&v15, v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    *((_BYTE *)v4 + v9) = 0;

    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall ShapeStyleEditingController.updateUIFillColor()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  void *v13;
  _QWORD aBlock[6];
  void *v15;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider])();
  if (v2)
  {
    v3 = (void *)v2;
    v15 = 0;
    v4 = ShapeStyleEditingController.currentFillColor.getter();
    if (v4)
    {
      v5 = v4;
      ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
      v6 = static PKInkingTool.convertColor(_:from:to:)();

      v15 = (void *)v6;
    }
    v7 = objc_msgSend(v3, sel_traitCollection);
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    *(_QWORD *)(v8 + 24) = &v15;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for closure #1 in ShapeStyleEditingController.updateUIFillColor();
    *(_QWORD *)(v9 + 24) = v8;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_1;
    v10 = _Block_copy(aBlock);
    v11 = v1;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performAsCurrentTraitCollection_, v10);

    _Block_release(v10);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v13 = v15;
      swift_release();

    }
  }
}

void closure #1 in ShapeStyleEditingController.updateUIFillColor()(uint64_t a1, id *a2)
{
  uint64_t v3;
  void *v4;
  objc_class *v5;
  id v6;
  id v7;
  Swift::Bool v8;
  void *v9;
  id v10;
  id v11;
  Swift::Bool v12;
  id v13;
  UIColor_optional v14;
  UIColor_optional v15;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  v4 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl);
  v5 = (objc_class *)*a2;
  v6 = *a2;
  v7 = v4;
  v14.is_nil = ShapeStyleEditingController.hasMultipleFillColors.getter() & 1;
  v14.value.super.isa = v5;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v14, v8);

  v9 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows);
  v10 = *a2;
  v13 = v10;
  v11 = v9;
  v15.is_nil = ShapeStyleEditingController.hasMultipleFillColors.getter() & 1;
  v15.value.super.isa = (Class)v10;
  ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(v15, v12);

}

uint64_t ShapeStyleEditingController.canvasUserInterfaceStyle.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  id v9;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      v5 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType();
      v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      swift_unknownObjectRelease();
      if (v7)
      {
LABEL_7:
        v8 = objc_msgSend(v7, sel_traitCollection);
        v9 = objc_msgSend(v8, sel_userInterfaceStyle);

        return (uint64_t)v9;
      }
    }
    else
    {

    }
  }
  v7 = (void *)(*(uint64_t (**)(void))(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v7)
    goto LABEL_7;
  return 1;
}

Swift::Void __swiftcall ShapeStyleEditingController.didTapStrokeColorButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t ObjectType;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  id v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  id v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v77 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v79 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v68 - v10;
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v78 = *(_QWORD *)(v76 - 8);
  v13 = MEMORY[0x1E0C80A78](v76, v12);
  v75 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)(*(uint64_t (**)(uint64_t))(v0
                                                   + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))(v13);
  if (v15)
  {
    v73 = v15;
    v72 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
    objc_msgSend(v72, sel_setModalPresentationStyle_, 7);
    v71 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
    v16 = MEMORY[0x1DF0E666C]();
    if (v16)
    {
      v17 = v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      v18 = (void *)v16;
      if (MEMORY[0x1DF0E666C](v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        v70 = v18;
        v19 = *(_QWORD *)(v17 + 8);
        ObjectType = swift_getObjectType();
        v21 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(ObjectType, v19);
        swift_unknownObjectRelease();
        if (v21)
        {
          v69 = v0;
          v68 = v21;
          v22 = *(void **)&v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v22)
          {
            __break(1u);
            return;
          }
          v23 = v22;
          v24 = swift_bridgeObjectRetain();
          v25 = specialized Sequence.compactMap<A>(_:)(v24, (uint64_t)v23);

          swift_bridgeObjectRelease();
          if (v25 >> 62)
            goto LABEL_27;
          v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          while (v26)
          {
            v74 = v25 & 0xC000000000000001;
            for (i = 4; ; ++i)
            {
              v28 = v74 ? (id)MEMORY[0x1DF0E4D64](i - 4, v25) : *(id *)(v25 + 8 * i);
              v29 = v28;
              v30 = i - 3;
              if (__OFADD__(i - 4, 1))
                break;
              type metadata accessor for ShapeView();
              v31 = (_QWORD *)swift_dynamicCastClass();
              if (!v31)
              {

                goto LABEL_18;
              }
              v32 = (char *)v31 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v31) + 0x380);
              swift_beginAccess();
              v33 = v78;
              v34 = v75;
              v35 = v32;
              v36 = v76;
              (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v35, v76);
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              Capsule<>.root.getter();
              (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v36);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              v37 = v77;
              CRRegister.wrappedValue.getter();
              v38 = v5;
              v39 = v81;
              TaggedValue_9.tagged3.getter();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v39);
              LOBYTE(v34) = v83;
              v40 = v79;
              outlined init with copy of Shape((uint64_t)v11, v79);
              if ((v34 & 1) != 0)
              {
                type metadata accessor for ShapeSecondaryProperties();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
                CRRegister.wrappedValue.getter();
                v41 = v82;
                outlined destroy of Shape(v40);
                outlined destroy of Shape((uint64_t)v11);

                v5 = v38;
                if (!v41)
                {

                  swift_bridgeObjectRelease();
                  v26 = 1;
                  goto LABEL_29;
                }
LABEL_18:
                if (v30 == v26)
                  goto LABEL_25;
                continue;
              }
              outlined destroy of Shape(v40);
              outlined destroy of Shape((uint64_t)v11);

              v5 = v38;
              if (v30 == v26)
              {
LABEL_25:

                swift_bridgeObjectRelease();
                v26 = 0;
                goto LABEL_29;
              }
            }
            __break(1u);
LABEL_27:
            swift_bridgeObjectRetain();
            v26 = _CocoaArrayWrapper.endIndex.getter();
          }

          swift_bridgeObjectRelease();
LABEL_29:

          swift_bridgeObjectRelease();
          v1 = v69;
        }
        else
        {

          v26 = 0;
        }
      }
      else
      {

        v26 = 0;
      }
    }
    else
    {
      v26 = 1;
    }
    v42 = v72;
    v43 = v71;
    objc_msgSend(v72, sel__setAllowsNoColor_, v26, v68);
    v44 = ShapeStyleEditingController.currentStrokeColor.getter();
    if (!v44)
      v44 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_defaultStrokeColor);
    v45 = v44;
    ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
    v46 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    objc_msgSend(v42, sel_setSelectedColor_, v46);
    v47 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v47)
    {
      v48 = v47;
      objc_msgSend(v47, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeColorControl)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button));

    }
    v49 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v49)
    {
      v50 = v49;
      objc_msgSend(v49, sel_setDelegate_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeColorControl));

    }
    v51 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v51)
    {
      v52 = v51;
      objc_msgSend(v51, sel__setIgnoresKeyboardNotifications_, 1);

    }
    v53 = MEMORY[0x1DF0E666C](v43);
    if (v53)
    {
      v54 = (void *)v53;
      v55 = CanvasElementController.elementControllerToolPicker.getter();
      if (v55)
      {
        v56 = v55;
        v57 = objc_msgSend(v55, sel__popoverPresentationConfiguration);

        if (v57)
        {
          objc_msgSend(v57, sel_layoutSceneMargins);
          v59 = v58;
          v61 = v60;
          v63 = v62;
          v65 = v64;
          swift_unknownObjectRelease();
          v66 = objc_msgSend(v42, sel_popoverPresentationController);
          objc_msgSend(v66, sel_setPopoverLayoutMargins_, v59, v61, v63, v65);

          v54 = v66;
        }
      }

    }
    objc_msgSend(v42, sel_setDelegate_, v1);
    objc_msgSend(v42, sel__setShouldUseDarkGridInDarkMode_, 1);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_editingAttribute) = 0;
    v67 = v73;
    objc_msgSend(v73, sel_presentViewController_animated_completion_, v42, 1, 0);

  }
}

void ShapeStyleEditingController.didTapFillColorButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    v3 = (void *)v2;
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
    objc_msgSend(v26, sel_setModalPresentationStyle_, 7);
    objc_msgSend(v26, sel__setAllowsNoColor_, 1);
    v4 = ShapeStyleEditingController.currentFillColor.getter();
    if (!v4)
      v4 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_defaultFillColor);
    v5 = v4;
    ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
    v6 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    objc_msgSend(v26, sel_setSelectedColor_, v6);
    v7 = objc_msgSend(v26, sel_popoverPresentationController);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button));

    }
    v9 = objc_msgSend(v26, sel_popoverPresentationController);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, sel_setDelegate_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_fillColorControl));

    }
    v11 = objc_msgSend(v26, sel_popoverPresentationController);
    objc_msgSend(v11, sel__setIgnoresKeyboardNotifications_, 1);

    v12 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = CanvasElementController.elementControllerToolPicker.getter();
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v14, sel__popoverPresentationConfiguration);

        if (v16)
        {
          objc_msgSend(v16, sel_layoutSceneMargins);
          v18 = v17;
          v20 = v19;
          v22 = v21;
          v24 = v23;
          swift_unknownObjectRelease();
          v25 = objc_msgSend(v26, sel_popoverPresentationController);
          objc_msgSend(v25, sel_setPopoverLayoutMargins_, v18, v20, v22, v24);

          v13 = v25;
        }
      }

    }
    objc_msgSend(v26, sel_setDelegate_, v1);
    objc_msgSend(v26, sel__setShouldUseDarkGridInDarkMode_, 1);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_editingAttribute) = 1;
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v26, 1, 0);

  }
}

void ShapeStyleEditingController.didTapStrokeWidthButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = ShapeStyleEditingController.currentStrokeWidth.getter();
    if (one-time initialization token for shapeStrokeWidthUnitString != -1)
      swift_once();
    v5 = static UIConstants.shapeStrokeWidthUnitString;
    objc_allocWithZone((Class)type metadata accessor for StrokeWidthViewController());
    swift_bridgeObjectRetain();
    v26 = ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(1, 30, v4, v5, *((uint64_t *)&v5 + 1), 10.0);
    swift_unknownObjectWeakAssign();
    objc_msgSend(v26, sel_setModalPresentationStyle_, 7);
    v6 = objc_msgSend(v26, sel_popoverPresentationController);
    v7 = v6;
    if (v6)
    {
      objc_msgSend(v6, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button));

    }
    v8 = objc_msgSend(v26, sel_popoverPresentationController);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, sel_setDelegate_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_strokeWidthControl));

    }
    v10 = objc_msgSend(v26, sel_popoverPresentationController);
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, sel__setIgnoresKeyboardNotifications_, 1);

    }
    v12 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = CanvasElementController.elementControllerToolPicker.getter();
      if (v14)
      {
        v15 = v14;
        v16 = objc_msgSend(v14, sel__popoverPresentationConfiguration);

        if (v16)
        {
          objc_msgSend(v16, sel_layoutSceneMargins);
          v18 = v17;
          v20 = v19;
          v22 = v21;
          v24 = v23;
          swift_unknownObjectRelease();
          v25 = objc_msgSend(v26, sel_popoverPresentationController);
          objc_msgSend(v25, sel_setPopoverLayoutMargins_, v18, v20, v22, v24);

          v13 = v25;
        }
      }

    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v26, 1, 0);

  }
}

void ShapeStyleEditingController.didStartChangingOpacitySlider()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  id v15;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v1)
  {
    v15 = (id)v1;
    v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (!MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      goto LABEL_16;
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (!v5)
      goto LABEL_16;
    v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v6)
    {
LABEL_18:
      __break(1u);
      return;
    }
    v7 = v6;
    v8 = swift_bridgeObjectRetain();
    v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)v7);

    swift_bridgeObjectRelease();
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10)
        goto LABEL_7;
    }
    else
    {
      v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v10)
      {
LABEL_7:
        if (v10 >= 1)
        {
          v11 = 0;
          v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          do
          {
            if ((v9 & 0xC000000000000001) != 0)
              v13 = (_QWORD *)MEMORY[0x1DF0E4D64](v11, v9);
            else
              v13 = *(id *)(v9 + 8 * v11 + 32);
            v14 = v13;
            ++v11;
            (*(void (**)(void))((*v12 & *v13) + 0x1E8))();

          }
          while (v10 != v11);
          goto LABEL_15;
        }
        __break(1u);
        goto LABEL_18;
      }
    }
LABEL_15:

    swift_bridgeObjectRelease();
LABEL_16:

  }
}

void ShapeStyleEditingController.didChangeOpacitySlider()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  Swift::Float v5;
  char v6;
  id v7;
  uint64_t v8;
  float v9;
  void *v10;
  id v11;
  char v12;
  void *v13;
  uint64_t v14;
  id v15;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_isCompactUI) == 1)
  {
    v3 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider), sel_value);
    v5 = v4;
    v6 = ShapeStyleEditingController.hasMultipleOpacities.getter();
    v7 = *(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl);
    if ((v6 & 1) != 0)
      ShapeEditingControl.setButtonMultiSelectBackground()();
    else
      ShapeEditingControl.setButtonValue(_:isPercent:)(v5, 1);

    v10 = *(void **)(v2 + v3);
  }
  else
  {
    v8 = OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_opacityControl;
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_opacityControl), sel_value);
    v5 = v9;
    v10 = *(void **)(v2 + v8);
  }
  v11 = v10;
  v12 = ShapeStyleEditingController.hasMultipleOpacities.getter();
  v13 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(v12 & 1);
  objc_msgSend(v11, sel_setThumbImage_forState_, v13, 0);

  v14 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v14)
  {
    v15 = (id)v14;
    CanvasElementController.changeSelectedShapesOpacity(_:)(v5);

  }
}

void ShapeStyleEditingController.lineTypeControlValueChanged()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v1)
  {
    v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    v8 = (_BYTE *)v1;
    if (MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      && (v3 = *(_QWORD *)(v2 + 8),
          ObjectType = swift_getObjectType(),
          v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3),
          swift_unknownObjectRelease(),
          v5))
    {
      v7 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
      v8[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 1;
      MEMORY[0x1E0C80A78](v8, v6);
      (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x468))(0, 0, partial apply for closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:));
      v8[v7] = 0;

    }
    else
    {

    }
  }
}

id ShapeStyleEditingController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeStyleEditingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ShapeStyleEditingController()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ShapeStyleEditingController.EditingAttribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDB4D0D8 + 4 * byte_1DDF32B35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDB4D10C + 4 * asc_1DDF32B30[v4]))();
}

uint64_t sub_1DDB4D10C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB4D114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB4D11CLL);
  return result;
}

uint64_t sub_1DDB4D128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB4D130);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDB4D134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB4D13C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ShapeStyleEditingController.EditingAttribute()
{
  return &unk_1EA83D148;
}

unint64_t lazy protocol witness table accessor for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute;
  if (!lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeStyleEditingController.EditingAttribute, &unk_1EA83D148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeStyleEditingController.EditingAttribute and conformance ShapeStyleEditingController.EditingAttribute);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
}

uint64_t sub_1DDB4D1C0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeStyleEditingController.updateUIFillColor()()
{
  uint64_t v0;

  closure #1 in ShapeStyleEditingController.updateUIFillColor()(*(_QWORD *)(v0 + 16), *(id **)(v0 + 24));
}

uint64_t sub_1DDB4D1EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1DDB4D21C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeStyleEditingController.updateUIStrokeColor()()
{
  uint64_t v0;

  closure #1 in ShapeStyleEditingController.updateUIStrokeColor()(*(_QWORD *)(v0 + 16), *(objc_class **)(v0 + 24));
}

uint64_t sub_1DDB4D250()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of Shape?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of Shape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Shape();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized ShapeStyleEditingController.didTapArrowColorButton(forEvent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t ObjectType;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  id v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  id v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  id v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v77 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Shape();
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v79 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v68 - v10;
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v78 = *(_QWORD *)(v76 - 8);
  v13 = MEMORY[0x1E0C80A78](v76, v12);
  v75 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)(*(uint64_t (**)(uint64_t))(v0
                                                   + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))(v13);
  if (v15)
  {
    v73 = v15;
    v72 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
    objc_msgSend(v72, sel_setModalPresentationStyle_, 7);
    v71 = v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller;
    v16 = MEMORY[0x1DF0E666C]();
    if (v16)
    {
      v17 = v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      v18 = (void *)v16;
      if (MEMORY[0x1DF0E666C](v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        v70 = v18;
        v19 = *(_QWORD *)(v17 + 8);
        ObjectType = swift_getObjectType();
        v21 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(ObjectType, v19);
        swift_unknownObjectRelease();
        if (v21)
        {
          v69 = v0;
          v68 = v21;
          v22 = *(void **)&v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v22)
          {
            __break(1u);
            return;
          }
          v23 = v22;
          v24 = swift_bridgeObjectRetain();
          v25 = specialized Sequence.compactMap<A>(_:)(v24, (uint64_t)v23);

          swift_bridgeObjectRelease();
          if (v25 >> 62)
            goto LABEL_27;
          v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          while (v26)
          {
            v74 = v25 & 0xC000000000000001;
            for (i = 4; ; ++i)
            {
              v28 = v74 ? (id)MEMORY[0x1DF0E4D64](i - 4, v25) : *(id *)(v25 + 8 * i);
              v29 = v28;
              v30 = i - 3;
              if (__OFADD__(i - 4, 1))
                break;
              type metadata accessor for ShapeView();
              v31 = (_QWORD *)swift_dynamicCastClass();
              if (!v31)
              {

                goto LABEL_18;
              }
              v32 = (char *)v31 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v31) + 0x380);
              swift_beginAccess();
              v33 = v78;
              v34 = v75;
              v35 = v32;
              v36 = v76;
              (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v75, v35, v76);
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              Capsule<>.root.getter();
              (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v36);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
              v37 = v77;
              CRRegister.wrappedValue.getter();
              v38 = v5;
              v39 = v81;
              TaggedValue_9.tagged3.getter();
              (*(void (**)(char *, uint64_t))(v80 + 8))(v37, v39);
              LOBYTE(v34) = v83;
              v40 = v79;
              outlined init with copy of Shape((uint64_t)v11, v79);
              if ((v34 & 1) != 0)
              {
                type metadata accessor for ShapeSecondaryProperties();
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
                CRRegister.wrappedValue.getter();
                v41 = v82;
                outlined destroy of Shape(v40);
                outlined destroy of Shape((uint64_t)v11);

                v5 = v38;
                if (!v41)
                {

                  swift_bridgeObjectRelease();
                  v26 = 1;
                  goto LABEL_29;
                }
LABEL_18:
                if (v30 == v26)
                  goto LABEL_25;
                continue;
              }
              outlined destroy of Shape(v40);
              outlined destroy of Shape((uint64_t)v11);

              v5 = v38;
              if (v30 == v26)
              {
LABEL_25:

                swift_bridgeObjectRelease();
                v26 = 0;
                goto LABEL_29;
              }
            }
            __break(1u);
LABEL_27:
            swift_bridgeObjectRetain();
            v26 = _CocoaArrayWrapper.endIndex.getter();
          }

          swift_bridgeObjectRelease();
LABEL_29:

          swift_bridgeObjectRelease();
          v1 = v69;
        }
        else
        {

          v26 = 0;
        }
      }
      else
      {

        v26 = 0;
      }
    }
    else
    {
      v26 = 1;
    }
    v42 = v72;
    v43 = v71;
    objc_msgSend(v72, sel__setAllowsNoColor_, v26, v68);
    v44 = ShapeStyleEditingController.currentStrokeColor.getter();
    if (!v44)
      v44 = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_defaultStrokeColor);
    v45 = v44;
    ShapeStyleEditingController.canvasUserInterfaceStyle.getter();
    v46 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    objc_msgSend(v42, sel_setSelectedColor_, v46);
    v47 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v47)
    {
      v48 = v47;
      objc_msgSend(v47, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1+ OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows)+ OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button));

    }
    v49 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v49)
    {
      v50 = v49;
      objc_msgSend(v49, sel_setDelegate_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView)+ OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactColorControlForArrows));

    }
    v51 = objc_msgSend(v42, sel_popoverPresentationController);
    if (v51)
    {
      v52 = v51;
      objc_msgSend(v51, sel__setIgnoresKeyboardNotifications_, 1);

    }
    v53 = MEMORY[0x1DF0E666C](v43);
    if (v53)
    {
      v54 = (void *)v53;
      v55 = CanvasElementController.elementControllerToolPicker.getter();
      if (v55)
      {
        v56 = v55;
        v57 = objc_msgSend(v55, sel__popoverPresentationConfiguration);

        if (v57)
        {
          objc_msgSend(v57, sel_layoutSceneMargins);
          v59 = v58;
          v61 = v60;
          v63 = v62;
          v65 = v64;
          swift_unknownObjectRelease();
          v66 = objc_msgSend(v42, sel_popoverPresentationController);
          objc_msgSend(v66, sel_setPopoverLayoutMargins_, v59, v61, v63, v65);

          v54 = v66;
        }
      }

    }
    objc_msgSend(v42, sel_setDelegate_, v1);
    objc_msgSend(v42, sel__setShouldUseDarkGridInDarkMode_, 1);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_editingAttribute) = 0;
    v67 = v73;
    objc_msgSend(v73, sel_presentViewController_animated_completion_, v42, 1, 0);

  }
}

void specialized ShapeStyleEditingController.didTapCompactOpacityButton(forEvent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  char *v30;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_viewControllerProvider))();
  if (v2)
  {
    v3 = (void *)v2;
    type metadata accessor for CompactShapeOpacityController();
    v30 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_shapeStyleEditingView);
    v5 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacitySlider);
    v6 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider];
    *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider] = v5;
    v7 = v5;

    objc_msgSend(v30, sel_setModalPresentationStyle_, 7);
    v8 = objc_msgSend(v30, sel_popoverPresentationController);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, sel_setSourceView_, *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl));

    }
    v10 = objc_msgSend(v30, sel_popoverPresentationController);
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v10, sel_setPermittedArrowDirections_, 2);

    }
    v12 = objc_msgSend(v30, sel_popoverPresentationController);
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, sel_setDelegate_, *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit21ShapeStyleEditingView_compactOpacityControl));

    }
    v14 = objc_msgSend(v30, sel_popoverPresentationController);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, sel__setIgnoresKeyboardNotifications_, 1);

    }
    v16 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
    if (v16)
    {
      v17 = (void *)v16;
      v18 = CanvasElementController.elementControllerToolPicker.getter();
      if (v18)
      {
        v19 = v18;
        v20 = objc_msgSend(v18, sel__popoverPresentationConfiguration);

        if (v20)
        {
          objc_msgSend(v20, sel_layoutSceneMargins);
          v22 = v21;
          v24 = v23;
          v26 = v25;
          v28 = v27;
          swift_unknownObjectRelease();
          v29 = objc_msgSend(v30, sel_popoverPresentationController);
          objc_msgSend(v29, sel_setPopoverLayoutMargins_, v22, v24, v26, v28);

          v17 = v29;
        }
      }

    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v30, 1, 0);

  }
}

void ShapeStyleEditingController.didFinishChangingOpacitySlider()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v1)
  {
    v12 = (id)v1;
    v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (!MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
      || (v3 = *(_QWORD *)(v2 + 8),
          ObjectType = swift_getObjectType(),
          v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3),
          swift_unknownObjectRelease(),
          !v5))
    {
      v11 = v12;
      goto LABEL_7;
    }
    v6 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
    *((_BYTE *)v12 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
    v7 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v7)
    {
      v8 = v7;
      v9 = swift_bridgeObjectRetain();
      v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);

      swift_bridgeObjectRelease();
      specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v10);
      swift_bridgeObjectRelease();
      *((_BYTE *)v12 + v6) = 0;

      v11 = (void *)v5;
LABEL_7:

      return;
    }
    __break(1u);
  }
}

void specialized ShapeStyleEditingController.valueEditingViewController(_:didChangeValue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  Class isa;
  uint64_t v6;
  void *v7;
  UIColor_optional v8;

  v2 = v1;
  v4 = ShapeStyleEditingController.currentStrokeColor.getter();

  if (!v4 && (ShapeStyleEditingController.hasMultipleStrokeColors.getter() & 1) == 0)
  {
    v8.value.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_blackColor);
    isa = v8.value.super.isa;
    ShapeStyleEditingController.changeStrokeColor(_:)(v8);

  }
  v6 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit27ShapeStyleEditingController_controller);
  if (v6)
  {
    v7 = (void *)v6;
    CanvasElementController.changeSelectedStrokeWidth(_:)((double)a1);

  }
  ShapeStyleEditingController.updateUIStrokeWidth()();
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  uint64_t v17;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v17 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x1DF0E4D64](v5, a1);
        v17 = v3;
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        ++v5;
        v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionItem);
        v16 = &protocol witness table for PKMathRecognitionItem;
        *(_QWORD *)&v14 = v6;
        *(_QWORD *)(v3 + 16) = v8 + 1;
        outlined init with take of FindResult(&v14, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v17 = v3;
        v12 = *(_QWORD *)(v3 + 16);
        v11 = *(_QWORD *)(v3 + 24);
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v3 = v17;
        }
        v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKMathRecognitionItem);
        v16 = &protocol witness table for PKMathRecognitionItem;
        *(_QWORD *)&v14 = v13;
        *(_QWORD *)(v3 + 16) = v12 + 1;
        outlined init with take of FindResult(&v14, v3 + 40 * v12 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v16 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v16;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x1DF0E4D64](v5, a1);
        v16 = v3;
        v8 = *(_QWORD *)(v3 + 16);
        v7 = *(_QWORD *)(v3 + 24);
        if (v8 >= v7 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          v3 = v16;
        }
        ++v5;
        v14 = type metadata accessor for DrawingFindResult();
        v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, (uint64_t (*)(uint64_t))type metadata accessor for DrawingFindResult, (uint64_t)&protocol conformance descriptor for DrawingFindResult);
        *(_QWORD *)&v13 = v6;
        *(_QWORD *)(v3 + 16) = v8 + 1;
        outlined init with take of FindResult(&v13, v3 + 40 * v8 + 32);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (uint64_t *)(a1 + 32);
      do
      {
        v10 = *v9;
        v16 = v3;
        v12 = *(_QWORD *)(v3 + 16);
        v11 = *(_QWORD *)(v3 + 24);
        swift_retain();
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v3 = v16;
        }
        v14 = type metadata accessor for DrawingFindResult();
        v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, (uint64_t (*)(uint64_t))type metadata accessor for DrawingFindResult, (uint64_t)&protocol conformance descriptor for DrawingFindResult);
        *(_QWORD *)&v13 = v10;
        *(_QWORD *)(v3 + 16) = v12 + 1;
        outlined init with take of FindResult(&v13, v3 + 40 * v12 + 32);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v17 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        MEMORY[0x1DF0E4D64](v5, a1);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_dynamicCast();
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v3 = v17;
        }
        v7 = *(_QWORD *)(v3 + 16);
        v6 = *(_QWORD *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v3 = v17;
        }
        ++v5;
        *(_QWORD *)(v3 + 16) = v7 + 1;
        v8 = v3 + 40 * v7;
        *(_QWORD *)(v8 + 64) = v16;
        *(_OWORD *)(v8 + 32) = v14;
        *(_OWORD *)(v8 + 48) = v15;
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (id *)(a1 + 32);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      do
      {
        v10 = *v9;
        swift_dynamicCast();
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
          v3 = v17;
        }
        v12 = *(_QWORD *)(v3 + 16);
        v11 = *(_QWORD *)(v3 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v3 = v17;
        }
        *(_QWORD *)(v3 + 16) = v12 + 1;
        v13 = v3 + 40 * v12;
        *(_QWORD *)(v13 + 64) = v16;
        *(_OWORD *)(v13 + 32) = v14;
        *(_OWORD *)(v13 + 48) = v15;
        ++v9;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, &demangling cache variable for type metadata for CHMathExpression);
}

{
  return specialized _arrayForceCast<A, B>(_:)(a1, &demangling cache variable for type metadata for CHMathExpressionEvaluationResult);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void **v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = 0;
        do
        {
          v5 = v4 + 1;
          v10 = (void *)MEMORY[0x1DF0E4D64]();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
          v6 = v10;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
          swift_dynamicCast();
          swift_unknownObjectRelease();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v4 = v5;
        }
        while (v2 != v5);
      }
      else
      {
        v7 = (void **)(a1 + 32);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        do
        {
          v8 = *v7++;
          v9 = v8;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
          swift_dynamicCast();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v2;
        }
        while (v2);
      }
      return v11;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = MEMORY[0x1E0DEE9D8];
  if (!v2)
    return v3;
  v15 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v15;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = MEMORY[0x1DF0E4D64](v5, a1);
        v8 = *(_QWORD *)(v15 + 16);
        v7 = *(_QWORD *)(v15 + 24);
        if (v8 >= v7 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        ++v5;
        *(_QWORD *)(v15 + 16) = v8 + 1;
        v9 = v15 + 16 * v8;
        *(_QWORD *)(v9 + 32) = v6;
        *(_QWORD *)(v9 + 40) = &protocol witness table for SynapseLinkItem;
      }
      while (v2 != v5);
    }
    else
    {
      v10 = (id *)(a1 + 32);
      do
      {
        v11 = *(_QWORD *)(v15 + 16);
        v12 = *(_QWORD *)(v15 + 24);
        v13 = *v10;
        if (v11 >= v12 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
        *(_QWORD *)(v15 + 16) = v11 + 1;
        v14 = v15 + 16 * v11;
        *(_QWORD *)(v14 + 32) = v13;
        *(_QWORD *)(v14 + 40) = &protocol witness table for SynapseLinkItem;
        ++v10;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int128 *v4;
  __int128 v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v7 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = (__int128 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = (id)v5;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasUIOverlay);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      swift_dynamicCast();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v14;
    v4 = a1 + 56;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, SearchQueryResult));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (pageIndex: Int, queryResult: SearchQueryResult));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v14;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v14;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = (_QWORD *)(v2 + 40 * v6);
      v7[4] = v9;
      v7[5] = v10;
      v7[6] = v11;
      v7[7] = v12;
      v7[8] = v13;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v15;
  __int128 v16;
  ValueMetadata *v17;
  unint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v19 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v19;
    v4 = (char *)(a1 + 72);
    do
    {
      v5 = (void *)*((_QWORD *)v4 - 5);
      v6 = *((_QWORD *)v4 - 4);
      v7 = *((_QWORD *)v4 - 3);
      v8 = *((_QWORD *)v4 - 2);
      v9 = (void *)*((_QWORD *)v4 - 1);
      v10 = *v4;
      outlined copy of PaperDocumentFindResult.Content(v5, v6, v7, v8, v9, *v4);
      v19 = v2;
      v12 = *(_QWORD *)(v2 + 16);
      v11 = *(_QWORD *)(v2 + 24);
      v15 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v15, 1);
        v2 = v19;
      }
      v17 = &type metadata for PaperDocumentFindResult;
      v18 = lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult();
      v13 = swift_allocObject();
      *(_QWORD *)&v16 = v13;
      *(_QWORD *)(v13 + 16) = v5;
      *(_QWORD *)(v13 + 24) = v6;
      *(_QWORD *)(v13 + 32) = v7;
      *(_QWORD *)(v13 + 40) = v8;
      *(_QWORD *)(v13 + 48) = v9;
      *(_BYTE *)(v13 + 56) = v10;
      *(_QWORD *)(v2 + 16) = v15;
      outlined init with take of FindResult(&v16, v2 + 40 * v12 + 32);
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = type metadata accessor for PKStroke();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v11(v6, v9, v2);
      swift_dynamicCast();
      v8 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v17;
      }
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      outlined init with take of Any(&v16, (_OWORD *)(v8 + 32 * v13 + 32));
      v9 += v10;
      --v7;
    }
    while (v7);
  }
  return v8;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v8 = v17;
    do
    {
      v11(v6, v9, v2);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v17;
      }
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      *(_QWORD *)(v8 + 16) = v13 + 1;
      outlined init with take of Any(&v16, (_OWORD *)(v8 + 32 * v13 + 32));
      v9 += v10;
      --v7;
    }
    while (v7);
  }
  return v8;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE v14[32];
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v9 = a1 + 32;
    v8 = v15;
    do
    {
      outlined init with copy of Any(v9, (uint64_t)v14);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v15;
      }
      v11 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v8 = v15;
      }
      *(_QWORD *)(v8 + 16) = v11 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v11, v6, v2);
      v9 += 32;
      --v7;
    }
    while (v7);
  }
  return v8;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for PKStroke();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v7)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v11(v6, v9, v2);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
      swift_dynamicCast();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      --v7;
    }
    while (v7);
    return v13;
  }
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v5;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(a2);
    v5 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    return a1;
  }
}

void @objc CanvasView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized CanvasView.init(coder:)();
}

uint64_t CanvasView.allowsContentSnapping.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.allowsContentSnapping);
}

uint64_t CanvasView.paperViewController.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = (void *)result;
    type metadata accessor for AnyCanvasElementViewController();
    result = swift_dynamicCastClass();
    if (!result)
    {

      return 0;
    }
  }
  return result;
}

void *CanvasView.canvasScrollView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + direct field offset for CanvasView.canvasScrollView);
  v2 = v1;
  return v1;
}

uint64_t CanvasView.movableAdornmentViews.getter()
{
  uint64_t v0;
  uint64_t v1;

  AnyCanvas.overlays.getter();
  v1 = specialized _arrayForceCast<A, B>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void CanvasView.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  Canvas.editingMode.setter(&v1);
  CanvasView.tiledViewUpdateEditingState()();
}

void (*CanvasView.editingMode.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.editingMode.modify(v3);
  return CanvasView.editingMode.modify;
}

void CanvasView.editingMode.modify(_QWORD *a1, char a2)
{
  void *v3;

  v3 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
    CanvasView.tiledViewUpdateEditingState()();
  free(v3);
}

id CanvasView.drawingPolicy.getter()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (result)
    return objc_msgSend(result, sel_drawingPolicy);
  __break(1u);
  return result;
}

id CanvasView.drawingPolicy.setter(uint64_t a1)
{
  uint64_t v1;
  id result;

  result = *(id *)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result)
    return objc_msgSend(result, sel_setDrawingPolicy_, a1);
  __break(1u);
  return result;
}

void *CanvasView.drawingPolicy.modify(_QWORD *a1)
{
  uint64_t v1;
  void *result;

  a1[1] = v1;
  result = *(void **)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result)
  {
    *a1 = objc_msgSend(result, sel_drawingPolicy);
    return CanvasView.drawingPolicy.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *CanvasView.drawingPolicy.modify(_QWORD *result, char a2)
{
  void *v2;

  v2 = *(void **)(result[1] + direct field offset for CanvasView.canvasTiledView);
  if ((a2 & 1) != 0)
  {
    if (v2)
      return objc_msgSend(v2, sel_setDrawingPolicy_, *result);
    __break(1u);
  }
  if (v2)
    return objc_msgSend(v2, sel_setDrawingPolicy_, *result);
  __break(1u);
  return result;
}

void CanvasView.selectionInteractionDelegate.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for CanvasView.selectionInteractionDelegate);
  *(_QWORD *)(v1 + direct field offset for CanvasView.selectionInteractionDelegate) = a1;

}

uint64_t CanvasView.canvasContentMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for CanvasView.canvasContentMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id CanvasView.canvasContentMode.setter(char *a1)
{
  char *v1;
  char v2;
  char *v3;

  v2 = *a1;
  v3 = &v1[direct field offset for CanvasView.canvasContentMode];
  swift_beginAccess();
  *v3 = v2;
  return objc_msgSend(v1, sel_setNeedsLayout);
}

id (*CanvasView.canvasContentMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasView.canvasContentMode.modify;
}

id CanvasView.canvasContentMode.modify(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 24), sel_setNeedsLayout);
  return result;
}

id CanvasView.toolPickerObserver.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  void *v7;
  id v8;

  v1 = direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver;
  v2 = *(void **)((char *)v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver);
  }
  else
  {
    v4 = v0;
    type metadata accessor for CanvasViewToolPickerObserver(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
    v5 = v0;
    v6 = specialized CanvasViewToolPickerObserver.__allocating_init(canvasView:)();

    v7 = *(void **)((char *)v4 + v1);
    *(_QWORD *)((char *)v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void CanvasView.editingContainerElementId.didset()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  objc_super v10;

  v1 = Canvas.editingView.getter();
  v3 = v2;
  v4 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  v5 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = v3;
  swift_unknownObjectWeakAssign();
  v10.receiver = v5;
  v10.super_class = v4;
  v6 = objc_msgSendSuper2(&v10, sel_init);

  v7 = *(void **)(v0 + direct field offset for CanvasView.selectionInteractionDelegate);
  *(_QWORD *)(v0 + direct field offset for CanvasView.selectionInteractionDelegate) = v6;

  v8 = *(void **)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (v8)
  {
    v9 = objc_msgSend(v8, sel_selectionInteraction);
    objc_msgSend(v9, sel_setDelegate_, *(_QWORD *)(v0 + direct field offset for CanvasView.selectionInteractionDelegate));

  }
}

uint64_t CanvasView.editingContainerElementId.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  Canvas.editingContainerElementId.setter((uint64_t)v6);
  CanvasView.editingContainerElementId.didset();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*CanvasView.editingContainerElementId.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.editingContainerElementId.modify(v3);
  return CanvasView.editingContainerElementId.modify;
}

void CanvasView.editingContainerElementId.modify(_QWORD *a1, char a2)
{
  void *v3;

  v3 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
    CanvasView.editingContainerElementId.didset();
  free(v3);
}

id CanvasView.persistUIState(_:)(void (*a1)(uint64_t), uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  uint64_t v10;
  char *v11;
  UIScrollView *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t);
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  double v28;
  double v29;

  v26 = a2;
  v27 = a1;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v4 = v3[424];
  v5 = v3[425];
  v6 = type metadata accessor for Capsule();
  v7 = *(_QWORD *)(v6 - 8);
  result = (id)MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v26 - v10;
  v12 = *(UIScrollView **)((char *)v2 + direct field offset for CanvasView.canvasScrollView);
  if (v12)
  {
    objc_msgSend(*(id *)((char *)v2 + direct field offset for CanvasView.canvasScrollView), sel_contentOffset, v26);
    v14 = v13;
    v16 = v15;
    v17 = Canvas.updatablePaper2.getter((uint64_t)v11);
    MEMORY[0x1E0C80A78](v17, v18);
    *(&v26 - 4) = v4;
    *(&v26 - 3) = v5;
    v19 = v3[426];
    *(&v26 - 2) = v19;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v20 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v21 = v20(v11, v6);
    v22 = v14 + v28;
    v23 = v16 + v29;
    v27(v21);
    CanvasView.scrollViewDidScroll(_:)(v12);
    v24 = Canvas.updatablePaper2.getter((uint64_t)v11);
    MEMORY[0x1E0C80A78](v24, v25);
    *(&v26 - 4) = v4;
    *(&v26 - 3) = v5;
    *(&v26 - 2) = v19;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v20(v11, v6);
    return -[UIScrollView setContentOffset:](v12, sel_setContentOffset_, v22 - v28, v23 - v29);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CanvasView.__allocating_init(frame:paper:allowMediaCanvasElements:transparentBackground:paperViewController:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, char a7)
{
  void *v13;
  _OWORD v14[2];
  uint64_t v15;

  type metadata accessor for CRContext();
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = (void *)MEMORY[0x1DF0E3C90](0, v14);
  outlined destroy of EncryptionDelegate?((uint64_t)v14);
  specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(v13, a1, 2, a7, a2, a3, a4, a5);
}

uint64_t sub_1DDB4FC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

void CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, int a3, double a4, double a5, double a6, double a7, uint64_t a8, char a9)
{
  specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a9, a4, a5, a6, a7);
}

uint64_t sub_1DDB4FD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

void CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, double a6, double a7, double a8, double a9)
{
  specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1DDB4FD64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

void CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, double a6, double a7, double a8, double a9)
{
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1DDB4FDD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

Swift::Void __swiftcall CanvasView.tiledViewUpdateEditingState()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  id v5;
  void *v6;
  id v7;
  unsigned __int8 v8;

  v1 = *(void **)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (v1)
  {
    Canvas.editingMode.getter(&v8);
    v2 = v8;
    if (v8 != 2)
      v2 = 0;
    if (v8 >= 2u)
      v3 = v2;
    else
      v3 = 0;
    v4 = v8 >= 2u;
    v5 = objc_msgSend(v1, sel_canvasView);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_drawingGestureRecognizer);

      objc_msgSend(v7, sel_setEnabled_, v4);
    }
    objc_msgSend(v1, sel_setDrawingPolicy_, v3);
  }
  else
  {
    __break(1u);
  }
}

id CanvasView.activeToolPicker.getter()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  id v7;

  v0 = (char *)CanvasView.paperViewController.getter();
  if (!v0)
    return 0;
  v1 = v0;
  if ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x60))())
  {
    v3 = v2;
    ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 24))(v1, ObjectType, v3) & 1) != 0)
    {
      v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 32))(v1, ObjectType, v3);

      swift_unknownObjectRelease();
      return (id)v5;
    }
    swift_unknownObjectRelease();
  }
  v7 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker];

  return v7;
}

Swift::Void __swiftcall CanvasView.registerToolPickerObservers(_:)(PKToolPicker a1)
{
  uint64_t v1;
  id v3;
  id v4;

  -[objc_class addObserver:](a1.super.isa, sel_addObserver_, v1);
  v3 = CanvasView.toolPickerObserver.getter();
  -[objc_class addObserver:](a1.super.isa, sel_addObserver_, v3);

  v4 = CanvasView.toolPickerObserver.getter();
  CanvasViewToolPickerObserver.updateUI(toolPicker:)(a1);

}

id CanvasView.contentSnapshottingView.getter()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + direct field offset for CanvasView.canvasTiledView);
  if (result)
    return objc_msgSend(result, sel_contentSnapshottingView);
  __break(1u);
  return result;
}

void CanvasView.contentSnapshottingView.setter(void *a1)
{
  specialized CanvasView.contentSnapshottingView.setter((uint64_t)a1);

}

void (*CanvasView.contentSnapshottingView.modify(id *a1))(uint64_t a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = CanvasView.contentSnapshottingView.getter();
  return CanvasView.contentSnapshottingView.modify;
}

void CanvasView.contentSnapshottingView.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + direct field offset for CanvasView.canvasTiledView);
    v4 = *(id *)a1;
    if (v3)
    {
      v6 = v4;
      objc_msgSend(v3, sel_setContentSnapshottingView_);

LABEL_6:
      return;
    }
    __break(1u);
  }
  else
  {
    v5 = *(void **)(v2 + direct field offset for CanvasView.canvasTiledView);
    if (v5)
    {
      v6 = *(id *)a1;
      objc_msgSend(v5, sel_setContentSnapshottingView_);
      goto LABEL_6;
    }
  }
  __break(1u);
}

void CanvasView.visibleBoundsInModelSpace.getter()
{
  char *v0;
  void *v1;
  char *v2;
  _QWORD *v3;
  void (*v4)(CGAffineTransform *__return_ptr);
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  CGFloat width;
  CGFloat height;
  CGFloat y;
  CGFloat x;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat a;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v1 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (v1)
  {
    v2 = v0;
    v3 = Canvas.editingView.getter();
    v4 = *(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2A0);
    v5 = v1;
    v4(&v40);

    t1 = v40;
    t2.a = 1.0;
    t2.b = 0.0;
    t2.c = 0.0;
    t2.d = 1.0;
    t2.tx = 0.0;
    t2.ty = 0.0;
    CGAffineTransformConcat(&v37, &t1, &t2);
    t1 = v37;
    CGAffineTransformInvert(&t2, &t1);
    b = t2.b;
    a = t2.a;
    d = t2.d;
    c = t2.c;
    ty = t2.ty;
    tx = t2.tx;
    objc_msgSend(v5, sel_bounds);
    v29 = v7;
    v30 = v6;
    v27 = v9;
    v28 = v8;
    objc_msgSend(v2, sel_safeAreaInsets);
    v11 = v10;
    v13 = v12;
    Canvas.visibleBoundsOverride.getter((uint64_t)&v37);
    v14 = v37.a;
    v15 = v37.b;
    v16 = v37.c;
    v17 = v37.d;
    outlined init with take of CGRect?((uint64_t)&v37, (uint64_t)&t2);
    if (LOBYTE(t2.tx) == 1)
    {
      objc_msgSend(v5, sel_convertRect_toView_, *(_QWORD *)&v2[direct field offset for CanvasView.zoomView], UIEdgeInsetsInsetRect(v30, v29, v28, v27, v11, v13));
      v14 = v18;
      v15 = v19;
      v16 = v20;
      v17 = v21;
    }
    v22 = *(void **)&v2[direct field offset for CanvasView.zoomView];
    if (v22)
    {
      objc_msgSend(v22, sel_bounds);
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = tx;
      t1.ty = ty;
      v42 = CGRectApplyAffineTransform(v41, &t1);
      y = v42.origin.y;
      x = v42.origin.x;
      width = v42.size.width;
      height = v42.size.height;
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = tx;
      t1.ty = ty;
      v42.origin.y = v15;
      v42.origin.x = v14;
      v42.size.height = v17;
      v42.size.width = v16;
      v44 = CGRectApplyAffineTransform(v42, &t1);
      v43.origin.y = y;
      v43.origin.x = x;
      v43.size.width = width;
      v43.size.height = height;
      CGRectIntersection(v43, v44);

    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall CanvasView.didMoveToSuperview()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char *v8;
  uint64_t v9;
  objc_super v10;

  v1 = v0;
  v2 = (objc_class *)type metadata accessor for CanvasView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v10.receiver = v0;
  v10.super_class = v2;
  objc_msgSendSuper2(&v10, sel_didMoveToSuperview);
  v3 = objc_msgSend(v0, sel_superview);

  if (!v3)
  {
    v4 = Canvas.editingView.getter();
    v6 = v5;
    ObjectType = swift_getObjectType();
    v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 144))(ObjectType, v6);

    if (v8)
    {
      v9 = *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
      swift_retain();

      swift_retain();
      FormAnalytics.merge(_:for:)(v9, v1);
      swift_release();
      swift_release();
    }
    swift_retain();
    FormAnalytics.recordSessionEvent()();
    swift_release();
  }
}

void @objc CanvasView.didMoveToSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  CanvasView.didMoveToSuperview()();

}

uint64_t CanvasView.adjustingInsets.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.adjustingInsets);
}

uint64_t CanvasView.adjustingInsets.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for CanvasView.adjustingInsets) = result;
  return result;
}

uint64_t CanvasView.firstLayout.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.firstLayout);
}

uint64_t CanvasView.firstLayout.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for CanvasView.firstLayout) = result;
  return result;
}

uint64_t CanvasView.isZoomScaleAltered.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for CanvasView.isZoomScaleAltered);
}

uint64_t CanvasView.isZoomScaleAltered.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for CanvasView.isZoomScaleAltered) = result;
  return result;
}

uint64_t CanvasView.snappedContentInsets.getter()
{
  uint64_t v0;
  int v1;

  if (*(_BYTE *)(v0 + direct field offset for CanvasView.snappedContentInsets + 1))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + direct field offset for CanvasView.snappedContentInsets);
}

uint64_t CanvasView.snappedContentInsets.setter(uint64_t result, char a2)
{
  uint64_t v2;
  _BYTE *v3;

  v3 = (_BYTE *)(v2 + direct field offset for CanvasView.snappedContentInsets);
  *v3 = result;
  v3[1] = a2;
  return result;
}

void __swiftcall CanvasView.viewForZooming(in:)(UIView_optional *__return_ptr retstr, UIScrollView *in)
{
  id v2;

  v2 = (id)specialized CanvasView.zoomView.getter();
}

id @objc CanvasView.viewForZooming(in:)()
{
  return (id)specialized CanvasView.zoomView.getter();
}

Swift::Void __swiftcall CanvasView.deselectAll()()
{
  AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
}

Swift::Void __swiftcall CanvasView.scrollViewDidScroll(_:)(UIScrollView *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v14;
  double v15;
  char v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  CGRect v28;

  if ((v1[direct field offset for CanvasView.adjustingInsets] & 1) != 0)
    return;
  v2 = v1;
  v4 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.modelBounds.getter();
  v6 = v5;
  v8 = v7;

  v9 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v9)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v9, sel_bounds);
  v12 = vabdd_f64(v8, v11);
  if (vabdd_f64(v6, v10) < 1.5 && v12 < 1.5)
    goto LABEL_11;
  -[UIScrollView zoomScale](a1, sel_zoomScale, v12);
  v15 = v14;
  v16 = v2[direct field offset for CanvasView.isZoomScaleAltered];
  -[UIScrollView setZoomScale:](a1, sel_setZoomScale_, 1.0);
  v17 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v17)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v18 = v17;
  objc_msgSend(v18, sel_frame);
  objc_msgSend(v18, sel_setFrame_);

  if (v2[direct field offset for CanvasView.firstLayout] == 1)
  {
    -[UIScrollView frame](a1, sel_frame);
    v15 = fmin(CGRectGetWidth(v28) / v6, 1.0);
    v2[direct field offset for CanvasView.firstLayout] = 0;
  }
  -[UIScrollView setZoomScale:](a1, sel_setZoomScale_, v15);
  v2[direct field offset for CanvasView.isZoomScaleAltered] = v16;
LABEL_11:
  CanvasView.updateContentInsets()();
  v19 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.didScroll(in:)((uint64_t)v2);

  AnyCanvas.overlays.getter();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = (void **)(v20 + 32);
    do
    {
      v23 = *v22;
      v22 += 2;
      objc_msgSend(v23, sel_setNeedsLayout);
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  v24 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v24))
  {
    v25 = *(void **)&v2[direct field offset for CanvasView.zoomView];
    if (v25)
    {
      v26 = *((_QWORD *)v24 + 1);
      ObjectType = swift_getObjectType();
      objc_msgSend(v25, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, a1);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 64))(v2, ObjectType, v26);
      swift_unknownObjectRelease();
      return;
    }
LABEL_20:
    __break(1u);
  }
}

void @objc CanvasView.scrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  UIScrollView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasView.scrollViewDidScroll(_:)(v4);

}

Swift::Void __swiftcall CanvasView.scrollViewWillBeginDecelerating(_:)(UIScrollView *a1)
{
  uint64_t v1;
  UIPinchGestureRecognizer *v3;
  UIPinchGestureRecognizer *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v3 = -[UIScrollView pinchGestureRecognizer](a1, sel_pinchGestureRecognizer);
  if (v3)
  {
    v4 = v3;
    -[UIPinchGestureRecognizer velocity](v3, sel_velocity);
    v6 = v5;

  }
  else
  {
    v6 = 0.0;
  }
  -[UIScrollView zoomScale](a1, sel_zoomScale);
  v8 = v6 / v7;
  if (one-time initialization token for pinchVelocityThresholdToNormalizeScale != -1)
    swift_once();
  if (v8 < *(double *)&static UIConstants.pinchVelocityThresholdToNormalizeScale)
  {
    -[UIScrollView setZoomScale:animated:](a1, sel_setZoomScale_animated_, 1, 1.0);
    *(_WORD *)(v1 + direct field offset for CanvasView.snappedContentInsets) = 257;
  }
}

void @objc CanvasView.scrollViewWillBeginDecelerating(_:)(void *a1, uint64_t a2, void *a3)
{
  UIScrollView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasView.scrollViewWillBeginDecelerating(_:)(v4);

}

void @objc CanvasView.scrollViewDidZoom(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized CanvasView.scrollViewDidZoom(_:)();

}

void @objc CanvasView.scrollViewDidEndZooming(_:with:atScale:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized CanvasView.scrollViewDidEndZooming(_:with:atScale:)(v6);

}

UIEdgeInsets __swiftcall CanvasView.contentInset()()
{
  char *v0;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  CGFloat v24;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  UIEdgeInsets result;

  v34 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 16];
  v35 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets];
  v32 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 24];
  v33 = *(double *)&v0[direct field offset for CanvasView.minimumContentInsets + 8];
  objc_msgSend(v0, sel_bounds);
  x = v36.origin.x;
  y = v36.origin.y;
  width = v36.size.width;
  height = v36.size.height;
  v5 = CGRectGetWidth(v36);
  v9 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (v9)
  {
    v10 = v5;
    objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
    v12 = v10 - v11;
    v13 = (v10 - v11) * 0.5;
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    v14 = CGRectGetHeight(v37);
    objc_msgSend(v9, sel_contentSize);
    v16 = v14 - v15;
    v17 = (v14 - v15) * 0.5;
    v18 = v16 < 0.0;
    v19 = x;
    v20 = 0.0;
    if (v18)
      v21 = 0.0;
    else
      v21 = v17;
    if (v12 < 0.0)
      v22 = 0.0;
    else
      v22 = v13;
    v23 = direct field offset for CanvasView.snappedContentInsets;
    if ((v0[direct field offset for CanvasView.snappedContentInsets] & 1) != 0)
    {
      v24 = v19;
      v25 = round(v22);
      v26 = 0.0;
    }
    else
    {
      v24 = v19;
      v27 = y;
      v28 = width;
      v29 = height;
      v30 = CGRectGetWidth(*(CGRect *)&v19);
      if (one-time initialization token for unsnappedScrollInset != -1)
        swift_once();
      v26 = v30 - *(double *)&static UIConstants.unsnappedScrollInset;
      v23 = direct field offset for CanvasView.snappedContentInsets;
      v25 = v26;
    }
    if ((v0[v23 + 1] & 1) != 0)
    {
      v5 = round(v21);
    }
    else
    {
      v38.origin.x = v24;
      v38.origin.y = y;
      v38.size.width = width;
      v38.size.height = height;
      v31 = CGRectGetHeight(v38);
      if (one-time initialization token for unsnappedScrollInset != -1)
        swift_once();
      v20 = v31 - *(double *)&static UIConstants.unsnappedScrollInset;
      v5 = v31 - *(double *)&static UIConstants.unsnappedScrollInset;
    }
    v8 = v32;
    v6 = v33;
    if (v25 > v33)
      v6 = v25;
    if (v26 > v32)
      v8 = v26;
    if (v5 <= v35)
      v5 = v35;
    if (v20 > v34)
      v7 = v20;
    else
      v7 = v34;
  }
  else
  {
    __break(1u);
  }
  result.right = v8;
  result.bottom = v7;
  result.left = v6;
  result.top = v5;
  return result;
}

double CanvasView.minimumContentInsets.getter()
{
  uint64_t v0;

  return *(double *)(v0 + direct field offset for CanvasView.minimumContentInsets);
}

Swift::Void __swiftcall CanvasView.updateContentInsets()()
{
  char *v0;
  double Width;
  void *v2;
  double v3;
  double v4;
  double v5;
  double Height;
  double v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  double v23;
  double v24;
  char v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double top;
  double left;
  double bottom;
  double right;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  BOOL v41;
  double v42;
  CGRect v44;
  CGRect v45;
  UIEdgeInsets v46;

  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v44);
  v2 = *(void **)&v0[direct field offset for CanvasView.canvasScrollView];
  if (!v2)
  {
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v3 = Width;
  objc_msgSend(*(id *)&v0[direct field offset for CanvasView.canvasScrollView], sel_contentSize);
  v5 = v4;
  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v45);
  objc_msgSend(v2, sel_contentSize);
  if (v0[direct field offset for CanvasView.allowsContentSnapping] != 1)
    goto LABEL_30;
  v8 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v8)
    goto LABEL_43;
  v9 = v7;
  objc_msgSend(v8, sel_translationInView_, v0);
  v12 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v12)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v13 = v10;
  v14 = v11;
  if ((uint64_t)objc_msgSend(v12, sel_numberOfTouches) >= 2)
  {
    v16 = fabs(v13);
    if (one-time initialization token for translationThresholdToUnsnapCentering != -1)
      swift_once();
    v15 = static UIConstants.translationThresholdToUnsnapCentering;
    if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering < v16)
    {
      v17 = 0;
LABEL_16:
      v0[direct field offset for CanvasView.snappedContentInsets] = v17;
      goto LABEL_17;
    }
  }
  v18 = v3 - v5;
  objc_msgSend(v2, sel_contentOffset, *(double *)&v15);
  v20 = 0.0;
  if (v18 >= 0.0)
    v20 = v18 * 0.5;
  v21 = fabs(v20 + v19);
  if (one-time initialization token for translationThresholdToResnapCentering != -1)
    swift_once();
  v15 = static UIConstants.translationThresholdToResnapCentering;
  if (v21 < *(double *)&static UIConstants.translationThresholdToResnapCentering)
  {
    v17 = 1;
    goto LABEL_16;
  }
LABEL_17:
  v22 = *(void **)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer];
  if (!v22)
  {
LABEL_45:
    __break(1u);
    return;
  }
  if ((uint64_t)objc_msgSend(v22, sel_numberOfTouches, *(double *)&v15) < 2)
    goto LABEL_23;
  v24 = fabs(v14);
  if (one-time initialization token for translationThresholdToUnsnapCentering != -1)
    swift_once();
  v23 = *(double *)&static UIConstants.translationThresholdToUnsnapCentering;
  if (*(double *)&static UIConstants.translationThresholdToUnsnapCentering >= v24)
  {
LABEL_23:
    v26 = Height - v9;
    objc_msgSend(v2, sel_contentOffset, v23);
    v28 = 0.0;
    if (v26 >= 0.0)
      v28 = v26 * 0.5;
    v29 = fabs(v28 + v27);
    if (one-time initialization token for translationThresholdToResnapCentering != -1)
      swift_once();
    if (v29 >= *(double *)&static UIConstants.translationThresholdToResnapCentering)
      goto LABEL_30;
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  v0[direct field offset for CanvasView.snappedContentInsets + 1] = v25;
LABEL_30:
  v46 = CanvasView.contentInset()();
  top = v46.top;
  left = v46.left;
  bottom = v46.bottom;
  right = v46.right;
  objc_msgSend(v2, sel_contentInset);
  v39 = vabdd_f64(left, v36) < 1.5;
  v38 = vabdd_f64(right, v37);
  v39 = v39 && v38 < 1.5;
  v40 = vabdd_f64(top, v34);
  v41 = v39 && v40 < 1.5;
  v42 = vabdd_f64(bottom, v35);
  if (!v41 || v42 >= 1.5)
  {
    v0[direct field offset for CanvasView.adjustingInsets] = 1;
    objc_msgSend(v2, sel_setContentInset_, top, left, bottom, right);
    v0[direct field offset for CanvasView.adjustingInsets] = 0;
  }
}

Swift::Void __swiftcall CanvasView.layoutSubviews()()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  objc_class *v11;
  UIScrollView *v12;
  char *v13;
  double Width;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  double v18;
  double Height;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  CGRect v24;
  objc_super v25;
  CGRect v26;
  CGRect v27;

  v1 = v0;
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0);
  v3 = v2[424];
  v4 = v2[425];
  v5 = type metadata accessor for Capsule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - v8;
  v10 = v2[426];
  v11 = (objc_class *)type metadata accessor for CanvasView(0, v3, v4, v10);
  v25.receiver = v1;
  v25.super_class = v11;
  objc_msgSendSuper2(&v25, sel_layoutSubviews);
  v12 = *(UIScrollView **)&v1[direct field offset for CanvasView.canvasScrollView];
  if (v12)
  {
    objc_msgSend(v1, sel_bounds);
    -[UIScrollView setFrame:](v12, sel_setFrame_);
    v13 = &v1[direct field offset for CanvasView.canvasContentMode];
    swift_beginAccess();
    if (*v13 == 1)
    {
      objc_msgSend(v1, sel_bounds);
      Width = CGRectGetWidth(v26);
      v15 = Canvas.updatablePaper2.getter((uint64_t)v9);
      MEMORY[0x1E0C80A78](v15, v16);
      *(&v23 - 4) = v3;
      *(&v23 - 3) = v4;
      *(&v23 - 2) = v10;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v17 = *(void (**)(char *, uint64_t))(v6 + 8);
      v17(v9, v5);
      v18 = Width / CGRectGetWidth(v24);
      objc_msgSend(v1, sel_bounds);
      Height = CGRectGetHeight(v27);
      v20 = Canvas.updatablePaper2.getter((uint64_t)v9);
      MEMORY[0x1E0C80A78](v20, v21);
      *(&v23 - 4) = v3;
      *(&v23 - 3) = v4;
      *(&v23 - 2) = v10;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v17(v9, v5);
      v22 = Height / CGRectGetHeight(v24);
      if (v22 >= v18)
        v22 = v18;
      -[UIScrollView setZoomScale:](v12, sel_setZoomScale_, v22);
    }
    CanvasView.scrollViewDidScroll(_:)(v12);
  }
  else
  {
    __break(1u);
  }
}

void key path getter for PaperRenderable.frame : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t key path setter for CanvasElement.frame : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(a4 + a3 - 8) + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

void @objc CanvasView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  CanvasView.layoutSubviews()();

}

void *CanvasView.scrollView.getter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasView.scrollView.getter();
  v1 = v0;
  return v0;
}

void *CanvasView.tiledView.getter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasView.tiledView.getter();
  v1 = v0;
  return v0;
}

void CanvasView.presentSubelement<A>(_:)(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;

  v4 = (void *)CanvasView.paperViewController.getter();
  if (v4)
  {
    v5 = v4;
    Canvas.presentSubelement<A>(_:presentationViewController:)(a1, v4, a2);

  }
}

Swift::Bool __swiftcall CanvasView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  return 1;
}

uint64_t @objc CanvasView.gestureRecognizer(_:shouldReceive:)()
{
  return 1;
}

Swift::Bool __swiftcall CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldRecognizeSimultaneouslyWith)
{
  uint64_t v2;
  void *v3;
  id v6;
  UIGestureRecognizer *v7;
  char v8;
  void *v10;
  id v11;
  UIGestureRecognizer *v12;
  char v13;

  v3 = *(void **)(v2 + direct field offset for CanvasView.trackingPanGestureRecognizer);
  if (!v3)
    return 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  v6 = v3;
  v7 = _;
  v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
    return 1;
  v10 = *(void **)(v2 + direct field offset for CanvasView.trackingPanGestureRecognizer);
  if (!v10)
    return 0;
  v11 = v10;
  v12 = shouldRecognizeSimultaneouslyWith;
  v13 = static NSObject.== infix(_:_:)();

  return v13 & 1;
}

BOOL @objc CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  UIGestureRecognizer *v6;
  UIGestureRecognizer *v7;
  id v8;
  Swift::Bool v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(v6, v7);

  return v9;
}

Swift::Void __swiftcall CanvasView.toolPickerSelectedToolDidChange(_:)(PKToolPicker a1)
{
  id v2;

  v2 = CanvasView.toolPickerObserver.getter();
  CanvasViewToolPickerObserver.toolPickerSelectedToolItemDidChange(_:)(a1);

}

void @objc CanvasView.toolPickerSelectedToolDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);

}

void @objc CanvasView.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);

}

void @objc CanvasView.toolPickerIsRulerActiveDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasView.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);

}

uint64_t CanvasView.__ivar_destroyer()
{
  uint64_t v0;

  return swift_release();
}

id CanvasView.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasView.__ivar_destroyer(uint64_t a1)
{

  return swift_release();
}

uint64_t outlined destroy of EncryptionDelegate?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *protocol witness for CanvasElementControllerDelegate.canvasElementControllerCanvasForInsertion.getter in conformance CanvasView<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasView.canvasElementControllerCanvasForInsertion.getter();
  v1 = v0;
  return v0;
}

uint64_t protocol witness for CanvasElementControllerDelegate.canvasElementController(_:wantsToEnterFullscreen:) in conformance CanvasView<A>(uint64_t a1, char a2)
{
  return specialized CanvasView.canvasElementController(_:wantsToEnterFullscreen:)(a2);
}

uint64_t specialized CanvasView.tiledView.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for CanvasView.canvasTiledView);
}

uint64_t specialized CanvasView.scrollView.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for CanvasView.canvasScrollView);
}

uint64_t specialized CanvasView.zoomView.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for CanvasView.zoomView);
}

void specialized CanvasView.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;

  v0[direct field offset for CanvasView.allowsContentSnapping] = 1;
  *(_QWORD *)&v0[direct field offset for CanvasView.trackingPanGestureRecognizer] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasView.rulerHostingDelegate] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasView.tiledViewDelegate] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasView.selectionInteractionDelegate] = 0;
  v0[direct field offset for CanvasView.canvasContentMode] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasView.zoomView] = 0;
  v1 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 791357252;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v0[v1] = v2;
  v0[direct field offset for CanvasView.adjustingInsets] = 0;
  v0[direct field offset for CanvasView.firstLayout] = 1;
  v0[direct field offset for CanvasView.isZoomScaleAltered] = 0;
  *(_WORD *)&v0[direct field offset for CanvasView.snappedContentInsets] = 257;
  v3 = &v0[direct field offset for CanvasView.minimumContentInsets];
  v4 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v3 = *MEMORY[0x1E0DC49E8];
  v3[1] = v4;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasView.paperViewController.setter(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(uint64_t, uint64_t);
  id v7;

  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v2 = Canvas.editingView.getter();
  v4 = v3;
  ObjectType = swift_getObjectType();
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 24);
  v7 = a1;
  v6(ObjectType, v4);

}

void specialized CanvasView.persistUIState(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  double v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  void *v34;
  double v35;
  double v36;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + direct field offset for CanvasView.canvasScrollView))
  {
    v34 = *(void **)(a1 + direct field offset for CanvasView.canvasScrollView);
    objc_msgSend(v34, sel_contentOffset, v7);
    v11 = v10;
    v13 = v12;
    v33 = direct field offset for Canvas.paperView;
    v14 = *(_QWORD *)(a1 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15 = v32(v9, v14, v4);
    MEMORY[0x1E0C80A78](v15, v16);
    v17 = type metadata accessor for Image();
    *(&v31 - 4) = v17;
    v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    *(&v31 - 3) = v18;
    *(&v31 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v19 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v20 = v19(v9, v4);
    v21 = v11 + v35;
    v22 = v13 + v36;
    v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v24 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x540))(v20);
    v25 = (*(uint64_t (**)(uint64_t))((*v23 & *a2) + 0x548))(v24);
    v26 = v23;
    (*(void (**)(uint64_t))((*v23 & *a2) + 0x550))(v25);
    v27 = v34;
    specialized CanvasView.scrollViewDidScroll(_:)(v34);
    v28 = *(_QWORD *)(a1 + v33) + *(_QWORD *)((*v26 & **(_QWORD **)(a1 + v33)) + 0x380);
    swift_beginAccess();
    v29 = v32(v9, v28, v4);
    MEMORY[0x1E0C80A78](v29, v30);
    *(&v31 - 4) = v17;
    *(&v31 - 3) = v18;
    *(&v31 - 2) = (uint64_t)&protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v19(v9, v4);
    objc_msgSend(v27, sel_setContentOffset_, v21 - v35, v22 - v36);
  }
  else
  {
    __break(1u);
  }
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, double a6, double a7, double a8, double a9)
{
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  objc_class *v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v44[24];

  v38 = *v9;
  v37 = *MEMORY[0x1E0DEEDD8];
  v39 = *a3;
  *((_BYTE *)v9 + direct field offset for CanvasView.allowsContentSnapping) = 1;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.trackingPanGestureRecognizer) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.rulerHostingDelegate) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.tiledViewDelegate) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.selectionInteractionDelegate) = 0;
  *((_BYTE *)v9 + direct field offset for CanvasView.canvasContentMode) = 0;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver) = 0;
  v12 = direct field offset for CanvasView.zoomView;
  *(uint64_t *)((char *)v9 + direct field offset for CanvasView.zoomView) = 0;
  v13 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 791357252;
  *(_WORD *)(v14 + 20) = 0;
  v15 = v9;
  *(_QWORD *)(v14 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(uint64_t *)((char *)v9 + v13) = v14;
  *((_BYTE *)v15 + direct field offset for CanvasView.adjustingInsets) = 0;
  *((_BYTE *)v15 + direct field offset for CanvasView.firstLayout) = 1;
  *((_BYTE *)v15 + direct field offset for CanvasView.isZoomScaleAltered) = 0;
  *(_WORD *)((char *)v15 + direct field offset for CanvasView.snappedContentInsets) = 257;
  v16 = (_OWORD *)((char *)v15 + direct field offset for CanvasView.minimumContentInsets);
  v17 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v16 = *MEMORY[0x1E0DC49E8];
  v16[1] = v17;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C28]), sel_initWithFrame_, 0.0, 0.0, a8, a9, v37, v38);
  v19 = (void *)objc_opt_self();
  v20 = v18;
  v21 = objc_msgSend(v19, sel_clearColor);
  objc_msgSend(v20, sel_setBackgroundColor_, v21);

  objc_msgSend(v20, sel_setContentSize_, 2000.0, 2000.0);
  objc_msgSend(v20, sel_setMinimumZoomScale_, 0.1);
  if (one-time initialization token for maximumPaperZoomScale != -1)
    swift_once();
  objc_msgSend(v20, sel_setMaximumZoomScale_, *(double *)&static UIConstants.maximumPaperZoomScale);
  objc_msgSend(v20, sel_setAlwaysBounceVertical_, 1);
  objc_msgSend(v20, sel_setAlwaysBounceHorizontal_, 1);
  objc_msgSend(v20, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v20, sel_setContentInsetAdjustmentBehavior_, 2);
  objc_msgSend(v20, sel_setDecelerationRate_, *MEMORY[0x1E0DC5360]);
  *(uint64_t *)((char *)v15 + direct field offset for CanvasView.canvasScrollView) = (uint64_t)v20;
  v22 = (void *)objc_opt_self();
  v23 = v20;
  v24 = objc_msgSend(v22, sel_standardUserDefaults);
  v25 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000035, 0x80000001DDF4CB10);
  v26 = objc_msgSend(v24, sel_BOOLForKey_, v25);

  v27 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1260]), sel_initInScrollView_sixChannelBlending_defaultDrawingClass_, v23, v26, swift_getObjCClassFromMetadata());
  objc_msgSend(v28, sel_setSupportsCopyAsText_, 1);
  objc_msgSend(v28, sel_setInsertSpaceEnabled_, 1);
  v29 = objc_msgSend(v28, sel_canvasView);
  if (v29)
  {
    v30 = v29;
    v31 = objc_msgSend(objc_allocWithZone(v27), sel_init);
    objc_msgSend(v30, sel_setDrawing_, v31);

  }
  v32 = objc_msgSend(v28, sel_canvasView);
  if (v32)
  {
    v33 = v32;
    objc_msgSend(v32, sel_setOpaque_, 0);

  }
  v34 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementContainerView()), sel_initWithFrame_, 0.0, 0.0, a8, a9);
  v35 = *(void **)((char *)v9 + v12);
  *(uint64_t *)((char *)v9 + v12) = (uint64_t)v34;

  objc_msgSend(v28, sel_setAttachmentContainerView_, *(uint64_t *)((char *)v9 + v12));
  *(uint64_t *)((char *)v15 + direct field offset for CanvasView.canvasTiledView) = (uint64_t)v28;
  v36 = v28;

  v44[0] = v39;
  specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)((uint64_t)a1, a2, v44, a4 & 1, a5 & 1);
}

void specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, unsigned __int8 *a3, char a4, char a5, double a6, double a7, double a8, double a9)
{
  uint64_t *v9;
  id v19;

  v19 = objc_allocWithZone((Class)type metadata accessor for CanvasView(0, v9[424], v9[425], v9[426]));
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void specialized CanvasView.__allocating_init(context:frame:paper:allowsEditing:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, uint64_t a2, int a3, char a4, double a5, double a6, double a7, double a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  _BYTE v23[15];
  unsigned __int8 v24;

  v16 = a3;
  v17 = type metadata accessor for Capsule();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = &v23[-v20];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v18 + 16))(&v23[-v20], a2, v17);
  v22 = (a3 << 31 >> 31) & 3;
  if (v16 == 2)
    LOBYTE(v22) = 3;
  v24 = v22;
  specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, (uint64_t)v21, &v24, 1, a4, a5, a6, a7, a8);
}

uint64_t sub_1DDB529D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
  return a1;
}

id specialized CanvasView.contentSnapshottingView.setter(uint64_t a1)
{
  uint64_t v1;
  id result;

  result = *(id *)(v1 + direct field offset for CanvasView.canvasTiledView);
  if (result)
    return objc_msgSend(result, sel_setContentSnapshottingView_, a1);
  __break(1u);
  return result;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t type metadata accessor for CanvasView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasView);
}

uint64_t specialized CanvasView.formAnalytics.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for CanvasView.formAnalytics);
}

void specialized CanvasView.scrollViewDidZoom(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(uint64_t);
  _QWORD *v3;

  *(_BYTE *)(v0 + direct field offset for CanvasView.isZoomScaleAltered) = 1;
  v1 = (_QWORD *)specialized Canvas.paperView.getter();
  v2 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x280);
  v3 = v1;
  v2(v0);

}

id specialized CanvasView.scrollViewDidEndZooming(_:with:atScale:)(void *a1)
{
  uint64_t v1;
  double v3;
  double v4;
  id result;
  double v6;

  CanvasView.updateContentInsets()();
  objc_msgSend(a1, sel_zoomScale);
  v4 = v3;
  result = objc_msgSend(a1, sel_minimumZoomScale);
  if (v4 == v6)
    *(_BYTE *)(v1 + direct field offset for CanvasView.isZoomScaleAltered) = 0;
  return result;
}

void sub_1DDB52B38(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t sub_1DDB52B80(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDB52BC4()
{
  return 24;
}

__n128 sub_1DDB52BD0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDB52BE4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CanvasView.drawingPolicy.getter();
  *a1 = result;
  return result;
}

id sub_1DDB52C0C(uint64_t *a1)
{
  return CanvasView.drawingPolicy.setter(*a1);
}

uint64_t sub_1DDB52C30()
{
  return 24;
}

__n128 sub_1DDB52C3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDB52C50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = CanvasView.canvasContentMode.getter(&v3);
  *a1 = v3;
  return result;
}

id sub_1DDB52C88(char *a1)
{
  char v2;

  v2 = *a1;
  return CanvasView.canvasContentMode.setter(&v2);
}

uint64_t sub_1DDB52CBC()
{
  return 24;
}

__n128 sub_1DDB52CC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDB52CDC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CanvasView.contentSnapshottingView.getter();
  *a1 = result;
  return result;
}

void sub_1DDB52D04(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized CanvasView.contentSnapshottingView.setter((uint64_t)v1);

}

uint64_t sub_1DDB52D40()
{
  return 24;
}

__n128 sub_1DDB52D4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for CanvasView()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for CanvasView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CanvasView.movableAdornmentViews.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE20))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE28))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE30))();
}

uint64_t dispatch thunk of CanvasView.drawingPolicy.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE38))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE88))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE90))();
}

uint64_t dispatch thunk of CanvasView.canvasContentMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE98))();
}

uint64_t dispatch thunk of CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 3792))();
}

uint64_t dispatch thunk of CanvasView.registerToolPickerObservers(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xEE8))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xEF0))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xEF8))();
}

uint64_t dispatch thunk of CanvasView.contentSnapshottingView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF00))();
}

uint64_t dispatch thunk of CanvasView.viewForZooming(in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF80))();
}

uint64_t dispatch thunk of CanvasView.deselectAll()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF88))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidScroll(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF90))();
}

uint64_t dispatch thunk of CanvasView.scrollViewWillBeginDecelerating(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF98))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidZoom(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xFA0))();
}

uint64_t dispatch thunk of CanvasView.scrollViewDidEndZooming(_:with:atScale:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xFA8))();
}

uint64_t dispatch thunk of CanvasView.gestureRecognizer(_:shouldReceive:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xFF0))();
}

uint64_t dispatch thunk of CanvasView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xFF8))();
}

uint64_t dispatch thunk of CanvasView.toolPickerSelectedToolDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1000))();
}

uint64_t dispatch thunk of CanvasView.toolPickerSelectedToolItemDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1008))();
}

uint64_t dispatch thunk of CanvasView.toolPickerIsRulerActiveDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1010))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id outlined copy of PaperDocumentFindResult.Content(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) != 0)
    a1 = a5;
  return a1;
}

unint64_t lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentFindResult, &type metadata for PaperDocumentFindResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentFindResult, &type metadata for PaperDocumentFindResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentFindResult, &type metadata for PaperDocumentFindResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult and conformance PaperDocumentFindResult);
  }
  return result;
}

uint64_t sub_1DDB530EC()
{
  uint64_t v0;

  outlined consume of PaperDocumentFindResult.Content(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

void outlined consume of PaperDocumentFindResult.Content(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  if ((a6 & 1) != 0)
    a1 = a5;

}

uint64_t outlined init with take of FindResult(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1DDB53148()
{
  return 24;
}

__n128 sub_1DDB53154(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t specialized CanvasView.canvasElementControllerCanvasForInsertion.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t specialized CanvasView.canvasElementController(_:wantsToEnterFullscreen:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  if (result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 40))(v1, a1 & 1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags;
  if (!lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PencilAndPaperFeatureFlags, &type metadata for PencilAndPaperFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags;
  if (!lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PencilAndPaperFeatureFlags, &type metadata for PencilAndPaperFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags);
  }
  return result;
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(_QWORD *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;
  return swift_retain();
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t *v19;
  void *v28;
  uint64_t v29;
  _OWORD *v30;
  __n128 result;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v19 = a16;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v29 = __swift_instantiateConcreteTypeFromMangledName(v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a9, v17, v29);
  v30 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a17) + 36));
  v30[4] = v36;
  v30[5] = v37;
  v30[6] = v38;
  *v30 = v32;
  v30[1] = v33;
  result = v35;
  v30[2] = v34;
  v30[3] = v35;
  return result;
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v26 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = a17;
  *(_OWORD *)(a9 + 80) = v32;
  *(_OWORD *)(a9 + 96) = v33;
  *(_OWORD *)(a9 + 112) = v34;
  *(_OWORD *)(a9 + 16) = v28;
  *(_OWORD *)(a9 + 32) = v29;
  *(_OWORD *)(a9 + 48) = v30;
  *(_OWORD *)(a9 + 64) = v31;
  swift_retain();
  return swift_retain();
}

__n128 specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  uint64_t v24;
  _OWORD *v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  v24 = type metadata accessor for ButtonStyleConfiguration.Label();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(a9, v13, v24);
  v25 = (_OWORD *)(a9
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FlexFrameLayout>)
                          + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  *v25 = v27;
  v25[1] = v28;
  result = v30;
  v25[2] = v29;
  v25[3] = v30;
  return result;
}

Swift::Void __swiftcall TextFormattingState.update(from:shouldUseStyle:)(PaperKit::Font *from, Swift::Bool shouldUseStyle)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  void *object;
  float pointSize;
  Swift::Int rawValue;
  uint64_t countAndFlagsBits;
  uint64_t (*v11)(_BYTE *, uint64_t, _QWORD);
  void (*v12)(_BYTE *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  uint64_t v16;
  BOOL v17;
  void (*v18)(_BYTE *, _QWORD);
  BOOL *v19;
  BOOL v20;
  void (*v21)(_BYTE *, _QWORD);
  BOOL *v22;
  _BYTE v23[32];

  v4 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v3;
  v5 = v2;
  object = from->_familyName.value._object;
  pointSize = from->pointSize;
  rawValue = from->traits.rawValue;
  if (object)
  {
    countAndFlagsBits = from->_familyName.value._countAndFlagsBits;
  }
  else
  {
    object = from->_name.value._object;
    if (!object)
      goto LABEL_6;
    countAndFlagsBits = from->_name.value._countAndFlagsBits;
  }
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, _QWORD))(v3 + 32);
  swift_bridgeObjectRetain();
  v12 = (void (*)(_BYTE *, _QWORD))v11(v23, v5, v4);
  v14 = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)v14 = countAndFlagsBits;
  *(_QWORD *)(v14 + 8) = object;
  *(_BYTE *)(v14 + 16) = 0;
  v12(v23, 0);
LABEL_6:
  if (!shouldUseStyle)
    return;
  if ((~LODWORD(pointSize) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (pointSize <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (pointSize >= 9.2234e18)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v15 = (void (*)(_BYTE *, _QWORD))((uint64_t (**)(_BYTE *, uint64_t, _QWORD))v4)[7](v23, v5, v4);
  *(_QWORD *)v16 = (uint64_t)pointSize;
  *(_BYTE *)(v16 + 8) = 0;
  v15(v23, 0);
  swift_beginAccess();
  v17 = (static Font.Traits.bold & ~rawValue) == 0;
  v18 = (void (*)(_BYTE *, _QWORD))((uint64_t (**)(_BYTE *, uint64_t, _QWORD))v4)[13](v23, v5, v4);
  *v19 = v17;
  v19[1] = 0;
  v18(v23, 0);
  swift_beginAccess();
  v20 = (static Font.Traits.italic & ~rawValue) == 0;
  v21 = (void (*)(_BYTE *, _QWORD))((uint64_t (**)(_BYTE *, uint64_t, _QWORD))v4)[16](v23, v5, v4);
  *v22 = v20;
  v22[1] = 0;
  v21(v23, 0);
}

uint64_t TextStyleSelectorModel.fontName.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t TextStyleSelectorModel.fontSize.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t TextStyleSelectorModel.bold.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

{
  int v0;
  unsigned __int8 v2;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v3)
    v0 = 256;
  else
    v0 = 0;
  return v0 | v2;
}

uint64_t TextStyleSelectorModel.italic.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.underline.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.strikethrough.getter()
{
  return TextStyleSelectorModel.bold.getter();
}

uint64_t TextStyleSelectorModel.fontColor.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

uint64_t TextStyleSelectorModel.textAlignment.getter()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void TextStyleSelectorModel.init(attributes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(uint64_t, _BYTE *, uint64_t);
  void *v27;
  CGColorRef v28;
  CGColorSpace *v29;
  CGColorSpace *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  id v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[4];
  int v39;
  uint64_t v40;
  id v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _OWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  char v58;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  v49 = *(_QWORD *)(v3 - 8);
  v50 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v48 = &v38[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v45 = &v38[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  v53 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  v51 = *(_QWORD *)(v13 - 8);
  v52 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v38[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<String>>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = &v38[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v42 = *(unsigned __int8 *)(a1 + 24);
  v54 = *(void **)(a1 + 32);
  v40 = *(_QWORD *)(a1 + 40);
  v39 = *(unsigned __int8 *)(a1 + 48);
  v25 = *(_BYTE *)(a1 + 56);
  v43 = *(_QWORD *)(a1 + 64);
  v41 = *(id *)(a1 + 72);
  v56 = v23;
  v57 = v22;
  v58 = 1;
  v44 = v22;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<String>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontName, v21, v17);
  v56 = v24;
  LOBYTE(v57) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Int>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v51 + 32))(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontSize, v16, v52);
  LOBYTE(v56) = v25 & 1;
  BYTE1(v56) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Bool>);
  Published.init(initialValue:)();
  v26 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v53 + 32);
  v26(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__bold, v12, v9);
  LOBYTE(v56) = (v25 & 2) != 0;
  BYTE1(v56) = 1;
  Published.init(initialValue:)();
  v26(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__italic, v12, v9);
  LOBYTE(v56) = (v25 & 4) != 0;
  BYTE1(v56) = 1;
  Published.init(initialValue:)();
  v26(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__underline, v12, v9);
  LOBYTE(v56) = (v25 & 8) != 0;
  BYTE1(v56) = 1;
  Published.init(initialValue:)();
  v26(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__strikethrough, v12, v9);
  v27 = v54;
  if (!v54)
  {
    memset(v55, 0, sizeof(v55));
    v29 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
    if (v29)
    {
      v30 = v29;
      v28 = CGColorCreate(v29, (const CGFloat *)v55);

      if (v28)
      {
        v27 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  v28 = (CGColorRef)v54;
LABEL_6:
  v32 = v49;
  v31 = v50;
  v34 = v47;
  v33 = v48;
  v56 = (uint64_t)v28;
  LOBYTE(v57) = 1;
  v35 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<Color>);
  v36 = v45;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v46 + 32))(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontColor, v36, v34);
  v37 = 4;
  if (!v39)
    v37 = v40;
  v56 = v37;
  LOBYTE(v57) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Inspected<NSTextAlignment>);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v32 + 32))(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__textAlignment, v33, v31);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_hasMultipleFontSizes) = v42;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) = v43;
}

void TextStyleSelectorModel.inspect(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CGColor *v4;
  int v5;
  char v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  _BYTE *v11;
  void (*v12)(_BYTE *, _QWORD);
  BOOL *v13;
  void (*v14)(_BYTE *, _QWORD);
  BOOL *v15;
  void (*v16)(_BYTE *, _QWORD);
  BOOL *v17;
  CGColorRef v18;
  CGColorSpace *v19;
  CGColorSpace *v20;
  CGColor *v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id *v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _OWORD v31[2];
  _BYTE v32[32];

  v3 = *a1;
  v2 = a1[1];
  v30 = *((_BYTE *)a1 + 24);
  v4 = (CGColor *)a1[4];
  v5 = *((unsigned __int8 *)a1 + 48);
  v6 = *((_BYTE *)a1 + 56);
  v28 = a1[5];
  v29 = a1[8];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  v7 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  v9 = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)v9 = v3;
  *(_QWORD *)(v9 + 8) = v2;
  *(_BYTE *)(v9 + 16) = 1;
  v7(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v10 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  *v11 = v6 & 1;
  v11[1] = 1;
  v10(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v12 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  *v13 = (v6 & 2) != 0;
  v13[1] = 1;
  v12(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v14 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  *v15 = (v6 & 4) != 0;
  v15[1] = 1;
  v14(v32, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  v16 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  *v17 = (v6 & 8) != 0;
  v17[1] = 1;
  v16(v32, 0);
  swift_release();
  swift_release();
  if (!v4)
  {
    memset(v31, 0, sizeof(v31));
    v19 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
    if (v19)
    {
      v20 = v19;
      v18 = CGColorCreate(v19, (const CGFloat *)v31);

      if (v18)
      {
        v4 = 0;
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  v18 = v4;
LABEL_6:
  swift_getKeyPath();
  swift_getKeyPath();
  v21 = v4;
  v22 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  v24 = v23;

  *v24 = v18;
  *((_BYTE *)v24 + 8) = 1;
  v22(v32, 0);
  swift_release();
  swift_release();
  if (v5)
    v25 = 4;
  else
    v25 = v28;
  swift_getKeyPath();
  swift_getKeyPath();
  v26 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify();
  *(_QWORD *)v27 = v25;
  *(_BYTE *)(v27 + 8) = 1;
  v26(v32, 0);
  swift_release();
  swift_release();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_hasMultipleFontSizes) = v30;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) = v29;
}

uint64_t TextStyleSelectorModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontName;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<String>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontSize;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__bold;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__italic, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__underline, v6);
  v7(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__strikethrough, v6);
  v8 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__fontColor;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel__textAlignment;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TextStyleSelectorModel()
{
  return type metadata accessor for TextStyleSelectorModel(0);
}

uint64_t type metadata accessor for TextStyleSelectorModel(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for TextStyleSelectorModel);
}

void type metadata completion function for TextStyleSelectorModel()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<String>>, &demangling cache variable for type metadata for Inspected<String>, MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Int>>, &demangling cache variable for type metadata for Inspected<Int>, MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Bool>>, &demangling cache variable for type metadata for Inspected<Bool>, MEMORY[0x1E0C96198]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<Color>>, &demangling cache variable for type metadata for Inspected<Color>, MEMORY[0x1E0C96198]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<Inspected<String>>(319, &lazy cache variable for type metadata for Published<Inspected<NSTextAlignment>>, &demangling cache variable for type metadata for Inspected<NSTextAlignment>, MEMORY[0x1E0C96198]);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance TextStyleSelectorModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TextStyleSelectorModel(0);
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t (*protocol witness for TextFormattingState.fontSize.modify in conformance TextStyleSelectorModel(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t protocol witness for TextFormattingState.textAlignment.setter in conformance TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

{
  int v0;
  unsigned __int8 v2;
  char v3;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v3)
    v0 = 256;
  else
    v0 = 0;
  return v0 | v2;
}

uint64_t protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t (*protocol witness for TextFormattingState.bold.modify in conformance TextStyleSelectorModel(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

uint64_t protocol witness for TextFormattingState.italic.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.italic.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t (*protocol witness for TextFormattingState.italic.modify in conformance TextStyleSelectorModel(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel;
}

void protocol witness for TextFormattingState.fontName.modify in conformance TextStyleSelectorModel(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t protocol witness for TextFormattingState.underline.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.underline.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.strikethrough.getter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.getter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.strikethrough.setter in conformance TextStyleSelectorModel()
{
  return protocol witness for TextFormattingState.bold.setter in conformance TextStyleSelectorModel();
}

uint64_t protocol witness for TextFormattingState.fontColor.setter in conformance TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t protocol witness for TextFormattingState.boldAllowed.getter in conformance TextStyleSelectorModel()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) & 1;
}

uint64_t protocol witness for TextFormattingState.italicAllowed.getter in conformance TextStyleSelectorModel()
{
  uint64_t v0;

  return (*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit22TextStyleSelectorModel_allowedTextStyles) >> 1) & 1;
}

uint64_t TextStyleSelector.init<>(attributes:fontTapHandler:colorTapHandler:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;

  v22 = *a1;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_BYTE *)a1 + 24);
  v9 = *((_QWORD *)a1 + 4);
  v21 = *((_QWORD *)a1 + 5);
  v10 = *((_BYTE *)a1 + 48);
  v20 = *(__int128 *)((char *)a1 + 56);
  v11 = *((_QWORD *)a1 + 9);
  State.init(wrappedValue:)();
  v12 = *((_QWORD *)&v27 + 1);
  *(_BYTE *)(a6 + 16) = v27;
  *(_QWORD *)(a6 + 24) = v12;
  v35 = 0;
  State.init(wrappedValue:)();
  v13 = *((_QWORD *)&v27 + 1);
  *(_BYTE *)(a6 + 32) = v27;
  *(_QWORD *)(a6 + 40) = v13;
  v14 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  v15 = (uint64_t *)(a6 + v14[11]);
  *v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(a6 + v14[12] + 8) = 0;
  swift_unknownObjectWeakInit();
  v16 = (_QWORD *)(a6 + v14[13]);
  v17 = (_QWORD *)(a6 + v14[14]);
  v27 = v22;
  v28 = v7;
  v29 = v8;
  v30 = v9;
  v31 = v21;
  v32 = v10;
  v33 = v20;
  v34 = v11;
  type metadata accessor for TextStyleSelectorModel(0);
  swift_allocObject();
  TextStyleSelectorModel.init(attributes:)((uint64_t)&v27);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextStyleSelectorModel and conformance TextStyleSelectorModel, type metadata accessor for TextStyleSelectorModel, (uint64_t)&protocol conformance descriptor for TextStyleSelectorModel);
  result = ObservedObject.init(wrappedValue:)();
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = v19;
  *v16 = a2;
  v16[1] = a3;
  *v17 = a4;
  v17[1] = a5;
  return result;
}

uint64_t TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  void *v29;
  char **v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a2;
  v4 = type metadata accessor for ColorScheme();
  v42 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v37 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>);
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1E0C80A78](v43, v20);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v2;
  v39 = a1;
  v23 = *(_QWORD *)(a1 + 24);
  v48 = *(_QWORD *)(a1 + 16);
  v49 = v23;
  v50 = v2;
  v45 = v48;
  v46 = v23;
  v47 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, Button<Text>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>();
  Menu.init(content:label:)();
  v24 = static Alignment.center.getter();
  v26 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, (uint64_t)v19, 0.0, 1, 36.0, 0, v24, v25, &demangling cache variable for type metadata for Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  (*(void (**)(char *, uint64_t, __n128))(v40 + 8))(v15, v41, v26);
  specialized Environment.wrappedValue.getter((uint64_t)v11);
  v27 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v8, *MEMORY[0x1E0CD86E0], v4);
  LOBYTE(v15) = static ColorScheme.== infix(_:_:)();
  v28 = *(void (**)(char *, uint64_t))(v27 + 8);
  v28(v8, v4);
  v28(v11, v4);
  v29 = (void *)objc_opt_self();
  v30 = &selRef_secondarySystemBackgroundColor;
  if ((v15 & 1) == 0)
    v30 = &selRef_tertiarySystemBackgroundColor;
  v31 = MEMORY[0x1DF0E23A0](objc_msgSend(v29, *v30));
  v32 = static Edge.Set.all.getter();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v19, (uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  v33 = &v22[*(int *)(v43 + 36)];
  *(_QWORD *)v33 = v31;
  v33[8] = v32;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>);
  v34 = v44;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, v44, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v35 = v34
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)
               + 36);
  *(_QWORD *)v35 = 0x4014000000000000;
  *(_QWORD *)(v35 + 8) = -1;
  *(_WORD *)(v35 + 16) = 256;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
}

uint64_t closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String *v17;
  void *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v21 = a3;
  v22 = a5;
  v7 = type metadata accessor for TextStyleSelector(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v20 - v10;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v25._object = (void *)0x80000001DDF4CD80;
  v12._countAndFlagsBits = 0x747020646C25;
  v12._object = (void *)0xE600000000000000;
  v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v13.value._object = (void *)0xEB00000000656C62;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v25._countAndFlagsBits = 0xD000000000000014;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v25);
  v23 = 0;
  v24 = 11;
  v20[1] = swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v16 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = (Swift::String *)swift_allocObject();
  v18 = (void *)v21;
  v17[1]._countAndFlagsBits = a2;
  v17[1]._object = v18;
  v17[2] = v15;
  v17[3]._countAndFlagsBits = (uint64_t)&outlined read-only object #0 of closure #1 in TextStyleSelector.fontSizeMenu.getter;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))((char *)v17 + v16, v11, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>, MEMORY[0x1E0CDFA58]);
  return ForEach<>.init(_:id:content:)();
}

uint64_t closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a3;
  v27 = a5;
  v28 = a6;
  v9 = type metadata accessor for TextStyleSelector(0, a4, a5, a2);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v25 - v13;
  v15 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1DDF32CF0;
  v17 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(result + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(result + 64) = v17;
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v15 < *(_QWORD *)(a2 + 16))
  {
    *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 8 * v15 + 32);
    v18 = static String.localizedStringWithFormat(_:_:)();
    v20 = v19;
    swift_bridgeObjectRelease();
    v29 = v18;
    v30 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v26, v9);
    v21 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject();
    v24 = v27;
    *(_QWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v23 + v21, v14, v9);
    *(_QWORD *)(v23 + v22) = a2;
    *(_QWORD *)(v23 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8)) = v15;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    return Button<>.init<A>(_:action:)();
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  _BYTE v11[32];

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a2 + 16) > a3)
  {
    v7 = *(_QWORD *)(a2 + 8 * a3 + 32);
    v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a5 + 56);
    swift_unknownObjectRetain();
    v9 = (void (*)(_BYTE *, _QWORD))v8(v11, a4, a5);
    *(_QWORD *)v10 = v7;
    *(_BYTE *)(v10 + 8) = 0;
    v9(v11, 0);
    swift_unknownObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t closure #2 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void (*v6)(uint64_t, uint64_t);
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t result;

  v6 = *(void (**)(uint64_t, uint64_t))(a2 + 40);
  swift_unknownObjectRetain();
  v6(a1, a2);
  swift_unknownObjectRelease();
  dispatch thunk of CustomStringConvertible.description.getter();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  if (one-time initialization token for textBoxFontUnitString != -1)
    swift_once();
  v8 = (Swift::String)static UIConstants.textBoxFontUnitString;
  swift_bridgeObjectRetain();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  v9 = Text.init<A>(_:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  KeyPath = swift_getKeyPath();
  v17 = static Font.body.getter();
  v18 = swift_getKeyPath();
  v19 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v20 = MEMORY[0x1DF0E23A0](v19);
  result = swift_getKeyPath();
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = v15;
  *(_QWORD *)(a3 + 32) = KeyPath;
  *(_QWORD *)(a3 + 40) = 0x3FE0000000000000;
  *(_QWORD *)(a3 + 48) = v18;
  *(_QWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = result;
  *(_QWORD *)(a3 + 72) = v20;
  return result;
}

uint64_t TextStyleSelector.fontSizeStepper.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter();
  *((_QWORD *)v9 + 1) = 0x4000000000000000;
  v9[16] = 0;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  closure #1 in TextStyleSelector.fontSizeStepper.getter(v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v9[*(int *)(v10 + 44)]);
  LOBYTE(v3) = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, a2, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
  v19 = a2
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>)
               + 36);
  *(_BYTE *)v19 = v3;
  *(_QWORD *)(v19 + 8) = v12;
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = v16;
  *(_QWORD *)(v19 + 32) = v18;
  *(_BYTE *)(v19 + 40) = 0;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>);
}

uint64_t closure #1 in TextStyleSelector.fontSizeStepper.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t);
  void *v68;
  char **v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char **v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *);
  unsigned int v105;
  unint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v125 = a4;
  v126 = a3;
  v128 = type metadata accessor for ColorScheme();
  v118 = *(_QWORD *)(v128 - 8);
  v8 = MEMORY[0x1E0C80A78](v128, v7);
  v117 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v127 = (uint64_t)&v100 - v11;
  v112 = a2;
  v13 = type metadata accessor for TextStyleSelector(0, a2, a3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v13;
  v16 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13, v17);
  v19 = (char *)&v100 - v18;
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>);
  v113 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129, v20);
  v22 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v119 = (uint64_t)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v27);
  v102 = (uint64_t)&v100 - v28;
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v30 = MEMORY[0x1E0C80A78](v130, v29);
  v122 = (uint64_t)&v100 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v100 - v33;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v36 = MEMORY[0x1E0C80A78](v116, v35);
  v124 = (uint64_t)&v100 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v36, v38);
  v123 = (uint64_t)&v100 - v40;
  v42 = MEMORY[0x1E0C80A78](v39, v41);
  v120 = (uint64_t)&v100 - v43;
  v45 = MEMORY[0x1E0C80A78](v42, v44);
  v121 = (uint64_t)&v100 - v46;
  v48 = MEMORY[0x1E0C80A78](v45, v47);
  v50 = (char *)&v100 - v49;
  MEMORY[0x1E0C80A78](v48, v51);
  v114 = (uint64_t)&v100 - v52;
  v115 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v103 = v19;
  v115(v19, a1, v15);
  v53 = *(unsigned __int8 *)(v14 + 80);
  v54 = (v53 + 32) & ~v53;
  v110 = v54 + v16;
  v111 = v54;
  v109 = v53 | 7;
  v55 = swift_allocObject();
  v56 = v126;
  *(_QWORD *)(v55 + 16) = a2;
  *(_QWORD *)(v55 + 24) = v56;
  v108 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v101 = v15;
  v108(v55 + v54, v19, v15);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>);
  v106 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  v57 = static Alignment.center.getter();
  v58 = v102;
  v60 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, v102, 0.0, 1, 36.0, 0, v57, v59, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  v113 = *(_QWORD *)(v113 + 8);
  ((void (*)(char *, uint64_t, __n128))v113)(v22, v129, v60);
  v61 = a1;
  v62 = v127;
  specialized Environment.wrappedValue.getter(v127);
  v105 = *MEMORY[0x1E0CD86E0];
  v63 = v118;
  v104 = *(void (**)(char *))(v118 + 104);
  v64 = v117;
  v65 = v128;
  v104(v117);
  LOBYTE(v16) = static ColorScheme.== infix(_:_:)();
  v66 = *(void (**)(char *, uint64_t))(v63 + 8);
  v66(v64, v65);
  v66((char *)v62, v65);
  v67 = v66;
  v68 = (void *)objc_opt_self();
  v69 = &selRef_tertiarySystemBackgroundColor;
  if ((v16 & 1) != 0)
    v69 = &selRef_secondarySystemBackgroundColor;
  v70 = MEMORY[0x1DF0E23A0](objc_msgSend(v68, *v69));
  v71 = static Edge.Set.all.getter();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v58, (uint64_t)v34, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  v72 = &v34[*(int *)(v130 + 36)];
  *(_QWORD *)v72 = v70;
  v72[8] = v71;
  outlined destroy of StocksKitCurrencyCache.Provider?(v58, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, (uint64_t)v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v73 = v116;
  v74 = &v50[*(int *)(v116 + 36)];
  *(_QWORD *)v74 = 0x4014000000000000;
  *((_QWORD *)v74 + 1) = 5;
  *((_WORD *)v74 + 8) = 256;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v75 = v114;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v50, v114, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v76 = v103;
  v77 = v101;
  v115(v103, v61, v101);
  v78 = swift_allocObject();
  v79 = v126;
  *(_QWORD *)(v78 + 16) = v112;
  *(_QWORD *)(v78 + 24) = v79;
  v108(v78 + v111, v76, v77);
  Button.init(action:label:)();
  v80 = static Alignment.center.getter();
  v81 = v119;
  v83 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, v119, 0.0, 1, 36.0, 0, v80, v82, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  ((void (*)(char *, uint64_t, __n128))v113)(v22, v129, v83);
  v84 = v127;
  specialized Environment.wrappedValue.getter(v127);
  v85 = v128;
  ((void (*)(char *, _QWORD, uint64_t))v104)(v64, v105, v128);
  LOBYTE(v77) = static ColorScheme.== infix(_:_:)();
  v67(v64, v85);
  v67((char *)v84, v85);
  v86 = (void *)objc_opt_self();
  v87 = &selRef_tertiarySystemBackgroundColor;
  if ((v77 & 1) != 0)
    v87 = &selRef_secondarySystemBackgroundColor;
  v88 = MEMORY[0x1DF0E23A0](objc_msgSend(v86, *v87));
  v89 = static Edge.Set.all.getter();
  v90 = v122;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v81, v122, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  v91 = v90 + *(int *)(v130 + 36);
  *(_QWORD *)v91 = v88;
  *(_BYTE *)(v91 + 8) = v89;
  outlined destroy of StocksKitCurrencyCache.Provider?(v81, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>);
  v92 = v120;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v90, v120, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v93 = v92 + *(int *)(v73 + 36);
  *(_QWORD *)v93 = 0x4014000000000000;
  *(_QWORD *)(v93 + 8) = 10;
  *(_WORD *)(v93 + 16) = 256;
  outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v94 = v121;
  outlined init with take of (key: Int, value: AnyCRValue)?(v92, v121, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v95 = v123;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, v123, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v96 = v124;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v94, v124, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v97 = v125;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v95, v125, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v98 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v96, v97 + *(int *)(v98 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v95, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
}

uint64_t closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  _BYTE v11[32];

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain_n();
  v6 = v5(a2, a3);
  result = swift_unknownObjectRelease();
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    if (v6 - 1 <= 5)
      v8 = 5;
    else
      v8 = v6 - 1;
    v9 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 56))(v11, a2, a3);
    *(_QWORD *)v10 = v8;
    *(_BYTE *)(v10 + 8) = 0;
    v9(v11, 0);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #2 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  Swift::String v5;

  Image.init(systemName:)();
  v0 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  MEMORY[0x1DF0E23A0](v0);
  swift_getKeyPath();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._countAndFlagsBits = 0xD00000000000002DLL;
  v5._object = (void *)0x80000001DDF4CD50;
  v1._object = (void *)0x80000001DDF4CD30;
  v1._countAndFlagsBits = 0xD000000000000012;
  v2.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  _BYTE v11[32];

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain_n();
  v6 = v5(a2, a3);
  result = swift_unknownObjectRelease();
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    if (v6 + 1 >= 300)
      v8 = 300;
    else
      v8 = v6 + 1;
    v9 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 56))(v11, a2, a3);
    *(_QWORD *)v10 = v8;
    *(_BYTE *)(v10 + 8) = 0;
    v9(v11, 0);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #4 in closure #1 in TextStyleSelector.fontSizeStepper.getter()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  Swift::String v5;

  Image.init(systemName:)();
  v0 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  MEMORY[0x1DF0E23A0](v0);
  swift_getKeyPath();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._countAndFlagsBits = 0xD00000000000002ELL;
  v5._object = (void *)0x80000001DDF4CD00;
  v1._object = (void *)0x80000001DDF4CCE0;
  v1._countAndFlagsBits = 0xD000000000000012;
  v2.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TextStyleSelector.fontPicker.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  char **v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = v2;
  v50 = a2;
  v5 = type metadata accessor for ColorScheme();
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v7, v10);
  v13 = (char *)&v44 - v12;
  v14 = *(_QWORD *)(a1 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v11, v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>);
  v45 = *(_QWORD *)(v17 - 8);
  v46 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  MEMORY[0x1E0C80A78](v47, v25);
  v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  v28 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v29 + v28, (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  v30 = static Alignment.center.getter();
  v32 = specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(64.0, 0, 0.0, 1, 64.0, 0, 36.0, 0, (uint64_t)v24, 0.0, 1, 36.0, 0, v30, v31, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v20, v46, v32);
  specialized Environment.wrappedValue.getter((uint64_t)v13);
  v33 = v48;
  v34 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v9, *MEMORY[0x1E0CD86E0], v49);
  LOBYTE(v15) = static ColorScheme.== infix(_:_:)();
  v35 = *(void (**)(char *, uint64_t))(v33 + 8);
  v35(v9, v34);
  v35(v13, v34);
  v36 = (void *)objc_opt_self();
  v37 = &selRef_secondarySystemBackgroundColor;
  if ((v15 & 1) == 0)
    v37 = &selRef_tertiarySystemBackgroundColor;
  v38 = MEMORY[0x1DF0E23A0](objc_msgSend(v36, *v37));
  v39 = static Edge.Set.all.getter();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, (uint64_t)v27, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  v40 = &v27[*(int *)(v47 + 36)];
  *(_QWORD *)v40 = v38;
  v40[8] = v39;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>);
  v41 = v50;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v50, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
  v42 = v41
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)
               + 36);
  *(_QWORD *)v42 = 0x4014000000000000;
  *(_QWORD *)(v42 + 8) = -1;
  *(_WORD *)(v42 + 16) = 256;
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>);
}

uint64_t closure #1 in TextStyleSelector.fontPicker.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void (*v10)(uint64_t);
  uint64_t v11;

  v5 = type metadata accessor for TextStyleSelector(0, a2, a3, a4);
  v6 = a1 + *(int *)(v5 + 48);
  if (MEMORY[0x1DF0E666C](v6))
  {
    v7 = *(_QWORD *)(v6 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  else
  {
    v10 = *(void (**)(uint64_t))(a1 + *(int *)(v5 + 52));
    if (v10)
    {
      v11 = swift_retain();
      v10(v11);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
    }
    else
    {
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
      State.wrappedValue.getter();
      State.wrappedValue.setter();
      return swift_release();
    }
  }
}

uint64_t closure #2 in TextStyleSelector.fontPicker.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t result;

  v2 = Image.init(systemName:)();
  v3 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v4 = MEMORY[0x1DF0E23A0](v3);
  result = swift_getKeyPath();
  *a1 = v2;
  a1[1] = result;
  a1[2] = v4;
  return result;
}

uint64_t closure #1 in TextStyleSelector.colorControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t (**v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  Swift::Bool (__swiftcall **v28)(UIGestureRecognizer *__struct_ptr, UITouch);
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  void *v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v40 = a5;
  v36 = a2;
  v8 = type metadata accessor for TextStyleSelector(0, a2, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v37 = (char *)&v34 - v11;
  v38 = type metadata accessor for MultiColorSwatchButton(0);
  v13 = MEMORY[0x1E0C80A78](v38, v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16);
  v39 = (uint64_t)&v34 - v17;
  v35 = a1;
  ObservedObject.projectedValue.getter();
  v42 = a2;
  v43 = a3;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v18 = v49;
  v19 = (void *)v50;
  LOBYTE(a1) = BYTE8(v50);
  KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  v44 = v18;
  v45 = v19;
  v46 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Color>>);
  Binding.subscript.getter();

  swift_release();
  swift_release();
  swift_release();
  v20 = v47;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v34 = v48;
  v22 = v37;
  v21(v37, v35, v8);
  v23 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v36;
  *(_QWORD *)(v24 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, v22, v8);
  *(_QWORD *)v15 = swift_getKeyPath();
  v15[8] = 0;
  v25 = v38;
  v26 = (uint64_t *)&v15[*(int *)(v38 + 24)];
  *v26 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  swift_storeEnumTagMultiPayload();
  v27 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))&v15[*(int *)(v25 + 28)];
  *((_QWORD *)v15 + 2) = v20;
  *(_OWORD *)(v15 + 24) = v34;
  *v27 = partial apply for closure #1 in closure #1 in TextStyleSelector.colorControl.getter;
  v27[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24;
  v28 = (Swift::Bool (__swiftcall **)(UIGestureRecognizer *__struct_ptr, UITouch))&v15[*(int *)(v25 + 32)];
  *v28 = CanvasView.gestureRecognizer(_:shouldReceive:);
  v28[1] = 0;
  v29 = v39;
  outlined init with take of MultiColorSwatchButton((uint64_t)v15, v39);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v30 = v40;
  outlined init with copy of PKStrokeProperties(v29, v40, type metadata accessor for MultiColorSwatchButton);
  v31 = (_OWORD *)(v30
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<MultiColorSwatchButton, _FrameLayout>)
                          + 36));
  v32 = v50;
  *v31 = v49;
  v31[1] = v32;
  v31[2] = v51;
  return outlined destroy of PKStrokeProperties(v29, type metadata accessor for MultiColorSwatchButton);
}

uint64_t key path index equality operator for (WritableKeyPath<Color, CGColorRef>)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WritableKeyPath<Color, CGColorRef>);
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void key path getter for Inspected.subscript<A>(dynamicMember:) : Inspected<Color>ColorCGColorRef(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = *a1;
  swift_getAtKeyPath();

  *a2 = v4;
}

uint64_t key path setter for Inspected.subscript<A>(dynamicMember:) : Inspected<Color>ColorCGColorRef(void **a1, uint64_t a2)
{
  void *v3;
  id v4;
  uint64_t result;

  v3 = *a1;
  swift_retain();
  v4 = v3;
  swift_setAtWritableKeyPath();
  result = swift_release();
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t closure #1 in TextStyleSelector.textAlignment.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char v87;

  v67 = a4;
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v8 = MEMORY[0x1E0C80A78](v73, v7);
  v66 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v65 = (uint64_t)&v60 - v12;
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v64 = (uint64_t)&v60 - v15;
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v76 = (uint64_t)&v60 - v18;
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v63 = (char *)&v60 - v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v60 - v24;
  v27 = MEMORY[0x1E0C80A78](v23, v26);
  v29 = (char *)&v60 - v28;
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)&v60 - v31;
  v62 = Image.init(systemName:)();
  v74 = a2;
  v34 = type metadata accessor for TextStyleSelector(0, a2, a3, v33);
  v35 = *a1;
  v71 = a1[1];
  v72 = v35;
  v70 = *(_QWORD *)(v34 + 16);
  *(_QWORD *)&v75 = *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8);
  ObservedObject.projectedValue.getter();
  v83 = a2;
  v84 = a3;
  swift_getKeyPath();
  v69 = *(_QWORD *)(a3 + 8);
  v61 = a3;
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v60 = v85;
  v36 = v86;
  v37 = v87;
  KeyPath = swift_getKeyPath();
  v39 = v73;
  *(_QWORD *)&v32[*(int *)(v73 + 60)] = KeyPath;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *((_QWORD *)v32 + 4) = 0;
  *((_QWORD *)v32 + 5) = 0;
  v32[48] = 1;
  *(_OWORD *)(v32 + 56) = v60;
  *((_QWORD *)v32 + 9) = v36;
  v32[80] = v37;
  *(_QWORD *)v32 = v62;
  *((_QWORD *)v32 + 1) = 0;
  v32[16] = 1;
  *((_QWORD *)v32 + 3) = 5;
  v62 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  v81 = v74;
  v82 = a3;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v60 = v85;
  v40 = v86;
  v41 = v87;
  *(_QWORD *)&v29[*(int *)(v39 + 60)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *((_QWORD *)v29 + 5) = 0;
  v29[48] = 1;
  *(_OWORD *)(v29 + 56) = v60;
  *((_QWORD *)v29 + 9) = v40;
  v29[80] = v41;
  *(_QWORD *)v29 = v62;
  *((_QWORD *)v29 + 1) = 0;
  v29[16] = 1;
  *(_OWORD *)(v29 + 24) = xmmword_1DDF32D00;
  v62 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  v42 = v74;
  v43 = v61;
  v79 = v74;
  v80 = v61;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v60 = v85;
  v44 = v86;
  v45 = v87;
  v46 = swift_getKeyPath();
  v47 = v73;
  *(_QWORD *)&v25[*(int *)(v73 + 60)] = v46;
  swift_storeEnumTagMultiPayload();
  *((_QWORD *)v25 + 5) = 0;
  v25[48] = 1;
  *(_OWORD *)(v25 + 56) = v60;
  *((_QWORD *)v25 + 9) = v44;
  v25[80] = v45;
  *(_QWORD *)v25 = v62;
  *((_QWORD *)v25 + 1) = 0;
  v25[16] = 1;
  *(_OWORD *)(v25 + 24) = xmmword_1DDF32D10;
  v48 = Image.init(systemName:)();
  ObservedObject.projectedValue.getter();
  v77 = v42;
  v78 = v43;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v75 = v85;
  v49 = v86;
  LOBYTE(v42) = v87;
  v50 = swift_getKeyPath();
  v51 = *(int *)(v47 + 60);
  v52 = (uint64_t)v63;
  *(_QWORD *)&v63[v51] = v50;
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)(v52 + 40) = 0;
  *(_BYTE *)(v52 + 48) = 1;
  *(_OWORD *)(v52 + 56) = v75;
  *(_QWORD *)(v52 + 72) = v49;
  *(_BYTE *)(v52 + 80) = v42;
  *(_QWORD *)v52 = v48;
  *(_QWORD *)(v52 + 8) = 0;
  *(_BYTE *)(v52 + 16) = 1;
  *(_OWORD *)(v52 + 24) = xmmword_1DDF32D20;
  v53 = v76;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v32, v76, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v54 = v64;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v29, v64, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v55 = v65;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, v65, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v56 = v66;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v52, v66, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v57 = v67;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v53, v67, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  v58 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v54, v57 + v58[12], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v55, v57 + v58[16], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v56, v57 + v58[20], &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v52, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for ToggleButton<NSTextAlignment>);
}

uint64_t TextStyleSelector.colorControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t (*a5)(uint64_t, _QWORD, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a6 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return a5(v6, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t closure #1 in TextStyleSelector.textStyleControl.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  void (*v91)(uint64_t, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  int *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, char *, uint64_t);
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;

  v102 = a4;
  v124 = type metadata accessor for FontToggleStyle();
  MEMORY[0x1E0C80A78](v124, v7);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Toggle<Text>);
  v114 = *(_QWORD *)(v125 - 8);
  MEMORY[0x1E0C80A78](v125, v10);
  v110 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.toggleStyle<A>(_:)>>.0);
  v104 = *(_QWORD *)(v111 - 8);
  v13 = MEMORY[0x1E0C80A78](v111, v12);
  v101 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v99 = (char *)&v97 - v17;
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v122 = (char *)&v97 - v20;
  MEMORY[0x1E0C80A78](v19, v21);
  v126 = (char *)&v97 - v22;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v24 = MEMORY[0x1E0C80A78](v105, v23);
  v100 = (uint64_t)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v112 = (uint64_t)&v97 - v28;
  v30 = MEMORY[0x1E0C80A78](v27, v29);
  v113 = (uint64_t)&v97 - v31;
  MEMORY[0x1E0C80A78](v30, v32);
  v123 = (uint64_t)&v97 - v33;
  LocalizedStringKey.init(stringLiteral:)();
  v117 = v34;
  v108 = a2;
  v36 = type metadata accessor for TextStyleSelector(0, a2, a3, v35);
  v109 = a1;
  v120 = *(_QWORD *)(v36 + 16);
  v119 = *(_QWORD *)(*(_QWORD *)(v36 + 24) + 8);
  ObservedObject.projectedValue.getter();
  v133 = a2;
  v134 = a3;
  swift_getKeyPath();
  v121 = *(_QWORD *)(a3 + 8);
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v38 = v139;
  v37 = v140;
  LOBYTE(a1) = v141;
  v39 = v142;
  swift_getKeyPath();
  v135 = v38;
  v136 = v37;
  v137 = a1;
  v138 = v39;
  v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<Bool>>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v40 = v110;
  Toggle<>.init(_:isOn:)();
  *(_QWORD *)&v9[*(int *)(v124 + 24)] = swift_getKeyPath();
  v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v9 = 1684828002;
  *((_QWORD *)v9 + 1) = 0xE400000000000000;
  *((_QWORD *)v9 + 2) = 5;
  v116 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Toggle<Text> and conformance Toggle<A>, &demangling cache variable for type metadata for Toggle<Text>, MEMORY[0x1E0CDFC78]);
  v115 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontToggleStyle and conformance FontToggleStyle, (uint64_t (*)(uint64_t))type metadata accessor for FontToggleStyle, (uint64_t)&protocol conformance descriptor for FontToggleStyle);
  v41 = v125;
  v42 = v126;
  View.toggleStyle<A>(_:)();
  outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FontToggleStyle);
  v114 = *(_QWORD *)(v114 + 8);
  ((void (*)(char *, uint64_t))v114)(v40, v41);
  v103 = a3;
  v43 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 208);
  swift_unknownObjectRetain();
  v44 = v108;
  LOBYTE(v43) = v43(v108, a3);
  swift_unknownObjectRelease();
  KeyPath = swift_getKeyPath();
  v46 = swift_allocObject();
  *(_BYTE *)(v46 + 16) = (v43 & 1) == 0;
  v47 = v104;
  v106 = *(void (**)(uint64_t, char *, uint64_t))(v104 + 16);
  v48 = v113;
  v49 = v42;
  v50 = v42;
  v51 = v111;
  v106(v113, v50, v111);
  v52 = (uint64_t *)(v48 + *(int *)(v105 + 36));
  *v52 = KeyPath;
  v52[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v52[2] = v46;
  v107 = *(void (**)(char *, uint64_t))(v47 + 8);
  v107(v49, v51);
  outlined init with take of (key: Int, value: AnyCRValue)?(v48, v123, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  LocalizedStringKey.init(stringLiteral:)();
  v98 = v53;
  ObservedObject.projectedValue.getter();
  v54 = v103;
  v131 = v44;
  v132 = v103;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v55 = v139;
  v56 = v140;
  LOBYTE(a1) = v141;
  LOBYTE(v49) = v142;
  swift_getKeyPath();
  v135 = v55;
  v136 = v56;
  v137 = a1;
  v138 = (char)v49;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v57 = v110;
  Toggle<>.init(_:isOn:)();
  *(_QWORD *)&v9[*(int *)(v124 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v9 = 0x63696C617469;
  *((_QWORD *)v9 + 1) = 0xE600000000000000;
  *((_QWORD *)v9 + 2) = 0;
  v58 = v125;
  v59 = v126;
  View.toggleStyle<A>(_:)();
  outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FontToggleStyle);
  ((void (*)(char *, uint64_t))v114)(v57, v58);
  v60 = *(uint64_t (**)(uint64_t, uint64_t))(v54 + 216);
  swift_unknownObjectRetain();
  v61 = v108;
  v62 = v54;
  LOBYTE(v60) = v60(v108, v54);
  swift_unknownObjectRelease();
  v63 = swift_getKeyPath();
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = (v60 & 1) == 0;
  v65 = v112;
  v66 = v111;
  v106(v112, v59, v111);
  v67 = (uint64_t *)(v65 + *(int *)(v105 + 36));
  *v67 = v63;
  v67[1] = (uint64_t)closure #1 in View.disabled(_:)partial apply;
  v67[2] = v64;
  v68 = v66;
  v107(v59, v66);
  outlined init with take of (key: Int, value: AnyCRValue)?(v65, v113, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v105 = LocalizedStringKey.init(stringLiteral:)();
  v98 = v69;
  ObservedObject.projectedValue.getter();
  v129 = v61;
  v130 = v62;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v70 = v139;
  v71 = v140;
  LOBYTE(v57) = v141;
  LOBYTE(v65) = v142;
  swift_getKeyPath();
  v135 = v70;
  v136 = v71;
  v137 = (char)v57;
  v138 = v65;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  v72 = v110;
  Toggle<>.init(_:isOn:)();
  *(_QWORD *)&v9[*(int *)(v124 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)v9 = 0x6E696C7265646E75;
  *((_QWORD *)v9 + 1) = 0xE900000000000065;
  *((_QWORD *)v9 + 2) = 0;
  v73 = v122;
  v74 = v125;
  View.toggleStyle<A>(_:)();
  outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FontToggleStyle);
  v75 = v72;
  ((void (*)(char *, uint64_t))v114)(v72, v74);
  v105 = *(_QWORD *)(v104 + 32);
  ((void (*)(char *, char *, uint64_t))v105)(v126, v73, v68);
  LocalizedStringKey.init(stringLiteral:)();
  v104 = v76;
  ObservedObject.projectedValue.getter();
  v127 = v108;
  v128 = v103;
  swift_getKeyPath();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_unknownObjectRelease();
  v77 = v139;
  v78 = v140;
  LOBYTE(v57) = v141;
  LOBYTE(v74) = v142;
  swift_getKeyPath();
  v135 = v77;
  v136 = v78;
  v137 = (char)v57;
  v138 = v74;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  Toggle<>.init(_:isOn:)();
  *(_QWORD *)&v9[*(int *)(v124 + 24)] = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  strcpy(v9, "strikethrough");
  *((_WORD *)v9 + 7) = -4864;
  *((_QWORD *)v9 + 2) = 10;
  v79 = v99;
  v80 = v125;
  View.toggleStyle<A>(_:)();
  outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for FontToggleStyle);
  ((void (*)(char *, uint64_t))v114)(v75, v80);
  v81 = v122;
  v82 = v111;
  ((void (*)(char *, char *, uint64_t))v105)(v122, v79, v111);
  v83 = v112;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v123, v112, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v84 = v113;
  v85 = v100;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v113, v100, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v86 = v79;
  v87 = v79;
  v88 = v126;
  v89 = (void (*)(char *, char *, uint64_t))v106;
  v106((uint64_t)v86, v126, v82);
  v90 = v101;
  v89(v101, v81, v82);
  v91 = (void (*)(uint64_t, char *, uint64_t))v89;
  v92 = v83;
  v93 = v102;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v92, v102, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v94 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v85, v93 + v94[12], &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v91(v93 + v94[16], v87, v82);
  v91(v93 + v94[20], v90, v82);
  v95 = v107;
  v107(v122, v82);
  v95(v88, v82);
  outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v123, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  v95(v90, v82);
  v95(v87, v82);
  outlined destroy of StocksKitCurrencyCache.Provider?(v85, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v112, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>);
}

uint64_t TextStyleSelector.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _DWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char v79;
  uint64_t v80;

  v73 = a2;
  v74 = type metadata accessor for PresentationAdaptation();
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v3);
  v71 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for PopoverAttachmentAnchor();
  v68 = *(_QWORD *)(v70 - 8);
  v6 = MEMORY[0x1E0C80A78](v70, v5);
  v8 = *(_QWORD *)(a1 - 8);
  v65 = *(_QWORD *)(v8 + 64);
  v66 = (uint64_t *)((char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6, v9);
  v64 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  v60 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0);
  v69 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v23);
  v63 = (char *)v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v14 + 1) = 0x4028000000000000;
  v14[16] = 0;
  v25 = (uint64_t)&v14[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image,)
                             + 44)];
  v26 = *(_QWORD *)(a1 + 16);
  v62 = *(_QWORD *)(a1 + 24);
  closure #1 in TextStyleSelector.body.getter(v26, v62, v25);
  v27 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v14, (uint64_t)v18, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  v36 = &v18[*(int *)(v15 + 36)];
  *v36 = v27;
  *((_QWORD *)v36 + 1) = v29;
  *((_QWORD *)v36 + 2) = v31;
  *((_QWORD *)v36 + 3) = v33;
  *((_QWORD *)v36 + 4) = v35;
  v36[40] = 0;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModif);
  v37 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
  v38 = MEMORY[0x1DF0E23A0](v37);
  LOBYTE(v15) = static Edge.Set.all.getter();
  v61 = v22;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, (uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  v39 = &v22[*(int *)(v19 + 36)];
  *(_QWORD *)v39 = v38;
  v39[8] = v15;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _Environmen);
  v40 = v59;
  v41 = *(_QWORD *)(v59 + 40);
  v79 = *(_BYTE *)(v59 + 32);
  v80 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v58[1] = v77;
  v42 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v64, v40, a1);
  v43 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v44 = swift_allocObject();
  v45 = v62;
  *(_QWORD *)(v44 + 16) = v26;
  *(_QWORD *)(v44 + 24) = v45;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v44 + v43, v42, a1);
  v46 = type metadata accessor for FontPicker(0);
  v64 = (char *)lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Imag();
  v65 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  v47 = static Anchor.Source<A>.bounds.getter();
  v48 = v66;
  *v66 = v47;
  v49 = v68;
  v50 = v70;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v68 + 104))(v48, *MEMORY[0x1E0CDC3D0], v70);
  v51 = v63;
  v52 = v60;
  v53 = v46;
  v54 = (uint64_t)v61;
  View.popover<A>(isPresented:attachmentAnchor:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v49 + 8))(v48, v50);
  outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  v55 = v71;
  static PresentationAdaptation.popover.getter();
  v75 = v52;
  v76 = v53;
  v77 = v64;
  v78 = v65;
  swift_getOpaqueTypeConformance2();
  v56 = v67;
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v55, v74);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v51, v56);
}

uint64_t closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v37 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v36 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v36 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v36 - v27;
  *(_QWORD *)v28 = static VerticalAlignment.center.getter();
  *((_QWORD *)v28 + 1) = 0;
  v28[16] = 1;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  closure #1 in closure #1 in TextStyleSelector.body.getter(a1, a2, (uint64_t)&v28[*(int *)(v29 + 44)]);
  *(_QWORD *)v20 = static VerticalAlignment.center.getter();
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<Mod);
  closure #2 in closure #1 in TextStyleSelector.body.getter(a1, a2, (uint64_t)&v20[*(int *)(v30 + 44)]);
  v32 = type metadata accessor for TextStyleSelector(0, a1, a2, v31);
  TextStyleSelector.colorControl.getter(v32, 0x4000000000000000, 0, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>, (uint64_t (*)(uint64_t, _QWORD, _QWORD))closure #1 in TextStyleSelector.textAlignment.getter, (uint64_t)v12);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v28, (uint64_t)v25, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v20, (uint64_t)v17, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  v33 = v37;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, v37, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, Acc);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v33 + *(int *)(v34 + 48), &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, v33 + *(int *)(v34 + 64), &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for HStack<TupleView<(ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>, ToggleButton<NSTextAlignment>)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedConten);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>);
}

uint64_t closure #1 in closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v26 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v19);
  v21 = (char *)&v26 - v20;
  v23 = type metadata accessor for TextStyleSelector(0, a1, a2, v22);
  TextStyleSelector.colorControl.getter(v23, 0x4000000000000000, 0, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, (uint64_t (*)(uint64_t, _QWORD, _QWORD))closure #1 in TextStyleSelector.textStyleControl.getter, (uint64_t)v21);
  TextStyleSelector.colorControl.getter(v23, 0, 1, &demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, ModifiedContent<MultiColorSwatchButton, _FrameLayout>>, (uint64_t (*)(uint64_t, _QWORD, _QWORD))closure #1 in TextStyleSelector.colorControl.getter, (uint64_t)v13);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, a3, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, a3 + *(int *)(v24 + 48), &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>);
}

uint64_t closure #2 in closure #1 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v33 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v33 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v33 - v27;
  v30 = type metadata accessor for TextStyleSelector(0, a1, v34, v29);
  TextStyleSelector.fontSizeMenu.getter(v30, (uint64_t)v28);
  TextStyleSelector.fontSizeStepper.getter(v30, (uint64_t)v20);
  TextStyleSelector.fontPicker.getter(v30, (uint64_t)v12);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v28, (uint64_t)v25, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v20, (uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, a3, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<Button<Modified);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, a3 + *(int *)(v31 + 48), &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, a3 + *(int *)(v31 + 64), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>)>>, _PaddingLayout>);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
}

uint64_t closure #2 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  double v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t *v24;
  uint64_t result;
  uint64_t (**v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;

  v27 = a1;
  v28 = a5;
  v7 = type metadata accessor for TextStyleSelector(0, a2, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v27 - v10;
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 16);
  swift_unknownObjectRetain();
  v13 = v12(a2, a3);
  v15 = v14;
  swift_unknownObjectRelease();
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain();
  v17 = v16(a2, a3);
  swift_unknownObjectRelease();
  v18 = (double)v17;
  v19 = (void *)MEMORY[0x1DF0E41AC](v13, v15);
  swift_bridgeObjectRelease();
  v20 = objc_msgSend((id)objc_opt_self(), sel_fontDescriptorWithName_size_, v19, v18);

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v27, v7);
  v21 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v11, v7);
  KeyPath = swift_getKeyPath();
  v24 = v28;
  *v28 = KeyPath;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  swift_storeEnumTagMultiPayload();
  result = type metadata accessor for FontPicker(0);
  *(uint64_t *)((char *)v24 + *(int *)(result + 20)) = (uint64_t)v20;
  v26 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v24 + *(int *)(result + 24));
  *v26 = partial apply for closure #1 in closure #2 in TextStyleSelector.body.getter;
  v26[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22;
  return result;
}

uint64_t closure #1 in closure #2 in TextStyleSelector.body.getter(uint64_t a1)
{
  void *v2;
  PaperKit::Font from;
  PaperKit::Font v5;

  v2 = (void *)objc_opt_self();
  swift_unknownObjectRetain();
  Font.init(_:)(&v5, (UIFont)objc_msgSend(v2, sel_fontWithDescriptor_size_, a1, 0.0));
  from._name.value._countAndFlagsBits = v5._name.value._countAndFlagsBits;
  *(_OWORD *)&from._name.value._object = *(_OWORD *)&v5._name.value._object;
  from._familyName.value._object = v5._familyName.value._object;
  from.pointSize = v5.pointSize;
  from.traits.rawValue = v5.traits.rawValue;
  TextFormattingState.update(from:shouldUseStyle:)(&from, 0);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall FontPicker.Coordinator.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  UIFontDescriptor *v14;
  UIFontDescriptor *v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for PresentationMode();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FontPicker(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = -[UIFontPickerViewController selectedFontDescriptor](a1, sel_selectedFontDescriptor);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(void))(v2 + OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_pickedFont))();

  }
  outlined init with copy of PKStrokeProperties(v2 + OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_parent, (uint64_t)v13, type metadata accessor for FontPicker);
  specialized Environment.wrappedValue.getter((uint64_t)v9);
  outlined destroy of PKStrokeProperties((uint64_t)v13, type metadata accessor for FontPicker);
  MEMORY[0x1DF0E24B4](v6);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Binding<PresentationMode>);
}

id FontPicker.Coordinator.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for FontPicker.Coordinator);
}

uint64_t ObjC metadata update function for FontPicker.Coordinator()
{
  return type metadata accessor for FontPicker.Coordinator(0);
}

uint64_t type metadata accessor for FontPicker.Coordinator(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for FontPicker.Coordinator);
}

uint64_t type metadata completion function for FontPicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FontPicker.Coordinator(a1, a2, a3, type metadata accessor for FontPicker);
}

uint64_t type metadata accessor for FontPicker(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for FontPicker);
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance FontPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  void *v6;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3800]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewControllerRepresentableContext<FontPicker>);
  UIViewControllerRepresentableContext.coordinator.getter();
  objc_msgSend(v4, sel_setDelegate_, v6);

  objc_msgSend(v4, sel_setSelectedFontDescriptor_, *(_QWORD *)(v2 + *(int *)(a2 + 20)));
  return v4;
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontPicker@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontPicker(a1, a2, type metadata accessor for FontPicker, type metadata accessor for FontPicker.Coordinator, &OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_parent, &OBJC_IVAR____TtCV8PaperKit10FontPicker11Coordinator_pickedFont, a3);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FontPicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  return static UIViewControllerRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FontPicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance FontPicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  UIViewControllerRepresentable.body.getter();
  __break(1u);
}

id FontSizePicker.makeUIViewController(context:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  id v3;
  void *v5;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FontSizePicker(0) + 20));
  if (one-time initialization token for textBoxFontUnitString != -1)
    swift_once();
  v2 = static UIConstants.textBoxFontUnitString;
  objc_allocWithZone((Class)type metadata accessor for FontSizeViewController());
  swift_bridgeObjectRetain();
  v3 = ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(5, 300, v1, v2, *((uint64_t *)&v2 + 1), 0.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewControllerRepresentableContext<FontSizePicker>);
  UIViewControllerRepresentableContext.coordinator.getter();
  swift_unknownObjectWeakAssign();

  return v3;
}

id FontSizePicker.Coordinator.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for FontSizePicker.Coordinator);
}

id FontPicker.Coordinator.__deallocating_deinit(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc FontPicker.Coordinator.__ivar_destroyer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  outlined destroy of PKStrokeProperties(a1 + *a3, a4);
  return swift_release();
}

uint64_t ObjC metadata update function for FontSizePicker.Coordinator()
{
  return type metadata accessor for FontSizePicker.Coordinator(0);
}

uint64_t type metadata accessor for FontSizePicker.Coordinator(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for FontSizePicker.Coordinator);
}

uint64_t type metadata completion function for FontSizePicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for FontPicker.Coordinator(a1, a2, a3, type metadata accessor for FontSizePicker);
}

uint64_t type metadata completion function for FontPicker.Coordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for FontSizePicker(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for FontSizePicker);
}

void type metadata completion function for TextStyleSelector()
{
  unint64_t v0;

  type metadata accessor for Environment<ColorScheme>.Content();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for TextStyleSelector(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    v8 = a3[11];
    v9 = (_QWORD *)(a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    *(_QWORD *)(a1 + 40) = a2[5];
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      *v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = (uint64_t)a2 + a3[12];
    *(_QWORD *)(swift_unknownObjectWeakCopyInit() + 8) = *(_QWORD *)(v13 + 8);
    v14 = a3[13];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    if (*v16)
    {
      v17 = v16[1];
      *v15 = *v16;
      v15[1] = v17;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    v18 = a3[14];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    if (*v20)
    {
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
  }
  return a1;
}

uint64_t destroy for TextStyleSelector(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v4 = a1 + a2[11];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  result = swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(a1 + a2[13]))
    result = swift_release();
  if (*(_QWORD *)(a1 + a2[14]))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v7 = a3[11];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = type metadata accessor for ColorScheme();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = a2 + a3[12];
  *(_QWORD *)(swift_unknownObjectWeakCopyInit() + 8) = *(_QWORD *)(v11 + 8);
  v12 = a3[13];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  if (*v14)
  {
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  v16 = a3[14];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  if (*v18)
  {
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  return a1;
}

uint64_t assignWithCopy for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    v6 = a3[11];
    v7 = (_QWORD *)(a1 + v6);
    v8 = (_QWORD *)(a2 + v6);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v6, (uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = type metadata accessor for ColorScheme();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v10 = a2 + a3[12];
  *(_QWORD *)(swift_unknownObjectWeakCopyAssign() + 8) = *(_QWORD *)(v10 + 8);
  v11 = a3[13];
  v12 = (_QWORD *)(a1 + v11);
  v13 = a2 + v11;
  v14 = *(_QWORD *)(a1 + v11);
  v15 = *(_QWORD *)(a2 + v11);
  if (v14)
  {
    if (v15)
    {
      v16 = *(_QWORD *)(v13 + 8);
      *v12 = v15;
      v12[1] = v16;
      swift_retain();
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v15)
  {
    v17 = *(_QWORD *)(v13 + 8);
    *v12 = v15;
    v12[1] = v17;
    swift_retain();
    goto LABEL_13;
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
LABEL_13:
  v18 = a3[14];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *(_QWORD *)(a1 + v18);
  v22 = *v20;
  if (!v21)
  {
    if (v22)
    {
      v24 = v20[1];
      *v19 = v22;
      v19[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_19:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_19;
  }
  v23 = v20[1];
  *v19 = v22;
  v19[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for TextStyleSelector(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[11];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = (char *)a2 + a3[12];
  *(_QWORD *)(swift_unknownObjectWeakTakeInit() + 8) = *((_QWORD *)v12 + 1);
  v13 = a3[13];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = *v15;
  if (*v15)
  {
    v17 = v15[1];
    *v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  v18 = a3[14];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  v21 = *v20;
  if (*v20)
  {
    v22 = v20[1];
    *v19 = v21;
    v19[1] = v22;
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  return a1;
}

uint64_t assignWithTake for TextStyleSelector(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_unknownObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  if (a1 != a2)
  {
    v7 = a3[11];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(a1 + v7, (uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a2 + a3[12];
  *(_QWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_QWORD *)(v12 + 8);
  v13 = a3[13];
  v14 = (_QWORD *)(a1 + v13);
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13);
  v17 = *(_QWORD *)(a2 + v13);
  if (v16)
  {
    if (v17)
    {
      v18 = *(_QWORD *)(v15 + 8);
      *v14 = v17;
      v14[1] = v18;
      swift_release();
      goto LABEL_12;
    }
    swift_release();
  }
  else if (v17)
  {
    v19 = *(_QWORD *)(v15 + 8);
    *v14 = v17;
    v14[1] = v19;
    goto LABEL_12;
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
LABEL_12:
  v20 = a3[14];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *(_QWORD *)(a1 + v20);
  v24 = *v22;
  if (!v23)
  {
    if (v24)
    {
      v26 = v22[1];
      *v21 = v24;
      v21[1] = v26;
      return a1;
    }
LABEL_18:
    *(_OWORD *)v21 = *(_OWORD *)v22;
    return a1;
  }
  if (!v24)
  {
    swift_release();
    goto LABEL_18;
  }
  v25 = v22[1];
  *v21 = v24;
  v21[1] = v25;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextStyleSelector()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5A440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TextStyleSelector()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5A4CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<ColorScheme>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TextStyleSelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextStyleSelector);
}

uint64_t *initializeBufferWithCopyOfBuffer for FontSizePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for FontSizePicker(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    v4 = type metadata accessor for PresentationMode();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  return swift_release();
}

_QWORD *initializeWithCopy for FontSizePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FontSizePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  v11 = *(int *)(a3 + 24);
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for FontSizePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontSizePicker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5AA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FontSizePicker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5AAA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void type metadata completion function for FontSizePicker()
{
  type metadata completion function for FontSizePicker();
}

{
  unint64_t v0;

  type metadata accessor for Published<Inspected<String>>(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Binding<PresentationMode>>.Content, &demangling cache variable for type metadata for Binding<PresentationMode>, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CD87D0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Published<Inspected<String>>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FontPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *v4 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v4[1] = a2[1];
      swift_retain();
      swift_retain();
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v9 = (char *)v4 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = *(int *)(a3 + 20);
    v14 = *(int *)(a3 + 24);
    v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = (uint64_t)v15;
    v16 = (uint64_t *)((char *)v4 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FontPicker(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_release();
  if (EnumCaseMultiPayload == 1)
  {
    swift_release();
    v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    v6 = type metadata accessor for PresentationMode();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }

  return swift_release();
}

_QWORD *initializeWithCopy for FontPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v11 = *(int *)(a3 + 20);
  v12 = *(int *)(a3 + 24);
  v13 = *(void **)((char *)a2 + v11);
  *(_QWORD *)((char *)a1 + v11) = v13;
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v13;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for FontPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v11 = *(int *)(a3 + 20);
  v12 = *(void **)((char *)a2 + v11);
  v13 = *(void **)((char *)a1 + v11);
  *(_QWORD *)((char *)a1 + v11) = v12;
  v14 = v12;

  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for FontSizePicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

_QWORD *assignWithTake for FontPicker(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a1 != a2)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)a1, &demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<PresentationMode>)
                  + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);

  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FontPicker()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5B150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for FontPicker()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB5B1DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void type metadata completion function for FontPicker()
{
  type metadata completion function for FontSizePicker();
}

uint64_t associated type witness table accessor for View.Body : View in FontPicker()
{
  return MEMORY[0x1E0CE0788];
}

uint64_t base witness table accessor for View in FontPicker()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontSizePicker@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontPicker(a1, a2, type metadata accessor for FontSizePicker, type metadata accessor for FontSizePicker.Coordinator, &OBJC_IVAR____TtCV8PaperKit14FontSizePicker11Coordinator_parent, &OBJC_IVAR____TtCV8PaperKit14FontSizePicker11Coordinator_pickedSize, a3);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance FontPicker@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  char *v21;
  char *v22;
  id v23;
  uint64_t result;
  objc_super v25;

  MEMORY[0x1E0C80A78](a1, a2);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(v7, (uint64_t)v15, v16);
  v17 = (uint64_t *)(v7 + *(int *)(a1 + 24));
  v19 = *v17;
  v18 = v17[1];
  v20 = (objc_class *)a4(0);
  v21 = (char *)objc_allocWithZone(v20);
  outlined init with copy of PKStrokeProperties((uint64_t)v15, (uint64_t)&v21[*a5], a3);
  v22 = &v21[*a6];
  *(_QWORD *)v22 = v19;
  *((_QWORD *)v22 + 1) = v18;
  v25.receiver = v21;
  v25.super_class = v20;
  swift_retain();
  v23 = objc_msgSendSuper2(&v25, sel_init);
  result = outlined destroy of PKStrokeProperties((uint64_t)v15, a3);
  *a7 = v23;
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:) in conformance FontPicker()
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance FontSizePicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, type metadata accessor for FontSizePicker, (uint64_t)&protocol conformance descriptor for FontSizePicker);
  return static UIViewControllerRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance FontSizePicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, type metadata accessor for FontSizePicker, (uint64_t)&protocol conformance descriptor for FontSizePicker);
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance FontSizePicker()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, type metadata accessor for FontSizePicker, (uint64_t)&protocol conformance descriptor for FontSizePicker);
  UIViewControllerRepresentable.body.getter();
  __break(1u);
}

uint64_t base witness table accessor for View in FontSizePicker()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontSizePicker and conformance FontSizePicker, type metadata accessor for FontSizePicker, (uint64_t)&protocol conformance descriptor for FontSizePicker);
}

uint64_t associated type witness table accessor for View.Body : View in TextStyleSelector<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for TextStyleSelectorModel(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextStyleSelectorModel and conformance TextStyleSelectorModel, type metadata accessor for TextStyleSelectorModel, (uint64_t)&protocol conformance descriptor for TextStyleSelectorModel);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in TextStyleSelectorModel()
{
  return MEMORY[0x1E0C96020];
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, v12, v13);
  }
  else
  {
    v15 = static os_log_type_t.fault.getter();
    v16 = static Log.runtimeIssuesLog.getter();
    v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v21[1] = a1;
      v20 = v19;
      v22 = v19;
      *(_DWORD *)v18 = 136315138;
      v21[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x686353726F6C6F43, 0xEB00000000656D65, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v20, -1, -1);
      MEMORY[0x1DF0E6558](v18, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, (uint64_t)v12, &demangling cache variable for type metadata for Environment<Binding<PresentationMode>>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, a1, &demangling cache variable for type metadata for Binding<PresentationMode>);
  v14 = static os_log_type_t.fault.getter();
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20[1] = a1;
    v19 = v18;
    v21 = v18;
    *(_DWORD *)v17 = 136315138;
    v20[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001DDF4CDA0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v19, -1, -1);
    MEMORY[0x1DF0E6558](v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v12, v4);
  v14 = static os_log_type_t.fault.getter();
  v15 = static Log.runtimeIssuesLog.getter();
  v16 = v14;
  if (os_log_type_enabled(v15, v14))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20[1] = a1;
    v19 = v18;
    v21 = v18;
    *(_DWORD *)v17 = 136315138;
    v20[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x80000001DDF4CE00, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v19, -1, -1);
    MEMORY[0x1DF0E6558](v17, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  if ((a2 & 1) == 0)
  {
    v9 = static os_log_type_t.fault.getter();
    v10 = static Log.runtimeIssuesLog.getter();
    v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16 = v13;
      *(_DWORD *)v12 = 136315138;
      v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x80000001DDF4CDE0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v13, -1, -1);
      MEMORY[0x1DF0E6558](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<MiniMenuController?>.Content(a1, 0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return v16;
  }
  return a1;
}

uint64_t key path getter for TextStyleSelectorModel.fontName : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontName : TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.fontSize : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontSize : TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t key path getter for TextStyleSelectorModel.fontColor : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.fontColor : TextStyleSelectorModel(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_1DDB5C2C0@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_1DDB5C2E4()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_1DDB5C308@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_1DDB5C32C()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_1DDB5C350@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_1DDB5C374()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t sub_1DDB5C398@<X0>(_BYTE *a1@<X8>)
{
  return key path getter for TextStyleSelectorModel.bold : TextStyleSelectorModel(a1);
}

uint64_t sub_1DDB5C3BC()
{
  return key path setter for TextStyleSelectorModel.bold : TextStyleSelectorModel();
}

uint64_t key path getter for TextStyleSelectorModel.textAlignment : TextStyleSelectorModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for TextStyleSelectorModel.textAlignment : TextStyleSelectorModel()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t partial apply for closure #2 in TextStyleSelector.body.getter@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextStyleSelector(0, v4, v5, a1) - 8) + 80);
  return closure #2 in TextStyleSelector.body.getter(v2 + ((v6 + 32) & ~v6), v4, v5, v7, a2);
}

uint64_t key path getter for EnvironmentValues.presentationMode : EnvironmentValues()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t partial apply for closure #1 in closure #2 in TextStyleSelector.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for TextStyleSelector(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return closure #1 in closure #2 in TextStyleSelector.body.getter(a1);
}

uint64_t sub_1DDB5C77C()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1DDB5C79C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;
  char v5;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(*(_QWORD *)(a2 + a1 - 16));
  *(_QWORD *)a3 = result;
  *(_BYTE *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_1DDB5C7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 72))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1DDB5C818()
{
  return 16;
}

__n128 sub_1DDB5C824(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontPicker.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in TextStyleSelector.fontPicker.getter, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x1E0CDCF80]);
    v3[0] = MEMORY[0x1E0CDF820];
    v3[1] = v2;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1DDB5C8CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1DDB5C8F4()
{
  swift_retain();
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter(closure #1 in closure #1 in TextStyleSelector.fontSizeStepper.getter, a2, a3, a4);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in TextStyleSelector.fontPicker.getter(closure #3 in closure #1 in TextStyleSelector.fontSizeStepper.getter, a2, a3, a4);
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontPicker.getter(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextStyleSelector(0, v5, v6, a4) - 8) + 80);
  return a1(v4 + ((v7 + 32) & ~v7), v5, v6);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB1A68], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t partial apply for closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in TextStyleSelector.fontSizeMenu.getter(v2[4], v2[2], v2[3], a1, a2);
}

uint64_t partial apply for closure #2 in TextStyleSelector.fontSizeMenu.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in TextStyleSelector.fontSizeMenu.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E0CDCF80]);
    v3[0] = MEMORY[0x1E0CDDD58];
    v3[1] = v2;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, Button<Text>>);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>, MEMORY[0x1E0CDFA58]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDFEE8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, Button<Text>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t sub_1DDB5CC94@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1DDB5CCBC()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_1DDB5CCE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1DDB5CD08()
{
  swift_retain();
  return EnvironmentValues.font.setter();
}

uint64_t sub_1DDB5CD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (int *)type metadata accessor for TextStyleSelector(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v4 + ((v6 + 56) & ~v6);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v8 = v7 + v5[11];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(v7 + v5[13]))
    swift_release();
  if (*(_QWORD *)(v7 + v5[14]))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = v3[2];
  v7 = v3[3];
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TextStyleSelector(0, v6, v7, a2) - 8) + 80);
  return closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(a1, v3[6], (uint64_t)v3 + ((v8 + 56) & ~v8), v6, v7, a3);
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v2 = lazy protocol witness table accessor for type Int and conformance Int();
    v3[0] = MEMORY[0x1E0DEB458];
    v3[1] = v2;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEB8B8], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t sub_1DDB5CF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (int *)type metadata accessor for TextStyleSelector(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = v4
     + ((*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80));
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v7 = v6 + v5[11];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(v6 + v5[13]))
    swift_release();
  if (*(_QWORD *)(v6 + v5[14]))
    swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = *(_QWORD *)(type metadata accessor for TextStyleSelector(0, v5, v6, a4) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in closure #1 in TextStyleSelector.fontSizeMenu.getter(v4 + v8, *(_QWORD *)(v4 + v9), *(_QWORD *)(v4 + ((v9 + 15) & 0xFFFFFFFFFFFFF8)), v5, v6);
}

_QWORD *sub_1DDB5D104@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *result;
  char v5;
  uint64_t v6;
  char v7;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 184))(&v6, *(_QWORD *)(a2 + a1 - 16));
  v5 = v7;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 8) = v5;
  return result;
}

uint64_t sub_1DDB5D154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t (*v7)(id *, uint64_t, uint64_t);
  id v8;
  id v10;
  char v11;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = *(_BYTE *)(a1 + 8);
  v10 = *(id *)a1;
  v11 = v6;
  v7 = *(uint64_t (**)(id *, uint64_t, uint64_t))(v5 + 192);
  v8 = v10;
  return v7(&v10, v4, v5);
}

uint64_t sub_1DDB5D1B0()
{
  return 16;
}

__n128 sub_1DDB5D1BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DDB5D1D8()
{
  return 8;
}

uint64_t sub_1DDB5D1E4()
{
  return swift_release();
}

uint64_t sub_1DDB5D1EC(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1DDB5D1FC()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WritableKeyPath<Color, CGColorRef>);
  return dispatch thunk of Hashable.hashValue.getter();
}

_QWORD *sub_1DDB5D240(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t objectdestroyTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (int *)type metadata accessor for TextStyleSelector(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  v7 = v4 + ((v6 + 32) & ~v6);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v8 = v7 + v5[11];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<ColorScheme>.Content);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(_QWORD *)(v7 + v5[13]))
    swift_release();
  if (*(_QWORD *)(v7 + v5[14]))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextStyleSelector.colorControl.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t (**v7)(void);

  result = type metadata accessor for TextStyleSelector(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
  v7 = (uint64_t (**)(void))(v4 + *(int *)(result + 56) + ((v6 + 32) & ~v6));
  if (*v7)
    return (*v7)();
  return result;
}

uint64_t outlined init with take of MultiColorSwatchButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiColorSwatchButton(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDB5D3F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 88))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1DDB5D438(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v4 = *(_QWORD *)(a4 + a3 - 8);
  if (a1[1])
    v6 = 256;
  else
    v6 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 96))(v6 | *a1, v5);
}

uint64_t sub_1DDB5D480()
{
  return 16;
}

__n128 sub_1DDB5D48C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_BYTE *sub_1DDB5D498@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned __int8 *sub_1DDB5D4A4(unsigned __int8 *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1DDB5D4B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DDB5D4E0()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_1DDB5D504()
{
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in View.disabled(_:)(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_1DDB5D52C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 112))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1DDB5D570(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v4 = *(_QWORD *)(a4 + a3 - 8);
  if (a1[1])
    v6 = 256;
  else
    v6 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 120))(v6 | *a1, v5);
}

uint64_t sub_1DDB5D5B8()
{
  return 16;
}

__n128 sub_1DDB5D5C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DDB5D5D0()
{
  return swift_deallocObject();
}

uint64_t sub_1DDB5D5E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 136))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1DDB5D624(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v4 = *(_QWORD *)(a4 + a3 - 8);
  if (a1[1])
    v6 = 256;
  else
    v6 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 144))(v6 | *a1, v5);
}

uint64_t sub_1DDB5D66C()
{
  return 16;
}

__n128 sub_1DDB5D678(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DDB5D684@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 160))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_1DDB5D6C8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)(a4 + a3 - 16);
  v4 = *(_QWORD *)(a4 + a3 - 8);
  if (a1[1])
    v6 = 256;
  else
    v6 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))(v4 + 168))(v6 | *a1, v5);
}

uint64_t sub_1DDB5D710()
{
  return 16;
}

__n128 sub_1DDB5D71C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1DDB5D728()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Im);
  type metadata accessor for FontPicker(255);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(HStack<TupleView<(HStack<TupleView<(ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, ModifiedContent<<<opaque return type of View.toggleStyle<A>(_:)>>.0, _EnvironmentKeyTransformModifier<Bool>>, <<opaque return type of View.toggleStyle<A>(_:)>>.0, <<opaque return type of View.toggleStyle<A>(_:)>>.0)>>, HStack<ModifiedContent<MultiColorSwatchButton, _FrameLayout>>)>>, HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Menu<ModifiedContent<ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, ForEach<Range<Int>, Int, Button<Text>>>, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>, ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Imag();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FontPicker and conformance FontPicker, type metadata accessor for FontPicker, (uint64_t)&protocol conformance descriptor for FontPicker);
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, char *a2, int a3, int a4, int a5, void *a6, double a7, double a8, double a9, double a10)
{
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(double, double, double, double))specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:), a7, a8, a9, a10, (uint64_t (*)(uint64_t))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t)&protocol conformance descriptor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, &protocol conformance descriptor for Image, &protocol witness table for Image, &demangling cache variable for type metadata for CanvasViewTiledViewDelegate<Image>,
    &demangling cache variable for type metadata for CanvasViewRulerHostingDelegate<Image>,
    specialized CanvasView.scrollViewDidScroll(_:),
    (void (*)(void))specialized Canvas.insertCanvasGenerationToolOverlayIfNeeded());
}

void specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(void *a1, char *a2, int a3, int a4, int a5, void *a6, uint64_t *a7, uint64_t (*a8)(double, double, double, double), double a9, double a10, double a11, double a12, uint64_t (*a13)(uint64_t), unint64_t *a14, uint64_t a15, unint64_t *a16, void *a17, void *a18, uint64_t *a19, uint64_t *a20,void (*a21)(id),void (*a22)(void))
{
  _BYTE *v22;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  objc_class *v46;
  id v47;
  uint64_t ObjCClassFromMetadata;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  id v57;
  char *v58;
  void *v59;
  _UNKNOWN **v60;
  id v61;
  uint64_t ObjectType;
  void (*v63)(uint64_t, _UNKNOWN **);
  id v64;
  char *v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  char *v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  char *v75;
  void *v76;
  id v77;
  char *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  char v93;
  id v94;
  char *v95;
  char *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void *v100;
  _QWORD *v101;
  void *v102;
  _QWORD *v103;
  char v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t (*v107)(char *, char *, uint64_t);
  _QWORD *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  _QWORD *v116;
  void (*v117)(char *, uint64_t);
  id v118;
  char *v119;
  uint64_t (*v120)(double, double, double, double);
  void *v121;
  void *v122;
  void *v123;
  void (*v124)(char *, uint64_t, uint64_t);
  uint64_t v125;
  char *v126;
  objc_class *v127;
  id v128;
  id v129;
  uint64_t v130;
  void *v131;
  id v132;
  objc_class *v133;
  id v134;
  id v135;
  uint64_t v136;
  void *v137;
  id v138;
  _UNKNOWN **v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  objc_class *v146;
  char *v147;
  id v148;
  id v149;
  uint64_t v150;
  void *v151;
  id v152;
  id v153;
  char *v154;
  void *v155;
  id v156;
  id v157;
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  id v160;
  void *v161;
  uint64_t (*v162)(double, double, double, double);
  char *v163;
  int v164;
  char *v165;
  uint64_t v166;
  id v167;
  char *v168;
  id v169;
  uint64_t v170;
  objc_super v171;
  objc_super v172;
  objc_super v173;
  char v174[16];
  double v175;
  ValueMetadata *v176;
  unint64_t v177;

  v162 = a8;
  v164 = a5;
  LODWORD(v161) = a4;
  LODWORD(v163) = a3;
  v168 = a2;
  v160 = a1;
  v170 = __swift_instantiateConcreteTypeFromMangledName(a7);
  v166 = *(_QWORD *)(v170 - 8);
  MEMORY[0x1E0C80A78](v170, v28);
  v165 = (char *)&v156 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[direct field offset for CanvasView.allowsContentSnapping] = 1;
  *(_QWORD *)&v22[direct field offset for CanvasView.trackingPanGestureRecognizer] = 0;
  *(_QWORD *)&v22[direct field offset for CanvasView.rulerHostingDelegate] = 0;
  *(_QWORD *)&v22[direct field offset for CanvasView.tiledViewDelegate] = 0;
  *(_QWORD *)&v22[direct field offset for CanvasView.selectionInteractionDelegate] = 0;
  v22[direct field offset for CanvasView.canvasContentMode] = 0;
  *(_QWORD *)&v22[direct field offset for CanvasView.$__lazy_storage_$_toolPickerObserver] = 0;
  v30 = direct field offset for CanvasView.zoomView;
  *(_QWORD *)&v22[direct field offset for CanvasView.zoomView] = 0;
  v31 = direct field offset for CanvasView.formAnalytics;
  type metadata accessor for FormAnalytics();
  v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = 791357252;
  *(_WORD *)(v32 + 20) = 0;
  v33 = v22;
  v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v22[v31] = v32;
  *(_QWORD *)(v32 + 24) = v34;
  v33[direct field offset for CanvasView.adjustingInsets] = 0;
  v33[direct field offset for CanvasView.firstLayout] = 1;
  v33[direct field offset for CanvasView.isZoomScaleAltered] = 0;
  *(_WORD *)&v33[direct field offset for CanvasView.snappedContentInsets] = 257;
  v35 = &v33[direct field offset for CanvasView.minimumContentInsets];
  v36 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v35 = *MEMORY[0x1E0DC49E8];
  v35[1] = v36;
  v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C28]), sel_initWithFrame_, 0.0, 0.0, a11, a12);
  v38 = (void *)objc_opt_self();
  v39 = v37;
  v40 = objc_msgSend(v38, sel_clearColor);
  objc_msgSend(v39, sel_setBackgroundColor_, v40);

  objc_msgSend(v39, sel_setContentSize_, 2000.0, 2000.0);
  objc_msgSend(v39, sel_setMinimumZoomScale_, 0.1);
  if (one-time initialization token for maximumPaperZoomScale != -1)
    swift_once();
  objc_msgSend(v39, sel_setMaximumZoomScale_, *(double *)&static UIConstants.maximumPaperZoomScale);
  objc_msgSend(v39, sel_setAlwaysBounceVertical_, 1);
  objc_msgSend(v39, sel_setAlwaysBounceHorizontal_, 1);
  objc_msgSend(v39, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v39, sel_setContentInsetAdjustmentBehavior_, 2);
  objc_msgSend(v39, sel_setDecelerationRate_, *MEMORY[0x1E0DC5360]);
  *(_QWORD *)&v33[direct field offset for CanvasView.canvasScrollView] = v39;
  v41 = (void *)objc_opt_self();
  v42 = v39;
  v43 = objc_msgSend(v41, sel_standardUserDefaults);
  v44 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000035, 0x80000001DDF4CB10);
  v45 = objc_msgSend(v43, sel_BOOLForKey_, v44);

  v46 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v47 = objc_allocWithZone(MEMORY[0x1E0CD1260]);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v167 = v42;
  v49 = objc_msgSend(v47, sel_initInScrollView_sixChannelBlending_defaultDrawingClass_, v42, v45, ObjCClassFromMetadata);
  objc_msgSend(v49, sel_setSupportsCopyAsText_, 1);
  objc_msgSend(v49, sel_setInsertSpaceEnabled_, 1);
  v50 = objc_msgSend(v49, sel_canvasView);
  if (v50)
  {
    v51 = v50;
    v52 = objc_msgSend(objc_allocWithZone(v46), sel_init);
    objc_msgSend(v51, sel_setDrawing_, v52);

  }
  v53 = objc_msgSend(v49, sel_canvasView);
  if (v53)
  {
    v54 = v53;
    objc_msgSend(v53, sel_setOpaque_, 0);

  }
  v55 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementContainerView()), sel_initWithFrame_, 0.0, 0.0, a11, a12);
  v56 = *(void **)&v22[v30];
  *(_QWORD *)&v22[v30] = v55;

  objc_msgSend(v49, sel_setAttachmentContainerView_, *(_QWORD *)&v22[v30]);
  *(_QWORD *)&v33[direct field offset for CanvasView.canvasTiledView] = v49;
  v169 = v49;

  v159 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 16);
  v159(v165, (uint64_t)v168, v170);
  v57 = v160;
  v58 = (char *)v162(a9, a10, a11, a12);
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v59 = *(void **)&v58[direct field offset for Canvas._editingView];
  v158 = &v58[direct field offset for Canvas._editingView];
  if (v59)
  {
    v60 = *(_UNKNOWN ***)&v58[direct field offset for Canvas._editingView + 8];
    v61 = v59;
  }
  else
  {
    v61 = *(id *)&v58[direct field offset for Canvas.paperView];
    v60 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  ObjectType = swift_getObjectType();
  v63 = (void (*)(uint64_t, _UNKNOWN **))v60[3];
  v64 = a6;
  v65 = v58;
  v66 = v59;
  v63(ObjectType, v60);

  v157 = v64;
  v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3AA0]), sel_init);
  v68 = *(void **)&v65[direct field offset for CanvasView.trackingPanGestureRecognizer];
  v162 = (uint64_t (*)(double, double, double, double))direct field offset for CanvasView.trackingPanGestureRecognizer;
  *(_QWORD *)&v65[direct field offset for CanvasView.trackingPanGestureRecognizer] = v67;

  v69 = objc_allocWithZone((Class)type metadata accessor for CanvasElementController());
  v163 = v65;
  v70 = v65;
  v71 = objc_msgSend(v69, sel_init);
  v72 = direct field offset for Canvas._canvasElementController;
  v73 = *(void **)&v70[direct field offset for Canvas._canvasElementController];
  *(_QWORD *)&v70[direct field offset for Canvas._canvasElementController] = v71;

  v74 = *(void **)&v70[v72];
  if (v74)
  {
    v75 = v74;
    v76 = v70;
    v77 = v167;
    goto LABEL_12;
  }
  v141 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v70) + 0x320))();
  v78 = v70;
  v77 = v167;
  if (v141)
  {
    v76 = (void *)v141;
    swift_getObjectType();
    v142 = swift_conformsToProtocol2();
    if (v142)
      v143 = v142;
    else
      v143 = 0;
    if (v142)
      v144 = v76;
    else
      v144 = 0;
    if (!v144)
    {
      v75 = v70;
      v78 = (char *)v76;
      goto LABEL_13;
    }
    v145 = swift_getObjectType();
    v75 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v143 + 48))(v145, v143);

LABEL_12:
    *(_QWORD *)&v75[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate + 8] = &protocol witness table for CanvasView<A>;
    swift_unknownObjectWeakAssign();
    v78 = v70;
    CanvasElementController.delegate.didset();
LABEL_13:

  }
  if ((_DWORD)v45)
    objc_msgSend(v169, sel_setContentSnapshottingView_, v70);
  v79 = *(void **)&v70[direct field offset for CanvasView.canvasTiledView];
  if (!v79)
  {
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v80 = &v70[OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode];
  swift_beginAccess();
  v81 = *v80;
  if (v81 >= 2)
  {
    if ((_DWORD)v81 != 2)
      v81 = 0;
    v82 = 1;
  }
  else
  {
    v81 = 0;
    v82 = 0;
  }
  v83 = objc_msgSend(v79, sel_canvasView);
  if (v83)
  {
    v84 = v83;
    v85 = objc_msgSend(v83, sel_drawingGestureRecognizer);

    objc_msgSend(v85, sel_setEnabled_, v82);
    v77 = v167;
  }
  objc_msgSend(v79, sel_setDrawingPolicy_, v81);
  v86 = direct field offset for CanvasView.zoomView;
  v87 = *(_QWORD *)&v70[direct field offset for CanvasView.zoomView];
  if (!v87)
    goto LABEL_59;
  objc_msgSend(v77, sel_insertSubview_atIndex_, v87, 0);
  objc_msgSend(v77, sel_addSubview_, *(_QWORD *)&v70[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView]);
  v88 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  v89 = v70;
  v90 = CanvasElementResizeView.init(frame:canvas:)(v89, 0.0, 0.0, a11, a12);
  v91 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v92 = *(void **)&v89[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(_QWORD *)&v89[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v90;

  if (!*(_QWORD *)&v89[v91])
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  objc_msgSend(v77, sel_addSubview_);
  v176 = &type metadata for PencilAndPaperFeatureFlags;
  v177 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v174[0] = 1;
  v93 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
  if ((v93 & 1) != 0)
  {
    v94 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    v95 = v89;
    v96 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v95, 0.0, 0.0, a11, a12);
    objc_msgSend(v77, sel_addSubview_, v96);
    v97 = *(void **)&v95[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(_QWORD *)&v95[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v96;

  }
  v156 = v57;
  v98 = *(void **)&v70[v86];
  if (!v98)
    goto LABEL_61;
  v160 = a17;
  v161 = a18;
  v99 = direct field offset for Canvas.paperView;
  objc_msgSend(v98, sel_insertSubview_atIndex_, *(_QWORD *)&v89[direct field offset for Canvas.paperView], 0);
  v100 = *(void **)&v89[v99];
  v101 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  v102 = (void *)a13(0);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a14, 255, a13, a15);
  v103 = v100;
  v104 = Capsule.merge<A>(_:)();
  v105 = swift_endAccess();
  if ((v104 & 1) != 0
    || (v105 = MEMORY[0x1DF0E666C]((char *)v103 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*v101 & *v103) + 0x488))(v105);
  }
  else
  {
    v106 = (_QWORD *)v105;

    v103 = v106;
  }
  v107 = (uint64_t (*)(char *, char *, uint64_t))v159;

  v159 = (void (*)(char *, uint64_t, uint64_t))v99;
  v108 = *(_QWORD **)&v89[v99];
  v109 = (char *)v108 + *(_QWORD *)((*v101 & *v108) + 0x380);
  swift_beginAccess();
  v110 = v165;
  v111 = v170;
  v112 = v107(v165, v109, v170);
  MEMORY[0x1E0C80A78](v112, v113);
  *(&v156 - 4) = v102;
  v114 = (void *)lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a16, 255, a13, (uint64_t)v160);
  v115 = v161;
  *(&v156 - 3) = v114;
  *(&v156 - 2) = v115;
  swift_getKeyPath();
  v116 = v108;
  Capsule<>.subscript.getter();
  swift_release();
  v117 = *(void (**)(char *, uint64_t))(v166 + 8);
  v117(v110, v111);

  v118 = v167;
  objc_msgSend(v167, sel_setContentSize_, v175, *(double *)&v176);
  v119 = v163;
  v120 = v162;
  v121 = *(void **)((char *)v162 + (_QWORD)v163);
  if (!v121)
    goto LABEL_62;
  objc_msgSend(v121, sel_setDelegate_, v89);
  v122 = *(void **)((char *)v120 + (_QWORD)v119);
  if (!v122)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  objc_msgSend(v122, sel_setCancelsTouchesInView_, 0);
  v123 = *(void **)((char *)v120 + (_QWORD)v119);
  v124 = v159;
  if (!v123)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  objc_msgSend(v123, sel_setDelaysTouchesEnded_, 0);
  if (!*(_QWORD *)((char *)v120 + (_QWORD)v119))
  {
LABEL_65:
    __break(1u);
    return;
  }
  objc_msgSend(v118, sel_addGestureRecognizer_);
  if ((v164 & 1) == 0)
  {
    v125 = one-time initialization token for backboardColor;
    v126 = v89;
    if (v125 != -1)
      swift_once();
    objc_msgSend(v126, sel_setBackgroundColor_, static UIConstants.backboardColor, v156);

  }
  v127 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(a19);
  v128 = objc_allocWithZone(v127);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v173.receiver = v128;
  v173.super_class = v127;
  v129 = objc_msgSendSuper2(&v173, sel_init);
  v130 = direct field offset for CanvasView.tiledViewDelegate;
  v131 = *(void **)&v89[direct field offset for CanvasView.tiledViewDelegate];
  *(_QWORD *)&v89[direct field offset for CanvasView.tiledViewDelegate] = v129;

  v132 = v169;
  objc_msgSend(v169, sel_setDelegate_, *(_QWORD *)&v89[v130]);
  v133 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(a20);
  v134 = objc_allocWithZone(v133);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v172.receiver = v134;
  v172.super_class = v133;
  v135 = objc_msgSendSuper2(&v172, sel_init);
  v136 = direct field offset for CanvasView.rulerHostingDelegate;
  v137 = *(void **)&v89[direct field offset for CanvasView.rulerHostingDelegate];
  *(_QWORD *)&v89[direct field offset for CanvasView.rulerHostingDelegate] = v135;

  objc_msgSend(v132, sel_setRulerHostingDelegate_, *(_QWORD *)&v89[v136]);
  objc_msgSend(v118, sel_setDelegate_, v89);
  v138 = *(id *)v158;
  if (*(_QWORD *)v158)
  {
    v139 = (_UNKNOWN **)*((_QWORD *)v158 + 1);
    v140 = *(id *)v158;
  }
  else
  {
    v140 = *(id *)((char *)v124 + (_QWORD)v89);
    v139 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  v146 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  v147 = (char *)objc_allocWithZone(v146);
  *(_QWORD *)&v147[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = v139;
  swift_unknownObjectWeakAssign();
  v171.receiver = v147;
  v171.super_class = v146;
  v148 = v138;
  v149 = objc_msgSendSuper2(&v171, sel_init);

  v150 = direct field offset for CanvasView.selectionInteractionDelegate;
  v151 = *(void **)&v89[direct field offset for CanvasView.selectionInteractionDelegate];
  *(_QWORD *)&v89[direct field offset for CanvasView.selectionInteractionDelegate] = v149;

  v152 = v169;
  v153 = objc_msgSend(v169, sel_selectionInteraction);
  objc_msgSend(v153, sel_setDelegate_, *(_QWORD *)&v89[v150]);

  objc_msgSend(v89, sel_addSubview_, v118);
  a21(v118);
  if (objc_msgSend(v152, sel_isGenerationModelAvailable))
  {
    v154 = v89;
    a22();
  }
  else
  {
    v154 = (char *)objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v154, sel_addObserver_selector_name_object_, v89, sel_generationModelAvailabilityStatusDidChange_, *MEMORY[0x1E0CD12F8], 0);
  }
  v155 = v157;

  v117(v168, v170);
}

void specialized CanvasView.scrollViewDidScroll(_:)(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  id v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  id v24;
  double v25;
  double v26;
  uint64_t v27;
  char v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t i;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  id v48;
  double v49;
  double v50;
  CGRect v51;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v2[direct field offset for CanvasView.adjustingInsets] & 1) != 0)
    return;
  v48 = a1;
  v47 = direct field offset for Canvas.paperView;
  v9 = *(_QWORD **)&v2[direct field offset for Canvas.paperView];
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = (char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x380);
  swift_beginAccess();
  v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
  MEMORY[0x1E0C80A78](v12, v13);
  *(&v46 - 4) = type metadata accessor for Paper();
  *(&v46 - 3) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  *(&v46 - 2) = (uint64_t)&protocol witness table for Paper;
  swift_getKeyPath();
  v14 = v9;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  v15 = direct field offset for CanvasView.zoomView;
  v16 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v16)
    goto LABEL_28;
  v17 = v49;
  v18 = v50;
  v19 = objc_msgSend(v16, sel_bounds);
  v22 = vabdd_f64(v18, v21);
  v23 = vabdd_f64(v17, v20) < 1.5 && v22 < 1.5;
  v24 = v48;
  if (!v23)
  {
    objc_msgSend(v48, sel_zoomScale, v22);
    v26 = v25;
    v27 = direct field offset for CanvasView.isZoomScaleAltered;
    v28 = v2[direct field offset for CanvasView.isZoomScaleAltered];
    objc_msgSend(v24, sel_setZoomScale_, 1.0);
    v29 = *(void **)&v2[v15];
    if (!v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v30 = v29;
    objc_msgSend(v30, sel_frame);
    objc_msgSend(v30, sel_setFrame_);

    v31 = direct field offset for CanvasView.firstLayout;
    if (v2[direct field offset for CanvasView.firstLayout] == 1)
    {
      objc_msgSend(v24, sel_frame);
      v26 = fmin(CGRectGetWidth(v51) / v17, 1.0);
      v2[v31] = 0;
    }
    v19 = objc_msgSend(v24, sel_setZoomScale_, v26);
    v2[v27] = v28;
  }
  specialized CanvasView.updateContentInsets()(v19);
  v32 = *(id *)&v2[v47];
  v33 = specialized ContainerCanvasElementView.subelementViews.getter();
  v46 = v15;
  if (v33 >> 62)
  {
    v34 = _CocoaArrayWrapper.endIndex.getter();
    if (!v34)
      goto LABEL_20;
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
      goto LABEL_20;
  }
  if (v34 < 1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v34; ++i)
  {
    if ((v33 & 0xC000000000000001) != 0)
      v36 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v33);
    else
      v36 = *(id *)(v33 + 8 * i + 32);
    v37 = v36;
    (*(void (**)(_BYTE *))((*v10 & *v36) + 0x278))(v2);

  }
LABEL_20:

  swift_bridgeObjectRelease();
  AnyCanvas.overlays.getter();
  v39 = *(_QWORD *)(v38 + 16);
  if (v39)
  {
    v40 = (void **)(v38 + 32);
    do
    {
      v41 = *v40;
      v40 += 2;
      objc_msgSend(v41, sel_setNeedsLayout, v46);
      --v39;
    }
    while (v39);
  }
  swift_bridgeObjectRelease();
  v42 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v42))
  {
    v43 = *(void **)&v2[v46];
    if (v43)
    {
      v44 = *((_QWORD *)v42 + 1);
      ObjectType = swift_getObjectType();
      objc_msgSend(v43, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, v24);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 64))(v2, ObjectType, v44);
      swift_unknownObjectRelease();
      return;
    }
LABEL_30:
    __break(1u);
  }
}

{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  double v17;
  double v18;
  id v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  id v24;
  double v25;
  double v26;
  uint64_t v27;
  char v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t i;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  id v48;
  double v49;
  double v50;
  CGRect v51;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v2[direct field offset for CanvasView.adjustingInsets] & 1) != 0)
    return;
  v48 = a1;
  v47 = direct field offset for Canvas.paperView;
  v9 = *(_QWORD **)&v2[direct field offset for Canvas.paperView];
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = (char *)v9 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x380);
  swift_beginAccess();
  v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, v11, v4);
  MEMORY[0x1E0C80A78](v12, v13);
  *(&v46 - 4) = type metadata accessor for Image();
  *(&v46 - 3) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  *(&v46 - 2) = (uint64_t)&protocol witness table for Image;
  swift_getKeyPath();
  v14 = v9;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  v15 = direct field offset for CanvasView.zoomView;
  v16 = *(void **)&v2[direct field offset for CanvasView.zoomView];
  if (!v16)
    goto LABEL_28;
  v17 = v49;
  v18 = v50;
  v19 = objc_msgSend(v16, sel_bounds);
  v22 = vabdd_f64(v18, v21);
  v23 = vabdd_f64(v17, v20) < 1.5 && v22 < 1.5;
  v24 = v48;
  if (!v23)
  {
    objc_msgSend(v48, sel_zoomScale, v22);
    v26 = v25;
    v27 = direct field offset for CanvasView.isZoomScaleAltered;
    v28 = v2[direct field offset for CanvasView.isZoomScaleAltered];
    objc_msgSend(v24, sel_setZoomScale_, 1.0);
    v29 = *(void **)&v2[v15];
    if (!v29)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v30 = v29;
    objc_msgSend(v30, sel_frame);
    objc_msgSend(v30, sel_setFrame_);

    v31 = direct field offset for CanvasView.firstLayout;
    if (v2[direct field offset for CanvasView.firstLayout] == 1)
    {
      objc_msgSend(v24, sel_frame);
      v26 = fmin(CGRectGetWidth(v51) / v17, 1.0);
      v2[v31] = 0;
    }
    v19 = objc_msgSend(v24, sel_setZoomScale_, v26);
    v2[v27] = v28;
  }
  specialized CanvasView.updateContentInsets()(v19);
  v32 = *(id *)&v2[v47];
  v33 = specialized ContainerCanvasElementView.subelementViews.getter();
  v46 = v15;
  if (v33 >> 62)
  {
    v34 = _CocoaArrayWrapper.endIndex.getter();
    if (!v34)
      goto LABEL_20;
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
      goto LABEL_20;
  }
  if (v34 < 1)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v34; ++i)
  {
    if ((v33 & 0xC000000000000001) != 0)
      v36 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v33);
    else
      v36 = *(id *)(v33 + 8 * i + 32);
    v37 = v36;
    (*(void (**)(_BYTE *))((*v10 & *v36) + 0x278))(v2);

  }
LABEL_20:

  swift_bridgeObjectRelease();
  AnyCanvas.overlays.getter();
  v39 = *(_QWORD *)(v38 + 16);
  if (v39)
  {
    v40 = (void **)(v38 + 32);
    do
    {
      v41 = *v40;
      v40 += 2;
      objc_msgSend(v41, sel_setNeedsLayout, v46);
      --v39;
    }
    while (v39);
  }
  swift_bridgeObjectRelease();
  v42 = &v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v42))
  {
    v43 = *(void **)&v2[v46];
    if (v43)
    {
      v44 = *((_QWORD *)v42 + 1);
      ObjectType = swift_getObjectType();
      objc_msgSend(v43, sel_frame);
      objc_msgSend(v2, sel_convertRect_fromCoordinateSpace_, v24);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v44 + 64))(v2, ObjectType, v44);
      swift_unknownObjectRelease();
      return;
    }
LABEL_30:
    __break(1u);
  }
}

uint64_t specialized Canvas.tool.setter(_QWORD *a1)
{
  return specialized Canvas.tool.setter(a1, (void (*)(_QWORD *__return_ptr, double))specialized Canvas.tool.getter);
}

uint64_t specialized Canvas.tool.setter(_QWORD *a1, void (*a2)(_QWORD *__return_ptr, double))
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Class isa;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  Class v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  Class v26;
  void *v27;
  void *v28;
  unsigned int v29;
  _QWORD v32[3];
  uint64_t v33;

  v4 = v2;
  v6 = type metadata accessor for PKInk();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v32[-1] - v14;
  a2(v32, v13);
  v16 = v33;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  PKTool.ink.getter(v16, v15);
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v15, v6);
  v19 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v19);
  PKTool.ink.getter(v19, v10);
  v20 = PKInk._bridgeToObjectiveC()().super.isa;
  v18(v10, v6);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  LOBYTE(v19) = static NSObject.== infix(_:_:)();

  v21 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  if ((v19 & 1) == 0)
  {
    v22 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320);
    v23 = ((uint64_t (*)(uint64_t))v22)(v21);
    if (v23)
    {
      v24 = (void *)v23;
      v25 = a1[3];
      __swift_project_boxed_opaque_existential_1(a1, v25);
      PKTool.ink.getter(v25, v15);
      v26 = PKInk._bridgeToObjectiveC()().super.isa;
      v18(v15, v6);
      objc_msgSend(v24, sel_setInk_, v26);

    }
    v27 = (void *)v22();
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v27, sel_allowsFingerDrawing);

      if (v29)
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t one-time initialization function for extensionLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, extensionLogger);
  __swift_project_value_buffer(v0, (uint64_t)extensionLogger);
  return Logger.init(subsystem:category:)();
}

uint64_t ExtensionViewController.ProxyWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

id ExtensionViewController.__deallocating_deinit()
{
  _BYTE *v0;
  objc_super v2;

  if (v0[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] == 1)
    dispatch_resume(*(dispatch_object_t *)&v0[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue]);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExtensionViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ExtensionViewController()
{
  return objc_opt_self();
}

uint64_t ExtensionViewController.multipeerConnection.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection))
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v6 = ExtensionViewController.newMultipeerConnection(model:)((uint64_t)v4);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    *(_QWORD *)(v0 + v5) = v6;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v6;
}

uint64_t ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE v24[16];
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v24[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRMulticastSyncManager<Paper>);
  type metadata accessor for CRContext();
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  MEMORY[0x1DF0E3C90](0, &v25);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v25, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D127D0], v8);
  v17 = CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)();
  *((_QWORD *)&v26 + 1) = type metadata accessor for ExtensionViewController();
  v27 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v18, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController, (uint64_t)&protocol conformance descriptor for ExtensionViewController);
  *(_QWORD *)&v25 = v2;
  v19 = v2;
  CRMulticastSyncManager.setLink(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  v20 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = 0;
  v22[3] = 0;
  v22[4] = v17;
  v22[5] = v21;
  swift_retain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.newMultipeerConnection(model:), (uint64_t)v22);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  return v17;
}

uint64_t closure #1 in ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  v5[10] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Paper>>);
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Capsule<Paper>>.Iterator);
  v5[14] = v8;
  v5[15] = *(_QWORD *)(v8 - 8);
  v5[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.newMultipeerConnection(model:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[11];
  CRMulticastSyncManager.updates.getter();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  v4 = (_QWORD *)swift_task_alloc();
  v0[17] = v4;
  *v4 = v0;
  v4[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 48) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 72), v1, v2);
    v6 = MEMORY[0x1DF0E666C](v5);
    *(_QWORD *)(v0 + 144) = v6;
    if (v6)
    {
      type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 152) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
      return swift_task_switch();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v7;
      *v7 = v0;
      v7[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
      return AsyncStream.Iterator.next(isolation:)();
    }
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release();
  ExtensionViewController.updateCanvasView(paper:)(v2);

  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[17] = v1;
  *v1 = v0;
  v1[1] = closure #1 in ExtensionViewController.newMultipeerConnection(model:);
  return AsyncStream.Iterator.next(isolation:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExtensionViewController.DecryptionError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtensionViewController.DecryptionError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtensionViewController.DecryptionError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Void __swiftcall ExtensionViewController.accept(_:)(NSXPCConnection a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD aBlock[8];

  -[objc_class setExportedObject:](a1.super.isa, sel_setExportedObject_, v1);
  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_interfaceWithProtocol_, &unk_1F045DF58);
  -[objc_class setExportedInterface:](a1.super.isa, sel_setExportedInterface_, v4);

  v5 = objc_msgSend(v3, sel_interfaceWithProtocol_, &unk_1F049DE38);
  -[objc_class setRemoteObjectInterface:](a1.super.isa, sel_setRemoteObjectInterface_, v5);

  -[objc_class resume](a1.super.isa, sel_resume);
  if (one-time initialization token for shared != -1)
    swift_once();
  v6 = static ScrollWheelEventSwizzler.shared;
  v7 = -[objc_class auditToken](a1.super.isa, sel_auditToken);
  v8 = *(_QWORD *)(v6 + 16);
  *(double *)&v10 = MEMORY[0x1E0C80A78](v7, v9);
  v15 = v10;
  v16 = v11;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)((char *)(v8 + 16), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1));
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
  swift_release();
  aBlock[4] = closure #1 in ExtensionViewController.accept(_:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_2;
  v12 = _Block_copy(aBlock);
  v13 = -[objc_class synchronousRemoteObjectProxyWithErrorHandler:](a1.super.isa, sel_synchronousRemoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HostXPCProtocol);
  if (swift_dynamicCast())
    v14 = v17;
  else
    v14 = 0;
  *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper) + 16) = v14;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  dispatch_resume(*(dispatch_object_t *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue));
  swift_unknownObjectRelease();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended) = 0;
}

void closure #1 in ExtensionViewController.accept(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  NSObject *oslog;
  uint64_t v10;

  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)extensionLogger);
  v3 = a1;
  v4 = a1;
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = a1;
    v10 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v10;

    _os_log_impl(&dword_1DDB0F000, oslog, v5, "Failed to get host XPC proxy %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v7, -1, -1);
    MEMORY[0x1DF0E6558](v6, -1, -1);
  }
  else
  {

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t ExtensionViewController.openLink(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v24 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v21[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11, v15);
  v17 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v18 + v17, (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.openLink(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_91;
  v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v25 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v10, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.openLink(_:)(uint64_t result)
{
  void *v1;
  NSURL *v2;
  void *v3;
  void *v4;

  v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    URL._bridgeToObjectiveC()(v2);
    v4 = v3;
    objc_msgSend(v1, sel_openLink_, v3);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

Swift::Void __swiftcall ExtensionViewController.reportPaperBounds(_:)(__C::CGRect a1)
{
  uint64_t v1;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  CGFloat *v18;
  void *v19;
  _QWORD v20[2];
  _QWORD aBlock[6];

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v6 = type metadata accessor for DispatchWorkItemFlags();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  v18 = (CGFloat *)swift_allocObject();
  *((_QWORD *)v18 + 2) = v17;
  v18[3] = x;
  v18[4] = y;
  v18[5] = width;
  v18[6] = height;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.reportPaperBounds(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_85;
  v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v7, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v16, v11, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.reportPaperBounds(_:)(uint64_t result, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  void *v5;
  NSString *v10;
  uint64_t v11;
  NSRect v12;

  v5 = *(void **)(result + 16);
  if (v5)
  {
    swift_unknownObjectRetain();
    v12.origin.x = a2;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    v10 = NSStringFromRect(v12);
    if (!v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = (NSString *)MEMORY[0x1DF0E41AC](v11);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v5, sel_reportingPaperBounds_, v10);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ExtensionViewController.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v15;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.send(_:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_3;
  v17 = _Block_copy(aBlock);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v14, v9, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.send(_:)(uint64_t result)
{
  void *v1;
  Class isa;

  v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_receiveMulticastData_, isa);

    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ExtensionViewController.addCanvasView(_:)(UIView *a1)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  NSLayoutXAxisAnchor *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  NSLayoutYAxisAnchor *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  NSLayoutDimension *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  NSLayoutDimension *v26;
  id v27;
  Class isa;

  v2 = v1;
  -[UIView setTranslatesAutoresizingMaskIntoConstraints:](a1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v4 = objc_msgSend(v1, sel_view);
  if (!v4)
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = v4;
  objc_msgSend(v4, sel_addSubview_, a1);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DDF329D0;
  v7 = objc_msgSend(v2, sel_view);
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_centerXAnchor);

  v10 = -[UIView centerXAnchor](a1, sel_centerXAnchor);
  v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v6 + 32) = v11;
  v12 = objc_msgSend(v2, sel_view);
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v13 = v12;
  v14 = objc_msgSend(v12, sel_centerYAnchor);

  v15 = -[UIView centerYAnchor](a1, sel_centerYAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v6 + 40) = v16;
  v17 = objc_msgSend(v2, sel_view);
  if (!v17)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, sel_widthAnchor);

  v20 = -[UIView widthAnchor](a1, sel_widthAnchor);
  v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(_QWORD *)(v6 + 48) = v21;
  v22 = objc_msgSend(v2, sel_view);
  if (v22)
  {
    v23 = v22;
    v24 = (void *)objc_opt_self();
    v25 = objc_msgSend(v23, sel_heightAnchor);

    v26 = -[UIView heightAnchor](a1, sel_heightAnchor);
    v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

    *(_QWORD *)(v6 + 56) = v27;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_activateConstraints_, isa);

    return;
  }
LABEL_11:
  __break(1u);
}

void ExtensionViewController.loadPaperDrawing(_:paperURL:coherenceContextURL:encrypted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char *v5;
  char *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  char *v40;
  char *v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  id v51;
  UIView *v52;
  id v53;
  void *v54;
  UIView *v55;
  id v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  CGFloat v65;
  CGFloat v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  double v74;
  __int128 v75;
  __int128 v76;
  CGRect v77;
  CGRect v78;
  __C::CGRect v79;

  v6 = v5;
  v72 = a5;
  v73 = a1;
  v10 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v10, v11);
  v71 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v69 = *(_QWORD *)(v13 - 8);
  v70 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v68 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView;
  v27 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  if (v27)
    objc_msgSend(v27, sel_removeFromSuperview, v23);
  v28 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView];
  if (v28)
    objc_msgSend(v28, sel_removeFromSuperview, v23);
  v29 = objc_msgSend(v6, sel_view, v23);
  if (!v29)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v30 = v29;
  objc_msgSend(v29, sel_bounds);
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v38 = v37;

  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v25, a3, v20);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a4, (uint64_t)v19, &demangling cache variable for type metadata for URL?);
  if ((v72 & 1) != 0)
  {
    *(_QWORD *)&v76 = type metadata accessor for ExtensionViewController();
    *((_QWORD *)&v76 + 1) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v39, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController, (uint64_t)&protocol conformance descriptor for ExtensionViewController);
    v40 = v6;
    v41 = v6;
  }
  else
  {
    v41 = 0;
    v76 = 0u;
    v75 = 0u;
  }
  v74 = *(double *)&v41;
  v42 = objc_allocWithZone((Class)type metadata accessor for PaperTextAttachmentCanvasView(0));
  swift_bridgeObjectRetain();
  v43 = (char *)PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(v73, a2, (uint64_t)v25, (uint64_t)v19, (uint64_t)&v74, v32, v34, v36, v38);
  *(_QWORD *)&v43[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = &protocol witness table for ExtensionViewController;
  swift_unknownObjectWeakAssign();
  v45 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger];
  if (v45)
    v46 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v44, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
  else
    v46 = 0;
  v47 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  v48 = *(char **)&v43[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
  if (!v48)
    goto LABEL_19;
  v49 = &v48[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(_QWORD *)v49 = v45;
  *((_QWORD *)v49 + 1) = v46;
  swift_retain_n();
  v50 = v48;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();
  swift_release();

  v51 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v52 = v43;
  v53 = objc_msgSend(v51, sel_initWithRed_green_blue_alpha_, 0.894117647, 0.68627451, 0.0392156863, 1.0);
  -[UIView setTintColor:](v52, sel_setTintColor_, v53);

  ExtensionViewController.addCanvasView(_:)(v52);
  v54 = *(void **)&v6[v26];
  *(_QWORD *)&v6[v26] = v52;
  v55 = v52;

  v56 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v57 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002BLL, 0x80000001DDF4D270);
  objc_msgSend(v56, sel_addObserver_selector_name_object_, v6, sel_handleLink_, v57, 0);

  ExtensionViewController.updateLinedPaper()();
  v58 = *(char **)&v43[v47];
  if (!v58)
  {
LABEL_20:
    __break(1u);
    return;
  }
  v59 = *(_QWORD *)&v58[direct field offset for Canvas.paperView]
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v58[direct field offset for Canvas.paperView]) + 0x380);
  swift_beginAccess();
  v61 = v68;
  v60 = v69;
  v62 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v59, v70);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v63 = v58;
  v64 = (uint64_t)v71;
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v65 = v74;
  v67 = v75;
  v66 = *(double *)&v76;
  outlined destroy of Paper(v64);

  v77.origin.x = v65;
  *(_OWORD *)&v77.origin.y = v67;
  v77.size.height = v66;
  if (!CGRectIsEmpty(v77))
  {
    v78.origin.x = v65;
    *(_OWORD *)&v78.origin.y = v67;
    v78.size.height = v66;
    if (!CGRectIsInfinite(v78))
    {
      v79.origin.x = v65;
      *(_OWORD *)&v79.origin.y = v67;
      v79.size.height = v66;
      ExtensionViewController.reportPaperBounds(_:)(v79);
    }
  }

}

void ExtensionViewController.loadPaperDocument(from:coherenceContextURL:encrypted:layout:)(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  void *v33;
  UIView *v34;
  UIView *v35;
  void *v36;
  char *v37;
  __int128 v38;
  char v39[24];
  char *v40;
  __int128 v41;
  __int128 v42;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v39[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = &v39[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v20 = *a4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, a1, v14, v17);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)&v42 = type metadata accessor for ExtensionViewController();
    *((_QWORD *)&v42 + 1) = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController and conformance ExtensionViewController, v21, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController, (uint64_t)&protocol conformance descriptor for ExtensionViewController);
    v22 = v5;
    v23 = v5;
  }
  else
  {
    v23 = 0;
    v41 = 0u;
    v42 = 0u;
  }
  v40 = v23;
  v39[0] = v20;
  v24 = objc_allocWithZone((Class)type metadata accessor for PaperKitExtensionDocumentViewController());
  v25 = (char *)PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)((uint64_t)v19, (uint64_t)v13, (uint64_t)&v40, v39);
  *(_QWORD *)&v25[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = &protocol witness table for ExtensionViewController;
  swift_unknownObjectWeakAssign();
  if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger])
    v27 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v26, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
  else
    v27 = 0;
  v28 = &v25[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger];
  swift_beginAccess();
  *((_QWORD *)v28 + 1) = v27;
  swift_unknownObjectWeakAssign();
  swift_retain();
  PaperKitExtensionDocumentViewController.liveStreamMessenger.didset();
  swift_release();
  v38 = *(_OWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  v29 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets + 16];
  v30 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets + 24];
  v31 = &v25[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  *(_OWORD *)v31 = v38;
  *((_QWORD *)v31 + 2) = v29;
  *((_QWORD *)v31 + 3) = v30;
  v32 = objc_msgSend(v25, sel_view);
  if (!v32)
    goto LABEL_12;
  v33 = v32;
  objc_msgSend(v32, sel_setNeedsLayout);

  objc_msgSend(v5, sel_addChildViewController_, v25);
  v34 = (UIView *)objc_msgSend(v25, sel_view);
  if (v34)
  {
    v35 = v34;
    ExtensionViewController.addCanvasView(_:)(v34);

    v36 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
    *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = v25;
    v37 = v25;

    objc_msgSend(v37, sel_didMoveToParentViewController_, v5);
    return;
  }
LABEL_13:
  __break(1u);
}

void ExtensionViewController.updateCanvasView(paper:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void *v23;
  id v24;
  char *v25;
  char *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  Class isa;
  id v80;
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  _OWORD v90[2];
  uint64_t v91;

  v2 = v1;
  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v82 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v87 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRContext();
  v91 = 0;
  memset(v90, 0, sizeof(v90));
  v88 = (id)MEMORY[0x1DF0E3C90](0, v90);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v90, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v17 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView;
  v18 = *(char **)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView];
  if (v18)
  {
    v84 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView;
    v85 = v2;
    v82 = direct field offset for Canvas.paperView;
    v19 = *(_QWORD *)&v18[direct field offset for Canvas.paperView]
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v18[direct field offset for Canvas.paperView]) + 0x380);
    swift_beginAccess();
    v20 = v5;
    v21 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v16, v19, v13);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v86 = a1;
    v83 = v18;
    Capsule<>.rootID.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v13);
    a1 = v86;
    Capsule<>.rootID.getter();
    LOBYTE(v19) = static CRKeyPath.== infix(_:_:)();
    v22 = *(void (**)(char *, uint64_t))(v20 + 8);
    v22(v8, v4);
    v22(v12, v4);
    if ((v19 & 1) != 0)
    {
      v23 = *(void **)&v18[v82];
      swift_beginAccess();
      type metadata accessor for Paper();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v24 = v23;
      a1 = v86;
      Capsule.merge<A>(_:)();
      swift_endAccess();

      LOBYTE(v90[0]) = 2;
      v25 = v83;
      AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)v90);

      v2 = v85;
      v17 = v84;
      if (!*(_QWORD *)&v85[v84])
        goto LABEL_6;
    }
    else
    {
      v26 = v83;
      objc_msgSend(v83, sel_removeFromSuperview);
      v2 = v85;
      v17 = v84;
      v27 = *(void **)&v85[v84];
      *(_QWORD *)&v85[v84] = 0;

      if (!*(_QWORD *)&v2[v17])
        goto LABEL_6;
    }
LABEL_18:

    return;
  }
LABEL_6:
  v28 = v17;
  v29 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  if (v29)
    objc_msgSend(v29, sel_removeFromSuperview);
  v30 = objc_msgSend(v2, sel_view);
  if (!v30)
  {
    __break(1u);
    goto LABEL_20;
  }
  v31 = v30;
  objc_msgSend(v30, sel_bounds);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;

  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v16, a1, v13);
  LODWORD(v31) = v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground];
  v40 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Paper>));
  specialized CanvasView.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v88, v16, 3, 1, (int)v31, 0, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(double, double, double, double))specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:), v33, v35, v37, v39, (uint64_t (*)(uint64_t))type metadata accessor for Paper, &lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, &protocol conformance descriptor for Paper, &protocol witness table for Paper, &demangling cache variable for type metadata for CanvasViewTiledViewDelegate<Paper>,
    &demangling cache variable for type metadata for CanvasViewRulerHostingDelegate<Paper>,
    specialized CanvasView.scrollViewDidScroll(_:),
    (void (*)(void))specialized Canvas.insertCanvasGenerationToolOverlayIfNeeded());
  v42 = v41;
  v43 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  swift_beginAccess();
  outlined init with copy of FindResult(v43, (uint64_t)v90);
  specialized Canvas.tool.setter(v90, (void (*)(_QWORD *__return_ptr, double))specialized Canvas.tool.getter);
  objc_msgSend(v42, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v44 = objc_msgSend(v2, sel_view);
  if (!v44)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v45 = v44;
  objc_msgSend(v44, sel_addSubview_, v42);

  v46 = *(void **)&v2[v28];
  *(_QWORD *)&v2[v28] = v42;
  v47 = v42;

  LOBYTE(v46) = v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode];
  v48 = &v47[direct field offset for CanvasView.canvasContentMode];
  swift_beginAccess();
  *v48 = (char)v46;
  objc_msgSend(v47, sel_setNeedsLayout);
  v50 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger];
  if (v50)
    v51 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v49, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
  else
    v51 = 0;
  v52 = &v47[direct field offset for Canvas.liveStreamMessenger];
  swift_beginAccess();
  *(_QWORD *)v52 = v50;
  *((_QWORD *)v52 + 1) = v51;
  swift_retain_n();
  v53 = v47;
  swift_unknownObjectRelease();
  specialized Canvas.liveStreamMessenger.didset();
  swift_release();

  v54 = v53;
  v55 = ExtensionViewController.multipeerConnection.getter();
  v56 = (uint64_t *)&v54[direct field offset for Canvas.xpcMulticast];
  swift_beginAccess();
  *v56 = v55;

  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_1DDF329D0;
  v58 = objc_msgSend(v2, sel_view);
  if (!v58)
    goto LABEL_21;
  v59 = v58;
  v60 = objc_msgSend(v58, sel_centerXAnchor);

  v61 = objc_msgSend(v54, sel_centerXAnchor);
  v62 = objc_msgSend(v60, sel_constraintEqualToAnchor_, v61);

  *(_QWORD *)(v57 + 32) = v62;
  v63 = objc_msgSend(v2, sel_view);
  if (!v63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v64 = v63;
  v65 = objc_msgSend(v63, sel_centerYAnchor);

  v66 = objc_msgSend(v54, sel_centerYAnchor);
  v67 = objc_msgSend(v65, sel_constraintEqualToAnchor_, v66);

  *(_QWORD *)(v57 + 40) = v67;
  v68 = objc_msgSend(v2, sel_view);
  if (!v68)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v69 = v68;
  v70 = objc_msgSend(v68, sel_widthAnchor);

  v71 = objc_msgSend(v54, sel_widthAnchor);
  v72 = objc_msgSend(v70, sel_constraintEqualToAnchor_, v71);

  *(_QWORD *)(v57 + 48) = v72;
  v73 = objc_msgSend(v2, sel_view);
  if (v73)
  {
    v74 = v73;
    v75 = (void *)objc_opt_self();
    v76 = objc_msgSend(v74, sel_heightAnchor);

    v77 = objc_msgSend(v54, sel_heightAnchor);
    v78 = objc_msgSend(v76, sel_constraintEqualToAnchor_, v77);

    *(_QWORD *)(v57 + 56) = v78;
    v89 = v57;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v75, sel_activateConstraints_, isa);

    v80 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v81 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002BLL, 0x80000001DDF4D270);
    objc_msgSend(v80, sel_addObserver_selector_name_object_, v2, sel_handleLink_, v81, 0);

    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall ExtensionViewController.updateLinedPaper()()
{
  uint64_t v0;
  char *v1;
  double v2;
  double v3;
  char *v4;
  id v5;
  double v6;
  id v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (v1)
  {
    v2 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing);
    v3 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing);
    if (v2 > 0.0 || v3 > 0.0)
    {
      v6 = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset);
      v7 = objc_allocWithZone(MEMORY[0x1E0CD11C8]);
      v8 = v1;
      v5 = objc_msgSend(v7, sel_initWithLineSpacing_horizontalInset_, v2, v3, v6);
    }
    else
    {
      v4 = v1;
      v5 = 0;
    }
    v9 = *(char **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
    if (v9)
    {
      v10 = *(void **)&v9[direct field offset for PaperTextAttachmentView.linedPaper];
      *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.linedPaper] = v5;
      v11 = v9;
      v12 = v5;

      objc_msgSend(v11, sel_setNeedsLayout);
    }
    else
    {

      __break(1u);
    }
  }
}

uint64_t ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v33 = a1;
  v34 = a6;
  v35 = a5;
  v30 = a3;
  v31 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v32 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v32 + 64);
  MEMORY[0x1E0C80A78](v7, v9);
  v29 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10, v13);
  v14 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v30, v10);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v31, (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
  type metadata accessor for MainActor();
  swift_retain();
  v21 = a2;
  swift_bridgeObjectRetain();
  v22 = static MainActor.shared.getter();
  v23 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v24 = (v12 + *(unsigned __int8 *)(v32 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v25 = (char *)swift_allocObject();
  v26 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v25 + 2) = v22;
  *((_QWORD *)v25 + 3) = v26;
  *((_QWORD *)v25 + 4) = v34;
  *((_QWORD *)v25 + 5) = v20;
  *((_QWORD *)v25 + 6) = v33;
  *((_QWORD *)v25 + 7) = v21;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v25[v23], v14, v28);
  outlined init with take of (key: Int, value: AnyCRValue)?(v29, (uint64_t)&v25[v24], &demangling cache variable for type metadata for URL?);
  v25[v24 + v8] = v35;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v18, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:), (uint64_t)v25);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;

  *(_BYTE *)(v8 + 144) = v11;
  *(_QWORD *)(v8 + 120) = a8;
  *(_QWORD *)(v8 + 128) = v10;
  *(_QWORD *)(v8 + 104) = a6;
  *(_QWORD *)(v8 + 112) = a7;
  *(_QWORD *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 96) = a5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 136) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1DDB0F000, v2, v3, "loadPaper", v4, 2u);
    MEMORY[0x1DF0E6558](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 88);

  switch(v5)
  {
    case 2:
      v9 = *(_QWORD *)(v0 + 96) + 16;
      swift_beginAccess();
      v10 = MEMORY[0x1DF0E666C](v9);
      if (!v10)
        return (*(uint64_t (**)(void))(v0 + 8))();
      v8 = (void *)v10;
      v11 = *(_BYTE *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 120);
      v13 = *(_QWORD *)(v0 + 128);
      v18 = 1;
      v14 = &v18;
LABEL_14:
      ExtensionViewController.loadPaperDocument(from:coherenceContextURL:encrypted:layout:)(v12, v13, v11, v14);
      goto LABEL_15;
    case 1:
      v15 = *(_QWORD *)(v0 + 96) + 16;
      swift_beginAccess();
      v16 = MEMORY[0x1DF0E666C](v15);
      if (!v16)
        return (*(uint64_t (**)(void))(v0 + 8))();
      v8 = (void *)v16;
      v11 = *(_BYTE *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 120);
      v13 = *(_QWORD *)(v0 + 128);
      v19 = 0;
      v14 = &v19;
      goto LABEL_14;
    case 0:
      v6 = *(_QWORD *)(v0 + 96) + 16;
      swift_beginAccess();
      v7 = MEMORY[0x1DF0E666C](v6);
      if (v7)
      {
        v8 = (void *)v7;
        ExtensionViewController.loadPaperDrawing(_:paperURL:coherenceContextURL:encrypted:)(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(unsigned __int8 *)(v0 + 144));
LABEL_15:

      }
      return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 88);
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  void (*v50)(unint64_t, uint64_t);
  uint64_t result;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char v62;

  v52[1] = a5;
  v56 = a8;
  v57 = a4;
  v55 = a7;
  v58 = (unint64_t)a6;
  v53 = a1;
  v54 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v61 = (uint64_t)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v52 - v17;
  v19 = type metadata accessor for URL();
  v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
  MEMORY[0x1E0C80A78](v19, v21);
  v60 = (char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v59 = (char *)v52 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v52 - v27;
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v33 = (char *)v52 - v32;
  v62 = 0;
  v35 = v34;
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v34 + 56);
  v36(v18, 1, 1, v19, v31);
  URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
  if (v58 >> 60 == 15)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v36)(v14, 1, 1, v19);
    URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for URL?);
    v37 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v61, 1, 1, v37);
    v38 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v39 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    v52[0] = v33;
    v39(v59, v33, v19);
    v39(v60, v28, v19);
    type metadata accessor for MainActor();
    swift_retain();
    v40 = v54;
    swift_bridgeObjectRetain();
    v41 = static MainActor.shared.getter();
    v42 = *(unsigned __int8 *)(v35 + 80);
    v43 = (v42 + 56) & ~v42;
    v58 = (unint64_t)v28;
    v44 = (v20 + v42 + v43) & ~v42;
    v45 = v44 + v20;
    v46 = (char *)swift_allocObject();
    v47 = MEMORY[0x1E0DF06E8];
    *((_QWORD *)v46 + 2) = v41;
    *((_QWORD *)v46 + 3) = v47;
    v48 = v53;
    *((_QWORD *)v46 + 4) = v38;
    *((_QWORD *)v46 + 5) = v48;
    *((_QWORD *)v46 + 6) = v40;
    v49 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v49(&v46[v43], v59, v19);
    v49(&v46[v44], v60, v19);
    v46[v45] = v55 & 1;
    *(_QWORD *)&v46[(v45 & 0xFFFFFFFFFFFFFFF8) + 8] = v56;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v61, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:), (uint64_t)v46);
    swift_release();
    v50 = *(void (**)(unint64_t, uint64_t))(v35 + 8);
    v50(v58, v19);
    return ((uint64_t (*)(_QWORD, uint64_t))v50)(v52[0], v19);
  }
  return result;
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v10;
  uint64_t v11;

  *(_BYTE *)(v8 + 104) = v10;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 96) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1DDB0F000, v2, v3, "loadPaper bookmark", v4, 2u);
    MEMORY[0x1DF0E6558](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 40);

  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5 + 16);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 80);
    v9 = *(unsigned __int8 *)(v0 + 104);
    v11 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    v14 = type metadata accessor for URL();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v8, v10, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
    ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(v13, v12, v11, v8, v9, v17);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for URL?);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  char v30;

  v29 = a3;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v28 - v19;
  v30 = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v12 + 56))(v10, 1, 1, v11, v18);
  URL.init(resolvingBookmarkData:options:relativeTo:bookmarkDataIsStale:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v20, v11);
  type metadata accessor for MainActor();
  swift_retain();
  v23 = static MainActor.shared.getter();
  v24 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = (char *)swift_allocObject();
  v26 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v25 + 2) = v23;
  *((_QWORD *)v25 + 3) = v26;
  *((_QWORD *)v25 + 4) = v22;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v25[v24], v15, v11);
  v25[v24 + v13] = v29 & 1;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.loadBookmark(_:readOnly:), (uint64_t)v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v20, v11);
}

uint64_t closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 64) = a6;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 56) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

UIView *closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  UIView *result;
  UIView *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (!v2)
    return (UIView *)(*(uint64_t (**)(void))(v0 + 8))();
  v3 = (char *)v2;
  type metadata accessor for PaperViewController();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  result = (UIView *)objc_msgSend(v4, sel_view);
  if (result)
  {
    v6 = result;
    v7 = (void *)*(unsigned __int8 *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 48);
    ExtensionViewController.addCanvasView(_:)(result);

    v9 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = v4;
    v10 = v4;

    PaperViewController.display(_:readOnly:)(v8, v7);
    return (UIView *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in ExtensionViewController.receiveMulticastData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.receiveMulticastData(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)extensionLogger);
  outlined copy of Data._Representation(v1, v2);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = v7 >> 62;
    *(_DWORD *)swift_slowAlloc() = 134217984;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), v7);

  ExtensionViewController.multipeerConnection.getter();
  CRMulticastSyncManager.receive(_:)();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  type metadata accessor for MainActor();
  v6[6] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.receiveLiveStreamData(_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)extensionLogger);
  outlined copy of Data._Representation(v1, v2);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 32);
  if (v6)
  {
    v8 = v7 >> 62;
    *(_DWORD *)swift_slowAlloc() = 134217984;
    __asm { BR              X10 }
  }
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), v7);

  if (*(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger))
  {
    v10 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    swift_retain();
    ExtensionViewController.LiveStreamMessenger.receiveLiveStreamData(_:)(v10, v9);
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void @objc ExtensionViewController.receiveMulticastData(_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3;
  v13 = a1;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  type metadata accessor for MainActor();
  v18 = v13;
  outlined copy of Data._Representation(v14, v16);
  v19 = static MainActor.shared.getter();
  v20 = (_QWORD *)swift_allocObject();
  v21 = MEMORY[0x1E0DF06E8];
  v20[2] = v19;
  v20[3] = v21;
  v20[4] = v14;
  v20[5] = v16;
  v20[6] = v18;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a5, (uint64_t)v20);
  swift_release();
  outlined consume of Data._Representation(v14, v16);

}

uint64_t closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 24) = a6;
  *(_QWORD *)(v7 + 32) = a7;
  *(_BYTE *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 16) = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  *(_QWORD *)(v7 + 40) = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(_QWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 64) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 72) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

id closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  swift_release();
  *(_BYTE *)(v4 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground) = v3;
  outlined copy of Data._Representation(v2, v1);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(char **)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v5, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v8);
  v10 = ExtensionViewController.newMultipeerConnection(model:)(v7);
  outlined destroy of StocksKitCurrencyCache.Provider?(v7, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = v10;
  swift_release();
  ExtensionViewController.updateCanvasView(paper:)(v5);
  result = objc_msgSend(v9, sel_view);
  if (result)
  {
    v12 = result;
    if ((*(_BYTE *)(v0 + 80) & 1) != 0)
      v13 = 0;
    else
      v13 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
    v15 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 48);
    objc_msgSend(v12, sel_setBackgroundColor_, v13);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_task_dealloc();
    swift_task_dealloc();
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ExtensionViewController.setTool(_:)(NSDictionary a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  NSDictionary v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[2];
  _OWORD v18[2];
  __int128 v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v19 = 0x696669746E656469;
  *((_QWORD *)&v19 + 1) = 0xEA00000000007265;
  v6 = -[objc_class __swift_objectForKeyedSubscript:](a1.super.isa, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (!v6)
  {
    __break(1u);
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v18, &v19);
  swift_dynamicCast();
  v7 = (void *)MEMORY[0x1DF0E41AC](v17[0], v17[1]);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v18[0] = 0x69747265706F7270;
  *((_QWORD *)&v18[0] + 1) = 0xEA00000000007365;
  v8 = -[objc_class __swift_objectForKeyedSubscript:](a1.super.isa, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v18, (uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  if (v20)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v19, &demangling cache variable for type metadata for Any?);
  }
  v9.super.isa = 0;
LABEL_10:
  v10 = objc_msgSend((id)objc_opt_self(), sel_inkWithIdentifier_properties_, v7, v9.super.isa);

  if (v10)
  {
    v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v5, 1, 1, v11);
    v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    v13 = v10;
    swift_retain();
    v14 = static MainActor.shared.getter();
    v15 = (_QWORD *)swift_allocObject();
    v16 = MEMORY[0x1E0DF06E8];
    v15[2] = v14;
    v15[3] = v16;
    v15[4] = v13;
    v15[5] = v12;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setTool(_:), (uint64_t)v15);

    swift_release();
  }
}

uint64_t closure #1 in ExtensionViewController.setTool(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[26] = a4;
  v5[27] = a5;
  v6 = type metadata accessor for PKInk();
  v5[28] = v6;
  v5[29] = *(_QWORD *)(v6 - 8);
  v5[30] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[31] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setTool(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 216);
  swift_release();
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
  PKInk.tool.getter((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4 + 16);
  if (v5)
  {
    v6 = (void *)v5;
    outlined init with copy of FindResult(v0 + 16, v0 + 56);
    v7 = (uint64_t)v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool;
    swift_beginAccess();
    __swift_destroy_boxed_opaque_existential_1(v7);
    outlined init with take of FindResult((__int128 *)(v0 + 56), v7);
    swift_endAccess();

  }
  v8 = *(_QWORD *)(v0 + 216) + 16;
  swift_beginAccess();
  v9 = MEMORY[0x1DF0E666C](v8);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = *(void **)(v9 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
    v12 = v11;

    if (v11)
    {
      outlined init with copy of FindResult(v0 + 16, v0 + 96);
      specialized Canvas.tool.setter((_QWORD *)(v0 + 96), (void (*)(_QWORD *__return_ptr, double))specialized Canvas.tool.getter);

    }
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(double *)(v7 + 56) = a2;
  *(double *)(v7 + 64) = a3;
  *(double *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 40) = a7;
  type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 72) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    v5 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing) = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing) = v5;
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset) = v4;
    ExtensionViewController.updateLinedPaper()();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 88) = a5;
  *(_BYTE *)(v5 + 104) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 96) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(unsigned __int8 *)(v0 + 104);
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 67109120;
    *(_DWORD *)(v0 + 16) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v2, v3, "setHasLiveStreamMessenger %{BOOL}d", v5, 8u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v6 = *(_QWORD *)(v0 + 88);
  if (*(_BYTE *)(v0 + 104) == 1)
  {
    type metadata accessor for ExtensionViewController.LiveStreamMessenger();
    v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(_QWORD *)(v7 + 24) = MEMORY[0x1E0DEE9D8];
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger) = v7;
  }
  else
  {
    *(_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger) = 0;
  }
  v8 = *(_QWORD *)(v0 + 88);
  result = swift_release();
  v11 = *(char **)(v8 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
  if (v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger);
    if (v12)
      v13 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
    else
      v13 = 0;
    v14 = &v11[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(_QWORD *)v14 = v12;
    *((_QWORD *)v14 + 1) = v13;
    swift_retain_n();
    v15 = v11;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    result = swift_release();
  }
  v16 = *(_QWORD *)(v0 + 88);
  v17 = *(char **)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (v17)
  {
    v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger);
    if (v18)
    {
      result = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
      v19 = result;
    }
    else
    {
      v19 = 0;
    }
    v20 = *(char **)&v17[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
    if (!v20)
    {
      __break(1u);
      return result;
    }
    v21 = &v20[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(_QWORD *)v21 = v18;
    *((_QWORD *)v21 + 1) = v19;
    swift_retain_n();
    v22 = v17;
    v23 = v20;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    swift_release();
    v16 = *(_QWORD *)(v0 + 88);
  }
  v24 = *(char **)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
  if (v24)
  {
    if (*(_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger))
      v25 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ExtensionViewController.LiveStreamMessenger and conformance ExtensionViewController.LiveStreamMessenger, v10, (uint64_t (*)(uint64_t))type metadata accessor for ExtensionViewController.LiveStreamMessenger, (uint64_t)&protocol conformance descriptor for ExtensionViewController.LiveStreamMessenger);
    else
      v25 = 0;
    v26 = &v24[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger];
    swift_beginAccess();
    *((_QWORD *)v26 + 1) = v25;
    swift_unknownObjectWeakAssign();
    v27 = v24;
    swift_retain();
    PaperKitExtensionDocumentViewController.liveStreamMessenger.didset();

    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.setCanvasContentMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = a5;
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setCanvasContentMode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  char *v6;
  char *v7;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(_QWORD *)(v0 + 72);
    if (v4)
    {
      if (v4 != 1)
      {
LABEL_8:

        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    *(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode) = v5;
    v6 = *(char **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView);
    if (v6)
    {
      v7 = &v6[direct field offset for CanvasView.canvasContentMode];
      swift_beginAccess();
      *v7 = v5;
      objc_msgSend(v6, sel_setNeedsLayout);
    }
    goto LABEL_8;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1DDB0F000, v2, v3, "setUserInterfaceStyle", v4, 2u);
    MEMORY[0x1DF0E6558](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 48);

  swift_beginAccess();
  v6 = (void *)MEMORY[0x1DF0E666C](v5 + 16);
  if (!v6)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v7 = *(_QWORD *)(v0 + 56);
  if ((unint64_t)(v7 + 1) < 3)
  {
    v8 = v6;
    objc_msgSend(v6, sel_setOverrideUserInterfaceStyle_);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 40) = v7;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

void @objc ExtensionViewController.setCanvasContentMode(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  v14 = a1;
  swift_retain();
  v15 = static MainActor.shared.getter();
  v16 = (_QWORD *)swift_allocObject();
  v17 = MEMORY[0x1E0DF06E8];
  v16[2] = v15;
  v16[3] = v17;
  v16[4] = v13;
  v16[5] = a3;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a5, (uint64_t)v16);
  swift_release();

}

uint64_t closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 64) = a5;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 56) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  char v6;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2
    && (v3 = (void *)v2,
        v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController),
        v5 = v4,
        v3,
        v4))
  {
    PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(*(_BYTE *)(v0 + 64));

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  **(_BYTE **)(v0 + 40) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 120) = a8;
  *(double *)(v8 + 104) = a3;
  *(double *)(v8 + 112) = a4;
  *(double *)(v8 + 88) = a1;
  *(double *)(v8 + 96) = a2;
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 128) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

id closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  void *v14;
  __int128 v15;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release();
  swift_beginAccess();
  v2 = (char *)MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = &v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
    v4 = *(_OWORD *)(v0 + 104);
    *(_OWORD *)v3 = *(_OWORD *)(v0 + 88);
    *((_OWORD *)v3 + 1) = v4;

  }
  v5 = *(_QWORD *)(v0 + 120) + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  if (!v6)
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  v7 = (void *)v6;
  v8 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
  v9 = v8;

  if (!v8)
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  v11 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 112);
  v15 = *(_OWORD *)(v0 + 88);
  v12 = &v9[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  swift_beginAccess();
  *(_OWORD *)v12 = v15;
  *((_QWORD *)v12 + 2) = v11;
  *((_QWORD *)v12 + 3) = v10;
  result = objc_msgSend(v9, sel_view);
  if (result)
  {
    v14 = result;
    objc_msgSend(result, sel_setNeedsLayout);

    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ExtensionViewController.revertAllChanges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v6 = static MainActor.shared.getter();
  v7 = (_QWORD *)swift_allocObject();
  v8 = MEMORY[0x1E0DF06E8];
  v7[2] = v6;
  v7[3] = v8;
  v7[4] = v5;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.revertAllChanges(), (uint64_t)v7);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.revertAllChanges()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 112) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 120) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.revertAllChanges()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  void **v10;
  char *v11;
  void **v12;
  void *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;

  swift_release();
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1DDB0F000, v2, v3, "extensionRevertAllChanges", v4, 2u);
    MEMORY[0x1DF0E6558](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 112);

  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5 + 16);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController);
    v9 = v8;

    if (v8)
    {
      v10 = (void **)&v9[OBJC_IVAR____TtC8PaperKit19PaperViewController_pdfViewController];
      swift_beginAccess();
      v11 = (char *)*v10;
      if (*v10)
      {
        v12 = (void **)&v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
        swift_beginAccess();
        v13 = *v12;
        if (v13)
        {
          v14 = v11;
          v15 = v13;
          PaperDocumentView.revertAllChanges()();

          v9 = v15;
        }
      }

    }
  }
  v16 = *(_QWORD *)(v0 + 112) + 16;
  swift_beginAccess();
  v17 = MEMORY[0x1DF0E666C](v16);
  if (v17)
  {
    v18 = (void *)v17;
    v19 = *(void **)(v17 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController);
    v20 = v19;

    if (v19)
    {
      PaperKitExtensionDocumentViewController.revertAllChanges()();

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExtensionViewController.setMathDocument(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)mathLogger);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1DDB0F000, v5, v6, "ExtensionViewController.setMathDocument", v7, 2u);
    MEMORY[0x1DF0E6558](v7, -1, -1);
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for CanvasCalculateDocumentProxy();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy and conformance CanvasCalculateDocumentProxy, 255, (uint64_t (*)(uint64_t))type metadata accessor for CanvasCalculateDocumentProxy, (uint64_t)&protocol conformance descriptor for CanvasCalculateDocumentProxy);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  v8 = v15[1];
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
  v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  swift_retain();
  v11 = static MainActor.shared.getter();
  v12 = (_QWORD *)swift_allocObject();
  v13 = MEMORY[0x1E0DF06E8];
  v12[2] = v11;
  v12[3] = v13;
  v12[4] = v10;
  v12[5] = v8;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathDocument(_:), (uint64_t)v12);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathDocument(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setMathDocument(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  char v6;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2
    && (v3 = (void *)v2,
        v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView),
        v5 = v4,
        v3,
        v4))
  {
    PaperTextAttachmentCanvasView.setMathDocument(_:)();

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  **(_BYTE **)(v0 + 40) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v46 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v44 = v13;
  v45 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v39 - v16;
  v18 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v18 = a1 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    swift_bridgeObjectRetain();
    v42 = a2;
    v43 = a1;
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)mathLogger);
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v41(v17, a3, v10);
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v39 = v3;
    v23 = v22;
    v24 = swift_slowAlloc();
    v40 = a3;
    v25 = v24;
    v48 = v24;
    *(_DWORD *)v23 = 136380931;
    swift_bridgeObjectRetain();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 2080;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl(&dword_1DDB0F000, v20, v21, "ExtensionViewController.setMathResult: %{private}s, uuid: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    v28 = v25;
    a3 = v40;
    MEMORY[0x1DF0E6558](v28, -1, -1);
    MEMORY[0x1DF0E6558](v23, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  v29 = type metadata accessor for TaskPriority();
  v30 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v46, 1, 1, v29);
  v31 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v32 = v45;
  v41(v45, a3, v10);
  type metadata accessor for MainActor();
  swift_retain();
  v33 = static MainActor.shared.getter();
  v34 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v35 = (char *)swift_allocObject();
  v36 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v35 + 2) = v33;
  *((_QWORD *)v35 + 3) = v36;
  v37 = v43;
  *((_QWORD *)v35 + 4) = v31;
  *((_QWORD *)v35 + 5) = v37;
  *((_QWORD *)v35 + 6) = v42;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v35[v34], v32, v10);
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(v30, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:), (uint64_t)v35);
  return swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v7[5] = a1;
  type metadata accessor for MainActor();
  v7[10] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  char v6;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v2
    && (v3 = (void *)v2,
        v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView),
        v5 = v4,
        v3,
        v4))
  {
    PaperTextAttachmentCanvasView.setMathResult(_:expressionUUID:)(*(_QWORD *)(v0 + 56), *(void **)(v0 + 64));

    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  **(_BYTE **)(v0 + 40) = v6;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ExtensionViewController.setMathEnabled(_:)(Swift::Bool a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v15[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)mathLogger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v9 = 67109120;
    v15[3] = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v7, v8, "ExtensionViewController.setMathEnabled: %{BOOL}d", v9, 8u);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }

  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  v12 = static MainActor.shared.getter();
  v13 = swift_allocObject();
  v14 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v14;
  *(_BYTE *)(v13 + 32) = a1;
  *(_QWORD *)(v13 + 40) = v11;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.setMathEnabled(_:), v13);
  swift_release();
}

uint64_t closure #1 in ExtensionViewController.setMathEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 56) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.setMathEnabled(_:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v1 = *(unsigned __int8 *)(v0 + 56);
  swift_release();
  if (v1 == 1)
  {
    v2 = *(_QWORD *)(v0 + 40) + 16;
    swift_beginAccess();
    v3 = MEMORY[0x1DF0E666C](v2);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
      v6 = v5;

      if (v5)
      {
        PaperTextAttachmentCanvasView.setupMathIfNecessary()();

      }
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 40) = v16;
  *(_OWORD *)(v8 + 24) = v15;
  *(_QWORD *)(v8 + 48) = type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 56) = static MainActor.shared.getter();
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 64) = v13;
  *v13 = v8;
  v13[1] = closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:);
  return PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(a5, a6, a7, a8);
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;

  swift_release();
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for extensionLogger != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
    swift_bridgeObjectRetain();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.info.getter();
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 72);
    if (v4)
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 134217984;
      v7 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v2, v3, "Found find results (%ld) but task has been cancelled.", v6, 0xCu);
      MEMORY[0x1DF0E6558](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(void (**)(uint64_t))(v0 + 32);
    v10 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v10 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
    v11 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    v9(v11);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 40) = v16;
  *(_OWORD *)(v8 + 24) = v15;
  *(_QWORD *)(v8 + 48) = type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 56) = static MainActor.shared.getter();
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 64) = v13;
  *v13 = v8;
  v13[1] = closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:);
  return PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a5, a6, a7, a8);
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);

  swift_release();
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for extensionLogger != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)extensionLogger);
    swift_bridgeObjectRetain();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.info.getter();
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 72);
    if (v4)
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 134217984;
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 16) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v2, v3, "Found find results (%ld) but task has been cancelled.", v6, 0xCu);
      MEMORY[0x1DF0E6558](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v11 = *(void (**)(uint64_t))(v0 + 32);
    swift_bridgeObjectRelease();
    v11(v10);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ExtensionViewController.endSearch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)extensionLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "endSearch()", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask))
  {
    v6 = swift_retain();
    MEMORY[0x1DF0E453C](v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
}

double ExtensionViewController.searchResultAndDocumentView(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23[40];

  v4 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
  if (!v4)
    goto LABEL_14;
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (!v5)
    goto LABEL_14;
  v6 = v2;
  v8 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v9 = *v8;
  if (!*v8)
    goto LABEL_14;
  v10 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults];
  if (*(_QWORD *)(v10 + 16) <= a1)
  {
    v13 = one-time initialization token for extensionLogger;
    v9 = v9;
    if (v13 == -1)
    {
LABEL_9:
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)extensionLogger);
      v15 = v6;
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        *(_DWORD *)v18 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v18 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1DDB0F000, v16, v17, "Cached find results got out of sync. Asked for frame for index %ld but only %ld results cached.", (uint8_t *)v18, 0x16u);
        MEMORY[0x1DF0E6558](v18, -1, -1);
      }
      else
      {

        v16 = v15;
      }

      goto LABEL_14;
    }
LABEL_16:
    swift_once();
    goto LABEL_9;
  }
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  outlined init with copy of FindResult(v10 + 40 * a1 + 32, (uint64_t)v23);
  v11 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
  if (swift_dynamicCast())
  {
    result = *(double *)&v19;
    *(_QWORD *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v19;
    *(_OWORD *)(a2 + 24) = v20;
    *(_QWORD *)(a2 + 40) = v21;
    *(_BYTE *)(a2 + 48) = v22;
    return result;
  }

LABEL_14:
  *(_BYTE *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t ExtensionViewController.searchResultAndCanvasView(for:)(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  char v5[40];

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
  if (!v2)
    return (uint64_t)v2;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults);
  if (*(_QWORD *)(v3 + 16) <= result)
    return 0;
  if ((result & 0x8000000000000000) == 0)
  {
    outlined init with copy of FindResult(v3 + 40 * result + 32, (uint64_t)v5);
    v4 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
    type metadata accessor for DrawingFindResult();
    if (swift_dynamicCast())
      return (uint64_t)v2;

    return 0;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ExtensionViewController.searchScrollToVisible(_:)(Swift::Int a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)extensionLogger);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1DDB0F000, v14, v15, "searchScrollToVisible(_:)", v16, 2u);
    MEMORY[0x1DF0E6558](v16, -1, -1);
  }

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v17 = (void *)static OS_dispatch_queue.main.getter();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v2;
  *(_QWORD *)(v18 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.searchScrollToVisible(_:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_44;
  v19 = _Block_copy(aBlock);
  v20 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v12, v7, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

void closure #1 in ExtensionViewController.searchScrollToVisible(_:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;

  ExtensionViewController.searchResultAndDocumentView(for:)(a2, (uint64_t)&v14);
  v4 = v14;
  if (v14)
  {
    v6 = v18;
    v5 = v19;
    v8 = v16;
    v7 = v17;
    v9 = v15;
    v10 = v20 & 1;
    v14 = v15;
    v15 = (void *)v16;
    v16 = v17;
    v17 = v18;
    v18 = (uint64_t)v19;
    LOBYTE(v19) = v20 & 1;
    PaperDocumentFindResult.scrollToVisible(in:)((uint64_t)v4);

    outlined consume of PaperDocumentFindResult.Content(v9, v8, v7, v6, v5, v10);
  }
  else
  {
    v11 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView);
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults);
      if (*(_QWORD *)(v12 + 16) > a2)
      {
        if (a2 < 0)
        {
          __break(1u);
        }
        else
        {
          outlined init with copy of FindResult(v12 + 40 * a2 + 32, (uint64_t)&v14);
          v13 = v11;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FindResult);
          type metadata accessor for DrawingFindResult();
          if ((swift_dynamicCast() & 1) != 0)
          {

            swift_release();
          }
          else
          {

          }
        }
      }
    }
  }
}

void @objc ExtensionViewController.searchFrame(for:reply:)(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);

}

uint64_t ExtensionViewController.encrypt(_:)(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t ExtensionViewController.encrypt(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  dispatch_semaphore_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v17;
  dispatch_queue_t queue;

  v5 = dispatch_semaphore_create(0);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DDF33630;
  queue = *(dispatch_queue_t *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = v6;
  v9 = a2;
  v8[6] = v5;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in ExtensionViewController.decrypt(_:);
  *(_QWORD *)(v10 + 24) = v8;
  aBlock[4] = _sIg_Ieg_TRTA_0;
  v17 = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_22;
  v11 = _Block_copy(aBlock);
  v12 = v17;
  swift_retain();
  swift_retain();
  v13 = v5;
  swift_retain();
  outlined copy of Data._Representation(a1, v9);
  swift_release();
  dispatch_sync(queue, v11);
  _Block_release(v11);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v7 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    if (*(_QWORD *)(v6 + 24) >> 60 == 15)
    {
      lazy protocol witness table accessor for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError();
      swift_allocError();
      swift_willThrow();
    }
    else
    {
      v12 = *(_QWORD *)(v6 + 16);
      outlined copy of Data._Representation(v12, *(_QWORD *)(v6 + 24));
    }
    swift_release();

    swift_release();
    return v12;
  }
  return result;
}

void closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v6;
  Class isa;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v12[6];

  v6 = *(void **)(a1 + 16);
  if (v6)
  {
    swift_unknownObjectRetain();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = a4;
    *(_QWORD *)(v9 + 24) = a5;
    v12[4] = partial apply for closure #1 in closure #1 in ExtensionViewController.decrypt(_:);
    v12[5] = v9;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1107296256;
    v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ();
    v12[3] = &block_descriptor_176;
    v10 = _Block_copy(v12);
    swift_retain();
    v11 = a5;
    swift_release();
    objc_msgSend(v6, sel_decryptData_reply_, isa, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);

  }
  OS_dispatch_semaphore.wait()();
}

Swift::Int closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  swift_beginAccess();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = a2;
  outlined copy of Data?(a1, a2);
  outlined consume of Data?(v6, v7);
  return OS_dispatch_semaphore.signal()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Data?) -> ()(uint64_t a1, void *a2)
{
  void *v2;
  void (*v3)(void *, unint64_t);
  id v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a2;
  v3 = *(void (**)(void *, unint64_t))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v4 = v2;
    v2 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    swift_retain();
    v6 = 0xF000000000000000;
  }
  v3(v2, v6);
  outlined consume of Data?((uint64_t)v2, v6);
  return swift_release();
}

uint64_t ExtensionViewController.handleLink(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  void *v16;
  void *v17;
  _QWORD aBlock[8];
  __int128 v20;
  __int128 v21;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = Notification.userInfo.getter();
  if (!v11)
  {
    v20 = 0u;
    v21 = 0u;
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v20, &demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
  }
  v12 = v11;
  aBlock[6] = 5001813;
  aBlock[7] = 0xE300000000000000;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v12 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v14 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v13, (uint64_t)&v20);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_10;
  v15 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v15 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    ExtensionViewController.openLink(_:)((uint64_t)v10);
    v16 = (void *)MEMORY[0x1DF0E41AC](*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName), *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName + 8));
    aBlock[4] = closure #1 in ExtensionViewController.analyticsCountLinkClick();
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_38;
    v17 = _Block_copy(aBlock);
    AnalyticsSendEventLazy();
    _Block_release(v17);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
}

unint64_t closure #1 in ExtensionViewController.analyticsCountLinkClick()()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(inited + 32) = 0x756F436B63696C63;
  *(_QWORD *)(inited + 40) = 0xEA0000000000746ELL;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[6] = swift_task_alloc();
  v6[7] = type metadata accessor for MainActor();
  v6[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release();
  v2 = (void *)MEMORY[0x1DF0E666C](v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    outlined copy of Data._Representation(v5, v4);
    v7 = v2;
    v8 = static MainActor.shared.getter();
    v9 = (_QWORD *)swift_allocObject();
    v10 = MEMORY[0x1E0DF06E8];
    v9[2] = v8;
    v9[3] = v10;
    v9[4] = v5;
    v9[5] = v4;
    v9[6] = v7;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.receiveLiveStreamData(_:), (uint64_t)v9);

    swift_release();
  }
  **(_BYTE **)(v0 + 16) = v2 == 0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExtensionViewController.LiveStreamMessenger.receiveLiveStreamData(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation.YieldResult);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  v21 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = *(_QWORD *)(v2 + 24);
  v15 = *(_QWORD *)(result + 16);
  if (v15)
  {
    v16 = result + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v19 = *(_QWORD *)(v21 + 72);
    v20 = v5;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    v18[1] = result;
    swift_bridgeObjectRetain();
    do
    {
      v17(v13, v16, v10);
      v22 = a1;
      v23 = a2;
      outlined copy of Data._Representation(a1, a2);
      AsyncStream.Continuation.yield(_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v20);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v10);
      v16 += v19;
      --v15;
    }
    while (v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  type metadata accessor for MainActor();
  swift_retain();
  v14 = static MainActor.shared.getter();
  v15 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v16 = (char *)swift_allocObject();
  v17 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v16 + 2) = v14;
  *((_QWORD *)v16 + 3) = v17;
  *((_QWORD *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v16[v15], v8, v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[10] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v6 = (unint64_t *)(v5 + 24);
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v5 + 24) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1, v7);
    *v6 = v7;
  }
  v10 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(v7 + 24);
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1, v7);
    *v6 = v7;
  }
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v7 + 16) = v10 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v7+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v10, v12, v13);
  swift_endAccess();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ExtensionViewController.LiveStreamMessenger.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.send(_:) in conformance ExtensionViewController.LiveStreamMessenger(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  type metadata accessor for MainActor();
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  v11 = static MainActor.shared.getter();
  v12 = (_QWORD *)swift_allocObject();
  v13 = MEMORY[0x1E0DF06E8];
  v12[2] = v11;
  v12[3] = v13;
  v12[4] = v3;
  v12[5] = a1;
  v12[6] = a2;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:), (uint64_t)v12);
  return swift_release();
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.messages.getter in conformance ExtensionViewController.LiveStreamMessenger()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation.BufferingPolicy);
  v2 = MEMORY[0x1E0C80A78](v0, v1);
  (*(void (**)(char *, _QWORD, double))(v4 + 104))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0DF07B8], v2);
  return AsyncStream.init(_:bufferingPolicy:_:)();
}

id ExtensionViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

id ExtensionViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  objc_class *v32;
  void *v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  objc_super v41;
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v36 = a1;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = type metadata accessor for PKInkingTool.InkType();
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger] = 0;
  v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = 0;
  v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground] = 0;
  v16 = (uint64_t *)&v3[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  (*(void (**)(char *, _QWORD, double))(v17 + 104))((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CD0F60], v14);
  v18 = (void *)objc_opt_self();
  v19 = v3;
  v20 = objc_msgSend(v18, sel_blackColor);
  v21 = type metadata accessor for PKInkingTool();
  v22 = MEMORY[0x1E0CD0F70];
  v16[3] = v21;
  v16[4] = v22;
  __swift_allocate_boxed_opaque_existential_1(v16);
  PKInkingTool.init(_:color:width:)();
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset] = 0;
  v23 = &v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  v24 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v23 = *MEMORY[0x1E0DC49E8];
  v23[1] = v24;
  v25 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper;
  type metadata accessor for ExtensionViewController.ProxyWrapper();
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)&v19[v25] = v26;
  v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] = 1;
  v27 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v42 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v7, *MEMORY[0x1E0DEF8D0], v38);
  v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_suspend(v28);
  *(_QWORD *)&v19[v27] = v28;
  v29 = v39;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x1E0DEE9D8];
  v30 = &v19[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName];
  *v30 = 0xD000000000000027;
  v30[1] = 0x80000001DDF4CE70;

  if (v29)
  {
    v31 = (void *)MEMORY[0x1DF0E41AC](v36, v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  v32 = (objc_class *)type metadata accessor for ExtensionViewController();
  v41.receiver = v19;
  v41.super_class = v32;
  v33 = v40;
  v34 = objc_msgSendSuper2(&v41, sel_initWithNibName_bundle_, v31, v40);

  return v34;
}

id ExtensionViewController.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ExtensionViewController.init(coder:)(void *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  objc_class *v28;
  void *v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  objc_super v35;
  uint64_t v36;

  v34 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8, v9);
  v10 = type metadata accessor for PKInkingTool.InkType();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_liveStreamMessenger] = 0;
  v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_canvasContentMode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperCanvasView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController] = 0;
  v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_transparentBackground] = 0;
  v14 = (uint64_t *)&v1[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_tool];
  (*(void (**)(char *, _QWORD, double))(v15 + 104))((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0CD0F60], v12);
  v16 = (void *)objc_opt_self();
  v17 = v1;
  v18 = objc_msgSend(v16, sel_blackColor);
  v19 = type metadata accessor for PKInkingTool();
  v20 = MEMORY[0x1E0CD0F70];
  v14[3] = v19;
  v14[4] = v20;
  __swift_allocate_boxed_opaque_existential_1(v14);
  PKInkingTool.init(_:color:width:)();
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalSpacing] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperVerticalSpacing] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_linedPaperHorizontalInset] = 0;
  v21 = &v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_extensionHostSafeAreaInsets];
  v22 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v21 = *MEMORY[0x1E0DC49E8];
  v21[1] = v22;
  v23 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper;
  type metadata accessor for ExtensionViewController.ProxyWrapper();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)&v17[v23] = v24;
  v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueueSuspended] = 1;
  v25 = OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  v36 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v5, *MEMORY[0x1E0DEF8D0], v33);
  v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  dispatch_suspend(v26);
  *(_QWORD *)&v17[v25] = v26;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController____lazy_storage___multipeerConnection] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x1E0DEE9D8];
  v27 = &v17[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_LinkAnalyticsEventName];
  *v27 = 0xD000000000000027;
  v27[1] = 0x80000001DDF4CE70;

  v28 = (objc_class *)type metadata accessor for ExtensionViewController();
  v35.receiver = v17;
  v35.super_class = v28;
  v29 = v34;
  v30 = objc_msgSendSuper2(&v35, sel_initWithCoder_, v34);

  return v30;
}

uint64_t protocol witness for EncryptionDelegate.decrypt(_:) in conformance ExtensionViewController(uint64_t a1, unint64_t a2)
{
  return ExtensionViewController.decrypt(_:)(a1, a2);
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance ExtensionViewController(uint64_t a1, unint64_t a2)
{
  return ExtensionViewController.send(_:)(a1, a2);
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance ExtensionViewController()
{
  return CRMulticastLink.send(_:)();
}

uint64_t closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)(uint64_t result)
{
  void *v1;
  void *v2;

  v1 = *(void **)(result + 16);
  if (v1)
  {
    swift_unknownObjectRetain();
    v2 = (void *)_convertErrorToNSError(_:)();
    objc_msgSend(v1, sel_paperDidFailToLoad_, v2);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_1DDB69030()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.send(_:)()
{
  uint64_t v0;

  return closure #1 in ExtensionViewController.send(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1DDB69068()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDB6908C()
{
  return objectdestroy_8Tm();
}

uint64_t partial apply for closure #1 in ExtensionViewController.revertAllChanges()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.revertAllChanges()(a1, v4, v5, v6);
}

uint64_t sub_1DDB69100()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_1DDB69134()
{
  uint64_t v0;

  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ExtensionViewController.decrypt(_:)()
{
  uint64_t v0;

  closure #1 in ExtensionViewController.decrypt(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_1DDB69180()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError;
  if (!lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ExtensionViewController.DecryptionError, &type metadata for ExtensionViewController.DecryptionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError;
  if (!lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ExtensionViewController.DecryptionError, &type metadata for ExtensionViewController.DecryptionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtensionViewController.DecryptionError and conformance ExtensionViewController.DecryptionError);
  }
  return result;
}

uint64_t type metadata accessor for ExtensionViewController.ProxyWrapper()
{
  return objc_opt_self();
}

uint64_t method lookup function for ExtensionViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExtensionViewController.accept(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of ExtensionViewController.send(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of ExtensionViewController.revertAllChanges()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of ExtensionViewController.encrypt(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ExtensionViewController.decrypt(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x390))();
}

uint64_t type metadata accessor for ExtensionViewController.LiveStreamMessenger()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ExtensionViewController.DecryptionError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ExtensionViewController.DecryptionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1DDB6938C + 4 * byte_1DDF33650[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1DDB693AC + 4 * byte_1DDF33655[v4]))();
}

_BYTE *sub_1DDB6938C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1DDB693AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDB693B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDB693BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDB693C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDB693CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ExtensionViewController.DecryptionError()
{
  return &type metadata for ExtensionViewController.DecryptionError;
}

uint64_t associated type witness table accessor for PaperKitLiveStreamMessenger.Messages : AsyncSequence in ExtensionViewController.LiveStreamMessenger()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AsyncStream<Data> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Data>, MEMORY[0x1E0DF0848]);
}

uint64_t partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(a1, v1);
}

uint64_t sub_1DDB69464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Data>.Continuation)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in ExtensionViewController.LiveStreamMessenger.messages.getter(a1, v5, v6, v7, v8);
}

uint64_t sub_1DDB6957C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.LiveStreamMessenger.send(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.receiveLiveStreamData(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1DDB696E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ExtensionViewController.searchScrollToVisible(_:)()
{
  uint64_t v0;

  closure #1 in ExtensionViewController.searchScrollToVisible(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1DDB69714()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathEnabled(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathEnabled(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_1DDB697BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathResult(_:expressionUUID:)(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in ExtensionViewController.setMathDocument(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setMathDocument(_:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDB69964()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setTool(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setTool(_:)(a1, v4, v5, v7, v6);
}

uint64_t outlined init with copy of FindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1DDB69A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = *((_BYTE *)v1 + v5 + *(_QWORD *)(v4 + 64));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadBookmark(_:readOnly:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1DDB69B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v6 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v6(v0 + v4, v1);
  v6(v0 + v5, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 56) & ~v4;
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = (uint64_t)v1 + ((*(_QWORD *)(v3 + 64) + v4 + v5) & ~v4);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadPaper(_:paperBookmark:coherenceContextBookmark:encrypted:userInterfaceState:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1DDB69D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(unint64_t, uint64_t);

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                      - 8)
                          + 80);
  v6 = (v4 + v5) & ~v5;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v7 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v7(v0 + v3, v1);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v6, 1, v1))
    v7(v0 + v6, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.loadPaper(_:paperURL:coherenceContextURL:encrypted:userInterfaceState:)(a1, v5, v6, v7, v8, v9, v10, (uint64_t)v1 + v4);
}

uint64_t sub_1DDB69EE0()
{
  return 24;
}

__n128 sub_1DDB69EEC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined destroy of Paper(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDB69F3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.reportPaperBounds(_:)()
{
  uint64_t v0;

  return closure #1 in ExtensionViewController.reportPaperBounds(_:)(*(_QWORD *)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

uint64_t sub_1DDB69F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.openLink(_:)()
{
  uint64_t v0;

  type metadata accessor for URL();
  return closure #1 in ExtensionViewController.openLink(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t objectdestroy_57Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.newMultipeerConnection(model:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ExtensionViewController.newMultipeerConnection(model:)(a1, v4, v5, v7, v6);
}

uint64_t specialized ExtensionViewController.documentViewController(_:didFailToLoad:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = a1;
  aBlock[4] = partial apply for closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_167;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = a1;
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v4, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v13, v8, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

uint64_t specialized ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1, uint64_t a2, char a3, char a4, char *a5, void (**a6)(_QWORD, _QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  void (**v20)(_QWORD, _QWORD);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  char v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint8_t *v55;
  _QWORD v57[2];
  uint64_t v58;

  v58 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a6;
  _Block_copy(a6);
  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v57[1] = __swift_project_value_buffer(v16, (uint64_t)extensionLogger);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = a5;
    v20 = a6;
    v21 = v15;
    v22 = v14;
    v23 = a2;
    v24 = a3;
    v25 = a4;
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1DDB0F000, v17, v18, "search(for:ignoreCase:wholeWords:reply:)", v26, 2u);
    v27 = v26;
    a4 = v25;
    a3 = v24;
    a2 = v23;
    v14 = v22;
    v15 = v21;
    a6 = v20;
    a5 = v19;
    MEMORY[0x1DF0E6558](v27, -1, -1);
  }

  *(_QWORD *)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindResults] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperDocumentViewController];
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
    if (v29)
    {
      v30 = (void **)(v29 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
      swift_beginAccess();
      v31 = *v30;
      if (v31)
      {
        v32 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 1, 1, v32);
        type metadata accessor for MainActor();
        v33 = v31;
        swift_bridgeObjectRetain();
        v34 = a5;
        v35 = (uint64_t)v14;
        v36 = a2;
        v37 = a3;
        v38 = a4;
        v39 = v34;
        swift_retain();
        v40 = v33;
        v41 = static MainActor.shared.getter();
        v42 = swift_allocObject();
        v43 = MEMORY[0x1E0DF06E8];
        *(_QWORD *)(v42 + 16) = v41;
        *(_QWORD *)(v42 + 24) = v43;
        v44 = v58;
        *(_QWORD *)(v42 + 32) = v40;
        *(_QWORD *)(v42 + 40) = v44;
        *(_QWORD *)(v42 + 48) = v36;
        *(_BYTE *)(v42 + 56) = v37 & 1;
        *(_BYTE *)(v42 + 57) = v38 & 1;
        *(_QWORD *)(v42 + 64) = v39;
        *(_QWORD *)(v42 + 72) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ();
        *(_QWORD *)(v42 + 80) = v15;
        *(_QWORD *)&v39[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v42);

LABEL_11:
        swift_release();
        return swift_release();
      }
    }
  }
  v45 = *(void **)&a5[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_paperTextCanvasView];
  if (v45)
  {
    v46 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v14, 1, 1, v46);
    type metadata accessor for MainActor();
    v47 = v45;
    swift_bridgeObjectRetain();
    v48 = a5;
    swift_retain();
    v49 = static MainActor.shared.getter();
    v50 = swift_allocObject();
    v51 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v50 + 16) = v49;
    *(_QWORD *)(v50 + 24) = v51;
    v52 = v58;
    *(_QWORD *)(v50 + 32) = v47;
    *(_QWORD *)(v50 + 40) = v52;
    *(_QWORD *)(v50 + 48) = a2;
    *(_BYTE *)(v50 + 56) = a3 & 1;
    *(_BYTE *)(v50 + 57) = a4 & 1;
    *(_QWORD *)(v50 + 64) = v48;
    *(_QWORD *)(v50 + 72) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ();
    *(_QWORD *)(v50 + 80) = v15;
    *(_QWORD *)&v48[OBJC_IVAR____TtC8PaperKit23ExtensionViewController_currentFindTask] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:), v50);

    goto LABEL_11;
  }
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, (os_log_type_t)v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_1DDB0F000, v53, (os_log_type_t)v54, "Unable to search without an inline paper document view.", v55, 2u);
    MEMORY[0x1DF0E6558](v55, -1, -1);
  }

  a6[2](a6, 0);
  return swift_release();
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6CGRectVG_AGs5NeverOTg5082_s8PaperKit23ExtensionViewControllerC11searchFrame3for5replyySi_ySo7NSArrayCctFSo6D8VAJXEfU_0G3Kit0ijK0CSo6UIViewCTf1cn_nTf4ngg_n(uint64_t a1, void *a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  double *i;
  double v9;
  double v10;
  double v11;
  double v12;
  id result;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    return (id)v4;
  v26 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v4 = v26;
  for (i = (double *)(a1 + 56); ; i += 4)
  {
    v9 = *(i - 3);
    v10 = *(i - 2);
    v11 = *(i - 1);
    v12 = *i;
    result = objc_msgSend(a2, sel_view);
    if (!result)
      break;
    v14 = result;
    objc_msgSend(result, sel_convertRect_fromCoordinateSpace_, a3, v9, v10, v11, v12);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v22 = v21;

    v24 = *(_QWORD *)(v26 + 16);
    v23 = *(_QWORD *)(v26 + 24);
    if (v24 >= v23 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
    *(_QWORD *)(v26 + 16) = v24 + 1;
    v25 = (_QWORD *)(v26 + 32 * v24);
    v25[4] = v16;
    v25[5] = v18;
    v25[6] = v20;
    v25[7] = v22;
    if (!--v3)
      return (id)v4;
  }
  __break(1u);
  return result;
}

void specialized ExtensionViewController.searchFrame(for:reply:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  id v22;
  char *v23;
  char *v24;
  uint64_t v25;
  CGFloat *v26;
  uint64_t v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  CGFloat MinX;
  CGFloat MinY;
  CGFloat Width;
  CGFloat Height;
  Class isa;
  uint64_t v38;
  void *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)extensionLogger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DDB0F000, v7, v8, "searchFrame(for:reply:)", v9, 2u);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }

  ExtensionViewController.searchResultAndDocumentView(for:)(a1, (uint64_t)&v40);
  v10 = v40;
  if (v40)
  {
    v12 = v44;
    v11 = v45;
    v14 = v42;
    v13 = v43;
    v15 = v41;
    v16 = v46 & 1;
    v40 = (char *)v41;
    v41 = (void *)v42;
    v42 = v43;
    v43 = v44;
    v44 = (uint64_t)v45;
    LOBYTE(v45) = v46 & 1;
    v17 = PaperDocumentFindResult.frames(in:)(v10);
    outlined consume of PaperDocumentFindResult.Content(v15, v14, v13, v12, v11, v16);
  }
  else
  {
    v18 = ExtensionViewController.searchResultAndCanvasView(for:)(a1);
    if (!v18)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
      v39 = (void *)MEMORY[0x1DF0E4A1C](MEMORY[0x1E0DEE9D8]);
      (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v39);

      return;
    }
    v10 = (char *)v18;
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
    v17 = (_OWORD *)swift_allocObject();
    v17[1] = xmmword_1DDF32CF0;
    v21 = *(_OWORD *)(v20 + 40);
    v17[2] = *(_OWORD *)(v20 + 24);
    v17[3] = v21;
    swift_release();
  }
  v22 = a2;
  v23 = v10;
  v24 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6CGRectVG_AGs5NeverOTg5082_s8PaperKit23ExtensionViewControllerC11searchFrame3for5replyySi_ySo7NSArrayCctFSo6D8VAJXEfU_0G3Kit0ijK0CSo6UIViewCTf1cn_nTf4ngg_n((uint64_t)v17, v22, (uint64_t)v23);
  swift_bridgeObjectRelease();

  v25 = *((_QWORD *)v24 + 2);
  if (v25)
  {
    v38 = a3;
    v40 = (char *)MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
    v26 = (CGFloat *)(v24 + 56);
    v27 = MEMORY[0x1E0DEF040];
    do
    {
      v28 = *(v26 - 3);
      v29 = *(v26 - 2);
      v30 = *(v26 - 1);
      v31 = *v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_1DDF33640;
      v47.origin.x = v28;
      v47.origin.y = v29;
      v47.size.width = v30;
      v47.size.height = v31;
      MinX = CGRectGetMinX(v47);
      *(_QWORD *)(v32 + 56) = v27;
      *(CGFloat *)(v32 + 32) = MinX;
      v48.origin.x = v28;
      v48.origin.y = v29;
      v48.size.width = v30;
      v48.size.height = v31;
      MinY = CGRectGetMinY(v48);
      *(_QWORD *)(v32 + 88) = v27;
      *(CGFloat *)(v32 + 64) = MinY;
      v49.origin.x = v28;
      v49.origin.y = v29;
      v49.size.width = v30;
      v49.size.height = v31;
      Width = CGRectGetWidth(v49);
      *(_QWORD *)(v32 + 120) = v27;
      *(CGFloat *)(v32 + 96) = Width;
      v50.origin.x = v28;
      v50.origin.y = v29;
      v50.size.width = v30;
      v50.size.height = v31;
      Height = CGRectGetHeight(v50);
      *(_QWORD *)(v32 + 152) = v27;
      *(CGFloat *)(v32 + 128) = Height;
      MEMORY[0x1DF0E4A34](v32);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v26 += 4;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    a3 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSArray);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

void specialized ExtensionViewController.searchDrawImage(for:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  UIImage *v21;
  NSData *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  Class isa;
  id v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;

  if (one-time initialization token for extensionLogger != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)extensionLogger);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1DDB0F000, v6, v7, "searchDrawImage(for:reply:)", v8, 2u);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }

  ExtensionViewController.searchResultAndDocumentView(for:)(a1, (uint64_t)&v33);
  v9 = v33;
  if (v33)
  {
    v11 = v37;
    v10 = v38;
    v13 = v35;
    v12 = v36;
    v14 = v34;
    v15 = v39 & 1;
    v33 = v34;
    v34 = (void *)v35;
    v35 = v36;
    v36 = v37;
    v37 = (uint64_t)v38;
    LOBYTE(v38) = v39 & 1;
    PaperDocumentFindResult.draw(for:)((uint64_t)v9);
    v31 = v16;

    outlined consume of PaperDocumentFindResult.Content(v14, v13, v12, v11, v10, v15);
    v17 = v31;
    if (!v31)
      goto LABEL_13;
    goto LABEL_10;
  }
  v18 = ExtensionViewController.searchResultAndCanvasView(for:)(a1);
  if (v18)
  {
    v19 = (void *)v18;
    v31 = (id)DrawingFindResult.draw(for:)(v18);

    swift_release();
    v17 = v31;
    if (!v31)
    {
LABEL_13:
      v32 = v17;
      (*(void (**)(uint64_t, _QWORD, double, double))(a3 + 16))(a3, 0, 0.0, 0.0);

      return;
    }
LABEL_10:
    v20 = v17;
    v21 = (UIImage *)objc_msgSend(v20, sel_imageWithRenderingMode_, 1);
    v22 = UIImagePNGRepresentation(v21);

    if (v22)
    {
      v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      outlined copy of Data._Representation(v23, v25);
      objc_msgSend(v20, sel_size);
      v27 = v26;
      objc_msgSend(v20, sel_size);
      v29 = v28;
      isa = Data._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, double, double))(a3 + 16))(a3, isa, v27, v29);

      outlined consume of Data._Representation(v23, v25);
      outlined consume of Data._Representation(v23, v25);
      return;
    }

    v17 = v31;
    goto LABEL_13;
  }
  (*(void (**)(uint64_t, _QWORD, double, double))(a3 + 16))(a3, 0, 0.0, 0.0);
}

uint64_t sub_1DDB6AF98()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 57);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_102Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_BYTE *)(v1 + 56);
  v10 = *(_BYTE *)(v1 + 57);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.search(for:ignoreCase:wholeWords:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1DDB6B180()
{
  return objectdestroy_8Tm();
}

uint64_t sub_1DDB6B188()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = *((_QWORD *)v1 + 8);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.reportSafeAreaInsets(top:left:bottom:right:)(v6, v7, v8, v9, a1, v4, v5, v10);
}

uint64_t sub_1DDB6B248()
{
  return objectdestroy_8Tm();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ExtensionViewController.setPaperDocumentInlineThumbnailsVisible(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_1DDB6B2CC()
{
  return objectdestroy_8Tm();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setUserInterfaceStyle(userInterfaceStyle:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDB6B34C()
{
  return objectdestroy_8Tm();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setCanvasContentMode(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setCanvasContentMode(_:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDB6B3CC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setHasLiveStreamMessenger(_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_1DDB6B474()
{
  return objectdestroy_8Tm();
}

uint64_t objectdestroy_8Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(v7, v8, v9, a1, v4, v5, v6);
}

uint64_t sub_1DDB6B544()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.setupWithData(_:transparentBackground:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t objectdestroy_33Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.receiveMulticastData(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in ExtensionViewController.receiveMulticastData(_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t specialized ExtensionViewController.documentViewControllerDidSave(_:)()
{
  return specialized ExtensionViewController.documentViewControllerDidSave(_:)((uint64_t)partial apply for closure #1 in ExtensionViewController.documentViewControllerDidSave(_:), (uint64_t)&block_descriptor_170);
}

uint64_t specialized ExtensionViewController.documentViewControllerDidScroll(_:)()
{
  return specialized ExtensionViewController.documentViewControllerDidSave(_:)((uint64_t)partial apply for closure #1 in ExtensionViewController.documentViewControllerDidScroll(_:), (uint64_t)&block_descriptor_161);
}

uint64_t specialized ExtensionViewController.documentViewControllerDidSave(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostRequestQueue);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23ExtensionViewController_hostProxyWrapper);
  aBlock[4] = a1;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a2;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, v6, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v15, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

id partial apply for closure #1 in ExtensionViewController.documentViewControllerDidScroll(_:)()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + 16);
  if (result)
    return objc_msgSend(result, sel_reportPaperScroll);
  return result;
}

uint64_t sub_1DDB6B8F8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)()
{
  uint64_t v0;

  return closure #1 in ExtensionViewController.documentViewController(_:didFailToLoad:)(*(_QWORD *)(v0 + 16));
}

id partial apply for closure #1 in ExtensionViewController.documentViewControllerDidSave(_:)()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + 16);
  if (result)
    return objc_msgSend(result, sel_paperDidSave);
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1DF0E6450](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DDB6B984()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in ExtensionViewController.decrypt(_:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t destroy for GraphableExpressionsView()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for GraphableExpressionsView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for GraphableExpressionsView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for GraphableExpressionsView(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpressionsView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableExpressionsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphableExpressionsView()
{
  return &type metadata for GraphableExpressionsView;
}

uint64_t associated type witness table accessor for View.Body : View in GraphableExpressionsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a3 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>>);
  return closure #1 in closure #1 in GraphableExpressionsView.body.getter(a1, a2, (_QWORD *)(a3 + *(int *)(v6 + 44)));
}

uint64_t closure #1 in closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v30 = (char *)&v28 - v10;
  v34 = a1;
  v35 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<GraphableExpressionsState>);
  State.projectedValue.getter();
  v12 = v37;
  v11 = v38;
  v13 = v39;
  swift_getKeyPath();
  v34 = v12;
  v35 = v11;
  v36 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionsState>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v29 = specialized Collection.count.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v34 = a1;
  v35 = a2;
  State.projectedValue.getter();
  v14 = v37;
  v15 = v38;
  v16 = v39;
  swift_getKeyPath();
  v34 = v14;
  v35 = v15;
  v36 = v16;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v17 = specialized Collection.count.getter();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  if (v17 < 0)
  {
    __break(1u);
  }
  else
  {
    v37 = 0;
    v38 = v17;
    swift_getKeyPath();
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = a1;
    v19[3] = a2;
    v19[4] = v29;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>, MEMORY[0x1E0CE0680]);
    v20 = v30;
    ForEach<>.init(_:id:content:)();
    v22 = v31;
    v21 = v32;
    v23 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v23(v31, v20, v5);
    v24 = v33;
    *v33 = 0;
    *((_BYTE *)v24 + 8) = 1;
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer));
    v23((char *)v24 + *(int *)(v25 + 48), v22, v5);
    v26 = (char *)v24 + *(int *)(v25 + 64);
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    v27 = *(void (**)(char *, uint64_t))(v21 + 8);
    v27(v20, v5);
    return ((uint64_t (*)(char *, uint64_t))v27)(v22, v5);
  }
  return result;
}

uint64_t specialized Collection.count.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<[GraphableExpressionState]>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [GraphableExpressionState] and conformance [A], &demangling cache variable for type metadata for [GraphableExpressionState], MEMORY[0x1E0DEAF28]);
  Binding<A>.startIndex.getter();
  Binding<A>.endIndex.getter();
  return 0;
}

void closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String_optional v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  Swift::String v94;

  v77 = a4;
  v71 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Divider?);
  MEMORY[0x1E0C80A78](v8, v9);
  v72 = (uint64_t)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v70 = (char *)&v70 - v13;
  v14 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for AccessibilityChildBehavior();
  v82 = *(_QWORD *)(v16 - 8);
  v83 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v81 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for GraphableExpressionView();
  MEMORY[0x1E0C80A78](v80, v19);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
  MEMORY[0x1E0C80A78](v79, v22);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.accessibilityElement(children:)>>.0);
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v25);
  v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  MEMORY[0x1E0C80A78](v28, v29);
  v76 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v75 = (uint64_t)&v70 - v33;
  v34 = *a1;
  v89 = a2;
  *(_QWORD *)&v90 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<GraphableExpressionsState>);
  State.projectedValue.getter();
  v35 = v91;
  v36 = v92;
  v37 = v93;
  swift_getKeyPath();
  v89 = v35;
  *(_QWORD *)&v90 = v36;
  *((_QWORD *)&v90 + 1) = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<GraphableExpressionsState>);
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v86 = v91;
  v87 = v92;
  v88 = v93;
  v84 = v34;
  v85 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<[GraphableExpressionState]>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [GraphableExpressionState] and conformance [A], &demangling cache variable for type metadata for [GraphableExpressionState], MEMORY[0x1E0DEAF28]);
  Binding<A>.subscript.getter();
  v38 = v27;
  swift_bridgeObjectRelease();
  v39 = v79;
  swift_release();
  swift_release();
  v40 = v89;
  v78 = v90;
  *(_QWORD *)&v21[*(int *)(v80 + 32)] = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Environment<EnvironmentValues>.Content);
  swift_storeEnumTagMultiPayload();
  *(_OWORD *)v21 = xmmword_1DDF33860;
  *((_QWORD *)v21 + 2) = v40;
  *(_OWORD *)(v21 + 24) = v78;
  LOBYTE(v85) = 0;
  State.init(wrappedValue:)();
  v41 = v87;
  v21[40] = v86;
  *((_QWORD *)v21 + 6) = v41;
  LOBYTE(a3) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;
  outlined init with copy of GraphableExpressionView((uint64_t)v21, (uint64_t)v24);
  v50 = &v24[*(int *)(v39 + 36)];
  *v50 = a3;
  *((_QWORD *)v50 + 1) = v43;
  *((_QWORD *)v50 + 2) = v45;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v49;
  v50[40] = 0;
  outlined destroy of GraphableExpressionView((uint64_t)v21);
  v51 = v81;
  static AccessibilityChildBehavior.contain.getter();
  v52 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  View.accessibilityElement(children:)();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v53._countAndFlagsBits = 0;
  v53._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v94._object = (void *)0x80000001DDF4D440;
  v54._countAndFlagsBits = 0x6E6F697461757145;
  v54._object = (void *)0xE800000000000000;
  v55.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v55.value._object = (void *)0xEB00000000656C62;
  v56._countAndFlagsBits = 0;
  v56._object = (void *)0xE000000000000000;
  v94._countAndFlagsBits = 0xD00000000000002CLL;
  v57 = NSLocalizedString(_:tableName:bundle:value:comment:)(v54, v55, paperKitBundle, v56, v94);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v57);
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = 32;
  v58._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v58);
  v59 = v84;
  if (__OFADD__(v84, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v91 = v84 + 1;
  LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)();
  v60._countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v60);
  LocalizedStringKey.init(stringInterpolation:)();
  v91 = v39;
  v92 = v52;
  swift_getOpaqueTypeConformance2();
  v61 = (uint64_t)v76;
  v62 = v74;
  View.accessibilityLabel(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v62);
  v63 = v75;
  outlined init with take of ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>(v61, v75);
  if (__OFSUB__(v77, 1))
  {
LABEL_10:
    __break(1u);
    return;
  }
  if (v59 == v77 - 1)
  {
    v64 = type metadata accessor for Divider();
    v65 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v70, 1, 1, v64);
  }
  else
  {
    v65 = (uint64_t)v70;
    Divider.init()();
    v66 = type metadata accessor for Divider();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v63, v61, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  v67 = v72;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v65, v72, &demangling cache variable for type metadata for Divider?);
  v68 = v71;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v61, v71, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v67, v68 + *(int *)(v69 + 48), &demangling cache variable for type metadata for Divider?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for Divider?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v63, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v67, &demangling cache variable for type metadata for Divider?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
}

uint64_t protocol witness for View.body.getter in conformance GraphableExpressionsView()
{
  static Axis.Set.vertical.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>>, MEMORY[0x1E0CDFCC0]);
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t partial apply for closure #1 in GraphableExpressionsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in GraphableExpressionsView.body.getter(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1DDB6C850()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  closure #1 in closure #1 in closure #1 in GraphableExpressionsView.body.getter(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t outlined init with copy of GraphableExpressionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of GraphableExpressionView(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GraphableExpressionView();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionView, _PaddingLayout>);
    v2[0] = lazy protocol witness table accessor for type GraphableExpressionView and conformance GraphableExpressionView();
    v2[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphableExpressionView and conformance GraphableExpressionView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type GraphableExpressionView and conformance GraphableExpressionView;
  if (!lazy protocol witness table cache variable for type GraphableExpressionView and conformance GraphableExpressionView)
  {
    v1 = type metadata accessor for GraphableExpressionView();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpressionView, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionView and conformance GraphableExpressionView);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDB6CA04()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type ScrollView<VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>>> and conformance ScrollView<A>, &demangling cache variable for type metadata for ScrollView<VStack<TupleView<(Spacer, ForEach<Range<Int>, Int, TupleView<(ModifiedContent<<<opaque return type of View.accessibilityElement(children:)>>.0, AccessibilityAttachmentModifier>, Divider?)>>, Spacer)>>>, MEMORY[0x1E0CD8558]);
}

void closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void (*v17)();
  uint64_t v18;

  v6 = (void *)objc_opt_self();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v17 = partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:);
  v18 = v7;
  v8 = MEMORY[0x1E0C809B0];
  v13 = MEMORY[0x1E0C809B0];
  v14 = 1107296256;
  v15 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v16 = &block_descriptor_48;
  v9 = _Block_copy(&v13);
  v10 = a1;
  swift_release();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v17 = (void (*)())partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  v18 = v11;
  v13 = v8;
  v14 = 1107296256;
  v15 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
  v16 = &block_descriptor_54;
  v12 = _Block_copy(&v13);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v9, v12, 3.0, 0.0, 0.95, 0.0);
  _Block_release(v12);
  _Block_release(v9);
}

void closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;

  v6 = (void *)objc_opt_self();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a1;
  v17 = partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  v18 = v7;
  v8 = MEMORY[0x1E0C809B0];
  v13 = MEMORY[0x1E0C809B0];
  v14 = 1107296256;
  v15 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v16 = &block_descriptor_26;
  v9 = _Block_copy(&v13);
  v10 = a1;
  swift_release();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  v17 = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  v18 = v11;
  v13 = v8;
  v14 = 1107296256;
  v15 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
  v16 = &block_descriptor_32;
  v12 = _Block_copy(&v13);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v9, v12, 2.0, 0.0, 0.95, 0.0);
  _Block_release(v12);
  _Block_release(v9);
}

Swift::Void __swiftcall StickerDragPreviewContainerView.peelAnimation()()
{
  _BYTE *v0;
  void *v1;
  id v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat Height;
  void *v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  void *v36;
  id v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  CGAffineTransform v52;
  CGAffineTransform v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 1;
  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v2, sel_center);
    v4 = v3;
    objc_msgSend(v2, sel_center);
    objc_msgSend(v2, sel_setCenter_, v4, v5 + 23.0);
    objc_msgSend(v2, sel_setAlpha_, 0.23);
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    objc_msgSend(v2, sel_setTransform_, &v53);

  }
  v6 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v7, sel_center);
    v9 = v8;
    objc_msgSend(v7, sel_center);
    v11 = v10;
    objc_msgSend(v0, sel_bounds);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    v53 = v52;
    v54.origin.x = v13;
    v54.origin.y = v15;
    v54.size.width = v17;
    v54.size.height = v19;
    v55 = CGRectApplyAffineTransform(v54, &v53);
    Height = CGRectGetHeight(v55);
    objc_msgSend(v7, sel_setCenter_, v9, v11 + Height * 1.1 + Height * 1.1);

  }
  v21 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v22, sel_center);
    v24 = v23;
    objc_msgSend(v22, sel_center);
    v26 = v25;
    objc_msgSend(v0, sel_bounds);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    v53 = v52;
    v56.origin.x = v28;
    v56.origin.y = v30;
    v56.size.width = v32;
    v56.size.height = v34;
    v57 = CGRectApplyAffineTransform(v56, &v53);
    v35 = CGRectGetHeight(v57);
    objc_msgSend(v22, sel_setCenter_, v24, v26 + v35 * -1.1 + v35 * -1.1);

  }
  v36 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
  if (v36)
  {
    v37 = v36;
    objc_msgSend(v37, sel_frame);
    v39 = v38;
    v41 = v40;
    v43 = v42;
    objc_msgSend(v0, sel_bounds);
    v45 = v44;
    v47 = v46;
    v49 = v48;
    v51 = v50;
    CGAffineTransformMakeScale(&v53, 1.2, 1.2);
    CGAffineTransformInvert(&v52, &v53);
    v53 = v52;
    v58.origin.x = v45;
    v58.origin.y = v47;
    v58.size.width = v49;
    v58.size.height = v51;
    v59 = CGRectApplyAffineTransform(v58, &v53);
    objc_msgSend(v37, sel_setFrame_, v39, CGRectGetHeight(v59) * 1.1, v41, v43);

  }
}

Swift::Void __swiftcall StickerDragPreviewContainerView.stickAnimation()()
{
  _BYTE *v0;
  void *v1;
  id v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat Height;
  void *v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  void *v36;
  id v37;
  CGAffineTransform v38;
  CGAffineTransform v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 0;
  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v2, sel_center);
    v4 = v3;
    objc_msgSend(v2, sel_center);
    objc_msgSend(v2, sel_setCenter_, v4, v5 + -23.0);
    objc_msgSend(v2, sel_setAlpha_, 0.0);
    v39.a = 1.0;
    v39.b = 0.0;
    v39.c = 0.0;
    v39.d = 1.0;
    v39.tx = 0.0;
    v39.ty = 0.0;
    objc_msgSend(v2, sel_setTransform_, &v39);

  }
  v6 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v7, sel_center);
    v9 = v8;
    objc_msgSend(v7, sel_center);
    v11 = v10;
    objc_msgSend(v0, sel_bounds);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    CGAffineTransformMakeScale(&v39, 1.2, 1.2);
    CGAffineTransformInvert(&v38, &v39);
    v39 = v38;
    v40.origin.x = v13;
    v40.origin.y = v15;
    v40.size.width = v17;
    v40.size.height = v19;
    v41 = CGRectApplyAffineTransform(v40, &v39);
    Height = CGRectGetHeight(v41);
    objc_msgSend(v7, sel_setCenter_, v9, v11 + Height * -1.1 + Height * -1.1);

  }
  v21 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v22, sel_center);
    v24 = v23;
    objc_msgSend(v22, sel_center);
    v26 = v25;
    objc_msgSend(v0, sel_bounds);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;
    CGAffineTransformMakeScale(&v39, 1.2, 1.2);
    CGAffineTransformInvert(&v38, &v39);
    v39 = v38;
    v42.origin.x = v28;
    v42.origin.y = v30;
    v42.size.width = v32;
    v42.size.height = v34;
    v43 = CGRectApplyAffineTransform(v42, &v39);
    v35 = CGRectGetHeight(v43);
    objc_msgSend(v22, sel_setCenter_, v24, v26 + v35 * 1.1 + v35 * 1.1);

  }
  v36 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
  if (v36)
  {
    v37 = v36;
    objc_msgSend(v37, sel_frame);
    objc_msgSend(v37, sel_setFrame_);

  }
}

id StickerDragPreviewContainerView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StickerDragPreviewContainerView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StickerDragPreviewContainerView()
{
  return objc_opt_self();
}

uint64_t sub_1DDB6D80C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(_QWORD *)(v0 + 16));
}

id specialized static StickerDragPreviewContainerView._UIStickerMeshTransformForLiftedScale(_:)(double a1)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  _OWORD v13[2];
  double v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  __int128 v19;
  double v20;
  __int128 v21;
  __int128 v22;
  double v23;
  __int128 v24;
  __int128 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  double v29;
  __int128 v30;
  __int128 v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  double v36;
  __int128 v37;
  __int128 v38;
  double v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  double v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  memset(v13, 0, sizeof(v13));
  v14 = (a1 + -1.0) / a1 + (a1 + -1.0) / a1;
  v15 = xmmword_1DDF33970;
  v16 = xmmword_1DDF33970;
  v17 = v14;
  v18 = xmmword_1DDF33980;
  v19 = xmmword_1DDF33980;
  v21 = xmmword_1DDF33990;
  v22 = xmmword_1DDF33990;
  v20 = v14;
  v23 = v14;
  v24 = xmmword_1DDF339A0;
  v25 = xmmword_1DDF339A0;
  v27 = xmmword_1DDF339B0;
  v28 = xmmword_1DDF339B0;
  v26 = v14;
  v29 = v14;
  v30 = xmmword_1DDF339C0;
  v31 = xmmword_1DDF339C0;
  v32 = v14;
  v33 = 0x3FF0000000000000;
  v34 = xmmword_1DDF339D0;
  v35 = 0x3FD3333333333333;
  v36 = v14;
  v37 = xmmword_1DDF339E0;
  v38 = xmmword_1DDF339E0;
  v39 = v14;
  v40 = 0x3FF0000000000000;
  v41 = xmmword_1DDF339F0;
  v42 = 0x3FD999999999999ALL;
  v43 = v14;
  v44 = xmmword_1DDF33A00;
  v45 = xmmword_1DDF33A00;
  v46 = v14;
  v47 = 0x3FF0000000000000;
  v48 = xmmword_1DDF33A10;
  v49 = 0x3FE0000000000000;
  v50 = v14;
  v51 = xmmword_1DDF33A20;
  v52 = xmmword_1DDF33A20;
  v53 = xmmword_1DDF33A30;
  v54 = xmmword_1DDF33A40;
  v55 = 0x3FE3333333333333;
  v56 = 0u;
  v57 = 0x3FE6666666666666;
  v58 = xmmword_1DDF33A50;
  v59 = xmmword_1DDF33A30;
  v60 = xmmword_1DDF33A60;
  v61 = 0x3FE6666666666666;
  v62 = 0u;
  v63 = 0x3FE999999999999ALL;
  v64 = xmmword_1DDF33A70;
  v65 = xmmword_1DDF33A30;
  v66 = xmmword_1DDF33A80;
  v67 = 0x3FE999999999999ALL;
  v68 = 0u;
  v69 = 0x3FECCCCCCCCCCCCDLL;
  v70 = xmmword_1DDF33A90;
  v71 = xmmword_1DDF33A30;
  v72 = xmmword_1DDF33AA0;
  v73 = 0x3FECCCCCCCCCCCCDLL;
  v74 = 0u;
  v75 = 0x3FF0000000000000;
  v76 = xmmword_1DDF33A30;
  v77 = xmmword_1DDF33A30;
  __asm { FMOV            V1.2D, #1.0 }
  v78 = _Q1;
  v79 = xmmword_1DDF33970;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = objc_allocWithZone(MEMORY[0x1E0CD27D8]);
  v10 = (void *)MEMORY[0x1DF0E41AC](v6, v8);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_initWithVertexCount_vertices_faceCount_faces_depthNormalization_, 22, v13, 10, &unk_1EA839B00, v10);

  return v11;
}

void specialized StickerDragPreviewContainerView._preparePreviewContainer(preview:source:initialTransform:)(void *a1, void *a2)
{
  char *v2;
  char *v3;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  Class v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  Class v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  CGFloat v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  CGFloat v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  double v81;
  double v82;
  void *v83;
  id v84;
  id v85;
  void *v86;
  id v87;
  double v88;
  CGFloat v89;
  double v90;
  CGFloat v91;
  double v92;
  CGFloat v93;
  double v94;
  CGFloat v95;
  double MidY;
  double v97;
  CGFloat v98;
  double v99;
  CGFloat v100;
  double v101;
  CGFloat v102;
  double v103;
  CGFloat v104;
  double v105;
  double v106;
  CGFloat v107;
  double v108;
  CGFloat v109;
  double v110;
  CGFloat v111;
  double v112;
  CGFloat v113;
  CGFloat v114;
  double v115;
  double v116;
  CGFloat v117;
  double v118;
  CGFloat v119;
  double v120;
  CGFloat v121;
  double v122;
  CGFloat v123;
  CGFloat v124;
  double v125;
  id v126;
  id v127;
  id v128;
  id v129;
  id v130;
  double v131;
  CGFloat v132;
  double v133;
  CGFloat v134;
  double v135;
  CGFloat v136;
  double v137;
  CGFloat v138;
  CGFloat v139;
  id v140;
  double v141;
  double v142;
  double v143;
  double v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  id v149;
  void *v150;
  id v151;
  Class v152;
  id v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  void *v160;
  id v161;
  double v162;
  uint64_t v163;
  id v164;
  Class v165;
  id v166;
  double v167;
  double v168;
  id v169;
  id v170;
  double v171;
  id v172;
  id v173;
  double v174;
  uint64_t v175;
  id v176;
  Class v177;
  id v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  void *v184;
  uint64_t v185;
  __int128 v186;
  void *v187;
  uint64_t v188;
  id v189;
  id v190;
  void *v191;
  CGFloat v193;
  void *v194;
  double v195;
  id v196;
  double v197;
  double v198;
  double v199;
  id v200;
  double rect;
  id recta;
  CGAffineTransform v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  unint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  CGAffineTransform v211;
  CGRect v212;
  CGRect v213;
  CGRect v214;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;
  CGRect v236;
  CGRect v237;

  v3 = v2;
  objc_msgSend(v2, sel_bounds);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  CGAffineTransformMakeScale(&v203, 1.2, 1.2);
  CGAffineTransformInvert(&v211, &v203);
  v203 = v211;
  v212.origin.x = v6;
  v212.origin.y = v8;
  v212.size.width = v10;
  v212.size.height = v12;
  v213 = CGRectApplyAffineTransform(v212, &v203);
  x = v213.origin.x;
  y = v213.origin.y;
  width = v213.size.width;
  height = v213.size.height;
  v17 = CGRectGetWidth(v213);
  v199 = x;
  rect = y;
  v214.origin.x = x;
  v214.origin.y = y;
  v197 = height;
  v198 = width;
  v214.size.width = width;
  v214.size.height = height;
  v18 = CGRectGetHeight(v214);
  objc_msgSend(v2, sel_bounds);
  v19 = v215.origin.x;
  v20 = v215.origin.y;
  v21 = v215.size.width;
  v22 = v215.size.height;
  v216 = CGRectInset(v215, v17 * 0.1, v18 * 0.1);
  v23 = v216.origin.x;
  v24 = v216.origin.y;
  v25 = v216.size.width;
  v26 = v216.size.height;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, v19, v20, v21, v22);
  objc_msgSend(v2, sel_addSubview_);
  v28 = objc_msgSend(a2, sel_snapshotViewAfterScreenUpdates_, 1);
  if (v28)
  {
    v29 = v28;
    objc_msgSend(v28, sel_setFrame_, v23, v24, v25, v26);
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;
    v33 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v34 = (void *)MEMORY[0x1DF0E41AC](v30, v32);
    swift_bridgeObjectRelease();
    v35 = objc_msgSend(v33, sel_initWithType_, v34);

    isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    v185 = *MEMORY[0x1E0CD2D90];
    objc_msgSend(v35, sel_setValue_forKey_, isa);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;
    v40 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v41 = (void *)MEMORY[0x1DF0E41AC](v37, v39);
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(v40, sel_initWithType_, v41);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v43 = NSNumber.init(floatLiteral:)(1.8).super.super.isa;
    objc_msgSend(v42, sel_setValue_forKey_, v43, *MEMORY[0x1E0CD2CB8]);

    v44 = objc_msgSend(v29, sel_layer);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1DDF33AB0;
    v46 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CAFilter);
    *(_QWORD *)(v45 + 32) = v35;
    *(_QWORD *)(v45 + 88) = v46;
    v188 = v46;
    *(_QWORD *)(v45 + 56) = v46;
    *(_QWORD *)(v45 + 64) = v42;
    v190 = v35;
    v189 = v42;
    v47 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v44, sel_setFilters_, v47);

    v48 = objc_msgSend(v29, (SEL)&selRef_setAccessibilityLabel_);
    v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.75, 1.0);
    v50 = objc_msgSend(v49, sel_CGColor);

    objc_msgSend(v48, sel_setContentsMultiplyColor_, v50);
    v51 = objc_msgSend(v29, (SEL)&selRef_setAccessibilityLabel_);
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v54 = v53;
    v55 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v56 = (void *)MEMORY[0x1DF0E41AC](v52, v54);
    swift_bridgeObjectRelease();
    v57 = objc_msgSend(v55, sel_initWithType_, v56);

    objc_msgSend(v51, sel_setCompositingFilter_, v57);
    v58 = objc_msgSend(v29, (SEL)&selRef_setAccessibilityLabel_);
    objc_msgSend(v58, sel_setShouldRasterize_, 1);

    objc_msgSend(v29, sel_center);
    objc_msgSend(v29, sel_setCenter_);
    objc_msgSend(v29, sel_setAlpha_, 0.23);
    v191 = v27;
    objc_msgSend(v27, sel_addSubview_, v29);
    v59 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView] = v29;
    v196 = v29;

    v217.origin.x = v199;
    v217.origin.y = rect;
    v217.size.width = v198;
    v217.size.height = v197;
    v195 = CGRectGetWidth(v217) * 0.5;
    v218.origin.x = v199;
    v218.origin.y = rect;
    v218.size.width = v198;
    v218.size.height = v197;
    v193 = CGRectGetHeight(v218) * 0.5;
    v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, v23, v24, v25, v26);
    v182 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 16);
    v183 = *MEMORY[0x1E0CD2610];
    v180 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 48);
    v181 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 32);
    v179 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 64);
    v61 = *(_QWORD *)(MEMORY[0x1E0CD2610] + 80);
    v186 = *(_OWORD *)(MEMORY[0x1E0CD2610] + 96);
    v62 = *(_QWORD *)(MEMORY[0x1E0CD2610] + 112);
    v63 = *(_QWORD *)(MEMORY[0x1E0CD2610] + 120);
    v64 = objc_msgSend(v60, (SEL)&selRef_setAccessibilityLabel_);
    *(_OWORD *)&v203.a = v183;
    *(_OWORD *)&v203.c = v182;
    *(_OWORD *)&v203.tx = v181;
    v204 = v180;
    v205 = v179;
    v206 = v61;
    v207 = 0xBFF0000000000000;
    v208 = v186;
    v209 = v62;
    v210 = v63;
    objc_msgSend(v64, sel_setSublayerTransform_, &v203);

    objc_msgSend(v27, sel_addSubview_, v60);
    v219.origin.x = v199;
    v219.origin.y = rect;
    v219.size.width = v198;
    v219.size.height = v197;
    v65 = CGRectGetWidth(v219) * 1.2;
    v220.origin.x = v199;
    v220.origin.y = rect;
    v220.size.width = v198;
    v220.size.height = v197;
    v66 = CGRectGetHeight(v220) * 1.2;
    objc_msgSend(v3, sel_bounds);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    v74 = v73;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v221.origin.x = v68;
    v221.origin.y = v70;
    v221.size.width = v72;
    v221.size.height = v74;
    v222 = CGRectApplyAffineTransform(v221, &v203);
    v75 = CGRectGetHeight(v222);
    v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), (SEL)&selRef_buttonWithType_, 0.0, 0.0, v65, v66 + v75 * 1.1 + v75 * 1.1);
    v77 = objc_msgSend(v76, (SEL)&selRef_setAccessibilityLabel_);
    v78 = specialized static StickerDragPreviewContainerView._UIStickerMeshTransformForLiftedScale(_:)(1.2);
    objc_msgSend(v77, sel_setMeshTransform_, v78);

    v79 = objc_msgSend(v76, (SEL)&selRef_setAccessibilityLabel_);
    v80 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v80, sel_displayScale);
    v82 = v81;

    objc_msgSend(v79, sel_setRasterizationScale_, v82 * 1.2);
    objc_msgSend(v60, sel_addSubview_, v76);
    v83 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView] = v76;
    v84 = v76;

    v85 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), (SEL)&selRef_buttonWithType_, v199, rect, v198, v197);
    objc_msgSend(v84, sel_addSubview_, v85);
    v86 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView] = v85;
    v87 = v85;

    objc_msgSend(v87, sel_addSubview_, a1);
    objc_msgSend(v3, sel_bounds);
    v89 = v88;
    v91 = v90;
    v93 = v92;
    v95 = v94;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v223.origin.x = v89;
    v223.origin.y = v91;
    v223.size.width = v93;
    v223.size.height = v95;
    v224 = CGRectApplyAffineTransform(v223, &v203);
    *(double *)&v183 = v193 - CGRectGetHeight(v224) * 1.1 + -4.0;
    objc_msgSend(v84, sel_frame);
    *(_QWORD *)&v180 = CGRectGetMidX(v225);
    objc_msgSend(v84, sel_frame);
    MidY = CGRectGetMidY(v226);
    objc_msgSend(v3, sel_bounds);
    v98 = v97;
    v100 = v99;
    v102 = v101;
    v104 = v103;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v227.origin.x = v98;
    v227.origin.y = v100;
    v227.size.width = v102;
    v227.size.height = v104;
    v228 = CGRectApplyAffineTransform(v227, &v203);
    v105 = MidY + CGRectGetHeight(v228) * 1.1 + 4.0;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v187 = v60;
    objc_msgSend(v60, sel_setTransform_, &v203);
    objc_msgSend(v3, sel_bounds);
    v107 = v106;
    v109 = v108;
    v111 = v110;
    v113 = v112;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v229.origin.x = v107;
    v229.origin.y = v109;
    v229.size.width = v111;
    v229.size.height = v113;
    v230 = CGRectApplyAffineTransform(v229, &v203);
    v114 = CGRectGetHeight(v230);
    v115 = *(double *)&v183 + v114 * 1.1 + v114 * 1.1;
    objc_msgSend(v3, sel_bounds);
    v117 = v116;
    v119 = v118;
    v121 = v120;
    v123 = v122;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v231.origin.x = v117;
    v231.origin.y = v119;
    v231.size.width = v121;
    v231.size.height = v123;
    v232 = CGRectApplyAffineTransform(v231, &v203);
    v124 = CGRectGetHeight(v232);
    v125 = v105 - (v124 * 1.1 + v124 * 1.1);
    v184 = v84;
    objc_msgSend(v84, sel_setCenter_, v195, v115);
    objc_msgSend(v87, sel_setCenter_, *(double *)&v180, v125);
    objc_msgSend(a1, sel_setCenter_, v195, v193);
    v126 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    objc_msgSend(v126, sel_setFrame_, v199);
    v127 = objc_msgSend(v196, sel_layer);
    v128 = objc_msgSend(v127, sel_contents);

    if (v128)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      __swift_project_boxed_opaque_existential_1(&v203, *(uint64_t *)&v203.d);
      v128 = (id)_bridgeAnythingToObjectiveC<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
    }
    objc_msgSend(v126, sel_setContents_, v128);
    swift_unknownObjectRelease();
    v129 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, v199, rect, v198, v197);
    v130 = objc_msgSend(v129, (SEL)&selRef_setAccessibilityLabel_);
    objc_msgSend(v130, sel_setMask_, v126);

    v194 = v126;
    objc_msgSend(v87, sel_addSubview_, v129);
    objc_msgSend(v3, sel_bounds);
    v132 = v131;
    v134 = v133;
    v136 = v135;
    v138 = v137;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    CGAffineTransformInvert(&v211, &v203);
    v203 = v211;
    v233.origin.x = v132;
    v233.origin.y = v134;
    v233.size.width = v136;
    v233.size.height = v138;
    v234 = CGRectApplyAffineTransform(v233, &v203);
    v139 = CGRectGetHeight(v234) * 1.1;
    v235.origin.x = v199;
    v235.origin.y = rect;
    v235.size.width = v198;
    v235.size.height = v197;
    v140 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, v139, CGRectGetWidth(v235), 100.0);
    objc_msgSend(v129, sel_center);
    v142 = v141;
    v144 = v143;
    CGAffineTransformMakeScale(&v203, 1.2, 1.2);
    objc_msgSend(v129, (SEL)&selRef_setWantsHashtagDetection_, &v203);
    objc_msgSend(v129, sel_setCenter_, v142, v144);
    objc_msgSend(v129, sel_addSubview_, v140);
    v145 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView] = v140;
    recta = v140;

    v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v148 = v147;
    v149 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v150 = (void *)MEMORY[0x1DF0E41AC](v146, v148);
    swift_bridgeObjectRelease();
    v151 = objc_msgSend(v149, sel_initWithType_, v150);

    v152 = CGFloat._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v151, sel_setValue_forKey_, v152, v185);

    v153 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    objc_msgSend(v3, sel_bounds);
    objc_msgSend(v153, sel_setBounds_, 0.0, 0.0, CGRectGetWidth(v236), 20.0);
    objc_msgSend(v153, sel_setPosition_, v195, 38.0);
    v200 = (id)objc_opt_self();
    v154 = objc_msgSend(v200, sel_whiteColor);
    v155 = objc_msgSend(v154, sel_CGColor);

    objc_msgSend(v153, sel_setBackgroundColor_, v155);
    v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v158 = v157;
    v159 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v160 = (void *)MEMORY[0x1DF0E41AC](v156, v158);
    swift_bridgeObjectRelease();
    v161 = objc_msgSend(v159, sel_initWithType_, v160);

    objc_msgSend(v153, sel_setCompositingFilter_, v161);
    LODWORD(v162) = 1035489772;
    objc_msgSend(v153, sel_setOpacity_, v162);
    v163 = swift_allocObject();
    *(_OWORD *)(v163 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v163 + 56) = v188;
    *(_QWORD *)(v163 + 32) = v151;
    v164 = v151;
    v165 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v153, sel_setFilters_, v165);

    objc_msgSend(v153, sel_setShouldRasterize_, 1);
    v166 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v166, sel_displayScale);
    v168 = v167;

    objc_msgSend(v153, sel_setRasterizationScale_, v168 * 1.2);
    v169 = objc_msgSend(recta, sel_layer);
    objc_msgSend(v169, sel_addSublayer_, v153);

    v170 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
    objc_msgSend(v3, sel_bounds);
    objc_msgSend(v170, sel_setBounds_, 0.0, 0.0, CGRectGetWidth(v237), 20.0);
    objc_msgSend(v153, sel_position);
    objc_msgSend(v170, sel_setPosition_, v195, v171 + -12.0);
    v172 = objc_msgSend(v200, sel_blackColor);
    v173 = objc_msgSend(v172, sel_CGColor);

    objc_msgSend(v170, sel_setBackgroundColor_, v173);
    LODWORD(v174) = 1043542835;
    objc_msgSend(v170, sel_setOpacity_, v174);
    v175 = swift_allocObject();
    *(_OWORD *)(v175 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v175 + 56) = v188;
    *(_QWORD *)(v175 + 32) = v164;
    v176 = v164;
    v177 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v170, sel_setFilters_, v177);

    objc_msgSend(v170, sel_setShouldRasterize_, 1);
    objc_msgSend(v153, sel_rasterizationScale);
    objc_msgSend(v170, sel_setRasterizationScale_);
    v178 = objc_msgSend(recta, sel_layer);
    objc_msgSend(v178, sel_addSublayer_, v170);

  }
  else
  {
    __break(1u);
  }
}

void specialized StickerDragPreviewContainerView._animateDrop(alongside:completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v5 = (void *)objc_opt_self();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v2;
  v16 = partial apply for closure #1 in StickerDragPreviewContainerView._animateDrop(alongside:completion:);
  v17 = v6;
  v7 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v15 = &block_descriptor_3;
  v8 = _Block_copy(&v12);
  v9 = v2;
  swift_release();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v16 = _sIg_Ieg_TRTA_0;
  v17 = v10;
  v12 = v7;
  v13 = 1107296256;
  v14 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
  v15 = &block_descriptor_10;
  v11 = _Block_copy(&v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v8, v11, 2.0, 0.0, 0.95, 0.0);
  _Block_release(v11);
  _Block_release(v8);
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateDrop(alongside:completion:)()
{
  StickerDragPreviewContainerView.stickAnimation()();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)()
{
  uint64_t v0;

  closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1DDB6EFA0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDB6EFC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)()
{
  uint64_t v0;

  closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void partial apply for closure #1 in closure #1 in StickerDragPreviewContainerView._animateLift(alongside:completion:)()
{
  StickerDragPreviewContainerView.peelAnimation()();
}

void specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, uint64_t a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9)
{
  char *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  unint64_t v44;
  uint64_t (*v45)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  uint64_t v46;
  id v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  void (*v52)(void);
  char *v53;
  _QWORD *v54;
  objc_class *v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  char *v61;
  id v62;
  void *v63;
  objc_class *v64;
  id v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  void *v83;
  id v84;
  char v85;
  objc_class *v86;
  _BYTE *v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  void *v92;
  id v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  id v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  objc_super v109;
  objc_super v110;
  objc_super v111;
  uint64_t v112[3];
  ValueMetadata *v113;
  unint64_t v114;

  v101 = a5;
  v102 = a4;
  v108 = a3;
  v100 = a1;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v15, v16);
  v99 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for CRKeyPath();
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v18);
  v20 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v98 - v23;
  v107 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v107, v25);
  v27 = (char *)&v98 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v103 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v28);
  v30 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9[direct field offset for Canvas.multipeerConnection] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.multipeerCanvasStateConnection] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.removeOldEraserStrokesTimer] = 0;
  v31 = &v9[direct field offset for Canvas.liveStreamMessenger];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.childViewControllerCancellable] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.xpcMulticast] = 0;
  v32 = &v9[direct field offset for Canvas._editingView];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  *(_QWORD *)&v9[direct field offset for Canvas._canvasElementController] = 0;
  v33 = direct field offset for Canvas.delayedPreviewProviders;
  v34 = v9;
  v35 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v9[v33] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v36 = direct field offset for Canvas.dropCompletions;
  *(_QWORD *)&v34[v36] = specialized Dictionary.init(dictionaryLiteral:)(v35);
  v34[direct field offset for Canvas.dropSessionType] = 3;
  *(_QWORD *)&v34[direct field offset for Canvas.scribbleDelegate] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.scribbleInteraction] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.indirectScribbleInteraction] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.pointerDelegate] = 0;
  v34[direct field offset for Canvas.dropInteractionSessionIsActive] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.dropInteraction] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.dropDelegate] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.editMenuInteraction] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.editMenuInteractionDelegate] = 0;
  v37 = &v34[direct field offset for Canvas.visibleBoundsOverride];
  v37[32] = 1;
  *(_OWORD *)v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  *(_QWORD *)&v34[direct field offset for Canvas.subscriptions] = v35;
  v34[direct field offset for Canvas.isInUndoableGroup] = 0;
  v34[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(_QWORD *)&v34[direct field offset for Canvas.eraserCheckingIndex] = 0;
  v38 = direct field offset for Canvas.dropTargets;
  *(_QWORD *)&v34[v38] = specialized Dictionary.init(dictionaryLiteral:)(v35);
  v39 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(_QWORD *)&v34[v39] = specialized Dictionary.init(dictionaryLiteral:)(v35);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  v98 = v40;
  Capsule<>.rootID.getter();
  LOBYTE(v112[0]) = 0;
  v41 = v104;
  v42 = v106;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v20, v24, v106);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v42);
  outlined destroy of PKStrokeProperties((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  SharedTagged_9<>.layout()(v112);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v30, v105);
  v43 = v113;
  v44 = v114;
  __swift_project_boxed_opaque_existential_1(v112, (uint64_t)v113);
  v45 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, ValueMetadata *, unint64_t))(v44 + 8);
  v46 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v106 = a2;
  if (!v45(a2, 0, 0, v107, v46, v43, v44))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Paper>);
  *(_QWORD *)&v34[direct field offset for Canvas.paperView] = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  LOBYTE(v112[0]) = v108;
  v47 = v100;
  v48 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v47, (unsigned __int8 *)v112, v101 & 1, a6, a7, a8, a9);

  v49 = direct field offset for Canvas.paperView;
  v50 = *(_QWORD **)&v48[direct field offset for Canvas.paperView];
  swift_unknownObjectWeakAssign();
  v51 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v52 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v50) + 0x488);
  v53 = v48;
  v54 = v50;
  v52();

  objc_msgSend(v53, sel_addSubview_, *(_QWORD *)&v48[v49]);
  if ((v102 & 1) != 0)
  {
    v55 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasDropDelegate<Paper>);
    v56 = objc_allocWithZone(v55);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v109.receiver = v56;
    v109.super_class = v55;
    v57 = objc_msgSendSuper2(&v109, sel_init);
    v58 = *(void **)&v53[direct field offset for Canvas.dropDelegate];
    *(_QWORD *)&v53[direct field offset for Canvas.dropDelegate] = v57;
    v59 = v57;

    v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3780]), sel_initWithDelegate_, v59);
    if (((*(uint64_t (**)(void))((*v51 & *(_QWORD *)v53) + 0xAF8))() & 1) != 0)
    {
      v61 = v53;
      v62 = v60;
      objc_msgSend(v61, sel_addInteraction_, v62);

    }
    v63 = *(void **)&v53[direct field offset for Canvas.dropInteraction];
    *(_QWORD *)&v53[direct field offset for Canvas.dropInteraction] = v60;

  }
  v64 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasScribbleDelegate<Paper>);
  v65 = objc_allocWithZone(v64);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v111.receiver = v65;
  v111.super_class = v64;
  v66 = objc_msgSendSuper2(&v111, sel_init);
  v67 = direct field offset for Canvas.scribbleDelegate;
  v68 = *(void **)&v53[direct field offset for Canvas.scribbleDelegate];
  *(_QWORD *)&v53[direct field offset for Canvas.scribbleDelegate] = v66;

  v69 = *(_QWORD *)&v53[v67];
  if (!v69)
    goto LABEL_15;
  v70 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C08]), sel_initWithDelegate_, v69);
  v71 = direct field offset for Canvas.scribbleInteraction;
  v72 = *(void **)&v53[direct field offset for Canvas.scribbleInteraction];
  *(_QWORD *)&v53[direct field offset for Canvas.scribbleInteraction] = v70;

  v73 = *(void **)&v53[v67];
  if (!v73)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v74 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIIndirectScribbleInteraction<CanvasScribbleDelegate<Paper>>));
  v75 = v73;
  v76 = UIIndirectScribbleInteraction.init(delegate:)();
  v77 = direct field offset for Canvas.indirectScribbleInteraction;
  v78 = *(void **)&v53[direct field offset for Canvas.indirectScribbleInteraction];
  *(_QWORD *)&v53[direct field offset for Canvas.indirectScribbleInteraction] = v76;

  v79 = *(_QWORD *)&v53[v71];
  if (!v79)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v80 = *(id *)&v48[v49];
  objc_msgSend(v80, sel_addInteraction_, v79);
  if (!*(_QWORD *)&v53[v77])
  {
LABEL_18:
    __break(1u);
    return;
  }
  objc_msgSend(v80, sel_addInteraction_);

  v81 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  v82 = direct field offset for Canvas.pointerDelegate;
  v83 = *(void **)&v53[direct field offset for Canvas.pointerDelegate];
  *(_QWORD *)&v53[direct field offset for Canvas.pointerDelegate] = v81;

  v84 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, *(_QWORD *)&v53[v82]);
  objc_msgSend(v53, sel_addInteraction_, v84);
  v113 = &type metadata for PencilAndPaperFeatureFlags;
  v114 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v112[0]) = 0;
  v85 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  if ((v85 & 1) != 0)
  {
    if ((_BYTE)v108)
    {
      v86 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasEditMenuDelegate<Paper>);
      v87 = objc_allocWithZone(v86);
      swift_unknownObjectWeakInit();
      v87[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
      swift_unknownObjectWeakAssign();
      v110.receiver = v87;
      v110.super_class = v86;
      v88 = objc_msgSendSuper2(&v110, sel_init);
      v89 = *(void **)&v53[direct field offset for Canvas.editMenuInteractionDelegate];
      *(_QWORD *)&v53[direct field offset for Canvas.editMenuInteractionDelegate] = v88;
      v90 = v88;

      v91 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v90);
      objc_msgSend(v53, sel_addInteraction_, v91);
      v92 = *(void **)&v53[direct field offset for Canvas.editMenuInteraction];
      *(_QWORD *)&v53[direct field offset for Canvas.editMenuInteraction] = v91;
      v93 = v91;

      specialized Canvas.setupBandSelection()();
    }
  }
  v94 = v53;
  v95 = (uint64_t)v99;
  Date.init()();
  v96 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
  v97 = (uint64_t)&v94[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v95, v97, &demangling cache variable for type metadata for Date?);
  swift_endAccess();

  (*(void (**)(uint64_t))(*(_QWORD *)(v98 - 8) + 8))(v106);
}

{
  char *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  ValueMetadata *v44;
  unint64_t v45;
  uint64_t (*v46)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, ValueMetadata *, unint64_t);
  uint64_t v47;
  id v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  void (*v53)(void);
  char *v54;
  _QWORD *v55;
  objc_class *v56;
  id v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  char *v62;
  id v63;
  void *v64;
  objc_class *v65;
  id v66;
  id v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  void *v84;
  id v85;
  char v86;
  objc_class *v87;
  _BYTE *v88;
  id v89;
  void *v90;
  id v91;
  id v92;
  void *v93;
  id v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  id v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  objc_super v112;
  objc_super v113;
  objc_super v114;
  uint64_t v115[3];
  ValueMetadata *v116;
  unint64_t v117;

  v103 = a5;
  v104 = a4;
  v110 = a3;
  v111 = a2;
  v102 = a1;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v14, v15);
  v101 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for CRKeyPath();
  v106 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v17);
  v19 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v99 - v22;
  v109 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v109, v24);
  v26 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v105 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v27);
  v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9[direct field offset for Canvas.multipeerConnection] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.multipeerCanvasStateConnection] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.removeOldEraserStrokesTimer] = 0;
  v30 = &v9[direct field offset for Canvas.liveStreamMessenger];
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.childViewControllerCancellable] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.xpcMulticast] = 0;
  v31 = &v9[direct field offset for Canvas._editingView];
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *(_QWORD *)&v9[direct field offset for Canvas._canvasElementController] = 0;
  v32 = direct field offset for Canvas.delayedPreviewProviders;
  v33 = v9;
  v34 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v9[v32] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v35 = direct field offset for Canvas.dropCompletions;
  *(_QWORD *)&v33[v35] = specialized Dictionary.init(dictionaryLiteral:)(v34);
  v33[direct field offset for Canvas.dropSessionType] = 3;
  *(_QWORD *)&v33[direct field offset for Canvas.scribbleDelegate] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.scribbleInteraction] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.indirectScribbleInteraction] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.pointerDelegate] = 0;
  v33[direct field offset for Canvas.dropInteractionSessionIsActive] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.dropInteraction] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.dropDelegate] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.editMenuInteraction] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.editMenuInteractionDelegate] = 0;
  v36 = &v33[direct field offset for Canvas.visibleBoundsOverride];
  *(_OWORD *)v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  v36[32] = 1;
  *(_QWORD *)&v33[direct field offset for Canvas.subscriptions] = v34;
  v33[direct field offset for Canvas.isInUndoableGroup] = 0;
  v33[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(_QWORD *)&v33[direct field offset for Canvas.eraserCheckingIndex] = 0;
  v37 = direct field offset for Canvas.dropTargets;
  *(_QWORD *)&v33[v37] = specialized Dictionary.init(dictionaryLiteral:)(v34);
  v38 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(_QWORD *)&v33[v38] = specialized Dictionary.init(dictionaryLiteral:)(v34);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v40 = v111;
  Capsule<>.root.getter();
  v100 = v39;
  v41 = v40;
  Capsule<>.rootID.getter();
  LOBYTE(v115[0]) = 1;
  v42 = v106;
  v43 = v108;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v19, v23, v108);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v43);
  outlined destroy of PKStrokeProperties((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  SharedTagged_9<>.layout()(v115);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v29, v107);
  v44 = v116;
  v45 = v117;
  __swift_project_boxed_opaque_existential_1(v115, (uint64_t)v116);
  v46 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, ValueMetadata *, unint64_t))(v45 + 8);
  v47 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  if (!v46(v41, 0, 0, v109, v47, v44, v45))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
  *(_QWORD *)&v33[direct field offset for Canvas.paperView] = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  LOBYTE(v115[0]) = v110;
  v48 = v102;
  v49 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v48, (unsigned __int8 *)v115, v103 & 1, a6, a7, a8, a9);

  v50 = direct field offset for Canvas.paperView;
  v51 = *(_QWORD **)&v49[direct field offset for Canvas.paperView];
  swift_unknownObjectWeakAssign();
  v52 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v53 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v51) + 0x488);
  v54 = v49;
  v55 = v51;
  v53();

  objc_msgSend(v54, sel_addSubview_, *(_QWORD *)&v49[v50]);
  if ((v104 & 1) != 0)
  {
    v56 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasDropDelegate<Image>);
    v57 = objc_allocWithZone(v56);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v112.receiver = v57;
    v112.super_class = v56;
    v58 = objc_msgSendSuper2(&v112, sel_init);
    v59 = *(void **)&v54[direct field offset for Canvas.dropDelegate];
    *(_QWORD *)&v54[direct field offset for Canvas.dropDelegate] = v58;
    v60 = v58;

    v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3780]), sel_initWithDelegate_, v60);
    if (((*(uint64_t (**)(void))((*v52 & *(_QWORD *)v54) + 0xAF8))() & 1) != 0)
    {
      v62 = v54;
      v63 = v61;
      objc_msgSend(v62, sel_addInteraction_, v63);

    }
    v64 = *(void **)&v54[direct field offset for Canvas.dropInteraction];
    *(_QWORD *)&v54[direct field offset for Canvas.dropInteraction] = v61;

  }
  v65 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasScribbleDelegate<Image>);
  v66 = objc_allocWithZone(v65);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v114.receiver = v66;
  v114.super_class = v65;
  v67 = objc_msgSendSuper2(&v114, sel_init);
  v68 = direct field offset for Canvas.scribbleDelegate;
  v69 = *(void **)&v54[direct field offset for Canvas.scribbleDelegate];
  *(_QWORD *)&v54[direct field offset for Canvas.scribbleDelegate] = v67;

  v70 = *(_QWORD *)&v54[v68];
  if (!v70)
    goto LABEL_15;
  v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C08]), sel_initWithDelegate_, v70);
  v72 = direct field offset for Canvas.scribbleInteraction;
  v73 = *(void **)&v54[direct field offset for Canvas.scribbleInteraction];
  *(_QWORD *)&v54[direct field offset for Canvas.scribbleInteraction] = v71;

  v74 = *(void **)&v54[v68];
  if (!v74)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v75 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIIndirectScribbleInteraction<CanvasScribbleDelegate<Image>>));
  v76 = v74;
  v77 = UIIndirectScribbleInteraction.init(delegate:)();
  v78 = direct field offset for Canvas.indirectScribbleInteraction;
  v79 = *(void **)&v54[direct field offset for Canvas.indirectScribbleInteraction];
  *(_QWORD *)&v54[direct field offset for Canvas.indirectScribbleInteraction] = v77;

  v80 = *(_QWORD *)&v54[v72];
  if (!v80)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v81 = *(id *)&v49[v50];
  objc_msgSend(v81, sel_addInteraction_, v80);
  if (!*(_QWORD *)&v54[v78])
  {
LABEL_18:
    __break(1u);
    return;
  }
  objc_msgSend(v81, sel_addInteraction_);

  v82 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  v83 = direct field offset for Canvas.pointerDelegate;
  v84 = *(void **)&v54[direct field offset for Canvas.pointerDelegate];
  *(_QWORD *)&v54[direct field offset for Canvas.pointerDelegate] = v82;

  v85 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, *(_QWORD *)&v54[v83]);
  objc_msgSend(v54, sel_addInteraction_, v85);
  v116 = &type metadata for PencilAndPaperFeatureFlags;
  v117 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v115[0]) = 0;
  v86 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
  if ((v86 & 1) != 0)
  {
    if ((_BYTE)v110)
    {
      v87 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasEditMenuDelegate<Image>);
      v88 = objc_allocWithZone(v87);
      swift_unknownObjectWeakInit();
      v88[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;
      swift_unknownObjectWeakAssign();
      v113.receiver = v88;
      v113.super_class = v87;
      v89 = objc_msgSendSuper2(&v113, sel_init);
      v90 = *(void **)&v54[direct field offset for Canvas.editMenuInteractionDelegate];
      *(_QWORD *)&v54[direct field offset for Canvas.editMenuInteractionDelegate] = v89;
      v91 = v89;

      v92 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v91);
      objc_msgSend(v54, sel_addInteraction_, v92);
      v93 = *(void **)&v54[direct field offset for Canvas.editMenuInteraction];
      *(_QWORD *)&v54[direct field offset for Canvas.editMenuInteraction] = v92;
      v94 = v92;

      specialized Canvas.setupBandSelection()();
    }
  }
  v95 = v54;
  v96 = (uint64_t)v101;
  Date.init()();
  v97 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v96, 0, 1, v97);
  v98 = (uint64_t)&v95[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v96, v98, &demangling cache variable for type metadata for Date?);
  swift_endAccess();

  (*(void (**)(uint64_t))(*(_QWORD *)(v100 - 8) + 8))(v111);
}

void specialized Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(char a1, char a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  id v9;
  void *v10;
  id v11;
  _QWORD *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  void *v23;
  _UNKNOWN **v24;
  id v25;
  uint64_t ObjectType;
  uint64_t (*v27)(uint64_t, _UNKNOWN **);
  id v28;
  char *v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGPoint v34;
  uint64_t v35;
  void *v36;
  unsigned __int8 v37;
  void *v38;
  id v39;
  id v40;
  CGAffineTransform v41;
  CGAffineTransform v42;
  CGPoint v43;

  v5 = v4;
  if ((a1 & 1) != 0)
  {
    v9 = objc_msgSend(v5, sel_hitTest_withEvent_, 0, a3, a4);
    if (v9)
    {
      v10 = v9;
      type metadata accessor for AnyCanvasElementView();
      v11 = v10;
      v12 = (_QWORD *)swift_dynamicCastClass();
      v13 = v11;
      if (v12)
      {
LABEL_8:

        if (v12 != *(_QWORD **)((char *)v5 + direct field offset for Canvas.paperView))
        {
          v40 = v13;
          objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v5, a3, a4);
          (*(void (**)(_QWORD, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x1C8))(0, 1, a2 & 1);

          return;
        }
        v11 = v13;
      }
      else
      {
        v13 = v11;
        while (1)
        {
          v14 = objc_msgSend(v13, sel_superview);

          if (!v14)
            break;
          v13 = v14;
          v15 = swift_dynamicCastClass();
          if (v15)
          {
            v12 = (_QWORD *)v15;
            goto LABEL_8;
          }
        }
      }

    }
  }
  if ((a2 & 1) == 0)
    goto LABEL_16;
  v16 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v16)
  {
    __break(1u);
    return;
  }
  v17 = (_QWORD *)(v16 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(_QWORD *)(*v17 + 16))
    goto LABEL_16;
  if (*(_QWORD *)(v17[1] + 16))
    goto LABEL_16;
  v18 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x320))();
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, sel__hasSelection);

    if (v20)
      goto LABEL_16;
  }
  *(_QWORD *)&v42.d = &type metadata for PencilAndPaperFeatureFlags;
  *(_QWORD *)&v42.tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v42.a) = 0;
  v21 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  if ((v21 & 1) == 0)
  {
LABEL_16:
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
  }
  else
  {
    v22 = *(_QWORD *)((char *)v5 + direct field offset for Canvas.editMenuInteractionDelegate);
    if (v22 && *(_BYTE *)(v22 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) == 1)
    {
      objc_msgSend(*(id *)((char *)v5 + direct field offset for Canvas.editMenuInteraction), sel_dismissMenu);
      return;
    }
    v23 = *(void **)((char *)v5 + direct field offset for Canvas._editingView);
    if (v23)
    {
      v24 = *(_UNKNOWN ***)((char *)v5 + direct field offset for Canvas._editingView + 8);
      v25 = *(id *)((char *)v5 + direct field offset for Canvas._editingView);
    }
    else
    {
      v25 = *(id *)((char *)v5 + direct field offset for Canvas.paperView);
      v24 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    ObjectType = swift_getObjectType();
    v27 = (uint64_t (*)(uint64_t, _UNKNOWN **))v24[2];
    v28 = v23;
    v29 = (char *)v27(ObjectType, v24);

    if (!v29)
      goto LABEL_33;
    objc_msgSend(v29, sel_convertPoint_fromCoordinateSpace_, v5, a3, a4);
    v31 = v30;
    v33 = v32;
    objc_msgSend(v29, sel_drawingTransform);
    CGAffineTransformInvert(&v41, &v42);
    v42 = v41;
    v43.x = v31;
    v43.y = v33;
    v34 = CGPointApplyAffineTransform(v43, &v42);
    v35 = *(_QWORD *)&v29[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (!v35
      || (v36 = *(void **)(v35 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0)
    {

LABEL_33:
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      memset(&v42, 0, 40);
      v38 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      v39 = *(id *)((char *)v5 + direct field offset for Canvas.editMenuInteraction);
      objc_msgSend(v39, sel_presentEditMenuWithConfiguration_, v38);

      return;
    }
    v37 = objc_msgSend(v36, sel_handleSingleTapAtDrawingLocation_, v34.x, v34.y);

    if ((v37 & 1) == 0)
      goto LABEL_33;
  }
}

void specialized Canvas.tapCanvasElement(_:modifierFlags:)(NSObject *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  NSObject *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  BOOL v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint8_t *v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  id v92;
  void *v93;
  NSObject *v94;
  NSObject *v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  NSObject *isa;
  char **v105;
  char **v106;
  NSObject *v107;
  NSObject *v108;
  id v109;
  char v110;
  char v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t (*v115)(void);
  NSObject *v116;
  id v117;
  uint64_t v118;
  void *v119;
  id v120;
  char *v121;
  uint64_t v122;
  uint64_t ObjectType;
  void *v124;
  void *v125;
  _QWORD *v126;
  void *v127;
  void *v128;
  id v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  id v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138[2];
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  int64_t v150;
  char v151;

  v143 = a2;
  v5 = type metadata accessor for Logger();
  v141 = *(_QWORD *)(v5 - 8);
  v142 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v140 = (char *)v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v139 = (char *)v138 - v10;
  v144 = 0;
  v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & (uint64_t)a1->isa) + 0x220))(v21) & 1) == 0)
    return;
  if ((a3 & 1) != 0 || (v143 & 0x120000) == 0)
  {
    v45 = a1;
    v46 = specialized CanvasMembers.init(_:)(v45);
    v48 = v47;
    v50 = v49;
    v52 = v51;

    v31 = v145;
    AnyCanvas.selection.setter(v46, v48, v50, v52 & 1);
    goto LABEL_90;
  }
  v143 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v24 = *(_QWORD *)&v145[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v24)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  v26 = v25[1];
  v138[0] = *v25;
  v138[1] = v26;
  v27 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)a1->isa) + 0xE8);
  swift_bridgeObjectRetain();
  v28 = swift_bridgeObjectRetain();
  v27(v28);
  SharedTagged_9.tag.getter();
  v150 = v146;
  v151 = v147;
  MEMORY[0x1DF0E3408](v13);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v29 = specialized Set.contains(_:)((uint64_t)v23, v138[0]);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = v143;
  v31 = v145;
  v32 = *(_BYTE **)&v145[v143];
  if ((v29 & 1) == 0)
  {
    if (!v32)
    {
LABEL_108:
      __break(1u);
      goto LABEL_109;
    }
    v53 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    v54 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    v55 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    v56 = v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    v146 = v53;
    v147 = v54;
    v148 = v55;
    v149 = v56;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v57 = v32;
    CanvasMembers.insert(_:)(a1);
    CanvasElementResizeView.selection.setter(v146, v147, v148, v149);

    v58 = *(_QWORD *)&v31[v30];
    if (!v58)
    {
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    v59 = v58 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v60 = *(_QWORD *)v59;
    v61 = *(_QWORD *)(v59 + 8);
    v62 = *(_QWORD *)(v59 + 16);
    v63 = *(_BYTE *)(v59 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Set.== infix(_:_:)(v53, v60) & 1) != 0)
    {
      v64 = specialized static Set.== infix(_:_:)(v54, v61);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v64 & 1) != 0)
      {
        if ((v56 & 1) != 0)
        {
          if ((v63 & 1) != 0)
            goto LABEL_90;
        }
        else
        {
          if (v55 == v62)
            v111 = v63;
          else
            v111 = 1;
          if ((v111 & 1) == 0)
            goto LABEL_90;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for miniMenuLogger != -1)
      swift_once();
    v75 = v142;
    v76 = __swift_project_value_buffer(v142, (uint64_t)miniMenuLogger);
    v77 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v140, v76, v75);
    a1 = v31;
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.info.getter();
    v80 = os_log_type_enabled(v78, v79);
    v71 = v143;
    if (v80)
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v81 = 134217984;
      v82 = *(_QWORD *)&v31[v71];
      if (!v82)
      {
LABEL_112:

        __break(1u);
        goto LABEL_113;
      }
      v83 = v81;
      v146 = *(_QWORD *)(*(_QWORD *)(v82 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1DDB0F000, v78, v79, "Changing selection to have %ld elements", v83, 0xCu);
      MEMORY[0x1DF0E6558](v83, -1, -1);
    }
    else
    {

      v78 = a1;
    }

    v97 = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v140, v75);
    MEMORY[0x1E0C80A78](v97, v98);
    v138[-2] = (uint64_t)a1;
    AnyCanvas.updateCanvasState(_:)();
    if ((-[NSObject isFirstResponder](a1, sel_isFirstResponder) & 1) != 0)
      goto LABEL_78;
    v99 = *(void **)&v31[v71];
    if (!v99)
    {
LABEL_114:
      __break(1u);
      return;
    }
    v100 = v99;
    v101 = swift_bridgeObjectRetain();
    v102 = specialized Sequence.compactMap<A>(_:)(v101, (uint64_t)v100);

    swift_bridgeObjectRelease();
    if (v102 >> 62)
    {
      swift_bridgeObjectRetain();
      v103 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v103 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v103)
      goto LABEL_78;
    isa = a1;
    v105 = (char **)-[NSObject window](isa, sel_window);
    if (!v105)
      goto LABEL_76;
    v106 = v105;
    v107 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v105);
    if (v107)
    {
      v108 = v107;
      v109 = -[NSObject _visibilityUpdatesEnabled](v107, sel__visibilityUpdatesEnabled);
      -[NSObject _setVisibilityUpdatesEnabled:](v108, sel__setVisibilityUpdatesEnabled_, 0);
      -[NSObject becomeFirstResponder](isa, sel_becomeFirstResponder);
      -[NSObject _setVisibilityUpdatesEnabled:](v108, sel__setVisibilityUpdatesEnabled_, v109);

      isa = v108;
LABEL_77:

LABEL_78:
      v119 = *(Class *)((char *)&a1->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
      if (v119)
      {
        v120 = v119;
        HandwritingReflowView.updateForNewSelection()();

      }
      v121 = (char *)a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v121))
      {
        v122 = *((_QWORD *)v121 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v122 + 8))(a1, ObjectType, v122);
        swift_unknownObjectRelease();
      }
      specialized Canvas.updateToolPickerContextualEditingView()();
      v115 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)a1->isa) + 0x320);
      v124 = (void *)v115();
      if (v124)
      {
        v125 = v124;
        if (objc_msgSend(v124, sel_respondsToSelector_, sel__externalElementsSelectionDidChange))
          objc_msgSend(v125, sel__externalElementsSelectionDidChange);

      }
      v117 = -[NSObject setNeedsLayout](a1, sel_setNeedsLayout);
      v118 = *(_QWORD *)&v31[v71];
      if (!v118)
        goto LABEL_110;
      goto LABEL_87;
    }
LABEL_75:

LABEL_76:
    -[NSObject becomeFirstResponder](isa, sel_becomeFirstResponder);
    goto LABEL_77;
  }
  if (!v32)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  v33 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v34 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v35 = *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v36 = v32[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  v146 = v33;
  v147 = v34;
  v148 = v35;
  v149 = v36;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v37 = v32;
  CanvasMembers.remove(_:)(a1);
  CanvasElementResizeView.selection.setter(v146, v147, v148, v149);

  v38 = *(_QWORD *)&v31[v30];
  if (!v38)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v39 = v38 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v40 = *(_QWORD *)v39;
  v41 = *(_QWORD *)(v39 + 8);
  v42 = *(_QWORD *)(v39 + 16);
  v43 = *(unsigned __int8 *)(v39 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v33, v40) & 1) != 0)
  {
    v44 = specialized static Set.== infix(_:_:)(v34, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v44 & 1) != 0)
    {
      if ((v36 & 1) != 0)
      {
        if (v43)
          goto LABEL_90;
      }
      else
      {
        if (v35 == v42)
          v110 = v43;
        else
          v110 = 1;
        if ((v110 & 1) == 0)
          goto LABEL_90;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1)
    swift_once();
  v65 = v142;
  v66 = __swift_project_value_buffer(v142, (uint64_t)miniMenuLogger);
  v67 = v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v139, v66, v65);
  a1 = v31;
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.info.getter();
  v70 = os_log_type_enabled(v68, v69);
  v71 = v143;
  if (v70)
  {
    v72 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v72 = 134217984;
    v73 = *(_QWORD *)&v31[v71];
    if (!v73)
    {
LABEL_111:

      __break(1u);
      goto LABEL_112;
    }
    v74 = v72;
    v146 = *(_QWORD *)(*(_QWORD *)(v73 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1DDB0F000, v68, v69, "Changing selection to have %ld elements", v74, 0xCu);
    MEMORY[0x1DF0E6558](v74, -1, -1);
  }
  else
  {

    v68 = a1;
  }

  v84 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v139, v65);
  MEMORY[0x1E0C80A78](v84, v85);
  v138[-2] = (uint64_t)a1;
  AnyCanvas.updateCanvasState(_:)();
  if ((-[NSObject isFirstResponder](a1, sel_isFirstResponder) & 1) == 0)
  {
    v86 = *(void **)&v31[v71];
    if (!v86)
    {
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    v87 = v86;
    v88 = swift_bridgeObjectRetain();
    v89 = specialized Sequence.compactMap<A>(_:)(v88, (uint64_t)v87);

    swift_bridgeObjectRelease();
    if (v89 >> 62)
    {
      swift_bridgeObjectRetain();
      v90 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v90 = *(_QWORD *)((v89 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v90)
    {
      v91 = a1;
      v92 = -[NSObject window](v91, sel_window);
      if (v92)
      {
        v93 = v92;
        v94 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v92);
        if (v94)
        {
          v95 = v94;
          v96 = -[NSObject _visibilityUpdatesEnabled](v94, sel__visibilityUpdatesEnabled);
          -[NSObject _setVisibilityUpdatesEnabled:](v95, sel__setVisibilityUpdatesEnabled_, 0);
          -[NSObject becomeFirstResponder](v91, sel_becomeFirstResponder);
          -[NSObject _setVisibilityUpdatesEnabled:](v95, sel__setVisibilityUpdatesEnabled_, v96);

          v91 = v95;
LABEL_64:

          goto LABEL_65;
        }

      }
      -[NSObject becomeFirstResponder](v91, sel_becomeFirstResponder);
      goto LABEL_64;
    }
  }
LABEL_65:
  v112 = *(Class *)((char *)&a1->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v112)
  {
    v113 = v112;
    HandwritingReflowView.updateForNewSelection()();

  }
  isa = ((char *)a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](isa))
  {
    isa = isa[1].isa;
    v114 = swift_getObjectType();
    ((void (*)(NSObject *, uint64_t, NSObject *))isa[1].isa)(a1, v114, isa);
    swift_unknownObjectRelease();
  }
  v106 = (char **)a1;
  specialized Canvas.updateToolPickerContextualEditingView()();
  v115 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)a1->isa) + 0x320);
  v116 = v115();
  if (v116)
  {
    isa = v116;
    v106 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    if (-[NSObject respondsToSelector:](v116, sel_respondsToSelector_, sel__externalElementsSelectionDidChange))-[NSObject _externalElementsSelectionDidChange](isa, sel__externalElementsSelectionDidChange);

  }
  v117 = -[NSObject setNeedsLayout](a1, sel_setNeedsLayout);
  v118 = *(_QWORD *)&v31[v71];
  if (!v118)
  {
    __break(1u);
    goto LABEL_75;
  }
LABEL_87:
  v126 = (_QWORD *)(v118 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(_QWORD *)(*v126 + 16) && !*(_QWORD *)(v126[1] + 16))
  {
    v127 = (void *)((uint64_t (*)(id))v115)(v117);
    objc_msgSend(v127, sel__clearSelectionIfNecessary);

  }
LABEL_90:
  a1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v128 = *(void **)&v31[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v128)
  {
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  v129 = v128;
  v130 = swift_bridgeObjectRetain();
  v131 = specialized Sequence.compactMap<A>(_:)(v130, (uint64_t)v129);

  swift_bridgeObjectRelease();
  if (v131 >> 62)
  {
    swift_bridgeObjectRetain();
    v132 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v132 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v132)
  {
    type metadata accessor for Analytics();
    swift_initStaticObject();
    v133 = *(Class *)((char *)&a1->isa + (_QWORD)v145);
    if (v133)
    {
      v134 = v133;
      v135 = swift_bridgeObjectRetain();
      v136 = specialized Sequence.compactMap<A>(_:)(v135, (uint64_t)v134);

      swift_bridgeObjectRelease();
      if (v136 >> 62)
      {
        swift_bridgeObjectRetain();
        v137 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v137 = *(_QWORD *)((v136 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      Analytics.recordDidMakeSelection(type:contentType:)(0, v137 > 1);
      return;
    }
    goto LABEL_104;
  }
}

void specialized Canvas.startCheckingForOldEraserStrokes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD v15[6];

  v3 = *(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  v0 = v1;
  *(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex) = v5;
  v2 = direct field offset for Canvas.removeOldEraserStrokesTimer;
  if (*(_QWORD *)(v1 + direct field offset for Canvas.removeOldEraserStrokesTimer))
    return;
  if (one-time initialization token for logger != -1)
    goto LABEL_9;
LABEL_4:
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DDB0F000, v7, v8, "Start checking for old eraser strokes", v9, 2u);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }

  v10 = (void *)objc_opt_self();
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v15[4] = partial apply for specialized closure #1 in Canvas.startCheckingForOldEraserStrokes();
  v15[5] = v11;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v15[3] = &block_descriptor_113;
  v12 = _Block_copy(v15);
  swift_release();
  v13 = objc_msgSend(v10, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v12, 30.0);
  _Block_release(v12);
  v14 = *(void **)(v0 + v2);
  *(_QWORD *)(v0 + v2) = v13;

}

void specialized Canvas.mergeToCanvasElements()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  char *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  char v52;
  void *v53;
  id v54;
  char *v55;
  uint64_t v56;
  uint64_t ObjectType;
  uint64_t (*v58)(void);
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  id v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD v74[2];
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;

  v1 = v0;
  v2 = type metadata accessor for Logger();
  v78 = *(_QWORD *)(v2 - 8);
  v79 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v77 = (char *)v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView])
  {
    __break(1u);
    goto LABEL_51;
  }
  v11 = v0;
  v12 = swift_bridgeObjectRetain();
  v13 = specialized _NativeSet.filter(_:)(v12, v11);
  v74[1] = 0;

  v14 = *(char **)&v1[v10];
  if (!v14)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v15 = v10;
  v82 = v6;
  v83 = v11;
  v81 = v9;
  v16 = *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v9 = *(char **)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v18 = v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v19 = v14;
  CanvasElementResizeView.selection.setter(v13, v17, (uint64_t)v9, v18);

  v75 = v1;
  v76 = v15;
  v20 = *(_QWORD *)&v1[v15];
  if (!v20)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v80 = v5;
  v21 = v20 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v22 = *(_QWORD *)v21;
  v23 = *(_QWORD *)(v21 + 8);
  v24 = *(char **)(v21 + 16);
  v25 = *(unsigned __int8 *)(v21 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v16, v22) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v26 = specialized static Set.== infix(_:_:)(v17, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
    goto LABEL_10;
  if ((v18 & 1) != 0)
  {
    if (v25)
      goto LABEL_44;
LABEL_10:
    if (one-time initialization token for miniMenuLogger != -1)
      swift_once();
    v27 = v79;
    v28 = __swift_project_value_buffer(v79, (uint64_t)miniMenuLogger);
    v30 = v77;
    v29 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v28, v27);
    v9 = v83;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = v75;
    v35 = v76;
    if (v33)
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v36 = 134217984;
      v37 = *(_QWORD *)&v34[v35];
      if (!v37)
      {
LABEL_54:

        __break(1u);
        goto LABEL_55;
      }
      v38 = v36;
      v84 = *(_QWORD *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1DDB0F000, v31, v32, "Changing selection to have %ld elements", v38, 0xCu);
      MEMORY[0x1DF0E6558](v38, -1, -1);
    }
    else
    {

    }
    v39 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v30, v27);
    MEMORY[0x1E0C80A78](v39, v40);
    v74[-2] = v9;
    AnyCanvas.updateCanvasState(_:)();
    if ((objc_msgSend(v9, sel_isFirstResponder) & 1) != 0)
      goto LABEL_32;
    v41 = *(void **)&v34[v35];
    if (!v41)
    {
LABEL_55:
      __break(1u);
      return;
    }
    v42 = v41;
    v43 = swift_bridgeObjectRetain();
    v44 = specialized Sequence.compactMap<A>(_:)(v43, (uint64_t)v42);

    swift_bridgeObjectRelease();
    if (v44 >> 62)
    {
      swift_bridgeObjectRetain();
      v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v45)
      goto LABEL_32;
    v46 = v9;
    v47 = objc_msgSend(v46, sel_window);
    if (v47)
    {
      v48 = v47;
      v49 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v47);
      if (v49)
      {
        v50 = v49;
        v51 = objc_msgSend(v49, sel__visibilityUpdatesEnabled);
        objc_msgSend(v50, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v46, sel_becomeFirstResponder);
        objc_msgSend(v50, sel__setVisibilityUpdatesEnabled_, v51);

        v46 = (char *)v50;
LABEL_31:

LABEL_32:
        v53 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
        if (v53)
        {
          v54 = v53;
          HandwritingReflowView.updateForNewSelection()();

        }
        v55 = &v9[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate];
        swift_beginAccess();
        if (MEMORY[0x1DF0E666C](v55))
        {
          v56 = *((_QWORD *)v55 + 1);
          ObjectType = swift_getObjectType();
          (*(void (**)(char *, uint64_t, uint64_t))(v56 + 8))(v9, ObjectType, v56);
          swift_unknownObjectRelease();
        }
        specialized Canvas.updateToolPickerContextualEditingView()();
        v58 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x320);
        v59 = (void *)v58();
        if (v59)
        {
          v60 = v59;
          if (objc_msgSend(v59, sel_respondsToSelector_, sel__externalElementsSelectionDidChange))
            objc_msgSend(v60, sel__externalElementsSelectionDidChange);

        }
        v61 = objc_msgSend(v9, sel_setNeedsLayout);
        v62 = *(_QWORD *)&v34[v35];
        if (v62)
        {
          v63 = (_QWORD *)(v62 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          if (!*(_QWORD *)(*v63 + 16) && !*(_QWORD *)(v63[1] + 16))
          {
            v64 = (void *)((uint64_t (*)(id))v58)(v61);
            objc_msgSend(v64, sel__clearSelectionIfNecessary);

          }
          goto LABEL_44;
        }
        goto LABEL_53;
      }

    }
    objc_msgSend(v46, sel_becomeFirstResponder);
    goto LABEL_31;
  }
  if (v9 == v24)
    v52 = v25;
  else
    v52 = 1;
  if ((v52 & 1) != 0)
    goto LABEL_10;
LABEL_44:
  v65 = v83;
  v66 = *(_QWORD **)&v83[direct field offset for Canvas.paperView];
  v67 = (char *)v66 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v66) + 0x380);
  swift_beginAccess();
  v69 = v81;
  v68 = v82;
  v70 = v80;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v81, v67, v80);
  swift_beginAccess();
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v71 = v66;
  LOBYTE(v67) = Capsule.merge<A>(_:)();
  v72 = swift_endAccess();
  if ((v67 & 1) != 0
    || (v72 = MEMORY[0x1DF0E666C]((char *)v71 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v71) + 0x488))(v72);
  }
  else
  {
    v73 = (_QWORD *)v72;

    v71 = v73;
  }

  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
  objc_msgSend(v65, sel_setNeedsLayout);
}

void specialized Canvas.updateToolPickerContextualEditingView()()
{
  _QWORD *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;

  v1 = *(void **)((char *)v0 + direct field offset for Canvas._canvasElementController);
  if (v1)
  {
    v18 = *(id *)((char *)v0 + direct field offset for Canvas._canvasElementController);
LABEL_3:
    v2 = v1;
    CanvasElementController.updateToolPickerContextualEditingView()();
    v3 = v18;
LABEL_4:

    return;
  }
  v4 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320);
  v5 = v4();
  if (v5)
  {
    v6 = (void *)v5;
    swift_getObjectType();
    v7 = swift_conformsToProtocol2();
    if (v7)
      v8 = v7;
    else
      v8 = 0;
    if (v7)
      v9 = v6;
    else
      v9 = 0;
    if (v9)
    {
      ObjectType = swift_getObjectType();
      v18 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(ObjectType, v8);

      v1 = 0;
      goto LABEL_3;
    }

  }
  v11 = v4();
  if (v11)
  {
    v19 = (id)v11;
    swift_getObjectType();
    v12 = swift_conformsToProtocol2();
    v13 = v12 == 0;
    if (v12)
      v14 = v12;
    else
      v14 = 0;
    v3 = v19;
    if (v13)
      v15 = 0;
    else
      v15 = v19;
    if (v15)
    {
      v16 = swift_getObjectType();
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v16, v14);
      CanvasElementController.updateToolPickerContextualEditingView()();

      v3 = (void *)v17;
    }
    goto LABEL_4;
  }
}

void specialized Canvas.insertCanvasGenerationToolOverlayIfNeeded()()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  id v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v1 = v0;
  v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x320))();
  if (v2)
  {
    v3 = v2;
    v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool;
    if (!*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool])
    {
      v11 = v2;
      v5 = objc_msgSend(v2, sel_isGenerationModelAvailable);
      v3 = v11;
      if (v5)
      {
        v6 = objc_msgSend(v11, sel_generationToolGestureRecognizer);
        objc_allocWithZone((Class)type metadata accessor for CanvasGenerationTool());
        v7 = v1;
        v8 = CanvasGenerationTool.init(canvas:gesture:)(v7, v6);
        v9 = *(void **)&v1[v4];
        *(_QWORD *)&v1[v4] = v8;
        v10 = v8;

        objc_msgSend(v7, sel_addSubview_, v10);
        v3 = v10;
      }
    }

  }
}

void specialized Canvas.setupBandSelection()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD *v20;

  v1 = swift_allocObject();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = 6;
  *(_BYTE *)(v1 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v3 = swift_allocBox();
  v5 = v4;
  v6 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = v1;
  v8[4] = v3;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC34E0]);
  v19 = partial apply for specialized closure #1 in Canvas.setupBandSelection();
  v20 = v8;
  v10 = MEMORY[0x1E0C809B0];
  v15 = MEMORY[0x1E0C809B0];
  v16 = 1107296256;
  v17 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v18 = &block_descriptor_4;
  v11 = _Block_copy(&v15);
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = objc_msgSend(v9, sel_initWithSelectionHandler_, v11);
  _Block_release(v11);
  swift_release();
  swift_release();
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19 = partial apply for specialized closure #2 in Canvas.setupBandSelection();
  v20 = (_QWORD *)v13;
  v15 = v10;
  v16 = 1107296256;
  v17 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  v18 = &block_descriptor_11;
  v14 = _Block_copy(&v15);
  swift_release();
  objc_msgSend(v12, sel_setShouldBeginHandler_, v14);
  _Block_release(v14);
  objc_msgSend(v0, sel_addInteraction_, v12);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(uint64_t, double, double);
  _QWORD *v20;

  v1 = swift_allocObject();
  v2 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = 6;
  *(_BYTE *)(v1 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v3 = swift_allocBox();
  v5 = v4;
  v6 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = v1;
  v8[4] = v3;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC34E0]);
  v19 = (uint64_t (*)(uint64_t, double, double))partial apply for specialized closure #1 in Canvas.setupBandSelection();
  v20 = v8;
  v10 = MEMORY[0x1E0C809B0];
  v15 = MEMORY[0x1E0C809B0];
  v16 = 1107296256;
  v17 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v18 = &block_descriptor_144;
  v11 = _Block_copy(&v15);
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = objc_msgSend(v9, sel_initWithSelectionHandler_, v11);
  _Block_release(v11);
  swift_release();
  swift_release();
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19 = partial apply for specialized closure #2 in Canvas.setupBandSelection();
  v20 = (_QWORD *)v13;
  v15 = v10;
  v16 = 1107296256;
  v17 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  v18 = &block_descriptor_148;
  v14 = _Block_copy(&v15);
  swift_release();
  objc_msgSend(v12, sel_setShouldBeginHandler_, v14);
  _Block_release(v14);
  objc_msgSend(v0, sel_addInteraction_, v12);
  swift_release();
  swift_release();

}

uint64_t specialized Canvas.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];

  v3 = type metadata accessor for PKInkingTool.InkType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKInk();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))(v11);
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "ink");

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    PKInk.tool.getter((uint64_t *)v22);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    return outlined init with take of FindResult(v22, (uint64_t)a1);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0CD0F60], v3);
    v18 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    PKInk.init(_:color:)();
    v19 = type metadata accessor for PKInkingTool();
    v20 = MEMORY[0x1E0CD0F70];
    a1[3] = v19;
    a1[4] = v20;
    __swift_allocate_boxed_opaque_existential_1(a1);
    return PKInkingTool.init(ink:width:)();
  }
}

void specialized Canvas.stopCheckingForOldEraserStrokes(index:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;

  if (*(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex) == a1)
  {
    v2 = v1;
    if (one-time initialization token for logger != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1DDB0F000, v4, v5, "Stopped checking for old eraser strokes", v6, 2u);
      MEMORY[0x1DF0E6558](v6, -1, -1);
    }

    v7 = direct field offset for Canvas.removeOldEraserStrokesTimer;
    objc_msgSend(*(id *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer), sel_invalidate);
    v8 = *(void **)(v2 + v7);
    *(_QWORD *)(v2 + v7) = 0;

  }
}

uint64_t specialized Canvas.removeOldEraserStrokes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;

  v1 = v0;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v29 = *(_QWORD *)(v31 - 8);
  v2 = *(_QWORD *)(v29 + 64);
  MEMORY[0x1E0C80A78](v31, v3);
  v27 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v7;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v27 - v15;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  v30(v12, v8);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  v20 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))((char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v31);
  v21 = v16;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v16, v8);
  v22 = (*(unsigned __int8 *)(v20 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v23 = (v2 + *(unsigned __int8 *)(v9 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = 0;
  *((_QWORD *)v24 + 3) = 0;
  *((_QWORD *)v24 + 4) = v18;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v24[v22], v27, v31);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v24[v23], v12, v8);
  v25 = (uint64_t)v28;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v28, (uint64_t)&async function pointer to partial apply for specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), (uint64_t)v24);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v25, &demangling cache variable for type metadata for TaskPriority?);
  return ((uint64_t (*)(char *, uint64_t))v30)(v21, v8);
}

uint64_t ResizeInfo.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResizeInfo()
{
  return objc_opt_self();
}

id ResizeGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  objc_super v15;
  _QWORD v16[3];
  uint64_t v17;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
  v5 = v17;
  if (v17)
  {
    v6 = __swift_project_boxed_opaque_existential_1(v16, v17);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = MEMORY[0x1E0C80A78](v6, v6);
    v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v11 = 0;
  }
  v12 = (objc_class *)type metadata accessor for ResizeGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id ResizeGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ResizeGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ResizeGestureRecognizer()
{
  return objc_opt_self();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AttachmentViewExtraHeightForGenerationMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PaperTextAttachmentView.dataModelIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v2 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for CRKeyPath();
  v15 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v1;
  v19 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v19, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v22 = v25 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
    swift_beginAccess();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v27, v22, v26);
  }
  else
  {
    Ref.id.getter();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v20);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v27, v18, v26);
  }
}

void @objc PaperTextAttachmentView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized PaperTextAttachmentView.init(coder:)();
}

uint64_t PaperTextAttachmentView.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for PaperTextAttachmentView.paperViewDelegate);
  swift_release();
  swift_release();
  swift_release();

  v1 = v0 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  v2 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();

  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

id PaperTextAttachmentView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  PaperTextAttachmentView.observeTextView(_:)(0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @objc PaperTextAttachmentView.__deallocating_deinit(void *a1)
{
  id v1;
  objc_super v3;

  v1 = a1;
  PaperTextAttachmentView.observeTextView(_:)(0);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc PaperTextAttachmentView.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for PaperTextAttachmentView.paperViewDelegate);
  swift_release();
  swift_release();
  swift_release();

  v2 = a1 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  v3 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectWeakDestroy();

  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectRelease();
}

void PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  _QWORD *v68;
  char v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, uint64_t, uint64_t);
  int v87;
  uint64_t v88;
  char *v89;
  char v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  uint64_t v98;
  uint8_t *v99;
  uint8_t *v100;
  void (*v101)(_QWORD, _QWORD);
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  _QWORD *v112;
  void (*v113)(_QWORD, _QWORD);
  id v114;
  unint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t *v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  char v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(char *, NSObject *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  id v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint8_t *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  Swift::Bool v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  CGFloat v190;
  double v191;
  CGFloat v192;
  double v193;
  CGFloat v194;
  double v195;
  CGFloat v196;
  id v197;
  double v198;
  CGFloat v199;
  UIView_optional *v200;
  CGSize v201;
  BOOL v202;
  _QWORD v203[2];
  unsigned int (*v204)(char *, uint64_t, uint64_t);
  void (*v205)(uint64_t, uint64_t, uint64_t);
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  void (*v210)(char *, id, uint64_t);
  uint64_t v211;
  void (*v212)(_QWORD, _QWORD);
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _QWORD *v225;
  char *v226;
  int v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  CGFloat v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  CGRect v239;
  CGRect v240;
  CGRect v241;
  __C::CGRect v242;
  CGRect v243;

  v227 = a2;
  v232 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2, v3);
  v206 = (char *)v203 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v216 = *(_QWORD *)(v217 - 8);
  MEMORY[0x1E0C80A78](v217, v5);
  v215 = (char *)v203 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for CRKeyPath();
  v223 = *(_QWORD *)(v222 - 8);
  MEMORY[0x1E0C80A78](v222, v7);
  v214 = (char *)v203 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v207 = (char *)v203 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v220 = (char *)v203 - v14;
  v229 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v229, v15);
  v230 = (uint64_t)v203 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v17, v18);
  v213 = (char *)v203 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v203 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v228 = (char *)v203 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v27, v28);
  v212 = (void (*)(_QWORD, _QWORD))((char *)v203 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v30, v31);
  v209 = (uint64_t)v203 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v231 = (uint64_t)v203 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v224 = (char *)v203 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  v221 = (char *)v203 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)v203 - v45;
  MEMORY[0x1E0C80A78](v47, v48);
  v226 = (char *)v203 - v49;
  v50 = type metadata accessor for Date();
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v52);
  v54 = (char *)v203 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v55, v56);
  v58 = (char *)v203 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v59, v60);
  v62 = (char *)v203 - v61;
  if ((v227 & 1) != 0)
  {
    v219 = v17;
    static Date.now.getter();
    v63 = v232;
    specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)((uint64_t)v54, (uint64_t)v62);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v50);
    v208 = v62;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v62, (uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    v210 = *(void (**)(char *, id, uint64_t))(v40 + 16);
    v210(v46, v63, v39);
    v204 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v64 = v40;
    if (v204(v58, 1, v39) == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v226, v46, v39);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v226, v58, v39);
    }
    v71 = (uint64_t)v224;
    v72 = v223;
    v73 = (uint64_t)v228;
    v203[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.root.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
    v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    v75 = *(_QWORD *)(v74 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v73, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
      v77 = v222;
      v78 = v76(v71, 1, 1, v222);
      MEMORY[0x1E0C80A78](v78, v79);
      v80 = v225;
      v203[-2] = v225;
      Capsule.callAsFunction<A>(_:)();
      v72 = v223;
      v81 = v77;
    }
    else
    {
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Reference.identity.getter();
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v73, v74);
      v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
      v81 = v222;
      v76(v71, 0, 1, v222);
      v80 = v225;
    }
    v82 = (uint64_t)v80 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
    swift_beginAccess();
    v83 = v231;
    v205 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
    v205(v231, v82, v81);
    v76(v83, 0, 1, v81);
    v84 = v230;
    v85 = v230 + *(int *)(v229 + 48);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v71, v230, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v83, v85, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v86 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    v87 = v86(v84, 1, v81);
    v211 = v64;
    if (v87 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (v86(v85, 1, v81) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v65 = v225;
LABEL_20:
        v92 = direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging;
        if (*((_BYTE *)v65 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) != 1)
        {
          v125 = *(void **)((char *)v65 + direct field offset for Canvas.paperView);
          v126 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          swift_beginAccess();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          v127 = v125;
          v128 = Capsule.merge<A>(_:)();
          v129 = swift_endAccess();
          if ((v128 & 1) != 0
            || (v129 = MEMORY[0x1DF0E666C]((char *)v127 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
          {
            (*(void (**)(uint64_t))((*v126 & *v127) + 0x488))(v129);
          }
          else
          {
            v130 = (_QWORD *)v129;

            v127 = v130;
          }

          if (one-time initialization token for logger != -1)
            swift_once();
          v131 = type metadata accessor for Logger();
          __swift_project_value_buffer(v131, (uint64_t)logger);
          v132 = v65;
          v133 = Logger.logObject.getter();
          v134 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v133, v134))
          {
            v135 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v135 = 67109120;
            LODWORD(v233) = *((unsigned __int8 *)v65 + v92);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_1DDB0F000, v133, v134, "Merging in newModel on first merge. Safe to copy: %{BOOL}d", v135, 8u);
            MEMORY[0x1DF0E6558](v135, -1, -1);
          }
          else
          {

          }
          goto LABEL_66;
        }
LABEL_21:
        if (one-time initialization token for logger != -1)
          swift_once();
        v93 = type metadata accessor for Logger();
        __swift_project_value_buffer(v93, (uint64_t)logger);
        v94 = v65;
        v95 = Logger.logObject.getter();
        v96 = static os_log_type_t.debug.getter();
        v97 = os_log_type_enabled(v95, v96);
        v98 = (uint64_t)v224;
        if (v97)
        {
          v99 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v99 = 67109120;
          LODWORD(v233) = *((unsigned __int8 *)&v94->isa
                          + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl(&dword_1DDB0F000, v95, v96, "Switching out our paper with the one from the file bundle. Safe to copy %{BOOL}d", v99, 8u);
          v100 = v99;
          v81 = v222;
          MEMORY[0x1DF0E6558](v100, -1, -1);
        }
        else
        {

          v95 = v94;
        }

        v101 = v212;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v98, (uint64_t)v212, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if (v86((uint64_t)v101, 1, v81) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        }
        else
        {
          v102 = v223;
          v103 = v207;
          (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v223 + 32))(v207, v101, v81);
          v104 = v220;
          v205((uint64_t)v220, (uint64_t)v103, v81);
          swift_beginAccess();
          (*(void (**)(uint64_t, char *, uint64_t))(v102 + 40))(v82, v104, v81);
          swift_endAccess();
          (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v81);
        }
        v105 = v221;
        v210(v221, v226, v39);
        v106 = direct field offset for Canvas.paperView;
        v107 = *(Class *)((char *)&v94->isa + direct field offset for Canvas.paperView);
        v108 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v109 = (char *)v107 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v107) + 0x380);
        swift_beginAccess();
        v110 = v211;
        v111 = *(void (**)(char *, char *, uint64_t))(v211 + 24);
        v112 = v107;
        v111(v109, v105, v39);
        swift_endAccess();

        v113 = *(void (**)(_QWORD, _QWORD))(v110 + 8);
        v218 = v39;
        v212 = v113;
        v113(v105, v39);
        v114 = -[NSObject subviews](v94, sel_subviews);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        v115 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v116 = *(id *)((char *)&v94->isa + v106);
        specialized Collection<>.firstIndex(of:)((uint64_t)v116, v115);
        v118 = v117;
        LODWORD(v110) = v119;

        v120 = v106;
        swift_bridgeObjectRelease();
        v121 = *(Class *)((char *)&v94->isa + v106);
        v122 = *(void **)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0));
        v209 = v118;
        LODWORD(v207) = v110;
        if (!v122)
        {
          LODWORD(v229) = 0;
          LODWORD(v231) = 0;
          v232 = 0;
          LODWORD(v230) = 0;
          LODWORD(v228) = 0;
          v123 = (void (*)(char *, char *, uint64_t))v210;
          goto LABEL_49;
        }
        v232 = objc_msgSend(v122, sel_hashtagAndMentionsDelegate);
        v121 = *(Class *)((char *)&v94->isa + v106);
        v123 = (void (*)(char *, char *, uint64_t))v210;
        if (*(_QWORD *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)))
        {
          LODWORD(v231) = objc_msgSend(*(id *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)), sel_wantsHashtagDetection);
          v121 = *(Class *)((char *)&v94->isa + v120);
          if (*(_QWORD *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)))
          {
            LODWORD(v230) = objc_msgSend(*(id *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)), sel_wantsMentionDetection);
            v121 = *(Class *)((char *)&v94->isa + v120);
            if (*(_QWORD *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)))
            {
              LODWORD(v229) = objc_msgSend(*(id *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)), sel_wantsProofreadingDetection);
              v121 = *(Class *)((char *)&v94->isa + v120);
              if (*(_QWORD *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)))
              {
                LODWORD(v228) = objc_msgSend(*(id *)((char *)v121 + *(_QWORD *)((*v108 & *v121) + 0x4C0)), sel_isSharedViaICloud);
                v121 = *(Class *)((char *)&v94->isa + v120);
LABEL_49:
                objc_msgSend(v121, sel_removeFromSuperview);
                v137 = *(char **)((char *)&v94->isa + v120)
                     + *(_QWORD *)((*v108 & **(_QWORD **)((char *)&v94->isa + v120)) + 0x380);
                swift_beginAccess();
                v138 = v221;
                v139 = v218;
                v123(v221, v137, v218);
                v140 = (uint64_t)v213;
                Capsule<>.root.getter();
                v141 = v220;
                Capsule<>.rootID.getter();
                LOBYTE(v233) = 0;
                v142 = v222;
                v205((uint64_t)v214, (uint64_t)v141, v222);
                lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
                v143 = v215;
                SharedTagged_9.init(_:id:)();
                (*(void (**)(char *, uint64_t))(v223 + 8))(v141, v142);
                outlined destroy of PKStrokeProperties(v140, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
                v212(v138, v139);
                SharedTagged_9<>.layout()((uint64_t *)&v233);
                (*(void (**)(char *, uint64_t))(v216 + 8))(v143, v217);
                v144 = v234;
                v145 = v235;
                __swift_project_boxed_opaque_existential_1(&v233, v234);
                v146 = *(uint64_t (**)(char *, NSObject *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v145 + 8);
                v147 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
                v148 = v146(v226, v94, 0, v219, v147, v144, v145);
                if (!v148)
                {
                  __break(1u);
                  return;
                }
                v149 = (void *)v148;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Paper>);
                v150 = (void *)swift_dynamicCastClassUnconditional();
                specialized Canvas.paperView.setter(v150);

                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
                if ((v207 & 1) != 0)
                  v151 = 0;
                else
                  v151 = v209;
                -[NSObject insertSubview:atIndex:](v94, sel_insertSubview_atIndex_, *(Class *)((char *)&v94->isa + v120), v151);
                v152 = *(id *)((char *)&v94->isa + v120);
                v153 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

                v154 = (uint64_t)v224;
                if (v153 >> 62)
                {
                  swift_bridgeObjectRetain();
                  v155 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v155 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
                }
                v39 = v218;
                if (!v155)
                {
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_67;
                }
                if (v155 < 1)
                {
                  __break(1u);
                  goto LABEL_95;
                }
                v156 = 0;
                do
                {
                  if ((v153 & 0xC000000000000001) != 0)
                    v157 = (id)MEMORY[0x1DF0E4D64](v156, v153);
                  else
                    v157 = *(id *)(v153 + 8 * v156 + 32);
                  v158 = v157;
                  ++v156;
                  objc_msgSend(v157, sel_setHashtagAndMentionsDelegate_, v232);
                  objc_msgSend(v158, sel_setWantsHashtagDetection_, v231);
                  objc_msgSend(v158, sel_setWantsMentionDetection_, v230);
                  objc_msgSend(v158, sel_setWantsProofreadingDetection_, v229);
                  objc_msgSend(v158, sel_setIsSharedViaICloud_, v228);

                }
                while (v155 != v156);
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease();
                v65 = v225;
                v39 = v218;
LABEL_66:
                v154 = (uint64_t)v224;
LABEL_67:
                LOBYTE(v146) = 1;
                v155 = (uint64_t)v208;
                if (v204(v208, 1, v39) == 1)
                {
LABEL_72:
                  *(_QWORD *)((char *)v65 + direct field offset for PaperTextAttachmentView.previousLinks) = PaperTextAttachmentView.currentLinksIdentifiers()();
                  swift_bridgeObjectRelease();
                  *((_BYTE *)v65 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) = 0;
                  v164 = (char *)v65 + direct field offset for PaperTextAttachmentView.paperBoundsHint;
                  *(_OWORD *)v164 = 0u;
                  *((_OWORD *)v164 + 1) = 0u;
                  v164[32] = (char)v146;
                  if (!AnyCanvas.isLiveEditing()()
                    && !*(_QWORD *)((char *)v65 + direct field offset for PaperTextAttachmentView.resizeInfo))
                  {
                    v165 = type metadata accessor for TaskPriority();
                    v166 = v206;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 56))(v206, 1, 1, v165);
                    type metadata accessor for MainActor();
                    v167 = v65;
                    v168 = static MainActor.shared.getter();
                    v169 = swift_allocObject();
                    v170 = MEMORY[0x1E0DF06E8];
                    *(_QWORD *)(v169 + 16) = v168;
                    *(_QWORD *)(v169 + 24) = v170;
                    *(_QWORD *)(v169 + 32) = v167;
                    *(_WORD *)(v169 + 40) = 1280;
                    v171 = (uint64_t)v166;
                    v155 = (uint64_t)v208;
                    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v171, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v169);
                    swift_release();
                  }
                  (*(void (**)(char *, uint64_t))(v211 + 8))(v226, v39);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v154, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v155, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
                  goto LABEL_76;
                }
                if (one-time initialization token for logger == -1)
                {
LABEL_69:
                  v159 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v159, (uint64_t)logger);
                  v160 = Logger.logObject.getter();
                  v161 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v160, v161))
                  {
                    v162 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v162 = 0;
                    _os_log_impl(&dword_1DDB0F000, v160, v161, "Found eraser stroke(s) in model during first merge", v162, 2u);
                    v163 = v162;
                    v155 = (uint64_t)v208;
                    MEMORY[0x1DF0E6558](v163, -1, -1);
                  }

                  LOBYTE(v233) = 3;
                  PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v233);
                  goto LABEL_72;
                }
LABEL_95:
                swift_once();
                goto LABEL_69;
              }
LABEL_48:
              LODWORD(v228) = 0;
              goto LABEL_49;
            }
            v136 = &v236;
LABEL_47:
            *((_DWORD *)v136 - 64) = 0;
            goto LABEL_48;
          }
          v124 = &v236;
        }
        else
        {
          LODWORD(v229) = 0;
          v124 = &v238;
        }
        *((_DWORD *)v124 - 64) = 0;
        v136 = &v237;
        goto LABEL_47;
      }
    }
    else
    {
      v88 = v209;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v84, v209, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if (v86(v85, 1, v81) != 1)
      {
        v89 = v220;
        (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v220, v85, v81);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
        v90 = dispatch thunk of static Equatable.== infix(_:_:)();
        v91 = *(void (**)(char *, uint64_t))(v72 + 8);
        v91(v89, v81);
        outlined destroy of StocksKitCurrencyCache.Provider?(v231, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v91((char *)v88, v81);
        outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v65 = v225;
        if ((v90 & 1) == 0)
          goto LABEL_21;
        goto LABEL_20;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v88, v81);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v84, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
    v65 = v225;
    goto LABEL_21;
  }
  v65 = v225;
  v66 = *(void **)((char *)v225 + direct field offset for Canvas.paperView);
  v67 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v68 = v66;
  v69 = Capsule.merge<A>(_:)();
  v70 = (void *)swift_endAccess();
  if ((v69 & 1) != 0
    || (v70 = (void *)MEMORY[0x1DF0E666C]((char *)v68 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(void *))((*v67 & *v68) + 0x488))(v70);
  }
  else
  {

  }
LABEL_76:
  v239.origin.x = PaperTextAttachmentView.safePaperModelBounds.getter();
  x = v239.origin.x;
  y = v239.origin.y;
  width = v239.size.width;
  height = v239.size.height;
  v176 = CGRectGetHeight(v239);
  if (one-time initialization token for maxTextAttachmentHeightForCheckingInvalidBounds != -1)
    swift_once();
  if (v176 >= *(double *)&static UIConstants.maxTextAttachmentHeightForCheckingInvalidBounds)
  {
    objc_msgSend(v65, sel_frame);
    v190 = v189;
    v192 = v191;
    v194 = v193;
    v196 = v195;
    v197 = objc_msgSend(v65, sel_frame);
    v199 = v198;
    v200 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v65) + 0x1150))(v197);
    if (!v200)
      v200 = (UIView_optional *)objc_msgSend(v65, sel_superview);
    v201 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v200);

    v241.origin.x = 0.0;
    v241.origin.y = v199;
    v241.size.width = v201.width;
    v241.size.height = v201.height;
    v243.origin.x = v190;
    v243.origin.y = v192;
    v243.size.width = v194;
    v243.size.height = v196;
    v202 = CGRectEqualToRect(v241, v243);
    v182 = v227;
    v242.origin.x = 0.0;
    v242.origin.y = v199;
    v242.size.width = v201.width;
    v242.size.height = v201.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v242, v227 & 1, !v202, 1);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v177 = type metadata accessor for Logger();
    __swift_project_value_buffer(v177, (uint64_t)logger);
    v178 = Logger.logObject.getter();
    v179 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v178, v179))
    {
      v180 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v180 = 134217984;
      v240.origin.x = x;
      v240.origin.y = y;
      v240.size.width = width;
      v240.size.height = height;
      v233 = CGRectGetHeight(v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v178, v179, "Fixing up text attachment bounds from: %f", v180, 0xCu);
      MEMORY[0x1DF0E6558](v180, -1, -1);
    }

    v181 = AnyCanvas.isLiveEditing()();
    v182 = v227;
    if (!v181 && !*(_QWORD *)((char *)v65 + direct field offset for PaperTextAttachmentView.resizeInfo))
    {
      v183 = type metadata accessor for TaskPriority();
      v184 = (uint64_t)v206;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56))(v206, 1, 1, v183);
      type metadata accessor for MainActor();
      v185 = v65;
      v186 = static MainActor.shared.getter();
      v187 = swift_allocObject();
      v188 = MEMORY[0x1E0DF06E8];
      *(_QWORD *)(v187 + 16) = v186;
      *(_QWORD *)(v187 + 24) = v188;
      *(_QWORD *)(v187 + 32) = v185;
      v182 = v227;
      *(_WORD *)(v187 + 40) = 768;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v184, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v187);
      swift_release();
    }
  }
  if ((v182 & 1) == 0)
    specialized Canvas.startCheckingForOldEraserStrokes()();
}

uint64_t specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _UNKNOWN **v51;

  v47 = a2;
  v42 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v45 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v43 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Paper();
  v50 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v51 = &protocol witness table for Paper;
  swift_getKeyPath();
  v46 = v2;
  v25 = v48;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Ref.subscript.getter();
    specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(v25, (uint64_t)v8);
    v31 = v43;
    v30 = v44;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v8, 1, v44) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Date?);
      outlined destroy of PKStrokeProperties((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v29 = v45;
      v28 = v46;
    }
    else
    {
      v32 = v41;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v41, v8, v30);
      v33 = v42;
      v34 = static Date.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
      outlined destroy of PKStrokeProperties((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v29 = v45;
      v28 = v46;
      if ((v34 & 1) != 0)
      {
        v35 = v40;
        v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16))(v40, v48, v46);
        MEMORY[0x1E0C80A78](v36, v37);
        *(&v39 - 2) = v33;
        Capsule.callAsFunction<A>(_:)();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
        v27 = v47;
        (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v47, v35, v28);
        v26 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
      }
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    v26 = 1;
    v27 = v47;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v26 = 1;
  v28 = v46;
  v27 = v47;
  v29 = v45;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, v26, 1, v28);
}

uint64_t closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_OWORD *, _QWORD);
  _QWORD v25[2];
  uint64_t v26;
  _OWORD v27[2];

  v25[1] = a1;
  v26 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v25 - v16;
  v18 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v27[0] = *MEMORY[0x1E0C9D628];
  v27[1] = v18;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  swift_retain();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  CROrderedSet.init()();
  *(_QWORD *)&v9[*(int *)(v6 + 24)] = MEMORY[0x1E0DEE9E0];
  v19 = v26 + direct field offset for PaperTextAttachmentView.paperDrawingKeyPath;
  swift_beginAccess();
  v20 = type metadata accessor for CRKeyPath();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v5, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v5, 0, 1, v20);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Ref.init<A>(_:_:identity:)();
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v17, 0, 1, v22);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v23 = (uint64_t (*)(_OWORD *, _QWORD))Capsule.Ref<>.root.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v23(v27, 0);
}

void PaperTextAttachmentView.createPaperView(paperBundleURL:)(void (*a1)(char *, char *, uint64_t))
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  id v56;
  char *v57;
  char *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  _QWORD v90[2];
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  uint64_t v102;
  char v103;
  ValueMetadata *v104;
  unint64_t v105;

  v2 = v1;
  v95 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop>);
  v93 = *(_QWORD *)(v7 - 8);
  v94 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v92 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v90[0] = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for URL();
  v98 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v17);
  v91 = (char *)v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90[1] = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v97 = (char *)v90 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD **)&v1[direct field offset for Canvas.paperView];
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v29 = (char *)v27 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v27) + 0x380);
  swift_beginAccess();
  v99 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v29, v22);
  swift_beginAccess();
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v30 = v27;
  LOBYTE(v23) = Capsule.merge<A>(_:)();
  v31 = swift_endAccess();
  if ((v23 & 1) != 0
    || (v31 = MEMORY[0x1DF0E666C]((char *)v30 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(uint64_t))((*v28 & *v30) + 0x488))(v31);
  }
  else
  {
    v32 = (_QWORD *)v31;

    v30 = v32;
  }

  (*(void (**)(char *, uint64_t))(v99 + 8))(v26, v22);
  objc_msgSend(v2, sel_addSubview_, *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView]);
  objc_msgSend(v2, sel_bounds);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v41 = objc_allocWithZone((Class)type metadata accessor for CanvasElementResizeView());
  v42 = v2;
  v43 = CanvasElementResizeView.init(frame:canvas:)(v42, v34, v36, v38, v40);
  v44 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v45 = *(void **)&v42[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  *(_QWORD *)&v42[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = v43;

  v46 = v96;
  if (!*(_QWORD *)&v42[v44])
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v42, sel_addSubview_);
  v104 = &type metadata for PencilAndPaperFeatureFlags;
  v105 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v102) = 1;
  v47 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v102);
  if ((v47 & 1) != 0)
  {
    objc_msgSend(v42, sel_bounds);
    v49 = v48;
    v51 = v50;
    v53 = v52;
    v55 = v54;
    v56 = objc_allocWithZone((Class)type metadata accessor for HandwritingReflowView());
    v57 = v42;
    v58 = HandwritingReflowView.init(frame:canvas:)((uint64_t)v57, v49, v51, v53, v55);
    objc_msgSend(v57, sel_addSubview_, v58);
    v59 = *(void **)&v57[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    *(_QWORD *)&v57[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = v58;

  }
  v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1250]), sel_initAtTop_delegate_, 0, v42);
  v61 = direct field offset for PaperTextAttachmentView.bottomResizeView;
  v62 = *(void **)&v42[direct field offset for PaperTextAttachmentView.bottomResizeView];
  *(_QWORD *)&v42[direct field offset for PaperTextAttachmentView.bottomResizeView] = v60;

  if (!*(_QWORD *)&v42[v61])
    goto LABEL_19;
  objc_msgSend(v42, sel_addSubview_);
  v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1250]), sel_initAtTop_delegate_, 1, v42);
  v64 = direct field offset for PaperTextAttachmentView.topResizeView;
  v65 = *(void **)&v42[direct field offset for PaperTextAttachmentView.topResizeView];
  *(_QWORD *)&v42[direct field offset for PaperTextAttachmentView.topResizeView] = v63;

  if (!*(_QWORD *)&v42[v64])
  {
LABEL_20:
    __break(1u);
    return;
  }
  objc_msgSend(v42, sel_addSubview_);
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v42, sel_isFirstResponder), 0, 0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v95, (uint64_t)v16, &demangling cache variable for type metadata for URL?);
  v66 = v98;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v16, 1, v46) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v95 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v67 = (uint64_t)v97;
    v95(v97, v16, v46);
    v68 = *(void **)&v42[OBJC_IVAR____TtC8PaperKit9AnyCanvas_context];
    v69 = v90[0];
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v99 + 56))(v90[0], 1, 1, v22);
    v70 = specialized static CRDataStoreBundle<>.paperBundle(_:sync:at:)(v68, v69, v67);
    outlined destroy of StocksKitCurrencyCache.Provider?(v69, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    v71 = swift_allocObject();
    *(_BYTE *)(v71 + 16) = 1;
    v99 = v70;
    v102 = CRDataStoreBundle.publisher.getter();
    v101 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    v72 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v6, 1, 1, v72);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Error>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Paper>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Error>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
    v73 = v92;
    Publisher.receive<A>(on:options:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

    swift_release();
    v74 = v91;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v91, v97, v46);
    v75 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    v76 = swift_allocObject();
    v77 = v46;
    v95((char *)(v76 + v75), v74, v46);
    v78 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v79 = swift_allocObject();
    *(_QWORD *)(v79 + 16) = v78;
    *(_QWORD *)(v79 + 24) = v71;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<Paper>, Error>, NSRunLoop>, MEMORY[0x1E0C95CB8]);
    swift_retain();
    v80 = v94;
    v81 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v73, v80);
    *(_QWORD *)&v42[direct field offset for PaperTextAttachmentView.syncCancellable] = v81;
    swift_release();
    v82 = *(void **)&v42[direct field offset for PaperTextAttachmentView.textAttachment];
    if (v82)
    {
      v100 = &unk_1F049E4E0;
      v83 = swift_dynamicCastObjCProtocolConditional();
      if (v83)
        v84 = v82;
    }
    else
    {
      v83 = 0;
    }
    swift_unknownObjectWeakInit();
    v103 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Canvas<Paper>.PaperViewCanvasPublisher>);
    v85 = swift_allocObject();
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v102, v85 + 16, &demangling cache variable for type metadata for Canvas<Paper>.PaperViewCanvasPublisher);
    v102 = v85;
    v86 = swift_allocObject();
    v87 = v99;
    *(_QWORD *)(v86 + 16) = v99;
    *(_QWORD *)(v86 + 24) = v83;
    swift_unknownObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Never>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<Paper>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<Paper>, Never>, MEMORY[0x1E0C95D90]);
    v88 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(_QWORD *)&v42[direct field offset for PaperTextAttachmentView.saveCancellable] = v88;
    swift_release();
    *(_QWORD *)&v42[direct field offset for PaperTextAttachmentView.syncManager] = v87;
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v77);
    swift_release();
  }
  v89 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v89, sel_addObserver_selector_name_object_, v42, sel_generationModelAvailabilityStatusDidChange_, *MEMORY[0x1E0CD12F8], 0);

}

void closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v11 = v9;
  v12 = v9;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v23 = v16;
    *(_DWORD *)v15 = 136315394;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    *(_WORD *)(v15 + 12) = 2080;
    v22 = (uint64_t)v9;
    v19 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Subscribers.Completion<Error>);
    v20 = String.init<A>(describing:)();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v13, v14, "Failed to load attachment file: %s. Error: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v16, -1, -1);
    MEMORY[0x1DF0E6558](v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  }
}

uint64_t closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  void *v7;

  v5 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v5);
  if (result)
  {
    v7 = (void *)result;
    swift_beginAccess();
    PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(a1, *(unsigned __int8 *)(a3 + 16));

    result = swift_beginAccess();
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

uint64_t closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  CRDataStoreBundle.sync(_:finished:)();
  return swift_release_n();
}

void *closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(uint64_t a1)
{
  uint64_t v1;
  void *result;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  result = (void *)MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = result;
    if ((objc_msgSend(result, sel_respondsToSelector_, sel__paperDidChangeLocally) & 1) != 0)
      objc_msgSend(v3, sel__paperDidChangeLocally);
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.cleanupViewProviders()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))(v9);
  if (v12)
  {
    v13 = (void *)v12;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v14 = static OS_dispatch_queue.main.getter();
    v21 = v2;
    v15 = (void *)v14;
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v13;
    aBlock[4] = partial apply for closure #1 in PaperTextAttachmentView.cleanupViewProviders();
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_76;
    v17 = _Block_copy(aBlock);
    v20 = v6;
    v18 = v17;
    v19 = v13;
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1DF0E48C0](0, v11, v5, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v1);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v20);
  }
}

void @objc PaperTextAttachmentView.willMove(toSuperview:)(void *a1, uint64_t a2, void *a3)
{
  char *v4;
  id v5;
  void *v6;
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  v4 = (char *)v7.receiver;
  v5 = a3;
  objc_msgSendSuper2(&v7, sel_willMoveToSuperview_, v5);
  if (*(_QWORD *)&v4[direct field offset for PaperTextAttachmentView.textAttachment])
  {
    v6 = (void *)swift_dynamicCastObjCProtocolConditional();
    if (v6)
      objc_msgSend(v6, sel_attachmentView_willMoveToSuperview_, v4, v5);
  }

}

Swift::Void __swiftcall PaperTextAttachmentView.didMoveToSuperview()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  _QWORD *v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  id v19;
  double v20;
  CGFloat v21;
  UIView_optional *v22;
  CGSize v23;
  BOOL v24;
  objc_class *v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  _QWORD *v45;
  unsigned __int8 v46;
  void *v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  Class isa;
  objc_class *v58;
  char v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  UITextView_optional *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD aBlock[7];
  objc_super v69;
  CGRect v70;
  __C::CGRect v71;
  CGRect v72;

  v1 = v0;
  v2 = type metadata accessor for PKInk();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v0, sel_superview, v5);

  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v8)
  {
    v10 = (void *)PaperTextAttachmentView.closestViewController.getter();
    swift_unknownObjectWeakAssign();

    objc_msgSend(v1, sel_frame);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = objc_msgSend(v1, sel_frame);
    v21 = v20;
    v22 = (UIView_optional *)(*(uint64_t (**)(id))((*v9 & *v1) + 0x1150))(v19);
    if (!v22)
      v22 = (UIView_optional *)objc_msgSend(v1, sel_superview);
    v23 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v22);

    v70.origin.x = 0.0;
    v70.origin.y = v21;
    v70.size.width = v23.width;
    v70.size.height = v23.height;
    v72.origin.x = v12;
    v72.origin.y = v14;
    v72.size.width = v16;
    v72.size.height = v18;
    v24 = CGRectEqualToRect(v70, v72);
    v71.origin.x = 0.0;
    v71.origin.y = v21;
    v71.size.width = v23.width;
    v71.size.height = v23.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v71, 0, !v24, 1);
  }
  v25 = (objc_class *)type metadata accessor for PaperTextAttachmentView();
  v69.receiver = v1;
  v69.super_class = v25;
  objc_msgSendSuper2(&v69, sel_didMoveToSuperview);
  v26 = objc_msgSend(v1, sel_superview);

  if (v26
    && (v27 = direct field offset for PaperTextAttachmentView.linedPaperView,
        !*(_QWORD *)((char *)v1 + direct field offset for PaperTextAttachmentView.linedPaperView)))
  {
    objc_msgSend(v1, sel_bounds);
    v36 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for LinedPaperView()), sel_initWithFrame_, v32, v33, v34, v35);
    v37 = *(void **)((char *)v1 + v27);
    *(_QWORD *)((char *)v1 + v27) = v36;

    v38 = *(void **)((char *)v1 + v27);
    if (!v38
      || (objc_msgSend(v38, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0),
          (v39 = *(_QWORD *)((char *)v1 + v27)) == 0))
    {
      __break(1u);
      goto LABEL_29;
    }
    objc_msgSend(v1, sel_insertSubview_atIndex_, v39, 0);
  }
  else
  {
    v28 = objc_msgSend(v1, sel_superview);

    if (!v28)
    {
      v29 = direct field offset for PaperTextAttachmentView.linedPaperView;
      v30 = *(void **)((char *)v1 + direct field offset for PaperTextAttachmentView.linedPaperView);
      if (v30)
      {
        objc_msgSend(v30, sel_removeFromSuperview);
        v31 = *(void **)((char *)v1 + v29);
      }
      else
      {
        v31 = 0;
      }
      *(_QWORD *)((char *)v1 + v29) = 0;

    }
  }
  v40 = direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder;
  if (*((_BYTE *)v1 + direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder) == 1)
  {
    v41 = objc_msgSend(v1, sel_superview);

    if (v41)
    {
      *((_BYTE *)v1 + v40) = 0;
      v42 = objc_msgSend(v1, sel_window);

      v66 = v3;
      v67 = v2;
      if (!v42)
        goto LABEL_21;
      v43 = objc_msgSend(v1, sel_window);
      if (v43)
      {
        v44 = v43;
        v42 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v43);

        if (v42)
        {
          v45 = v9;
          v46 = objc_msgSend(v42, sel_isVisible);
          goto LABEL_22;
        }
LABEL_21:
        v45 = v9;
        v46 = 0;
LABEL_22:
        v47 = (void *)objc_opt_self();
        v48 = objc_msgSend(v1, sel_window);
        v49 = swift_allocObject();
        *(_QWORD *)(v49 + 16) = v1;
        *(_QWORD *)(v49 + 24) = v42;
        *(_BYTE *)(v49 + 32) = v46;
        aBlock[4] = partial apply for closure #1 in PaperTextAttachmentView.didMoveToSuperview();
        aBlock[5] = v49;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        aBlock[3] = &block_descriptor_134;
        v50 = _Block_copy(aBlock);
        v51 = v42;
        v52 = v1;
        swift_release();
        objc_msgSend(v47, sel__performWithVisibilityUpdatesEnabled_window_block_, 0, v48, v50);
        _Block_release(v50);

        v9 = v45;
        v54 = v66;
        v53 = v67;
        if (v42)
        {
          v55 = v51;
          v56 = objc_msgSend(v55, sel_selectedToolItem);
          PKToolPickerItem.ink.getter((uint64_t)v7);

          isa = PKInk._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v54 + 8))(v7, v53);
          v58 = isa;
          v59 = -[objc_class _isGenerationTool](v58, "_isGenerationTool");

          *((_BYTE *)v52 + direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool) = v59;
          objc_msgSend(v55, sel_addObserver_, v52);

        }
        goto LABEL_24;
      }
LABEL_29:
      __break(1u);
      return;
    }
  }
LABEL_24:
  v60 = *(void **)((char *)v1 + direct field offset for PaperTextAttachmentView.textAttachment);
  if (v60)
  {
    aBlock[6] = &unk_1F049E5A0;
    v61 = swift_dynamicCastObjCProtocolConditional();
    if (v61)
    {
      v62 = (void *)v61;
      v63 = v60;
      v64 = objc_msgSend(v1, sel_superview);
      objc_msgSend(v62, sel_attachmentView_didMoveToSuperview_, v1, v64);

    }
  }
  specialized Canvas.insertCanvasGenerationToolOverlayIfNeeded()();
  PaperTextAttachmentView.cleanupViewProviders()();
  v65 = (UITextView_optional *)(*(uint64_t (**)(void))((*v9 & *v1) + 0x1150))();
  PaperTextAttachmentView.observeTextView(_:)(v65);

}

void @objc PaperTextAttachmentView.didMoveToSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  PaperTextAttachmentView.didMoveToSuperview()();

}

Swift::Void __swiftcall PaperTextAttachmentView.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(CGPoint location, Swift::Bool fromPencilKit, Swift::Bool allowShowingEditMenu)
{
  void *v3;

  specialized Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(fromPencilKit, allowShowingEditMenu, location.x, location.y);
  if ((objc_msgSend(v3, sel_isFirstResponder) & 1) == 0)
    objc_msgSend(v3, sel_becomeFirstResponder);
}

id PaperTextAttachmentView.tapCanvasElement(_:modifierFlags:)(NSObject *a1, uint64_t a2, char a3)
{
  void *v3;
  id result;

  specialized Canvas.tapCanvasElement(_:modifierFlags:)(a1, a2, a3 & 1);
  result = objc_msgSend(v3, sel_isFirstResponder);
  if ((result & 1) == 0)
    return objc_msgSend(v3, sel_becomeFirstResponder);
  return result;
}

Swift::Bool __swiftcall PaperTextAttachmentView.hit(byTouchLocation:canvasBounds:)(CGPoint byTouchLocation, __C::CGRect canvasBounds)
{
  _QWORD *v2;
  CGFloat y;
  CGFloat x;
  CGFloat v5;
  double v6;
  CGFloat width;
  double height;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  Swift::Bool result;
  uint64_t v22;
  char v23;
  char v24;
  void *v25;
  Class v26;
  UIEvent_optional v27;
  UIView_optional *v28;
  unsigned __int8 v29;
  UIEvent_optional v30;
  UIView_optional *v31;
  Class isa;
  objc_class *v33;
  _QWORD v34[6];
  uint64_t v35;
  char v36;
  CGPoint v37;
  CGRect v38;
  CGRect v39;

  y = byTouchLocation.y;
  x = byTouchLocation.x;
  v38 = CGRectInset((CGRect)canvasBounds, -64.0, 0.0);
  v5 = v38.origin.x;
  v6 = v38.origin.y;
  width = v38.size.width;
  height = v38.size.height;
  v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1150))();
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, sel_textStorage);

    if (v11)
    {
      v12 = *(void **)((char *)v2 + direct field offset for PaperTextAttachmentView.textAttachment);
      if (v12)
      {
        v35 = 0;
        v36 = 1;
        v13 = *MEMORY[0x1E0DC10F8];
        v14 = v12;
        v15 = objc_msgSend(v11, sel_length);
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = v14;
        *(_QWORD *)(v16 + 24) = &v35;
        v17 = swift_allocObject();
        *(_QWORD *)(v17 + 16) = partial apply for closure #1 in PaperTextAttachmentView.characterIndex.getter;
        *(_QWORD *)(v17 + 24) = v16;
        v34[4] = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v34[5] = v17;
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 1107296256;
        v34[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        v34[3] = &block_descriptor_39;
        v18 = _Block_copy(v34);
        v19 = v14;
        swift_retain();
        swift_release();
        objc_msgSend(v11, sel_enumerateAttribute_inRange_options_usingBlock_, v13, 0, v15, 0, v18);

        _Block_release(v18);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        result = swift_release();
        if ((isEscapingClosureAtFileLocation & 1) != 0)
        {
          __break(1u);
          goto LABEL_21;
        }
        v22 = v35;
        v23 = v36;
        swift_release();
        if ((v23 & 1) == 0 && !v22)
        {
          v6 = v6 + -16.0;
          height = height + 16.0;
        }
      }
      else
      {

      }
    }
  }
  v39.origin.x = v5;
  v39.origin.y = v6;
  v39.size.width = width;
  v39.size.height = height;
  v37.x = x;
  v37.y = y;
  result = CGRectContainsPoint(v39, v37);
  if (result)
    return 1;
  v25 = *(void **)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v25)
  {
    v26 = v25;
    v29 = -[objc_class isHidden](v26, sel_isHidden);
    if ((v29 & 1) == 0)
    {
      v27.value.super.isa = 0;
      CanvasElementResizeView.hitTestMiniMenu(_:with:)(v28, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v27);
      if (v30.value.super.isa)
      {
        isa = v30.value.super.isa;

      }
      else
      {
        ResizeView.hitTestChrome(_:with:)(v31, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v30);
        isa = v33;

        if (!isa)
          return 0;
      }
      v26 = isa;
    }
    v24 = v29 ^ 1;

    return v24;
  }
LABEL_21:
  __break(1u);
  return result;
}

__C::CGRect __swiftcall PaperTextAttachmentView.sensibleBounds(for:)(__C::CGRect a1)
{
  void *v1;
  double height;
  double width;
  double y;
  double x;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGRect v12;
  __C::CGRect result;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  if (CGRectIsNull((CGRect)a1) || !CGRect.isFinite.getter(x, y, width, height))
  {
    height = 0.0;
    if (objc_msgSend((id)objc_opt_self(), sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v1, sel_semanticContentAttribute)))
    {
      x = *MEMORY[0x1E0CD1338];
    }
    else
    {
      x = 0.0;
    }
    width = 0.0;
    y = 0.0;
  }
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  v6 = CGRectGetHeight(v12);
  if (one-time initialization token for minimumTextAttachmentHeight != -1)
    swift_once();
  v7 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
  if (v6 > *(double *)&static UIConstants.minimumTextAttachmentHeight)
    v7 = v6;
  v8 = v7 + 64.0;
  v9 = x;
  v10 = y;
  v11 = width;
  result.size.height = v8;
  result.size.width = v11;
  result.origin.y = v10;
  result.origin.x = v9;
  return result;
}

uint64_t PaperTextAttachmentView.contentBounds(includeDrawing:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 72) = v1;
  *(_BYTE *)(v2 + 160) = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(_QWORD *)(v2 + 80) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 88) = v4;
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v2 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v2 + 112) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v2 + 120) = static MainActor.shared.getter();
  *(_QWORD *)(v2 + 128) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v2 + 136) = v5;
  return swift_task_switch();
}

uint64_t PaperTextAttachmentView.contentBounds(includeDrawing:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  CGFloat *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double x;
  double y;
  double width;
  double height;
  __C::CGRect v23;
  __C::CGRect v24;

  v1 = *(unsigned __int8 *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 72);
  if (v1 == 1
    && (v3 = (CGFloat *)(v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint),
        (*(_BYTE *)(v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint + 32) & 1) == 0))
  {
    v16 = v3[2];
    v15 = v3[3];
    v18 = *v3;
    v17 = v3[1];
    swift_release();
    v23.origin.x = v18;
    v23.origin.y = v17;
    v23.size.width = v16;
    v23.size.height = v15;
    v24 = PaperTextAttachmentView.sensibleBounds(for:)(v23);
    x = v24.origin.x;
    y = v24.origin.y;
    width = v24.size.width;
    height = v24.size.height;
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(double, double, double, double))(v0 + 8))(x, y, width, height);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    static TaskPriority.userInitiated.getter();
    v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
    v10 = *(_QWORD *)(v2 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v2 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v10, v8);
    v11 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v11, v5, v8);
    *(_BYTE *)(v12 + v11 + v7) = v1;
    *(_QWORD *)(v0 + 144) = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSo6CGRectV_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:), v12);
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v13;
    type metadata accessor for CGRect(0);
    *v13 = v0;
    v13[1] = PaperTextAttachmentView.contentBounds(includeDrawing:);
    return Task<>.value.getter();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  double x;
  double y;
  double width;
  double height;
  __C::CGRect v6;

  swift_release();
  v6 = PaperTextAttachmentView.sensibleBounds(for:)(*(__C::CGRect *)(v0 + 16));
  x = v6.origin.x;
  y = v6.origin.y;
  width = v6.size.width;
  height = v6.size.height;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(double, double, double, double))(v0 + 8))(x, y, width, height);
}

uint64_t closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 32) = a5;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  *(double *)v1 = Capsule<>.contentBounds(includeDrawing:)(*(unsigned __int8 *)(v0 + 32));
  *(_QWORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *PaperTextAttachmentView.currentLinksIdentifiers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  void *v29;
  id v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *result;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v40 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v36 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v37 = (char *)&v36 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(v0 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v21, v16);
  v22 = Capsule<>.links.getter();
  v23 = v16;
  v24 = v22;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v23);
  v38 = v24;
  if (!(v24 >> 62))
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_3;
LABEL_17:
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_18:
    swift_bridgeObjectRelease_n();
    v41 = v27;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&v41);
    swift_bridgeObjectRelease();
    return v41;
  }
  swift_bridgeObjectRetain();
  v24 = v38;
  v25 = _CocoaArrayWrapper.endIndex.getter();
  if (!v25)
    goto LABEL_17;
LABEL_3:
  if (v25 >= 1)
  {
    v26 = 0;
    v39 = v24 & 0xC000000000000001;
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (v39)
        v28 = (id)MEMORY[0x1DF0E4D64](v26, v24);
      else
        v28 = *(id *)(v24 + 8 * v26 + 32);
      v29 = v28;
      v30 = objc_msgSend(v28, sel_itemIdentifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v31 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v31(v4, v12, v5);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        v32 = v37;
        v31(v37, v4, v5);
        v31(v40, v32, v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, (unint64_t)v27);
        v34 = v27[2];
        v33 = v27[3];
        if (v34 >= v33 >> 1)
          v27 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, (unint64_t)v27);
        v27[2] = v34 + 1;
        v31((char *)v27+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v34, v40, v5);
        v24 = v38;
      }
      ++v26;
    }
    while (v25 != v26);
    goto LABEL_18;
  }
  __break(1u);
  result = (_QWORD *)swift_release();
  __break(1u);
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.beginLiveResize()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v8)
  {
    objc_msgSend(v8, sel_setHidden_, 1, v5);
    v9 = direct field offset for PaperTextAttachmentView.resizeInfo;
    if (!*(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.resizeInfo])
    {
      type metadata accessor for ResizeInfo();
      v10 = swift_allocObject();
      *(_BYTE *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      v11 = *MEMORY[0x1E0C9D628];
      v12 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
      v13 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
      v14 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
      *(_QWORD *)(v10 + 32) = *MEMORY[0x1E0C9D628];
      *(_QWORD *)(v10 + 40) = v12;
      *(_QWORD *)(v10 + 48) = v13;
      *(_QWORD *)(v10 + 56) = v14;
      *(_QWORD *)(v10 + 64) = v11;
      *(_QWORD *)(v10 + 72) = v12;
      *(_QWORD *)(v10 + 80) = v13;
      *(_QWORD *)(v10 + 88) = v14;
      *(_QWORD *)(v10 + 96) = v11;
      *(_QWORD *)(v10 + 104) = v12;
      *(_QWORD *)(v10 + 112) = v13;
      *(_QWORD *)(v10 + 120) = v14;
      *(_QWORD *)&v0[v9] = v10;
      if (v10)
      {
        v15 = v10;
        swift_retain();
        *(double *)(v15 + 32) = PaperTextAttachmentView.safePaperModelBounds.getter();
        *(_QWORD *)(v15 + 40) = v16;
        *(_QWORD *)(v15 + 48) = v17;
        *(_QWORD *)(v15 + 56) = v18;
        swift_release();
        v19 = *(double **)&v0[v9];
        if (v19)
        {
          v20 = *(_QWORD *)&v0[direct field offset for Canvas.paperView]
              + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v0[direct field offset for Canvas.paperView]) + 0x380);
          swift_beginAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, v20, v2);
          swift_retain();
          v21 = Capsule<>.contentBounds(includeDrawing:)(1);
          v23 = v22;
          v25 = v24;
          v27 = v26;
          (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
          v19[8] = v21;
          *((_QWORD *)v19 + 9) = v23;
          *((_QWORD *)v19 + 10) = v25;
          *((_QWORD *)v19 + 11) = v27;
          swift_release();
          v28 = *(_QWORD **)&v1[v9];
          if (v28)
          {
            swift_retain();
            objc_msgSend(v1, sel_frame);
            v28[12] = v29;
            v28[13] = v30;
            v28[14] = v31;
            v28[15] = v32;
            swift_release();
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void PaperTextAttachmentView.liveResize(yDistance:)(double a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  id v35;
  double v36;
  CGFloat v37;
  UIView_optional *v38;
  CGSize v39;
  BOOL v40;
  uint64_t v41;
  CGRect v42;
  __C::CGRect v43;
  CGRect v44;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v9)
  {
    swift_retain();
    v10 = PaperTextAttachmentView.safePaperModelBounds.getter();
    v12 = v11;
    v14 = v13;
    v16 = v15 + a1;
    if (one-time initialization token for minimumTextAttachmentHeight != -1)
      swift_once();
    v17 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
    if (v16 > *(double *)&static UIConstants.minimumTextAttachmentHeight)
      v17 = v16;
    *(double *)(v9 + 32) = v10;
    *(_QWORD *)(v9 + 40) = v12;
    *(_QWORD *)(v9 + 48) = v14;
    *(double *)(v9 + 56) = v17;
    v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = *(_QWORD *)((char *)v1 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v1 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v19, v4);
    v20 = Capsule<>.contentBounds(includeDrawing:)(1);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    *(double *)(v9 + 64) = v20;
    *(_QWORD *)(v9 + 72) = v22;
    *(_QWORD *)(v9 + 80) = v24;
    *(_QWORD *)(v9 + 88) = v26;
    objc_msgSend(v2, sel_frame);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v35 = objc_msgSend(v2, sel_frame);
    v37 = v36;
    v38 = (UIView_optional *)(*(uint64_t (**)(id))((*v18 & *v2) + 0x1150))(v35);
    if (!v38)
      v38 = (UIView_optional *)objc_msgSend(v2, sel_superview);
    v39 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v38);

    v42.origin.x = 0.0;
    v42.origin.y = v37;
    v42.size.width = v39.width;
    v42.size.height = v39.height;
    v44.origin.x = v28;
    v44.origin.y = v30;
    v44.size.width = v32;
    v44.size.height = v34;
    v40 = CGRectEqualToRect(v42, v44);
    v43.origin.x = 0.0;
    v43.origin.y = v37;
    v43.size.width = v39.width;
    v43.size.height = v39.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v43, 1, !v40, 1);
    swift_release();
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.endLiveResize(discard:)(Swift::Bool discard)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  double v17;
  CGFloat v18;
  UIView_optional *v19;
  CGSize v20;
  BOOL v21;
  _QWORD *v22;
  CGRect v23;
  __C::CGRect v24;
  CGRect v25;

  v3 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v4 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v4, sel_setNeedsLayout);
  v5 = *(void **)((char *)v1 + v3);
  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  objc_msgSend(v5, sel_setHidden_, 0);
  v6 = direct field offset for PaperTextAttachmentView.resizeInfo;
  v7 = *(_QWORD *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v7)
  {
    if (discard)
    {
      *(_QWORD *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo) = 0;
      objc_msgSend(v1, sel_frame);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v16 = objc_msgSend(v1, sel_frame);
      v18 = v17;
      v19 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1150))(v16);
      if (!v19)
        v19 = (UIView_optional *)objc_msgSend(v1, sel_superview);
      v20 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v19);

      v23.origin.x = 0.0;
      v23.origin.y = v18;
      v23.size.width = v20.width;
      v23.size.height = v20.height;
      v25.origin.x = v9;
      v25.origin.y = v11;
      v25.size.width = v13;
      v25.size.height = v15;
      v21 = CGRectEqualToRect(v23, v25);
      v24.origin.x = 0.0;
      v24.origin.y = v18;
      v24.size.width = v20.width;
      v24.size.height = v20.height;
      PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v24, 1, !v21, 1);
    }
    else
    {
      v22 = v1;
      swift_retain();
      specialized Canvas.undoable(newChange:persistSelection:action:)(0, 0, v22, (uint64_t)v22, v7);

      *(_QWORD *)((char *)v1 + v6) = 0;
      swift_release();
    }
    swift_release();
  }
}

uint64_t closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)();
}

{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v6 + 169) = a6;
  *(_BYTE *)(v6 + 168) = a5;
  *(_QWORD *)(v6 + 96) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 104) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 112) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 120) = v7;
  return swift_task_switch();
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  uint64_t v0;
  char v1;
  char v2;
  _QWORD *v3;

  if ((*(_BYTE *)(v0 + 168) & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    PaperTextAttachmentView.isAtEndOfDocument.getter();
    v1 = v2;
  }
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v3;
  *v3 = v0;
  v3[1] = closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:);
  return PaperTextAttachmentView.contentBounds(includeDrawing:)(v1 & 1);
}

{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  double MaxY;
  void *v8;
  id v9;
  double v10;
  double v11;
  int v12;
  char *v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat v18;
  double v19;
  double v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  id v41;
  double v42;
  CGFloat v43;
  UIView_optional *v44;
  CGSize v45;
  BOOL v46;
  char v47;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  __C::CGRect v54;
  CGRect v55;

  v1 = (id *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(double *)(v0 + 152);
  v3 = *(double *)(v0 + 160);
  v6 = *(double *)(v0 + 136);
  v5 = *(double *)(v0 + 144);
  swift_release();
  v50.origin.x = v6;
  v50.origin.y = v5;
  v50.size.width = v4;
  v50.size.height = v3;
  MaxY = CGRectGetMaxY(v50);
  v8 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v8)
  {
    v9 = v8;
    if ((HandwritingReflowView.showRectangularSelection.getter() & 1) != 0)
    {
      HandwritingReflowView.rectangularSelectionTransformCoordinateSpace.getter(v0 + 16);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v49, 0.0);
      v10 = CGRectGetMaxY(v49);

      if (MaxY <= v10)
        MaxY = v10;
    }
    else
    {

    }
  }
  v51.origin.x = PaperTextAttachmentView.safePaperModelBounds.getter();
  v11 = CGRectGetMaxY(v51);
  if (v11 + 1.0 < MaxY
    || (PaperTextAttachmentView.isAtEndOfDocument.getter(), (v47 & 1) != 0) && vabdd_f64(MaxY, v11) > 1.0)
  {
    v12 = *(unsigned __int8 *)(v0 + 169);
    v13 = *(char **)(v0 + 96);
    objc_msgSend(v13, sel_bounds);
    v15 = v14;
    objc_msgSend(v13, sel_bounds);
    v17 = v16;
    v18 = *MEMORY[0x1E0CD1338];
    objc_msgSend(v13, sel_bounds);
    v20 = MaxY - v19;
    v21 = swift_task_alloc();
    *(CGFloat *)(v21 + 16) = v15;
    *(CGFloat *)(v21 + 24) = v17;
    *(CGFloat *)(v21 + 32) = v18;
    *(double *)(v21 + 40) = v20;
    v22 = *(void **)&v13[direct field offset for Canvas.paperView];
    v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    swift_beginAccess();
    v24 = v22;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.callAsFunction<A>(_:)();
    swift_task_dealloc();
    swift_endAccess();

    if (v12 != 5)
    {
      LOBYTE(v49.origin.x) = *(_BYTE *)(v0 + 169);
      PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v49);
    }
    if (one-time initialization token for logger != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)logger);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      *(_QWORD *)&v49.origin.x = v29;
      *(_DWORD *)v28 = 136315138;
      v52.origin.x = v15;
      v52.origin.y = v17;
      v52.size.width = v18;
      v52.size.height = v20;
      CGRectGetHeight(v52);
      v30 = Double.description.getter();
      *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v49);
      v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v26, v27, "Updated content height to: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v29, -1, -1);
      MEMORY[0x1DF0E6558](v28, -1, -1);
    }

    v32 = *v1;
    objc_msgSend(*v1, sel_frame);
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v41 = objc_msgSend(v32, sel_frame);
    v43 = v42;
    v44 = (UIView_optional *)(*(uint64_t (**)(id))((*v23 & *v32) + 0x1150))(v41);
    if (!v44)
      v44 = (UIView_optional *)objc_msgSend(*v1, sel_superview);
    v45 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v44);

    v53.origin.x = 0.0;
    v53.origin.y = v43;
    v53.size.width = v45.width;
    v53.size.height = v45.height;
    v55.origin.x = v34;
    v55.origin.y = v36;
    v55.size.width = v38;
    v55.size.height = v40;
    v46 = CGRectEqualToRect(v53, v55);
    v54.origin.x = 0.0;
    v54.origin.y = v43;
    v54.size.width = v45.width;
    v54.size.height = v45.height;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v54, 1, !v46, 1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(double a1, double a2, double a3, double a4)
{
  double **v4;
  double *v5;

  v5 = *v4;
  v5[17] = a1;
  v5[18] = a2;
  v5[19] = a3;
  v5[20] = a4;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  uint64_t (*v0)(_BYTE *, _QWORD);
  _BYTE v2[32];

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v0 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v0(v2, 0);
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeRootBoundsIfNecessary(alwaysIncludeDrawing:)(Swift::Bool alwaysIncludeDrawing)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!AnyCanvas.isLiveEditing()() && !*(_QWORD *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo])
  {
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    type metadata accessor for MainActor();
    v8 = v1;
    v9 = static MainActor.shared.getter();
    v10 = swift_allocObject();
    v11 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v11;
    *(_QWORD *)(v10 + 32) = v8;
    *(_BYTE *)(v10 + 40) = alwaysIncludeDrawing;
    *(_BYTE *)(v10 + 41) = 4;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)partial apply, v10);
    swift_release();
  }
}

double PaperTextAttachmentView.visibleBounds.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))();
  if (v1)
  {
    v2 = (void *)v1;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v0, sel_convertRect_toCoordinateSpace_, v2);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    PaperTextAttachmentView.isAtEndOfDocument.getter();
    if ((v11 & 1) != 0)
    {
      objc_msgSend(v2, sel_bounds);
      v10 = v10 + CGRectGetHeight(v25);
    }
    objc_msgSend(v2, sel_bounds);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;
    objc_msgSend(v2, sel_adjustedContentInset);
    v26.origin.x = UIEdgeInsetsInsetRect(v13, v15, v17, v19, v20, v21);
    v27.origin.x = v4;
    v27.origin.y = v6;
    v27.size.width = v8;
    v27.size.height = v10;
    *(_QWORD *)&v22 = (unint64_t)CGRectIntersection(v26, v27);

  }
  else
  {
    objc_msgSend(v0, sel_frame);
    return v23;
  }
  return v22;
}

Swift::Void __swiftcall PaperTextAttachmentView.forwardChanges(from:)(PaperKit::AnyCanvas::MergeSource from)
{
  _BYTE *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v2 = (unsigned __int8 *)from;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  v7 = v15;
  AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v15);
  if ((v7 - 3) <= 1)
  {
    v1[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
    v8 = &v1[direct field offset for PaperTextAttachmentView.paperBoundsHint];
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[32] = 1;
    if (!AnyCanvas.isLiveEditing()() && !*(_QWORD *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo])
    {
      v9 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
      type metadata accessor for MainActor();
      v10 = v1;
      v11 = static MainActor.shared.getter();
      v12 = swift_allocObject();
      v13 = MEMORY[0x1E0DF06E8];
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = v13;
      *(_QWORD *)(v12 + 32) = v10;
      *(_BYTE *)(v12 + 40) = 0;
      *(_BYTE *)(v12 + 41) = v7;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:), v12);
      swift_release();
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.mergeToCanvasElements()()
{
  _QWORD *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  id v9;
  double v10;
  CGFloat v11;
  UIView_optional *v12;
  CGSize v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  void *v20;
  CGRect v21;
  __C::CGRect v22;
  CGRect v23;

  specialized Canvas.mergeToCanvasElements()();
  objc_msgSend(v0, sel_frame);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = objc_msgSend(v0, sel_frame);
  v11 = v10;
  v12 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))(v9);
  if (!v12)
    v12 = (UIView_optional *)objc_msgSend(v0, sel_superview);
  v13 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v12);

  v21.origin.x = 0.0;
  v21.origin.y = v11;
  v21.size.width = v13.width;
  v21.size.height = v13.height;
  v23.origin.x = v2;
  v23.origin.y = v4;
  v23.size.width = v6;
  v23.size.height = v8;
  v14 = CGRectEqualToRect(v21, v23);
  v22.origin.x = 0.0;
  v22.origin.y = v11;
  v22.size.width = v13.width;
  v22.size.height = v13.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v22, 0, !v14, 1);
  v15 = PaperTextAttachmentView.currentLinksIdentifiers()();
  v16 = direct field offset for PaperTextAttachmentView.previousLinks;
  v17 = *(_QWORD *)((char *)v0 + direct field offset for PaperTextAttachmentView.previousLinks);
  swift_bridgeObjectRetain();
  v18 = specialized static Array<A>.== infix(_:_:)((uint64_t)v15, v17);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)((char *)v0 + v16) = v15;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment))
    {
      v19 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v19)
      {
        v20 = v19;
        if ((objc_msgSend(v19, sel_respondsToSelector_, sel__linkCanvasElementsDidChange) & 1) != 0)
          objc_msgSend(v20, sel__linkCanvasElementsDidChange);
      }
    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.layoutSubviews()()
{
  _QWORD *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  char v9;
  char v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  id v29;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  double v38;
  void *v39;
  double v40;
  double v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  void *v46;
  char *v47;
  id v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t (*v53)(void);
  id v54;
  uint64_t v55;
  id v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  objc_super v63;
  CGAffineTransform aBlock;
  __C::CGRect v65;

  objc_msgSend(v0, sel_bounds);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  PaperTextAttachmentView.isAtEndOfDocument.getter();
  v10 = v9;
  v63.receiver = v0;
  v63.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  v11 = objc_msgSendSuper2(&v63, sel_layoutSubviews);
  v59 = v2;
  v60 = v4;
  v61 = v6;
  v62 = v8;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((v10 & 1) == 0)
  {
    if (one-time initialization token for resizeHandleSize != -1)
      swift_once();
    v8 = fmax(v8 + *(double *)&static UIConstants.resizeHandleSize * -0.5, 1.0);
LABEL_11:
    v62 = v8;
    goto LABEL_12;
  }
  v13 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))(v11);
  if (v13)
  {
    v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v14)
      goto LABEL_43;
    v15 = (void *)v13;
    v16 = v14;
    v17 = swift_bridgeObjectRetain();
    v18 = specialized Sequence.compactMap<A>(_:)(v17, (uint64_t)v16);
    swift_bridgeObjectRelease();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v19)
    {

      goto LABEL_12;
    }
    objc_msgSend(v15, sel_bounds);
    v2 = v20;

    v8 = v8 + v2;
    goto LABEL_11;
  }
LABEL_12:
  v21 = *(_QWORD *)((char *)v0 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v21)
  {
    v22 = *(double *)(v21 + 24);
    v60 = v4 + v22;
    v62 = fmax(v8 - v22, 1.0);
  }
  v23 = objc_opt_self();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v0;
  *(_QWORD *)(v24 + 24) = &v59;
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = partial apply for closure #1 in PaperTextAttachmentView.layoutSubviews();
  v25[3] = v24;
  *(_QWORD *)&aBlock.tx = thunk for @callee_guaranteed () -> ()partial apply;
  *(_QWORD *)&aBlock.ty = v25;
  *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
  *(_QWORD *)&aBlock.b = 1107296256;
  *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed () -> ();
  *(_QWORD *)&aBlock.d = &block_descriptor_128;
  v26 = _Block_copy(&aBlock);
  v27 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v23, sel_performWithoutAnimation_, v26);
  _Block_release(v26);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v23 & 1) != 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  objc_msgSend(*(id *)((char *)v27 + direct field offset for Canvas.paperView), sel_setClipsToBounds_, 1);
  v28 = *(void **)((char *)v27 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v28)
  {
    objc_msgSend(v28, sel_setNeedsLayout);
    v29 = objc_msgSend(*(id *)((char *)v27 + direct field offset for PaperTextAttachmentView.bottomResizeView), sel_layoutInsideSuperview);
    v30 = *(void **)((char *)v27 + direct field offset for PaperTextAttachmentView.topResizeView);
    if (!v30)
    {
LABEL_19:
      v35 = v59;
      v36 = v60;
      v37 = v61;
      v38 = v62;
      if ((v10 & 1) != 0)
      {
        v29 = (id)(*(uint64_t (**)(id))((*v12 & *v27) + 0x1150))(v29);
        if (v29)
        {
          v39 = v29;
          objc_msgSend(v29, sel_bounds);
          v41 = v40;

          v38 = v38 + v41;
        }
      }
      v42 = (void *)(*(uint64_t (**)(id))((*v12 & *v27) + 0x320))(v29);
      if (v42)
      {
        v43 = v42;
        if (objc_msgSend(v42, sel_overrideUserInterfaceStyle))
          objc_msgSend(v27, sel_setOverrideUserInterfaceStyle_, objc_msgSend(v43, sel_overrideUserInterfaceStyle));

      }
      v44 = direct field offset for PaperTextAttachmentView.linedPaperView;
      v45 = *(char **)((char *)v27 + direct field offset for PaperTextAttachmentView.linedPaperView);
      if (!v45)
        goto LABEL_36;
      v46 = *(void **)((char *)v27 + direct field offset for PaperTextAttachmentView.linedPaper);
      if (v46)
      {
        v47 = v45;
        v48 = v46;
      }
      else
      {
        v49 = (void *)(*(uint64_t (**)(char *))((*v12 & *v27) + 0x1150))(v45);
        v48 = objc_msgSend(v49, sel_linedPaper);

      }
      v50 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper];
      *(_QWORD *)&v45[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper] = v48;
      v51 = v46;

      v52 = *(void **)((char *)v27 + v44);
      if (!v52)
        goto LABEL_36;
      v53 = *(uint64_t (**)(void))((*v12 & *v27) + 0x1150);
      v54 = v52;
      v55 = v53();
      if (v55)
      {
        v56 = (id)v55;
      }
      else
      {
        v56 = objc_msgSend(v27, sel_superview);
        if (!v56)
        {
          v58 = *MEMORY[0x1E0CD1338];
          goto LABEL_35;
        }
      }
      objc_msgSend(v56, sel_bounds);
      v58 = v57;

LABEL_35:
      PaperTextAttachmentView.drawingTransform(forViewWidth:)((__int128 *)&aBlock, v58);
      v65.origin.x = v35;
      v65.origin.y = v36;
      v65.size.width = v37;
      v65.size.height = v38;
      LinedPaperView.update(bounds:drawingTransform:shouldClip:)(v65, &aBlock, 1);

LABEL_36:
      swift_release();
      return;
    }
    v25 = v30;
    objc_msgSend(v25, sel_layoutInsideSuperview);
    objc_msgSend(v25, sel_frame);
    v4 = v31;
    v6 = v32;
    v8 = v33;
    v2 = v34;
    if (one-time initialization token for resizeHandleSize == -1)
    {
LABEL_18:
      objc_msgSend(v25, sel_setFrame_, v4, v6 + *(double *)&static UIConstants.resizeHandleSize * -0.5, v8, v2);

      goto LABEL_19;
    }
LABEL_40:
    swift_once();
    goto LABEL_18;
  }
  __break(1u);
LABEL_43:
  __break(1u);
}

id closure #1 in PaperTextAttachmentView.layoutSubviews()(uint64_t a1, double *a2)
{
  id result;

  objc_msgSend(*(id *)(a1 + direct field offset for Canvas.paperView), sel_setFrame_, *a2, a2[1], a2[2], a2[3]);
  result = *(id *)(a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  if (result)
    return objc_msgSend(result, sel_setFrame_, *a2, a2[1], a2[2], a2[3]);
  return result;
}

void @objc PaperTextAttachmentView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  PaperTextAttachmentView.layoutSubviews()();

}

id @objc PaperTextAttachmentView.canBecomeFirstResponder.getter(_QWORD *a1)
{
  uint64_t (*v1)(void);
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1150);
  v2 = a1;
  v3 = (_QWORD *)v1();
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel__canSelectDrawing);

    v2 = v4;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id @objc PaperTextAttachmentView.becomeFirstResponder()(void *a1, uint64_t a2)
{
  return @objc PaperTextAttachmentView.becomeFirstResponder()(a1, a2, (const char **)&selRef_becomeFirstResponder);
}

id @objc PaperTextAttachmentView.resignFirstResponder()(void *a1, uint64_t a2)
{
  return @objc PaperTextAttachmentView.becomeFirstResponder()(a1, a2, (const char **)&selRef_resignFirstResponder);
}

id @objc PaperTextAttachmentView.becomeFirstResponder()(void *a1, uint64_t a2, const char **a3)
{
  const char *v4;
  id v5;
  id v6;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
  v4 = *a3;
  v5 = v8.receiver;
  v6 = objc_msgSendSuper2(&v8, v4);
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v5, sel_isFirstResponder, v8.receiver, v8.super_class), 1, 0);

  return v6;
}

void closure #1 in PaperTextAttachmentView.characterIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, void *a5, uint64_t a6)
{
  id v10;
  char v11;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v13, &demangling cache variable for type metadata for Any?);
  if (v14)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10 = a5;
      v11 = static NSObject.== infix(_:_:)();

      if ((v11 & 1) != 0)
      {
        *(_QWORD *)a6 = a2;
        *(_BYTE *)(a6 + 8) = 0;
        *a4 = 1;
      }
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Any?);
  }
}

Swift::Void __swiftcall PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(__C::CGRect frame, Swift::Bool ensureLayout, Swift::Bool needsInvalidateLayout, Swift::Bool shouldRedraw)
{
  _QWORD *v4;
  double height;
  double width;
  CGFloat y;
  CGFloat x;
  uint64_t (*v11)(void);
  void *v12;
  id v13;
  id (*v14)();
  uint64_t v15;
  CGFloat *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  void *v40;
  void *v41;
  Swift::Bool v42;
  id v43;
  uint64_t v44;
  Swift::Bool v45;
  uint64_t v47;
  char v48;
  uint64_t aBlock;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t (*v53)();
  uint64_t v54;
  CGRect v55;
  CGRect v56;

  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  PaperTextAttachmentView.reportUpdatedPaperBoundsIfNecessary()();
  v11 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x1150);
  v12 = (void *)v11();
  v13 = objc_msgSend(v12, sel_textLayoutManager);

  if (v13)
  {

    v14 = 0;
  }
  else
  {
    v15 = objc_opt_self();
    v16 = (CGFloat *)swift_allocObject();
    *((_QWORD *)v16 + 2) = v4;
    v16[3] = x;
    v16[4] = y;
    v16[5] = width;
    v16[6] = height;
    v17 = swift_allocObject();
    v14 = partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:);
    *(_QWORD *)(v17 + 16) = partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:);
    *(_QWORD *)(v17 + 24) = v16;
    v53 = partial apply for thunk for @callee_guaranteed () -> ();
    v54 = v17;
    aBlock = MEMORY[0x1E0C809B0];
    v50 = 1107296256;
    v51 = thunk for @escaping @callee_guaranteed () -> ();
    v52 = &block_descriptor_54_0;
    v18 = _Block_copy(&aBlock);
    v19 = v4;
    swift_retain();
    swift_release();
    objc_msgSend((id)v15, sel_performWithoutAnimation_, v18);
    _Block_release(v18);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v15 & 1) != 0)
    {
      __break(1u);
      goto LABEL_24;
    }
  }
  v20 = v11();
  if (!v20)
  {
LABEL_19:
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v14);
    return;
  }
  v21 = (void *)v20;
  v22 = direct field offset for PaperTextAttachmentView.textAttachment;
  v23 = *(void **)((char *)v4 + direct field offset for PaperTextAttachmentView.textAttachment);
  if (!v23)
  {
    v24 = (id)v20;
LABEL_18:

    goto LABEL_19;
  }
  v24 = v23;
  v25 = (void *)v11();
  if (!v25)
    goto LABEL_16;
  v26 = v25;
  v45 = shouldRedraw;
  v27 = objc_msgSend(v25, sel_textStorage);

  if (!v27)
    goto LABEL_16;
  v28 = *(void **)((char *)v4 + v22);
  if (!v28)
  {

    goto LABEL_16;
  }
  v42 = ensureLayout;
  v47 = 0;
  v48 = 1;
  v44 = *MEMORY[0x1E0DC10F8];
  v29 = v28;
  v43 = objc_msgSend(v27, sel_length);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = &v47;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = closure #1 in PaperTextAttachmentView.characterIndex.getterpartial apply;
  *(_QWORD *)(v31 + 24) = v30;
  v53 = thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  v54 = v31;
  aBlock = MEMORY[0x1E0C809B0];
  v50 = 1107296256;
  v51 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v52 = &block_descriptor_65;
  v32 = _Block_copy(&aBlock);
  v33 = v29;
  swift_retain();
  swift_release();
  objc_msgSend(v27, sel_enumerateAttribute_inRange_options_usingBlock_, v44, 0, v43, 0, v32);

  _Block_release(v32);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v30 & 1) == 0)
  {
    v34 = v47;
    v35 = v48;
    swift_release();
    if ((v35 & 1) == 0)
    {
      objc_msgSend(v24, sel_bounds);
      v56.origin.x = v36;
      v56.origin.y = v37;
      v56.size.width = v38;
      v56.size.height = v39;
      v55.origin.x = 0.0;
      v55.origin.y = 0.0;
      v55.size.width = width;
      v55.size.height = height;
      if (CGRectEqualToRect(v55, v56)
        || (objc_msgSend(v24, sel_setBounds_, 0.0, 0.0, width, height), !needsInvalidateLayout))
      {
        if (v45)
        {
          v41 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320))();
          objc_msgSend(v41, sel__layoutSubviews);
          objc_msgSend(v41, sel_updateTilesForVisibleRect);

        }
      }
      else
      {
        objc_msgSend(v21, sel__pk_invalidateLayoutForCharacterRange_invalidateDisplay_ensureLayout_, v34, 1, 1, v42);
      }
      v40 = v21;
      goto LABEL_17;
    }
LABEL_16:
    v40 = v24;
    v24 = v21;
LABEL_17:

    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
}

Swift::Void __swiftcall PaperTextAttachmentView.reportUpdatedPaperBoundsIfNecessary()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  CGPoint v33;
  CGFloat v34;
  double v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  CGPoint v48;
  CGFloat v49;
  CGFloat v50;
  CGPoint v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  CGPoint v57;
  double v58;
  double v59;
  __C::CGRect v60;

  v1 = v0;
  v2 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v51 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v51 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - v21;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v51 - v26;
  v28 = MEMORY[0x1DF0E666C](v1 + direct field offset for PaperTextAttachmentView.paperViewDelegate, v25);
  if (v28)
  {
    v29 = v28;
    v55 = v9;
    v56 = v18;
    v30 = v1 + direct field offset for PaperTextAttachmentView.reportedBounds;
    v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if ((*(_BYTE *)(v1 + direct field offset for PaperTextAttachmentView.reportedBounds + 32) & 1) != 0)
      goto LABEL_5;
    v32 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v27, v32, v14);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v27, v14);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v33 = v57;
    v34 = v58;
    v35 = v59;
    outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
    if ((*(_BYTE *)(v30 + 32) & 1) != 0)
    {
      __break(1u);
      return;
    }
    v36 = CGRect.almostEqual(_:threshold:)(*(CGFloat *)v30, *(CGFloat *)(v30 + 8), *(CGFloat *)(v30 + 16), *(CGFloat *)(v30 + 24), 0.1, v33.x, v33.y, v34, v35);
    v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (!v36)
    {
LABEL_5:
      v53 = direct field offset for Canvas.paperView;
      v54 = v5;
      v37 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
          + *(_QWORD *)((*v31 & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
      swift_beginAccess();
      v52 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
      v52(v22, v37, v14);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v38 = (uint64_t)v55;
      Capsule<>.root.getter();
      v39 = *(void (**)(char *, uint64_t))(v15 + 8);
      v39(v22, v14);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      v51 = v57;
      v40 = v1;
      v41 = v29;
      v42 = v58;
      v43 = v59;
      outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
      *(CGPoint *)v30 = v51;
      *(double *)(v30 + 16) = v42;
      *(double *)(v30 + 24) = v43;
      v44 = v41;
      *(_BYTE *)(v30 + 32) = 0;
      v45 = *(_QWORD *)(v40 + v53) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v40 + v53)) + 0x380);
      swift_beginAccess();
      v46 = v56;
      v52(v56, v45, v14);
      v47 = (uint64_t)v54;
      Capsule<>.root.getter();
      v39(v46, v14);
      CRRegister.wrappedValue.getter();
      v48 = v57;
      v49 = v58;
      v50 = v59;
      outlined destroy of PKStrokeProperties(v47, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
      if (MEMORY[0x1DF0E666C](v44 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate))
      {
        v60.origin = v48;
        v60.size.width = v49;
        v60.size.height = v50;
        ExtensionViewController.reportPaperBounds(_:)(v60);
        swift_unknownObjectRelease();
      }
    }
    swift_unknownObjectRelease();
  }
}

double PaperTextAttachmentView.paperBounds(forViewWidth:)(double a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double *v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  double MinX;
  double v27;
  uint64_t v29;
  __C::CGRect v30;
  __C::CGRect v31;
  CGRect v32;
  CGRect v33;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (double *)((char *)v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint);
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((*((_BYTE *)v2 + direct field offset for PaperTextAttachmentView.paperBoundsHint + 32) & 1) != 0)
  {
    v11 = *(_QWORD *)((char *)v2 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v2 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    v12 = Capsule<>.contentBounds(includeDrawing:)(1);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    v16 = v9[2];
    v18 = v9[3];
    v12 = *v9;
    v14 = v9[1];
  }
  v30.origin.x = v12;
  v30.origin.y = v14;
  v30.size.width = v16;
  v30.size.height = v18;
  v31 = PaperTextAttachmentView.sensibleBounds(for:)(v30);
  x = v31.origin.x;
  y = v31.origin.y;
  width = v31.size.width;
  height = v31.size.height;
  v23 = (void *)(*(uint64_t (**)(void))((*v10 & *v2) + 0x320))();
  if (!v23)
    return 0.0;
  v24 = v23;
  v25 = objc_msgSend(v23, sel_cropDrawingAttachmentsWhenViewIsSmaller);

  if ((v25 & 1) == 0)
    return 0.0;
  if (objc_msgSend((id)objc_opt_self(), sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v2, sel_semanticContentAttribute)))
  {
    v32.origin.x = x;
    v32.origin.y = y;
    v32.size.width = width;
    v32.size.height = height;
    MinX = CGRectGetMinX(v32);
    if (*MEMORY[0x1E0CD1338] - a1 + -16.0 < MinX)
      MinX = *MEMORY[0x1E0CD1338] - a1 + -16.0;
    if (MinX < 0.0)
      return 0.0;
    else
      return MinX;
  }
  else
  {
    v27 = 0.0;
    v33.origin.x = 0.0;
    v33.origin.y = y;
    v33.size.width = width;
    v33.size.height = height;
    CGRectGetMaxX(v33);
  }
  return v27;
}

void PaperTextAttachmentView.drawingTransform(forViewWidth:)(__int128 *a1@<X8>, double a2@<D0>)
{
  _QWORD *v2;
  uint64_t v5;
  int v6;
  void *v7;
  void *v8;
  unsigned int v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  _OWORD *v23;
  void *v24;
  void *v25;
  unsigned __int8 v26;
  CGAffineTransform v27;
  CGRect v28;
  CGRect v29;

  v5 = direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth;
  if (vabdd_f64(a2, *(double *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth)) < 1.0)
  {
    v6 = *((unsigned __int8 *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop);
    v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320))();
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, sel_cropDrawingAttachmentsWhenViewIsSmaller);

      if (v6 == v9)
        goto LABEL_15;
    }
    else if (!v6)
    {
LABEL_15:
      v16 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform);
      v15 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform + 16);
      v17 = *(_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform + 32);
      goto LABEL_16;
    }
  }
  v28.origin.x = PaperTextAttachmentView.paperBounds(forViewWidth:)(a2);
  x = v28.origin.x;
  y = v28.origin.y;
  width = v28.size.width;
  height = v28.size.height;
  v14 = a2 / CGRectGetWidth(v28);
  v15 = xmmword_1DDF33A30;
  v16 = xmmword_1DDF33970;
  v17 = 0uLL;
  if (v14 > 0.0 && (~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
  {
    if (objc_msgSend((id)objc_opt_self(), sel_userInterfaceLayoutDirectionForSemanticContentAttribute_, objc_msgSend(v2, sel_semanticContentAttribute)))
    {
      v29.origin.x = x;
      v29.origin.y = y;
      v29.size.width = width;
      v29.size.height = height;
      v18 = -(v14 * CGRectGetMinX(v29));
      v19 = direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      v20 = (char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      *(double *)v20 = v14;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      *((double *)v20 + 3) = v14;
      *((_QWORD *)&v21 + 1) = 0;
      *(double *)&v21 = v18;
    }
    else
    {
      CGAffineTransformMakeScale(&v27, v14, v14);
      v22 = *(_OWORD *)&v27.c;
      v21 = *(_OWORD *)&v27.tx;
      v19 = direct field offset for PaperTextAttachmentView.cachedDrawingTransform;
      v23 = (_OWORD *)((char *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransform);
      *v23 = *(_OWORD *)&v27.a;
      v23[1] = v22;
    }
    *(_OWORD *)((char *)v2 + v19 + 32) = v21;
    v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320))();
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, sel_cropDrawingAttachmentsWhenViewIsSmaller);

    }
    else
    {
      v26 = 0;
    }
    *((_BYTE *)v2 + direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop) = v26;
    *(double *)((char *)v2 + v5) = a2;
    goto LABEL_15;
  }
LABEL_16:
  *a1 = v16;
  a1[1] = v15;
  a1[2] = v17;
}

id PaperTextAttachmentView.tiledView.getter()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))();
  v2 = objc_msgSend(v1, sel__pkTiledViewIfEnabled);

  return v2;
}

uint64_t PaperTextAttachmentView.scrollView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))();
}

double PaperTextAttachmentView.drawingTransformOverride.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  id v4;
  double v5;
  double v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10[3];

  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1150))();
  if (v3)
  {
    v4 = (id)v3;
  }
  else
  {
    v4 = objc_msgSend(v1, sel_superview);
    if (!v4)
    {
      v6 = *MEMORY[0x1E0CD1338];
      goto LABEL_5;
    }
  }
  objc_msgSend(v4, sel_bounds);
  v6 = v5;

LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(v10, v6);
  result = *(double *)v10;
  v8 = v10[1];
  v9 = v10[2];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

uint64_t PaperTextAttachmentView.closestViewController.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v1 = v0;
  while (1)
  {
    v2 = objc_msgSend(v1, sel_nextResponder);
    if (v2)
      break;
LABEL_5:
    v5 = objc_msgSend(v1, sel_nextResponder);

    if (!v5)
      return 0;
    objc_opt_self();
    v1 = (id)swift_dynamicCastObjCClass();
    if (!v1)
    {

      return 0;
    }
  }
  v3 = v2;
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
  {

    goto LABEL_5;
  }
  v6 = v4;

  return v6;
}

uint64_t PaperTextAttachmentView.viewControllerForPresentingUI.getter()
{
  uint64_t v0;
  uint64_t result;

  result = MEMORY[0x1DF0E666C](v0 + direct field offset for PaperTextAttachmentView._viewControllerForPresentingUI);
  if (!result)
    return PaperTextAttachmentView.closestViewController.getter();
  return result;
}

void PaperTextAttachmentView.viewControllerForPresentingUI.setter(void *a1)
{
  swift_unknownObjectWeakAssign();

}

void (*PaperTextAttachmentView.viewControllerForPresentingUI.modify(uint64_t *a1))(id *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = direct field offset for PaperTextAttachmentView._viewControllerForPresentingUI;
  a1[1] = v1;
  a1[2] = v3;
  v4 = MEMORY[0x1DF0E666C](v1 + v3);
  if (!v4)
    v4 = PaperTextAttachmentView.closestViewController.getter();
  *a1 = v4;
  return PaperTextAttachmentView.viewControllerForPresentingUI.modify;
}

void PaperTextAttachmentView.viewControllerForPresentingUI.modify(id *a1)
{
  id v1;

  v1 = *a1;
  swift_unknownObjectWeakAssign();

}

Swift::Void __swiftcall PaperTextAttachmentView.observeTextView(_:)(UITextView_optional *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  UITextView_optional *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  UITextView_optional *v24;

  v2 = v1;
  v4 = v1 + direct field offset for PaperTextAttachmentView.observedTextView;
  v5 = (void *)MEMORY[0x1DF0E666C](v1 + direct field offset for PaperTextAttachmentView.observedTextView);
  v6 = v5;
  if (a1)
  {
    if (v5)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      v7 = a1;
      v8 = static NSObject.== infix(_:_:)();

      if ((v8 & 1) != 0)
        return;
    }
  }
  else
  {
    if (!v5)
      return;

  }
  v9 = MEMORY[0x1DF0E666C](v4);
  v10 = (_QWORD *)MEMORY[0x1E0DC55A0];
  v11 = (uint64_t *)MEMORY[0x1E0DC1230];
  if (v9)
  {
    v12 = (void *)v9;
    v13 = (void *)objc_opt_self();
    v14 = objc_msgSend(v13, sel_defaultCenter);
    objc_msgSend(v14, sel_removeObserver_name_object_, v2, *v10, v12);

    v15 = objc_msgSend(v13, sel_defaultCenter);
    v16 = *v11;
    v17 = v11;
    v18 = objc_msgSend(v12, sel_textStorage);
    objc_msgSend(v15, sel_removeObserver_name_object_, v2, v16, v18);

    v11 = v17;
    v10 = (_QWORD *)MEMORY[0x1E0DC55A0];
    objc_msgSend(v12, sel__removeScrollViewScrollObserver_, v2);

  }
  swift_unknownObjectWeakAssign();
  if (a1)
  {
    v19 = (void *)objc_opt_self();
    v24 = a1;
    v20 = objc_msgSend(v19, sel_defaultCenter);
    objc_msgSend(v20, sel_addObserver_selector_name_object_, v2, sel_updateAfterTextViewChange, *v10, v24);

    v21 = objc_msgSend(v19, sel_defaultCenter);
    v22 = *v11;
    v23 = -[UITextView_optional textStorage](v24, sel_textStorage);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v2, sel_updateAfterTextViewChange, v22, v23);

    -[UITextView_optional _addScrollViewScrollObserver:](v24, sel__addScrollViewScrollObserver_, v2);
  }
}

id @objc PaperTextAttachmentView._observeScrollViewDidScroll(_:)(uint64_t a1)
{
  id result;

  result = *(id *)(a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (result)
    return objc_msgSend(result, sel_setNeedsLayout);
  __break(1u);
  return result;
}

id PaperTextAttachmentView.textView.getter()
{
  void *v0;
  id result;
  void *v2;
  id v3;

  result = objc_msgSend(v0, sel_superview);
  if (result)
  {
    v2 = result;
    while (1)
    {
      objc_opt_self();
      result = (id)swift_dynamicCastObjCClass();
      if (result)
        break;
      v3 = objc_msgSend(v2, sel_superview);

      v2 = v3;
      if (!v3)
        return 0;
    }
  }
  return result;
}

CGSize __swiftcall PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(UIView_optional *containerView)
{
  _QWORD *v1;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  CGFloat v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  double MaxY;
  __int128 v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  id v39;
  double v40;
  void *v41;
  void *v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  CGSize result;
  char *v50;
  float64_t v51;
  __int128 v52;
  __int128 v53;
  CGRect v54;

  if (containerView)
    -[UIView_optional bounds](containerView, sel_bounds);
  else
    v3 = *MEMORY[0x1E0CD1338];
  v51 = v3;
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v53, v3);
  v4 = PaperTextAttachmentView.safePaperModelBounds.getter();
  v8 = *(_QWORD *)((char *)v1 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (v8)
  {
    v4 = *(double *)(v8 + 32);
    v5 = *(_QWORD *)(v8 + 40);
    v6 = *(_QWORD *)(v8 + 48);
    v7 = *(_QWORD *)(v8 + 56);
  }
  v9 = *MEMORY[0x1E0CD1330];
  *(double *)&v11 = CGRectGetMaxY(*(CGRect *)&v4)
                  * sqrt(*(double *)&v53 * *(double *)&v53 + *((double *)&v53 + 1) * *((double *)&v53 + 1));
  if (v9 > *(double *)&v11)
    *(double *)&v11 = v9;
  v52 = v11;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(char **)(*(_QWORD *)((char *)v1 + direct field offset for Canvas.paperView)
                 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v1
                                                                   + direct field offset for Canvas.paperView))
                             + 0x4C0));
  if (v13)
  {
    v14 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (v14)
    {
      v15 = *(void **)(v14 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
      if (v15)
      {
        v50 = v13;
        v16 = objc_msgSend(v15, sel_overlayViews);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v18)
            goto LABEL_13;
        }
        else
        {
          v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v18)
          {
LABEL_13:
            if (v18 < 1)
            {
              __break(1u);
LABEL_49:
              v10 = swift_once();
LABEL_39:
              v35 = *(double *)&v52;
              if (*(double *)&v52 <= *(double *)&qword_1F042F118 + 80.0 + 80.0)
                v35 = *(double *)&qword_1F042F118 + 80.0 + 80.0;
              *(double *)&v52 = v35;
              goto LABEL_42;
            }
            for (i = 0; i != v18; ++i)
            {
              if ((v17 & 0xC000000000000001) != 0)
                v20 = (id)MEMORY[0x1DF0E4D64](i, v17);
              else
                v20 = *(id *)(v17 + 8 * i + 32);
              v21 = v20;
              objc_msgSend(v20, sel_frame);
              v26 = v22;
              if ((~*(_QWORD *)&v22 & 0x7FF0000000000000) != 0
                && (v27 = v23, (~*(_QWORD *)&v23 & 0x7FF0000000000000) != 0)
                && (v28 = v24, (~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
                && (v29 = v25, (~*(_QWORD *)&v25 & 0x7FF0000000000000) != 0)
                && !CGRectIsEmpty(*(CGRect *)&v22))
              {
                v54.origin.x = v26;
                v54.origin.y = v27;
                v54.size.width = v28;
                v54.size.height = v29;
                MaxY = CGRectGetMaxY(v54);

                v31 = v52;
                if (*(double *)&v52 <= MaxY)
                  *(double *)&v31 = MaxY;
                v52 = v31;
              }
              else
              {

              }
            }
          }
        }

        v10 = swift_bridgeObjectRelease();
      }
    }
  }
  if (!*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool))
    goto LABEL_42;
  if (*((_BYTE *)v1 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode))
  {
    if (*((_BYTE *)v1 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode) != 1)
      goto LABEL_42;
    PaperTextAttachmentView.isAtEndOfDocument.getter();
    if ((v10 & 1) != 0)
      goto LABEL_37;
    if (one-time initialization token for maxGeneratedImageSize == -1)
      goto LABEL_39;
    goto LABEL_49;
  }
  PaperTextAttachmentView.isAtEndOfDocument.getter();
  if ((v10 & 1) != 0)
  {
LABEL_37:
    v32 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v32, sel_bounds);
    v34 = v33;

    *(double *)&v52 = *(double *)&v52 + v34;
  }
LABEL_42:
  v36 = 1.0;
  v37 = 1.0;
  if (containerView)
  {
    v10 = (uint64_t)-[UIView_optional window](containerView, sel_window);
    if (v10)
    {
      v38 = (void *)v10;
      v39 = objc_msgSend((id)v10, sel_screen);

      objc_msgSend(v39, sel_scale);
      v37 = v40;

    }
  }
  v41 = (void *)(*(uint64_t (**)(uint64_t))((*v12 & *v1) + 0x1150))(v10);
  if (v41)
  {
    v42 = v41;
    objc_msgSend(v41, sel_zoomScale);
    v36 = v43;

  }
  v44.f64[0] = v51;
  *(_QWORD *)&v44.f64[1] = v52;
  v45 = vmulq_n_f64(v44, v37 * v36);
  v46 = vrndmq_f64(v45);
  v47 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v45, v46), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v45), (int8x16_t)v46), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v37 * v36), 0));
  v48 = v47.f64[1];
  result.width = v47.f64[0];
  result.height = v48;
  return result;
}

Swift::Void __swiftcall PaperTextAttachmentView.updateFrameForTextContainer()()
{
  _QWORD *v0;
  double v1;
  CGFloat v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  id v9;
  double v10;
  CGFloat v11;
  UIView_optional *v12;
  CGSize v13;
  BOOL v14;
  CGRect v15;
  __C::CGRect v16;
  CGRect v17;

  objc_msgSend(v0, sel_frame);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = objc_msgSend(v0, sel_frame);
  v11 = v10;
  v12 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150))(v9);
  if (!v12)
    v12 = (UIView_optional *)objc_msgSend(v0, sel_superview);
  v13 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v12);

  v15.origin.x = 0.0;
  v15.origin.y = v11;
  v15.size.width = v13.width;
  v15.size.height = v13.height;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.width = v6;
  v17.size.height = v8;
  v14 = CGRectEqualToRect(v15, v17);
  v16.origin.x = 0.0;
  v16.origin.y = v11;
  v16.size.width = v13.width;
  v16.size.height = v13.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v16, 0, !v14, 1);
}

uint64_t PaperTextAttachmentView.isAtBeginningOfDocument.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t (*v2)(void);
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  char v10;
  void *v12;
  id v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];

  if (objc_msgSend(v0, sel_isUserInteractionEnabled))
  {
    v1 = *(void **)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v1)
    {
      v2 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150);
      v3 = v1;
      v4 = (void *)v2();
      if (v4)
      {
        v5 = v4;
        v6 = objc_msgSend(v4, sel_textStorage);
        v7 = objc_msgSend(v6, sel_length);

        if ((uint64_t)v7 > 0)
        {
          v8 = objc_msgSend(v5, sel_textStorage);
          v9 = objc_msgSend(v8, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E0DC10F8], 0, 0);

          if (v9)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            v15 = 0u;
            v16 = 0u;
          }
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v15, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)&v15, &demangling cache variable for type metadata for Any?);
          if (*((_QWORD *)&v16 + 1))
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v12 = v14;
              v13 = v3;
              v10 = static NSObject.== infix(_:_:)();

              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
LABEL_17:

              return v10 & 1;
            }
          }
          else
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v15, &demangling cache variable for type metadata for Any?);
          }
          v13 = v3;

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
          v10 = 0;
          v12 = v13;
          goto LABEL_17;
        }

      }
      else
      {

      }
    }
  }
  v10 = 1;
  return v10 & 1;
}

void PaperTextAttachmentView.isAtEndOfDocument.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void (*v20)(char *, uint64_t);
  Class isa;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  _QWORD v27[2];
  __int128 v28;
  __int128 v29;
  _BYTE v30[32];

  v1 = type metadata accessor for CharacterSet();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)v27 - v9;
  if (objc_msgSend(v0, sel_isUserInteractionEnabled, v8))
  {
    v11 = *(void **)((char *)v0 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v11)
    {
      v12 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1150);
      v13 = v11;
      v14 = (void *)v12();
      if (!v14)
      {
LABEL_9:

        return;
      }
      v15 = v14;
      v16 = objc_msgSend(v14, sel_textStorage);
      v17 = objc_msgSend(v16, sel_length);

      if ((uint64_t)v17 <= 0)
      {
LABEL_8:

        goto LABEL_9;
      }
      v18 = objc_msgSend(v15, sel_textStorage);
      v19 = objc_msgSend(v18, sel_string);

      if (!v19)
      {
        __break(1u);
        return;
      }
      static CharacterSet.whitespacesAndNewlines.getter();
      CharacterSet.inverted.getter();
      v20 = *(void (**)(char *, uint64_t))(v2 + 8);
      v20(v10, v1);
      isa = CharacterSet._bridgeToObjectiveC()().super.isa;
      v20(v5, v1);
      v22 = objc_msgSend(v19, sel_rangeOfCharacterFromSet_options_, isa, 4);

      if (v22 == (id)NSNotFound.getter())
      {

        goto LABEL_8;
      }
      v23 = objc_msgSend(v15, sel_textStorage);
      v24 = objc_msgSend(v23, sel_attribute_atIndex_effectiveRange_, *MEMORY[0x1E0DC10F8], v22, 0);

      if (v24)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v28 = 0u;
        v29 = 0u;
      }
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v28, (uint64_t)v30, &demangling cache variable for type metadata for Any?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v30, (uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      if (*((_QWORD *)&v29 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v25 = (void *)v27[1];
          v26 = v13;
          static NSObject.== infix(_:_:)();

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
LABEL_19:

          return;
        }
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v28, &demangling cache variable for type metadata for Any?);
      }
      v26 = v13;

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      v25 = v26;
      goto LABEL_19;
    }
  }
}

void PaperTextAttachmentView.registerUndo(_:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  int v34;
  uint64_t v35;
  id v36;
  void *v37;

  v11 = type metadata accessor for CapsuleUndoAction();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x1150))(v15);
  if (v17)
  {
    v35 = a4;
    v18 = *(void **)((char *)v5 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v18)
    {
      v34 = a5;
      v36 = v17;
      v37 = &unk_1F049E4E0;
      v19 = swift_dynamicCastObjCProtocolConditional();
      if (v19)
      {
        v20 = (void *)v19;
        v21 = v18;
        v22 = objc_msgSend(v5, sel_undoManager);
        if (v22)
        {
          v23 = v22;
          v24 = objc_msgSend(v20, sel__paperIdentifier);
          v33 = v21;
          v25 = v24;
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v27 = v26;

          (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
          v28 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
          v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = v32;
          *(_QWORD *)(v30 + 24) = v27;
          (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v30 + v28, v16, v11);
          v31 = v30 + v29;
          *(_QWORD *)v31 = a2;
          *(_QWORD *)(v31 + 8) = a3;
          *(_QWORD *)(v31 + 16) = v35;
          *(_BYTE *)(v31 + 24) = v34;
          swift_bridgeObjectRetain();
          outlined copy of CanvasMembers?(a2);
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
          NSUndoManager.registerUndo<A>(withTarget:handler:)();

          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void PaperTextAttachmentView.registerUndo(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;

  v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x1150))();
  if (v5)
  {
    v6 = *(void **)((char *)v2 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v6)
    {
      v17 = v5;
      v7 = swift_dynamicCastObjCProtocolConditional();
      if (v7)
      {
        v8 = (void *)v7;
        v9 = v6;
        v10 = objc_msgSend(v2, sel_undoManager);
        if (v10)
        {
          v11 = v10;
          v12 = objc_msgSend(v8, sel__paperIdentifier);
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;

          v16 = (_QWORD *)swift_allocObject();
          v16[2] = v13;
          v16[3] = v15;
          v16[4] = a1;
          v16[5] = a2;
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
          swift_bridgeObjectRetain();
          swift_retain();
          NSUndoManager.registerUndo<A>(withTarget:handler:)();

          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void PaperTextAttachmentView.height(from:delta:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  id v3;
  double v4;
  double v5;
  __int128 v6;
  CGRect v7;

  if (a1)
  {
    objc_msgSend(a1, sel_bounds);
    CGRectGetMaxY(v7);
    v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1150))();
    if (v2)
    {
      v3 = (id)v2;
    }
    else
    {
      v3 = objc_msgSend(v1, sel_superview);
      if (!v3)
      {
        v5 = *MEMORY[0x1E0CD1338];
        goto LABEL_6;
      }
    }
    objc_msgSend(v3, sel_bounds);
    v5 = v4;

LABEL_6:
    PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v6, v5);
    return;
  }
  __break(1u);
}

void PaperTextAttachmentView.updateDrawingHeight(_:)(double a1)
{
  _QWORD *v1;
  id v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __int128 v14;
  __C::CGRect v15;

  v3 = objc_msgSend(v1, sel_bounds);
  v5 = v4;
  v6 = *MEMORY[0x1E0CD1330];
  v7 = (*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1150))(v3);
  if (v7)
  {
    v8 = (id)v7;
LABEL_4:
    objc_msgSend(v8, sel_bounds);
    v10 = v9;

    goto LABEL_5;
  }
  v8 = objc_msgSend(v1, sel_superview);
  if (v8)
    goto LABEL_4;
  v10 = *MEMORY[0x1E0CD1338];
LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v14, v10);
  v11 = fmax(v6 * sqrt(*(double *)&v14 * *(double *)&v14 + *((double *)&v14 + 1) * *((double *)&v14 + 1)), 8.0);
  if (v11 > a1)
    v12 = v11;
  else
    v12 = a1;
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0)
    v13 = v12;
  else
    v13 = v11;
  if (v5 < v13)
  {
    objc_msgSend(v1, sel_frame);
    v15.size.height = v13;
    PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v15, 1, 1, 1);
  }
}

uint64_t PaperTextAttachmentView.__allocating_init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  void *v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  void *v95;
  unsigned __int8 v96;
  id v97;
  void *v98;
  id v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  void *v107;
  _BYTE *v108;
  uint64_t v109;
  id v110;
  void *v111;
  uint64_t v112;
  id v113;
  id v114;
  id v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  id v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t result;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void (*v129)(unint64_t, _QWORD, uint64_t);
  uint64_t v130;
  _QWORD *v131;
  void (*v132)(char *, _QWORD, uint64_t);
  char *v133;
  _QWORD *v134;
  uint64_t v135;
  char *v136;
  id v137;
  uint64_t v138;
  id v139;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL v144;
  CGFloat *v145;
  void *v146;
  id v147;
  id v148;
  double v149;
  uint64_t v150;
  id v151;
  double v152;
  uint64_t v153;
  int v154;
  id v155;
  id v156;
  void *v157;
  void (*v158)(char *, char *, uint64_t);
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, char *, uint64_t);
  char *v166;
  _QWORD v167[2];
  _QWORD *v168;
  NSObject *v169;
  char *v170;
  CGFloat *v171;
  char *v172;
  uint64_t FileVersionPolicy;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  void (*v180)(char *, char *, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  id v192;
  char *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  id v205;
  uint64_t v206;
  char *v207;
  void *v208;
  __int128 v209;
  __int128 v210;
  CGRect v211;

  v9 = v8;
  v194 = a8;
  v202 = a6;
  v198 = a5;
  v205 = a4;
  v195 = a3;
  v189 = a2;
  v188 = a1;
  v200 = 0;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v190 = *(_QWORD **)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v11);
  v172 = (char *)v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v174 = (char *)v167 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v16, v17);
  v185 = (char *)v167 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for UUID();
  v186 = *(_QWORD *)(v187 - 8);
  MEMORY[0x1E0C80A78](v187, v19);
  v176 = (char *)v167 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v175 = (char *)v167 - v23;
  v197 = type metadata accessor for CRKeyPath();
  v203 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197, v24);
  v204 = (char *)v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v184 = (char *)v167 - v28;
  v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v182, v29);
  v181 = (uint64_t)v167 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v167 - v33;
  v35 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v167 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v201 = *(_QWORD *)(v206 - 8);
  MEMORY[0x1E0C80A78](v206, v39);
  v179 = (char *)v167 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v170 = (char *)v167 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v207 = (char *)v167 - v46;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v47, v48);
  v180 = (void (*)(char *, char *, uint64_t))((char *)v167 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v50, v51);
  v193 = (char *)v167 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v183 = (uint64_t)v167 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (char *)v167 - v58;
  MEMORY[0x1E0C80A78](v60, v61);
  v63 = (char *)v167 - v62;
  v64 = type metadata accessor for URL();
  v65 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v66);
  v68 = (char *)v167 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(a7) = *a7;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.paperViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.syncManager] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.syncCancellable] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.saveCancellable] = 0;
  v178 = direct field offset for PaperTextAttachmentView.textAttachment;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.textAttachment] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.topResizeView] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.bottomResizeView] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = 0;
  v69 = &v9[direct field offset for PaperTextAttachmentView.reportedBounds];
  *(_OWORD *)v69 = 0u;
  *((_OWORD *)v69 + 1) = 0u;
  v69[32] = 1;
  v9[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.linedPaperView] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.previousLinks] = MEMORY[0x1E0DEE9D8];
  v70 = &v9[direct field offset for PaperTextAttachmentView.paperBoundsHint];
  *(_OWORD *)v70 = 0u;
  *((_OWORD *)v70 + 1) = 0u;
  v171 = (CGFloat *)v70;
  v70[32] = 1;
  v177 = direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder;
  v9[direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.resizeInfo] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.linedPaper] = 0;
  v9[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = 0;
  v9[direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode] = 2;
  v71 = &v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransform];
  *v71 = 0x3FF0000000000000;
  v71[1] = 0;
  v71[2] = 0;
  v71[3] = 0x3FF0000000000000;
  v71[4] = 0;
  v71[5] = 0;
  *(_QWORD *)&v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth] = 0xBFF0000000000000;
  v9[direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop] = 0;
  swift_unknownObjectWeakInit();
  v72 = &v9[direct field offset for PaperTextAttachmentView.calculateDocument];
  *v72 = 0;
  v72[1] = 0;
  v9[direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior] = 0;
  v199 = (int)a7;
  v196 = v64;
  v191 = v65;
  if (!(_DWORD)a7)
  {
    v74 = v9;
    goto LABEL_5;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v198, (uint64_t)v63, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64) == 1)
  {
    v73 = v9;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v63, &demangling cache variable for type metadata for URL?);
LABEL_5:
    type metadata accessor for CRContext();
    v192 = (id)MEMORY[0x1DF0E3C90](0, v202);
LABEL_6:
    v75 = v195;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v68, v63, v64);
  v107 = (void *)type metadata accessor for CRContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v59, 1, 1, v64);
  v108 = v9;
  v109 = v65;
  v192 = v107;
  v110 = v200;
  v111 = (void *)static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)();
  v200 = v110;
  if (!v110)
  {
    v192 = v111;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v59, &demangling cache variable for type metadata for URL?);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v68, v64);
    goto LABEL_6;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v59, &demangling cache variable for type metadata for URL?);
  if (one-time initialization token for logger != -1)
    swift_once();
  v112 = type metadata accessor for Logger();
  __swift_project_value_buffer(v112, (uint64_t)logger);
  v113 = v200;
  v114 = v200;
  v115 = v113;
  v116 = Logger.logObject.getter();
  v117 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v116, v117))
  {
    v169 = v116;
    v118 = (uint8_t *)swift_slowAlloc();
    v168 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v118 = 138412290;
    v167[1] = v118 + 4;
    v119 = v113;
    v120 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)&v209 = v120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v121 = v168;
    *v168 = v120;
    v116 = v169;

    _os_log_impl(&dword_1DDB0F000, v116, v117, "Cannot create CRContext for attachment %@", v118, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v121, -1, -1);
    MEMORY[0x1DF0E6558](v118, -1, -1);
  }
  else
  {

  }
  v75 = v195;

  v192 = (id)MEMORY[0x1DF0E3C90](0, v202);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v68, v196);
  v200 = 0;
LABEL_7:
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v209 = 0u;
  v210 = 0u;
  CRRegister.init(wrappedValue:)();
  v209 = 0u;
  v210 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v209 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v34, 1, 1, v76);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, v181, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v209 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v209 = 0;
  *((_QWORD *)&v209 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v209 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v38[*(int *)(v35 + 48)] = MEMORY[0x1E0DEE9E0];
  v77 = v184;
  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.init(_:id:)();
  v78 = (uint64_t)v185;
  UUID.init(uuidString:)();
  v79 = v186;
  v80 = v187;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v78, 1, v187) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for UUID?);
    v81 = v204;
    CRKeyPath.init(_:)();
    v82 = v194;
    v83 = v197;
  }
  else
  {
    swift_bridgeObjectRelease();
    v84 = v77;
    v85 = v175;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v175, v78, v80);
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v176, v85, v80);
    CRKeyPath.init(_:)();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v85, v80);
    v81 = v204;
    v86 = v84;
    v83 = v197;
    (*(void (**)(char *, char *, uint64_t))(v203 + 32))(v204, v86, v197);
    v82 = v194;
  }
  v87 = v190;
  v88 = (uint64_t)v193;
  v89 = v183;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, v183, &demangling cache variable for type metadata for URL?);
  if (v199
    || (v90 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v191 + 48), v90(v89, 1, v196) == 1))
  {
    v91 = (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for initialHeightOfInsertedTextAttachment != -1)
      v91 = (void *)swift_once();
    *(_QWORD *)&v209 = static UIConstants.initialHeightOfInsertedTextAttachment;
    v93 = v177;
    v94 = (double *)MEMORY[0x1E0CD1338];
    if (v205)
    {
      v208 = &unk_1F049E4E0;
      v91 = (void *)swift_dynamicCastObjCProtocolConditional();
      if (v91)
      {
        v95 = v91;
        v96 = objc_msgSend(v91, sel_respondsToSelector_, sel__paperSizeHint);
        v97 = v205;
        v98 = v97;
        if ((v96 & 1) != 0)
        {
          v99 = v97;
          objc_msgSend(v95, sel__paperSizeHint);
          if (v100 <= 0.0 || (v102 = v101, v101 <= 0.0))
          {

          }
          else
          {
            v103 = v100;
            if (one-time initialization token for minimumTextAttachmentHeight != -1)
              swift_once();
            v104 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
            v105 = *v94;

            v106 = v102 * v105 / v103;
            if (v104 > v106)
              v106 = v104;
            *(double *)&v209 = v106;
          }
        }
        if ((objc_msgSend(v95, sel_respondsToSelector_, sel__paperBoundsHint) & 1) != 0)
        {
          v139 = v98;
          objc_msgSend(v95, sel__paperBoundsHint);
          x = v211.origin.x;
          y = v211.origin.y;
          width = v211.size.width;
          height = v211.size.height;
          v144 = CGRectEqualToRect(v211, *MEMORY[0x1E0C9D628]);

          v83 = v197;
          v81 = v204;
          if (!v144)
          {
            v145 = v171;
            *v171 = x;
            v145[1] = y;
            v145[2] = width;
            v145[3] = height;
            *((_BYTE *)v145 + 32) = 0;
          }
        }
        else
        {

          v83 = v197;
          v81 = v204;
        }
      }
    }
    MEMORY[0x1E0C80A78](v91, v92);
    v167[-2] = &v209;
    v167[-1] = v81;
    Capsule.mutate<A>(_:)();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for URL?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, v88, &demangling cache variable for type metadata for URL?);
    result = v90(v88, 1, v196);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    v123 = type metadata accessor for CRCodableVersion();
    v124 = *(_QWORD *)(v123 - 8);
    v125 = *(_QWORD *)(v124 + 72);
    v126 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
    v127 = swift_allocObject();
    *(_OWORD *)(v127 + 16) = xmmword_1DDF33AB0;
    v128 = v127 + v126;
    v129 = *(void (**)(unint64_t, _QWORD, uint64_t))(v124 + 104);
    v129(v128, *MEMORY[0x1E0D12370], v123);
    v129(v128 + v125, *MEMORY[0x1E0D12378], v123);
    v130 = one-time initialization token for allReadableFileFormatVersions;
    v131 = v192;
    if (v130 != -1)
      swift_once();
    v132 = (void (*)(char *, _QWORD, uint64_t))v87[13];
    v133 = v172;
    v134 = v87;
    v135 = FileVersionPolicy;
    v132(v172, *MEMORY[0x1E0D127E0], FileVersionPolicy);
    v190 = v131;
    v136 = v193;
    v137 = v200;
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    v82 = v194;
    v83 = v197;
    ((void (*)(char *, uint64_t))v134[1])(v133, v135);
    swift_bridgeObjectRelease();
    if (v137)
    {

      (*(void (**)(char *, uint64_t))(v191 + 8))(v136, v196);
      v138 = (uint64_t)v174;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v174, 1, 1, v206);
      outlined destroy of StocksKitCurrencyCache.Provider?(v138, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v191 + 8))(v136, v196);
      v161 = v201;
      v162 = v174;
      v163 = v206;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v174, 0, 1, v206);
      v164 = v207;
      (*(void (**)(char *, uint64_t))(v161 + 8))(v207, v163);
      v165 = *(void (**)(char *, char *, uint64_t))(v161 + 32);
      v166 = v170;
      v165(v170, v162, v163);
      v165(v164, v166, v163);
    }
    v81 = v204;
    v93 = v177;
    v75 = v195;
    v94 = (double *)MEMORY[0x1E0CD1338];
  }
  v146 = *(void **)&v9[v178];
  v147 = v205;
  *(_QWORD *)&v9[v178] = v205;
  v148 = v147;

  (*(void (**)(_BYTE *, char *, uint64_t))(v203 + 16))(&v9[direct field offset for PaperTextAttachmentView.paperDrawingKeyPath], v81, v83);
  v9[v93] = v82 & 1;

  v149 = *v94;
  v150 = one-time initialization token for defaultTextAttachmentHeight;
  v151 = v192;
  if (v150 != -1)
    swift_once();
  v152 = *(double *)&static UIConstants.defaultTextAttachmentHeight;
  v153 = (uint64_t)v179;
  (*(void (**)(char *, char *, uint64_t))(v201 + 16))(v179, v207, v206);
  v154 = v199;
  specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(v151, v153, v199, 1, 1, 0.0, 0.0, v149, v152);
  v156 = v155;
  v157 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000027, 0x80000001DDF4DA80);
  objc_msgSend(v156, sel_setAccessibilityIdentifier_, v157);

  *((_BYTE *)v156 + direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging) = (v82 & 1) == 0;
  v158 = v180;
  if (v154)
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, (uint64_t)v180, &demangling cache variable for type metadata for URL?);
  else
    (*(void (**)(void (*)(char *, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v191 + 56))(v180, 1, 1, v196);
  v159 = v202;
  PaperTextAttachmentView.createPaperView(paperBundleURL:)(v158);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v158, &demangling cache variable for type metadata for URL?);
  PaperTextAttachmentView.addGestures()();
  v160 = v204;
  if ((v82 & 1) != 0)
  {
    LOBYTE(v209) = 3;
    PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v209);
  }

  outlined destroy of StocksKitCurrencyCache.Provider?(v159, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v198, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v207, v206);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v160, v83);
  return (uint64_t)v156;
}

uint64_t closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_OWORD *, _QWORD);
  uint64_t v21;
  void (*v22)(_OWORD *, _QWORD);
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(_OWORD *, _QWORD);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];

  v32 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v4, v5);
  v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v33 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - v16;
  v18 = *MEMORY[0x1E0CD1338];
  v19 = *a2;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v20 = (void (*)(_OWORD *, _QWORD))Capsule.Ref<>.root.modify();
  v34 = 0;
  v35 = 0;
  v36 = v18;
  v37 = v19;
  v30 = type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v20(v38, 0);
  v21 = *a2;
  v22 = (void (*)(_OWORD *, _QWORD))Capsule.Ref<>.root.modify();
  v34 = 0;
  v35 = 0;
  v36 = v18;
  v37 = v21;
  CRRegister.wrappedValue.setter();
  v22(v38, 0);
  v23 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v38[0] = *MEMORY[0x1E0C9D628];
  v38[1] = v23;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  swift_retain();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  CROrderedSet.init()();
  *(_QWORD *)&v10[*(int *)(v7 + 24)] = MEMORY[0x1E0DEE9E0];
  v24 = type metadata accessor for CRKeyPath();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v31, v32, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v26, 0, 1, v24);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Ref.init<A>(_:_:identity:)();
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v17, 0, 1, v27);
  v28 = (uint64_t (*)(_OWORD *, _QWORD))Capsule.Ref<>.root.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v33, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v28(v38, 0);
}

uint64_t @objc PaperTextAttachmentView.init(attachment:drawing:inserted:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v7;

  v7 = a3;
  return specialized PaperTextAttachmentView.init(attachment:drawing:inserted:)(a3, a5);
}

Class @objc PaperTextAttachmentView.tiledViewAttachmentViews()(char *a1)
{
  void *v1;
  char *v2;
  id v3;
  Class isa;

  v1 = *(void **)&a1[direct field offset for Canvas.paperView];
  v2 = a1;
  v3 = v1;
  specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

void @objc PaperTextAttachmentView.topLevelAttachmentView()(char *a1)
{
  void *v1;
  char *v2;
  id v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  v1 = *(void **)&a1[direct field offset for Canvas.paperView];
  v2 = a1;
  v3 = v1;
  v4 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8)
    goto LABEL_8;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
LABEL_9:
    v5 = (id)MEMORY[0x1DF0E4D64](0, v4);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(v4 + 32);
LABEL_6:
    v6 = v5;

    swift_bridgeObjectRelease();
    v7 = v6;
    return;
  }
  __break(1u);
}

double @objc PaperTextAttachmentView.drawingTextAttachmentBounds()(_QWORD *a1)
{
  uint64_t (*v1)(void);
  _QWORD *v2;
  UIView_optional *v3;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1150);
  v2 = a1;
  v3 = (UIView_optional *)v1();
  if (!v3)
    v3 = (UIView_optional *)objc_msgSend(v2, sel_superview);
  PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v3);

  return 0.0;
}

double @objc PaperTextAttachmentView.drawingTextAttachmentBounds(forContainerView:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  UIView_optional *v5;
  id v6;

  v5 = a3;
  v6 = a1;
  PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(a3);

  return 0.0;
}

void PaperTextAttachmentView.didBeginDrawingInCanvasElementView(_:)()
{
  char *v0;
  void *v1;
  id v2;
  char v3;

  v1 = v0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v2 = *(id *)&v0[direct field offset for Canvas.paperView];
  v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0)
    objc_msgSend(v1, sel_becomeFirstResponder);
}

void *PaperTextAttachmentView.attachmentViewForCanvasElementView(_:)()
{
  void *v0;
  id v1;

  v1 = v0;
  return v0;
}

uint64_t PaperTextAttachmentView.hitChromeForCanvasElementView(_:location:isStylus:)(double a1, double a2, uint64_t a3, char a4)
{
  uint64_t v4;
  id v8;
  char v9;
  CGFloat v10;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v8 = *(id *)(v4 + direct field offset for Canvas.paperView);
  v9 = static NSObject.== infix(_:_:)();

  if ((v9 & 1) != 0
    && (objc_msgSend((id)objc_opt_self(), sel_resizeHitSize),
        (PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(a1, a2, v10) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4 & 1, a1, a2);
  }
}

Swift::Bool __swiftcall PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  void *v4;
  UIGestureRecognizer *v5;
  id v6;
  char v7;
  Swift::Bool result;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  UIGestureRecognizer *v16;
  id v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  unsigned __int8 v29;
  NSString *v30;
  Class v31;
  __C::CGRect v32;

  v2 = v1;
  v4 = *(void **)&v1[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer];
  if (!v4
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v5 = a1, v6 = v4, v7 = static NSObject.== infix(_:_:)(), v5, v6, (v7 & 1) == 0))
  {
    v15 = *(void **)&v2[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer];
    if (v15
      && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v16 = a1, v17 = v15, v18 = static NSObject.== infix(_:_:)(), v16, v17, (v18 & 1) != 0))
    {
      -[UIGestureRecognizer locationInView:](v16, sel_locationInView_, v2);
      v20 = v19;
      v22 = v21;
      objc_msgSend(v2, sel_bounds);
      v24 = v23;
      v26 = v25;
      v32.origin.x = v27;
      v32.origin.y = v28;
      v32.size.width = v24;
      v32.size.height = v26;
      v29 = PaperTextAttachmentView.hit(byTouchLocation:canvasBounds:)((CGPoint)__PAIR128__(v22, v20), v32);
    }
    else
    {
      v30 = (NSString *)MEMORY[0x1DF0E41AC](0xD00000000000001CLL, 0x80000001DDF4DB40);
      v31 = NSClassFromString(v30);

      if (!v31)
      {
        v14 = 1;
        return v14 & 1;
      }
      v29 = -[UIGestureRecognizer isKindOfClass:](a1, sel_isKindOfClass_, v31);
    }
    v14 = v29 ^ 1;
    return v14 & 1;
  }
  v9 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v9)
  {
    v10 = v9;
    v11 = swift_bridgeObjectRetain();
    v12 = specialized Sequence.compactMap<A>(_:)(v11, (uint64_t)v10);

    swift_bridgeObjectRelease();
    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v14 = v13 != 0;
    return v14 & 1;
  }
  __break(1u);
  return result;
}

uint64_t @objc PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  UIGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LOBYTE(a1) = PaperTextAttachmentView.gestureRecognizerShouldBegin(_:)(v4);

  return a1 & 1;
}

Swift::Bool __swiftcall PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  id v7;
  UIGestureRecognizer *v8;
  char v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  void *v15;
  _BOOL4 v16;
  NSString *v17;
  Class v18;

  v4 = *(void **)(v2 + direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer);
  if (!v4
    || (v5 = v2,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v7 = v4, v8 = _, v9 = static NSObject.== infix(_:_:)(), v8, v7, (v9 & 1) == 0))
  {
    v17 = (NSString *)MEMORY[0x1DF0E41AC](0xD00000000000001CLL, 0x80000001DDF4DB40);
    v18 = NSClassFromString(v17);

    if (v18)
      return -[UIGestureRecognizer isKindOfClass:](_, sel_isKindOfClass_, v18) ^ 1;
LABEL_8:
    LOBYTE(v16) = 1;
    return v16;
  }
  -[objc_class locationInView:](shouldReceive.super.isa, sel_locationInView_, v5);
  v11 = v10;
  v13 = v12;
  objc_msgSend((id)objc_opt_self(), sel_resizeHitSize);
  if ((PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(v11, v13, v14) & 1) == 0)
  {
    LOBYTE(v16) = 0;
    return v16;
  }
  v15 = *(void **)(v5 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (!v15)
    goto LABEL_8;
  LOBYTE(v16) = 1;
  objc_msgSend(v15, sel_setHighlighted_, 1);
  return v16;
}

BOOL @objc PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  UIGestureRecognizer *v6;
  id v7;
  id v8;
  Swift::Bool v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = PaperTextAttachmentView.gestureRecognizer(_:shouldReceive:)(v6, (UITouch)v7);

  return v9;
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeGestureRecognizerDidChangeState(_:)(UIGestureRecognizer *a1)
{
  uint64_t v1;
  void *v2;
  _BOOL8 v4;
  id v5;

  v2 = *(void **)(v1 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (v2)
  {
    v5 = v2;
    v4 = (id)-[UIGestureRecognizer state](a1, sel_state) == (id)1
      || (id)-[UIGestureRecognizer state](a1, sel_state) == (id)2;
    objc_msgSend(v5, sel_setHighlighted_, v4);

  }
}

uint64_t @objc PaperTextAttachmentView.gestureRecognizerShouldDelayLift(_:)(char *a1, uint64_t a2, void *a3)
{
  void *v3;
  id v6;
  char *v7;
  id v8;
  char v9;

  v3 = *(void **)&a1[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer];
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v6 = a3;
    v7 = a1;
    v8 = v3;
    v9 = static NSObject.== infix(_:_:)();

  }
  else
  {
    v9 = 0;
  }
  return v9 & 1;
}

void @objc PaperTextAttachmentView.tapBelowGesture(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized PaperTextAttachmentView.tapBelowGesture(_:)();

}

Swift::Void __swiftcall PaperTextAttachmentView.addGestures()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v0, sel_noOpForGesture_);
  objc_msgSend(v1, sel_setDelegate_, v0);
  v2 = *(void **)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer];
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = v1;
  v3 = v1;

  objc_msgSend(v0, sel_addGestureRecognizer_, v3);
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v0, sel_tapBelowGesture_);
  objc_msgSend(v4, sel_setDelegate_, v0);
  v5 = *(void **)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer];
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = v4;
  v13 = v4;

  objc_msgSend(v0, sel_addGestureRecognizer_, v13);
  v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ResizeGestureRecognizer()), sel_initWithTarget_action_, v0, sel_resizeGesture_);
  v7 = direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer;
  v8 = *(void **)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer];
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = v6;

  v9 = *(void **)&v0[v7];
  if (v9
    && (objc_msgSend(v9, sel_setDelegate_, v0), (v10 = *(void **)&v0[v7]) != 0)
    && (v11 = v10,
        v12 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001BLL, 0x80000001DDF4D830),
        objc_msgSend(v11, sel_setName_, v12),
        v11,
        v12,
        *(_QWORD *)&v0[v7]))
  {
    objc_msgSend(v0, sel_addGestureRecognizer_);

  }
  else
  {
    __break(1u);
  }
}

id PaperTextAttachmentView.hitTestResizeHandles(location:threshold:)(CGFloat a1, CGFloat a2, CGFloat a3)
{
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  double v19;
  double v20;
  void *v21;
  CGPoint v23;
  CGPoint v24;
  CGRect v25;
  CGRect v26;

  v4 = *(void **)&v3[direct field offset for PaperTextAttachmentView.bottomResizeView];
  if (!v4)
    return 0;
  v5 = v3;
  v6 = *(void **)&v3[direct field offset for PaperTextAttachmentView.topResizeView];
  if (!v6)
    return 0;
  v10 = v4;
  v11 = v6;
  objc_msgSend(v5, sel_bounds);
  v13 = a3 * 0.5;
  if (a3 * 0.5 + v12 * 0.5 <= a3)
    v14 = a3 * 0.5 + v12 * 0.5;
  else
    v14 = a3;
  if (objc_msgSend(v5, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
  {
    objc_msgSend(v5, sel_bounds);
    v16 = v15 - v13;
    v17 = a3 * -0.5;
  }
  else
  {
    v17 = a3 * -0.5;
    v16 = a3 * -0.5;
  }
  objc_msgSend(v5, sel_bounds);
  v20 = v19;
  v25.origin.x = v16;
  v25.origin.y = v17;
  v25.size.width = a3;
  v25.size.height = v14;
  v23.x = a1;
  v23.y = a2;
  if (CGRectContainsPoint(v25, v23) && (objc_msgSend(v11, sel_shown) & 1) != 0)
  {
    v18 = 0;
    v21 = v11;
  }
  else
  {
    v26.origin.y = v13 + v20 - v14;
    v26.origin.x = v16;
    v26.size.width = a3;
    v26.size.height = v14;
    v24.x = a1;
    v24.y = a2;
    if (CGRectContainsPoint(v26, v24))
      v18 = objc_msgSend(v10, sel_shown);
    else
      v18 = 0;
    v21 = v10;
    v10 = v11;
  }

  return v18;
}

void __swiftcall PaperTextAttachmentView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  void *v4;
  void *v5;
  objc_class *isa;
  double y;
  double x;
  id v9;
  UIEvent_optional v10;
  UIView_optional *v11;
  UIEvent_optional v12;
  UIView_optional *v13;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  v4 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v4)
  {
    v5 = v3;
    isa = with.value.super.isa;
    y = _.y;
    x = _.x;
    v9 = v4;
    if (objc_msgSend(v9, sel_isHidden))
    {

LABEL_4:
      v16.receiver = v5;
      v16.super_class = (Class)type metadata accessor for PaperTextAttachmentView();
      -[UIView_optional hitTest:withEvent:](&v16, sel_hitTest_withEvent_, isa, x, y);
      return;
    }
    v10.value.super.isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v10);
    if (v12.value.super.isa)
    {

    }
    else
    {
      v12.value.super.isa = isa;
      ResizeView.hitTestChrome(_:with:)(v13, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v12);
      v15 = v14;

      if (!v15)
        goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
}

id @objc PaperTextAttachmentView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  PaperTextAttachmentView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

Swift::Void __swiftcall PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)(Swift::Bool _, Swift::Bool animated, Swift::Bool highlightBackground)
{
  _QWORD *v3;
  BOOL v6;
  char v7;
  double v8;
  uint64_t (*v9)(void);
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;

  if (_)
  {
    *(_QWORD *)&_ = objc_msgSend(v3, sel_frame);
    v6 = 0;
    v7 = 0;
    if (v8 > 1.0 && !highlightBackground)
    {
      v7 = PaperTextAttachmentView.isAtBeginningOfDocument.getter() ^ 1;
      PaperTextAttachmentView.isAtEndOfDocument.getter();
      v6 = !_;
    }
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x1150);
  v10 = (void *)((uint64_t (*)(Swift::Bool))v9)(_);
  v11 = v10;
  if (v10)
  {
    v12 = objc_msgSend(v10, sel__pkTiledViewIfEnabled);

    if (!v12)
    {
      LODWORD(v11) = 0;
      v13 = (void *)v9();
      if (!v13)
        goto LABEL_14;
      goto LABEL_10;
    }
    LODWORD(v11) = objc_msgSend(v12, sel_allowsFingerDrawing);

  }
  v13 = (void *)v9();
  if (!v13)
    goto LABEL_14;
LABEL_10:
  v14 = v13;
  if (highlightBackground)
    v15 = objc_msgSend(v13, sel_selectionHighlightColor);
  else
    v15 = 0;
  objc_msgSend(v3, sel_setBackgroundColor_, v15);

LABEL_14:
  v16 = *(void **)((char *)v3 + direct field offset for PaperTextAttachmentView.topResizeView);
  if (v16)
    objc_msgSend(v16, sel_show_enabled_animated_, v7 & 1, v11 ^ 1, animated);
  v17 = *(void **)((char *)v3 + direct field offset for PaperTextAttachmentView.bottomResizeView);
  if (v17)
    objc_msgSend(v17, sel_show_enabled_animated_, v6, v11 ^ 1, animated);
  PaperTextAttachmentView.updateTouchInsets(fingerDrawingEnabled:)((Swift::Bool)v11);
}

Swift::Void __swiftcall PaperTextAttachmentView.resizeGesture(_:)(UIPanGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = direct field offset for PaperTextAttachmentView.resizeInfo;
  v11 = *(_QWORD *)&v1[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v11)
    goto LABEL_2;
  type metadata accessor for ResizeInfo();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  v13 = *MEMORY[0x1E0C9D628];
  v14 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 16);
  v16 = *(_QWORD *)(MEMORY[0x1E0C9D628] + 24);
  *(_QWORD *)(v12 + 32) = *MEMORY[0x1E0C9D628];
  *(_QWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 48) = v15;
  *(_QWORD *)(v12 + 56) = v16;
  *(_QWORD *)(v12 + 64) = v13;
  *(_QWORD *)(v12 + 72) = v14;
  *(_QWORD *)(v12 + 80) = v15;
  *(_QWORD *)(v12 + 88) = v16;
  *(_QWORD *)(v12 + 96) = v13;
  *(_QWORD *)(v12 + 104) = v14;
  *(_QWORD *)(v12 + 112) = v15;
  *(_QWORD *)(v12 + 120) = v16;
  *(_QWORD *)&v1[v10] = v12;
  if (v12)
  {
    v17 = v12;
    swift_retain();
    *(double *)(v17 + 32) = PaperTextAttachmentView.safePaperModelBounds.getter();
    *(_QWORD *)(v17 + 40) = v18;
    *(_QWORD *)(v17 + 48) = v19;
    *(_QWORD *)(v17 + 56) = v20;
    swift_release();
    v21 = *(double **)&v1[v10];
    if (v21)
    {
      v22 = *(_QWORD *)&v1[direct field offset for Canvas.paperView]
          + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v1[direct field offset for Canvas.paperView]) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v22, v4);
      swift_retain();
      v23 = Capsule<>.contentBounds(includeDrawing:)(1);
      v25 = v24;
      v27 = v26;
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      v21[8] = v23;
      *((_QWORD *)v21 + 9) = v25;
      *((_QWORD *)v21 + 10) = v27;
      *((_QWORD *)v21 + 11) = v29;
      swift_release();
      v30 = *(_QWORD **)&v2[v10];
      if (v30)
      {
        swift_retain();
        objc_msgSend(v2, sel_frame);
        v30[12] = v31;
        v30[13] = v32;
        v30[14] = v33;
        v30[15] = v34;
        swift_release();
        v11 = *(_QWORD *)&v2[v10];
        if (v11)
        {
LABEL_2:
          *(_BYTE *)(v11 + 16) = 0;
          objc_msgSend(*(id *)&v2[direct field offset for PaperTextAttachmentView.bottomResizeView], sel_handleGesture_, a1, v7);
        }
      }
    }
  }
}

void @objc PaperTextAttachmentView.resizeGesture(_:)(void *a1, uint64_t a2, void *a3)
{
  UIPanGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  PaperTextAttachmentView.resizeGesture(_:)(v4);

}

Swift::Void __swiftcall PaperTextAttachmentView.updateTouchInsets(fingerDrawingEnabled:)(Swift::Bool fingerDrawingEnabled)
{
  char *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  unsigned int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  void *v13;

  v4 = *MEMORY[0x1E0DC49E8];
  v3 = *(double *)(MEMORY[0x1E0DC49E8] + 8);
  v6 = *(double *)(MEMORY[0x1E0DC49E8] + 16);
  v5 = *(double *)(MEMORY[0x1E0DC49E8] + 24);
  v7 = objc_msgSend(v1, sel_isFirstResponder);
  v8 = 0.0;
  if (fingerDrawingEnabled)
    v9 = v5;
  else
    v9 = 0.0;
  v10 = -10.0;
  if (fingerDrawingEnabled)
    v11 = v6;
  else
    v11 = -10.0;
  if (fingerDrawingEnabled)
  {
    v8 = v3;
    v10 = v4;
  }
  if (v7)
  {
    v5 = v9;
    v6 = v11;
    v3 = v8;
    v4 = v10;
  }
  objc_msgSend(v1, sel__setTouchInsets_, v4, v3, v6, v5);
  v12 = *(void **)&v1[direct field offset for PaperTextAttachmentView.bottomResizeView];
  if (v12)
    objc_msgSend(v12, sel__setTouchInsets_, v4, v3, v6, v5);
  v13 = *(void **)&v1[direct field offset for PaperTextAttachmentView.topResizeView];
  if (v13)
    objc_msgSend(v13, sel__setTouchInsets_, v4, v3, v6, v5);
}

id @objc PaperTextAttachmentView.updateAfterTextViewChange()(void *a1)
{
  return objc_msgSend(a1, sel_setNeedsLayout);
}

double PaperTextAttachmentView.safePaperModelBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void (*v10)(_BYTE *, uint64_t, uint64_t);
  void (*v11)(_BYTE *, uint64_t);
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  _BYTE v17[24];
  double v18;
  double v19;
  double v20;
  double v21;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = direct field offset for Canvas.paperView;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
     + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  v10 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16);
  v10(v6, v9, v2);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.subscript.getter();
  swift_release();
  v11 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if (!CGRect.isFinite.getter(v18, v19, v20, v21))
  {
    v12 = *(_QWORD *)(v1 + v7) + *(_QWORD *)((*v8 & **(_QWORD **)(v1 + v7)) + 0x380);
    swift_beginAccess();
    v10(v6, v12, v2);
    v13 = Capsule<>.contentBounds(includeDrawing:)(1);
    v15 = v14;
    ((void (*)(_BYTE *, uint64_t, double))v11)(v6, v2, v13);
    v20 = *MEMORY[0x1E0CD12F0];
    v21 = v15;
    v18 = 0.0;
    v19 = 0.0;
    if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    {
      if (one-time initialization token for minimumTextAttachmentHeight != -1)
        swift_once();
LABEL_8:
      v21 = *(double *)&static UIConstants.minimumTextAttachmentHeight;
      return v18;
    }
    if (one-time initialization token for minimumTextAttachmentHeight != -1)
      swift_once();
    if (v15 < *(double *)&static UIConstants.minimumTextAttachmentHeight)
      goto LABEL_8;
  }
  return v18;
}

id @objc PaperTextAttachmentView.resizeViewTextView(_:)(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t (*v4)(void);
  id v5;
  _QWORD *v6;
  void *v7;

  v4 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1150);
  v5 = a3;
  v6 = a1;
  v7 = (void *)v4();

  return v7;
}

double @objc PaperTextAttachmentView.resizeViewDrawingBounds(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  double v6;

  v4 = a3;
  v5 = a1;
  v6 = specialized PaperTextAttachmentView.resizeViewDrawingBounds(_:)();

  return v6;
}

void @objc PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(void *a1, double a2, double a3, uint64_t a4, void *a5, char a6)
{
  id v10;
  id v11;

  v11 = a5;
  v10 = a1;
  specialized PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(a6, a2, a3);

}

void @objc PaperTextAttachmentView.resizeViewRemoveAttachment(_:)(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t (*v4)(void);
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1150);
  v5 = a3;
  v9 = a1;
  v6 = (_QWORD *)v4();
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)((char *)v9 + direct field offset for PaperTextAttachmentView.textAttachment);
    if (v8)
      objc_msgSend(v6, sel__removeDrawingAttachment_withView_forDeletion_, v8, v9, 0);

    v5 = v9;
    v9 = v7;
  }

}

void @objc PaperTextAttachmentView.resizeViewLayoutAttachment(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  __C::CGRect v6;

  v5 = a3;
  v4 = a1;
  objc_msgSend(v4, sel_frame);
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v6, 1, 1, 1);

}

char *@objc PaperTextAttachmentView.resizeView(_:finishedWithOriginalDrawingBounds:originalViewBounds:)(char *result, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  id v8;

  v3 = direct field offset for PaperTextAttachmentView.resizeInfo;
  v4 = *(_QWORD *)&result[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v4)
  {
    v6 = result;
    v7 = result;
    swift_retain();
    v8 = a3;
    specialized Canvas.undoable(newChange:persistSelection:action:)(1, 0, v7, (uint64_t)v7, v4);
    *(_QWORD *)&v6[v3] = 0;

    swift_release();
    return (char *)swift_release();
  }
  return result;
}

void @objc PaperTextAttachmentView.resizeViewDidUpdate(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  PaperTextAttachmentView.setAdjustResizeIndicatorVisible(_:animated:highlightBackground:)((Swift::Bool)objc_msgSend(v5, sel_isFirstResponder), 0, 0);

}

void (*PaperTextAttachmentView.calculateDocument.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperTextAttachmentView.calculateDocument.modify;
}

void PaperTextAttachmentView.calculateDocument.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  id v15;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    if (one-time initialization token for mathLogger != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)mathLogger);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1DDB0F000, v5, v6, "setupCanvasMathIfNecessary", v7, 2u);
      MEMORY[0x1DF0E6558](v7, -1, -1);
    }
    v8 = *(_QWORD *)(a1 + 24);

    v9 = direct field offset for Canvas.paperView;
    v10 = *(_QWORD **)(v8 + direct field offset for Canvas.paperView);
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v12 = *(void **)((char *)v10 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v10) + 0x4C0));
    if (v12)
    {
      v13 = v12;
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

      v10 = *(_QWORD **)(v8 + v9);
    }
    v14 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v10 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v14)
    {
      v15 = v14;
      (*(void (**)(void))((*v11 & *v14) + 0x750))();

    }
  }
}

uint64_t PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.setter(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  id v10;

  v2 = v1;
  v3 = *a1;
  v4 = (_BYTE *)(v1 + direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior);
  swift_beginAccess();
  *v4 = v3;
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)mathLogger);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1DDB0F000, v6, v7, "setupCanvasMathIfNecessary", v8, 2u);
    MEMORY[0x1DF0E6558](v8, -1, -1);
  }

  v9 = *(void **)(*(_QWORD *)(v2 + direct field offset for Canvas.paperView)
                + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v2 + direct field offset for Canvas.paperView))
                            + 0x4C0));
  if (v9)
  {
    v10 = v9;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

  }
}

void (*PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify;
}

void PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  void *v9;
  id v10;

  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    if (one-time initialization token for mathLogger != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)mathLogger);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1DDB0F000, v5, v6, "setupCanvasMathIfNecessary", v7, 2u);
      MEMORY[0x1DF0E6558](v7, -1, -1);
    }
    v8 = *(_QWORD *)(a1 + 24);

    v9 = *(void **)(*(_QWORD *)(v8 + direct field offset for Canvas.paperView)
                  + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v8 + direct field offset for Canvas.paperView))
                              + 0x4C0));
    if (v9)
    {
      v10 = v9;
      CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    }
  }
}

uint64_t PaperTextAttachmentView.canvasCalculateDocument.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t PaperTextAttachmentView.canvasCalculateDocumentExpressionSolvingBehavior.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1280))();
}

Swift::Void __swiftcall PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  Class isa;
  objc_class *v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKInk();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = -[objc_class selectedToolItem](a1.super.isa, sel_selectedToolItem, v11);
  PKToolPickerItem.ink.getter((uint64_t)v13);

  isa = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v16 = isa;
  v17 = -[objc_class _isGenerationTool](v16, "_isGenerationTool");

  if (v17 != v2[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool])
  {
    v2[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = v17;
    if (v17)
    {
      v18 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
      type metadata accessor for MainActor();
      v19 = v2;
      v20 = static MainActor.shared.getter();
      v21 = (_QWORD *)swift_allocObject();
      v22 = MEMORY[0x1E0DF06E8];
      v21[2] = v20;
      v21[3] = v22;
      v21[4] = v19;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:), (uint64_t)v21);
      swift_release();
    }
  }
}

uint64_t closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 24) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  specialized static CanvasGenerationTool.preload()();
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  if (v2)
  {
    v3 = v2;
    CanvasGenerationTool.prewarm()();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void @objc PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v5 = a3;
  v4 = a1;
  PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v5);

}

uint64_t type metadata accessor for PaperTextAttachmentView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperTextAttachmentView;
  if (!type metadata singleton initialization cache for PaperTextAttachmentView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PaperTextAttachmentView()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRKeyPath();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t ObjC metadata update function for PaperTextAttachmentView()
{
  return type metadata accessor for PaperTextAttachmentView();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.getter in conformance PaperTextAttachmentView()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.setter in conformance PaperTextAttachmentView(uint64_t a1, uint64_t a2)
{
  specialized PaperTextAttachmentView.calculateDocument.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperTextAttachmentView.calculateDocument.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter in conformance PaperTextAttachmentView()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x1280))();
}

uint64_t protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter in conformance PaperTextAttachmentView(char *a1)
{
  _QWORD **v1;
  char v3;

  v3 = *a1;
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & **v1) + 0x1288))(&v3);
}

uint64_t (*protocol witness for PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify in conformance PaperTextAttachmentView(_QWORD *a1))()
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v1) + 0x1290))();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

Swift::Bool __swiftcall PaperTextAttachmentView._wantsToolPickerVisible(_:)(PKToolPicker a1)
{
  char *v1;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  id v8;
  id v9;

  if (!*(_QWORD *)&v1[direct field offset for PaperTextAttachmentView.textAttachment]
    || (v3 = (void *)swift_dynamicCastObjCProtocolConditional()) == 0
    || (v4 = v3, (objc_msgSend(v3, sel_respondsToSelector_, sel__wantsToolPickerVisible_) & 1) == 0))
  {
    if (-[objc_class isVisible](a1.super.isa, sel_isVisible))
    {
      v6 = -[objc_class _windowScene](a1.super.isa, sel__windowScene);
      v7 = objc_msgSend(v1, sel_window);
      v8 = objc_msgSend(v7, sel_windowScene);

      if (v6)
      {
        if (v8)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindowScene);
          v9 = v6;
          v5 = static NSObject.== infix(_:_:)();

          return v5 & 1;
        }

      }
      else
      {
        if (!v8)
        {
          v5 = 1;
          return v5 & 1;
        }

      }
    }
    v5 = 0;
    return v5 & 1;
  }
  v5 = objc_msgSend(v4, sel__wantsToolPickerVisible_, a1.super.isa);
  return v5 & 1;
}

uint64_t getEnumTagSinglePayload for AttachmentViewExtraHeightForGenerationMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AttachmentViewExtraHeightForGenerationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDB7F6C4 + 4 * byte_1DDF33AE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDB7F6F8 + 4 * asc_1DDF33AE0[v4]))();
}

uint64_t sub_1DDB7F6F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB7F700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB7F708);
  return result;
}

uint64_t sub_1DDB7F714(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB7F71CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDB7F720(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB7F728(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentViewExtraHeightForGenerationMode()
{
  return &type metadata for AttachmentViewExtraHeightForGenerationMode;
}

unint64_t lazy protocol witness table accessor for type AttachmentViewExtraHeightForGenerationMode and conformance AttachmentViewExtraHeightForGenerationMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AttachmentViewExtraHeightForGenerationMode and conformance AttachmentViewExtraHeightForGenerationMode;
  if (!lazy protocol witness table cache variable for type AttachmentViewExtraHeightForGenerationMode and conformance AttachmentViewExtraHeightForGenerationMode)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for AttachmentViewExtraHeightForGenerationMode, &type metadata for AttachmentViewExtraHeightForGenerationMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttachmentViewExtraHeightForGenerationMode and conformance AttachmentViewExtraHeightForGenerationMode);
  }
  return result;
}

void specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  Swift::Int v4;
  Swift::Int v5[2];

  v2 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  v5[0] = (Swift::Int)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

void specialized Set.formSymmetricDifference(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  _QWORD *v50;
  char *v51;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v42 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v50 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v51 = (char *)&v42 - v12;
  v15.n128_f64[0] = MEMORY[0x1E0C80A78](v13, v14);
  v46 = (char *)&v42 - v16;
  v47 = a1;
  v17 = 0;
  v20 = *(_QWORD *)(a1 + 56);
  v19 = a1 + 56;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 24);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  v43 = v19;
  v44 = (unint64_t)(v21 + 63) >> 6;
  v45 = v1;
  while (v23)
  {
    v48 = (v23 - 1) & v23;
    v49 = v17;
    v24 = __clz(__rbit64(v23)) | (v17 << 6);
LABEL_20:
    v29 = v46;
    v30 = v50;
    v31 = v50[9];
    v32 = (void (*)(char *, unint64_t, uint64_t, __n128))v50[2];
    v32(v46, *(_QWORD *)(v47 + 48) + v31 * v24, v6, v15);
    ((void (*)(char *, char *, uint64_t))v30[4])(v51, v29, v6);
    v33 = *v1;
    if (*(_QWORD *)(*v1 + 16)
      && (lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]), v34 = dispatch thunk of Hashable._rawHashValue(seed:)(), v35 = -1 << *(_BYTE *)(v33 + 32), v36 = v34 & ~v35, ((*(_QWORD *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0))
    {
      v37 = ~v35;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v32)(v9, *(_QWORD *)(v33 + 48) + v36 * v31, v6);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
        v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        v39 = (void (*)(char *, uint64_t))v50[1];
        v39(v9, v6);
        if ((v38 & 1) != 0)
          break;
        v36 = (v36 + 1) & v37;
        if (((*(_QWORD *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
          goto LABEL_5;
      }
      v40 = v42;
      v41 = v51;
      v1 = v45;
      specialized Set._Variant.remove(_:)((uint64_t)v51, v42);
      outlined destroy of StocksKitCurrencyCache.Provider?(v40, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      v39(v41, v6);
    }
    else
    {
LABEL_5:
      v1 = v45;
      specialized Set._Variant.insert(_:)((uint64_t)v9, v51);
      ((void (*)(char *, uint64_t))v50[1])(v9, v6);
    }
    v23 = v48;
    v17 = v49;
  }
  v25 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v25 >= v44)
    goto LABEL_27;
  v26 = *(_QWORD *)(v43 + 8 * v25);
  v27 = v17 + 1;
  if (v26)
    goto LABEL_19;
  v27 = v17 + 2;
  if (v17 + 2 >= v44)
    goto LABEL_27;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v28 = v17 + 3;
  if (v17 + 3 >= v44)
  {
LABEL_27:
    swift_release();
    return;
  }
  v26 = *(_QWORD *)(v43 + 8 * v28);
  v27 = v17 + 3;
  if (v26)
  {
LABEL_19:
    v48 = (v26 - 1) & v26;
    v49 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v44)
      goto LABEL_27;
    v26 = *(_QWORD *)(v43 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  _QWORD *v50;
  char *v51;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v42 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v50 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v51 = (char *)&v42 - v12;
  v15.n128_f64[0] = MEMORY[0x1E0C80A78](v13, v14);
  v46 = (char *)&v42 - v16;
  v47 = a1;
  v17 = 0;
  v20 = *(_QWORD *)(a1 + 56);
  v19 = a1 + 56;
  v18 = v20;
  v21 = 1 << *(_BYTE *)(v19 - 24);
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v23 = v22 & v18;
  v43 = v19;
  v44 = (unint64_t)(v21 + 63) >> 6;
  v45 = v1;
  while (v23)
  {
    v48 = (v23 - 1) & v23;
    v49 = v17;
    v24 = __clz(__rbit64(v23)) | (v17 << 6);
LABEL_20:
    v29 = v46;
    v30 = v50;
    v31 = v50[9];
    v32 = (void (*)(char *, unint64_t, uint64_t, __n128))v50[2];
    v32(v46, *(_QWORD *)(v47 + 48) + v31 * v24, v6, v15);
    ((void (*)(char *, char *, uint64_t))v30[4])(v51, v29, v6);
    v33 = *v1;
    if (*(_QWORD *)(*v1 + 16)
      && (lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]), v34 = dispatch thunk of Hashable._rawHashValue(seed:)(), v35 = -1 << *(_BYTE *)(v33 + 32), v36 = v34 & ~v35, ((*(_QWORD *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0))
    {
      v37 = ~v35;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v32)(v9, *(_QWORD *)(v33 + 48) + v36 * v31, v6);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
        v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        v39 = (void (*)(char *, uint64_t))v50[1];
        v39(v9, v6);
        if ((v38 & 1) != 0)
          break;
        v36 = (v36 + 1) & v37;
        if (((*(_QWORD *)(v33 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
          goto LABEL_5;
      }
      v40 = v42;
      v41 = v51;
      v1 = v45;
      specialized Set._Variant.remove(_:)((uint64_t)v51, v42);
      outlined destroy of StocksKitCurrencyCache.Provider?(v40, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      v39(v41, v6);
    }
    else
    {
LABEL_5:
      v1 = v45;
      specialized Set._Variant.insert(_:)((uint64_t)v9, v51);
      ((void (*)(char *, uint64_t))v50[1])(v9, v6);
    }
    v23 = v48;
    v17 = v49;
  }
  v25 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v25 >= v44)
    goto LABEL_27;
  v26 = *(_QWORD *)(v43 + 8 * v25);
  v27 = v17 + 1;
  if (v26)
    goto LABEL_19;
  v27 = v17 + 2;
  if (v17 + 2 >= v44)
    goto LABEL_27;
  v26 = *(_QWORD *)(v43 + 8 * v27);
  if (v26)
    goto LABEL_19;
  v28 = v17 + 3;
  if (v17 + 3 >= v44)
  {
LABEL_27:
    swift_release();
    return;
  }
  v26 = *(_QWORD *)(v43 + 8 * v28);
  v27 = v17 + 3;
  if (v26)
  {
LABEL_19:
    v48 = (v26 - 1) & v26;
    v49 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v44)
      goto LABEL_27;
    v26 = *(_QWORD *)(v43 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
}

id specialized CRRegister<>.isEraserStroke<A>(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD v47[3];
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;

  v55 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v51, v5);
  v52 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v47 - v9;
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v54 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v11);
  v50 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v27, v28);
  v48 = (char *)v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v53 = (uint64_t)v47 - v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v26, 1, v33) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return 0;
  }
  v35 = type metadata accessor for Paper();
  v47[0] = v34;
  v36 = v35;
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v38 = (uint64_t)v48;
  v39 = v55;
  v47[1] = v37;
  v47[2] = v36;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v47[0] + 8))(v26, v33);
  outlined init with take of PKStrokeStruct(v38, v53);
  v40 = v50;
  v41 = v39;
  v42 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v50, v41, v49);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<Paper> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, MEMORY[0x1E0D12B28]);
  while (1)
  {
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v10, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v4, v13);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v40, v42);
  v43 = (uint64_t)v52;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v44 = v56;
  outlined destroy of PKStrokeProperties(v43, type metadata accessor for PKStrokeInheritedProperties);
  if (!v44)
  {
    outlined destroy of PKStrokeProperties(v53, type metadata accessor for PKStrokeStruct);
    return 0;
  }
  v45 = objc_msgSend(v44, sel__isEraserInk);

  outlined destroy of PKStrokeProperties(v53, type metadata accessor for PKStrokeStruct);
  return v45;
}

uint64_t specialized CRRegister<>.isEraserStroke<A>(in:createdBefore:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;

  v81 = a2;
  v88 = a1;
  v2 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v80 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v75, v5);
  v76 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v77 = *(_QWORD *)(v7 - 8);
  v78 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v74 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v79 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v82 = (char *)&v71 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v86, v20);
  v87 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v71 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v89 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v71 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v71 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v73, v39);
  v41 = (char *)&v71 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v85 = (char *)&v71 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v90 = (uint64_t)&v71 - v47;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v34, v31);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v38, 1, v48) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_12:
    v67 = 0;
    return v67 & 1;
  }
  v72 = v41;
  v50 = (uint64_t)v85;
  v51 = v88;
  v89 = v49;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v38, v48);
  outlined init with take of PKStrokeStruct(v50, v90);
  v91 = v51;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref, MEMORY[0x1E0D12A88]);
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v25, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v19, 1, v26) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v19, v26);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  swift_release();
  v52 = (uint64_t)v87;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v53 = v91;
  outlined destroy of PKStrokeProperties(v52, type metadata accessor for PKStrokeInheritedProperties);
  if (!v53)
  {
    v69 = v90;
LABEL_11:
    outlined destroy of PKStrokeProperties(v69, type metadata accessor for PKStrokeStruct);
    goto LABEL_12;
  }
  v54 = objc_msgSend(v53, sel__isEraserInk);
  v55 = v90;
  v56 = (uint64_t)v72;
  outlined init with copy of PKStrokeStruct(v90, (uint64_t)v72);
  v58 = v82;
  v57 = v83;
  v59 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v81, v84);
  if ((v54 & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    outlined destroy of PKStrokeProperties(v56, type metadata accessor for PKStrokeStruct);
    v69 = v55;
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v60 = (uint64_t)v76;
  CRRegister.wrappedValue.getter();
  v61 = v74;
  v63 = v77;
  v62 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v74, v60 + *(int *)(v75 + 32), v78);
  outlined destroy of PKStrokeProperties(v60, type metadata accessor for PKStrokeProperties);
  v64 = v80;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v62);
  v65 = v79;
  PKStrokePath.creationDate.getter();
  v66 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v64, v66);
  v67 = static Date.< infix(_:_:)();

  v68 = *(void (**)(char *, uint64_t))(v57 + 8);
  v68(v65, v59);
  v68(v58, v59);
  outlined destroy of PKStrokeProperties(v56, type metadata accessor for PKStrokeStruct);
  outlined destroy of PKStrokeProperties(v90, type metadata accessor for PKStrokeStruct);
  return v67 & 1;
}

uint64_t specialized CRRegister<>.creationDate<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v40 = a1;
  v42 = a2;
  v2 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v41 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v37, v5);
  v38 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v39 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v35 - v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v18, 1, v27) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return static Date.distantPast.getter();
  }
  else
  {
    v35 = type metadata accessor for Paper();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
    outlined init with take of PKStrokeStruct((uint64_t)v22, (uint64_t)v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v30 = (uint64_t)v38;
    CRRegister.wrappedValue.getter();
    v31 = v36;
    v32 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v36, v30 + *(int *)(v37 + 32), v7);
    outlined destroy of PKStrokeProperties(v30, type metadata accessor for PKStrokeProperties);
    v33 = v41;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v7);
    PKStrokePath.creationDate.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v26, type metadata accessor for PKStrokeStruct);
    v34 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  }
}

uint64_t specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;

  v3 = v2;
  v31 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v3 + *(int *)(v23 + 20), v9);
  v33 = a1;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:), (uint64_t)v32, v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
    v24 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v31, 1, 1, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
    type metadata accessor for Paper();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Ref.subscript.getter();
    v26 = v31;
    specialized CRRegister<>.creationDate<A>(in:)(a1, v31);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v27 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
}

uint64_t specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned __int8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Ref.subscript.getter();
  v8 = specialized CRRegister<>.isEraserStroke<A>(in:)(a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, _QWORD);
  uint64_t v30;
  _QWORD v31[2];
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _UNKNOWN **v39;
  char v40[32];
  uint64_t v41;

  v34 = a2;
  v41 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v41, v3);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v33 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v35 = (char *)v31 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Paper();
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v39 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule.Ref<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  Ref.subscript.getter();
  v31[1] = a1;
  v32 = v5;
  v22 = &v5[*(int *)(v41 + 20)];
  v23 = v36;
  v24 = v33;
  v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 16))(v33, v22, v6);
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = v34;
  v31[-2] = a1;
  v31[-1] = v27;
  v28 = v35;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v6);
  outlined destroy of PKStrokeProperties((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  v29 = (void (*)(char *, _QWORD))Ref.subscript.modify();
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(v30 + *(int *)(v41 + 20), v28, v6);
  v29(v40, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

BOOL specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v10 = specialized CRRegister<>.isEraserStroke<A>(in:createdBefore:)(a2, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return (v10 & 1) == 0;
}

uint64_t specialized Capsule<>.hasAnyEraserStrokes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v1, v2);
  v34 = (uint64_t)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for Date();
  v35 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v4);
  v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v32 = (char *)&v30 - v8;
  v9 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Paper();
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v38 = &protocol witness table for Paper;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v22 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v16, v17);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Ref.subscript.getter();
    v23 = v32;
    static Date.now.getter();
    v24 = v34;
    v30 = v12;
    specialized PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(v0, v34);
    v25 = v35;
    v26 = v33;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v24, 1, v33) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for Date?);
      v22 = 0;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v26);
    }
    else
    {
      v27 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v31, v24, v26);
      v22 = static Date.< infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v25 + 8);
      v28(v27, v26);
      v28(v23, v26);
    }
    outlined destroy of PKStrokeProperties((uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }
  return v22 & 1;
}

void specialized closure #1 in Canvas.setupBandSelection()(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  void *v49;
  _UNKNOWN **v50;
  id v51;
  double v52;
  double v53;
  double v54;
  double v55;
  char *v56;
  void *v57;
  id v58;
  uint64_t ObjectType;
  uint64_t (*v60)(uint64_t, _UNKNOWN **);
  id v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  void *v75;
  _UNKNOWN **v76;
  id v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, _UNKNOWN **);
  id v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  id v87;
  double v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  _QWORD *v95;
  void *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  char *v107;
  uint64_t v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  char *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  char *v126;
  _QWORD v127[2];
  uint64_t v128;
  char *v129;
  void *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  id v146;
  uint64_t v147[4];
  _OWORD v148[2];
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  char v153[8];
  _QWORD v154[4];
  char v155;

  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v127 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v137 = (char *)v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v13);
  v136 = (char *)v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v134 = (char *)v127 - v17;
  v139 = type metadata accessor for NSFastEnumerationIterator();
  v132 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v18);
  v138 = (char *)v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v20, v21);
  v144 = (char *)v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v143 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v27 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142, v28);
  v145 = (char *)v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v30, v31);
  v133 = (uint64_t)v127 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v127 - v35;
  v37 = swift_projectBox();
  swift_beginAccess();
  v38 = MEMORY[0x1DF0E666C](a2 + 16);
  if (!v38)
    return;
  v39 = (char *)v38;
  switch((unint64_t)objc_msgSend(a1, sel_state))
  {
    case 1uLL:
      v40 = v39;
      v41 = *(_QWORD *)&v39[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v41)
        goto LABEL_73;
      v42 = v37;
      v43 = a3;
      v44 = (uint64_t *)(v41 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      v45 = *v44;
      v46 = v44[1];
      v47 = v44[2];
      v48 = *((_BYTE *)v44 + 24);
      swift_beginAccess();
      *(_QWORD *)(v43 + 16) = v45;
      *(_QWORD *)(v43 + 24) = v46;
      *(_QWORD *)(v43 + 32) = v47;
      *(_BYTE *)(v43 + 40) = v48;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = *(void **)&v40[direct field offset for Canvas._editingView];
      if (v49)
      {
        v50 = *(_UNKNOWN ***)&v40[direct field offset for Canvas._editingView + 8];
        v51 = *(id *)&v40[direct field offset for Canvas._editingView];
      }
      else
      {
        v51 = *(id *)&v40[direct field offset for Canvas.paperView];
        v50 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      ObjectType = swift_getObjectType();
      v60 = (uint64_t (*)(uint64_t, _UNKNOWN **))v50[2];
      v61 = v49;
      v62 = (void *)v60(ObjectType, v50);

      if (v62)
      {
        v63 = objc_msgSend(v62, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        v64 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v36, 0, 1, v64);
      }
      else
      {

        v65 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v36, 1, 1, v65);
      }
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v36, v42, &demangling cache variable for type metadata for PKDrawing?);
      return;
    case 2uLL:
      v128 = v37;
      v127[1] = a3 + 16;
      UIBandSelectionInteraction.selectionRect.getter();
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v153, (uint64_t)v154, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if ((v155 & 1) != 0)
        goto LABEL_3;
      v127[0] = a3;
      v52 = *(double *)v154;
      v53 = *(double *)&v154[1];
      v54 = *(double *)&v154[2];
      v55 = *(double *)&v154[3];
      v56 = &v39[direct field offset for Canvas._editingView];
      v57 = *(void **)&v39[direct field offset for Canvas._editingView];
      v129 = v9;
      if (v57)
      {
        v58 = v57;
      }
      else
      {
        v58 = *(id *)&v39[direct field offset for Canvas.paperView];
        v57 = 0;
      }
      v66 = v57;
      objc_msgSend(v58, sel_convertRect_fromCoordinateSpace_, v39, v52, v53, v54, v55);
      v68 = v67;
      v70 = v69;
      v72 = v71;
      v74 = v73;

      v151 = MEMORY[0x1E0DEE9E8];
      v152 = MEMORY[0x1E0DEE9E8];
      v75 = *(void **)v56;
      v135 = v39;
      if (v75)
      {
        v76 = (_UNKNOWN **)*((_QWORD *)v56 + 1);
        v77 = v75;
      }
      else
      {
        v77 = *(id *)&v39[direct field offset for Canvas.paperView];
        v76 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      v78 = swift_getObjectType();
      v79 = (uint64_t (*)(uint64_t, _UNKNOWN **))v76[7];
      v80 = v75;
      v81 = v79(v78, v76);

      v82 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v149 = MEMORY[0x1E0DEE9D8];
      if (v81 >> 62)
      {
        swift_bridgeObjectRetain();
        v83 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v83 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v130 = a1;
      if (v83)
      {
        if (v83 < 1)
        {
          __break(1u);
          goto LABEL_72;
        }
        v84 = 0;
        v131 = v26;
        do
        {
          if ((v81 & 0xC000000000000001) != 0)
            v85 = (_QWORD *)MEMORY[0x1DF0E4D64](v84, v81);
          else
            v85 = *(id *)(v81 + 8 * v84 + 32);
          v86 = v85;
          v87 = objc_msgSend(v135, sel_bounds, v127[0]);
          if (((*(uint64_t (**)(id, double, double, double, double, double, double, double, double))((*MEMORY[0x1E0DEEDD8] & *v86) + 0x328))(v87, v68, v70, v72, v74, v88, v89, v90, v91) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            v26 = v131;
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {

          }
          ++v84;
        }
        while (v83 != v84);
        swift_bridgeObjectRelease();
        v92 = v149;
        a1 = v130;
        v82 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        swift_bridgeObjectRelease();
        v92 = MEMORY[0x1E0DEE9D8];
      }
      if (v92 < 0 || (v92 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        v93 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v93)
        {
LABEL_36:
          v147[0] = v82;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93 & ~(v93 >> 63), 0);
          if ((v93 & 0x8000000000000000) == 0)
          {
            for (i = 0; i != v93; ++i)
            {
              if ((v92 & 0xC000000000000001) != 0)
                v95 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v92);
              else
                v95 = *(id *)(v92 + 8 * i + 32);
              v96 = v95;
              (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v95) + 0xE8))();
              SharedTagged_9.tag.getter();
              *(_QWORD *)&v148[0] = v149;
              BYTE8(v148[0]) = BYTE8(v149);
              MEMORY[0x1DF0E3408](v23);
              lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
              WeakTagged_9.init(_:id:)();
              (*(void (**)(char *, uint64_t))(v143 + 8))(v26, v23);

              v97 = v147[0];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v97 + 16) + 1, 1);
                v97 = v147[0];
              }
              v99 = *(_QWORD *)(v97 + 16);
              v98 = *(_QWORD *)(v97 + 24);
              if (v99 >= v98 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
                v97 = v147[0];
              }
              *(_QWORD *)(v97 + 16) = v99 + 1;
              (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v97+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v99, v145, v142);
            }
            swift_release();
            a1 = v130;
            goto LABEL_50;
          }
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          JUMPOUT(0x1DDB8273CLL);
        }
      }
      else
      {
        v93 = *(_QWORD *)(v92 + 16);
        if (v93)
          goto LABEL_36;
      }
      swift_release();
      v97 = MEMORY[0x1E0DEE9D8];
LABEL_50:
      v100 = specialized Set.init<A>(_:)(v97);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v152 = v100;
      v101 = v128;
      swift_beginAccess();
      v102 = v101;
      v103 = v133;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v102, v133, &demangling cache variable for type metadata for PKDrawing?);
      v104 = type metadata accessor for PKDrawing();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 48))(v103, 1, v104) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v103, &demangling cache variable for type metadata for PKDrawing?);
      }
      else
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
        swift_dynamicCast();
        v105 = (void *)v149;
        v106 = objc_msgSend((id)v149, sel_intersectedStrokesFromRect_visibleOnscreenStrokes_, 0, v68, v70, v72, v74);

        v107 = (char *)v106;
        NSOrderedSet.makeIterator()();
        v145 = v107;

        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
        dispatch thunk of IteratorProtocol.next()();
        if (v150)
        {
          v108 = MEMORY[0x1E0DEE9D8];
          do
          {
            outlined init with take of Any(&v149, v148);
            outlined init with copy of Any((uint64_t)v148, (uint64_t)v147);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
            if (swift_dynamicCast())
            {
              v109 = v146;
              v110 = objc_msgSend(v146, sel__strokeUUID);
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              CRKeyPath.init(_:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
              v111 = (uint64_t)v137;
              WeakRef.init(id:)();

              v112 = 0;
            }
            else
            {
              v112 = 1;
              v111 = (uint64_t)v137;
            }
            v113 = v141;
            v114 = v140;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v111, v112, 1, v141);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v111, 1, v113) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v111, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
            }
            else
            {
              v115 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 32);
              v116 = v134;
              v115(v134, v111, v113);
              v115(v136, (uint64_t)v116, v113);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v108 + 16) + 1, 1, v108);
              v118 = *(_QWORD *)(v108 + 16);
              v117 = *(_QWORD *)(v108 + 24);
              if (v118 >= v117 >> 1)
                v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1, v108);
              *(_QWORD *)(v108 + 16) = v118 + 1;
              v115((char *)(v108+ ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80))+ *(_QWORD *)(v140 + 72) * v118), (uint64_t)v136, v141);
              a1 = v130;
            }
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v150);
        }
        else
        {
          v108 = MEMORY[0x1E0DEE9D8];
        }
        (*(void (**)(char *, uint64_t))(v132 + 8))(v138, v139);

        v119 = specialized Set.init<A>(_:)(v108);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v151 = v119;
      }
      v120 = objc_msgSend(a1, sel_initialModifierFlags, v127[0]);
      v121 = v127[0];
      if (v120 == (id)0x20000)
      {
        swift_beginAccess();
        v122 = *(_QWORD *)(v121 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v122);
        v123 = swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v123);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v125 = v151;
      v124 = v152;
      v126 = v135;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.selection.setter(v124, v125, 6, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    default:
LABEL_3:

      return;
  }
}

uint64_t specialized closure #2 in Canvas.setupBandSelection()(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _UNKNOWN **v11;
  id v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, _UNKNOWN **);
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v25;

  v6 = a4 + 16;
  swift_beginAccess();
  v7 = (_QWORD *)MEMORY[0x1DF0E666C](v6);
  v8 = (uint64_t)v7;
  if (v7)
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x2C8))(&v25);
    if ((_BYTE)v25 && *(_BYTE *)(v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) == 1)
    {
      v10 = *(void **)(v8 + direct field offset for Canvas._editingView);
      if (v10)
      {
        v11 = *(_UNKNOWN ***)(v8 + direct field offset for Canvas._editingView + 8);
        v12 = *(id *)(v8 + direct field offset for Canvas._editingView);
      }
      else
      {
        v12 = *(id *)(v8 + direct field offset for Canvas.paperView);
        v11 = &protocol witness table for ContainerCanvasElementView<A>;
      }
      ObjectType = swift_getObjectType();
      v14 = (uint64_t (*)(uint64_t, _UNKNOWN **))v11[7];
      v15 = v10;
      v16 = v14(ObjectType, v11);

      if (v16 >> 62)
        goto LABEL_20;
      v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v17; v17 = _CocoaArrayWrapper.endIndex.getter())
      {
        v18 = 4;
        while (1)
        {
          v19 = (v16 & 0xC000000000000001) != 0
              ? (_QWORD *)MEMORY[0x1DF0E4D64](v18 - 4, v16)
              : *(id *)(v16 + 8 * v18);
          v20 = v19;
          v21 = v18 - 3;
          if (__OFADD__(v18 - 4, 1))
            break;
          if (((*(uint64_t (**)(void))((*v9 & *v19) + 0x218))() & 1) == 0)
          {
            objc_msgSend(v20, sel_convertPoint_fromCoordinateSpace_, v8, a1, a2);
            v22 = objc_msgSend(v20, sel_hitTest_withEvent_, 0);
            if (v22)
            {
              v23 = v22;

              swift_bridgeObjectRelease();
              v8 = 0;
              goto LABEL_22;
            }
          }

          ++v18;
          if (v21 == v17)
            goto LABEL_21;
        }
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
      }
LABEL_21:

      swift_bridgeObjectRelease();
      v8 = 1;
LABEL_22:
      swift_bridgeObjectRelease();
    }
    else
    {

      return 0;
    }
  }
  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool)(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t (*v7)(double, double);
  id v8;

  v7 = *(uint64_t (**)(double, double))(a1 + 32);
  swift_retain();
  v8 = a2;
  LOBYTE(v7) = v7(a3, a4);
  swift_release();

  return v7 & 1;
}

void specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    specialized Canvas.removeOldEraserStrokes()();

  }
}

uint64_t specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  v6[11] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6[12] = v7;
  v6[13] = *(_QWORD *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = *(_QWORD *)(v0 + 64) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 128) = v2;
  v3 = *(_QWORD *)(v0 + 88);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    specialized Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 88), (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
      *(_QWORD *)(v0 + 144) = type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 152) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
      if (one-time initialization token for logger != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1DDB0F000, v8, v9, "Removed old eraser stroke(s)", v10, 2u);
        MEMORY[0x1DF0E6558](v10, -1, -1);
      }

      type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 136) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
    }
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;

  v1 = *(_QWORD **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release();
  v8 = 3;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x538);
  v5 = type metadata accessor for Paper();
  v6 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v4(v2, &v8, v5, v6);
  v9 = 3;
  (*(void (**)(char *))((*v3 & *v1) + 0x518))(&v9);
  return swift_task_switch();
}

{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[15], v0[12]);
  v0[18] = type metadata accessor for MainActor();
  v0[19] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_release();
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[16];
  v3 = v0[13];
  v2 = v0[14];
  v4 = v0[12];
  swift_release();
  v5 = *(_QWORD *)(v1 + direct field offset for Canvas.paperView)
     + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  if ((specialized Capsule<>.hasAnyEraserStrokes()() & 1) != 0)
  {
    v1 = *(void **)(v0 + 128);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release();
  specialized Canvas.stopCheckingForOldEraserStrokes(index:)(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(Swift::Int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  Swift::Int v26;
  char *v27;
  Swift::Int v28;
  uint64_t v29;
  void (*v30)(char *, Swift::Int, uint64_t);
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  Swift::Int v48;
  int v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  __int16 v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  Swift::Int v82;
  Swift::Int v83;
  Swift::Int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::Int v88;
  Swift::Int v89;
  Swift::Int v90;
  void (*v91)(char *, uint64_t, uint64_t);
  __int16 v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  __int16 v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  int v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  Swift::Int v112;
  char *v113;
  void (*v114)(char *, Swift::Int, uint64_t);
  uint64_t v115;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  void (*v121)(char *, uint64_t, uint64_t);
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  char v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  Swift::Int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  char *v177;
  char *v178;
  Swift::Int v179;
  char *v180;
  unint64_t v181;
  void (*v182)(char *, uint64_t, uint64_t);
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  Swift::Int v186;
  uint64_t v187;
  Swift::Int *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;

  v2 = v1;
  v196 = *MEMORY[0x1E0C80C00];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v178 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v185 = (char *)&v174 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v190 = (char *)&v174 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v188 = a1;
  v189 = (char *)&v174 - v16;
  v17 = a1[1];
  v18 = _minimumMergeRunLength(_:)(v17);
  if (v18 >= v17)
  {
    if (v17 < 0)
      goto LABEL_159;
    if (v17)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v17, 1, v188);
  }
  else
  {
    if (v17 >= 0)
      v19 = v17;
    else
      v19 = v17 + 1;
    if (v17 < -1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      v191 = v4;
      v176 = v18;
      v184 = (_QWORD *)v5;
      if (v17 >= 2)
      {
        v20 = v19 >> 1;
        v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)(v21 + 16) = v20;
        v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v175 = v21;
        v181 = v21 + v22;
LABEL_12:
        v24 = 0;
        v23 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          v26 = (Swift::Int)v24;
          v27 = v24 + 1;
          v180 = v24;
          if ((uint64_t)(v24 + 1) >= v17)
          {
            v48 = (Swift::Int)(v24 + 1);
          }
          else
          {
            v186 = v17;
            v28 = *v188;
            v29 = v184[9];
            v30 = (void (*)(char *, Swift::Int, uint64_t))v184[2];
            v31 = v191;
            v30(v189, *v188 + v29 * (_QWORD)v27, v191);
            v179 = v28;
            v187 = v29;
            v30(v190, v28 + v29 * v26, v31);
            v194 = UUID.uuid.getter();
            LOWORD(v195) = v32;
            BYTE2(v195) = v33;
            BYTE3(v195) = v34;
            BYTE4(v195) = v35;
            BYTE5(v195) = v36;
            BYTE6(v195) = v37;
            HIBYTE(v195) = v38;
            v192 = UUID.uuid.getter();
            LOWORD(v193) = v39;
            BYTE2(v193) = v40;
            BYTE3(v193) = v41;
            BYTE4(v193) = v42;
            BYTE5(v193) = v43;
            BYTE6(v193) = v44;
            HIBYTE(v193) = v45;
            v46 = bswap64(v194);
            v47 = bswap64(v192);
            if (v46 == v47 && (v46 = bswap64(v195), v47 = bswap64(v193), v46 == v47))
            {
              LODWORD(v183) = 0;
              v17 = v186;
            }
            else
            {
              v17 = v186;
              if (v46 < v47)
                v49 = -1;
              else
                v49 = 1;
              LODWORD(v183) = v49;
            }
            v50 = (void (*)(char *, uint64_t))v184[1];
            v51 = v191;
            v50(v190, v191);
            v50(v189, v51);
            v48 = v26 + 2;
            if (v26 + 2 >= v17)
            {
LABEL_35:
              if ((v183 & 0x80000000) != 0)
                goto LABEL_38;
            }
            else
            {
              v177 = v23;
              v174 = v2;
              v52 = v187 * (_QWORD)v27;
              v53 = v179;
              v54 = v187 * v48;
              while (1)
              {
                v55 = v48;
                v56 = v191;
                v30(v189, v53 + v54, v191);
                v30(v190, v53 + v52, v56);
                v194 = UUID.uuid.getter();
                LOWORD(v195) = v57;
                BYTE2(v195) = v58;
                BYTE3(v195) = v59;
                BYTE4(v195) = v60;
                BYTE5(v195) = v61;
                BYTE6(v195) = v62;
                HIBYTE(v195) = v63;
                v192 = UUID.uuid.getter();
                LOWORD(v193) = v64;
                BYTE2(v193) = v65;
                BYTE3(v193) = v66;
                BYTE4(v193) = v67;
                BYTE5(v193) = v68;
                BYTE6(v193) = v69;
                HIBYTE(v193) = v70;
                v71 = bswap64(v194);
                v72 = bswap64(v192);
                if (v71 != v72)
                  goto LABEL_29;
                v71 = bswap64(v195);
                v72 = bswap64(v193);
                if (v71 == v72)
                  v73 = 0;
                else
LABEL_29:
                  v73 = v71 < v72 ? -1 : 1;
                v74 = v191;
                v50(v190, v191);
                v50(v189, v74);
                if (((v73 ^ v183) & 0x80000000) != 0)
                  break;
                v48 = v55 + 1;
                v17 = v186;
                v53 += v187;
                if (v186 == v48)
                {
                  v48 = v186;
                  v2 = v174;
                  v23 = v177;
                  v26 = (Swift::Int)v180;
                  goto LABEL_35;
                }
              }
              v2 = v174;
              v23 = v177;
              v48 = v55;
              v26 = (Swift::Int)v180;
              v17 = v186;
              if ((v183 & 0x80000000) != 0)
              {
LABEL_38:
                if (v48 < v26)
                  goto LABEL_162;
                if (v26 < v48)
                {
                  v177 = v23;
                  v75 = 0;
                  v76 = v187 * (v48 - 1);
                  v77 = v48 * v187;
                  v78 = v26 * v187;
                  v182 = (void (*)(char *, uint64_t, uint64_t))v48;
                  do
                  {
                    if (v26 != v48 + v75 - 1)
                    {
                      if (!v179)
                        goto LABEL_165;
                      v80 = v2;
                      v81 = v179 + v78;
                      v82 = v179 + v76;
                      v83 = v179;
                      v183 = v184[4];
                      ((void (*)(char *, Swift::Int, uint64_t))v183)(v178, v179 + v78, v191);
                      if (v78 < v76 || v81 >= v83 + v77)
                      {
                        v79 = v191;
                        swift_arrayInitWithTakeFrontToBack();
                      }
                      else
                      {
                        v79 = v191;
                        if (v78 != v76)
                          swift_arrayInitWithTakeBackToFront();
                      }
                      ((void (*)(Swift::Int, char *, uint64_t))v183)(v82, v178, v79);
                      v2 = v80;
                      v48 = (Swift::Int)v182;
                    }
                    ++v26;
                    --v75;
                    v76 -= v187;
                    v77 -= v187;
                    v78 += v187;
                  }
                  while (v26 < v48 + v75);
                  v23 = v177;
                  v26 = (Swift::Int)v180;
                  v17 = v186;
                }
              }
            }
          }
          if (v48 >= v17)
            goto LABEL_76;
          if (__OFSUB__(v48, v26))
            goto LABEL_158;
          if (v48 - v26 >= v176)
            goto LABEL_76;
          if (__OFADD__(v26, v176))
            goto LABEL_160;
          if (v26 + v176 >= v17)
            v84 = v17;
          else
            v84 = v26 + v176;
          if (v84 < v26)
          {
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
          }
          if (v48 == v84)
            goto LABEL_76;
          v177 = v23;
          v174 = v2;
          v85 = v184[9];
          v182 = (void (*)(char *, uint64_t, uint64_t))v184[2];
          v183 = v85;
          v186 = v48 * v85;
          v187 = v85 * (v48 - 1);
          v86 = v191;
          v179 = v84;
          while (2)
          {
            v87 = 0;
            v88 = v26;
            while (1)
            {
              v89 = v48;
              v90 = *v188;
              v91 = v182;
              v182(v189, v186 + v87 + *v188, v86);
              v91(v190, v187 + v87 + v90, v86);
              v194 = UUID.uuid.getter();
              LOWORD(v195) = v92;
              BYTE2(v195) = v93;
              BYTE3(v195) = v94;
              BYTE4(v195) = v95;
              BYTE5(v195) = v96;
              BYTE6(v195) = v97;
              HIBYTE(v195) = v98;
              v192 = UUID.uuid.getter();
              LOWORD(v193) = v99;
              BYTE2(v193) = v100;
              BYTE3(v193) = v101;
              BYTE4(v193) = v102;
              BYTE5(v193) = v103;
              BYTE6(v193) = v104;
              HIBYTE(v193) = v105;
              v106 = bswap64(v194);
              v107 = bswap64(v192);
              if (v106 == v107)
              {
                v106 = bswap64(v195);
                v107 = bswap64(v193);
                v108 = v184;
                if (v106 == v107)
                {
                  v109 = 0;
                  goto LABEL_72;
                }
              }
              else
              {
                v108 = v184;
              }
              v109 = v106 < v107 ? -1 : 1;
LABEL_72:
              v110 = (void (*)(char *, uint64_t))v108[1];
              v111 = v191;
              v110(v190, v191);
              v110(v189, v111);
              if ((v109 & 0x80000000) == 0)
                break;
              v112 = *v188;
              if (!*v188)
                goto LABEL_163;
              v113 = (char *)(v112 + v187 + v87);
              v114 = (void (*)(char *, Swift::Int, uint64_t))v108[4];
              v115 = v191;
              v114(v185, v112 + v186 + v87, v191);
              v86 = v115;
              swift_arrayInitWithTakeFrontToBack();
              v114(v113, (Swift::Int)v185, v115);
              v87 -= v183;
              ++v88;
              v48 = v89;
              if (v89 == v88)
                goto LABEL_62;
            }
            v86 = v191;
            v48 = v89;
LABEL_62:
            ++v48;
            v187 += v183;
            v186 += v183;
            v26 = (Swift::Int)v180;
            if (v48 != v179)
              continue;
            break;
          }
          v48 = v179;
          v2 = v174;
          v23 = v177;
LABEL_76:
          if (v48 < v26)
            goto LABEL_153;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v182 = (void (*)(char *, uint64_t, uint64_t))v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
          v118 = *((_QWORD *)v23 + 2);
          v117 = *((_QWORD *)v23 + 3);
          v25 = v118 + 1;
          if (v118 >= v117 >> 1)
            v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v117 > 1), v118 + 1, 1, v23);
          *((_QWORD *)v23 + 2) = v25;
          v119 = v23 + 32;
          v120 = &v23[16 * v118 + 32];
          v121 = v182;
          *(_QWORD *)v120 = v26;
          *((_QWORD *)v120 + 1) = v121;
          if (v118)
          {
            while (2)
            {
              v122 = v25 - 1;
              if (v25 >= 4)
              {
                v127 = &v119[16 * v25];
                v128 = *((_QWORD *)v127 - 8);
                v129 = *((_QWORD *)v127 - 7);
                v133 = __OFSUB__(v129, v128);
                v130 = v129 - v128;
                if (v133)
                  goto LABEL_142;
                v132 = *((_QWORD *)v127 - 6);
                v131 = *((_QWORD *)v127 - 5);
                v133 = __OFSUB__(v131, v132);
                v125 = v131 - v132;
                v126 = v133;
                if (v133)
                  goto LABEL_143;
                v134 = v25 - 2;
                v135 = &v119[16 * v25 - 32];
                v137 = *(_QWORD *)v135;
                v136 = *((_QWORD *)v135 + 1);
                v133 = __OFSUB__(v136, v137);
                v138 = v136 - v137;
                if (v133)
                  goto LABEL_145;
                v133 = __OFADD__(v125, v138);
                v139 = v125 + v138;
                if (v133)
                  goto LABEL_148;
                if (v139 >= v130)
                {
                  v157 = &v119[16 * v122];
                  v159 = *(_QWORD *)v157;
                  v158 = *((_QWORD *)v157 + 1);
                  v133 = __OFSUB__(v158, v159);
                  v160 = v158 - v159;
                  if (v133)
                    goto LABEL_152;
                  v150 = v125 < v160;
                }
                else
                {
LABEL_95:
                  if ((v126 & 1) != 0)
                    goto LABEL_144;
                  v134 = v25 - 2;
                  v140 = &v119[16 * v25 - 32];
                  v142 = *(_QWORD *)v140;
                  v141 = *((_QWORD *)v140 + 1);
                  v143 = __OFSUB__(v141, v142);
                  v144 = v141 - v142;
                  v145 = v143;
                  if (v143)
                    goto LABEL_147;
                  v146 = &v119[16 * v122];
                  v148 = *(_QWORD *)v146;
                  v147 = *((_QWORD *)v146 + 1);
                  v133 = __OFSUB__(v147, v148);
                  v149 = v147 - v148;
                  if (v133)
                    goto LABEL_150;
                  if (__OFADD__(v144, v149))
                    goto LABEL_151;
                  if (v144 + v149 < v125)
                    goto LABEL_107;
                  v150 = v125 < v149;
                }
                if (v150)
                  v122 = v134;
              }
              else
              {
                if (v25 == 3)
                {
                  v124 = *((_QWORD *)v23 + 4);
                  v123 = *((_QWORD *)v23 + 5);
                  v133 = __OFSUB__(v123, v124);
                  v125 = v123 - v124;
                  v126 = v133;
                  goto LABEL_95;
                }
                v151 = *((_QWORD *)v23 + 4);
                v152 = *((_QWORD *)v23 + 5);
                v133 = __OFSUB__(v152, v151);
                v144 = v152 - v151;
                v145 = v133;
LABEL_107:
                if ((v145 & 1) != 0)
                  goto LABEL_146;
                v153 = &v119[16 * v122];
                v155 = *(_QWORD *)v153;
                v154 = *((_QWORD *)v153 + 1);
                v133 = __OFSUB__(v154, v155);
                v156 = v154 - v155;
                if (v133)
                  goto LABEL_149;
                if (v156 < v144)
                  goto LABEL_14;
              }
              v161 = v122 - 1;
              if (v122 - 1 >= v25)
              {
                __break(1u);
LABEL_139:
                __break(1u);
LABEL_140:
                __break(1u);
LABEL_141:
                __break(1u);
LABEL_142:
                __break(1u);
LABEL_143:
                __break(1u);
LABEL_144:
                __break(1u);
LABEL_145:
                __break(1u);
LABEL_146:
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
                goto LABEL_161;
              }
              if (!*v188)
                goto LABEL_164;
              v162 = v23;
              v163 = &v119[16 * v161];
              v164 = *(_QWORD *)v163;
              v165 = &v119[16 * v122];
              v166 = *((_QWORD *)v165 + 1);
              specialized _merge<A>(low:mid:high:buffer:by:)(*v188 + v184[9] * *(_QWORD *)v163, *v188 + v184[9] * *(_QWORD *)v165, *v188 + v184[9] * v166, v181);
              if (v2)
                goto LABEL_136;
              if (v166 < v164)
                goto LABEL_139;
              if (v122 > *((_QWORD *)v162 + 2))
                goto LABEL_140;
              *(_QWORD *)v163 = v164;
              *(_QWORD *)&v119[16 * v161 + 8] = v166;
              v167 = *((_QWORD *)v162 + 2);
              if (v122 >= v167)
                goto LABEL_141;
              v23 = v162;
              v25 = v167 - 1;
              memmove(&v119[16 * v122], v165 + 16, 16 * (v167 - 1 - v122));
              *((_QWORD *)v162 + 2) = v167 - 1;
              if (v167 <= 2)
                goto LABEL_14;
              continue;
            }
          }
          v25 = 1;
LABEL_14:
          v17 = v188[1];
          v24 = (char *)v182;
          if ((uint64_t)v182 >= v17)
            goto LABEL_125;
        }
      }
      v23 = (char *)MEMORY[0x1E0DEE9D8];
      v181 = MEMORY[0x1E0DEE9D8]
           + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v175 = MEMORY[0x1E0DEE9D8];
      if (v17 == 1)
        goto LABEL_12;
      v25 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_125:
      if (v25 >= 2)
      {
        v168 = *v188;
        do
        {
          v169 = v25 - 2;
          if (v25 < 2)
            goto LABEL_154;
          if (!v168)
            goto LABEL_166;
          v170 = *(_QWORD *)&v23[16 * v169 + 32];
          v171 = *(_QWORD *)&v23[16 * v25 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v168 + v184[9] * v170, v168 + v184[9] * *(_QWORD *)&v23[16 * v25 + 16], v168 + v184[9] * v171, v181);
          if (v2)
            break;
          if (v171 < v170)
            goto LABEL_155;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v23 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v23);
          if (v169 >= *((_QWORD *)v23 + 2))
            goto LABEL_156;
          v172 = &v23[16 * v169 + 32];
          *(_QWORD *)v172 = v170;
          *((_QWORD *)v172 + 1) = v171;
          v173 = *((_QWORD *)v23 + 2);
          if (v25 > v173)
            goto LABEL_157;
          memmove(&v23[16 * v25 + 16], &v23[16 * v25 + 32], 16 * (v173 - v25));
          *((_QWORD *)v23 + 2) = v173 - 1;
          v25 = v173 - 1;
        }
        while (v173 > 2);
      }
LABEL_136:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v175 + 16) = 0;
      swift_bridgeObjectRelease();
    }
  }
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  __int16 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v50 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for UUID();
  v57 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v15.n128_f64[0] = MEMORY[0x1E0C80A78](v12, v13);
  v17 = (char *)&v48 - v16;
  v53 = a3;
  v49 = a2;
  if (a3 != a2)
  {
    v18 = v14;
    v19 = v57[9];
    v51 = (void (*)(uint64_t, uint64_t, uint64_t))v57[2];
    v52 = v19;
    v58 = v19 * v53;
    v59 = v19 * (v53 - 1);
    do
    {
      v20 = 0;
      v21 = v50;
      do
      {
        v22 = *a4;
        v56 = v58 + v20;
        v23 = v51;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v51)(v17, v58 + v20 + v22, v7, v15);
        v55 = v59 + v20;
        v23(v18, v59 + v20 + v22, v7);
        v62 = UUID.uuid.getter();
        LOWORD(v63) = v24;
        BYTE2(v63) = v25;
        BYTE3(v63) = v26;
        BYTE4(v63) = v27;
        BYTE5(v63) = v28;
        BYTE6(v63) = v29;
        HIBYTE(v63) = v30;
        v60 = UUID.uuid.getter();
        LOWORD(v61) = v31;
        BYTE2(v61) = v32;
        BYTE3(v61) = v33;
        BYTE4(v61) = v34;
        BYTE5(v61) = v35;
        BYTE6(v61) = v36;
        HIBYTE(v61) = v37;
        v38 = bswap64(v62);
        v39 = bswap64(v60);
        if (v38 == v39 && (v38 = bswap64(v63), v39 = bswap64(v61), v38 == v39))
        {
          v40 = 0;
        }
        else if (v38 < v39)
        {
          v40 = -1;
        }
        else
        {
          v40 = 1;
        }
        v41 = (void (*)(uint64_t, uint64_t))v57[1];
        v41(v18, v7);
        v41((uint64_t)v17, v7);
        if ((v40 & 0x80000000) == 0)
          break;
        v42 = *a4;
        if (!*a4)
          __break(1u);
        v43 = v17;
        v44 = v18;
        v45 = a4;
        v46 = (char *)(v42 + v59 + v20);
        v47 = (void (*)(char *, uint64_t, uint64_t))v57[4];
        v47(v54, v42 + v58 + v20, v7);
        swift_arrayInitWithTakeFrontToBack();
        v47(v46, (uint64_t)v54, v7);
        v20 -= v52;
        ++v21;
        a4 = v45;
        v18 = v44;
        v17 = v43;
      }
      while (v53 != v21);
      v59 += v52;
      v58 += v52;
      ++v53;
    }
    while (v53 != v49);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v23)(char *, unint64_t, uint64_t);
  __int16 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  void (*v41)(char *, uint64_t);
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  unint64_t v49;
  __int16 v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  __int16 v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(unint64_t, uint64_t);
  unint64_t v71;
  unint64_t v72;
  uint64_t result;
  uint64_t v74;
  void (*v75)(char *, unint64_t, uint64_t);
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87[2];

  v87[1] = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v79 = v15;
  v80 = (char *)&v74 - v14;
  v16 = *(_QWORD *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1)
    goto LABEL_74;
  v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1)
LABEL_75:
    __break(1u);
  v18 = (uint64_t)(a2 - a1) / v16;
  v86 = a4;
  v87[0] = a1;
  v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v45 = a4 + v21;
      v85 = a4 + v21;
      v87[0] = a2;
      if (v21 >= 1 && a1 < a2)
      {
        v77 = -v16;
        v78 = (unint64_t)v11;
        v75 = *(void (**)(char *, unint64_t, uint64_t))(v79 + 16);
        v76 = a1;
        do
        {
          v47 = v77;
          v48 = v75;
          v75(v80, v45 + v77, v8);
          v49 = a2 + v47;
          v48(v11, a2 + v47, v8);
          v83 = UUID.uuid.getter();
          LOWORD(v84) = v50;
          BYTE2(v84) = v51;
          BYTE3(v84) = v52;
          BYTE4(v84) = v53;
          BYTE5(v84) = v54;
          BYTE6(v84) = v55;
          HIBYTE(v84) = v56;
          v81 = UUID.uuid.getter();
          LOWORD(v82) = v57;
          BYTE2(v82) = v58;
          BYTE3(v82) = v59;
          BYTE4(v82) = v60;
          BYTE5(v82) = v61;
          BYTE6(v82) = v62;
          HIBYTE(v82) = v63;
          v64 = bswap64(v83);
          v65 = bswap64(v81);
          if (v64 == v65 && (v64 = bswap64(v84), v65 = bswap64(v82), v64 == v65))
          {
            v66 = 0;
            v67 = v77;
          }
          else
          {
            v67 = v77;
            if (v64 < v65)
              v66 = -1;
            else
              v66 = 1;
          }
          v68 = a3;
          v69 = a3 + v67;
          v70 = *(void (**)(unint64_t, uint64_t))(v79 + 8);
          v70(v78, v8);
          v70((unint64_t)v80, v8);
          if (v66 < 0)
          {
            if (v68 < a2 || v69 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v72 = v76;
            }
            else
            {
              v72 = v76;
              if (v68 != a2)
                swift_arrayInitWithTakeBackToFront();
            }
            v87[0] += v67;
            v11 = (char *)v78;
          }
          else
          {
            v71 = v85;
            v85 += v67;
            if (v68 < v71 || v69 >= v71)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v68 != v71)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v49 = a2;
            v11 = (char *)v78;
            v72 = v76;
          }
          v45 = v85;
          if (v85 <= a4)
            break;
          a2 = v49;
          a3 = v69;
        }
        while (v49 > v72);
      }
      goto LABEL_72;
    }
  }
  else if ((v18 & 0x8000000000000000) == 0)
  {
    v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v78 = a4 + v20;
    v85 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      v23 = *(void (**)(char *, unint64_t, uint64_t))(v79 + 16);
      do
      {
        v23(v80, a2, v8);
        v23(v11, a4, v8);
        v83 = UUID.uuid.getter();
        LOWORD(v84) = v24;
        BYTE2(v84) = v25;
        BYTE3(v84) = v26;
        BYTE4(v84) = v27;
        BYTE5(v84) = v28;
        BYTE6(v84) = v29;
        HIBYTE(v84) = v30;
        v81 = UUID.uuid.getter();
        LOWORD(v82) = v31;
        BYTE2(v82) = v32;
        BYTE3(v82) = v33;
        BYTE4(v82) = v34;
        BYTE5(v82) = v35;
        BYTE6(v82) = v36;
        HIBYTE(v82) = v37;
        v38 = bswap64(v83);
        v39 = bswap64(v81);
        if (v38 == v39 && (v38 = bswap64(v84), v39 = bswap64(v82), v38 == v39))
        {
          v40 = 0;
        }
        else if (v38 < v39)
        {
          v40 = -1;
        }
        else
        {
          v40 = 1;
        }
        v41 = *(void (**)(char *, uint64_t))(v79 + 8);
        v41(v11, v8);
        v41(v80, v8);
        v42 = v87[0];
        if (v40 < 0)
        {
          v44 = a2 + v16;
          if (v87[0] < a2 || v87[0] >= v44)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v87[0] == a2)
          {
            v42 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v43 = v86 + v16;
          if (v87[0] < v86 || v87[0] >= v43)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v87[0] != v86)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v86 = v43;
          v44 = a2;
        }
        v87[0] = v42 + v16;
        a4 = v86;
        if (v86 >= v78)
          break;
        a2 = v44;
      }
      while (v44 < a3);
    }
LABEL_72:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(v87, &v86, (uint64_t *)&v85);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char v49;
  int64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(char *, unint64_t, uint64_t);
  uint64_t v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  char *v87;

  v76 = a4;
  v57 = a2;
  v58 = a1;
  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v75 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v73 = *(_QWORD *)(v8 - 8);
  v74 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v72 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v71 = (char *)&v56 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v69 = *(_QWORD *)(v14 - 8);
  v70 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v87 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v17);
  v66 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v19);
  v63 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v82 = (char *)&v56 - v23;
  v59 = 0;
  v24 = 0;
  v78 = a3;
  v25 = *(_QWORD *)(a3 + 56);
  v60 = a3 + 56;
  v26 = 1 << *(_BYTE *)(a3 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v25;
  v62 = direct field offset for Canvas.paperView;
  v61 = (unint64_t)(v26 + 63) >> 6;
  v29 = v65;
  while (1)
  {
    if (v28)
    {
      v80 = (v28 - 1) & v28;
      v81 = v24;
      v30 = __clz(__rbit64(v28)) | (v24 << 6);
      goto LABEL_5;
    }
    v50 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v50 >= v61)
      goto LABEL_24;
    v51 = *(_QWORD *)(v60 + 8 * v50);
    v52 = v24 + 1;
    if (!v51)
    {
      v52 = v24 + 2;
      if (v24 + 2 >= v61)
        goto LABEL_24;
      v51 = *(_QWORD *)(v60 + 8 * v52);
      if (!v51)
      {
        v52 = v24 + 3;
        if (v24 + 3 >= v61)
          goto LABEL_24;
        v51 = *(_QWORD *)(v60 + 8 * v52);
        if (!v51)
          break;
      }
    }
LABEL_20:
    v80 = (v51 - 1) & v51;
    v81 = v52;
    v30 = __clz(__rbit64(v51)) + (v52 << 6);
LABEL_5:
    v31 = *(_QWORD *)(v78 + 48);
    v32 = v64;
    v33 = *(_QWORD *)(v64 + 72);
    v77 = v30;
    v79 = *(void (**)(char *, unint64_t, uint64_t))(v64 + 16);
    v79(v82, v31 + v33 * v30, v29);
    v34 = *(_QWORD *)(v76 + v62) + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v76 + v62)) + 0x380);
    swift_beginAccess();
    v35 = v67;
    v36 = v66;
    v37 = v68;
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v34, v68);
    MEMORY[0x1E0C80A78](v38, v39);
    *(&v56 - 4) = type metadata accessor for Paper();
    *(&v56 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    *(&v56 - 2) = (uint64_t)&protocol witness table for Paper;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    v40 = v63;
    v41 = v82;
    v79(v63, (unint64_t)v82, v29);
    WeakTagged_9.tag.getter();
    v83 = v85;
    v84 = v86;
    MEMORY[0x1DF0E30E4](v29);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    v42 = v72;
    SharedTagged_9.init(_:id:)();
    v43 = *(void (**)(char *, uint64_t))(v32 + 8);
    v43(v40, v29);
    v45 = v73;
    v44 = v74;
    v46 = v71;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v71, v42, v74);
    v47 = v70;
    v48 = v87;
    v49 = CROrderedSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v48, v47);
    v43(v41, v29);
    v28 = v80;
    v24 = v81;
    if ((v49 & 1) != 0)
    {
      *(unint64_t *)((char *)v58 + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v77;
      if (__OFADD__(v59++, 1))
      {
        __break(1u);
LABEL_24:
        v55 = v78;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v58, v57, v59, v55);
        return;
      }
    }
  }
  v53 = v24 + 4;
  if (v24 + 4 >= v61)
    goto LABEL_24;
  v51 = *(_QWORD *)(v60 + 8 * v53);
  if (v51)
  {
    v52 = v24 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v52 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v52 >= v61)
      goto LABEL_24;
    v51 = *(_QWORD *)(v60 + 8 * v52);
    ++v53;
    if (v51)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  uint64_t v8;
  void *v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v9 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v8);
    v10 = (char *)v18 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v10, 8 * v6);
    v11 = v9;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v10, v6, a1, (uint64_t)v11);
    v13 = v12;
    swift_release();

    if (v2)
      swift_willThrow();

  }
  else
  {
    v14 = (void *)swift_slowAlloc();
    bzero(v14, 8 * v6);
    v15 = v9;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v6, a1, (uint64_t)v15);
    v13 = v16;
    swift_release();

    MEMORY[0x1DF0E6558](v14, -1, -1);
  }
  return v13;
}

{
  uint64_t v2;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t isStackAllocationSafe;
  uint64_t v8;
  void *v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a1 + 32);
  v5 = v4 & 0x3F;
  v6 = (unint64_t)((1 << v4) + 63) >> 6;
  isStackAllocationSafe = a2;
  v9 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v8);
    v10 = (char *)v16 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v10, 8 * v6);
    v11 = v9;
    v12 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v10, v6, a1, (uint64_t)v11);
    swift_release();

    if (v2)
      swift_willThrow();

  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, 8 * v6);
    v14 = v9;
    v12 = specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v13, v6, a1, (uint64_t)v14);
    swift_release();

    MEMORY[0x1DF0E6558](v13, -1, -1);
  }
  return v12;
}

uint64_t specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(int a1, double a2, double a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41[5];

  v4 = v3;
  v8 = type metadata accessor for PKLassoTool();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v41[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v41[0]) = 0;
  v13 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  result = 0;
  if ((v13 & 1) != 0)
  {
    v38 = v9;
    v39 = v8;
    v40 = a1;
    AnyCanvas.overlays.getter();
    v16 = v15;
    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
    {
      v18 = direct field offset for Canvas.paperView;
      v19 = 16 * v17 + 16;
      while (v17 <= *(_QWORD *)(v16 + 16))
      {
        v20 = *(void **)((char *)v4 + v18);
        v21 = *(id *)(v16 + v19);
        objc_msgSend(v20, sel_convertPoint_toCoordinateSpace_, v21, a2, a3);
        v22 = objc_msgSend(v21, sel_hitTest_withEvent_, 0);

        if (v22)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
        v19 -= 16;
        if (!--v17)
          goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
LABEL_7:
      v23 = swift_bridgeObjectRelease();
      v24 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320))(v23);
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend(v24, sel_allowsFingerDrawing);

        if (v26)
        {
          specialized Canvas.tool.getter(v41);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKTool);
          v27 = v39;
          result = swift_dynamicCast();
          if (!(_DWORD)result)
            return result;
          (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v27);
        }
      }
      if ((v40 & 1) != 0)
        return 0;
    }
    v28 = direct field offset for Canvas.paperView;
    v29 = *(id *)((char *)v4 + direct field offset for Canvas.paperView);
    v30 = specialized ContainerCanvasElementView.subelementViews.getter();

    if (v30 >> 62)
      goto LABEL_29;
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v31; v31 = _CocoaArrayWrapper.endIndex.getter())
    {
      v32 = 4;
      while (1)
      {
        v33 = (v30 & 0xC000000000000001) != 0
            ? (_QWORD *)MEMORY[0x1DF0E4D64](v32 - 4, v30)
            : *(id *)(v30 + 8 * v32);
        v34 = v33;
        v35 = v32 - 3;
        if (__OFADD__(v32 - 4, 1))
          break;
        if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v33) + 0x218))() & 1) == 0)
        {
          objc_msgSend(v34, sel_convertPoint_fromCoordinateSpace_, *(_QWORD *)((char *)v4 + v28), a2, a3);
          v36 = objc_msgSend(v34, sel_hitTest_withEvent_, 0);
          if (v36)
          {
            v37 = v36;
            swift_bridgeObjectRelease_n();

            return 1;
          }
        }

        ++v32;
        if (v35 == v31)
          goto LABEL_30;
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
    }
LABEL_30:
    swift_bridgeObjectRelease_n();
    result = *(_QWORD *)(*(_QWORD *)((char *)v4 + v28)
                       + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v4 + v28)) + 0x4D0));
    if (result)
    {
      result = (uint64_t)objc_msgSend((id)result, sel_hitTest_withEvent_, 0, a2, a3);
      if (result)
      {

        return 1;
      }
    }
  }
  return result;
}

{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31[5];

  v7 = type metadata accessor for PKLassoTool();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v31[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v31[0]) = 0;
  v12 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  LOBYTE(v13) = 0;
  if ((v12 & 1) != 0)
  {
    v28 = v8;
    v29 = v7;
    v30 = a1;
    AnyCanvas.overlays.getter();
    v15 = v14;
    v16 = *(_QWORD *)(v14 + 16);
    if (v16)
    {
      v17 = 16 * v16 + 16;
      while (v16 <= *(_QWORD *)(v15 + 16))
      {
        v18 = *(void **)((char *)v3 + direct field offset for Canvas.paperView);
        v19 = *(id *)(v15 + v17);
        objc_msgSend(v18, sel_convertPoint_toCoordinateSpace_, v19, a2, a3);
        v20 = objc_msgSend(v19, sel_hitTest_withEvent_, 0);

        if (v20)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v13) = 1;
          return v13 & 1;
        }
        v17 -= 16;
        if (!--v16)
          goto LABEL_7;
      }
      __break(1u);
LABEL_15:
      if ((v30 & 1) != 0)
        goto LABEL_16;
LABEL_11:
      LOBYTE(v13) = Canvas.canvasElementOrFormFieldExistsAtPoint(_:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
      return v13 & 1;
    }
LABEL_7:
    v21 = swift_bridgeObjectRelease();
    v22 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x320))(v21);
    if (!v22)
      goto LABEL_15;
    v23 = v22;
    v24 = objc_msgSend(v22, sel_allowsFingerDrawing);

    if (!v24)
      goto LABEL_15;
    specialized Canvas.tool.getter(v31);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKTool);
    v25 = v29;
    v13 = swift_dynamicCast();
    v26 = v30;
    if (v13)
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v25);
      if ((v26 & 1) != 0)
      {
LABEL_16:
        LOBYTE(v13) = 0;
        return v13 & 1;
      }
      goto LABEL_11;
    }
  }
  return v13 & 1;
}

void specialized Canvas.paperView.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  v2 = direct field offset for Canvas.paperView;
  v3 = *(void **)(v1 + direct field offset for Canvas.paperView);
  *(_QWORD *)(v1 + direct field offset for Canvas.paperView) = a1;
  v4 = a1;

  v5 = *(_QWORD *)(v1 + direct field offset for Canvas.scribbleInteraction);
  if (v5)
  {
    v6 = *(id *)(v1 + v2);
    objc_msgSend(v6, sel_addInteraction_, v5);
    if (*(_QWORD *)(v1 + direct field offset for Canvas.indirectScribbleInteraction))
    {
      objc_msgSend(v6, sel_addInteraction_);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void specialized PaperTextAttachmentView.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.paperViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.syncManager] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.syncCancellable] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.saveCancellable] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.textAttachment] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.eatTapGestureRecognizer] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.tapBelowGestureRecognizer] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.topResizeView] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.bottomResizeView] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.resizeDragGestureRecognizer] = 0;
  v1 = &v0[direct field offset for PaperTextAttachmentView.reportedBounds];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  v1[32] = 1;
  v0[direct field offset for PaperTextAttachmentView.safeToCopyNewModelWhenMerging] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.linedPaperView] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.previousLinks] = MEMORY[0x1E0DEE9D8];
  v2 = &v0[direct field offset for PaperTextAttachmentView.paperBoundsHint];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v2[32] = 1;
  v0[direct field offset for PaperTextAttachmentView.shouldBecomeFirstResponder] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.resizeInfo] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.linedPaper] = 0;
  v0[direct field offset for PaperTextAttachmentView.isCurrentToolGenerationTool] = 0;
  v0[direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode] = 2;
  v3 = &v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransform];
  *v3 = 0x3FF0000000000000;
  v3[1] = 0;
  v3[2] = 0;
  v3[3] = 0x3FF0000000000000;
  v3[4] = 0;
  v3[5] = 0;
  *(_QWORD *)&v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransformBoundsWidth] = 0xBFF0000000000000;
  v0[direct field offset for PaperTextAttachmentView.cachedDrawingTransformShouldCrop] = 0;
  swift_unknownObjectWeakInit();
  v4 = &v0[direct field offset for PaperTextAttachmentView.calculateDocument];
  *v4 = 0;
  v4[1] = 0;
  v0[direct field offset for PaperTextAttachmentView.calculateDocumentExpressionSolvingBehavior] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperTextAttachmentView.init(attachment:drawing:inserted:)(void *a1, int a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v74;
  void *v75;
  void (*v76)(char *, char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  int v106;
  id v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char *v111;
  void *v112;
  id v113;
  uint64_t v114;
  void *v115;
  unsigned __int8 v116;
  char *v117;
  id v118;
  uint64_t v119;
  void *v120;
  unsigned __int8 v121;
  id v122;
  NSURL *v123;
  void *v124;
  void *v125;
  unsigned int v126;
  id v127;
  id v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  NSObject *v133;
  uint64_t v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint8_t *v140;
  id v141;
  uint64_t v142;
  void *v143;
  unsigned int v144;
  void (*v145)(char *, uint64_t);
  void *v146;
  uint64_t v147;
  uint64_t ObjectType;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t result;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  void *v171;
  _QWORD *v172;
  id v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _OWORD v178[2];
  uint64_t v179;
  _OWORD v180[2];
  uint64_t v181;
  void *v182;
  uint64_t v183;

  v170 = a2;
  v183 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for URL??);
  MEMORY[0x1E0C80A78](v4, v5);
  v158 = (char *)&v153 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v159 = (char *)&v153 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v161 = (uint64_t)&v153 - v12;
  v13 = type metadata accessor for URL();
  v176 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v153 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v156 = (char *)&v153 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v160 = (char *)&v153 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v153 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v153 - v28;
  v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v172 = *(_QWORD **)(v162 - 8);
  MEMORY[0x1E0C80A78](v162, v30);
  v169 = (uint64_t)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v168 = (uint64_t)&v153 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v164 = (uint64_t)&v153 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v163 = (uint8_t *)&v153 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v174 = (char *)&v153 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v154 = (char *)&v153 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v155 = (uint64_t)&v153 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v157 = (char *)&v153 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v56 = (char *)&v153 - v55;
  MEMORY[0x1E0C80A78](v57, v58);
  v60 = (char *)&v153 - v59;
  MEMORY[0x1E0C80A78](v61, v62);
  v64 = (char *)&v153 - v63;
  MEMORY[0x1E0C80A78](v65, v66);
  v175 = (uint64_t)&v153 - v67;
  if (!a1 || (v182 = &unk_1F049E4E0, (v68 = swift_dynamicCastObjCProtocolConditional()) == 0))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v69 = (void *)v68;
  v167 = v2;
  v171 = a1;
  v173 = a1;
  v70 = objc_msgSend(v69, sel__paperIdentifier);
  v166 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v165 = v71;

  v72 = v176;
  v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v176 + 56);
  v73(v175, 1, 1, v13);
  v181 = 0;
  memset(v180, 0, sizeof(v180));
  v74 = objc_msgSend(v69, sel__encryptionDelegateCRContextURL);
  if (v74)
  {
    v75 = v74;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v76 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v76(v64, v25, v13);
    v73((uint64_t)v64, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v64, 1, v13) != 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      v77 = v175;
      outlined destroy of StocksKitCurrencyCache.Provider?(v175, &demangling cache variable for type metadata for URL?);
      v78 = v64;
      v79 = v77;
      v76(v29, v78, v13);
      v76((char *)v77, v29, v13);
      v73(v77, 0, 1, v13);
      v177 = (uint64_t)v69;
      v80 = v173;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKPaperTextAttachment);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncryptionDelegate);
      v81 = swift_dynamicCast();
      v82 = (uint64_t)v174;
      if ((v81 & 1) == 0)
      {
        v179 = 0;
        memset(v178, 0, sizeof(v178));
      }
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v178, (uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      v83 = v176;
      goto LABEL_27;
    }
  }
  else
  {
    v73((uint64_t)v64, 1, 1, v13);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for URL?);
  if ((objc_msgSend(v69, sel_respondsToSelector_, sel__nonEncryptedContentCRContextURL) & 1) != 0)
  {
    v84 = objc_msgSend(v69, sel__nonEncryptedContentCRContextURL);
    v79 = v175;
    if (v84)
    {
      v85 = v84;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v86 = 0;
    }
    else
    {
      v86 = 1;
    }
    v88 = (uint64_t)v158;
    v73((uint64_t)v56, v86, 1, v13);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v56, (uint64_t)v60, &demangling cache variable for type metadata for URL?);
    v89 = v161;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v60, v161, &demangling cache variable for type metadata for URL?);
    v90 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v172[7];
    v91 = v162;
    v90(v89, 0, 1, v162);
    outlined destroy of StocksKitCurrencyCache.Provider?(v89, (uint64_t *)&demangling cache variable for type metadata for URL??);
    if ((objc_msgSend(v69, sel_respondsToSelector_, sel__nonEncryptedContentCRContextURL) & 1) != 0)
    {
      v92 = objc_msgSend(v69, sel__nonEncryptedContentCRContextURL);
      v82 = (uint64_t)v174;
      v83 = v176;
      if (v92)
      {
        v93 = v92;
        v94 = (uint64_t)v154;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v95 = 0;
      }
      else
      {
        v95 = 1;
        v94 = (uint64_t)v154;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for URL?);
      v73(v94, v95, 1, v13);
      outlined init with take of (key: Int, value: AnyCRValue)?(v94, v88, &demangling cache variable for type metadata for URL?);
      v96 = 0;
      v97 = (uint64_t)v159;
      v91 = v162;
    }
    else
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for URL?);
      v96 = 1;
      v82 = (uint64_t)v174;
      v83 = v176;
      v97 = (uint64_t)v159;
    }
    v90(v88, v96, 1, v91);
    outlined init with take of (key: Int, value: AnyCRValue)?(v88, v97, (uint64_t *)&demangling cache variable for type metadata for URL??);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v172[6])(v97, 1, v91) == 1)
    {
      v98 = (uint64_t *)&demangling cache variable for type metadata for URL??;
      v99 = v97;
    }
    else
    {
      v100 = v155;
      outlined init with take of (key: Int, value: AnyCRValue)?(v97, v155, &demangling cache variable for type metadata for URL?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v100, 1, v13) != 1)
      {
        v102 = (uint64_t)v157;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v157, v100, v13);
        v101 = 0;
        goto LABEL_26;
      }
      v98 = &demangling cache variable for type metadata for URL?;
      v99 = v100;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v99, v98);
    v101 = 1;
    v102 = (uint64_t)v157;
LABEL_26:
    v73(v102, v101, 1, v13);
    outlined init with take of (key: Int, value: AnyCRValue)?(v102, v79, &demangling cache variable for type metadata for URL?);
    goto LABEL_27;
  }
  v87 = v161;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v172[7])(v161, 1, 1, v162);
  outlined destroy of StocksKitCurrencyCache.Provider?(v87, (uint64_t *)&demangling cache variable for type metadata for URL??);
  v82 = (uint64_t)v174;
  v79 = v175;
  v83 = v176;
LABEL_27:
  v103 = (uint64_t)v163;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v79, (uint64_t)v163, &demangling cache variable for type metadata for URL?);
  v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  v105 = 1;
  v106 = v104(v103, 1, v13);
  outlined destroy of StocksKitCurrencyCache.Provider?(v103, &demangling cache variable for type metadata for URL?);
  if (v106 != 1)
  {
    v107 = objc_msgSend(v69, sel__paperBundleURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v105 = 0;
  }
  v73(v82, v105, 1, v13);
  v108 = v164;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v82, v164, &demangling cache variable for type metadata for URL?);
  if (v104(v108, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v108, &demangling cache variable for type metadata for URL?);
    v109 = 0;
  }
  else
  {
    v110 = v176;
    v111 = v160;
    (*(void (**)(char *, uint64_t, uint64_t))(v176 + 32))(v160, v108, v13);
    v112 = (void *)objc_opt_self();
    v113 = objc_msgSend(v112, sel_defaultManager);
    v114 = URL.path.getter();
    v115 = (void *)MEMORY[0x1DF0E41AC](v114);
    swift_bridgeObjectRelease();
    v116 = objc_msgSend(v113, sel_isWritableFileAtPath_, v115);

    if ((v116 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v13);
      v109 = 3;
    }
    else
    {
      v117 = v156;
      URL.deletingLastPathComponent()();
      v118 = objc_msgSend(v112, sel_defaultManager);
      v119 = URL.absoluteString.getter();
      v120 = (void *)MEMORY[0x1DF0E41AC](v119);
      swift_bridgeObjectRelease();
      v121 = objc_msgSend(v118, sel_fileExistsAtPath_, v120);

      if ((v121 & 1) == 0)
      {
        v122 = objc_msgSend(v112, sel_defaultManager);
        URL._bridgeToObjectiveC()(v123);
        v125 = v124;
        *(_QWORD *)&v178[0] = 0;
        v126 = objc_msgSend(v122, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v124, 1, 0, v178);

        if (v126)
        {
          v127 = *(id *)&v178[0];
        }
        else
        {
          v128 = *(id *)&v178[0];
          v129 = (_QWORD *)_convertNSErrorToError(_:)();

          v172 = v129;
          swift_willThrow();
          if (one-time initialization token for logger != -1)
            swift_once();
          v130 = type metadata accessor for Logger();
          __swift_project_value_buffer(v130, (uint64_t)logger);
          v131 = v176;
          v132 = v153;
          (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v153, v117, v13);
          v133 = Logger.logObject.getter();
          v134 = v131;
          v135 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v133, v135))
          {
            v136 = (uint8_t *)swift_slowAlloc();
            v164 = swift_slowAlloc();
            *(_QWORD *)&v178[0] = v164;
            *(_DWORD *)v136 = 136315138;
            v163 = v136 + 4;
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
            v137 = dispatch thunk of CustomStringConvertible.description.getter();
            v177 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, (uint64_t *)v178);
            v117 = v156;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v176 + 8))(v132, v13);
            _os_log_impl(&dword_1DDB0F000, v133, v135, "Failed to create PaperKit parent directory at: %s", v136, 0xCu);
            v139 = v164;
            swift_arrayDestroy();
            MEMORY[0x1DF0E6558](v139, -1, -1);
            v140 = v136;
            v111 = v160;
            MEMORY[0x1DF0E6558](v140, -1, -1);

          }
          else
          {

            (*(void (**)(char *, uint64_t))(v134 + 8))(v132, v13);
          }

        }
      }
      v141 = objc_msgSend(v112, sel_defaultManager);
      v142 = URL.path.getter();
      v143 = (void *)MEMORY[0x1DF0E41AC](v142);
      swift_bridgeObjectRelease();
      v144 = objc_msgSend(v141, sel_isWritableFileAtPath_, v143);

      v145 = *(void (**)(char *, uint64_t))(v176 + 8);
      v145(v117, v13);
      v145(v111, v13);
      if (v144)
        v109 = 3;
      else
        v109 = 0;
    }
    v82 = (uint64_t)v174;
    v79 = v175;
  }
  v146 = v167;
  v147 = v166;
  ObjectType = swift_getObjectType();

  v149 = v168;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v82, v168, &demangling cache variable for type metadata for URL?);
  v150 = v169;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v79, v169, &demangling cache variable for type metadata for URL?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v180, (uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  LOBYTE(v177) = v109;
  v151 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t, _OWORD *, uint64_t *, _QWORD))(ObjectType + 4488))(v147, v165, v149, v171, v150, v178, &v177, v170 & 1);

  outlined destroy of StocksKitCurrencyCache.Provider?(v82, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v180, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v79, &demangling cache variable for type metadata for URL?);
  swift_deallocPartialClassInstance();
  return v151;
}

void specialized PaperTextAttachmentView.tapBelowGesture(_:)()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v1 = v0;
  if (objc_msgSend(v0, sel_isFirstResponder))
  {
    v2 = objc_msgSend(v0, sel_resignFirstResponder);
    v3 = (void *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x1150))(v2);
    if (v3)
    {
      v4 = v3;
      if (objc_msgSend(v3, sel_isFirstResponder))
        objc_msgSend(v4, sel_resignFirstResponder);

    }
  }
  v5 = direct field offset for Canvas.paperView;
  v6 = MEMORY[0x1DF0E666C](*(_QWORD *)&v1[direct field offset for Canvas.paperView]+ OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v6)
  {
    v7 = (void *)v6;
    AnyCanvas.selectedCanvasElementIds.getter();
    v9 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease();
    if (v9)
    {
      v10 = MEMORY[0x1DF0E666C](*(_QWORD *)&v1[v5] + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (v10)
      {
        v11 = (void *)v10;
        AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x1E0DEE9D8]);

      }
    }

  }
  v12 = objc_msgSend(v1, sel_window);
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v12);

    objc_msgSend(v14, sel__tellDelegateToHideToolPicker);
  }
  else
  {
    __break(1u);
  }
}

double specialized PaperTextAttachmentView.resizeViewDrawingBounds(_:)()
{
  uint64_t v0;
  double *v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  double v6;
  CGRect v8;

  v1 = *(double **)(v0 + direct field offset for PaperTextAttachmentView.resizeInfo);
  if (!v1)
    return PaperTextAttachmentView.safePaperModelBounds.getter();
  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  v5 = v1[11];
  swift_retain();
  v8.origin.x = v2;
  v8.origin.y = v3;
  v8.size.width = v4;
  v8.size.height = v5;
  if (CGRectIsNull(v8))
    v6 = *MEMORY[0x1E0C9D628];
  else
    v6 = v1[4];
  swift_release();
  return v6;
}

void specialized PaperTextAttachmentView.resizeView(_:setDrawingHeight:originalHeight:growFromTop:)(char a1, double a2, double a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  BOOL IsNull;
  double v23;
  double MaxY;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  double v29;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  v4 = v3;
  v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x1150))();
  if (v8)
  {
    v9 = (id)v8;
  }
  else
  {
    v9 = objc_msgSend(v3, sel_superview);
    if (!v9)
    {
      v11 = *MEMORY[0x1E0CD1338];
      goto LABEL_5;
    }
  }
  objc_msgSend(v9, sel_bounds);
  v11 = v10;

LABEL_5:
  PaperTextAttachmentView.drawingTransform(forViewWidth:)(&v38, v11);
  v12 = *(_QWORD *)&v4[direct field offset for PaperTextAttachmentView.resizeInfo];
  if (v12)
  {
    v13 = sqrt(*(double *)&v38 * *(double *)&v38 + *((double *)&v38 + 1) * *((double *)&v38 + 1));
    if (v13 > 0.0)
    {
      swift_retain();
      objc_msgSend(v4, sel_frame);
      v36 = v15;
      v37 = v14;
      v17 = v16;
      v18 = *(_QWORD *)(v12 + 32);
      v19 = *(_QWORD *)(v12 + 40);
      v20 = *(_QWORD *)(v12 + 48);
      v21 = *(double *)(v12 + 56);
      IsNull = CGRectIsNull(*(CGRect *)(v12 + 64));
      v23 = 0.0;
      if (!IsNull)
      {
        MaxY = CGRectGetMaxY(*(CGRect *)(v12 + 64));
        if (one-time initialization token for resizeHandleSize != -1)
        {
          v35 = MaxY;
          swift_once();
          MaxY = v35;
        }
        v23 = 64.0 / v13 + MaxY + *(double *)&static UIConstants.resizeHandleSize * 0.5 / v13;
      }
      if ((a1 & 1) != 0)
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)logger);
        v26 = Logger.logObject.getter();
        v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_1DDB0F000, v26, v27, "Resize from top not supported yet", v28, 2u);
          MEMORY[0x1DF0E6558](v28, -1, -1);
        }

      }
      else
      {
        v29 = a2 / v13;
        if (a2 / v13 < v23 && a2 < a3)
        {
          v29 = a3 / v13;
          if (v23 < a3 / v13)
            v29 = v23;
          a2 = v13 * v29;
        }
        if (v29 != v21)
        {
          *(_QWORD *)(v12 + 32) = v18;
          *(_QWORD *)(v12 + 40) = v19;
          *(_QWORD *)(v12 + 48) = v20;
          *(double *)(v12 + 56) = v29;
        }
      }
      if (one-time initialization token for resizeHandleSize != -1)
        swift_once();
      if (a2 > *(double *)&static UIConstants.resizeHandleSize)
        v31 = a2;
      else
        v31 = *(double *)&static UIConstants.resizeHandleSize;
      v33 = v36;
      v32 = v37;
      v34 = v17;
      PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(*(__C::CGRect *)(&v31 - 3), 1, 1, 1);
      swift_release();
    }
  }
}

void specialized PaperTextAttachmentView.calculateDocument.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  void *v17;

  v3 = v2;
  v6 = (_QWORD *)(v3 + direct field offset for PaperTextAttachmentView.calculateDocument);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)mathLogger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1DDB0F000, v8, v9, "setupCanvasMathIfNecessary", v10, 2u);
    MEMORY[0x1DF0E6558](v10, -1, -1);
  }

  v11 = direct field offset for Canvas.paperView;
  v12 = *(_QWORD **)(v3 + direct field offset for Canvas.paperView);
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v14 = *(void **)((char *)v12 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v12) + 0x4C0));
  if (v14)
  {
    v15 = v14;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    v12 = *(_QWORD **)(v3 + v11);
  }
  v16 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v12 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v16)
  {
    v17 = v16;
    (*(void (**)(void))((*v13 & *v16) + 0x750))();

  }
}

unint64_t lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12870]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags;
  if (!lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementFlags, &type metadata for CanvasElementFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementFlags and conformance CanvasElementFlags);
  }
  return result;
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDB86C88()
{
  return objectdestroyTm_0((void (*)(_QWORD))MEMORY[0x1E0DEEB08], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

void partial apply for specialized closure #1 in Canvas.setupBandSelection()(void *a1)
{
  uint64_t v1;

  specialized closure #1 in Canvas.setupBandSelection()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t partial apply for specialized closure #2 in Canvas.setupBandSelection()(uint64_t a1, double a2, double a3)
{
  uint64_t v3;

  return specialized closure #2 in Canvas.setupBandSelection()(a2, a3, a1, v3) & 1;
}

uint64_t outlined assign with take of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1DDB86D34()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(void *a1)
{
  uint64_t v1;

  closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

uint64_t sub_1DDB86D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for CapsuleUndoAction();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CapsuleUndoAction() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  closure #1 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_BYTE *)(v5 + 24));
}

uint64_t outlined copy of CanvasMembers?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t partial apply for closure #1 in AnyCanvas.selection.modify(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in AnyCanvas.selection.modify(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDB86E98()
{
  return 24;
}

__n128 sub_1DDB86EA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDB86EB8()
{
  return objectdestroy_19Tm();
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 41);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.updateContentHeight(from:alwaysIncludeDrawing:)();
}

uint64_t sub_1DDB86F60()
{
  return objectdestroy_19Tm();
}

void partial apply for closure #1 in PaperTextAttachmentView.characterIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  closure #1 in PaperTextAttachmentView.characterIndex.getter(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_1DDB86F78()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t sub_1DDB86F90()
{
  return objectdestroy_19Tm();
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperTextAttachmentView.toolPickerSelectedToolItemDidChange(_:)(a1, v4, v5, v6);
}

uint64_t sub_1DDB87004()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setFrame_, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_1DDB87040()
{
  return swift_deallocObject();
}

uint64_t sub_1DDB87050()
{
  return swift_deallocObject();
}

uint64_t sub_1DDB87060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.contentBounds(includeDrawing:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_BYTE *)(v1 + v5 + *(_QWORD *)(v4 + 64));
  v8 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *(_QWORD *)v8 = v2;
  *(_QWORD *)(v8 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_BYTE *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = v6;
  return swift_task_switch();
}

uint64_t sub_1DDB87174()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PaperTextAttachmentView.cleanupViewProviders()()
{
  uint64_t v0;
  void *v1;
  id result;

  v1 = *(void **)(v0 + 16);
  result = objc_msgSend(v1, sel_respondsToSelector_, sel__cleanupStaleCachedViewProviders);
  if ((_DWORD)result)
    return objc_msgSend(v1, sel__cleanupStaleCachedViewProviders);
  return result;
}

uint64_t sub_1DDB871E4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop;
  if (!lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB2358], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop);
  }
  return result;
}

uint64_t sub_1DDB8724C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void **a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  closure #1 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1DDB872E8()
{
  return objectdestroyTm_0((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(void *a1)
{
  uint64_t v1;

  return closure #2 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDB87304()
{
  return objectdestroyTm_0((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t objectdestroyTm_0(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  return closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)();
}

void *partial apply for closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)()
{
  uint64_t v0;

  return closure #1 in closure #3 in PaperTextAttachmentView.createPaperView(paperBundleURL:)(v0);
}

uint64_t sub_1DDB87374()
{
  return objectdestroy_19Tm();
}

uint64_t partial apply for closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperTextAttachmentView.handleMerge(newModel:firstMerge:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDB87394()
{
  return objectdestroy_19Tm();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DDB873DC()
{
  return 24;
}

__n128 sub_1DDB873E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(_QWORD *)(v1 + 16));
}

BOOL partial apply for specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with take of PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokeStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PKStrokeStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PKStrokeStruct(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void partial apply for specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in Canvas.startCheckingForOldEraserStrokes()(a1, v1);
}

uint64_t sub_1DDB874DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1DDB87664()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PaperTextAttachmentView.layoutSubviews()()
{
  uint64_t v0;

  return closure #1 in PaperTextAttachmentView.layoutSubviews()(*(_QWORD *)(v0 + 16), *(double **)(v0 + 24));
}

uint64_t sub_1DDB87690()
{
  return swift_deallocObject();
}

uint64_t sub_1DDB876A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in PaperTextAttachmentView.didMoveToSuperview()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id result;

  v1 = *(void **)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(unsigned __int8 *)(v0 + 32);
  result = objc_msgSend(v1, sel_becomeFirstResponder);
  if (v2)
    return objc_msgSend(v2, sel_setVisible_forFirstResponder_, v3, v1);
  return result;
}

uint64_t sub_1DDB8772C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t objectdestroy_6Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t PDFAnnotationElement.stringValue.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for PDFAnnotationElement.stringValue : PDFAnnotationElement()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.stringValue.setter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.stringValue.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$stringValue.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$stringValue : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$stringValue.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PDFAnnotationElement.$stringValue.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t PDFAnnotationElement.contents.getter()
{
  uint64_t v1;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for PDFAnnotationElement()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PDFAnnotationElement;
  if (!type metadata singleton initialization cache for PDFAnnotationElement)
    return swift_getSingletonMetadata();
  return result;
}

double key path getter for PDFAnnotationElement.contents : PDFAnnotationElement@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.contents : PDFAnnotationElement()
{
  type metadata accessor for PDFAnnotationElement();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.contents.setter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.contents.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$contents.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$contents : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$contents.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$contents.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.color.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for PDFAnnotationElement.color : PDFAnnotationElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.color : PDFAnnotationElement(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for PDFAnnotationElement();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.color.setter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.color.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$color.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$color : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$color.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$color.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.AnnotationShape.quadPoints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PDFAnnotationElement.AnnotationShape.quadPoints.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PDFAnnotationElement.AnnotationShape.quadPoints.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

double PDFAnnotationElement.AnnotationShape.rect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void PDFAnnotationElement.AnnotationShape.rect.setter(double a1, double a2, double a3, double a4)
{
  double *v4;

  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

uint64_t (*PDFAnnotationElement.AnnotationShape.rect.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional)rawValue;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x6E696F5064617571 && stringValue._object == (void *)0xEA00000000007374;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 1952671090 && object == (void *)0xE400000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *v2 = v7;
  return result;
}

PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional __swiftcall PDFAnnotationElement.AnnotationShape.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  if (intValue)
  {
    if (intValue == 1)
      *v1 = 1;
    else
      *v1 = 2;
  }
  else
  {
    *v1 = 0;
  }
  return (PaperKit::PDFAnnotationElement::AnnotationShape::CodingKeys_optional)intValue;
}

void *static PDFAnnotationElement.AnnotationShape.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PDFAnnotationElement.AnnotationShape.CodingKeys.allCases.getter;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PDFAnnotationElement.AnnotationShape.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1952671090;
  else
    return 0x6E696F5064617571;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 1952671090;
  else
    return 0x6E696F5064617571;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  return CodingKey.debugDescription.getter();
}

BOOL PDFAnnotationElement.AnnotationShape.isDefaultState.getter()
{
  uint64_t v0;
  CGRect v2;

  if (*(_QWORD *)v0)
    return 0;
  v2.origin.x = 0.0;
  v2.origin.y = 0.0;
  v2.size.width = 0.0;
  v2.size.height = 0.0;
  return CGRectEqualToRect(*(CGRect *)(v0 + 8), v2);
}

BOOL static PDFAnnotationElement.AnnotationShape.== infix(_:_:)(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  char v15;
  CGRect v17;
  CGRect v18;

  v5 = *a1;
  v6 = *((double *)a1 + 1);
  v7 = *((double *)a1 + 2);
  v8 = *((double *)a1 + 3);
  v9 = *((double *)a1 + 4);
  v10 = *a2;
  v11 = *((double *)a2 + 1);
  v12 = *((double *)a2 + 2);
  v13 = *((double *)a2 + 3);
  v14 = *((double *)a2 + 4);
  if (v5)
  {
    if (v10)
    {
      specialized static Array<A>.== infix(_:_:)(v5, v10, a3);
      if ((v15 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v10)
  {
LABEL_4:
    v17.origin.x = v6;
    v17.origin.y = v7;
    v17.size.width = v8;
    v17.size.height = v9;
    v18.origin.x = v11;
    v18.origin.y = v12;
    v18.size.width = v13;
    v18.size.height = v14;
    return CGRectEqualToRect(v17, v18);
  }
  return 0;
}

double PDFAnnotationElement.AnnotationShape.init(defaultState:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void PDFAnnotationElement.AnnotationShape.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = *v1;
  v4 = *((double *)v1 + 1);
  v5 = *((double *)v1 + 2);
  v6 = *((double *)v1 + 3);
  v7 = *((double *)v1 + 4);
  if (*v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v4, v5, v6, v7);
}

uint64_t PDFAnnotationElement.AnnotationShape.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  char v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PDFAnnotationElement.AnnotationShape.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15[0] = v9;
  v16 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
  lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA20], MEMORY[0x1E0DEAF10]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v15[0] = v10;
    v15[1] = v11;
    v15[2] = v12;
    v15[3] = v13;
    v16 = 1;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int PDFAnnotationElement.AnnotationShape.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _BYTE v7[72];

  v1 = *v0;
  v2 = *((double *)v0 + 1);
  v3 = *((double *)v0 + 2);
  v4 = *((double *)v0 + 3);
  v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

uint64_t PDFAnnotationElement.AnnotationShape.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PDFAnnotationElement.AnnotationShape.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGPoint]);
    v15 = 0;
    lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGPoint] and conformance <A> [A], &lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA30], MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v10 = *(_QWORD *)&v14[0];
    type metadata accessor for CGRect(0);
    v15 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v14[0];
    v12 = v14[1];
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = v11;
    *(_OWORD *)(a2 + 24) = v12;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PDFAnnotationElement.AnnotationShape()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _BYTE v7[72];

  v1 = *v0;
  v2 = *((double *)v0 + 1);
  v3 = *((double *)v0 + 2);
  v4 = *((double *)v0 + 3);
  v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PDFAnnotationElement.AnnotationShape(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v3 = *v1;
  v4 = *((double *)v1 + 1);
  v5 = *((double *)v1 + 2);
  v6 = *((double *)v1 + 3);
  v7 = *((double *)v1 + 4);
  if (*v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)(a1, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v4, v5, v6, v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PDFAnnotationElement.AnnotationShape()
{
  uint64_t *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  _BYTE v7[72];

  v1 = *v0;
  v2 = *((double *)v0 + 1);
  v3 = *((double *)v0 + 2);
  v4 = *((double *)v0 + 3);
  v5 = *((double *)v0 + 4);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    specialized Array<A>.hash(into:)((uint64_t)v7, v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  CGRect.hash(into:)(v2, v3, v4, v5);
  return Hasher._finalize()();
}

BOOL protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance PDFAnnotationElement.AnnotationShape()
{
  uint64_t v0;
  CGRect v2;

  if (*(_QWORD *)v0)
    return 0;
  v2.origin.x = 0.0;
  v2.origin.y = 0.0;
  v2.size.width = 0.0;
  v2.size.height = 0.0;
  return CGRectEqualToRect(*(CGRect *)(v0 + 8), v2);
}

double protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance PDFAnnotationElement.AnnotationShape@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PDFAnnotationElement.AnnotationShape(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  char v15;
  CGRect v17;
  CGRect v18;

  v5 = *a1;
  v6 = *((double *)a1 + 1);
  v7 = *((double *)a1 + 2);
  v8 = *((double *)a1 + 3);
  v9 = *((double *)a1 + 4);
  v10 = *a2;
  v11 = *((double *)a2 + 1);
  v12 = *((double *)a2 + 2);
  v13 = *((double *)a2 + 3);
  v14 = *((double *)a2 + 4);
  if (v5)
  {
    if (v10)
    {
      specialized static Array<A>.== infix(_:_:)(v5, v10, a3);
      if ((v15 & 1) != 0)
        goto LABEL_4;
    }
  }
  else if (!v10)
  {
LABEL_4:
    v17.origin.x = v6;
    v17.origin.y = v7;
    v17.size.width = v8;
    v17.size.height = v9;
    v18.origin.x = v11;
    v18.origin.y = v12;
    v18.size.width = v13;
    v18.size.height = v14;
    return CGRectEqualToRect(v17, v18);
  }
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PDFAnnotationElement.AnnotationShape@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PDFAnnotationElement.AnnotationShape.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PDFAnnotationElement.AnnotationShape(_QWORD *a1)
{
  return PDFAnnotationElement.AnnotationShape.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFAnnotationElement.AnnotationShape@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFAnnotationElement.AnnotationShape()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFAnnotationElement.AnnotationShape()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFAnnotationElement.AnnotationShape()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFAnnotationElement.AnnotationShape()
{
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t PDFAnnotationElement.flags.getter()
{
  uint64_t v1;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PDFAnnotationElement.flags : PDFAnnotationElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.flags : PDFAnnotationElement()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.flags.setter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.flags.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$flags.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$flags : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$flags.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$flags.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.modificationDate.getter()
{
  return PDFAnnotationElement.modificationDate.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for PDFAnnotationElement.modificationDate : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for Date?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for Date?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Date?);
}

uint64_t PDFAnnotationElement.modificationDate.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Date?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Date?);
}

uint64_t (*PDFAnnotationElement.modificationDate.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$modificationDate.getter()
{
  return PDFAnnotationElement.modificationDate.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PDFAnnotationElement.modificationDate.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PDFAnnotationElement();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  return a1(v2);
}

uint64_t key path setter for PDFAnnotationElement.$modificationDate : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$modificationDate.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$modificationDate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.shape.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  return CRRegister.wrappedValue.getter();
}

double key path getter for PDFAnnotationElement.shape : PDFAnnotationElement@<D0>(uint64_t a1@<X8>)
{
  double result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  CRRegister.wrappedValue.getter();
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.shape : PDFAnnotationElement()
{
  type metadata accessor for PDFAnnotationElement();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.shape.setter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.shape.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$shape.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$shape : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$shape.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$shape.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.subtype.getter()
{
  uint64_t v1;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for PDFAnnotationElement.subtype : PDFAnnotationElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for PDFAnnotationElement.subtype : PDFAnnotationElement()
{
  type metadata accessor for PDFAnnotationElement();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PDFAnnotationElement.subtype.setter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*PDFAnnotationElement.subtype.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$subtype.getter()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for PDFAnnotationElement.$subtype : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$subtype.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$subtype.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.popup.getter()
{
  return PDFAnnotationElement.popup.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for PDFAnnotationElement.popup : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
}

uint64_t PDFAnnotationElement.popup.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
}

uint64_t (*PDFAnnotationElement.popup.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PDFAnnotationElement.$popup.getter()
{
  return PDFAnnotationElement.popup.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PDFAnnotationElement.popup.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PDFAnnotationElement();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  return a1(v2);
}

uint64_t key path setter for PDFAnnotationElement.$popup : PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PDFAnnotationElement.$popup.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*PDFAnnotationElement.$popup.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PDFAnnotationElement() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PDFAnnotationElement.additionalFields.getter()
{
  type metadata accessor for PDFAnnotationElement();
  return swift_bridgeObjectRetain();
}

uint64_t PDFAnnotationElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PDFAnnotationElement() + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*PDFAnnotationElement.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PDFAnnotationElement();
  return UnknownCanvasElementView.flags.modify;
}

double static PDFAnnotationElement.fields.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;

  if (one-time initialization token for fields != -1)
    swift_once();
  v24 = xmmword_1F040B900;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1F040B910;
  *(_OWORD *)&v25[16] = xmmword_1F040B920;
  v26 = *(_OWORD *)&qword_1F040B930;
  *(_OWORD *)&v21[16] = xmmword_1F040B8C0;
  v22 = *(_OWORD *)&qword_1F040B8D0;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1F040B8E0;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1F040B8F0;
  *(_OWORD *)v19 = static PDFAnnotationElement.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_1F040B890;
  v20 = xmmword_1F040B8A0;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1F040B8B0;
  v2 = static PDFAnnotationElement.fields;
  v3 = unk_1F040B898;
  v4 = qword_1F040B8B0;
  v5 = *((_QWORD *)&xmmword_1F040B8C0 + 1);
  v6 = qword_1F040B8E0;
  v7 = unk_1F040B8F8;
  v8 = qword_1F040B910;
  v9 = *((_QWORD *)&xmmword_1F040B920 + 1);
  v11 = *(_OWORD *)&v19[8];
  v12 = xmmword_1F040B8A0;
  v13 = *(_OWORD *)&v21[8];
  v14 = *(_OWORD *)&qword_1F040B8D0;
  v15 = *(_OWORD *)&v23[8];
  v16 = xmmword_1F040B900;
  v17 = *(_OWORD *)&v25[8];
  v18 = *(_OWORD *)&qword_1F040B930;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 168) = v9;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t PDFAnnotationElement.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v23, v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v22 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v22 - v15;
  v24 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?, MEMORY[0x1E0D12CF8]);
  CRRegister.init(wrappedValue:)();
  v17 = type metadata accessor for PDFAnnotationElement();
  v24 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v24 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v24 = 0;
  CRRegister.init(wrappedValue:)();
  v18 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v16, (uint64_t)v12, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance <A> A?, &demangling cache variable for type metadata for Date?, MEMORY[0x1E0D116C8]);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((_QWORD *)&v24 + 1) = v19;
  CRRegister.init(wrappedValue:)();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v8, (uint64_t)v4, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  *(_QWORD *)(a1 + *(int *)(v17 + 48)) = MEMORY[0x1E0DEE9E0];
  return result;
}

void PDFAnnotationElement.init(_:)(PDFAnnotation *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  PDFAnnotation *v22;
  uint64_t v23;
  PDFAnnotation *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v24 = a1;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v23, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v23 - v16;
  v25 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?, MEMORY[0x1E0D12CF8]);
  CRRegister.init(wrappedValue:)();
  v18 = type metadata accessor for PDFAnnotationElement();
  v25 = 0uLL;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v25 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v25 = 0;
  CRRegister.init(wrappedValue:)();
  v19 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v13, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance <A> A?, &demangling cache variable for type metadata for Date?, MEMORY[0x1E0D116C8]);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Date?);
  lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((_QWORD *)&v25 + 1) = v20;
  CRRegister.init(wrappedValue:)();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v9, 1, 1, v21);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  *(_QWORD *)(a2 + *(int *)(v18 + 48)) = MEMORY[0x1E0DEE9E0];
  v22 = v24;
  PDFAnnotationElement.updateFrom(_:)(v24);

}

Swift::Void __swiftcall PDFAnnotationElement.updateFrom(_:)(PDFAnnotation *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  PDFAnnotation *v63;
  char v64;
  NSString *v65;
  NSString *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  NSString *v73;
  NSString *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  void (*v82)(char *, uint64_t);
  NSString *v83;
  NSString *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  UIColor *v91;
  PDFAnnotation *v92;
  uint64_t v93;
  uint64_t v94;
  UIColor *v95;
  UIColor *v96;
  UIColor *v97;
  char v98;
  UIColor *v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  NSDate *v104;
  NSDate *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  CGFloat v113;
  double v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  double v118;
  CGFloat v119;
  int32x2_t v120;
  CGFloat v121;
  CGFloat v122;
  CGFloat v123;
  CGFloat v124;
  uint64_t v125;
  char v126;
  _BOOL4 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t, uint64_t, uint64_t);
  PDFAnnotation *v132;
  PDFAnnotation *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  PDFAnnotation *v174;
  __int128 v175;
  double v176;
  double v177;
  double v178;
  unint64_t v179;
  unint64_t v180;
  _OWORD v181[2];
  CGRect v182;
  CGRect v183;

  v165 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x1E0C80A78](v165, v2);
  v163 = (char *)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v162 = (char *)&v144 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v148 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149, v11);
  v145 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v146 = (char *)&v144 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v147 = (char *)&v144 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v153 = (char *)&v144 - v21;
  v152 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v161 = *(_QWORD *)(v152 - 8);
  MEMORY[0x1E0C80A78](v152, v22);
  v160 = (char *)&v144 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v168 = (char *)&v144 - v26;
  v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v158 = *(_QWORD *)(v159 - 8);
  MEMORY[0x1E0C80A78](v159, v27);
  v157 = (char *)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v156 = (char *)&v144 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v32, v33);
  v151 = (char *)&v144 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v155 = *(_QWORD *)(v166 - 8);
  MEMORY[0x1E0C80A78](v166, v35);
  v154 = (char *)&v144 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v150 = (char *)&v144 - v39;
  v173 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v169 = *(_QWORD *)(v173 - 8);
  MEMORY[0x1E0C80A78](v173, v40);
  v171 = (char *)&v144 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v172 = (char *)&v144 - v44;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v144 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50, v51);
  v54 = (char *)&v144 - v53;
  v55 = *MEMORY[0x1E0CD0E08];
  v174 = a1;
  if (!-[PDFAnnotation valueForAnnotationKey:](a1, sel_valueForAnnotationKey_, v55, v52))
  {
    __break(1u);
    return;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v181, &v175);
  swift_dynamicCast();
  v56 = v179;
  v57 = v180;
  v170 = type metadata accessor for PDFAnnotationElement();
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v175 == __PAIR128__(v57, v56))
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v167 = v10;
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v58 & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)&v175 = v56;
      *((_QWORD *)&v175 + 1) = v57;
      CRRegister.value.setter();
    }
    v10 = v167;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v49, v54, v45);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
  CRRegister.wrappedValue.getter();
  v59 = v175;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (_QWORD)v59 && v60 == *((_QWORD *)&v59 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v61 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() != (_QWORD)v59 || v62 != *((_QWORD *)&v59 + 1))
  {
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = v174;
    if ((v64 & 1) != 0)
      goto LABEL_17;
    v73 = -[PDFAnnotation widgetStringValue](v174, sel_widgetStringValue);
    if (v73)
    {
      v74 = v73;
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v77 = v76;

    }
    else
    {
      v75 = 0;
      v77 = 0;
    }
    v78 = v172;
    v79 = v173;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v75, v77);
    swift_bridgeObjectRelease();
    v80 = v169;
    v81 = *(void (**)(char *, char *, uint64_t))(v169 + 16);
    v81(v171, v78, v79);
    CRRegister.projectedValue.setter();
    v82 = *(void (**)(char *, uint64_t))(v80 + 8);
    v82(v78, v79);
    v83 = -[PDFAnnotation contents](v63, sel_contents);
    v167 = v10;
    if (v83)
    {
      v84 = v83;
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v87 = v86;

    }
    else
    {
      v85 = 0;
      v87 = 0;
    }
    v88 = v172;
    v89 = v173;
    CRRegister.projectedValue.getter();
    specialized CRRegister<>.setIfDifferent(_:)(v85, v87);
    swift_bridgeObjectRelease();
    v81(v171, v88, v89);
    CRRegister.projectedValue.setter();
    v82(v88, v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    v90 = (void *)v175;
    if ((_QWORD)v175)
    {
      v91 = (UIColor *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, (_QWORD)v175);

    }
    else
    {
      v91 = 0;
    }
    v92 = v174;
    v93 = v166;
    v94 = (uint64_t)v151;
    v95 = -[PDFAnnotation color](v174, sel_color);
    v96 = v95;
    if (v91)
    {
      if (v95)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        v97 = v91;
        v93 = v166;
        v98 = static NSObject.== infix(_:_:)();

        v92 = v174;
        if ((v98 & 1) != 0)
          goto LABEL_39;
LABEL_38:
        v99 = -[PDFAnnotation color](v92, sel_color);
        Color.init(cgColor:)(-[UIColor CGColor](v99, sel_CGColor), (CGColor **)&v175);

        CRRegister.wrappedValue.setter();
        goto LABEL_39;
      }
      v96 = v91;
    }
    else if (!v95)
    {
LABEL_39:
      if (-[PDFAnnotation valueForAnnotationKey:](v92, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v181, 0, sizeof(v181));
      }
      v100 = v152;
      v101 = v150;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v181, (uint64_t)&v175, &demangling cache variable for type metadata for Any?);
      if (v177 == 0.0)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v175, &demangling cache variable for type metadata for Any?);
      }
      else if (swift_dynamicCast())
      {
        v102 = v179;
        goto LABEL_47;
      }
      v102 = 0;
LABEL_47:
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      if ((_QWORD)v175 != v102)
      {
        *(_QWORD *)&v175 = v102;
        CRRegister.value.setter();
      }
      v103 = v155;
      (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v154, v101, v93);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v101, v93);
      v104 = -[PDFAnnotation modificationDate](v92, sel_modificationDate);
      if (v104)
      {
        v105 = v104;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v106 = type metadata accessor for Date();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v94, 0, 1, v106);
      }
      else
      {
        v107 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 56))(v94, 1, 1, v107);
      }
      v108 = v156;
      v109 = v159;
      CRRegister.projectedValue.getter();
      specialized CRRegister<>.setIfDifferent(_:)(v94);
      outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for Date?);
      v110 = v158;
      (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v157, v108, v109);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v109);
      v111 = PDFAnnotation.quadPoints.getter();
      -[PDFAnnotation bounds](v92, sel_bounds);
      v113 = v112;
      v115 = v114;
      v117 = v116;
      v119 = v118;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      v121 = *((double *)&v175 + 1);
      v122 = v176;
      v123 = v177;
      v124 = v178;
      if ((_QWORD)v175)
      {
        v125 = (uint64_t)v153;
        if (!v111 || (specialized static Array<A>.== infix(_:_:)(v175, v111, v120), (v126 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }
      }
      else
      {
        v125 = (uint64_t)v153;
        if (v111)
          goto LABEL_59;
      }
      v182.origin.x = v121;
      v182.origin.y = v122;
      v182.size.width = v123;
      v182.size.height = v124;
      v183.origin.x = v113;
      v183.origin.y = v115;
      v183.size.width = v117;
      v183.size.height = v119;
      v127 = CGRectEqualToRect(v182, v183);
      swift_bridgeObjectRelease();
      if (v127)
      {
        v128 = v168;
        goto LABEL_60;
      }
LABEL_59:
      *(_QWORD *)&v175 = v111;
      *((CGFloat *)&v175 + 1) = v113;
      v176 = v115;
      v177 = v117;
      v178 = v119;
      swift_bridgeObjectRetain();
      v128 = v168;
      CRRegister.value.setter();
LABEL_60:
      v129 = v161;
      (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v160, v128, v100);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v129 + 8))(v128, v100);
      swift_bridgeObjectRelease();
      v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
      v131 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56);
      v131(v125, 1, 1, v130);
      v132 = -[PDFAnnotation popup](v92, sel_popup);
      if (v132)
      {
        v133 = v132;
        type metadata accessor for CanvasElementPDFAnnotation();
        v134 = swift_dynamicCastClass();
        if (v134)
        {
          v135 = v134 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          v136 = v148;
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v135, v148, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          v137 = v167;
          v138 = v149;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v136, 1, v149) != 1)
          {
            v139 = v146;
            (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v146, v136, v138);
            (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v145, v139, v138);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
            v140 = (uint64_t)v147;
            WeakRef.init(id:)();

            (*(void (**)(char *, uint64_t))(v137 + 8))(v139, v138);
            outlined destroy of StocksKitCurrencyCache.Provider?(v125, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
            v131(v140, 0, 1, v130);
            outlined init with take of (key: Int, value: AnyCRValue)?(v140, v125, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
            goto LABEL_66;
          }
        }
        else
        {
          v136 = v148;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56))(v148, 1, 1, v149);
        }

        outlined destroy of StocksKitCurrencyCache.Provider?(v136, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      }
LABEL_66:
      v141 = v162;
      v142 = v165;
      CRRegister.projectedValue.getter();
      specialized CRRegister<>.setIfDifferent(_:)(v125);
      v143 = v164;
      (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v163, v141, v142);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v142);
      outlined destroy of StocksKitCurrencyCache.Provider?(v125, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
      return;
    }

    goto LABEL_38;
  }
  swift_bridgeObjectRelease_n();
  v63 = v174;
LABEL_17:
  v65 = -[PDFAnnotation widgetStringValue](v63, sel_widgetStringValue);
  if (v65)
  {
    v66 = v65;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v69 = v68;

  }
  else
  {
    v67 = 0;
    v69 = 0;
  }
  v70 = v172;
  v71 = v173;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v67, v69);
  swift_bridgeObjectRelease();
  v72 = v169;
  (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v171, v70, v71);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v70, v71);
}

void PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3)
{
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(a1, a2, a3);
}

uint64_t PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *, uint64_t))
{
  return specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(a1, a3, *(_QWORD *)(*a2 + *MEMORY[0x1E0D12A70]), a4, *(_QWORD *)(*a2 + *MEMORY[0x1E0D12A70] + 8), a5);
}

uint64_t PDFAnnotationElement.minAppFormatVersion.getter()
{
  return 4;
}

uint64_t PDFAnnotationElement.minEncodingVersion.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0D12378];
  v3 = type metadata accessor for CRCodableVersion();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PDFAnnotationElement@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0D12378];
  v3 = type metadata accessor for CRCodableVersion();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance PDFAnnotationElement()
{
  return 4;
}

double protocol witness for static CRStruct_Base_8.fields.getter in conformance PDFAnnotationElement@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;

  if (one-time initialization token for fields != -1)
    swift_once();
  v24 = xmmword_1F040B900;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1F040B910;
  *(_OWORD *)&v25[16] = xmmword_1F040B920;
  v26 = *(_OWORD *)&qword_1F040B930;
  *(_OWORD *)&v21[16] = xmmword_1F040B8C0;
  v22 = *(_OWORD *)&qword_1F040B8D0;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1F040B8E0;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1F040B8F0;
  *(_OWORD *)v19 = static PDFAnnotationElement.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_1F040B890;
  v20 = xmmword_1F040B8A0;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1F040B8B0;
  v2 = static PDFAnnotationElement.fields;
  v3 = unk_1F040B898;
  v4 = qword_1F040B8B0;
  v5 = *((_QWORD *)&xmmword_1F040B8C0 + 1);
  v6 = qword_1F040B8E0;
  v7 = unk_1F040B8F8;
  v8 = qword_1F040B910;
  v9 = *((_QWORD *)&xmmword_1F040B920 + 1);
  v11 = *(_OWORD *)&v19[8];
  v12 = xmmword_1F040B8A0;
  v13 = *(_OWORD *)&v21[8];
  v14 = *(_OWORD *)&qword_1F040B8D0;
  v15 = *(_OWORD *)&v23[8];
  v16 = xmmword_1F040B900;
  v17 = *(_OWORD *)&v25[8];
  v18 = *(_OWORD *)&qword_1F040B930;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 168) = v9;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return static CRStruct_8.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PDFAnnotationElement()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance PDFAnnotationElement())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRStruct_8.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PDFAnnotationElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  return CRDT.init(serializedData:)();
}

double PDFAnnotationElement.frame.getter()
{
  return 0.0;
}

uint64_t (*PDFAnnotationElement.frame.modify(uint64_t a1))()
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  return UnknownCanvasElementView.flags.modify;
}

double PDFAnnotationElement.rotation.getter()
{
  return 0.0;
}

uint64_t (*PDFAnnotationElement.rotation.modify(_QWORD *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PDFAnnotationElement.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t PDFAnnotationElement.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 8;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t PDFAnnotationElement.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;

  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t (*protocol witness for CanvasElement.frame.modify in conformance PDFAnnotationElement(uint64_t a1))()
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  return UnknownCanvasElementView.flags.modify;
}

double protocol witness for CanvasElement.rotation.getter in conformance PDFAnnotationElement()
{
  return 0.0;
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance PDFAnnotationElement(_QWORD *a1))()
{
  *a1 = 0;
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 8;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

void protocol witness for CanvasElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:) in conformance PDFAnnotationElement(unint64_t *a1, uint64_t a2, void *a3)
{
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(a1, a2, a3);
}

uint64_t protocol witness for CanvasElement.applyDifference<A, B>(id:in:from:) in conformance PDFAnnotationElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *, char *, uint64_t))
{
  return specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(a1, a3, a4, a5, a6, a7);
}

double protocol witness for PaperRenderable.frame.getter in conformance PDFAnnotationElement()
{
  return 0.0;
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance PDFAnnotationElement()
{
  uint64_t v0;

  return PDFAnnotationElement.render<A>(in:id:capsule:options:)(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C90]);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
}

{
  uint64_t v2;
  uint64_t *v3;
  _BYTE *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (uint64_t *)(a1 + 32);
  for (i = (_BYTE *)(a2 + 40); ; i += 16)
  {
    v6 = *v3;
    v3 += 2;
    v5 = v6;
    v7 = *((_QWORD *)i - 1);
    if (*i == 1)
      break;
    if (v5 != v7)
      return 0;
    if (!--v2)
      return 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1DDB8CD7C + 4 * byte_1DDF33DF0[v7]))();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t, uint64_t);
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  char v28;
  void (*v29)(uint64_t, uint64_t);
  BOOL v31;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);

  v10 = a3(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v16.n128_f64[0] = MEMORY[0x1E0C80A78](v12, v13);
  v18 = (char *)&v33 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 == *(_QWORD *)(a2 + 16))
  {
    if (!v19 || a1 == a2)
    {
      v28 = 1;
    }
    else
    {
      v36 = v15;
      v37 = v14;
      v38 = a3;
      v20 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v33 = *(_QWORD *)(v14 + 72);
      v34 = a1;
      v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
      v21 = v19 - 1;
      v22 = v15;
      do
      {
        v23 = v35;
        ((void (*)(char *, unint64_t, uint64_t, __n128))v35)(v18, a1 + v20, v10, v16);
        v24 = a2;
        v23(v22, a2 + v20, v10);
        v25 = a4;
        v26 = a4;
        v27 = a5;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v26, v38, a5);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)();
        v29 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
        v29(v22, v10);
        v29((uint64_t)v18, v10);
        v31 = v21-- != 0;
        if ((v28 & 1) == 0)
          break;
        v20 += v33;
        a5 = v27;
        a4 = v25;
        a2 = v24;
        a1 = v34;
      }
      while (v31);
    }
  }
  else
  {
    v28 = 0;
  }
  return v28 & 1;
}

int32x2_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, int32x2_t result)
{
  uint64_t v3;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a2 + 16) && v3 && a1 != a2)
  {
    result = *(int32x2_t *)(a1 + 40);
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)&result == *(double *)(a2 + 40))
    {
      v5 = (float64x2_t *)(a1 + 48);
      v6 = (float64x2_t *)(a2 + 48);
      v7 = v3 - 1;
      do
      {
        if (!v7)
          break;
        v8 = *v5++;
        v9 = v8;
        v10 = *v6++;
        result = vmovn_s64(vceqq_f64(v9, v10));
        --v7;
      }
      while ((result.i32[0] & result.i32[1] & 1) != 0);
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = (double *)(a1 + 40);
  v6 = (double *)(a2 + 40);
  do
  {
    v7 = *v5++;
    v8 = v7;
    v9 = *v6++;
    v10 = v9;
    v12 = v4-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for AnyCanvasElementView);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MathExpression);
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for MathExpressionEvaluationResult);
}

id specialized static Array<A>.== infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id result;
  void *v14;
  id v15;
  void *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;

  v4 = a2;
  v5 = a1;
  v6 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == v32)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v7) = 0;
    return (id)(v7 & 1);
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v8 = (unint64_t)v4 >> 62;
  if ((unint64_t)v4 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v7 != *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v7)
    goto LABEL_37;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v5 < 0)
    v9 = v5;
  if (!v6)
    v9 = (v5 & 0xFFFFFFFFFFFFFF8) + 32;
  v10 = v4 & 0xFFFFFFFFFFFFFF8;
  v11 = (v4 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v4 < 0)
    v12 = v4;
  else
    v12 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v8)
    v11 = v12;
  if (v9 == v11)
  {
LABEL_37:
    LOBYTE(v7) = 1;
    return (id)(v7 & 1);
  }
  if ((v7 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v33 = v5 & 0xC000000000000001;
  if ((v5 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v5 + 32); ; result = (id)MEMORY[0x1DF0E4D64](0, v5))
  {
    v14 = result;
    if ((v4 & 0xC000000000000001) == 0)
      break;
    v15 = (id)MEMORY[0x1DF0E4D64](0, v4);
LABEL_21:
    v16 = v15;
    a3 = (uint64_t (*)(_QWORD))a3(0);
    v17 = static NSObject.== infix(_:_:)();

    if ((v17 & 1) == 0)
      goto LABEL_48;
    v18 = v7 - 1;
    if (v7 == 1)
      return (id)(v7 & 1);
    if (((v4 | v5) & 0xC000000000000001) != 0)
    {
      v19 = 0;
      v20 = v7 - 2;
      while (v18 != v19)
      {
        v7 = v19 + 1;
        if (v33)
          v21 = (id)MEMORY[0x1DF0E4D64](v19 + 1, v5);
        else
          v21 = *(id *)(v5 + 40 + 8 * v19);
        v22 = v21;
        if ((v4 & 0xC000000000000001) != 0)
        {
          v23 = (id)MEMORY[0x1DF0E4D64](v19 + 1, v4);
        }
        else
        {
          if (v7 >= *(_QWORD *)(v10 + 16))
            goto LABEL_53;
          v23 = *(id *)(v4 + 40 + 8 * v19);
        }
        v24 = v23;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0 && v20 != v19++)
          continue;
        return (id)(v7 & 1);
      }
      __break(1u);
    }
    else
    {
      v26 = *(_QWORD *)(v10 + 16);
      if (v26 <= 1)
        v26 = 1;
      v27 = v26 - 1;
      v28 = (void **)(v5 + 40);
      v10 = v4 + 40;
      while (v18)
      {
        if (!v27)
          goto LABEL_52;
        v30 = *v28++;
        v29 = v30;
        v31 = *(void **)v10;
        v10 += 8;
        v4 = v29;
        v5 = v31;
        v7 = static NSObject.== infix(_:_:)();

        if ((v7 & 1) != 0)
        {
          --v27;
          if (--v18)
            continue;
        }
        return (id)(v7 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = *(id *)(v4 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;

  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_22:
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 != v15)
      return 0;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_22;
LABEL_3:
  if (v5 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v5)
    return 1;
  v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0)
    v7 = a1;
  if (!v4)
    v7 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = a2 & 0xFFFFFFFFFFFFFF8;
  v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
    return 1;
  if (v5 < 0)
  {
    __break(1u);
LABEL_25:
    result = MEMORY[0x1DF0E4D64](0, a1);
    v11 = result;
    v13 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
      goto LABEL_18;
LABEL_26:
    v16 = MEMORY[0x1DF0E4D64](0, a2);
    swift_release();
    result = swift_unknownObjectRelease();
    v30 = v11 == v16;
    v8 = a2 & 0xFFFFFFFFFFFFFF8;
    if (!v30)
      return 0;
    goto LABEL_28;
  }
  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
    goto LABEL_25;
  v11 = *(_QWORD *)(a1 + 32);
  result = swift_retain();
  v13 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
    goto LABEL_26;
LABEL_18:
  if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_56;
  v14 = *(_QWORD *)(a2 + 32);
  result = swift_release();
  if (v11 != v14)
    return 0;
LABEL_28:
  v17 = v5 - 1;
  if (v5 == 1)
    return 1;
  if (((a2 | a1) & 0xC000000000000001) != 0)
  {
    v18 = 1 - v5;
    v19 = 5;
    while (1)
    {
      if (v18 + v19 == 5)
        goto LABEL_55;
      if (v6)
      {
        result = MEMORY[0x1DF0E4D64](v19 - 4, a1);
        v20 = result;
        if (v13)
        {
LABEL_34:
          v21 = MEMORY[0x1DF0E4D64](v19 - 4, a2);
          swift_release();
          swift_unknownObjectRelease();
          if (v20 != v21)
            return 0;
          goto LABEL_35;
        }
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 8 * v19);
        result = swift_retain();
        if (v13)
          goto LABEL_34;
      }
      if ((unint64_t)(v19 - 4) >= *(_QWORD *)(v8 + 16))
        goto LABEL_57;
      v22 = *(_QWORD *)(a2 + 8 * v19);
      swift_release();
      if (v20 != v22)
        return 0;
LABEL_35:
      ++v19;
      result = 1;
      if (v18 + v19 == 5)
        return result;
    }
  }
  v23 = *(_QWORD *)(v8 + 16);
  if (v23 <= 1)
    v23 = 1;
  v24 = v23 - 1;
  v25 = (uint64_t *)(a1 + 40);
  v26 = (uint64_t *)(a2 + 40);
  while (v17)
  {
    if (!v24)
      goto LABEL_54;
    v28 = *v25++;
    v27 = v28;
    v29 = *v26++;
    --v24;
    result = v27 == v29;
    v30 = v27 != v29 || v17-- == 1;
    if (v30)
      return result;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

void CGRect.hash(into:)(double a1, double a2, double a3, double a4)
{
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat x;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  CGRect v11;

  v11 = CGRectStandardize(*(CGRect *)&a1);
  y = v11.origin.y;
  width = v11.size.width;
  height = v11.size.height;
  if ((*(_QWORD *)&v11.origin.x & 0x7FFFFFFFFFFFFFFFLL) != 0)
    x = v11.origin.x;
  else
    x = 0.0;
  Hasher._combine(_:)(*(Swift::UInt64 *)&x);
  if ((*(_QWORD *)&y & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)&y;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((*(_QWORD *)&width & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)&width;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((*(_QWORD *)&height & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)&height;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      v5 = *v4;
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v6 = *(v4 - 1);
      else
        v6 = 0;
      Hasher._combine(_:)(v6);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      v4 += 2;
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt64 *v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt64 *)(a2 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v7 = v5;
      else
        v7 = 0;
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

unint64_t lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape.CodingKeys, &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape.CodingKeys and conformance PDFAnnotationElement.AnnotationShape.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGPoint] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGPoint]);
    v10 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, a3);
    result = MEMORY[0x1DF0E6450](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t lazy protocol witness table accessor for type String? and conformance <A> A?(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v7 = a3;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape;
  if (!lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PDFAnnotationElement.AnnotationShape, &type metadata for PDFAnnotationElement.AnnotationShape);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>, MEMORY[0x1E0D12B68]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<PDFAnnotationElement>? and conformance <A> A?);
  }
  return result;
}

uint64_t specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v19[2];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  v19[1] = a1;
  Hasher._combine(_:)(v13);
  if (v13)
  {
    v14 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v15 = *(_QWORD *)(v5 + 72);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v16(v12, v14, v4);
      v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v17(v12, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14 += v15;
      if (!--v13)
        return v17(v12, 1, 1, v4);
    }
  }
  else
  {
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v17(v12, 1, 1, v4);
  }
  return result;
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (**v60)(void *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  id v68;
  char v69;
  __int128 v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  id v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  char v84;
  void *v85;
  __int128 v86;
  id v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  Class v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  Class isa;
  NSDate v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int32x2_t v117;
  char v118;
  char v119;
  id v120;
  char **v121;
  char *v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  CGFloat v125;
  CGFloat v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  CGFloat v130;
  CGFloat v131;
  CGFloat v132;
  double v133;
  double v134;
  double v135;
  double v136;
  __int128 v137;
  uint64_t v138;
  char v139;
  void *v140;
  void *v141;
  id v142;
  id v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  id v149;
  void *v150;
  id v151;
  char *v152;
  id v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  id v159;
  void *v160;
  id v161;
  char v162;
  id v163;
  char v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  double v191;
  double v192;
  double v193;
  _OWORD v194[2];
  CGRect v195;
  CGRect v196;

  v187 = a3;
  v186 = a2;
  v168 = type metadata accessor for CRKeyPath();
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x1E0C80A78](v168, v4);
  v166 = (char *)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v178 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v179 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v9);
  v170 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = type metadata accessor for Date();
  v176 = *(_QWORD *)(v177 - 8);
  MEMORY[0x1E0C80A78](v177, v11);
  v169 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
  MEMORY[0x1E0C80A78](v173, v13);
  v175 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v15, v16);
  v171 = (char *)&v165 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v172 = (char *)&v165 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v174 = (char *)&v165 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v181 = (uint64_t)&v165 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
  v182 = *(_QWORD *)(v27 - 8);
  v28 = *(_QWORD *)(v182 + 64);
  MEMORY[0x1E0C80A78](v27, v29);
  v184 = (uint64_t)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v185 = (uint64_t)&v165 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 64);
  MEMORY[0x1E0C80A78](v33, v36);
  v183 = (uint64_t)&v165 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v165 - v39;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v165 - v43;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v165 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = *a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v186, (uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v44, v45);
    v51 = v50;
    if (v50 >> 62)
    {
      if (v50 >> 62 != 1)
      {
LABEL_8:
        (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
        goto LABEL_9;
      }
      v51 = v50 & 0x3FFFFFFFFFFFFFFFLL;
    }
    type metadata accessor for CanvasElementPDFAnnotation();
    v52 = swift_dynamicCastClass();
    if (v52)
    {
      v186 = v52;
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
      v54 = v185;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v185, 1, 1, v53);
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v40, v49, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v54, v184, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v40, v183, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v55 = (*(unsigned __int8 *)(v182 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80);
      v182 = v51;
      v56 = (v28 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
      v57 = (*(unsigned __int8 *)(v34 + 80) + v56 + 8) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v165 = v57 + v35;
      v58 = swift_allocObject();
      v59 = ((v57 + v35) & 0xFFFFFFFFFFFFFFF8) + v58;
      outlined init with take of (key: Int, value: AnyCRValue)?(v184, v58 + v55, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
      *(_QWORD *)(v58 + v56) = v182;
      outlined init with take of (key: Int, value: AnyCRValue)?(v183, v58 + v57, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      *(_BYTE *)(v58 + v165) = 0;
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = 0;
      v60 = (void (**)(void *))(v186
                                         + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      v61 = *(_QWORD *)(v186 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
      *v60 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
      v60[1] = (void (*)(void *))v58;
      outlined copy of PaperDocument.PDFDocumentUse(v50);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v61);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v185, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?);
    }
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
LABEL_9:
  v62 = type metadata accessor for PDFAnnotationElement();
  v63 = v188 + *(int *)(v62 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  v64 = v190;
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (_QWORD)v64 && v65 == *((_QWORD *)&v64 + 1))
  {
    swift_bridgeObjectRelease_n();
    return;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == (_QWORD)v64 && v67 == *((_QWORD *)&v64 + 1))
  {
    swift_bridgeObjectRelease_n();
    v68 = v187;
    goto LABEL_18;
  }
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v187;
  if ((v69 & 1) == 0)
  {
    v186 = v63;
    v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.getter();
    v77 = v190;
    v78 = objc_msgSend(v68, sel_widgetStringValue);
    if (v78)
    {
      v79 = v78;
      v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v82 = v81;

      if (*((_QWORD *)&v77 + 1))
      {
        if (v82)
        {
          if (v77 == __PAIR128__(v82, v80))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
          v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v157 & 1) != 0)
          {
LABEL_46:
            v185 = v76;
            CRRegister.wrappedValue.getter();
            v86 = v190;
            v87 = objc_msgSend(v68, sel_contents);
            if (v87)
            {
              v88 = v87;
              v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v91 = v90;

              v92 = v177;
              if (*((_QWORD *)&v86 + 1))
              {
                v93 = v181;
                if (v91)
                {
                  if (v86 == __PAIR128__(v91, v89))
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_59;
                  }
                  v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v158 & 1) != 0)
                  {
LABEL_59:
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
                    CRRegister.wrappedValue.getter();
                    v95 = v190;
                    v96 = *MEMORY[0x1E0CD0DF0];
                    if (objc_msgSend(v187, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
                    {
                      _bridgeAnyObjectToAny(_:)();
                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      memset(v194, 0, sizeof(v194));
                    }
                    v97 = (uint64_t)v174;
                    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v194, (uint64_t)&v190, &demangling cache variable for type metadata for Any?);
                    if (v192 == 0.0)
                    {
                      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v190, &demangling cache variable for type metadata for Any?);
                    }
                    else if ((swift_dynamicCast() & 1) != 0)
                    {
                      v98 = v187;
                      if (v95 == (_QWORD)v189)
                      {
LABEL_69:
                        v100 = v188 + *(int *)(v62 + 32);
                        v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
                        CRRegister.wrappedValue.getter();
                        v102 = objc_msgSend(v98, sel_modificationDate);
                        v103 = v176;
                        v185 = v100;
                        v184 = v101;
                        if (v102)
                        {
                          v104 = v102;
                          static Date._unconditionallyBridgeFromObjectiveC(_:)();

                          v105 = 0;
                        }
                        else
                        {
                          v105 = 1;
                        }
                        v106 = (uint64_t)v175;
                        v107 = v173;
                        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v97, v105, 1, v92);
                        v108 = v106 + *(int *)(v107 + 48);
                        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v93, v106, &demangling cache variable for type metadata for Date?);
                        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v97, v108, &demangling cache variable for type metadata for Date?);
                        v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
                        if (v109(v106, 1, v92) == 1)
                        {
                          outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                          outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Date?);
                          if (v109(v108, 1, v92) == 1)
                          {
                            outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for Date?);
                            goto LABEL_82;
                          }
                        }
                        else
                        {
                          v110 = (uint64_t)v172;
                          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v106, (uint64_t)v172, &demangling cache variable for type metadata for Date?);
                          if (v109(v108, 1, v92) != 1)
                          {
                            v122 = v169;
                            (*(void (**)(char *, uint64_t, uint64_t))(v103 + 32))(v169, v108, v92);
                            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
                            LODWORD(v183) = dispatch thunk of static Equatable.== infix(_:_:)();
                            v123 = v106;
                            v124 = *(void (**)(char *, uint64_t))(v103 + 8);
                            v124(v122, v92);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v181, &demangling cache variable for type metadata for Date?);
                            v124(v172, v92);
                            outlined destroy of StocksKitCurrencyCache.Provider?(v123, &demangling cache variable for type metadata for Date?);
                            if ((v183 & 1) != 0)
                              goto LABEL_82;
                            goto LABEL_78;
                          }
                          outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Date?);
                          outlined destroy of StocksKitCurrencyCache.Provider?(v93, &demangling cache variable for type metadata for Date?);
                          (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v110, v92);
                        }
                        outlined destroy of StocksKitCurrencyCache.Provider?(v106, (uint64_t *)&demangling cache variable for type metadata for (Date?, Date?));
LABEL_78:
                        v111 = v171;
                        CRRegister.wrappedValue.getter();
                        if (v109((uint64_t)v111, 1, v92) == 1)
                        {
                          isa = 0;
                        }
                        else
                        {
                          v113.super.isa = Date._bridgeToObjectiveC()().super.isa;
                          v114 = v111;
                          isa = v113.super.isa;
                          (*(void (**)(char *, uint64_t))(v103 + 8))(v114, v92);
                        }
                        objc_msgSend(v187, sel_setModificationDate_, isa);

LABEL_82:
                        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
                        CRRegister.wrappedValue.getter();
                        v115 = v190;
                        v116 = PDFAnnotation.quadPoints.getter();
                        if (v115)
                        {
                          if (v116)
                          {
                            specialized static Array<A>.== infix(_:_:)(v115, v116, v117);
                            v119 = v118;
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            v120 = v187;
                            v121 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                            if ((v119 & 1) != 0)
                            {
LABEL_92:
                              CRRegister.wrappedValue.getter();
                              v125 = *((double *)&v190 + 1);
                              v126 = v191;
                              v127 = v192;
                              v128 = v193;
                              swift_bridgeObjectRelease();
                              objc_msgSend(v120, sel_bounds);
                              v196.origin.x = v129;
                              v196.origin.y = v130;
                              v196.size.width = v131;
                              v196.size.height = v132;
                              v195.origin.x = v125;
                              v195.origin.y = v126;
                              v195.size.width = v127;
                              v195.size.height = v128;
                              if (!CGRectEqualToRect(v195, v196))
                              {
                                CRRegister.wrappedValue.getter();
                                v133 = *((double *)&v190 + 1);
                                v134 = v191;
                                v135 = v192;
                                v136 = v193;
                                swift_bridgeObjectRelease();
                                objc_msgSend(v120, sel_setBounds_, v133, v134, v135, v136);
                              }
                              CRRegister.wrappedValue.getter();
                              v137 = v190;
                              v138 = *MEMORY[0x1E0CD0E08];
                              if (!objc_msgSend(v120, v121[418], *MEMORY[0x1E0CD0E08]))
                              {
                                __break(1u);
                                return;
                              }
                              _bridgeAnyObjectToAny(_:)();
                              swift_unknownObjectRelease();
                              outlined init with take of Any(v194, &v190);
                              swift_dynamicCast();
                              if (v137 == v189)
                              {
                                swift_bridgeObjectRelease_n();
                              }
                              else
                              {
                                v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if ((v139 & 1) == 0)
                                {
                                  CRRegister.wrappedValue.getter();
                                  v140 = (void *)MEMORY[0x1DF0E41AC](v190, *((_QWORD *)&v190 + 1));
                                  swift_bridgeObjectRelease();
                                  objc_msgSend(v120, sel_setValue_forAnnotationKey_, v140, v138);

                                }
                              }
                              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
                              CRRegister.wrappedValue.getter();
                              v141 = (void *)v190;
                              if ((_QWORD)v190)
                              {
                                v142 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, (_QWORD)v190);

                                v143 = objc_msgSend(v120, sel_color);
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                                v144 = static NSObject.== infix(_:_:)();

                                v145 = v180;
                                v146 = v179;
                                if ((v144 & 1) == 0)
                                  objc_msgSend(v120, sel_setColor_, v142);

                              }
                              else
                              {
                                v145 = v180;
                                v146 = v179;
                              }
                              v147 = (uint64_t)v178;
                              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
                              CRRegister.wrappedValue.getter();
                              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v147, 1, v145) == 1)
                              {
                                outlined destroy of StocksKitCurrencyCache.Provider?(v147, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
                                return;
                              }
                              v148 = v170;
                              (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v170, v147, v145);
                              v149 = objc_msgSend(v120, sel_page);
                              if (v149)
                              {
                                v150 = v149;
                                type metadata accessor for PaperKitPDFPage(0);
                                v151 = (id)swift_dynamicCastClass();
                                if (v151)
                                {
                                  v152 = v166;
                                  WeakRef.id.getter();
                                  v153 = objc_msgSend(v151, sel_annotations);
                                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                  v154 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                                  MEMORY[0x1E0C80A78](v155, v156);
                                  *(&v165 - 2) = (uint64_t)v152;
                                  v151 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v165 - 4), v154);

                                  swift_bridgeObjectRelease();
                                  (*(void (**)(char *, uint64_t))(v167 + 8))(v152, v168);
                                }
                                else
                                {

                                }
                              }
                              else
                              {
                                v151 = 0;
                              }
                              v159 = objc_msgSend(v120, sel_popup);
                              if (v159)
                              {
                                v160 = v159;
                                if (!v151)
                                {

LABEL_123:
                                  objc_msgSend(v120, sel_setPopup_, v151);
LABEL_124:

                                  goto LABEL_125;
                                }
                                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                                v151 = v151;
                                v161 = v160;
                                v162 = static NSObject.== infix(_:_:)();

                                if ((v162 & 1) != 0)
                                  goto LABEL_124;
                              }
                              else if (!v151)
                              {
LABEL_125:
                                (*(void (**)(char *, uint64_t))(v146 + 8))(v148, v145);
                                return;
                              }
                              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
                              v151 = v151;
                              v163 = v120;
                              v164 = static NSObject.== infix(_:_:)();

                              if ((v164 & 1) != 0)
                                goto LABEL_124;
                              goto LABEL_123;
                            }
LABEL_91:
                            CRRegister.wrappedValue.getter();
                            PDFAnnotation.quadPoints.setter(v190);
                            goto LABEL_92;
                          }
                        }
                        else if (!v116)
                        {
                          v120 = v187;
                          v121 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                          goto LABEL_92;
                        }
                        swift_bridgeObjectRelease();
                        v120 = v187;
                        v121 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                        goto LABEL_91;
                      }
LABEL_68:
                      CRRegister.wrappedValue.getter();
                      v99 = Int._bridgeToObjectiveC()().super.super.isa;
                      objc_msgSend(v98, sel_setValue_forAnnotationKey_, v99, v96);

                      goto LABEL_69;
                    }
                    v98 = v187;
                    goto LABEL_68;
                  }
LABEL_55:
                  CRRegister.wrappedValue.getter();
                  if (*((_QWORD *)&v190 + 1))
                  {
                    v94 = (void *)MEMORY[0x1DF0E41AC](v190, *((_QWORD *)&v190 + 1));
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v94 = 0;
                  }
                  objc_msgSend(v187, sel_setContents_, v94);

                  goto LABEL_59;
                }
              }
              else
              {
                v93 = v181;
                if (!v91)
                  goto LABEL_59;
              }
            }
            else
            {
              v92 = v177;
              v93 = v181;
              if (!*((_QWORD *)&v86 + 1))
                goto LABEL_59;
            }
            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
LABEL_42:
          CRRegister.wrappedValue.getter();
          if (*((_QWORD *)&v190 + 1))
          {
            v85 = (void *)MEMORY[0x1DF0E41AC](v190, *((_QWORD *)&v190 + 1));
            swift_bridgeObjectRelease();
          }
          else
          {
            v85 = 0;
          }
          objc_msgSend(v68, sel_setWidgetStringValue_, v85);

          goto LABEL_46;
        }
      }
      else if (!v82)
      {
        goto LABEL_46;
      }
    }
    else if (!*((_QWORD *)&v77 + 1))
    {
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_18:
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  v70 = v190;
  v71 = objc_msgSend(v68, sel_widgetStringValue);
  if (!v71)
  {
    if (!*((_QWORD *)&v70 + 1))
      return;
    goto LABEL_31;
  }
  v72 = v71;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v75 = v74;

  if (!*((_QWORD *)&v70 + 1))
  {
    if (!v75)
      return;
    goto LABEL_31;
  }
  if (!v75)
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    CRRegister.wrappedValue.getter();
    if (*((_QWORD *)&v190 + 1))
    {
      v83 = (void *)MEMORY[0x1DF0E41AC](v190, *((_QWORD *)&v190 + 1));
      swift_bridgeObjectRelease();
    }
    else
    {
      v83 = 0;
    }
    objc_msgSend(v68, sel_setWidgetStringValue_, v83);

    return;
  }
  if (v70 == __PAIR128__(v75, v73))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v84 & 1) == 0)
    goto LABEL_32;
}

id specialized PDFAnnotationElement.newPDFAnnotation<A>(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  __int128 v6;
  void *v7;
  id v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[27];
  unint64_t v15[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  CRRegister.wrappedValue.getter();
  v4 = *((double *)&v11 + 1);
  v6 = v12;
  v5 = *(double *)&v13;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  v7 = (void *)MEMORY[0x1DF0E41AC](v15[0], v15[1]);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_initWithBounds_forType_withProperties_, v7, 0, v4, v6, v5);

  v15[0] = 0x8000000000000000;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
  v11 = xmmword_1DDF32D00;
  v12 = 0u;
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(v15, (uint64_t)v3, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  return v8;
}

void specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  unint64_t v6;

  v6 = *a1;
  v5 = type metadata accessor for Capsule();
  MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v5);
  specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(&v6, a2, a3);
}

uint64_t specialized PDFAnnotationElement.applyDifference<A, B>(id:in:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *, char *, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  int32x2_t v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char v103;
  _BOOL4 v104;
  char *v105;
  double v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  double v149;
  double v150;
  double v151;
  double v152;
  void *v153;
  double v154;
  double v155;
  double v156;
  double v157;
  CGRect v158;
  CGRect v159;

  v146 = a6;
  v145 = a4;
  v144 = a2;
  v143 = a1;
  v133 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v137 = *(_QWORD *)(v133 - 8);
  MEMORY[0x1E0C80A78](v133, v6);
  v136 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v138 = (char *)&v114 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v139 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v135 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142, v14);
  v134 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v141 = (char *)&v114 - v18;
  v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v132 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130, v19);
  v131 = (char *)&v114 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v140 = (char *)&v114 - v23;
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v129 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v24);
  v128 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v127 = (char *)&v114 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v29, v30);
  v124 = (char *)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v117 = *(_QWORD *)(v125 - 8);
  MEMORY[0x1E0C80A78](v125, v32);
  v123 = (char *)&v114 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v122 = (char *)&v114 - v36;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v37);
  v119 = (char *)&v114 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v118 = (char *)&v114 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v114 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v43);
  v116 = (char *)&v114 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45, v46);
  v115 = (char *)&v114 - v47;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFAnnotationElement?);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v114 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for CRKeyPath();
  v53 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v54);
  v56 = (char *)&v114 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
  v58 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57, v59);
  v61 = (char *)&v114 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for PDFAnnotationElement();
  v63 = *(_QWORD *)(v62 - 8);
  v65 = MEMORY[0x1E0C80A78](v62, v64);
  v147 = (uint64_t)&v114 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v53 + 16))(v56, v143, v52, v65);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
  WeakRef.init(id:)();
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v61, v57);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v51, 1, v62) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v51, &demangling cache variable for type metadata for PDFAnnotationElement?);
  outlined init with take of PDFAnnotationElement((uint64_t)v51, v147);
  CRRegister.wrappedValue.getter();
  v68 = (uint64_t)v153;
  v69 = *(_QWORD *)&v154;
  v70 = v115;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v68, v69);
  swift_bridgeObjectRelease();
  v71 = v114;
  v146 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
  v72 = v116;
  v146(v116, v70, v42);
  CRRegister.projectedValue.setter();
  v73 = *(void (**)(char *, uint64_t))(v71 + 8);
  v73(v70, v42);
  CRRegister.wrappedValue.getter();
  v74 = (uint64_t)v153;
  v75 = *(_QWORD *)&v154;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v74, v75);
  swift_bridgeObjectRelease();
  v146(v72, v70, v42);
  CRRegister.projectedValue.setter();
  v73(v70, v42);
  v76 = v121;
  CRRegister.wrappedValue.getter();
  v77 = v153;
  v78 = v118;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v77);

  v79 = v120;
  (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v119, v78, v76);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v76);
  v80 = v125;
  CRRegister.wrappedValue.getter();
  v81 = v153;
  v82 = v122;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v153 != v81)
  {
    v153 = v81;
    CRRegister.value.setter();
  }
  v83 = v117;
  (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v123, v82, v80);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v80);
  v84 = (uint64_t)v124;
  v85 = v126;
  CRRegister.wrappedValue.getter();
  v86 = v127;
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v84);
  outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for Date?);
  v87 = v129;
  (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v128, v86, v85);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v85);
  v88 = v130;
  CRRegister.wrappedValue.getter();
  v89 = (uint64_t)v153;
  v90 = v154;
  v91 = v155;
  v92 = v156;
  v93 = v157;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v95 = v149;
  v96 = v150;
  v97 = v151;
  v98 = v152;
  v99 = v133;
  v100 = (uint64_t)v139;
  v101 = v132;
  if (v148)
  {
    v102 = v138;
    if (!v89 || (specialized static Array<A>.== infix(_:_:)(v148, v89, v94), (v103 & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_12:
      v148 = v89;
      v149 = v90;
      v150 = v91;
      v151 = v92;
      v152 = v93;
      v105 = v140;
      CRRegister.value.setter();
      goto LABEL_13;
    }
  }
  else
  {
    v102 = v138;
    if (v89)
      goto LABEL_12;
  }
  v158.origin.x = v95;
  v158.origin.y = v96;
  v158.size.width = v97;
  v158.size.height = v98;
  v159.origin.x = v90;
  v159.origin.y = v91;
  v159.size.width = v92;
  v159.size.height = v93;
  v104 = CGRectEqualToRect(v158, v159);
  swift_bridgeObjectRelease();
  if (!v104)
    goto LABEL_12;
  swift_bridgeObjectRelease();
  v105 = v140;
LABEL_13:
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v131, v105, v88);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v105, v88);
  CRRegister.wrappedValue.getter();
  v107 = v153;
  v106 = v154;
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  if (v153 == v107 && *(_QWORD *)&v154 == *(_QWORD *)&v106)
  {
    swift_bridgeObjectRelease_n();
    v108 = v142;
    v109 = v135;
  }
  else
  {
    v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v109 = v135;
    if ((v110 & 1) == 0)
    {
      v153 = v107;
      v154 = v106;
      v108 = v142;
      v111 = v141;
      CRRegister.value.setter();
      v100 = (uint64_t)v139;
      goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    v100 = (uint64_t)v139;
    v108 = v142;
  }
  v111 = v141;
LABEL_20:
  v112 = v147;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v134, v111, v108);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
  CRRegister.wrappedValue.getter();
  CRRegister.projectedValue.getter();
  specialized CRRegister<>.setIfDifferent(_:)(v100);
  outlined destroy of StocksKitCurrencyCache.Provider?(v100, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?);
  v113 = v137;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v136, v102, v99);
  CRRegister.projectedValue.setter();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v102, v99);
  return outlined destroy of PDFAnnotationElement(v112);
}

uint64_t PDFAnnotationElement.render<A>(in:id:capsule:options:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PDFAnnotationElement.AnnotationShape.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [PDFAnnotationElement.AnnotationShape.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t base witness table accessor for CRStruct_Base_8 in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRStruct_Base in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_1 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<String?> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_4 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Int> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_5 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Date?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Date?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_6 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<PDFAnnotationElement.AnnotationShape> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_7 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<String> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<String>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_8 : CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<WeakRef<PDFAnnotationElement>?> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRMergeable in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t base witness table accessor for CRType in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_8<PDFAnnotationElement> and conformance CRStructMergeableDelta_8<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_8<PDFAnnotationElement>, MEMORY[0x1E0D12788]);
}

uint64_t base witness table accessor for CRCodable in PDFAnnotationElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t (*)(uint64_t))type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement);
}

double sub_1DDB90120@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1DDB90168()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB901A8()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB90200()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB90258()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB902A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_15Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDB902B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_15Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_15Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PDFAnnotationElement();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  return a4(v5);
}

uint64_t sub_1DDB90320()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB90378()
{
  type metadata accessor for PDFAnnotationElement();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB903C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_27Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDB903D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_27Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_27Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PDFAnnotationElement();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  return a4(v5);
}

__n128 sub_1DDB90438@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  a1[1] = result;
  return result;
}

void sub_1DDB9044C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for PDFAnnotationElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[10];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PDFAnnotationElement(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[9];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = a1 + a2[10];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[11];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for PDFAnnotationElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB90E24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_15:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_15;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_15;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[9];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[10];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[11];
    goto LABEL_15;
  }
  v20 = *(_QWORD *)(a1 + a3[12]);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB90FA8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_15:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<Int>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Date?>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[8];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[9];
    goto LABEL_15;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v14 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v19;
    v15 = a4[10];
    goto LABEL_15;
  }
  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[11];
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

void type metadata completion function for PDFAnnotationElement()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<String?>, &demangling cache variable for type metadata for String?, &lazy protocol witness table cache variable for type String? and conformance <A> A?, MEMORY[0x1E0D12CF8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Int>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Int>);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<Date?>, &demangling cache variable for type metadata for Date?, (unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance <A> A?, MEMORY[0x1E0D116C8]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<PDFAnnotationElement.AnnotationShape>();
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<Int>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<String>);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<WeakRef<PDFAnnotationElement>?>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>?, (void (*)(void))lazy protocol witness table accessor for type WeakRef<PDFAnnotationElement>? and conformance <A> A?);
              if (v6 <= 0x3F)
                swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<String?>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    lazy protocol witness table accessor for type String? and conformance <A> A?(a4, a3, a5);
    v9 = type metadata accessor for CRRegister();
    if (!v10)
      atomic_store(v9, a2);
  }
}

void type metadata accessor for CRRegister<PDFAnnotationElement.AnnotationShape>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>)
  {
    lazy protocol witness table accessor for type PDFAnnotationElement.AnnotationShape and conformance PDFAnnotationElement.AnnotationShape();
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
  }
}

void type metadata accessor for CRRegister<Int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = type metadata accessor for CRRegister();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t destroy for PDFAnnotationElement.AnnotationShape()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PDFAnnotationElement.AnnotationShape(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PDFAnnotationElement.AnnotationShape(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PDFAnnotationElement.AnnotationShape(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PDFAnnotationElement.AnnotationShape()
{
  return &type metadata for PDFAnnotationElement.AnnotationShape;
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElement.AnnotationShape.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDB9160C + 4 * byte_1DDF33DFA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDB91640 + 4 * byte_1DDF33DF5[v4]))();
}

uint64_t sub_1DDB91640(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB91648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB91650);
  return result;
}

uint64_t sub_1DDB9165C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB91664);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDB91668(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB91670(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PDFAnnotationElement.AnnotationShape.CodingKeys()
{
  return &type metadata for PDFAnnotationElement.AnnotationShape.CodingKeys;
}

uint64_t partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PaperKitPDFPage.annotationFor(id:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1DDB916EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v5, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v5, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, (void *)(v1 + v4), *(_QWORD *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16));
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, (void *)(v1 + v4), *(_QWORD *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16), &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D117A8], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>);
}

{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, (void *)(v1 + v4), *(_QWORD *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16));
}

unint64_t outlined copy of PaperDocument.PDFDocumentUse(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1)
      return result;
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

uint64_t outlined init with take of PDFAnnotationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PDFAnnotationElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PDFAnnotationElement(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PDFAnnotationElement();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t);
  __int128 v11;
  __int128 v12;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v12 + 1) = swift_getObjectType();
    *(_QWORD *)&v11 = a2;
  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v11, &demangling cache variable for type metadata for Any?);
}

uint64_t UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t result;
  _QWORD v21[6];

  v7 = v6;
  v14 = objc_msgSend(v7, sel_textStorage);
  v15 = *MEMORY[0x1E0DC10F8];
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v7;
  *(_BYTE *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:);
  *(_QWORD *)(v17 + 24) = v16;
  v21[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  v21[5] = v17;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_34;
  v18 = _Block_copy(v21);
  v19 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v15, a1, a2, a4, v18);

  _Block_release(v18);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a4 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v28;
  _BYTE v29[24];
  uint64_t v30;

  outlined init with copy of Any?(a1, (uint64_t)v29);
  if (!v30)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v13 = objc_msgSend(v28, sel_fileType);
  if (!v13)
    goto LABEL_18;
  v14 = v13;
  v26 = a7;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_18;
  }
  v21 = objc_msgSend(a5, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v28, a2, a6 & 1, v26);
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, sel_view);
    if (v23)
    {
      v24 = v23;
      type metadata accessor for PaperTextAttachmentView();
      v25 = swift_dynamicCastClass();
      if (v25)
      {
        v27(v25, a2, a3, a4);

        return;
      }

    }
  }
LABEL_18:

}

uint64_t UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t result;
  _QWORD v21[6];

  v7 = v6;
  v14 = objc_msgSend(v7, sel_textStorage);
  v15 = *MEMORY[0x1E0DC10F8];
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v7;
  *(_BYTE *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = a5;
  *(_QWORD *)(v16 + 40) = a6;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:);
  *(_QWORD *)(v17 + 24) = v16;
  v21[4] = _sIg_Ieg_TRTA_0;
  v21[5] = v17;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v21[3] = &block_descriptor_5;
  v18 = _Block_copy(v21);
  v19 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_enumerateAttribute_inRange_options_usingBlock_, v15, a1, a2, a4, v18);

  _Block_release(v18);
  LOBYTE(a4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a4 & 1) != 0)
    __break(1u);
  return result;
}

void closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v31;
  _BYTE v32[24];
  uint64_t v33;

  outlined init with copy of Any?(a1, (uint64_t)v32);
  if (!v33)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v15 = objc_msgSend(v31, sel_fileType);
  if (!v15)
    goto LABEL_22;
  v16 = v15;
  v29 = a8;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  if (v17 == 0xD000000000000013 && v19 == 0x80000001DDF4DCA0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
      goto LABEL_22;
  }
  v21 = objc_msgSend(a5, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v31, a2, a6 & 1, v29, a7);
  if (v21)
  {
    v22 = v21;
    v23 = objc_msgSend(v21, sel_view);
    if (v23)
    {
      v24 = v23;
      swift_getObjectType();
      if (swift_conformsToProtocol2())
        v25 = v24;
      else
        v25 = 0;
      if (v25)
      {
        v26 = v24;
        v27 = specialized UIView.firstDescendent(where:)(v25);

        if (v27)
        {
          type metadata accessor for PaperDocumentView();
          v28 = swift_dynamicCastClass();
          if (v28)
          {
            v30(v28, a2, a3, a4);

            return;
          }

        }
      }
      else
      {

      }
    }

  }
LABEL_22:

}

uint64_t sub_1DDB9212C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UITextView.enumeratePaperDocumentTextAttachments(in:createIfNeeded:options:using:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1DDB92160()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSTextAttachment()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTextAttachment;
  if (!lazy cache variable for type metadata for NSTextAttachment)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTextAttachment);
  }
  return result;
}

void closure #1 in UITextView._ppk_registerUndo(_:selection:undoManager:paperIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  int v22;
  _QWORD aBlock[6];
  void *v27;

  v27 = 0;
  v12 = objc_msgSend(a1, sel_textStorage);
  v13 = *MEMORY[0x1E0DC10F8];
  v14 = objc_msgSend(a1, sel_textStorage);
  v15 = objc_msgSend(v14, sel_length);

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = &v27;
  v16[5] = a1;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = closure #1 in UITextView._ppk_paperTextAttachmentView(from:)partial apply;
  *(_QWORD *)(v17 + 24) = v16;
  aBlock[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_24;
  v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v19 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttribute_inRange_options_usingBlock_, v13, 0, v15, 0, v18);

  _Block_release(v18);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v20 = v27;
    v21 = swift_release();
    if (v20)
    {
      MEMORY[0x1E0C80A78](v21, a5 != 0);
      specialized Canvas.undoable(newChange:persistSelection:action:)(1, v22, (uint64_t (*)(double))partial apply for specialized closure #1 in Canvas.applyUndo(_:selection:));
      if (a5)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        AnyCanvas.selection.setter(a5, a6, a7, a8 & 1);
      }

    }
  }
}

void closure #1 in UITextView._ppk_registerUndo(_:undoManager:paperIdentifier:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  char isEscapingClosureAtFileLocation;
  void *v16;
  _QWORD aBlock[6];
  void *v19;

  v19 = 0;
  v7 = objc_msgSend(a1, sel_textStorage);
  v8 = *MEMORY[0x1E0DC10F8];
  v9 = objc_msgSend(a1, sel_textStorage);
  v10 = objc_msgSend(v9, sel_length);

  v11 = (_QWORD *)swift_allocObject();
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = &v19;
  v11[5] = a1;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = partial apply for closure #1 in UITextView._ppk_paperTextAttachmentView(from:);
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_13;
  v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v14 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_enumerateAttribute_inRange_options_usingBlock_, v8, 0, v10, 0, v13);

  _Block_release(v13);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v16 = v19;
    swift_release();
    if (v16)
    {
      a4(v16);

    }
  }
}

void closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, void **a7, void *a8)
{
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  _BYTE v27[24];
  uint64_t v28;

  outlined init with copy of Any?(a1, (uint64_t)v27);
  if (!v28)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSTextAttachment();
  if ((swift_dynamicCast() & 1) == 0)
    return;
  v14 = v26;
  v15 = swift_dynamicCastObjCProtocolConditional();
  if (v15)
  {
    v16 = (void *)v15;
    v14 = v26;
    v17 = objc_msgSend(v16, sel__paperIdentifier, &unk_1F049E4E0);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

    if (v18 == a5 && v20 == a6)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    v22 = objc_msgSend(a8, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, v14, a2, 1);
    if (v22)
    {
      v23 = v22;
      v24 = objc_msgSend(v22, sel_view);

      if (!v24)
      {
LABEL_13:
        v22 = 0;
        goto LABEL_14;
      }
      type metadata accessor for PaperTextAttachmentView();
      v22 = (id)swift_dynamicCastClass();
      if (!v22)
      {

        goto LABEL_13;
      }
    }
LABEL_14:
    v25 = *a7;
    *a7 = v22;

    *a4 = 1;
    goto LABEL_15;
  }
LABEL_16:

}

void specialized closure #1 in Canvas.applyUndo(_:selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CapsuleUndoAction();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();

}

void partial apply for closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;

  closure #1 in UITextView._ppk_paperTextAttachmentView(from:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(void ***)(v4 + 32), *(void **)(v4 + 40));
}

uint64_t sub_1DDB92938()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1DDB92978()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in Canvas.applyUndo(_:selection:)()
{
  uint64_t v0;

  specialized closure #1 in Canvas.applyUndo(_:selection:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void partial apply for closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  closure #1 in UITextView.enumeratePaperTextAttachments(in:createIfNeeded:options:using:)(a1, a2, a3, a4, *(void **)(v4 + 16), *(_BYTE *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t sub_1DDB929A0()
{
  return swift_deallocObject();
}

double GraphElement.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t GraphElement.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t GraphElement.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GraphElement.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double GraphElement.rotation.getter()
{
  double v1;

  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for GraphElement.rotation : GraphElement@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for GraphElement.rotation : GraphElement()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphElement.rotation.setter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$rotation.getter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphElement.$rotation : GraphElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t GraphElement.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphElement.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphElement() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double GraphElement.visibleRange.getter()
{
  double v1;

  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for GraphElement.visibleRange : GraphElement@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for GraphElement.visibleRange : GraphElement()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphElement.visibleRange.setter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphElement.visibleRange.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphElement.$visibleRange.getter()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphElement.$visibleRange : GraphElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t GraphElement.$visibleRange.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for GraphElement();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphElement.$visibleRange.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphElement() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t GraphElement.expressions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GraphElement() + 28);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GraphElement.expressions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GraphElement() + 28);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GraphElement.expressions.modify())(_QWORD, _QWORD)
{
  type metadata accessor for GraphElement();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t GraphElement.additionalFields.getter()
{
  type metadata accessor for GraphElement();
  return swift_bridgeObjectRetain();
}

uint64_t GraphElement.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for GraphElement() + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*GraphElement.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for GraphElement();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static GraphElement.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6EF60;
  v4 = qword_1EDB6EF68;
  v3 = unk_1EDB6EF70;
  v5 = qword_1EDB6EF78;
  v6 = qword_1EDB6EF80;
  v7 = qword_1EDB6EF88;
  v8 = qword_1EDB6EF90;
  v10 = qword_1EDB6EF98;
  v9 = *(_QWORD *)byte_1EDB6EFA0;
  v11 = qword_1EDB6EFA8;
  v12 = qword_1EDB6EFB0;
  *a1 = static GraphElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t GraphElement.init()@<X0>(uint64_t a1@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = specialized static GraphElement.defaultVisibleRange.getter();
  return GraphElement.init(frame:visibleRange:rotation:)(a1, 0.0, 0.0, 0.0, 0.0, v2, v3, v4, v5, 0);
}

uint64_t GraphElement.init(frame:visibleRange:rotation:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;

  v46 = a9;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v45 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v43 = *(_QWORD *)(v21 - 8);
  v44 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v41 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v24 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v25);
  v27 = (char *)v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v49 = 0u;
  v50 = 0u;
  CRRegister.init(wrappedValue:)();
  v28 = (int *)type metadata accessor for GraphElement();
  v40 = a1 + v28[5];
  *(_QWORD *)&v49 = 0;
  v38[1] = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v39 = a1 + v28[6];
  *(_QWORD *)&v49 = specialized static GraphElement.defaultVisibleRange.getter();
  *((_QWORD *)&v49 + 1) = v29;
  *(_QWORD *)&v50 = v30;
  *((_QWORD *)&v50 + 1) = v31;
  CRRegister.init(wrappedValue:)();
  v38[0] = a1 + v28[7];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12888]);
  CROrderedSet.init()();
  *(_QWORD *)(a1 + v28[8]) = MEMORY[0x1E0DEE9E0];
  *(double *)&v49 = a2;
  *((double *)&v49 + 1) = a3;
  *(double *)&v50 = a4;
  *((double *)&v50 + 1) = a5;
  CRRegister.init(_:)();
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 40);
  v33 = a1;
  v34 = v42;
  v32(v33, v27, v42);
  *(_QWORD *)&v49 = a10;
  v35 = v41;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 40))(v40, v35, v44);
  *(double *)&v49 = a6;
  *((double *)&v49 + 1) = a7;
  *(double *)&v50 = a8;
  *((double *)&v50 + 1) = v46;
  CRRegister.init(_:)();
  v32(v39, v27, v34);
  v36 = v45;
  CROrderedSet.init()();
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(v47 + 40))(v38[0], v36, v48);
}

uint64_t GraphElement.minAppFormatVersion.getter()
{
  return 6;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.minEncodingVersion.getter();
}

uint64_t protocol witness for CRCodable.minAppFormatVersion.getter in conformance GraphElement()
{
  return 6;
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance GraphElement@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6EF60;
  v4 = qword_1EDB6EF68;
  v3 = unk_1EDB6EF70;
  v5 = qword_1EDB6EF78;
  v6 = qword_1EDB6EF80;
  v7 = qword_1EDB6EF88;
  v8 = qword_1EDB6EF90;
  v10 = qword_1EDB6EF98;
  v9 = *(_QWORD *)byte_1EDB6EFA0;
  v11 = qword_1EDB6EFA8;
  v12 = qword_1EDB6EFB0;
  *a1 = static GraphElement.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return static CRStruct_4.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance GraphElement()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance GraphElement())()
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance GraphElement@<X0>(uint64_t a1@<X8>)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = specialized static GraphElement.defaultVisibleRange.getter();
  return GraphElement.init(frame:visibleRange:rotation:)(a1, 0.0, 0.0, 0.0, 0.0, v2, v3, v4, v5, 0);
}

uint64_t protocol witness for CRDT.context.getter in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRStruct_4.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance GraphElement()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return CRDT.init(serializedData:)();
}

double GraphElement.bounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

void (*GraphElement.bounds.modify(_QWORD *a1))(void **a1)
{
  _OWORD *v2;
  __int128 v3;

  v2 = malloc(0x40uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v3 = v2[3];
  *v2 = v2[2];
  v2[1] = v3;
  return GraphElement.bounds.modify;
}

void GraphElement.bounds.modify(void **a1)
{
  free(*a1);
}

uint64_t GraphElement.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 2;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t GraphElement.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 80) = a6;
  *(_QWORD *)(v7 + 88) = v6;
  *(_QWORD *)(v7 + 64) = a3;
  *(_QWORD *)(v7 + 72) = a5;
  *(_QWORD *)(v7 + 48) = a1;
  *(_QWORD *)(v7 + 56) = a2;
  *(_BYTE *)(v7 + 112) = *(_BYTE *)(a4 + 74);
  return swift_task_switch();
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 112) & 1) != 0)
  {
    specialized GraphElement.renderFromPrerenderCache<A>(in:id:capsule:options:)(*(CGContext **)(v0 + 48), *(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized GraphElement.image<A>(size:darkMode:isRTL:in:)
                                                           + async function pointer to specialized GraphElement.image<A>(size:darkMode:isRTL:in:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 96) = v2;
    *v2 = v0;
    v2[1] = GraphElement.render<A>(in:id:capsule:options:);
    return v3(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  if (v1)
  {
    GraphElement.renderImage(_:in:)(*(CGImageRef *)(v0 + 104), *(CGContextRef *)(v0 + 48));

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GraphElement.render<A>(in:id:capsule:options:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

Swift::Void __swiftcall GraphElement.renderImage(_:in:)(CGImageRef _, CGContextRef in)
{
  double MidX;
  double MidY;
  CGFloat v6;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGPoint v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat MinX;
  CGFloat MaxY;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  __C::CGRect v33;

  CGContextSaveGState(in);
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v29.origin.x = t1.a;
  v29.origin.y = t1.b;
  v29.size.width = t1.c;
  v29.size.height = t1.d;
  MidX = CGRectGetMidX(v29);
  v30.origin.x = t1.a;
  v30.origin.y = t1.b;
  v30.size.width = t1.c;
  v30.size.height = t1.d;
  MidY = CGRectGetMidY(v30);
  CGAffineTransformMakeRotation(&t1, t1.a);
  v22 = *(_OWORD *)&t1.c;
  v24 = *(_OWORD *)&t1.a;
  v6 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v13 = t1.tx;
  v14 = t1.ty;
  *(_OWORD *)&t2.a = v24;
  *(_OWORD *)&t2.c = v22;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v26, &t1, &t2);
  v23 = *(_OWORD *)&v26.c;
  v25 = *(_OWORD *)&v26.a;
  v15 = v26.tx;
  v16 = v26.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v13;
  t1.ty = v14;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v25;
  *(_OWORD *)&t1.c = v23;
  t1.tx = v15;
  t1.ty = v16;
  CGAffineTransformConcat(&v26, &t1, &t2);
  t1 = v26;
  CGContextConcatCTM(in, &t1);
  CRRegister.wrappedValue.getter();
  v17 = *(CGPoint *)&t1.a;
  v18 = t1.c;
  v19 = t1.d;
  UIGraphicsPushContext(in);
  CGContextSaveGState(in);
  v31.origin = v17;
  v31.size.width = v18;
  v31.size.height = v19;
  MinX = CGRectGetMinX(v31);
  v32.origin = v17;
  v32.size.width = v18;
  v32.size.height = v19;
  MaxY = CGRectGetMaxY(v32);
  CGContextTranslateCTM(in, MinX, MaxY);
  CGContextScaleCTM(in, 1.0, -1.0);
  v33.origin.x = 0.0;
  v33.origin.y = 0.0;
  v33.size.width = v18;
  v33.size.height = v19;
  CGContextRef.draw(_:in:byTiling:)(_, v33, 0);
  CGContextRestoreGState(in);
  UIGraphicsPopContext();
  CGContextRestoreGState(in);
}

uint64_t GraphElement.graphables<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for GraphElement();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(v12 + 28), v7);
  v16 = a2;
  v17 = a3;
  v18 = a1;
  type metadata accessor for GraphableExpression();
  v13 = CROrderedSet.map<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  return v13;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance GraphElement(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 2;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance GraphElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;

  v14 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v14;
  *(_QWORD *)v14 = v7;
  *(_QWORD *)(v14 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_QWORD *)(v14 + 80) = a6;
  *(_QWORD *)(v14 + 88) = v6;
  *(_QWORD *)(v14 + 64) = a3;
  *(_QWORD *)(v14 + 72) = a5;
  *(_QWORD *)(v14 + 48) = a1;
  *(_QWORD *)(v14 + 56) = a2;
  *(_BYTE *)(v14 + 112) = *(_BYTE *)(a4 + 74);
  return swift_task_switch();
}

uint64_t Capsule<>.graphElementClosestTo(_:maxDistance:)@<X0>(double a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v50)(uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  double v57;
  double v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MaxX;
  double v67;
  double MinY;
  double MaxY;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  char *v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;

  v93 = a5;
  v92 = a4;
  LODWORD(v87) = a2;
  v75 = a1;
  v89 = a8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v83 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v85 = (uint64_t)&v74 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v74 - v19;
  v21 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v21, v22);
  v88 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v94 = (uint64_t)&v74 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v91 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v74 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = a3;
  v90 = *(_QWORD *)(a3 + 16);
  v81 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v74 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v80 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v39);
  v41 = (char *)&v74 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v77 = (char *)&v74 - v44;
  v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v82 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v45);
  v95 = (char *)&v74 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v86 = a6;
  v49(a6, 1, 1, v47);
  if ((LOBYTE(v87) & 1) != 0)
  {
    if (one-time initialization token for maxGraphElementDistance != -1)
      swift_once();
    v87 = *(double *)&static UIConstants.maxGraphElementDistance;
  }
  else
  {
    v87 = v75;
  }
  Capsule<>.root.getter();
  v50 = *(void (**)(uint64_t))(v93 + 72);
  v76 = v41;
  v51 = v90;
  v50(v90);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v38, v51);
  v52 = v77;
  v53 = v79;
  CROrderedSet.filter(_:)();
  v93 = *(_QWORD *)(v80 + 8);
  ((void (*)(char *, uint64_t))v93)(v76, v53);
  CROrderedSet.makeIterator()();
  ((void (*)(char *, uint64_t))v93)(v52, v53);
  CROrderedSet.Iterator.next()();
  v54 = v91;
  v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
  if (v55(v34, 1, v27) != 1)
  {
    v93 = *(_QWORD *)(v54 + 32);
    v57 = 0.0;
    v84 = v48;
    ((void (*)(char *, char *, uint64_t))v93)(v30, v34, v27);
    while (1)
    {
      SharedTagged_9.tagged3.getter();
      v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      if (v59(v20, 1, v47) == 1)
        break;
      v60 = (uint64_t)v88;
      Ref.subscript.getter();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v47);
      outlined init with take of GraphElement(v60, v94);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      x = v97.origin.x;
      y = v97.origin.y;
      width = v97.size.width;
      height = v97.size.height;
      MinX = CGRectGetMinX(v97);
      v98.origin.x = x;
      v98.origin.y = y;
      v98.size.width = width;
      v98.size.height = height;
      MaxX = CGRectGetMaxX(v98);
      if (MaxX >= a7)
        MaxX = a7;
      if (MinX <= a7)
        v67 = MaxX;
      else
        v67 = MinX;
      v99.origin.x = x;
      v99.origin.y = y;
      v99.size.width = width;
      v99.size.height = height;
      MinY = CGRectGetMinY(v99);
      v100.origin.x = x;
      v100.origin.y = y;
      v100.size.width = width;
      v100.size.height = height;
      MaxY = CGRectGetMaxY(v100);
      if (MaxY >= v89)
        MaxY = v89;
      if (MinY > v89)
        MaxY = MinY;
      v58 = sqrt((v67 - a7) * (v67 - a7) + (MaxY - v89) * (MaxY - v89));
      if (v58 >= v87
        || (v70 = v85,
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v86, v85, &demangling cache variable for type metadata for Ref<GraphElement>?), v71 = v59((char *)v70, 1, v47), v48 = v84, outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for Ref<GraphElement>?), v71 != 1)&& v58 >= v57)
      {
        outlined destroy of PKStrokeProperties(v94, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
        v54 = v91;
        goto LABEL_10;
      }
      v72 = (uint64_t)v83;
      SharedTagged_9.tagged3.getter();
      outlined destroy of PKStrokeProperties(v94, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
      v54 = v91;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v30, v27);
      v73 = v86;
      outlined destroy of StocksKitCurrencyCache.Provider?(v86, &demangling cache variable for type metadata for Ref<GraphElement>?);
      outlined init with take of Ref<GraphElement>?(v72, v73);
LABEL_11:
      CROrderedSet.Iterator.next()();
      v57 = v58;
      if (v55(v34, 1, v27) == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v95, v96);
      ((void (*)(char *, char *, uint64_t))v93)(v30, v34, v27);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Ref<GraphElement>?);
LABEL_10:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v27);
    v58 = v57;
    goto LABEL_11;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v95, v96);
}

BOOL closure #1 in Capsule<>.graphElementClosestTo(_:maxDistance:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.tagged3.getter();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Ref<GraphElement>?);
  return v5;
}

uint64_t specialized GraphElement.image<A>(size:darkMode:isRTL:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[25] = a3;
  v4[26] = v3;
  v4[23] = a1;
  v4[24] = a2;
  v5 = type metadata accessor for CalculateGraphView();
  v4[27] = v5;
  v4[28] = *(_QWORD *)(v5 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<CalculateGraphView, _FrameLayout>);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v6 = type metadata accessor for CalculateExpression.Base();
  v4[33] = v6;
  v4[34] = *(_QWORD *)(v6 - 8);
  v4[35] = swift_task_alloc();
  type metadata accessor for UUID();
  v4[36] = swift_task_alloc();
  v4[37] = *(_QWORD *)(type metadata accessor for GraphableExpression() - 8);
  v4[38] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[39] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t specialized GraphElement.image<A>(size:darkMode:isRTL:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  swift_release();
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 1);
  v31 = MEMORY[0x1E0DEE9D8];
  v4 = GraphElement.graphables<A>(in:)(v3, v2, v1);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 296);
    v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v26 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v0 + 272);
    v25 = (void *)*MEMORY[0x1E0D09E80];
    v24 = *MEMORY[0x1E0D09CA0];
    do
    {
      v8 = *(_QWORD *)(v0 + 280);
      v9 = *(_QWORD *)(v0 + 264);
      outlined init with copy of GraphableExpression(v7, *(_QWORD *)(v0 + 304));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
      *(_QWORD *)(inited + 32) = v25;
      *(_QWORD *)(inited + 64) = type metadata accessor for NSNumber();
      *(_QWORD *)(inited + 40) = v30;
      v11 = v25;
      v12 = v30;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      UUID.init()();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v8, v24, v9);
      type metadata accessor for CalculateExpression();
      swift_allocObject();
      CalculateExpression.init(_:options:base:id:)();
      type metadata accessor for CalculateGraphExpression();
      swift_allocObject();
      swift_retain();
      CalculateGraphExpression.init(_:color:)();
      v13 = swift_retain();
      MEMORY[0x1DF0E4398](v13);
      if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v14 = *(_QWORD *)(v0 + 304);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      swift_release();
      outlined destroy of PKStrokeProperties(v14, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      v7 += v26;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v27 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  type metadata accessor for CalculateGraph();
  swift_allocObject();
  CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:)();
  swift_retain();
  CalculateGraphView.init(graph:)();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v16, v18);
  v19 = (_OWORD *)(v15 + *(int *)(v27 + 36));
  v20 = *(_OWORD *)(v0 + 88);
  v21 = *(_OWORD *)(v0 + 120);
  v19[1] = *(_OWORD *)(v0 + 104);
  v19[2] = v21;
  *v19 = v20;
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v15, v29, &demangling cache variable for type metadata for ModifiedContent<CalculateGraphView, _FrameLayout>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<ModifiedContent<CalculateGraphView, _FrameLayout>>);
  swift_allocObject();
  ImageRenderer.init(content:)();
  v22 = ImageRenderer.cgImage.getter();
  swift_release();

  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v15, &demangling cache variable for type metadata for ModifiedContent<CalculateGraphView, _FrameLayout>);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v22);
}

void specialized GraphElement.renderFromPrerenderCache<A>(in:id:capsule:options:)(CGContext *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  objc_class *v11;
  char *v12;
  id v13;
  CGImage *v14;
  objc_super v15;

  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  v9 = *(void **)(static GraphCanvasElementRenderedImageCache.shared + 16);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v10(v8, a2, v4);
  v11 = (objc_class *)type metadata accessor for KeyPathWrapper();
  v12 = (char *)objc_allocWithZone(v11);
  v10(&v12[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], (uint64_t)v8, v4);
  v15.receiver = v12;
  v15.super_class = v11;
  v13 = -[CGContext init](&v15, sel_init);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = (CGImage *)objc_msgSend(v9, sel_objectForKey_, v13);

  if (v14)
  {
    GraphElement.renderImage(_:in:)(v14, a1);

  }
}

double specialized static GraphElement.defaultVisibleRange.getter()
{
  void *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  double v13;
  double v14;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_standardUserDefaults);
  v2 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000021, 0x80000001DDF4DCC0);
  objc_msgSend(v1, sel_doubleForKey_, v2);
  v4 = v3;

  v5 = objc_msgSend(v0, sel_standardUserDefaults);
  v6 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000021, 0x80000001DDF4DCF0);
  objc_msgSend(v5, sel_doubleForKey_, v6);

  v7 = objc_msgSend(v0, sel_standardUserDefaults);
  v8 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000022, 0x80000001DDF4DD20);
  objc_msgSend(v7, sel_doubleForKey_, v8);
  v10 = v9;

  v11 = objc_msgSend(v0, sel_standardUserDefaults);
  v12 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000022, 0x80000001DDF4DD50);
  objc_msgSend(v11, sel_doubleForKey_, v12);
  v14 = v13;

  if (v10 <= 0.0 || v14 <= 0.0)
    return 0.0;
  return v4;
}

uint64_t type metadata accessor for GraphElement()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GraphElement;
  if (!type metadata singleton initialization cache for GraphElement)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with take of GraphElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Ref<GraphElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for CRStruct_Base_4 in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t base witness table accessor for CRStruct_Base in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_3 : CRDT in GraphElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<GraphableExpression>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>, MEMORY[0x1E0D11DB0]);
}

uint64_t base witness table accessor for CRDT in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t base witness table accessor for CRMergeable in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t base witness table accessor for CRType in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in GraphElement()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<GraphElement> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<GraphElement>, MEMORY[0x1E0D12758]);
}

uint64_t base witness table accessor for CRCodable in GraphElement()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

uint64_t sub_1DDB95CAC()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB95CEC()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDB95D44()
{
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for GraphElement(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v8((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GraphElement(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v5(a1 + a2[6], v4);
  v8 = a1 + a2[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for GraphElement(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB96338(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDB9641C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void type metadata completion function for GraphElement()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CROrderedSet<Ref<GraphableExpression>>();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CROrderedSet<Ref<GraphableExpression>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12870]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12888]);
    v0 = type metadata accessor for CROrderedSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  }
}

uint64_t partial apply for closure #1 in GraphElement.graphables<A>(in:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  return Ref.subscript.getter();
}

uint64_t outlined init with copy of GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t destroy for MiniObjectButtons()
{
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_weakTakeInit();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniObjectButtons(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniObjectButtons(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniObjectButtons()
{
  return &type metadata for MiniObjectButtons;
}

uint64_t associated type witness table accessor for View.Body : View in MiniObjectButtons()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static ViewBuilder.buildBlock<each A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*a1, a2, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>));
  v5 = a2 + v4[12];
  v6 = a1[1];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  v12(v5, v6, v7);
  v12(a2 + v4[16], a1[2], v7);
  v12(a2 + v4[20], a1[3], v7);
  v12(a2 + v4[24], a1[4], v7);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[5], a2 + v4[28], &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[6], a2 + v4[32], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[7], a2 + v4[36], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[8], a2 + v4[40], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[9], a2 + v4[44], &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[10], a2 + v4[48], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1[11], a2 + v4[52], &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  v8 = a2 + v4[56];
  v9 = a1[12];
  v10 = type metadata accessor for Divider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(a2 + v4[60], a1[13], v7);
}

uint64_t MiniObjectButtons.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)@<X0>(uint64_t@<X8>);
  uint64_t v27;
  uint64_t (*v28)@<X0>(uint64_t@<X8>);
  uint64_t (*v29)@<X0>(uint64_t@<X8>);
  uint64_t (*v30)@<X0>(uint64_t@<X8>);
  uint64_t (*v31)@<X0>(uint64_t@<X8>);
  uint64_t (*v32)@<X0>(uint64_t@<X8>);
  uint64_t (*v33)@<X0>(uint64_t@<X8>);
  uint64_t v34;
  uint64_t (*v35)@<X0>(uint64_t@<X8>);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t OpaqueTypeConformance2;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t (**v60)@<X0>(uint64_t@<X8>);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)@<X0>(uint64_t@<X8>);
  uint64_t (*v64)@<X0>(uint64_t@<X8>);
  uint64_t (*v65)@<X0>(uint64_t@<X8>);
  uint64_t (*v66)@<X0>(uint64_t@<X8>);
  uint64_t (*v67)@<X0>(uint64_t@<X8>);
  uint64_t (*v68)@<X0>(uint64_t@<X8>);
  uint64_t v69;
  uint64_t (*v71)@<X0>(uint64_t@<X8>);
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t (*v80)@<X0>(uint64_t@<X8>);
  uint64_t (**v81)@<X0>(uint64_t@<X8>);
  uint64_t (*v82)@<X0>(uint64_t@<X8>);
  uint64_t v83;
  uint64_t (*v84)@<X0>(uint64_t@<X8>);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)@<X0>(uint64_t@<X8>);
  uint64_t (*v100)@<X0>(uint64_t@<X8>);
  uint64_t (*v101)@<X0>(uint64_t@<X8>);
  uint64_t (*v102)@<X0>(uint64_t@<X8>);
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t (*v107)@<X0>(uint64_t@<X8>);
  unsigned __int8 v108;
  uint64_t (*v109)@<X0>(uint64_t@<X8>);
  unsigned __int8 v110;
  uint64_t (*v111)@<X0>(uint64_t@<X8>);
  uint64_t (*v112)@<X0>(uint64_t@<X8>);

  v2 = v1;
  v81 = a1;
  v3 = type metadata accessor for LiftHoverEffect();
  v97 = *(_QWORD *)(v3 - 8);
  v98 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v96 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for PlainButtonStyle();
  v90 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94, v6);
  v89 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for MenuOrder();
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77, v8);
  v74 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>>);
  v73 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuOrder(_:)>>.0);
  v78 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v13);
  v72 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v15);
  v85 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  v92 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v17);
  v91 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  MEMORY[0x1E0C80A78](v88, v19);
  v79 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v95 = (uint64_t)&v71 - v23;
  v24 = *(_QWORD *)(v1 + 40);
  swift_getKeyPath();
  *(_QWORD *)&v104 = v24;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v25 = *(_QWORD *)(v24 + 40);
  swift_release();
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  if ((v25 & 0x8000) != 0)
  {
    outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v104);
    v27 = swift_allocObject();
    outlined init with take of MiniObjectButtons((uint64_t)&v104, v27 + 16);
    if (one-time initialization token for buttonSize != -1)
      swift_once();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    v28 = v107;
    v29 = (uint64_t (*)@<X0>(uint64_t@<X8>))v108;
    v30 = v109;
    v31 = (uint64_t (*)@<X0>(uint64_t@<X8>))v110;
    v26 = partial apply for closure #1 in MiniObjectButtons.body.getter;
    v32 = v111;
    v33 = v112;
  }
  v99 = v33;
  v80 = v26;
  v100 = v32;
  v82 = v31;
  v101 = v30;
  v84 = v29;
  v102 = v28;
  v103 = v27;
  outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v104);
  v34 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v104, v34 + 16);
  v35 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((_QWORD *)v35 + 2) = partial apply for closure #2 in MiniObjectButtons.body.getter;
  *((_QWORD *)v35 + 3) = v34;
  *((_QWORD *)v35 + 4) = 0xD000000000000015;
  *((_QWORD *)v35 + 5) = 0x80000001DDF4DD80;
  v71 = v35;
  outlined init with copy of MiniObjectButtons(v2, (uint64_t)&v104);
  v36 = swift_allocObject();
  v37 = outlined init with take of MiniObjectButtons((uint64_t)&v104, v36 + 16);
  MEMORY[0x1E0C80A78](v37, v38);
  *(&v71 - 2) = (uint64_t (*)@<X0>(uint64_t@<X8>))v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>, MEMORY[0x1E0CE0680]);
  v39 = v12;
  Menu.init(content:label:)();
  v40 = v74;
  static MenuOrder.fixed.getter();
  v41 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, TupleView<(TupleView<(Button<Label<Text, Image>>, Divider)>?, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Label<Text, Image>>, Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>)>?, Button<Label<Text, Image>>?, TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?, Divider, Button<Label<Text, Image>>)>>, MEMORY[0x1E0CDD990]);
  v42 = v72;
  v43 = v75;
  View.menuOrder(_:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v77);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v39, v43);
  v44 = v89;
  PlainButtonStyle.init()();
  *(_QWORD *)&v104 = v43;
  *((_QWORD *)&v104 + 1) = v41;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v46 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  v47 = v85;
  v48 = v83;
  v49 = v94;
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v44, v49);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v48);
  v50 = v96;
  static CustomHoverEffect<>.lift.getter();
  *(_QWORD *)&v104 = v48;
  *((_QWORD *)&v104 + 1) = v49;
  *(_QWORD *)&v105 = OpaqueTypeConformance2;
  *((_QWORD *)&v105 + 1) = v46;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
  v51 = v91;
  v52 = v87;
  v53 = v98;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v50, v53);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v52);
  if (one-time initialization token for buttonSize != -1)
    swift_once();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v54 = v92;
  v55 = (uint64_t)v79;
  v56 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v79, v51, v93);
  v57 = (_OWORD *)(v55 + *(int *)(v88 + 36));
  v58 = v105;
  *v57 = v104;
  v57[1] = v58;
  v57[2] = v106;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v51, v56);
  v59 = v95;
  outlined init with take of (key: Int, value: AnyCRValue)?(v55, v95, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v59, v55, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  v60 = v81;
  v61 = (uint64_t)v80;
  v63 = v102;
  v62 = v103;
  *v81 = v80;
  v60[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v62;
  v64 = v84;
  v60[2] = v63;
  v60[3] = v64;
  v65 = v100;
  v66 = v82;
  v60[4] = v101;
  v60[5] = v66;
  v67 = v99;
  v60[6] = v65;
  v60[7] = v67;
  v68 = v71;
  v60[8] = partial apply for closure #1 in miniButton(systemName:_:);
  v60[9] = v68;
  v60[10] = partial apply for closure #3 in MiniObjectButtons.body.getter;
  v60[11] = (uint64_t (*)@<X0>(uint64_t@<X8>))v36;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v55, (uint64_t)v60 + *(int *)(v69 + 80), &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v61);
  swift_retain();
  swift_retain();
  outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>);
  swift_release();
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v61);
}

uint64_t closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v52 = a1;
  v65 = a2;
  v3 = type metadata accessor for PopoverAttachmentAnchor();
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v61 = (uint64_t *)((char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for LiftHoverEffect();
  v7 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  v59 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PlainButtonStyle();
  v56 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  v53 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v57 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v23);
  v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  v62 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v26);
  v54 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v18, 1, 1, v28);
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)&v70);
  v29 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v70, v29 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  Button.init(role:action:label:)();
  PlainButtonStyle.init()();
  v30 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>, MEMORY[0x1E0CDFA58]);
  v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v19);
  static CustomHoverEffect<>.lift.getter();
  v70 = v19;
  v71 = v11;
  v72 = v30;
  v73 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v33 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
  v34 = v55;
  v35 = v58;
  View.hoverEffect<A>(_:isEnabled:)();
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v35);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v34);
  v37 = v52;
  v38 = *(_QWORD *)(v52 + 24);
  LOBYTE(v66) = *(_BYTE *)(v52 + 16);
  v67 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v57 = v71;
  LODWORD(v59) = v72;
  outlined init with copy of MiniObjectButtons(v37, (uint64_t)&v70);
  v39 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)&v70, v39 + 16);
  v40 = static Anchor.Source<A>.bounds.getter();
  v41 = v61;
  *v61 = v40;
  v42 = v63;
  v43 = v64;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v63 + 104))(v41, *MEMORY[0x1E0CDC3D0], v64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.presentationCompactAdaptation(_:)>>.0);
  v66 = v34;
  v67 = v36;
  v68 = OpaqueTypeConformance2;
  v69 = v33;
  swift_getOpaqueTypeConformance2();
  v44 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  v45 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
  v46 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  v66 = v45;
  v67 = v46;
  v47 = swift_getOpaqueTypeConformance2();
  v66 = v44;
  v67 = v47;
  swift_getOpaqueTypeConformance2();
  v48 = v60;
  v49 = v54;
  View.popover<A>(isPresented:attachmentAnchor:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v41, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v49, v48);
}

uint64_t closure #1 in closure #1 in MiniObjectButtons.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.wrappedValue.getter();
  return State.wrappedValue.setter();
}

uint64_t closure #2 in closure #1 in MiniObjectButtons.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v5 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  v6 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Font.Design?);
  KeyPath = swift_getKeyPath();
  v14 = v4;
  v15 = KeyPath;
  v16 = v6;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v17._countAndFlagsBits = 0xD00000000000002ALL;
  v17._object = (void *)0x80000001DDF4DDC0;
  v8._countAndFlagsBits = 0x6553206870617247;
  v8._object = (void *)0xEE0073676E697474;
  v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v9.value._object = (void *)0xEB00000000656C62;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v17);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #3 in closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[9];

  v20 = a2;
  v21 = type metadata accessor for PresentationAdaptation();
  v3 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.allowsSecureDrawing()>>.0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 40);
  swift_getKeyPath();
  *(_QWORD *)&v38[0] = v12;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v13 = *(_QWORD *)(v12 + 176);
  swift_retain();
  swift_release();
  *(_QWORD *)&v30 = v13;
  type metadata accessor for GraphableExpressionsState(0);
  State.init(wrappedValue:)();
  v14 = v38[0];
  v15 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v30, 0.0, 1, 400.0, 0, v15, v16, v14, *((uint64_t *)&v14 + 1));
  swift_release();
  swift_release();
  v38[4] = v34;
  v38[5] = v35;
  v38[6] = v36;
  v38[7] = v37;
  v38[0] = v30;
  v38[1] = v31;
  v38[2] = v32;
  v38[3] = v33;
  v26 = v34;
  v27 = v35;
  v28 = v36;
  v29 = v37;
  v22 = v30;
  v23 = v31;
  v24 = v32;
  v25 = v33;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
  v18 = lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  View.allowsSecureDrawing()();
  outlined release of ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>((uint64_t)v38);
  static PresentationAdaptation.popover.getter();
  *(_QWORD *)&v30 = v17;
  *((_QWORD *)&v30 + 1) = v18;
  swift_getOpaqueTypeConformance2();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t closure #3 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[8];

  v32 = a2;
  v31 = type metadata accessor for LiftHoverEffect();
  v33 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PlainButtonStyle();
  v29 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>);
  v28 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v30 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter();
  v22 = type metadata accessor for ButtonRole();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v13, 0, 1, v22);
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v34);
  v23 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v34, v23 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  Button.init(role:action:label:)();
  PlainButtonStyle.init()();
  v24 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>>, MEMORY[0x1E0CDFA58]);
  v25 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v14);
  static CustomHoverEffect<>.lift.getter();
  v34[0] = v14;
  v34[1] = v6;
  v34[2] = v24;
  v34[3] = v25;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
  v26 = v31;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v18);
}

uint64_t closure #2 in closure #3 in MiniObjectButtons.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = Image.init(systemName:)();
  v5 = static Color.red.getter();
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Font.Design?);
  v9 = swift_getKeyPath();
  v16 = v4;
  v17 = KeyPath;
  v18 = v5;
  v19 = v9;
  v20 = v8;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v21._object = (void *)0x80000001DDF4E1E0;
  v10._countAndFlagsBits = 0x6574656C6544;
  v10._object = (void *)0xE600000000000000;
  v11.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v11.value._object = (void *)0xEB00000000656C62;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0xD000000000000027;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, paperKitBundle, v12, v21);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type String and conformance String();
  View.accessibilityLabel<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  Swift::String_optional v123;
  Swift::String v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t);
  void (*v140)(char *, uint64_t);
  uint64_t v141;
  Swift::String v142;
  Swift::String_optional v143;
  Swift::String v144;
  Swift::String v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  Swift::String v152;
  Swift::String_optional v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  Swift::String v159;
  Swift::String_optional v160;
  Swift::String v161;
  Swift::String v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  Swift::String_optional v167;
  Swift::String v168;
  Swift::String v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int has_internal_ui;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  Swift::String v192;
  Swift::String_optional v193;
  Swift::String v194;
  Swift::String v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  NSBundle v217;
  Swift::String v218;
  Swift::String_optional v219;
  Swift::String v220;
  Swift::String v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  char *v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(char *, char *, uint64_t);
  char *v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  uint64_t v251;
  void (*v252)(char *, uint64_t);
  char *v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  void *v261;
  uint64_t v262;
  Swift::String v263;
  Swift::String_optional v264;
  Swift::String v265;
  Swift::String v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void *v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  NSBundle v288;
  Swift::String v289;
  Swift::String_optional v290;
  Swift::String v291;
  Swift::String v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  NSBundle v300;
  Swift::String v301;
  Swift::String_optional v302;
  Swift::String v303;
  Swift::String v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  NSBundle v311;
  Swift::String v312;
  Swift::String_optional v313;
  Swift::String v314;
  Swift::String v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  NSBundle v322;
  Swift::String v323;
  Swift::String_optional v324;
  Swift::String v325;
  Swift::String v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  NSBundle v334;
  Swift::String v335;
  Swift::String_optional v336;
  Swift::String v337;
  Swift::String v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  void (*v342)(char *, char *, uint64_t);
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int *v349;
  uint64_t v350;
  void (*v351)(char *, uint64_t);
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  NSBundle v356;
  Swift::String v357;
  Swift::String_optional v358;
  Swift::String v359;
  Swift::String v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(uint64_t, char *, uint64_t);
  uint64_t v370;
  ValueMetadata *v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  char *v381;
  uint64_t v382;
  char *v383;
  char *v384;
  void (*v385)(char *, uint64_t);
  void (*v386)(char *, uint64_t);
  unint64_t v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  ValueMetadata *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  char *v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440[3];
  ValueMetadata *v441;
  unint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  char *v451;
  Swift::String v452;
  Swift::String v453;
  uint64_t v454;
  Swift::String v455;
  Swift::String v456;
  Swift::String v457;
  Swift::String v458;
  Swift::String v459;
  Swift::String v460;
  Swift::String v461;
  Swift::String v462;
  Swift::String v463;
  Swift::String v464;
  Swift::String v465;
  Swift::String v466;
  Swift::String v467;
  Swift::String v468;

  v398 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x1E0C80A78](v3, v4);
  v396 = (uint64_t)&v389 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v397 = (char *)&v389 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v408 = (char *)&v389 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v405 = (uint64_t)&v389 - v14;
  v392 = type metadata accessor for FBKSEvaluation.Action();
  v391 = *(_QWORD *)(v392 - 8);
  MEMORY[0x1E0C80A78](v392, v15);
  v390 = (char *)&v389 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v415 = (char *)&v389 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v428 = (uint64_t)&v389 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v394 = (uint64_t)&v389 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v430 = (uint64_t)&v389 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v417 = (uint64_t)&v389 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v407 = (uint64_t)&v389 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v431 = (uint64_t)&v389 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v393 = (char *)&v389 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v389 - v43;
  MEMORY[0x1E0C80A78](v45, v46);
  v410 = (uint64_t)&v389 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v409 = (uint64_t)&v389 - v50;
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)&v389 - v53;
  MEMORY[0x1E0C80A78](v55, v56);
  v411 = (uint64_t)&v389 - v57;
  MEMORY[0x1E0C80A78](v58, v59);
  v432 = (uint64_t)&v389 - v60;
  MEMORY[0x1E0C80A78](v61, v62);
  v427 = (uint64_t)&v389 - v63;
  MEMORY[0x1E0C80A78](v64, v65);
  v426 = (uint64_t)&v389 - v66;
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  MEMORY[0x1E0C80A78](v67, v68);
  v406 = (uint64_t)&v389 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v70, v71);
  v424 = (uint64_t)&v389 - v72;
  v416 = type metadata accessor for Divider();
  v434 = *(_QWORD *)(v416 - 8);
  MEMORY[0x1E0C80A78](v416, v73);
  v400 = (char *)&v389 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v75, v76);
  v425 = (char *)&v389 - v77;
  MEMORY[0x1E0C80A78](v78, v79);
  v81 = (char *)&v389 - v80;
  v439 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  v435 = *(_QWORD *)(v439 - 8);
  MEMORY[0x1E0C80A78](v439, v82);
  v395 = (char *)&v389 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v84, v85);
  v404 = (char *)&v389 - v86;
  MEMORY[0x1E0C80A78](v87, v88);
  v403 = (ValueMetadata *)((char *)&v389 - v89);
  MEMORY[0x1E0C80A78](v90, v91);
  v402 = (char *)&v389 - v92;
  MEMORY[0x1E0C80A78](v93, v94);
  v422 = (char *)&v389 - v95;
  MEMORY[0x1E0C80A78](v96, v97);
  v421 = (char *)&v389 - v98;
  MEMORY[0x1E0C80A78](v99, v100);
  v420 = (char *)&v389 - v101;
  MEMORY[0x1E0C80A78](v102, v103);
  v419 = (char *)&v389 - v104;
  MEMORY[0x1E0C80A78](v105, v106);
  v423 = (char *)&v389 - v107;
  MEMORY[0x1E0C80A78](v108, v109);
  v418 = (char *)&v389 - v110;
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  MEMORY[0x1E0C80A78](v111, v112);
  v414 = (char *)&v389 - ((v113 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v114, v115);
  v117 = (char *)&v389 - v116;
  v118 = *(_QWORD *)(a1 + 40);
  swift_getKeyPath();
  v440[0] = v118;
  v119 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  v437 = v119;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v120 = *(_QWORD *)(v118 + 40);
  swift_release();
  v429 = v81;
  v433 = a1;
  v413 = v117;
  v399 = v44;
  v401 = v54;
  if ((v120 & 0x4000) != 0)
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v455._countAndFlagsBits = 0xD00000000000002CLL;
    v122._object = (void *)0xE90000000000006BLL;
    v468._object = (void *)0x80000001DDF4E190;
    v122._countAndFlagsBits = 0x6E694C206E65704FLL;
    v123.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v123.value._object = (void *)0xEB00000000656C62;
    v124._countAndFlagsBits = 0;
    v124._object = (void *)0xE000000000000000;
    v125 = NSLocalizedString(_:tableName:bundle:value:comment:)(v122, v123, paperKitBundle, v124, v455);
    outlined init with copy of MiniObjectButtons(a1, (uint64_t)v440);
    v126 = swift_allocObject();
    v127 = outlined init with take of MiniObjectButtons((uint64_t)v440, v126 + 16);
    v453 = v125;
    MEMORY[0x1E0C80A78](v127, v128);
    *(&v389 - 4) = (uint64_t)&v453;
    *(&v389 - 3) = 1802398060;
    v468._object = (void *)0xE400000000000000;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
    v129 = v418;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    Divider.init()();
    v130 = v435;
    v131 = *(void (**)(char *, char *, uint64_t))(v435 + 16);
    v132 = v423;
    v133 = v439;
    v131(v423, v129, v439);
    v134 = *(void (**)(char *, char *, uint64_t))(v434 + 16);
    v135 = v425;
    v136 = v416;
    v134(v425, v81, v416);
    v137 = (uint64_t)v414;
    v131(v414, v132, v133);
    v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Divider));
    v134((char *)(v137 + *(int *)(v138 + 48)), v135, v136);
    v139 = *(void (**)(char *, uint64_t))(v434 + 8);
    v139(v81, v136);
    v140 = *(void (**)(char *, uint64_t))(v130 + 8);
    v140(v129, v133);
    v139(v135, v136);
    v140(v132, v133);
    v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 56))(v137, 0, 1, v141);
    outlined init with take of (key: Int, value: AnyCRValue)?(v137, (uint64_t)v413, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  }
  else
  {
    v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v117, 1, 1, v121);
  }
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v468._object = (void *)0x80000001DDF4DDF0;
  v142._countAndFlagsBits = 7632195;
  v142._object = (void *)0xE300000000000000;
  v143.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v143.value._object = (void *)0xEB00000000656C62;
  v144._countAndFlagsBits = 0;
  v144._object = (void *)0xE000000000000000;
  v456._countAndFlagsBits = 0xD00000000000001CLL;
  v145 = NSLocalizedString(_:tableName:bundle:value:comment:)(v142, v143, paperKitBundle, v144, v456);
  v146 = v433;
  outlined init with copy of MiniObjectButtons(v433, (uint64_t)v440);
  v147 = swift_allocObject();
  v148 = outlined init with take of MiniObjectButtons((uint64_t)v440, v147 + 16);
  v453 = v145;
  MEMORY[0x1E0C80A78](v148, v149);
  *(&v389 - 4) = (uint64_t)&v453;
  *(&v389 - 3) = 0x73726F7373696373;
  v150 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
  v151 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  v457._countAndFlagsBits = 0xD00000000000001DLL;
  v468._object = (void *)0x80000001DDF4DE10;
  v152._countAndFlagsBits = 2037411651;
  v152._object = (void *)0xE400000000000000;
  v153.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v153.value._object = (void *)0xEB00000000656C62;
  v154._countAndFlagsBits = 0;
  v154._object = (void *)0xE000000000000000;
  v155 = NSLocalizedString(_:tableName:bundle:value:comment:)(v152, v153, paperKitBundle, v154, v457);
  outlined init with copy of MiniObjectButtons(v146, (uint64_t)v440);
  v156 = swift_allocObject();
  v157 = outlined init with take of MiniObjectButtons((uint64_t)v440, v156 + 16);
  v453 = v155;
  MEMORY[0x1E0C80A78](v157, v158);
  *(&v389 - 4) = (uint64_t)&v453;
  *(&v389 - 3) = 0x642E6E6F2E636F64;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  v468._object = (void *)0x80000001DDF4DE30;
  v159._countAndFlagsBits = 0x6574736150;
  v159._object = (void *)0xE500000000000000;
  v160.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v160.value._object = (void *)0xEB00000000656C62;
  v161._countAndFlagsBits = 0;
  v161._object = (void *)0xE000000000000000;
  v458._countAndFlagsBits = 0xD00000000000001CLL;
  v162 = NSLocalizedString(_:tableName:bundle:value:comment:)(v159, v160, paperKitBundle, v161, v458);
  outlined init with copy of MiniObjectButtons(v146, (uint64_t)v440);
  v163 = swift_allocObject();
  v164 = outlined init with take of MiniObjectButtons((uint64_t)v440, v163 + 16);
  v453 = v162;
  MEMORY[0x1E0C80A78](v164, v165);
  *(&v389 - 4) = (uint64_t)&v453;
  *(&v389 - 3) = 0xD000000000000010;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  v459._countAndFlagsBits = 0xD000000000000022;
  v468._object = (void *)0x80000001DDF4DE70;
  v166._countAndFlagsBits = 0x746163696C707544;
  v166._object = (void *)0xE900000000000065;
  v167.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v167.value._object = (void *)0xEB00000000656C62;
  v168._countAndFlagsBits = 0;
  v168._object = (void *)0xE000000000000000;
  v169 = NSLocalizedString(_:tableName:bundle:value:comment:)(v166, v167, paperKitBundle, v168, v459);
  outlined init with copy of MiniObjectButtons(v146, (uint64_t)v440);
  v170 = swift_allocObject();
  v171 = outlined init with take of MiniObjectButtons((uint64_t)v440, v170 + 16);
  v453 = v169;
  MEMORY[0x1E0C80A78](v171, v172);
  *(&v389 - 4) = (uint64_t)&v453;
  *(&v389 - 3) = 0xD000000000000015;
  v468._object = (void *)0x80000001DDF4DD80;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  has_internal_ui = os_variant_has_internal_ui();
  v412 = v150;
  v436 = v151;
  if (has_internal_ui)
  {
    v174 = LocalizedStringKey.init(stringLiteral:)();
    v438 = &v389;
    MEMORY[0x1E0C80A78](v174, v175);
    MEMORY[0x1E0C80A78](v176, v177);
    MEMORY[0x1E0C80A78](v178, v179);
    *(&v389 - 6) = v180;
    *(&v389 - 5) = v181;
    *((_BYTE *)&v389 - 32) = v182 & 1;
    *(&v389 - 3) = v183;
    v468._object = (void *)0xD000000000000010;
    v388 = 0x80000001DDF4E170;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>, MEMORY[0x1E0CE0680]);
    v184 = v424;
    Menu.init(content:label:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v185 - 8) + 56))(v184, 0, 1, v185);
  }
  else
  {
    v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v424, 1, 1, v186);
  }
  v187 = *(_QWORD *)(v146 + 40);
  swift_getKeyPath();
  v440[0] = v187;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v188 = *(_QWORD *)(v187 + 40);
  swift_release();
  v189 = v146;
  if ((v188 & 0x80) != 0)
  {
    v191 = &unk_1EDB80000;
    v192._countAndFlagsBits = 0xD000000000000016;
    v460._countAndFlagsBits = 0xD000000000000029;
    v468._object = (void *)0x80000001DDF4E120;
    v192._object = (void *)0x80000001DDF4E100;
    v193.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v193.value._object = (void *)0xEB00000000656C62;
    v194._countAndFlagsBits = 0;
    v194._object = (void *)0xE000000000000000;
    v195 = NSLocalizedString(_:tableName:bundle:value:comment:)(v192, v193, paperKitBundle, v194, v460);
    outlined init with copy of MiniObjectButtons(v146, (uint64_t)v440);
    v196 = swift_allocObject();
    v197 = outlined init with take of MiniObjectButtons((uint64_t)v440, v196 + 16);
    v453 = v195;
    MEMORY[0x1E0C80A78](v197, v198);
    *(&v389 - 4) = (uint64_t)&v453;
    *(&v389 - 3) = 0xD000000000000013;
    v468._object = (void *)0x80000001DDF4E150;
    v199 = v426;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    v190 = v439;
    v438 = *(uint64_t **)(v435 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t))v438)(v199, 0, 1);
  }
  else
  {
    v190 = v439;
    v438 = *(uint64_t **)(v435 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t))v438)(v426, 1, 1);
    v191 = &unk_1EDB80000;
  }
  v200 = *(_QWORD *)(v189 + 40);
  swift_getKeyPath();
  v440[0] = v200;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v201 = *(_QWORD *)(v200 + 40);
  swift_release();
  if ((v201 & 0x100) != 0)
  {
    v204 = LocalizedStringKey.init(stringLiteral:)();
    v206 = v205;
    v208 = v207;
    v210 = v209;
    outlined init with copy of MiniObjectButtons(v189, (uint64_t)v440);
    v211 = swift_allocObject();
    v212 = outlined init with take of MiniObjectButtons((uint64_t)v440, v211 + 16);
    MEMORY[0x1E0C80A78](v212, v213);
    *(&v389 - 6) = v204;
    *(&v389 - 5) = v206;
    *((_BYTE *)&v389 - 32) = v208 & 1;
    *(&v389 - 3) = v210;
    v468._object = (void *)0x6F746F6870;
    v388 = 0xE500000000000000;
    v203 = v427;
    Button.init(action:label:)();
    v190 = v439;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v202 = 0;
  }
  else
  {
    v202 = 1;
    v203 = v427;
  }
  v214 = 1;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v203, v202, 1, v190);
  v215 = *(_QWORD *)(v189 + 40);
  swift_getKeyPath();
  v440[0] = v215;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v216 = *(_QWORD *)(v215 + 40);
  swift_release();
  if ((v216 & 0x40) != 0)
  {
    v217.super.isa = (Class)*((_QWORD *)v191 + 243);
    v461._countAndFlagsBits = 0xD000000000000020;
    v468._object = (void *)0x80000001DDF4E0B0;
    v218._countAndFlagsBits = 0x6574616572636552;
    v218._object = (void *)0xE800000000000000;
    v219.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v219.value._object = (void *)0xEB00000000656C62;
    v220._countAndFlagsBits = 0;
    v220._object = (void *)0xE000000000000000;
    v221 = NSLocalizedString(_:tableName:bundle:value:comment:)(v218, v219, v217, v220, v461);
    outlined init with copy of MiniObjectButtons(v189, (uint64_t)v440);
    v222 = swift_allocObject();
    v223 = outlined init with take of MiniObjectButtons((uint64_t)v440, v222 + 16);
    v453 = v221;
    MEMORY[0x1E0C80A78](v223, v224);
    *(&v389 - 4) = (uint64_t)&v453;
    *(&v389 - 3) = 0xD000000000000016;
    v468._object = (void *)0x80000001DDF4E090;
    Button.init(action:label:)();
    v190 = v439;
    swift_bridgeObjectRelease();
    v214 = 0;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v432, v214, 1, v190);
  v225 = *(_QWORD *)(v189 + 40);
  swift_getKeyPath();
  v440[0] = v225;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v226 = *(_QWORD *)(v225 + 40);
  swift_release();
  v227 = v189;
  if ((v226 & 0x10000) != 0)
  {
    v229 = v429;
    Divider.init()();
    v230 = LocalizedStringKey.init(stringLiteral:)();
    v232 = v231;
    v234 = v233;
    v236 = v235;
    outlined init with copy of MiniObjectButtons(v189, (uint64_t)v440);
    v237 = swift_allocObject();
    v238 = outlined init with take of MiniObjectButtons((uint64_t)v440, v237 + 16);
    MEMORY[0x1E0C80A78](v238, v239);
    *(&v389 - 6) = v230;
    *(&v389 - 5) = v232;
    *((_BYTE *)&v389 - 32) = v234 & 1;
    *(&v389 - 3) = v236;
    v468._object = (void *)0xD000000000000016;
    v388 = 0x80000001DDF4E090;
    v240 = v418;
    Button.init(action:label:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v241 = v434;
    v242 = *(void (**)(char *, char *, uint64_t))(v434 + 16);
    v243 = v425;
    v244 = v416;
    v242(v425, v229, v416);
    v245 = v435;
    v246 = *(void (**)(char *, char *, uint64_t))(v435 + 16);
    v247 = v423;
    v246(v423, v240, v439);
    v248 = (uint64_t)v415;
    v242(v415, v243, v244);
    v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, Button<Label<Text, Image>>));
    v246((char *)(v248 + *(int *)(v249 + 48)), v247, v439);
    v250 = *(void (**)(char *, uint64_t))(v245 + 8);
    v251 = v433;
    v250(v240, v439);
    v252 = *(void (**)(char *, uint64_t))(v241 + 8);
    v252(v229, v244);
    v250(v247, v439);
    v253 = v243;
    v227 = v251;
    v252(v253, v244);
    v254 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v254 - 8) + 56))(v248, 0, 1, v254);
    v255 = v248;
    v190 = v439;
    outlined init with take of (key: Int, value: AnyCRValue)?(v255, v428, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  }
  else
  {
    v228 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v228 - 8) + 56))(v428, 1, 1, v228);
  }
  v256 = os_variant_has_internal_ui();
  v441 = &type metadata for FeedbackFeatures;
  v442 = lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures();
  v257 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v440);
  outlined init with copy of MiniObjectButtons(v227, (uint64_t)&v453);
  if ((v257 & 1) != 0)
  {
    v258 = v454;
    swift_getKeyPath();
    v440[0] = v258;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v259 = *(_QWORD *)(v258 + 40);
    swift_release();
    outlined destroy of MiniObjectButtons((uint64_t)&v453);
    if ((v259 & 0x20000) != 0)
      v260 = v256;
    else
      v260 = 1;
    v261 = &unk_1EDB80000;
    if ((v260 & 1) != 0)
    {
      v262 = 1;
      v227 = v433;
    }
    else
    {
      v462._countAndFlagsBits = 0xD000000000000040;
      v468._object = (void *)0x80000001DDF4E040;
      v263._object = (void *)0x80000001DDF4E020;
      v263._countAndFlagsBits = 0xD000000000000010;
      v264.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v264.value._object = (void *)0xEB00000000656C62;
      v265._countAndFlagsBits = 0;
      v265._object = (void *)0xE000000000000000;
      v266 = NSLocalizedString(_:tableName:bundle:value:comment:)(v263, v264, paperKitBundle, v265, v462);
      v267 = v391;
      v268 = (uint64_t)v390;
      v269 = v392;
      (*(void (**)(char *, _QWORD, uint64_t))(v391 + 104))(v390, *MEMORY[0x1E0D21050], v392);
      v270 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(v268, 0);
      v272 = v271;
      (*(void (**)(uint64_t, uint64_t))(v267 + 8))(v268, v269);
      v273 = v433;
      outlined init with copy of MiniObjectButtons(v433, (uint64_t)v440);
      v274 = swift_allocObject();
      v275 = outlined init with take of MiniObjectButtons((uint64_t)v440, v274 + 16);
      v452 = v266;
      MEMORY[0x1E0C80A78](v275, v276);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = v270;
      v227 = v273;
      v468._object = v272;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      v190 = v439;
      swift_bridgeObjectRelease();
      v262 = 0;
    }
  }
  else
  {
    outlined destroy of MiniObjectButtons((uint64_t)&v453);
    v262 = 1;
    v261 = &unk_1EDB80000;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v411, v262, 1, v190);
  v277 = *(_QWORD *)(v227 + 40);
  swift_getKeyPath();
  v440[0] = v277;
  swift_retain();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v278 = *(_QWORD *)(v277 + 40);
  swift_release();
  if ((v278 & 0x3E00) != 0)
  {
    Divider.init()();
    v279 = *(_QWORD *)(v227 + 40);
    swift_getKeyPath();
    v440[0] = v279;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v280 = *(_QWORD *)(v279 + 40);
    swift_release();
    if ((v280 & 0x2000) != 0)
    {
      v288.super.isa = (Class)*((_QWORD *)v261 + 243);
      v463._countAndFlagsBits = 0xD000000000000025;
      v468._object = (void *)0x80000001DDF4DFF0;
      v289._countAndFlagsBits = 0x656E69666552;
      v289._object = (void *)0xE600000000000000;
      v290.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v290.value._object = (void *)0xEB00000000656C62;
      v291._countAndFlagsBits = 0;
      v291._object = (void *)0xE000000000000000;
      v292 = NSLocalizedString(_:tableName:bundle:value:comment:)(v289, v290, v288, v291, v463);
      outlined init with copy of MiniObjectButtons(v227, (uint64_t)v440);
      v293 = swift_allocObject();
      v294 = outlined init with take of MiniObjectButtons((uint64_t)v440, v293 + 16);
      v452 = v292;
      MEMORY[0x1E0C80A78](v294, v295);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = 0x68636E657277;
      v468._object = (void *)0xE600000000000000;
      v190 = v439;
      v282 = (uint64_t)v401;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      v281 = 0;
    }
    else
    {
      v281 = 1;
      v282 = (uint64_t)v401;
    }
    v296 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v282, v281, 1, v190);
    v297 = *(_QWORD *)(v227 + 40);
    swift_getKeyPath();
    v440[0] = v297;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    v298 = v433;
    swift_release();
    v299 = *(_QWORD *)(v297 + 40);
    swift_release();
    if ((v299 & 0x200) != 0)
    {
      v300.super.isa = (Class)*((_QWORD *)v261 + 243);
      v464._countAndFlagsBits = 0xD00000000000002BLL;
      v468._object = (void *)0x80000001DDF4DFC0;
      v301._countAndFlagsBits = 0x2073612079706F43;
      v301._object = (void *)0xEC00000074786554;
      v302.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v302.value._object = (void *)0xEB00000000656C62;
      v303._countAndFlagsBits = 0;
      v303._object = (void *)0xE000000000000000;
      v304 = NSLocalizedString(_:tableName:bundle:value:comment:)(v301, v302, v300, v303, v464);
      outlined init with copy of MiniObjectButtons(v298, (uint64_t)v440);
      v305 = swift_allocObject();
      v306 = outlined init with take of MiniObjectButtons((uint64_t)v440, v305 + 16);
      v452 = v304;
      MEMORY[0x1E0C80A78](v306, v307);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = 0x6D726F6674786574;
      v468._object = (void *)0xEA00000000007461;
      Button.init(action:label:)();
      v190 = v439;
      swift_bridgeObjectRelease();
      v296 = 0;
    }
    v308 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v409, v296, 1, v190);
    v309 = *(_QWORD *)(v298 + 40);
    swift_getKeyPath();
    v440[0] = v309;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v310 = *(_QWORD *)(v309 + 40);
    swift_release();
    if ((v310 & 0x400) != 0)
    {
      v311.super.isa = (Class)*((_QWORD *)v261 + 243);
      v312._countAndFlagsBits = 0xD000000000000012;
      v465._countAndFlagsBits = 0xD000000000000033;
      v468._object = (void *)0x80000001DDF4DF60;
      v312._object = (void *)0x80000001DDF4DF40;
      v313.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v313.value._object = (void *)0xEB00000000656C62;
      v314._countAndFlagsBits = 0;
      v314._object = (void *)0xE000000000000000;
      v315 = NSLocalizedString(_:tableName:bundle:value:comment:)(v312, v313, v311, v314, v465);
      outlined init with copy of MiniObjectButtons(v298, (uint64_t)v440);
      v316 = swift_allocObject();
      v317 = outlined init with take of MiniObjectButtons((uint64_t)v440, v316 + 16);
      v452 = v315;
      MEMORY[0x1E0C80A78](v317, v318);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = 0xD000000000000019;
      v468._object = (void *)0x80000001DDF4DFA0;
      Button.init(action:label:)();
      v190 = v439;
      swift_bridgeObjectRelease();
      v308 = 0;
    }
    v319 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v410, v308, 1, v190);
    v320 = *(_QWORD *)(v298 + 40);
    swift_getKeyPath();
    v440[0] = v320;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v321 = *(_QWORD *)(v320 + 40);
    swift_release();
    if ((v321 & 0x800) != 0)
    {
      v322.super.isa = (Class)*((_QWORD *)v261 + 243);
      v466._countAndFlagsBits = 0xD000000000000029;
      v468._object = (void *)0x80000001DDF4DEF0;
      v323._countAndFlagsBits = 0x74616C736E617254;
      v323._object = (void *)0xE900000000000065;
      v324.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v324.value._object = (void *)0xEB00000000656C62;
      v325._countAndFlagsBits = 0;
      v325._object = (void *)0xE000000000000000;
      v326 = NSLocalizedString(_:tableName:bundle:value:comment:)(v323, v324, v322, v325, v466);
      outlined init with copy of MiniObjectButtons(v298, (uint64_t)v440);
      v327 = swift_allocObject();
      v328 = outlined init with take of MiniObjectButtons((uint64_t)v440, v327 + 16);
      v452 = v326;
      MEMORY[0x1E0C80A78](v328, v329);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = 0xD000000000000010;
      v468._object = (void *)0x80000001DDF4DF20;
      Button.init(action:label:)();
      v190 = v439;
      swift_bridgeObjectRelease();
      v319 = 0;
    }
    v330 = 1;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v438)(v399, v319, 1, v190);
    v331 = *(_QWORD *)(v298 + 40);
    swift_getKeyPath();
    v440[0] = v331;
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v332 = *(_QWORD *)(v331 + 40);
    swift_release();
    v333 = (uint64_t)v393;
    if ((v332 & 0x1000) != 0)
    {
      v334.super.isa = (Class)*((_QWORD *)v261 + 243);
      v467._countAndFlagsBits = 0xD00000000000002ELL;
      v335._object = (void *)0xEA00000000006E65;
      v468._object = (void *)0x80000001DDF4DEC0;
      v335._countAndFlagsBits = 0x7468676961727453;
      v336.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v336.value._object = (void *)0xEB00000000656C62;
      v337._countAndFlagsBits = 0;
      v337._object = (void *)0xE000000000000000;
      v338 = NSLocalizedString(_:tableName:bundle:value:comment:)(v335, v336, v334, v337, v467);
      outlined init with copy of MiniObjectButtons(v433, (uint64_t)v440);
      v339 = swift_allocObject();
      v340 = outlined init with take of MiniObjectButtons((uint64_t)v440, v339 + 16);
      v452 = v338;
      MEMORY[0x1E0C80A78](v340, v341);
      *(&v389 - 4) = (uint64_t)&v452;
      *(&v389 - 3) = 0x68636E657277;
      v468._object = (void *)0xE600000000000000;
      v190 = v439;
      Button.init(action:label:)();
      swift_bridgeObjectRelease();
      v330 = 0;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v333, v330, 1, v190);
    v342 = *(void (**)(char *, char *, uint64_t))(v434 + 16);
    v343 = v429;
    v344 = v416;
    v342(v429, v400, v416);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v401, v431, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v345 = v407;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v409, v407, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v346 = v417;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v410, v417, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v347 = (uint64_t)v399;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v399, v430, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v348 = v394;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v333, v394, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v284 = (uint64_t)v408;
    v342(v408, v343, v344);
    v349 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?));
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v431, v284 + v349[12], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v345, v284 + v349[16], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v346, v284 + v349[20], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v350 = v430;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v430, v284 + v349[24], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v348, v284 + v349[28], &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v333, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v347, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v410, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v409, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v401, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v351 = *(void (**)(char *, uint64_t))(v434 + 8);
    v261 = &unk_1EDB80000;
    v351(v400, v344);
    outlined destroy of StocksKitCurrencyCache.Provider?(v348, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v350, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v346, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v285 = v345;
    outlined destroy of StocksKitCurrencyCache.Provider?(v345, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v352 = v431;
    v353 = v429;
    outlined destroy of StocksKitCurrencyCache.Provider?(v431, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
    v354 = v344;
    v286 = v352;
    v351(v353, v354);
    v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v355 - 8) + 56))(v284, 0, 1, v355);
    outlined init with take of (key: Int, value: AnyCRValue)?(v284, v405, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
    v287 = v439;
    v227 = v433;
  }
  else
  {
    v283 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v283 - 8) + 56))(v405, 1, 1, v283);
    v284 = (uint64_t)v408;
    v285 = v407;
    v286 = v431;
    v287 = v190;
  }
  Divider.init()();
  v356.super.isa = (Class)*((_QWORD *)v261 + 243);
  v468._countAndFlagsBits = 0xD00000000000001FLL;
  v468._object = (void *)0x80000001DDF4DEA0;
  v357._countAndFlagsBits = 0x6574656C6544;
  v357._object = (void *)0xE600000000000000;
  v358.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v358.value._object = (void *)0xEB00000000656C62;
  v359._countAndFlagsBits = 0;
  v359._object = (void *)0xE000000000000000;
  v360 = NSLocalizedString(_:tableName:bundle:value:comment:)(v357, v358, v356, v359, v468);
  v361 = (uint64_t)v397;
  static ButtonRole.destructive.getter();
  v362 = type metadata accessor for ButtonRole();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v362 - 8) + 56))(v361, 0, 1, v362);
  outlined init with copy of MiniObjectButtons(v227, (uint64_t)v440);
  v363 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v440, v363 + 16);
  v452 = v360;
  v364 = outlined init with copy of Ref<PKStrokeInheritedProperties>?(v361, v396, &demangling cache variable for type metadata for ButtonRole?);
  MEMORY[0x1E0C80A78](v364, v365);
  *(&v389 - 4) = (uint64_t)&v452;
  *(&v389 - 3) = 0x6873617274;
  v468._object = (void *)0xE500000000000000;
  v366 = (uint64_t)v423;
  Button.init(role:action:label:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v361, &demangling cache variable for type metadata for ButtonRole?);
  swift_bridgeObjectRelease();
  v367 = v435;
  (*(void (**)(char *, uint64_t, uint64_t))(v435 + 32))(v418, v366, v287);
  v368 = (uint64_t)v414;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v413, (uint64_t)v414, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  v440[0] = v368;
  v369 = *(void (**)(uint64_t, char *, uint64_t))(v367 + 16);
  v369(v366, v419, v287);
  v440[1] = v366;
  v370 = (uint64_t)v402;
  v369((uint64_t)v402, v420, v287);
  v440[2] = v370;
  v371 = v403;
  v369((uint64_t)v403, v421, v287);
  v441 = v371;
  v372 = v404;
  v369((uint64_t)v404, v422, v287);
  v442 = (unint64_t)v372;
  v373 = v406;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v424, v406, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  v443 = v373;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v426, v286, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  v444 = v286;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v427, v285, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  v445 = v285;
  v374 = v417;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v432, v417, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  v446 = v374;
  v375 = (uint64_t)v415;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v428, (uint64_t)v415, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  v447 = v375;
  v376 = v411;
  v377 = v430;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v411, v430, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  v448 = v377;
  v378 = v405;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v405, v284, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  v449 = v284;
  v379 = v434;
  v380 = v425;
  v381 = v429;
  v382 = v416;
  (*(void (**)(char *, char *, uint64_t))(v434 + 16))(v425, v429, v416);
  v450 = v380;
  v383 = v395;
  v384 = v418;
  v369((uint64_t)v395, v418, v287);
  v451 = v383;
  specialized static ViewBuilder.buildBlock<each A>(_:)(v440, v398);
  v385 = *(void (**)(char *, uint64_t))(v435 + 8);
  v385(v384, v287);
  v386 = *(void (**)(char *, uint64_t))(v379 + 8);
  v386(v381, v382);
  outlined destroy of StocksKitCurrencyCache.Provider?(v378, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v376, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v428, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v432, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v427, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v426, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v424, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  v385(v422, v287);
  v385(v421, v287);
  v385(v420, v287);
  v385(v419, v287);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v413, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
  v385(v383, v287);
  v386(v425, v382);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v408, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?, Button<Label<Text, Image>>?)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v430, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v415, &demangling cache variable for type metadata for TupleView<(Divider, Button<Label<Text, Image>>)>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v417, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v407, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v431, &demangling cache variable for type metadata for Button<Label<Text, Image>>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v406, &demangling cache variable for type metadata for Menu<Label<Text, Image>, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>)>>?);
  v385(v404, v287);
  v385((char *)v403, v287);
  v385(v402, v287);
  v385(v423, v287);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v414, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Divider)>?);
}

uint64_t closure #1 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 168))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #3 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #4 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #6 in closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE v76[32];

  v61 = a2;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v3);
  v58 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v56 = (char *)&v52 - v7;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  v63 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v8);
  v57 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v62 = (char *)&v52 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v52 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v52 - v19;
  v21 = LocalizedStringKey.init(stringLiteral:)();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v76);
  v28 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v76, v28 + 16);
  v70 = v21;
  v71 = v23;
  v72 = v25 & 1;
  v73 = v27;
  v74 = 0xD000000000000010;
  v75 = 0x80000001DDF4E170;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
  v54 = v20;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = LocalizedStringKey.init(stringLiteral:)();
  v31 = v30;
  LOBYTE(v23) = v32;
  v34 = v33;
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v76);
  v35 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v76, v35 + 16);
  v64 = v29;
  v65 = v31;
  v66 = v23 & 1;
  v67 = v34;
  v68 = 0x6C69662E6B636F6CLL;
  v69 = 0xE90000000000006CLL;
  v36 = v16;
  v53 = v16;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  outlined init with copy of MiniObjectButtons(a1, (uint64_t)v76);
  v37 = swift_allocObject();
  outlined init with take of MiniObjectButtons((uint64_t)v76, v37 + 16);
  v38 = v56;
  Button<>.init(_:action:)();
  v39 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v40 = v62;
  v41 = v55;
  v39(v62, v20, v55);
  v42 = v57;
  v39(v57, v36, v41);
  v43 = v59;
  v44 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v45 = v58;
  v46 = v60;
  v44(v58, v38, v60);
  v47 = v61;
  v39(v61, v40, v41);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>, Button<Text>));
  v39(&v47[*(int *)(v48 + 48)], v42, v41);
  v44(&v47[*(int *)(v48 + 64)], v45, v46);
  v49 = *(void (**)(char *, uint64_t))(v43 + 8);
  v49(v38, v46);
  v50 = *(void (**)(char *, uint64_t))(v63 + 8);
  v50(v53, v41);
  v50(v54, v41);
  v49(v45, v46);
  v50(v42, v41);
  return ((uint64_t (*)(char *, uint64_t))v50)(v62, v41);
}

uint64_t closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 104))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 112))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 120))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #7 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #8 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #9 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 80))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #10 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 88))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #11 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;

  v0 = type metadata accessor for FBKSEvaluation.Action();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = MEMORY[0x1DF0E666C](result + 32);
    v8 = *(_QWORD *)(v6 + 40);
    result = swift_release();
    if (v7)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0D21050], v0);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 96))(v4, ObjectType, v8);
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
  return result;
}

void closure #14 in closure #4 in MiniObjectButtons.body.getter(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  id v3;

  v1 = (_QWORD *)MEMORY[0x1DF0E666C](*(_QWORD *)(a1 + 40) + 16);
  if (v1)
  {
    v2 = v1;
    v3 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))();

    if (v3)
    {
      objc_msgSend(v3, sel_insertSpace_, 0);

    }
  }
}

void closure #12 in closure #4 in MiniObjectButtons.body.getter(uint64_t a1, SEL *a2)
{
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](*(_QWORD *)(a1 + 40) + 16);
  if (v3)
  {
    v4 = v3;
    v5 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x320))();

    objc_msgSend(v5, *a2);
  }
}

uint64_t closure #1 in closure #3 in MiniObjectButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 48))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #5 in MiniObjectButtons.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = static Font.system(size:weight:design:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Font.Design?);
  result = swift_getKeyPath();
  *a1 = v6;
  a1[1] = result;
  a1[2] = v8;
  return result;
}

uint64_t outlined init with copy of MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for MiniObjectButtons(a2, a1);
  return a2;
}

uint64_t outlined init with take of MiniObjectButtons(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  swift_weakTakeInit();
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  return a2;
}

uint64_t sub_1DDB9BFCC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in miniButton(systemName:_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in miniButton(systemName:_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #3 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #3 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

uint64_t partial apply for closure #4 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #4 in MiniObjectButtons.body.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t partial apply for closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

uint64_t partial apply for closure #1 in closure #1 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #1 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in MiniObjectButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #3 in closure #1 in MiniObjectButtons.body.getter(v1 + 16, a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>);
    v2[0] = lazy protocol witness table accessor for type GraphableExpressionsView and conformance GraphableExpressionsView();
    v2[1] = MEMORY[0x1E0CDA228];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GraphableExpressionsView, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GraphableExpressionsView and conformance GraphableExpressionsView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView;
  if (!lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpressionsView, &type metadata for GraphableExpressionsView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionsView and conformance GraphableExpressionsView);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<GraphableExpressionsView, _FlexFrameLayout>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t closure #2 in Menu<>.init(_:systemImage:content:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Label<>.init(_:systemImage:)();
}

uint64_t partial apply for closure #2 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)()
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t partial apply for closure #3 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #3 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #4 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #4 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #5 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures;
  if (!lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FeedbackFeatures, &type metadata for FeedbackFeatures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures;
  if (!lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FeedbackFeatures, &type metadata for FeedbackFeatures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeedbackFeatures and conformance FeedbackFeatures);
  }
  return result;
}

uint64_t outlined destroy of MiniObjectButtons(uint64_t a1)
{
  destroy for MiniObjectButtons();
  return a1;
}

uint64_t partial apply for specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)()
{
  return specialized closure #1 in Button<>.init<A>(_:systemImage:role:action:)();
}

void partial apply for closure #16 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;

  closure #12 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_straightenSelection);
}

void partial apply for closure #15 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;

  closure #12 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_translateSelection);
}

void partial apply for closure #14 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;

  closure #14 in closure #4 in MiniObjectButtons.body.getter(v0 + 16);
}

void partial apply for closure #13 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;

  closure #12 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_copyTranscriptionOfSelection);
}

void partial apply for closure #12 in closure #4 in MiniObjectButtons.body.getter()
{
  uint64_t v0;

  closure #12 in closure #4 in MiniObjectButtons.body.getter(v0 + 16, (SEL *)&selRef_refineSelection);
}

uint64_t partial apply for closure #11 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #11 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #10 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #10 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #9 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #9 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #8 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #8 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #1 in Button<>.init(_:systemImage:action:)()
{
  return closure #2 in Menu<>.init(_:systemImage:content:)();
}

uint64_t partial apply for closure #7 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #7 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #6 in closure #4 in MiniObjectButtons.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return closure #6 in closure #4 in MiniObjectButtons.body.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for specialized closure #1 in Menu<>.init(_:systemImage:content:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #2 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t partial apply for closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter()
{
  return closure #3 in closure #6 in closure #4 in MiniObjectButtons.body.getter();
}

uint64_t objectdestroyTm_1()
{
  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in MiniObjectButtons.body.getter()
{
  return closure #1 in closure #3 in MiniObjectButtons.body.getter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    v2[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
    v2[0] = lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>);
    v2[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(a3, a4, MEMORY[0x1E0CDCF80]);
    v10[0] = MEMORY[0x1E0CDF820];
    v10[1] = v9;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v8, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1DDB9C71C()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, ModifiedContent<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0, _FrameLayout>)>, MEMORY[0x1E0CE0680]);
}

void one-time initialization function for inputViewsForwardingScrollEvents(uint64_t a1)
{
  one-time initialization function for inputViewsForwardingScrollEvents(a1, &static ScrollWheelEventSwizzler.inputViewsForwardingScrollEvents);
}

void one-time initialization function for inputViewsConsumingScrollEvents(uint64_t a1)
{
  one-time initialization function for inputViewsForwardingScrollEvents(a1, &static ScrollWheelEventSwizzler.inputViewsConsumingScrollEvents);
}

void one-time initialization function for inputViewsForwardingScrollEvents(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v3 = MEMORY[0x1E0DEE9E8];
  *a2 = v3;
}

void closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel()
{
  void *v0;
  void (*v1)(void);
  NSString *v2;
  objc_class *v3;
  Method InstanceMethod;
  objc_method *v5;
  objc_method *v6;
  _QWORD v7[6];

  v7[4] = closure #1 in closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel;
  v7[5] = 0;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSObject & Responder, @guaranteed Event) -> ();
  v7[3] = &block_descriptor_3_0;
  v0 = _Block_copy(v7);
  v1 = imp_implementationWithBlock(v0);
  v2 = (NSString *)MEMORY[0x1DF0E41AC](0x75706E49534E4955, 0xED00007765695674);
  v3 = NSClassFromString(v2);

  if (v3)
  {
    InstanceMethod = class_getInstanceMethod(v3, sel_scrollWheel_);
    if (InstanceMethod)
    {
      v5 = InstanceMethod;
      if (class_addMethod(v3, sel_swizzled_scrollWheel_, v1, "v@:@"))
      {
        v6 = class_getInstanceMethod(v3, sel_swizzled_scrollWheel_);
        if (v6)
          method_exchangeImplementations(v5, v6);
      }
    }
  }
  _Block_release(v0);
}

void closure #1 in closure #1 in variable initialization expression of static ScrollWheelEventSwizzler.swizzleScrollWheel(void *a1, id a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19[3];

  objc_msgSend(a2, sel_scrollingDeltaY);
  v5 = fabs(v4);
  objc_msgSend(a2, sel_scrollingDeltaX);
  v7 = fabs(v6);
  if (objc_msgSend(a2, sel_phase) != (id)1 && objc_msgSend(a2, sel_momentumPhase) != (id)1)
    goto LABEL_8;
  if (v7 >= v5)
  {
    if (one-time initialization token for inputViewsConsumingScrollEvents == -1)
      goto LABEL_7;
    goto LABEL_27;
  }
  if (one-time initialization token for inputViewsForwardingScrollEvents != -1)
LABEL_27:
    swift_once();
LABEL_7:
  swift_beginAccess();
  specialized Set._Variant.insert(_:)(v19, a1);
  swift_endAccess();

  if (!objc_msgSend(a2, sel_phase) && v7 < v5)
    goto LABEL_17;
LABEL_8:
  if (one-time initialization token for inputViewsForwardingScrollEvents != -1)
    swift_once();
  swift_beginAccess();
  v8 = static ScrollWheelEventSwizzler.inputViewsForwardingScrollEvents;
  v9 = a1;
  swift_bridgeObjectRetain();
  v10 = specialized Set.contains(_:)(v9, v8);

  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
    goto LABEL_16;
  if (one-time initialization token for inputViewsConsumingScrollEvents != -1)
    swift_once();
  swift_beginAccess();
  v11 = static ScrollWheelEventSwizzler.inputViewsConsumingScrollEvents;
  v12 = v9;
  swift_bridgeObjectRetain();
  v13 = specialized Set.contains(_:)(v12, v11);

  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
LABEL_16:
    objc_msgSend(v9, sel_swizzled_scrollWheel_, a2);
  }
  else
  {
LABEL_17:
    v14 = objc_msgSend(a1, sel_nextResponder);
    if (v14)
    {
      objc_msgSend(v14, sel_scrollWheel_, a2);
      swift_unknownObjectRelease();
    }
  }
  if (objc_msgSend(a2, sel_phase) == (id)8 || objc_msgSend(a2, sel_momentumPhase) == (id)8)
  {
    if (one-time initialization token for inputViewsForwardingScrollEvents != -1)
      swift_once();
    swift_beginAccess();
    v15 = a1;
    v16 = (void *)specialized Set._Variant.remove(_:)(v15);
    swift_endAccess();

    if (one-time initialization token for inputViewsConsumingScrollEvents != -1)
      swift_once();
    swift_beginAccess();
    v17 = v15;
    v18 = (void *)specialized Set._Variant.remove(_:)(v17);
    swift_endAccess();

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSObject & Responder, @guaranteed Event) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v5)(id, uint64_t);
  id v6;

  v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();

}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ScrollWheelEventSwizzler();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<ScrollWheelEventSwizzler.State, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(v0 + 16) = result;
  static ScrollWheelEventSwizzler.shared = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SignatureManager();
  result = swift_initStaticObject();
  static SignatureManager.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for FeedbackManager();
  result = swift_initStaticObject();
  static FeedbackManager.shared = result;
  return result;
}

{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ThumbnailRenderer();
  v0 = swift_allocObject();
  result = ThumbnailRenderer.init()();
  static ThumbnailRenderer.shared = v0;
  return result;
}

{
  uint64_t v0;
  char *v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78]();
  v1 = (char *)&v8 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculateResultAttributionHandler();
  inited = swift_initStaticObject();
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v1, 1, 1, v3);
  type metadata accessor for MainActor();
  v4 = static MainActor.shared.getter();
  v5 = swift_allocObject();
  v6 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v6;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5((uint64_t)v1, (uint64_t)&async function pointer to partial apply for closure #1 in CalculateResultAttributionHandler.init(), v5);
  result = swift_release();
  static CalculateResultAttributionHandler.shared = inited;
  return result;
}

void closure #1 in ScrollWheelEventSwizzler.enableScrollEventForwardingIfNecessary(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  SecTaskRef v6;
  __SecTask *v7;
  __CFString *v8;
  CFTypeRef v9;
  char v10;
  audit_token_t v11;

  if (!*a1)
  {
    *(_QWORD *)v11.val = a2;
    *(_QWORD *)&v11.val[2] = a3;
    *(_QWORD *)&v11.val[4] = a4;
    *(_QWORD *)&v11.val[6] = a5;
    v6 = SecTaskCreateWithAuditToken(0, &v11);
    if (v6)
    {
      v7 = v6;
      v8 = (__CFString *)MEMORY[0x1DF0E41AC](0xD000000000000038, 0x80000001DDF4E240);
      v9 = SecTaskCopyValueForEntitlement(v7, v8, 0);

      if (v9)
      {
        if (CFEqual(v9, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        {
          if (one-time initialization token for swizzleScrollWheel != -1)
            swift_once();
          if (one-time initialization token for swizzle_PDFScrollView_centerAlign != -1)
            swift_once();
          swift_unknownObjectRelease();

          v10 = 1;
          goto LABEL_13;
        }

        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
    v10 = 2;
LABEL_13:
    *a1 = v10;
  }
}

uint64_t ScrollWheelEventSwizzler.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollWheelEventSwizzler()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ScrollWheelEventSwizzler.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDB9CF00 + 4 * byte_1DDF34A45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDB9CF34 + 4 * byte_1DDF34A40[v4]))();
}

uint64_t sub_1DDB9CF34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB9CF3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDB9CF44);
  return result;
}

uint64_t sub_1DDB9CF50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDB9CF58);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDB9CF5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDB9CF64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollWheelEventSwizzler.State()
{
  return &type metadata for ScrollWheelEventSwizzler.State;
}

unint64_t lazy protocol witness table accessor for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State;
  if (!lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ScrollWheelEventSwizzler.State, &type metadata for ScrollWheelEventSwizzler.State);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollWheelEventSwizzler.State and conformance ScrollWheelEventSwizzler.State);
  }
  return result;
}

void closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign()
{
  NSString *v0;
  objc_class *v1;
  const char *v2;
  objc_method *InstanceMethod;
  objc_method *v4;
  IMP Implementation;
  uint64_t v6;
  void *v7;
  void (*v8)(void);
  _QWORD v9[6];

  v0 = (NSString *)MEMORY[0x1DF0E41AC](0x6C6F726353464450, 0xED0000776569566CLL);
  v1 = NSClassFromString(v0);

  if (v1)
  {
    v2 = (const char *)Selector.init(_:)();
    InstanceMethod = class_getInstanceMethod(v1, v2);
    if (InstanceMethod)
    {
      v4 = InstanceMethod;
      Implementation = method_getImplementation(InstanceMethod);
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = Implementation;
      v9[4] = partial apply for closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign;
      v9[5] = v6;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIScrollView, @unowned Selector) -> ();
      v9[3] = &block_descriptor_6;
      v7 = _Block_copy(v9);
      swift_release();
      v8 = imp_implementationWithBlock(v7);
      method_setImplementation(v4, v8);
      _Block_release(v7);
    }
  }
}

void closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  id v26;
  CGRect v27;

  a3();
  v4 = a1;
  v5 = objc_msgSend(v4, sel_superview);
  if (!v5)
  {
    v26 = v4;
LABEL_7:
    v8 = v26;
    goto LABEL_15;
  }
  v6 = v5;
  type metadata accessor for PaperDocumentView();
  v7 = v4;
  while (1)
  {
    v25 = v7;
    v26 = v6;
    if (swift_dynamicCastClass())
      break;

    v6 = objc_msgSend(v6, sel_superview);
    v7 = v26;
    if (!v6)
      goto LABEL_7;
  }
  v9 = v6;
  v10 = objc_msgSend(v4, sel_delegate);
  if (!v10)
  {
LABEL_14:

    v8 = v25;
LABEL_15:

    return;
  }
  v11 = v10;
  if ((objc_msgSend(v10, sel_respondsToSelector_, sel_viewForZoomingInScrollView_) & 1) != 0)
  {
    v12 = objc_msgSend(v11, sel_viewForZoomingInScrollView_, v4);
    swift_unknownObjectRelease();
    if (v12)
    {
      objc_msgSend(v4, sel_contentSize);
      v14 = v13;
      objc_msgSend(v4, sel_bounds);
      v16 = v15;
      v18 = v17;
      v20 = v19;
      v22 = v21;
      objc_msgSend(v4, sel_adjustedContentInset);
      v27.origin.x = UIEdgeInsetsInsetRect(v16, v18, v20, v22, v23, v24);
      if (v14 < CGRectGetWidth(v27))
      {
        objc_msgSend(v12, sel_center);
        objc_msgSend(v12, sel_setCenter_, v14 * 0.5);
      }

    }
    goto LABEL_14;
  }

  swift_unknownObjectRelease();
}

uint64_t sub_1DDB9D2F8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(void *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in closure #1 in variable initialization expression of swizzle_PDFScrollView_centerAlign(a1, a2, *(void (**)(void))(v2 + 16));
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIScrollView, @unowned Selector) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t SignatureListViewController.__allocating_init(editable:_:)(char a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  void *v12;
  id v13;
  void *v14;
  uint64_t ObjCClassFromMetadata;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  char **v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char *v49;
  uint64_t result;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v56;

  LOBYTE(v4) = a1;
  v5 = objc_msgSend(objc_allocWithZone(v3), sel_initWithNibName_bundle_, 0, 0);
  v6 = one-time initialization token for paperKitBundle;
  v7 = (char *)v5;
  if (v6 != -1)
    goto LABEL_30;
  while (1)
  {
    v56._object = (void *)0x80000001DDF4E510;
    v8._countAndFlagsBits = 0x727574616E676953;
    v8._object = (void *)0xEA00000000007365;
    v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v9.value._object = (void *)0xEB00000000656C62;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v56._countAndFlagsBits = 0xD000000000000019;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v56)._countAndFlagsBits;
    v12 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setTitle_, v12);

    v13 = objc_msgSend(v7, sel_tableView);
    if (!v13)
    {
      swift_release();
      __break(1u);
LABEL_37:
      swift_release();
      __break(1u);
LABEL_38:
      swift_release();
      __break(1u);
LABEL_39:
      swift_release();
      __break(1u);
LABEL_40:
      swift_release();
      __break(1u);
LABEL_41:
      result = swift_release();
      __break(1u);
      return result;
    }
    v14 = v13;
    type metadata accessor for SignatureTableViewCell();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureTableViewCell.Type);
    v16 = String.init<A>(describing:)();
    v17 = (void *)MEMORY[0x1DF0E41AC](v16);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_registerClass_forCellReuseIdentifier_, ObjCClassFromMetadata, v17);

    v18 = objc_msgSend(v7, sel_tableView);
    if (!v18)
      goto LABEL_37;
    v19 = v18;
    type metadata accessor for SignatureAndDescriptionTableViewCell();
    v20 = swift_getObjCClassFromMetadata();
    v21 = String.init<A>(describing:)();
    v22 = (void *)MEMORY[0x1DF0E41AC](v21);
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_registerClass_forCellReuseIdentifier_, v20, v22);

    v23 = objc_msgSend(v7, sel_tableView);
    if (!v23)
      goto LABEL_38;
    v24 = v23;
    objc_msgSend(v23, sel_setEditing_, v4 & 1);

    v25 = objc_msgSend(v7, sel_tableView);
    if (!v25)
      goto LABEL_39;
    v26 = v25;
    objc_msgSend(v25, sel_setAlwaysBounceVertical_, (v4 & 1) == 0);

    v27 = objc_msgSend(v7, sel_tableView);
    if (!v27)
      goto LABEL_40;
    v28 = v27;
    v29 = (void *)objc_opt_self();
    v30 = &selRef_systemBackgroundColor;
    if ((v4 & 1) == 0)
      v30 = &selRef_clearColor;
    v31 = objc_msgSend(v29, *v30);
    objc_msgSend(v28, sel_setBackgroundColor_, v31);

    v32 = objc_msgSend(v7, sel_tableView);
    if (!v32)
      goto LABEL_41;
    v33 = v32;
    objc_msgSend(v32, sel_setRowHeight_, 86.0);

    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    v34 = SignatureManager.signatureItems.getter();
    v35 = v34;
    v36 = (v4 & 1) != 0 ? 4 : 3;
    if (v34 < 0 || (v34 & 0x4000000000000000) != 0)
      break;
    v37 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v38 = v7;
    v39 = v38;
    if (v37 >= v36)
      v40 = v36;
    else
      v40 = v37;
    objc_msgSend(v38, sel_setPreferredContentSize_, 0.0, (double)v40 * 86.0 + -1.0);

    v4 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_26;
LABEL_19:
    v41 = 4;
    while (1)
    {
      v42 = (v35 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x1DF0E4D64](v41 - 4, v35)
          : (char *)*(id *)(v35 + 8 * v41);
      v43 = v42;
      v44 = v41 - 3;
      if (__OFADD__(v41 - 4, 1))
        break;
      v45 = &v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
      v46 = *(_QWORD *)&v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
      v47 = *(_QWORD *)&v42[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription + 8];
      if (v47)
      {
        outlined copy of SignatureDescription(*(_QWORD *)v45, *((_QWORD *)v45 + 1));
        outlined consume of SignatureDescription(v46, v47);
        outlined consume of SignatureDescription(0, 0);
        swift_bridgeObjectRelease_n();

        v48 = 1;
        goto LABEL_28;
      }
      outlined consume of SignatureDescription(*(_QWORD *)v45, 0);
      outlined consume of SignatureDescription(0, 0);

      ++v41;
      if (v44 == v4)
        goto LABEL_26;
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
  v51 = v7;
  swift_bridgeObjectRetain();
  v52 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v52 >= v36)
    v53 = v36;
  else
    v53 = v52;
  objc_msgSend(v51, sel_setPreferredContentSize_, 0.0, (double)v53 * 86.0 + -1.0);

  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (v4)
    goto LABEL_19;
LABEL_26:
  swift_bridgeObjectRelease_n();
  v48 = 0;
LABEL_28:
  v7[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions] = v48;
  v49 = &v7[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion];
  *(_QWORD *)v49 = a2;
  *((_QWORD *)v49 + 1) = a3;

  swift_release();
  return (uint64_t)v7;
}

id SignatureListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  _QWORD *v5;
  void *v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_rowHeight] = 0x4055800000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_maximumSelectRows] = 3;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_maximumEditRows] = 4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_signatureRowHeight] = 0x4055800000000000;
  v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions] = 0;
  v5 = &v3[OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion];
  *v5 = UnknownCanvasElementView.flags.modify;
  v5[1] = 0;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for SignatureListViewController();
  v7 = objc_msgSendSuper2(&v9, sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void SignatureListViewController.tableView(_:cellForRowAt:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit27SignatureListViewController_showDescriptions) == 1)
    type metadata accessor for SignatureAndDescriptionTableViewCell();
  else
    type metadata accessor for SignatureTableViewCell();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignatureTableViewCell.Type);
  v3 = String.init<A>(describing:)();
  v4 = (void *)MEMORY[0x1DF0E41AC](v3);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_, v4);

  if (v5)
  {
    type metadata accessor for SignatureTableViewCell();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    __break(1u);
  }
}

void SignatureListViewController.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  Class isa;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t aBlock;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t (*v26)();
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for IndexPath();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)SignatureLogger);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1DDB0F000, v11, v12, "selected signature to insert", v13, 2u);
    MEMORY[0x1DF0E6558](v13, -1, -1);
  }

  v14 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000025, 0x80000001DDF4E570);
  v26 = specialized closure #1 in static SignatureAnalytics.inserted();
  v27 = 0;
  v15 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v23 = 1107296256;
  v24 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v25 = &block_descriptor_7;
  v16 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v16);

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_deselectRowAtIndexPath_animated_, isa, 1);

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  v18 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v18, (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v26 = partial apply for closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:);
  v27 = v19;
  aBlock = v15;
  v23 = 1107296256;
  v24 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v25 = &block_descriptor_3_1;
  v20 = _Block_copy(&aBlock);
  v21 = v3;
  swift_release();
  objc_msgSend(v21, sel_dismissViewControllerAnimated_completion_, 1, v20);
  _Block_release(v20);
}

uint64_t closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)(uint64_t a1)
{
  void (*v1)(void *);
  unint64_t v2;
  uint64_t result;
  id v4;
  void *v5;

  v1 = *(void (**)(void *))(a1 + OBJC_IVAR____TtC8PaperKit27SignatureListViewController_completion);
  type metadata accessor for SignatureManager();
  swift_retain();
  swift_initStaticObject();
  v2 = IndexPath.row.getter();
  result = SignatureManager.signatureItems.getter();
  if ((result & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1DF0E4D64](v2, result);
    goto LABEL_5;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v2 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(id *)(result + 8 * v2 + 32);
LABEL_5:
    v5 = v4;
    swift_bridgeObjectRelease();
    v1(v5);

    return swift_release();
  }
  __break(1u);
  return result;
}

id SignatureListViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureListViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureListViewController()
{
  return objc_opt_self();
}

uint64_t outlined copy of SignatureDescription(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of SignatureDescription(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 6)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1DDB9E460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for IndexPath();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)()
{
  uint64_t v0;

  type metadata accessor for IndexPath();
  return closure #1 in SignatureListViewController.tableView(_:didSelectRowAt:)(*(_QWORD *)(v0 + 16));
}

void specialized SignatureListViewController.tableView(_:willDisplay:forRowAt:)(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  char *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  unint64_t v15;
  id v16;
  void *v17;
  id v18;
  char v19;
  _BOOL8 v20;
  id v21;
  id v22;
  id v23;
  unsigned int v24;
  void *v25;
  char **v26;
  id v27;

  v3 = v1;
  type metadata accessor for SignatureTableViewCell();
  v5 = (char *)swift_dynamicCastClassUnconditional();
  type metadata accessor for SignatureManager();
  v6 = a1;
  swift_initStaticObject();
  v7 = SignatureManager.signatureItems.getter();
  v8 = IndexPath.row.getter();
  if ((v7 & 0xC000000000000001) == 0)
  {
    if ((v8 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v8 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = *(id *)(v7 + 8 * v8 + 32);
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_22;
  }
  v9 = (id)MEMORY[0x1DF0E4D64](v8, v7);
LABEL_5:
  v10 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature;
  v11 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature];
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = v9;

  v2 = *(void **)&v5[v10];
  if (!(v7 >> 62))
  {
    v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v13 = v2;
    v14 = v6;
    if (v12)
      goto LABEL_7;
LABEL_23:
    swift_bridgeObjectRelease();
    v17 = v2;
    if (v2)
      goto LABEL_24;
    goto LABEL_25;
  }
LABEL_22:
  v21 = v2;
  swift_bridgeObjectRetain();
  v22 = v6;
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_23;
LABEL_7:
  v15 = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    v16 = (id)MEMORY[0x1DF0E4D64](v15, v7);
    goto LABEL_13;
  }
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_30;
  if (v15 >= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_31:
    __break(1u);
    return;
  }
  v16 = *(id *)(v7 + 8 * v15 + 32);
LABEL_13:
  v17 = v16;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v17)
    {
LABEL_24:

      v20 = 1;
      goto LABEL_26;
    }
LABEL_25:
    v20 = 0;
    goto LABEL_26;
  }
  if (!v17)
  {
    v17 = v2;
    goto LABEL_24;
  }
  type metadata accessor for SignatureItem();
  v18 = v2;
  v19 = static NSObject.== infix(_:_:)();

  v20 = (v19 & 1) == 0;
LABEL_26:
  objc_msgSend(v5, sel_setSeparatorStyle_, v20);

  v23 = v6;
  v24 = objc_msgSend(v3, sel_isEditing);
  v25 = (void *)objc_opt_self();
  v26 = &selRef_systemBackgroundColor;
  if (!v24)
    v26 = &selRef_clearColor;
  v27 = objc_msgSend(v25, *v26);
  objc_msgSend(v5, sel_setBackgroundColor_, v27);

}

void specialized SignatureListViewController.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  Swift::Int v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Class isa;
  _QWORD v19[14];

  if (a2 == 1)
  {
    v19[12] = v3;
    v19[13] = v4;
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    v7 = IndexPath.row.getter();
    if (SignatureManager.removeSignature(atIndex:)(v7))
    {
      if (one-time initialization token for SignatureLogger != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)SignatureLogger);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_1DDB0F000, v9, v10, "deleted signature", v11, 2u);
        MEMORY[0x1DF0E6558](v11, -1, -1);
      }

      v12 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF4E5A0);
      v19[4] = specialized closure #1 in static SignatureAnalytics.inserted();
      v19[5] = 0;
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 1107296256;
      v19[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      v19[3] = &block_descriptor_6;
      v13 = _Block_copy(v19);
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v13);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexPath>);
      v14 = type metadata accessor for IndexPath();
      v15 = *(_QWORD *)(v14 - 8);
      v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1DDF32CF0;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v17 + v16, a3, v14);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);

    }
  }
}

uint64_t static ImageFileSync.ImageFileSyncError.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageFileSync.ImageFileSyncError(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t ImageFileSync.init(encryptPrivateMetadata:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t ImageFileSync.ImageWrapper.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t key path getter for ImageFileSync.customCanvasSizeForImageSize : ImageFileSync@<X0>(uint64_t a1@<X0>, void (**a2)(double *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(double *@<X0>, uint64_t@<X8>);

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@unowned CGSize);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (void (*)(double *@<X0>, uint64_t@<X8>))v5;
  return outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v3);
}

uint64_t key path setter for ImageFileSync.customCanvasSizeForImageSize : ImageFileSync(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double (*v6)(double, double);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out CGSize);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a2 + 8);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v3);
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t ImageFileSync.customCanvasSizeForImageSize.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v1);
  return v1;
}

uint64_t ImageFileSync.customCanvasSizeForImageSize.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v2 + 8));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*ImageFileSync.customCanvasSizeForImageSize.modify())()
{
  return UnknownCanvasElementView.flags.modify;
}

void ImageFileSync.read(from:context:coordinator:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a1, v8);
  swift_storeEnumTagMultiPayload();
  Capsule<>.init(_:)((uint64_t)v7, a2);
}

void ImageFileSync.read(from:context:coordinator:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v6 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v6, v6);
  v8 = (uint64_t *)((char *)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = a1;
  v8[1] = a2;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a1, a2);
  Capsule<>.init(_:)((uint64_t)v8, a3);
}

uint64_t ImageFileSync.write(_:to:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:)(a1, a2, a3);
}

uint64_t ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(a1, a2, a3, a5, a6);
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 104) = a7;
  *(_QWORD *)(v8 + 112) = a8;
  *(_QWORD *)(v8 + 96) = a6;
  *(double *)(v8 + 80) = a1;
  *(double *)(v8 + 88) = a2;
  type metadata accessor for Image();
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, char, char);

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  type metadata accessor for ImageRenderer();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = 0x3FF0000000000000;
  v4 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v3);
  *(_QWORD *)(v0 + 128) = v4;
  swift_beginAccess();
  *(_BYTE *)(v4 + 72) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_BYTE *)(v0 + 48) = 1;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                     + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:);
  return v7(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104), v0 + 16, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 144);

  OS_dispatch_semaphore.signal()();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  return swift_task_switch();
}

void protocol witness for CRCustomFileSync.read(from:context:coordinator:) in conformance ImageFileSync(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a1, v8);
  swift_storeEnumTagMultiPayload();
  Capsule<>.init(_:)((uint64_t)v7, a2);
}

uint64_t protocol witness for CRCustomFileSync.write(_:to:context:coordinator:) in conformance ImageFileSync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ImageFileSync.write(_:to:context:coordinator:)(a1, a2, a3);
}

uint64_t specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  NSURL *v53;
  void *v54;
  void *v55;
  id v56;
  id v57;
  char *v58;
  id v59;
  uint64_t v60;
  char *v61;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  Class v71;
  dispatch_semaphore_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  void (**v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  double *v81;
  char *v82;
  NSObject *v83;
  void *v84;
  char *v85;
  NSURL *v86;
  char *v87;
  char *v88;
  const __CFURL *v89;
  const __CFURL *v90;
  CGDataConsumerRef v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t);
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t);
  uint64_t v105;
  __CFString *v106;
  CGImageDestination *v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  id v110;
  BOOL v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  Swift::String v117;
  id v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  NSData v125;
  void *v126;
  char *v127;
  Class v128;
  char *v129;
  unsigned int v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  id v137[2];
  uint64_t v138;
  unint64_t v139;
  int v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  Class isa;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  unint64_t v154;
  char *v155;
  NSObject *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  id v164;
  unint64_t v165;
  uint64_t v166;

  v6 = v5;
  v147 = a5;
  v146 = a4;
  v142 = a3;
  v158 = a2;
  v166 = *MEMORY[0x1E0C80C00];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v8, v9);
  v141 = (char *)v137 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for CRCodableVersion();
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145, v11);
  v143 = (char *)v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v156 = *(NSObject **)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v154 = v15;
  v155 = (char *)v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16, v17);
  v157 = (char *)v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = (void (*)(char *, uint64_t))type metadata accessor for UUID();
  v151 = (char *)*((_QWORD *)v153 - 1);
  MEMORY[0x1E0C80A78](v153, v19);
  isa = (Class)((char *)v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v162 = type metadata accessor for URL();
  v152 = *(_QWORD *)(v162 - 8);
  MEMORY[0x1E0C80A78](v162, v21);
  v150 = (char *)v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v163 = (char *)v137 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v161 = (char *)v137 - v28;
  v29 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (uint64_t *)((char *)v137 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = type metadata accessor for CRAssetOrData();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v37 = (uint64_t *)((char *)v137 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)v137 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = *v6;
  swift_getKeyPath();
  v42 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v159 = v13;
  v160 = a1;
  v43 = (void *)v42;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v41, 1, v33) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v41, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_7:
    v60 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    strcpy(v61, "No image data.");
    v61[15] = -18;
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v61, *MEMORY[0x1E0D11EF8], v60);
    return swift_willThrow();
  }
  outlined init with copy of CRAssetOrData((uint64_t)v41, (uint64_t)v37);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    outlined destroy of PKStrokeProperties((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    goto LABEL_7;
  }
  v137[1] = v43;
  v44 = *v37;
  v45 = v37[1];
  v47 = v37[2];
  v46 = v37[3];
  outlined destroy of PKStrokeProperties((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  outlined copy of Data._Representation(v47, v46);
  outlined consume of Data._Representation(v44, v45);
  outlined consume of Data._Representation(v47, v46);
  *v32 = v47;
  v32[1] = v46;
  swift_storeEnumTagMultiPayload();
  v138 = v47;
  v139 = v46;
  outlined copy of Data._Representation(v47, v46);
  v48 = specialized static ImageLayout.imageSize(from:)((uint64_t)v32);
  v50 = v49;
  outlined destroy of PKStrokeProperties((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v51 = (void *)objc_opt_self();
  v52 = objc_msgSend(v51, sel_defaultManager);
  URL._bridgeToObjectiveC()(v53);
  v55 = v54;
  v164 = 0;
  v56 = objc_msgSend(v52, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v54, 1, &v164);

  v57 = v164;
  v137[0] = v51;
  if (v56)
  {
    v58 = v161;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v59 = v57;

  }
  else
  {
    v63 = v164;
    v64 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v65 = objc_msgSend(v51, sel_defaultManager);
    v66 = objc_msgSend(v65, sel_temporaryDirectory);

    v58 = v161;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v148 = 0;
  }
  v67 = v162;
  v68 = v160;
  v69 = v152;
  v70 = v150;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v150, v58, v162);
  v71 = isa;
  UUID.init()();
  UUID.uuidString.getter();
  (*((void (**)(Class, _QWORD *))v151 + 1))(v71, v153);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v153 = *(void (**)(char *, uint64_t))(v69 + 8);
  v153(v70, v67);
  v72 = dispatch_semaphore_create(0);
  type metadata accessor for ImageFileSync.ImageWrapper();
  v73 = swift_allocObject();
  *(_QWORD *)(v73 + 16) = 0;
  v74 = v157;
  static TaskPriority.userInitiated.getter();
  v75 = type metadata accessor for TaskPriority();
  (*(void (**)(id, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 0, 1, v75);
  v77 = v155;
  v76 = (void (**)(char *, char *, uint64_t))v156;
  v78 = v159;
  ((void (*)(char *, uint64_t, uint64_t))v156[2].isa)(v155, v68, v159);
  v79 = (*((unsigned __int8 *)v76 + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)v76 + 80);
  v80 = (v154 + v79 + 7) & 0xFFFFFFFFFFFFFFF8;
  v81 = (double *)swift_allocObject();
  v81[2] = 0.0;
  v81[3] = 0.0;
  v81[4] = v48;
  *((_QWORD *)v81 + 5) = v50;
  *((_QWORD *)v81 + 6) = v73;
  v76[4]((char *)v81 + v79, v77, v78);
  *(_QWORD *)((char *)v81 + v80) = v72;
  v82 = (char *)v73;
  swift_retain();
  v83 = v72;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v74, (uint64_t)&async function pointer to partial apply for closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:), (uint64_t)v81);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v74, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();
  v84 = *(void **)(v73 + 16);
  if (!v84 || (v85 = (char *)objc_msgSend(v84, sel_CGImage)) == 0)
  {
    v101 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    *v102 = 0xD000000000000019;
    v102[1] = 0x80000001DDF4E630;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v101 - 8) + 104))(v102, *MEMORY[0x1E0D11EF8], v101);
    swift_willThrow();
    swift_release();

    outlined consume of Data._Representation(v138, v139);
    v103 = v162;
    v104 = (uint64_t (*)(char *, uint64_t))v153;
    v153(v163, v162);
    return v104(v161, v103);
  }
  v87 = v85;
  v88 = v163;
  URL._bridgeToObjectiveC()(v86);
  v90 = v89;
  v157 = v87;
  if ((v147 & 1) == 0)
  {
    v156 = v83;
    v105 = UTType.identifier.getter();
    v106 = (__CFString *)MEMORY[0x1DF0E41AC](v105);
    swift_bridgeObjectRelease();
    v107 = CGImageDestinationCreateWithURL(v90, v106, 1uLL, 0);

    v108 = v161;
    v109 = v153;
    if (!v107)
    {
      v164 = 0;
      v165 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      v164 = (id)0xD000000000000029;
      v165 = 0x80000001DDF4E650;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v112 = v162;
      v117._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v117);
      swift_bridgeObjectRelease();
      v118 = v164;
      v119 = v165;
      lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError();
      swift_allocError();
      *v120 = v118;
      v120[1] = v119;
      swift_willThrow();
      swift_release();

      goto LABEL_28;
    }
    v110 = v157;
    CGImageDestinationAddImage(v107, (CGImageRef)v157, 0);
    v111 = CGImageDestinationFinalize(v107);
    v112 = v162;
    if (!v111)
    {
      lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError();
      swift_allocError();
      *v113 = 0xD000000000000015;
      v113[1] = 0x80000001DDF4E680;
      swift_willThrow();
      swift_release();

      goto LABEL_28;
    }
LABEL_26:

    v132 = objc_msgSend(v137[0], sel_defaultManager);
    v133 = (uint64_t)v141;
    v134 = v148;
    NSFileManager.replaceItemAt(_:withItemAt:backupItemName:options:)();
    if (!v134)
    {
      swift_release();

      outlined consume of Data._Representation(v138, v139);
      outlined destroy of StocksKitCurrencyCache.Provider?(v133, &demangling cache variable for type metadata for URL?);
      goto LABEL_29;
    }
    swift_release();

LABEL_28:
    outlined consume of Data._Representation(v138, v139);
LABEL_29:
    v109(v88, v112);
    return ((uint64_t (*)(char *, uint64_t))v109)(v108, v112);
  }
  v91 = CGDataConsumerCreateWithURL(v89);

  v92 = v153;
  if (!v91)
  {
    v114 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    *v115 = 0xD00000000000001FLL;
    v115[1] = 0x80000001DDF4E6A0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v114 - 8) + 104))(v115, *MEMORY[0x1E0D11EF8], v114);
    swift_willThrow();
    swift_release();

    outlined consume of Data._Representation(v138, v139);
    v116 = v162;
    v92(v88, v162);
    return ((uint64_t (*)(char *, uint64_t))v92)(v161, v116);
  }
  v155 = v82;
  v156 = v83;
  v93 = v144;
  v94 = v143;
  v95 = v145;
  (*(void (**)(char *, _QWORD, uint64_t))(v144 + 104))(v143, *MEMORY[0x1E0D12378], v145);
  v96 = v148;
  v97 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
  if (v96)
  {
    swift_release();

    outlined consume of Data._Representation(v138, v139);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v95);
    v99 = v162;
    v100 = (uint64_t (*)(char *, uint64_t))v153;
    v153(v88, v162);
    return v100(v161, v99);
  }
  v148 = 0;
  v121 = v97;
  v122 = v98;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v95);
  v150 = (char *)objc_msgSend(objc_allocWithZone((Class)PPKImageWriter), sel_init);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v151 = v157;
  v123 = UTType.identifier.getter();
  v124 = (void *)MEMORY[0x1DF0E41AC](v123);
  swift_bridgeObjectRelease();
  v152 = v121;
  v154 = v122;
  v125.super.isa = Data._bridgeToObjectiveC()().super.isa;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  if (v165)
  {
    v126 = (void *)MEMORY[0x1DF0E41AC](v164, v165);
    swift_bridgeObjectRelease();
  }
  else
  {
    v126 = 0;
  }
  v109 = v153;
  v107 = v91;
  v164 = 0;
  v128 = isa;
  v127 = v150;
  v129 = v151;
  v130 = -[PPKImageWriter writeUsingBaseImageData:annotationImage:asImageOfType:toConsumer:annotationMetadata:modifiedImageDescription:encryptPrivateMetadata:error:](v150, (uint64_t)isa, (uint64_t)v151, (uint64_t)v124, (uint64_t)v107, (uint64_t)v125.super.isa, (uint64_t)v126, v140, (uint64_t)&v164);

  v131 = v164;
  if (v130)
  {
    outlined consume of Data._Representation(v152, v154);
    v108 = v161;
    v112 = v162;
    v88 = v163;
    goto LABEL_26;
  }
  v135 = v131;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  outlined consume of Data._Representation(v152, v154);
  swift_release();

  outlined consume of Data._Representation(v138, v139);
  v136 = v162;
  v109(v163, v162);
  return ((uint64_t (*)(char *, uint64_t))v109)(v161, v136);
}

uint64_t specialized ImageFileSync.write(_:to:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  CFArrayRef v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v36 = a1;
  v37 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UTType?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UTType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v33 - v18;
  v35 = *v3;
  v20 = *((_QWORD *)v3 + 1);
  v33 = *((_QWORD *)v3 + 2);
  v34 = v20;
  static UTType.jpeg.getter();
  v21 = URL.pathExtension.getter();
  v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v23 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  static UTType.image.getter();
  UTType.init(filenameExtension:conformingTo:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for UTType?);
LABEL_11:
    LOBYTE(v38) = v35;
    v39 = v34;
    v40 = v33;
    specialized ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v36, a2, v37, (uint64_t)v19, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v19, v9);
  }
  v24 = v8;
  v25 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v25(v15, v24, v9);
  v26 = CGImageDestinationCopyTypeIdentifiers();
  v38 = 0;
  result = static Array._forceBridgeFromObjectiveC(_:result:)();
  v28 = v38;
  if (v38)
  {

    v29 = UTType.identifier.getter();
    v31 = specialized Sequence<>.contains(_:)(v29, v30, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    if ((v31 & 1) != 0)
    {
      v32(v19, v9);
      v25(v19, v15, v9);
    }
    else
    {
      v32(v15, v9);
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for CRCustomFileSync.Model : CRDT in ImageFileSync()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t destroy for ImageFileSync(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return swift_release();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ImageFileSync(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for ImageFileSync(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageFileSync(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      v7 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v4;
      *(_QWORD *)(a1 + 16) = v7;
      return a1;
    }
LABEL_7:
    *v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFileSync(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFileSync(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFileSync()
{
  return &type metadata for ImageFileSync;
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageFileSync.ImageFileSyncError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ImageFileSync.ImageFileSyncError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ImageFileSync.ImageFileSyncError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ImageFileSync.ImageFileSyncError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageFileSync.ImageFileSyncError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageFileSync.ImageFileSyncError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageFileSync.ImageFileSyncError()
{
  return &type metadata for ImageFileSync.ImageFileSyncError;
}

uint64_t type metadata accessor for ImageFileSync.ImageWrapper()
{
  return objc_opt_self();
}

uint64_t sub_1DDBA057C()
{
  swift_release();
  return swift_deallocObject();
}

double partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize) -> (@out CGSize)(double a1, double a2)
{
  uint64_t v2;
  void (*v3)(double *__return_ptr, _QWORD *);
  double v5;
  _QWORD v6[2];

  v3 = *(void (**)(double *__return_ptr, _QWORD *))(v2 + 16);
  *(double *)v6 = a1;
  *(double *)&v6[1] = a2;
  v3(&v5, v6);
  return v5;
}

void partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize) -> (@unowned CGSize)(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(double *)a2 = (*(double (**)(double, double))(v2 + 16))(*a1, a1[1]);
  *(_QWORD *)(a2 + 8) = v4;
}

uint64_t outlined init with copy of CRAssetOrData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDBA0650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = v1[4];
  v9 = v1[5];
  v10 = *((_QWORD *)v1 + 6);
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ImageFileSync.write(_:to:context:coordinator:imageType:embeddingSourceImageAndEditModel:)(v8, v9, a1, v6, v7, v10, v11, v12);
}

unint64_t lazy protocol witness table accessor for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError;
  if (!lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ImageFileSync.ImageFileSyncError, &type metadata for ImageFileSync.ImageFileSyncError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFileSync.ImageFileSyncError and conformance ImageFileSync.ImageFileSyncError);
  }
  return result;
}

uint64_t SignatureStyleEditingView.strokeWidthControls.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls))
  {
    v3 = v0;
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_isCompact) == 1)
    {
      v4 = closure #1 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(v0);
      v2 = v4;
      if (!(v4 >> 62))
      {
        v5 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
        if (!swift_dynamicCastMetatype())
        {
          v6 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v6)
          {
            v7 = v5 + 32;
            while (swift_dynamicCastObjCProtocolConditional())
            {
              v7 += 8;
              if (!--v6)
                goto LABEL_13;
            }
LABEL_21:
            swift_bridgeObjectRelease();
            v2 = v5 | 1;
            goto LABEL_14;
          }
        }
        goto LABEL_13;
      }
    }
    else
    {
      v8 = closure #2 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(v0);
      v2 = v8;
      if (!(v8 >> 62))
      {
        v5 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
        if (!swift_dynamicCastMetatype())
        {
          v10 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v10)
          {
            v11 = v5 + 32;
            while (swift_dynamicCastObjCProtocolConditional())
            {
              v11 += 8;
              if (!--v10)
                goto LABEL_13;
            }
            goto LABEL_21;
          }
        }
LABEL_13:
        swift_bridgeObjectRelease();
LABEL_14:
        *(_QWORD *)(v3 + v1) = v2;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIControl & SignatureStrokeWidthWidget);
    v12 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    v2 = v12;
    goto LABEL_14;
  }
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls);
LABEL_15:
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1DDF329D0;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit + 8);
  v5 = (objc_class *)type metadata accessor for CompactSignatureStrokeWidthControl();
  v6 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 32) = CompactSignatureStrokeWidthControl.init(width:unit:)(1, v3, v4);
  v7 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 40) = CompactSignatureStrokeWidthControl.init(width:unit:)(2, v3, v4);
  v8 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 48) = CompactSignatureStrokeWidthControl.init(width:unit:)(4, v3, v4);
  v9 = objc_allocWithZone(v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 56) = CompactSignatureStrokeWidthControl.init(width:unit:)(8, v3, v4);
  specialized Array._endMutation()();
  return v2;
}

uint64_t closure #2 in closure #1 in SignatureStyleEditingView.strokeWidthControls.getter(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  objc_class *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = swift_allocObject();
  v3 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_isHorizontal);
  *(_OWORD *)(v2 + 16) = xmmword_1DDF329D0;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit);
  v5 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit + 8);
  v6 = (objc_class *)type metadata accessor for SignatureStrokeWidthControl();
  v7 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 32) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 1, v4, v5);
  v8 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 40) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 2, v4, v5);
  v9 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 48) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 4, v4, v5);
  v10 = objc_allocWithZone(v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 56) = SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(v3, 8, v4, v5);
  specialized Array._endMutation()();
  return v2;
}

uint64_t type metadata accessor for SignatureStyleEditingView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HorizontalSignatureStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t VerticalSignatureStyleEditingViewLayout.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VerticalSignatureStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t CompactSignatureStyleEditingViewLayout.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CompactSignatureStyleEditingViewLayout()
{
  return objc_opt_self();
}

void specialized SignatureStyleEditingView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_colorSwatch] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView____lazy_storage___strokeWidthControls] = 0;
  v1 = OBJC_IVAR____TtC8PaperKit25SignatureStyleEditingView_strokeWidthUnit;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._countAndFlagsBits = 0xD000000000000039;
  v5._object = (void *)0x80000001DDF4E8C0;
  v2._countAndFlagsBits = 29808;
  v2._object = (void *)0xE200000000000000;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  *(Swift::String *)&v0[v1] = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v5);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t GraphableExpression.expression.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path setter for GraphableExpression.expression : GraphableExpression()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.expression.setter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.expression.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$expression.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$expression : GraphableExpression(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t GraphableExpression.$expression.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*GraphableExpression.$expression.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t GraphableExpression.identifier.getter()
{
  uint64_t v1;

  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for GraphableExpression()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GraphableExpression;
  if (!type metadata singleton initialization cache for GraphableExpression)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for GraphableExpression.identifier : GraphableExpression@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for GraphableExpression.identifier : GraphableExpression()
{
  type metadata accessor for GraphableExpression();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.identifier.setter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.identifier.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$identifier.getter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$identifier : GraphableExpression(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t GraphableExpression.$identifier.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphableExpression.$identifier.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphableExpression() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t GraphableExpression.color.getter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for GraphableExpression.color : GraphableExpression@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for GraphableExpression.color : GraphableExpression(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for GraphableExpression();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.color.setter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*GraphableExpression.color.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t GraphableExpression.$color.getter()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for GraphableExpression.$color : GraphableExpression(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t GraphableExpression.$color.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for GraphableExpression();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*GraphableExpression.$color.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for GraphableExpression() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t GraphableExpression.init()@<X0>(uint64_t a1@<X8>)
{
  return GraphableExpression.init(expression:identifier:color:)(a1);
}

uint64_t GraphableExpression.init(expression:identifier:color:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for GraphableExpression();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v2 + 28)) = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.setter();
  CRRegister.wrappedValue.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t GraphableExpression.additionalFields.getter()
{
  type metadata accessor for GraphableExpression();
  return swift_bridgeObjectRetain();
}

uint64_t GraphableExpression.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for GraphableExpression() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*GraphableExpression.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for GraphableExpression();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static GraphableExpression.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6F170;
  v4 = qword_1EDB6F178;
  v3 = unk_1EDB6F180;
  v5 = qword_1EDB6F188;
  v6 = qword_1EDB6F190;
  v7 = qword_1EDB6F198;
  v8 = qword_1EDB6F1A0;
  v9 = qword_1EDB6F1A8;
  *a1 = static GraphableExpression.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if ((unint64_t)(rawValue + 1) >= 4)
    v2 = 4;
  else
    v2 = 0x2010003u >> (8 * (rawValue + 1));
  *v1 = v2;
  return (PaperKit::GraphableExpression::CodingKeys_optional)rawValue;
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::GraphableExpression::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x6973736572707865 && stringValue._object == (void *)0xEA00000000006E6FLL;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x696669746E656469 && object == (void *)0xEA00000000007265
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x726F6C6F63 && object == (void *)0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x80000001DDF4C510)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 3;
    else
      v7 = 4;
  }
  *v2 = v7;
  return result;
}

PaperKit::GraphableExpression::CodingKeys_optional __swiftcall GraphableExpression.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  if ((unint64_t)(intValue + 1) >= 4)
    v2 = 4;
  else
    v2 = 0x2010003u >> (8 * (intValue + 1));
  *v1 = v2;
  return (PaperKit::GraphableExpression::CodingKeys_optional)intValue;
}

void *static GraphableExpression.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static GraphableExpression.CodingKeys.allCases.getter;
}

uint64_t GraphableExpression.CodingKeys.intValue.getter()
{
  char *v0;

  return qword_1DDF352D8[*v0];
}

uint64_t GraphableExpression.CodingKeys.rawValue.getter()
{
  char *v0;

  return qword_1DDF352D8[*v0];
}

uint64_t GraphableExpression.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDBA2074 + 4 * byte_1DDF34DB0[*v0]))(0x6973736572707865, 0xEA00000000006E6FLL);
}

uint64_t sub_1DDBA2074()
{
  return 0x696669746E656469;
}

uint64_t sub_1DDBA208C()
{
  return 0x726F6C6F63;
}

unint64_t sub_1DDBA20A0()
{
  return 0xD000000000000010;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GraphableExpression.CodingKeys(char *a1, char *a2)
{
  return qword_1DDF352D8[*a1] == qword_1DDF352D8[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GraphableExpression.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF352D8[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GraphableExpression.CodingKeys()
{
  char *v0;

  Hasher._combine(_:)(qword_1DDF352D8[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GraphableExpression.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF352D8[v1]);
  return Hasher._finalize()();
}

PaperKit::GraphableExpression::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GraphableExpression.CodingKeys(Swift::Int *a1)
{
  return GraphableExpression.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GraphableExpression.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DDF352D8[*v1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GraphableExpression.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDBA21FC + 4 * byte_1DDF34DB4[*v0]))(0x6973736572707865, 0xEA00000000006E6FLL);
}

uint64_t sub_1DDBA21FC()
{
  return 0x696669746E656469;
}

uint64_t sub_1DDBA2214()
{
  return 0x726F6C6F63;
}

unint64_t sub_1DDBA2228()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GraphableExpression.CodingKeys()
{
  char *v0;

  return qword_1DDF352D8[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance GraphableExpression.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance GraphableExpression.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance GraphableExpression.CodingKeys()
{
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GraphableExpression.CodingKeys()
{
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GraphableExpression.CodingKeys()
{
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id GraphableExpression.itemProvider.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for GraphableExpression();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2, v5);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
  v7 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF4E930);
  outlined init with copy of GraphableExpression(v1, (uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v9 = swift_allocObject();
  outlined init with take of GraphableExpression((uint64_t)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  aBlock[4] = partial apply for closure #1 in GraphableExpression.registerFor(itemProvider:);
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  aBlock[3] = &block_descriptor_8;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v6, sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_, v7, 0, v10);
  _Block_release(v10);

  return v6;
}

uint64_t closure #1 in GraphableExpression.registerFor(itemProvider:)(void (*a1)(uint64_t, unint64_t, _QWORD))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for GraphableExpression();
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v4 = v3;
  swift_release();
  a1(v2, v4, 0);
  outlined consume of Data?(v2, v4);
  return 0;
}

uint64_t sub_1DDBA2544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for GraphableExpression();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v3 + *(int *)(v1 + 20), v4);
  v6 = v3 + *(int *)(v1 + 24);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in GraphableExpression.registerFor(itemProvider:)(void (*a1)(uint64_t, unint64_t, _QWORD))
{
  type metadata accessor for GraphableExpression();
  return closure #1 in GraphableExpression.registerFor(itemProvider:)(a1);
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)();
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

uint64_t GraphableExpression.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v18 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GraphableExpression.CodingKeys>);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v23 = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  v22 = 0;
  v23 = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  v11 = &v10[*(int *)(v7 + 24)];
  v22 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v10[*(int *)(v7 + 28)] = MEMORY[0x1E0DEE9E0];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys();
  v12 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
  {
    outlined destroy of GraphableExpression((uint64_t)v10);
  }
  else
  {
    v21 = v11;
    v13 = v19;
    v14 = v20;
    LOBYTE(v22) = 0;
    v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    CRRegister.wrappedValue.setter();
    LOBYTE(v22) = 1;
    v22 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = v17;
    CRRegister.wrappedValue.setter();
    v24 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v14);
    outlined init with take of GraphableExpression((uint64_t)v10, v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for GraphableExpression.CodingKeys, &type metadata for GraphableExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression.CodingKeys and conformance GraphableExpression.CodingKeys);
  }
  return result;
}

uint64_t outlined destroy of GraphableExpression(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GraphableExpression();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GraphableExpression.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [GraphableExpression.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [GraphableExpression.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t base witness table accessor for CRStruct_Base_3 in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.minEncodingVersion.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GraphableExpression@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GraphableExpression.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  lazy protocol witness table accessor for type CRRegister<String> and conformance <> CRRegister<A>();
  lazy protocol witness table accessor for type Color? and conformance <A> A?(&lazy protocol witness table cache variable for type CRRegister<Color?> and conformance <> CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Color?>, lazy protocol witness table accessor for type Color? and conformance <A> A?, MEMORY[0x1E0D117B0]);
  return CRStruct_3<>.encode(to:)();
}

uint64_t base witness table accessor for CRStruct_Base in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t protocol witness for static CRStruct_Base_3.fields.getter in conformance GraphableExpression@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB6F170;
  v4 = qword_1EDB6F178;
  v3 = unk_1EDB6F180;
  v5 = qword_1EDB6F188;
  v6 = qword_1EDB6F190;
  v7 = qword_1EDB6F198;
  v8 = qword_1EDB6F1A0;
  v9 = qword_1EDB6F1A8;
  *a1 = static GraphableExpression.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t base witness table accessor for CRDT in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return static CRStruct_3.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.init() in conformance GraphableExpression@<X0>(uint64_t a1@<X8>)
{
  return GraphableExpression.init(expression:identifier:color:)(a1);
}

uint64_t base witness table accessor for CRMergeable in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t base witness table accessor for CRType in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in GraphableExpression()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_3<GraphableExpression> and conformance CRStructMergeableDelta_3<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_3<GraphableExpression>, MEMORY[0x1E0D12748]);
}

uint64_t protocol witness for CRDT.context.getter in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.merge(delta:)();
}

uint64_t base witness table accessor for CRCodable in GraphableExpression()
{
  return lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRStruct_3.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance GraphableExpression()
{
  lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  return CRDT.init(serializedData:)();
}

uint64_t sub_1DDBA3560@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1DDBA35A8()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBA35E8()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDBA3640()
{
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for GraphableExpression(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for GraphableExpression(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for GraphableExpression(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphableExpression()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBA3AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableExpression()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDBA3BA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void type metadata completion function for GraphableExpression()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CRRegister<String>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Color?>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for CRRegister<String>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<String>)
  {
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<String>);
  }
}

void type metadata accessor for CRRegister<Color?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<Color?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Color?);
    lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0D12D70]);
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>);
  }
}

uint64_t getEnumTagSinglePayload for GraphableExpression.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphableExpression.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDBA3EA0 + 4 * byte_1DDF34DBD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDBA3ED4 + 4 * byte_1DDF34DB8[v4]))();
}

uint64_t sub_1DDBA3ED4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBA3EDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDBA3EE4);
  return result;
}

uint64_t sub_1DDBA3EF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDBA3EF8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDBA3EFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDBA3F04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphableExpression.CodingKeys()
{
  return &type metadata for GraphableExpression.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type CRRegister<String> and conformance <> CRRegister<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>;
  if (!lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    v2 = MEMORY[0x1E0DEA970];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D117B0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<String> and conformance <> CRRegister<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x1DF0E6450](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Color? and conformance <A> A?()
{
  return lazy protocol witness table accessor for type Color? and conformance <A> A?(&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0DEE988]);
}

uint64_t sub_1DDBA4048()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSData?, @unowned NSError?) -> ()(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t lazy protocol witness table accessor for type GraphableExpression and conformance GraphableExpression(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for GraphableExpression();
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSo6CGRectV_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  type metadata accessor for CGRect(0);
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZSi_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a2;
  *(_QWORD *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:scale:)(double a1, double a2, double a3)
{
  double *v6;

  type metadata accessor for ImageRenderer();
  v6 = (double *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  return specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v6);
}

void key path setter for CanvasElementRenderer.backgroundColor : CanvasElementRenderer(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v2;
  v5 = v2;

}

void *CanvasElementRenderer.backgroundColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 56);
  v2 = v1;
  return v1;
}

void CanvasElementRenderer.backgroundColor.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;

}

uint64_t (*CanvasElementRenderer.backgroundColor.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void key path setter for CanvasElementRenderer.tintColor : CanvasElementRenderer(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(void **)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;
  v5 = v2;

}

void *CanvasElementRenderer.tintColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 64);
  v2 = v1;
  return v1;
}

void CanvasElementRenderer.tintColor.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = a1;

}

uint64_t (*CanvasElementRenderer.tintColor.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t CanvasElementRenderer.sixChannelBlending.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t CanvasElementRenderer.sixChannelBlending.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 72) = a1;
  return result;
}

uint64_t (*CanvasElementRenderer.sixChannelBlending.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v13 + 384) = v17;
  *(_QWORD *)(v13 + 392) = v12;
  *(_QWORD *)(v13 + 368) = a8;
  *(_QWORD *)(v13 + 376) = v16;
  *(_QWORD *)(v13 + 352) = a6;
  *(_QWORD *)(v13 + 360) = a7;
  *(_BYTE *)(v13 + 92) = a5;
  *(_BYTE *)(v13 + 91) = a4;
  *(double *)(v13 + 336) = a11;
  *(double *)(v13 + 344) = a12;
  *(double *)(v13 + 320) = a9;
  *(double *)(v13 + 328) = a10;
  *(_QWORD *)(v13 + 304) = a2;
  *(_QWORD *)(v13 + 312) = a3;
  *(_QWORD *)(v13 + 296) = a1;
  v14 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v13 + 400) = v14;
  *(_QWORD *)(v13 + 408) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v13 + 416) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)()
{
  uint64_t v0;
  char v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  id v34;
  id v35;
  _QWORD *v36;
  uint64_t v38;
  char v39;
  uint64_t (*v40)(CGContext *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  CGRect ClipBoundingBox;
  CGRect v42;

  v1 = *(_BYTE *)(v0 + 91);
  v2 = (unsigned __int8 *)(*(_QWORD *)(v0 + 392) + 72);
  swift_beginAccess();
  if ((v1 & 1) != 0)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = *v2;
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 392);
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(_QWORD *)(v0 + 424) = v6;
  swift_beginAccess();
  v7 = *(void **)(v5 + 56);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    v9 = objc_msgSend(v8, sel_CGColor);

  }
  else
  {
    v9 = 0;
  }
  v39 = v3;
  if (v9)
    v10 = 0;
  else
    v10 = v3;
  if (v10 == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(_QWORD *)(v0 + 432) = v9;
  v13 = *(_QWORD **)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 352);
  v15 = v13[5];
  v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v18 = v13[5];
  v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(_QWORD *)(v0 + 208))
  {
    outlined init with take of FindResult((__int128 *)(v0 + 184), v0 + 144);
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v20);
    v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(_QWORD *)(v0 + 440) = v22;
    v23 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);

    }
    v26 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 376);
    v28 = *(_BYTE *)(v0 + 92);
    v29 = *(_BYTE *)(v0 + 91);
    v42.size.width = *(CGFloat *)(v0 + 336);
    v42.size.height = *(CGFloat *)(v0 + 344);
    v31 = *(double *)(v0 + 320);
    v30 = *(double *)(v0 + 328);
    v42.origin.x = v31;
    v42.origin.y = v30;
    v32 = v17 / CGRectGetWidth(v42);
    *(double *)(v0 + 96) = v32;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v32;
    *(double *)(v0 + 128) = -(v31 * v32);
    *(double *)(v0 + 136) = -(v30 * v32);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    v33 = *(void **)(v26 + 64);
    *(_QWORD *)(v0 + 448) = v33;
    LOBYTE(v26) = *(_BYTE *)(v26 + 73);
    v34 = v33;
    static CRKeyPath.unique.getter();
    *(_BYTE *)(v0 + 16) = v39;
    *(_BYTE *)(v0 + 17) = v29;
    *(_BYTE *)(v0 + 18) = v28;
    *(_QWORD *)(v0 + 24) = v33;
    *(_BYTE *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 90) = v26;
    v40 = (uint64_t (*)(CGContext *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v27 + 16) + *(_QWORD *)(v27 + 16));
    v35 = v34;
    v36 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 456) = v36;
    *v36 = v0;
    v36[1] = CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return v40(v22, *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 312), v0 + 16, *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 376));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)v38 = 0u;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_QWORD *)(v38 + 32) = 0;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 448);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 408);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 416);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 400);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)(v0 + 440);
  v1 = *(void **)(v0 + 448);
  v4 = *(void **)(v0 + 424);
  v3 = *(void **)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult(v0 + 144, v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasElementRenderer.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t CanvasElementRenderer.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:)(double a1, double a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  type metadata accessor for UIGraphicsImageRendererFormat();
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_defaultFormat);
  objc_msgSend(v4, sel_scale);
  v6 = v5;
  type metadata accessor for ImageRenderer();
  v7 = swift_allocObject();
  *(double *)(v7 + 16) = a1;
  *(double *)(v7 + 24) = a2;
  *(_QWORD *)(v7 + 32) = v6;
  v8 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v7);

  return v8;
}

uint64_t CanvasElementImageRenderer.__allocating_init(size:format:)(void *a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  objc_msgSend(a1, sel_scale);
  v7 = v6;
  type metadata accessor for ImageRenderer();
  v8 = swift_allocObject();
  *(double *)(v8 + 16) = a2;
  *(double *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = v7;
  v9 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v8);

  return v9;
}

uint64_t CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElementImageRenderer.image(from:bounds:completion:)(a1, a2, a3, a4, (void (*)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 176) = a2;
  *(_QWORD *)(v5 + 184) = v4;
  *(_BYTE *)(v5 + 50) = a4;
  *(_BYTE *)(v5 + 49) = a3;
  *(_QWORD *)(v5 + 168) = a1;
  outlined init with take of CGRect?(a2, v5 + 96);
  v6 = *(_OWORD *)(v5 + 112);
  *(_OWORD *)(v5 + 192) = *(_OWORD *)(v5 + 96);
  *(_OWORD *)(v5 + 208) = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(_QWORD *)(v5 + 224) = v7;
  *(_QWORD *)(v5 + 232) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 240) = swift_task_alloc();
  type metadata accessor for Paper();
  *(_QWORD *)(v5 + 248) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, char, char);

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  outlined init with take of CGRect?(v4, v0 + 56);
  v7 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 224);
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 160);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 208);
    v13 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    (*(void (**)(_QWORD, _QWORD))(v7 + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
    *(_QWORD *)(v0 + 136) = v16;
    *(_QWORD *)(v0 + 144) = v15;
    v9 = v16;
    v10 = v15;
    v11 = v14;
    v12 = v13;
    *(_QWORD *)(v0 + 152) = v14;
    *(_QWORD *)(v0 + 160) = v13;
  }
  *(_QWORD *)(v0 + 16) = v9;
  *(_QWORD *)(v0 + 24) = v10;
  *(_QWORD *)(v0 + 32) = v11;
  *(_QWORD *)(v0 + 40) = v12;
  *(_BYTE *)(v0 + 48) = 0;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                      + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v17;
  *v17 = v0;
  v17[1] = CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:);
  return v19(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 168), v0 + 16, *(_BYTE *)(v0 + 49), *(_BYTE *)(v0 + 50));
}

uint64_t CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(*v1 + 248);
  v5 = *v1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&unk_1EA8405F8, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:));
}

uint64_t closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v12 + 184) = v16;
  *(_QWORD *)(v12 + 192) = v17;
  *(_OWORD *)(v12 + 168) = v15;
  *(_OWORD *)(v12 + 152) = v14;
  *(_BYTE *)(v12 + 217) = a12;
  *(_BYTE *)(v12 + 216) = a11;
  *(double *)(v12 + 136) = a3;
  *(double *)(v12 + 144) = a4;
  *(double *)(v12 + 120) = a1;
  *(double *)(v12 + 128) = a2;
  *(_QWORD *)(v12 + 104) = a9;
  *(_QWORD *)(v12 + 112) = a10;
  *(_QWORD *)(v12 + 96) = a8;
  type metadata accessor for RendererOutput();
  *(_QWORD *)(v12 + 200) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for RendererOutput();
  swift_storeEnumTagMultiPayload();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 216), *(_BYTE *)(v0 + 217), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(double *)(v0 + 120), *(double *)(v0 + 128), *(double *)(v0 + 136), *(double *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  id v5;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for RendererContext?);
  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (!v3)
  {
LABEL_5:
    (*(void (**)(_QWORD))(v0 + 152))(0);
    goto LABEL_6;
  }
  v4 = *(void (**)(void))(v0 + 152);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v3);
  v4();

LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_BYTE *)(v6 + 130) = a5;
  *(_BYTE *)(v6 + 129) = a4;
  *(_QWORD *)(v6 + 264) = a3;
  *(_QWORD *)(v6 + 272) = v5;
  *(_QWORD *)(v6 + 248) = a1;
  *(_QWORD *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(_QWORD *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  *(_QWORD *)(v6 + 328) = type metadata accessor for Paper();
  *(_QWORD *)(v6 + 336) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_BYTE *)(v6 + 130) = a5;
  *(_BYTE *)(v6 + 129) = a4;
  *(_QWORD *)(v6 + 264) = a3;
  *(_QWORD *)(v6 + 272) = v5;
  *(_QWORD *)(v6 + 248) = a1;
  *(_QWORD *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(_QWORD *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  *(_QWORD *)(v6 + 328) = type metadata accessor for Image();
  *(_QWORD *)(v6 + 336) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_BYTE *)(v6 + 130) = a5;
  *(_BYTE *)(v6 + 129) = a4;
  *(_QWORD *)(v6 + 264) = a3;
  *(_QWORD *)(v6 + 272) = v5;
  *(_QWORD *)(v6 + 248) = a1;
  *(_QWORD *)(v6 + 256) = a2;
  outlined init with take of CGRect?(a3, v6 + 176);
  v7 = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 280) = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 296) = v7;
  *(_QWORD *)(v6 + 312) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v6 + 320) = swift_task_alloc();
  type metadata accessor for Shape();
  *(_QWORD *)(v6 + 328) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  outlined init with take of CGRect?(v2, v0 + 96);
  outlined init with copy of PKStrokeProperties(v3, v1, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  outlined init with take of CGRect?(v2, v0 + 136);
  if ((*(_BYTE *)(v0 + 168) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v5 = *(double *)(v0 + 216);
    v4 = *(double *)(v0 + 224);
    v7 = *(double *)(v0 + 232);
    v6 = *(double *)(v0 + 240);
  }
  else
  {
    v7 = *(double *)(v0 + 296);
    v6 = *(double *)(v0 + 304);
    v5 = *(double *)(v0 + 280);
    v4 = *(double *)(v0 + 288);
  }
  outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  swift_storeEnumTagMultiPayload();
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v8;
  *v8 = v0;
  v8[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v10(v0 + 16, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 129), *(_BYTE *)(v0 + 130), *(_QWORD *)(v0 + 320), v5, v4, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for RendererContext?);
  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (!v3)
  {
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    v4 = 0;
    goto LABEL_6;
  }
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v3);

  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  outlined init with take of CGRect?(*(_QWORD *)(v0 + 264), v0 + 96);
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized Image.renderedImage(in:)
                                                  + async function pointer to specialized Image.renderedImage(in:));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v1;
    *v1 = v0;
    v1[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return v9(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 248));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 264);
    outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for Image);
    outlined init with take of CGRect?(v3, v0 + 136);
    if ((*(_BYTE *)(v0 + 168) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      v5 = *(double *)(v0 + 216);
      v4 = *(double *)(v0 + 224);
      v7 = *(double *)(v0 + 232);
      v6 = *(double *)(v0 + 240);
    }
    else
    {
      v7 = *(double *)(v0 + 296);
      v6 = *(double *)(v0 + 304);
      v5 = *(double *)(v0 + 280);
      v4 = *(double *)(v0 + 288);
    }
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for Image);
    swift_storeEnumTagMultiPayload();
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v8;
    *v8 = v0;
    v8[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return v10(v0 + 16, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 129), *(_BYTE *)(v0 + 130), *(_QWORD *)(v0 + 320), v5, v4, v7, v6);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(void **)(v0 + 352);
  if (v1)
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v1);

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 264);
    outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for Image);
    outlined init with take of CGRect?(v4, v0 + 136);
    if ((*(_BYTE *)(v0 + 168) & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      CRRegister.wrappedValue.getter();
      v6 = *(double *)(v0 + 216);
      v5 = *(double *)(v0 + 224);
      v8 = *(double *)(v0 + 232);
      v7 = *(double *)(v0 + 240);
    }
    else
    {
      v8 = *(double *)(v0 + 296);
      v7 = *(double *)(v0 + 304);
      v6 = *(double *)(v0 + 280);
      v5 = *(double *)(v0 + 288);
    }
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 336), (uint64_t (*)(_QWORD))type metadata accessor for Image);
    swift_storeEnumTagMultiPayload();
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 360) = v9;
    *v9 = v0;
    v9[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return v10(v0 + 16, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 129), *(_BYTE *)(v0 + 130), *(_QWORD *)(v0 + 320), v6, v5, v8, v7);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  outlined init with take of CGRect?(v2, v0 + 96);
  outlined init with copy of PKStrokeProperties(v3, v1, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  outlined init with take of CGRect?(v2, v0 + 136);
  if ((*(_BYTE *)(v0 + 168) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v5 = *(double *)(v0 + 216);
    v4 = *(double *)(v0 + 224);
    v7 = *(double *)(v0 + 232);
    v6 = *(double *)(v0 + 240);
  }
  else
  {
    v7 = *(double *)(v0 + 296);
    v6 = *(double *)(v0 + 304);
    v5 = *(double *)(v0 + 280);
    v4 = *(double *)(v0 + 288);
  }
  outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 328), (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  swift_storeEnumTagMultiPayload();
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 336) = v8;
  *v8 = v0;
  v8[1] = specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v10(v0 + 16, *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_BYTE *)(v0 + 129), *(_BYTE *)(v0 + 130), *(_QWORD *)(v0 + 320), v5, v4, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 320);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for RendererContext?);
  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (!v3)
  {
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    v4 = 0;
    goto LABEL_6;
  }
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v3);

  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v13;

  *(_QWORD *)(v9 + 304) = v13;
  *(_QWORD *)(v9 + 312) = v8;
  *(_QWORD *)(v9 + 288) = a7;
  *(_QWORD *)(v9 + 296) = a8;
  *(_BYTE *)(v9 + 170) = a5;
  *(_BYTE *)(v9 + 169) = a4;
  *(_QWORD *)(v9 + 272) = a3;
  *(_QWORD *)(v9 + 280) = a6;
  *(_QWORD *)(v9 + 256) = a1;
  *(_QWORD *)(v9 + 264) = a2;
  outlined init with take of CGRect?(a3, v9 + 216);
  v11 = *(_OWORD *)(v9 + 232);
  *(_OWORD *)(v9 + 320) = *(_OWORD *)(v9 + 216);
  *(_OWORD *)(v9 + 336) = v11;
  type metadata accessor for RendererOutput();
  *(_QWORD *)(v9 + 352) = swift_task_alloc();
  *(_QWORD *)(v9 + 360) = *(_QWORD *)(a6 - 8);
  *(_QWORD *)(v9 + 368) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v5;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t, _QWORD, _QWORD);

  outlined init with take of CGRect?(*(_QWORD *)(v0 + 272), v0 + 136);
  if (*(_BYTE *)(v0 + 168) == 1)
  {
    v1 = *(_QWORD *)(v0 + 296);
    v2 = *(_QWORD *)(v0 + 264);
    v3 = type metadata accessor for Capsule();
    *(_QWORD *)(v0 + 40) = v3;
    *(_QWORD *)(v0 + 48) = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v3);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
    v16 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))(**(int **)(v1 + 24) + *(_QWORD *)(v1 + 24));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 376) = v5;
    *v5 = v0;
    v5[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return v16(v0 + 16, *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 296));
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 272);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 16))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 280));
    outlined init with take of CGRect?(v7, v0 + 176);
    if ((*(_BYTE *)(v0 + 208) & 1) != 0)
    {
      v8 = (*(double (**)(_QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 280));
      v10 = v9;
      v12 = v11;
      v14 = v13;
    }
    else
    {
      v12 = *(double *)(v0 + 336);
      v14 = *(double *)(v0 + 344);
      v8 = *(double *)(v0 + 320);
      v10 = *(double *)(v0 + 328);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 280));
    type metadata accessor for RendererOutput();
    swift_storeEnumTagMultiPayload();
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v15;
    *v15 = v0;
    v15[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 56, *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 169), *(_BYTE *)(v0 + 170), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), v8, v10, v12, v14);
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;

  v1 = *(void **)(v0 + 384);
  if (v1)
  {
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v1);

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v2);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 272);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 16))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 280));
    outlined init with take of CGRect?(v4, v0 + 176);
    if ((*(_BYTE *)(v0 + 208) & 1) != 0)
    {
      v5 = (*(double (**)(_QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 280));
      v7 = v6;
      v9 = v8;
      v11 = v10;
    }
    else
    {
      v9 = *(double *)(v0 + 336);
      v11 = *(double *)(v0 + 344);
      v5 = *(double *)(v0 + 320);
      v7 = *(double *)(v0 + 328);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 280));
    type metadata accessor for RendererOutput();
    swift_storeEnumTagMultiPayload();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v12;
    *v12 = v0;
    v12[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
    return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 56, *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_BYTE *)(v0 + 169), *(_BYTE *)(v0 + 170), *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288), v5, v7, v9, v11);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 352);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + 56, v0 + 96, &demangling cache variable for type metadata for RendererContext?);
  v1 = *(_QWORD *)(v0 + 120);
  if (!v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, &demangling cache variable for type metadata for RendererContext?);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  if (!v3)
  {
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
    v4 = 0;
    goto LABEL_6;
  }
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v3);

  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 16;
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  _QWORD *v19;

  *(double *)(v11 + 24) = a9;
  *(double *)(v11 + 32) = a10;
  *(double *)(v11 + 40) = a11;
  *(_BYTE *)(v11 + 48) = 0;
  *(double *)(v11 + 16) = a8;
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 56) = v19;
  *v19 = v11;
  v19[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(a1, a2, v11 + 16, a3, a4, a5, a6, a7);
}

uint64_t CanvasElementPDFRenderer.__allocating_init(bounds:scale:)(double a1, double a2, double a3, double a4, double a5)
{
  double *v10;

  type metadata accessor for PDFRenderer();
  v10 = (double *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  return specialized CanvasElementPDFRenderer.__allocating_init(renderer:)((uint64_t)v10);
}

uint64_t CanvasElementPDFRenderer.__allocating_init(bounds:format:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;

  type metadata accessor for PDFRenderer();
  v10 = swift_allocObject();
  *(double *)(v10 + 16) = a2;
  *(double *)(v10 + 24) = a3;
  *(double *)(v10 + 32) = a4;
  *(double *)(v10 + 40) = a5;
  *(_QWORD *)(v10 + 48) = 0x3FF0000000000000;
  v11 = specialized CanvasElementPDFRenderer.__allocating_init(renderer:)(v10);

  return v11;
}

uint64_t CanvasElementPDFRenderer.pdfData(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CanvasElementImageRenderer.image(from:bounds:completion:)(a1, a2, a3, a4, (void (*)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double))
{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t, double, double, double, double);
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD v29[5];
  _BYTE v30[48];

  v24 = a5;
  outlined init with take of CGRect?(a2, (uint64_t)v29);
  v9 = *(double *)v29;
  v10 = *(double *)&v29[1];
  v11 = *(double *)&v29[2];
  v12 = *(double *)&v29[3];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  outlined init with take of CGRect?(a2, (uint64_t)v30);
  if ((v30[32] & 1) != 0)
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v9 = v25;
    v10 = v26;
    v11 = v27;
    v12 = v28;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v25 = v9;
    v26 = v10;
    v27 = v11;
    v28 = v12;
  }
  v24(v21, a1, a3, a4, v9, v10, v11, v12);
  return outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  double *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v40[4];
  _BOOL4 v41;
  _BYTE *v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a3;
  v50 = a4;
  v47 = a2;
  v45 = a1;
  v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v12 = *(_QWORD *)(v46 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v46, v14);
  v15 = type metadata accessor for Paper();
  v44 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v44 + 64);
  MEMORY[0x1E0C80A78](v15, v17);
  v18 = &v40[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v40[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v42 = v22;
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_currentTraitCollection);
  v25 = objc_msgSend(v24, sel_layoutDirection);

  v43 = v25 == (id)1;
  v26 = objc_msgSend(v23, sel_currentTraitCollection);
  v27 = objc_msgSend(v26, sel_userInterfaceStyle);

  v41 = v27 == (id)2;
  v28 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v22, 1, 1, v28);
  outlined init with copy of PKStrokeProperties(v45, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  v29 = &v40[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = v46;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v29, v47, v46);
  v31 = (*(unsigned __int8 *)(v44 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v32 = (v16 + *(unsigned __int8 *)(v12 + 80) + v31) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v33 = (v13 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (char *)swift_allocObject();
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = 0;
  *((_QWORD *)v34 + 4) = v48;
  outlined init with take of Paper((uint64_t)v18, (uint64_t)&v34[v31]);
  (*(void (**)(char *, _BYTE *, uint64_t))(v12 + 32))(&v34[v32], v29, v30);
  v35 = (double *)&v34[v33];
  *v35 = a5;
  v35[1] = a6;
  v35[2] = a7;
  v35[3] = a8;
  *((_BYTE *)v35 + 32) = v41;
  *((_BYTE *)v35 + 33) = v43;
  v36 = &v34[(v33 + 41) & 0xFFFFFFFFFFFFFFF8];
  v37 = v50;
  *(_QWORD *)v36 = v49;
  *((_QWORD *)v36 + 1) = v37;
  swift_retain();
  swift_retain();
  v38 = (uint64_t)v42;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v42, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:), (uint64_t)v34);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (uint64_t)&unk_1EA840620, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:));
}

uint64_t CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  _BOOL4 v57;
  char *v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v68 = a7;
  v66 = a6;
  v67 = a8;
  v59 = a5;
  v70 = a3;
  v71 = a4;
  v63 = a1;
  v64 = a2;
  v72 = a14;
  v65 = a13;
  v19 = type metadata accessor for Capsule();
  v61 = *(_QWORD *)(v19 - 8);
  v62 = v19;
  v20 = *(_QWORD *)(v61 + 64);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v56 - v22;
  v56 = (char *)&v56 - v22;
  v24 = *(_QWORD *)(a5 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  MEMORY[0x1E0C80A78](v26, v27);
  v28 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v56 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v32;
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_currentTraitCollection);
  v35 = objc_msgSend(v34, sel_layoutDirection);

  v60 = v35 == (id)1;
  v36 = objc_msgSend(v33, sel_currentTraitCollection);
  v37 = objc_msgSend(v36, sel_userInterfaceStyle);

  v57 = v37 == (id)2;
  v38 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v32, 1, 1, v38);
  v39 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v28, v63, v59);
  v40 = v61;
  v41 = v23;
  v42 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v41, v64, v62);
  v43 = (*(unsigned __int8 *)(v24 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v44 = (v25 + *(unsigned __int8 *)(v40 + 80) + v43) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  v45 = (v20 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v46 = (char *)swift_allocObject();
  *((_QWORD *)v46 + 2) = 0;
  *((_QWORD *)v46 + 3) = 0;
  v47 = v39;
  v48 = v66;
  *((_QWORD *)v46 + 4) = v39;
  *((_QWORD *)v46 + 5) = v48;
  v49 = v69;
  v50 = v67;
  *((_QWORD *)v46 + 6) = v68;
  *((_QWORD *)v46 + 7) = v50;
  *((_QWORD *)v46 + 8) = v49;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v46[v43], v28, v47);
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&v46[v44], v56, v42);
  v51 = (double *)&v46[v45];
  *v51 = a9;
  v51[1] = a10;
  v51[2] = a11;
  v51[3] = a12;
  *((_BYTE *)v51 + 32) = v57;
  *((_BYTE *)v51 + 33) = v60;
  v52 = &v46[(v45 + 41) & 0xFFFFFFFFFFFFFFF8];
  v53 = v71;
  *(_QWORD *)v52 = v70;
  *((_QWORD *)v52 + 1) = v53;
  swift_retain();
  swift_retain();
  v54 = (uint64_t)v58;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v58, v72, (uint64_t)v46);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  _QWORD *v12;
  _QWORD *v21;
  uint64_t (*v23)(uint64_t, uint64_t, char, char, double, double, double, double);
  uint64_t v24;
  uint64_t v25;

  v12[2] = v24;
  v12[3] = v25;
  v23 = (uint64_t (*)(uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                                             + async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:));
  v21 = (_QWORD *)swift_task_alloc();
  v12[4] = v21;
  *v21 = v12;
  v21[1] = specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return v23(a9, a10, a11, a12, a1, a2, a3, a4);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, unint64_t))(v0 + 16))(v2, v1);
  outlined consume of Data?(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  _QWORD *v12;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v12[2] = v23;
  v12[3] = v24;
  v21 = (_QWORD *)swift_task_alloc();
  v12[4] = v21;
  *v21 = v12;
  v21[1] = closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(a9, a10, a11, a12, v25, v26, v27, v28, a1, a2, a3, a4);
}

uint64_t closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 152) = v8;
  *(_BYTE *)(v9 + 193) = a4;
  *(_BYTE *)(v9 + 192) = a3;
  *(double *)(v9 + 136) = a7;
  *(double *)(v9 + 144) = a8;
  *(double *)(v9 + 120) = a5;
  *(double *)(v9 + 128) = a6;
  *(_QWORD *)(v9 + 104) = a1;
  *(_QWORD *)(v9 + 112) = a2;
  *(_QWORD *)(v9 + 160) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v9 + 168) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(_QWORD **)(v0 + 168);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
  *(_QWORD *)(v0 + 176) = v2;
  *v1 = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  v3 = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v4;
  *v4 = v0;
  v4[1] = specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  return v6(v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 192), *(_BYTE *)(v0 + 193), *(_QWORD *)(v0 + 168), *(double *)(v0 + 120), *(double *)(v0 + 128), *(double *)(v0 + 136), *(double *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(void **)(v0 + 176);
    objc_msgSend(v1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    swift_dynamicCast();
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
  }
  else
  {

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    v3 = 0;
    v2 = 0xF000000000000000;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v2);
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v13 + 176) = a8;
  *(_QWORD *)(v13 + 184) = v12;
  *(_QWORD *)(v13 + 160) = a6;
  *(_QWORD *)(v13 + 168) = a7;
  *(_QWORD *)(v13 + 152) = a5;
  *(_BYTE *)(v13 + 225) = a4;
  *(_BYTE *)(v13 + 224) = a3;
  *(double *)(v13 + 136) = a11;
  *(double *)(v13 + 144) = a12;
  *(double *)(v13 + 120) = a9;
  *(double *)(v13 + 128) = a10;
  *(_QWORD *)(v13 + 104) = a1;
  *(_QWORD *)(v13 + 112) = a2;
  *(_QWORD *)(v13 + 192) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v13 + 200) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(v0 + 200);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
  *(_QWORD *)(v0 + 208) = v2;
  *v1 = v2;
  swift_storeEnumTagMultiPayload();
  v3 = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v4;
  *v4 = v0;
  v4[1] = CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_BYTE *)(v0 + 224), *(_BYTE *)(v0 + 225), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(double *)(v0 + 120), *(double *)(v0 + 128), *(double *)(v0 + 136), *(double *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(void **)(v0 + 208);
    objc_msgSend(v1, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    swift_dynamicCast();
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
  }
  else
  {

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
    v3 = 0;
    v2 = 0xF000000000000000;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v2);
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _QWORD v29[5];
  _BYTE v30[48];

  v24 = a5;
  outlined init with take of CGRect?(a2, (uint64_t)v29);
  v9 = *(double *)v29;
  v10 = *(double *)&v29[1];
  v11 = *(double *)&v29[2];
  v12 = *(double *)&v29[3];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a1, v13);
  outlined init with take of CGRect?(a2, (uint64_t)v30);
  if ((v30[32] & 1) != 0)
  {
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v9 = v25;
    v10 = v26;
    v11 = v27;
    v12 = v28;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    v25 = v9;
    v26 = v10;
    v27 = v11;
    v28 = v12;
  }
  specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)((uint64_t)v21, a1, a3, a4, v24, v9, v10, v11, v12);
  return outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 152) = a4;
  *(_QWORD *)(v7 + 160) = v6;
  *(_BYTE *)(v7 + 50) = a6;
  *(_BYTE *)(v7 + 49) = a5;
  *(_QWORD *)(v7 + 136) = a2;
  *(_QWORD *)(v7 + 144) = a3;
  *(_QWORD *)(v7 + 128) = a1;
  outlined init with take of CGRect?(a3, v7 + 56);
  *(_OWORD *)(v7 + 168) = *(_OWORD *)(v7 + 56);
  *(_OWORD *)(v7 + 184) = *(_OWORD *)(v7 + 72);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(_QWORD *)(v7 + 200) = v8;
  *(_QWORD *)(v7 + 208) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 216) = swift_task_alloc();
  type metadata accessor for Paper();
  *(_QWORD *)(v7 + 224) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _QWORD *v19;
  __int128 v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double);

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  lazy protocol witness table accessor for type Paper and conformance Paper();
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v2);
  outlined init with take of CGRect?(v4, v0 + 16);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 200);
  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    v9 = (double *)(v0 + 96);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v10 = (double *)(v0 + 104);
    v11 = (double *)(v0 + 112);
    v12 = (double *)(v0 + 120);
  }
  else
  {
    v9 = (double *)(v0 + 168);
    v21 = *(_OWORD *)(v0 + 168);
    v12 = (double *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 192);
    v11 = (double *)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 184);
    v10 = (double *)(v0 + 176);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    *(_OWORD *)(v0 + 96) = v21;
    *(_QWORD *)(v0 + 112) = v14;
    *(_QWORD *)(v0 + 120) = v13;
  }
  v15 = *v9;
  v16 = *v10;
  v17 = *v11;
  v18 = *v12;
  v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:) + async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:));
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v19;
  *v19 = v0;
  v19[1] = CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:);
  return v22(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 152), *(_BYTE *)(v0 + 49), *(_BYTE *)(v0 + 50), v15, v16, v17, v18);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 224);
  v3 = *v0;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  double *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _BOOL4 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v63 = a4;
  v64 = a5;
  v59 = a2;
  v60 = a3;
  v58 = a1;
  v13 = type metadata accessor for URL();
  v65 = *(_QWORD *)(v13 - 8);
  v66 = v13;
  v61 = *(_QWORD *)(v65 + 64);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = v16;
  v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v55 = *(_QWORD *)(v57 - 8);
  v17 = *(_QWORD *)(v55 + 64);
  MEMORY[0x1E0C80A78](v57, v18);
  v50 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Paper();
  v54 = *(_QWORD *)(v19 - 8);
  v20 = *(_QWORD *)(v54 + 64);
  MEMORY[0x1E0C80A78](v19, v21);
  v49 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v25;
  v26 = (void *)objc_opt_self();
  v27 = objc_msgSend(v26, sel_currentTraitCollection);
  v28 = objc_msgSend(v27, sel_layoutDirection);

  v56 = v28 == (id)1;
  v29 = objc_msgSend(v26, sel_currentTraitCollection);
  v30 = objc_msgSend(v29, sel_userInterfaceStyle);

  v52 = v30 == (id)2;
  v31 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v25, 1, 1, v31);
  outlined init with copy of PKStrokeProperties(v58, (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  v32 = v55;
  v33 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))((char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v59, v57);
  v34 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v16, v60, v66);
  v35 = (*(unsigned __int8 *)(v54 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v36 = (v20 + *(unsigned __int8 *)(v32 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v37 = (v17 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (*(unsigned __int8 *)(v34 + 80) + v37 + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  v39 = v38 + v61;
  v40 = (v38 + v61 + 9) & 0xFFFFFFFFFFFFFFF8;
  v41 = (char *)swift_allocObject();
  *((_QWORD *)v41 + 2) = 0;
  *((_QWORD *)v41 + 3) = 0;
  *((_QWORD *)v41 + 4) = v62;
  outlined init with take of Paper(v49, (uint64_t)&v41[v35]);
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v41[v36], v50, v33);
  v42 = (double *)&v41[v37];
  *v42 = a6;
  v42[1] = a7;
  v42[2] = a8;
  v42[3] = a9;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(&v41[v38], v51, v66);
  v43 = &v41[v39];
  *v43 = v52;
  v43[1] = v56;
  v44 = &v41[v40];
  v45 = v64;
  *(_QWORD *)v44 = v63;
  *((_QWORD *)v44 + 1) = v45;
  swift_retain();
  swift_retain();
  v46 = (uint64_t)v53;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v53, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), (uint64_t)v41);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v78 = a8;
  v68 = a6;
  v80 = a4;
  v81 = a5;
  v73 = a2;
  v74 = a3;
  v72 = a1;
  v76 = a7;
  v77 = a13;
  v18 = type metadata accessor for URL();
  v83 = *(_QWORD *)(v18 - 8);
  v84 = v18;
  v75 = *(_QWORD *)(v83 + 64);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v21;
  v70 = type metadata accessor for Capsule();
  v82 = *(_QWORD *)(v70 - 8);
  v22 = *(_QWORD *)(v82 + 64);
  MEMORY[0x1E0C80A78](v70, v23);
  v25 = (char *)&v62 - v24;
  v64 = (char *)&v62 - v24;
  v66 = *(_QWORD *)(a6 - 8);
  v26 = *(_QWORD *)(v66 + 64);
  MEMORY[0x1E0C80A78](v27, v28);
  v63 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v32;
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend(v33, sel_currentTraitCollection);
  v35 = objc_msgSend(v34, sel_layoutDirection);

  v71 = v35 == (id)1;
  v36 = objc_msgSend(v33, sel_currentTraitCollection);
  v37 = objc_msgSend(v36, sel_userInterfaceStyle);

  v67 = v37 == (id)2;
  v38 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v32, 1, 1, v38);
  v39 = v66;
  v40 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))((char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v72, v68);
  v41 = v82;
  v42 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v25, v73, v70);
  v43 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v21, v74, v84);
  v44 = v39;
  v45 = (*(unsigned __int8 *)(v39 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v46 = (v26 + v45 + *(unsigned __int8 *)(v41 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  v47 = (v22 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (*(unsigned __int8 *)(v43 + 80) + v47 + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v49 = v48 + v75;
  v50 = (v48 + v75 + 9) & 0xFFFFFFFFFFFFFFF8;
  v51 = (char *)swift_allocObject();
  *((_QWORD *)v51 + 2) = 0;
  *((_QWORD *)v51 + 3) = 0;
  v52 = v40;
  v53 = v76;
  *((_QWORD *)v51 + 4) = v40;
  *((_QWORD *)v51 + 5) = v53;
  v54 = v79;
  v55 = v77;
  *((_QWORD *)v51 + 6) = v78;
  *((_QWORD *)v51 + 7) = v55;
  *((_QWORD *)v51 + 8) = v54;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v51[v45], v63, v52);
  (*(void (**)(char *, char *, uint64_t))(v82 + 32))(&v51[v46], v64, v42);
  v56 = (double *)&v51[v47];
  *v56 = a9;
  v56[1] = a10;
  v56[2] = a11;
  v56[3] = a12;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&v51[v48], v65, v84);
  v57 = &v51[v49];
  *v57 = v67;
  v57[1] = v71;
  v58 = &v51[v50];
  v59 = v81;
  *(_QWORD *)v58 = v80;
  *((_QWORD *)v58 + 1) = v59;
  swift_retain();
  swift_retain();
  v60 = (uint64_t)v69;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5Tm((uint64_t)v69, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:), (uint64_t)v51);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v60, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _QWORD *v12;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double);
  char v25;
  uint64_t v26;
  uint64_t v27;

  v12[2] = v26;
  v12[3] = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v21 = swift_task_alloc();
  v12[4] = v21;
  v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:) + async function pointer to specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:));
  v22 = (_QWORD *)swift_task_alloc();
  v12[5] = v22;
  *v22 = v12;
  v22[1] = specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:);
  return v24(v21, a9, a10, a11, a12, v25, a1, a2, a3, a4);
}

uint64_t specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  outlined destroy of StocksKitCurrencyCache.Provider?(v1, &demangling cache variable for type metadata for URL?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _QWORD *v12;
  uint64_t v19;
  _QWORD *v20;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v12[2] = v25;
  v12[3] = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v19 = swift_task_alloc();
  v12[4] = v19;
  v20 = (_QWORD *)swift_task_alloc();
  v12[5] = v20;
  *v20 = v12;
  v20[1] = closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:);
  return CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(v19, a9, a10, a11, a12, v24, v27, v28, a1, a2, a3, a4);
}

uint64_t closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v11 + 177) = a6;
  *(_BYTE *)(v11 + 176) = a5;
  *(_QWORD *)(v11 + 112) = a4;
  *(_QWORD *)(v11 + 120) = v10;
  *(double *)(v11 + 96) = a9;
  *(double *)(v11 + 104) = a10;
  *(double *)(v11 + 80) = a7;
  *(double *)(v11 + 88) = a8;
  *(_QWORD *)(v11 + 64) = a2;
  *(_QWORD *)(v11 + 72) = a3;
  *(_QWORD *)(v11 + 56) = a1;
  *(_QWORD *)(v11 + 128) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v11 + 136) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = type metadata accessor for URL();
  *(_QWORD *)(v0 + 144) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v0 + 152) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 160) = v5;
  v5(v1, v2, v3);
  swift_storeEnumTagMultiPayload();
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v6;
  *v6 = v0;
  v6[1] = specialized CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:);
  return v8(v0 + 16, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 176), *(_BYTE *)(v0 + 177), *(_QWORD *)(v0 + 136), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 144));
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 152) + 56))(*(_QWORD *)(v0 + 56), v2, 1, *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v13 + 144) = v16;
  *(_QWORD *)(v13 + 152) = v12;
  *(_QWORD *)(v13 + 128) = a8;
  *(_QWORD *)(v13 + 136) = v15;
  *(_BYTE *)(v13 + 209) = a6;
  *(_BYTE *)(v13 + 208) = a5;
  *(_QWORD *)(v13 + 112) = a4;
  *(_QWORD *)(v13 + 120) = a7;
  *(double *)(v13 + 96) = a11;
  *(double *)(v13 + 104) = a12;
  *(double *)(v13 + 80) = a9;
  *(double *)(v13 + 88) = a10;
  *(_QWORD *)(v13 + 64) = a2;
  *(_QWORD *)(v13 + 72) = a3;
  *(_QWORD *)(v13 + 56) = a1;
  *(_QWORD *)(v13 + 160) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v13 + 168) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = type metadata accessor for URL();
  *(_QWORD *)(v0 + 176) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v0 + 184) = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 192) = v5;
  v5(v1, v2, v3);
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 200) = v6;
  *v6 = v0;
  v6[1] = CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:);
  return CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(v0 + 16, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 208), *(_BYTE *)(v0 + 209), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 176));
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 56))(*(_QWORD *)(v0 + 56), v2, 1, *(_QWORD *)(v0 + 176));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CanvasElementImageRenderer.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t CanvasElementImageRenderer.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t type metadata accessor for UIGraphicsImageRendererFormat()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIGraphicsImageRendererFormat;
  if (!lazy cache variable for type metadata for UIGraphicsImageRendererFormat)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIGraphicsImageRendererFormat);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Paper and conformance Paper()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Paper and conformance Paper;
  if (!lazy protocol witness table cache variable for type Paper and conformance Paper)
  {
    v1 = type metadata accessor for Paper();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Paper, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper);
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1[4] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v19 = v1[2];
  v18 = v1[3];
  v17 = v1[8];
  v8 = (uint64_t)v1 + v4;
  v9 = (uint64_t)v1 + v7;
  v10 = (double *)((char *)v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  LOBYTE(v4) = *((_BYTE *)v10 + 32);
  LOBYTE(v5) = *((_BYTE *)v10 + 33);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(v11, v12, v13, v14, a1, v19, v18, v17, v8, v9, v4, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 48) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 56) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_OWORD **)(*v0 + 48);
  v5 = *v0;
  swift_task_dealloc();
  v3 = *(_OWORD *)(v1 + 32);
  *v2 = *(_OWORD *)(v1 + 16);
  v2[1] = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v2[3] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  return swift_task_switch();
}

uint64_t specialized Image.renderedImage(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  if (specialized ContainerCanvasElement.hasMarkup(in:)(*(_QWORD *)(v0 + 48)))
    goto LABEL_4;
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  v2 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 24), &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_4:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = specialized Image.renderedImage(in:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  if (specialized ContainerCanvasElement.hasMarkup(in:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32)))
  {
    goto LABEL_4;
  }
  v1 = *(_QWORD *)(v0 + 40);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  v2 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 40), &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_4:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 24));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = specialized Image.renderedImage(in:);
  return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 1);
}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 24);
  v6 = *v1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  (*(void (**)(_QWORD, _QWORD))(v3[5] + 8))(v3[6], v3[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *v1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  (*(void (**)(_QWORD, _QWORD))(v3[6] + 8))(v3[7], v3[3]);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

uint64_t specialized CanvasElementPDFRenderer.__allocating_init(renderer:)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  _BYTE v5[40];
  _QWORD v6[5];

  v6[3] = type metadata accessor for PDFRenderer();
  v6[4] = &protocol witness table for PDFRenderer;
  v6[0] = a1;
  type metadata accessor for CanvasElementPDFRenderer();
  v2 = swift_allocObject();
  outlined init with copy of FindResult((uint64_t)v6, (uint64_t)v5);
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = PKIsSixChannelBlendEnabledInPaper();
  outlined init with copy of FindResult((uint64_t)v5, v2 + 16);
  v3 = objc_msgSend((id)objc_opt_self(), sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  *(_BYTE *)(v2 + 73) = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v2;
}

uint64_t objectdestroyTm_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Capsule();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v2 = v0[4];
  v3 = v0[7];
  v23 = v0[5];
  v24 = v0[6];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 41) & 0xFFFFFFFFFFFFF8;
  v11 = (uint64_t)v0 + v5;
  v12 = (uint64_t)v0 + v8;
  v13 = (double *)((char *)v0 + v9);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = *((_BYTE *)v13 + 32);
  LOBYTE(v5) = *((_BYTE *)v13 + 33);
  v19 = swift_task_alloc();
  v20 = *(_OWORD *)((char *)v0 + v10);
  *(_QWORD *)(v1 + 16) = v19;
  *(_QWORD *)v19 = v1;
  *(_QWORD *)(v19 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_OWORD *)(v19 + 16) = v20;
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v19 + 32) = v21;
  *v21 = v19;
  v21[1] = closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(v11, v12, v18, v5, v2, v23, v24, v3, v14, v15, v16, v17);
}

uint64_t sub_1DDBA94AC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v12 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v12 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v11 = type metadata accessor for Capsule();
  v4 = *(_QWORD *)(v11 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v2, v12);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v11);
  (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v9, v7);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(v1[4] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v22 = v1[2];
  v21 = v1[3];
  v20 = v1[8];
  v19 = (uint64_t)v1 + v4;
  v11 = (uint64_t)v1 + v7;
  v12 = *(double *)((char *)v1 + v8);
  v13 = *(double *)((char *)v1 + v8 + 8);
  v14 = *(double *)((char *)v1 + v8 + 16);
  v15 = *(double *)((char *)v1 + v8 + 24);
  v16 = (uint64_t)v1 + v10;
  LOBYTE(v7) = *((_BYTE *)v1 + v10 + *(_QWORD *)(v9 + 64));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(v12, v13, v14, v15, a1, v22, v21, v20, v19, v11, v16, v7);
}

id sub_1DDBA975C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 56);
  *a2 = v4;
  return v4;
}

id sub_1DDBA97A4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 64);
  *a2 = v4;
  return v4;
}

uint64_t sub_1DDBA97EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 72);
  return result;
}

uint64_t sub_1DDBA9830(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 72) = v2;
  return result;
}

uint64_t type metadata accessor for CanvasElementRenderer()
{
  return objc_opt_self();
}

uint64_t method lookup function for CanvasElementRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of CanvasElementRenderer.backgroundColor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CanvasElementRenderer.tintColor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CanvasElementRenderer.sixChannelBlending.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t type metadata accessor for CanvasElementImageRenderer()
{
  return objc_opt_self();
}

uint64_t method lookup function for CanvasElementImageRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image(from:bounds:darkMode:isRTL:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = *a2;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 216)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 216));
  v9 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_BYTE *)a2 + 32);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 56) = v12;
  *(_OWORD *)(v5 + 16) = v14;
  *(_QWORD *)(v5 + 32) = v9;
  *(_QWORD *)(v5 + 40) = v10;
  *(_BYTE *)(v5 + 48) = v11;
  *v12 = v5;
  v12[1] = CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v15(a1, v5 + 16, a3, a4);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  __int128 v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = *a3;
  v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v9 + 232) + *(_QWORD *)(*(_QWORD *)v9 + 232));
  v15 = *((_QWORD *)a3 + 2);
  v16 = *((_QWORD *)a3 + 3);
  v17 = *((_BYTE *)a3 + 32);
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 56) = v18;
  *(_OWORD *)(v10 + 16) = v20;
  *(_QWORD *)(v10 + 32) = v15;
  *(_QWORD *)(v10 + 40) = v16;
  *(_BYTE *)(v10 + 48) = v17;
  *v18 = v10;
  v18[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v21(a1, a2, v10 + 16, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v26;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double);

  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(**(int **)(*(_QWORD *)v12 + 240) + *(_QWORD *)(*(_QWORD *)v12 + 240));
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v26;
  *v26 = v13;
  v26[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t type metadata accessor for CanvasElementPDFRenderer()
{
  return objc_opt_self();
}

uint64_t method lookup function for CanvasElementPDFRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CanvasElementImageRenderer.image(from:bounds:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v4)(uint64_t, _OWORD *);
  __int128 v5;
  _OWORD v7[2];
  char v8;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 208);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = v3;
  return v4(a1, v7);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v26;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double);

  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(**(int **)(*(_QWORD *)v12 + 224) + *(_QWORD *)(*(_QWORD *)v12 + 224));
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v26;
  *v26 = v13;
  v26[1] = dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:);
  return v28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t (*v4)(uint64_t, _OWORD *);
  __int128 v5;
  _OWORD v7[2];
  char v8;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 232);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = v3;
  return v4(a1, v7);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  __int128 v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = *a3;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v6 + 240)
                                                                                     + *(_QWORD *)(*(_QWORD *)v6 + 240));
  v13 = *((_QWORD *)a3 + 2);
  v14 = *((_QWORD *)a3 + 3);
  v15 = *((_BYTE *)a3 + 32);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 56) = v16;
  *(_OWORD *)(v7 + 16) = v18;
  *(_QWORD *)(v7 + 32) = v13;
  *(_QWORD *)(v7 + 40) = v14;
  *(_BYTE *)(v7 + 48) = v15;
  *v16 = v7;
  v16[1] = dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:);
  return v19(a1, a2, v7 + 16, a4, a5, a6);
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF(from:bounds:to:darkMode:isRTL:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:darkMode:isRTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v26;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, uint64_t, uint64_t);

  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v14 + 256) + *(_QWORD *)(*(_QWORD *)v14 + 256));
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 16) = v26;
  *v26 = v15;
  v26[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 24) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 32) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD **)(*v0 + 24);
  v4 = *v0;
  swift_task_dealloc();
  *v2 = *(_QWORD *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1DDBAA0B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSi_TG5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSo6CGRectV_TG5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR10Foundation4DataV_So6CGSizeVtSg_Tg5Tu))(a1, v4);
}

uint64_t sub_1DDBAA224()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = (int *)type metadata accessor for Paper();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v28 - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (v7 + *(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v27 = v8;
  swift_unknownObjectRelease();
  swift_release();
  v11 = v0 + v3;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v11 + v1[5], v12);
  v14 = v11 + v1[6];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v11 + v1[7];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v11 + v1[8];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = v11 + v1[9];
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v11 + v1[10];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  v24 = v11 + v1[11];
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v28);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v10, v27);
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v21;

  v3 = *(_QWORD *)(type metadata accessor for Paper() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v1[3];
  v21 = v1[2];
  v12 = v1[4];
  v13 = *(double *)((char *)v1 + v8);
  v14 = *(double *)((char *)v1 + v8 + 8);
  v15 = *(double *)((char *)v1 + v8 + 16);
  v16 = *(double *)((char *)v1 + v8 + 24);
  v17 = (uint64_t)v1 + v10;
  v18 = *((_BYTE *)v1 + v10 + *(_QWORD *)(v9 + 64));
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return specialized closure #1 in CanvasElementPDFRenderer.writePDF<A, B>(_:in:bounds:to:completion:)(v13, v14, v15, v16, a1, v21, v11, v12, (uint64_t)v1 + v4, (uint64_t)v1 + v7, v17, v18);
}

uint64_t sub_1DDBAA620()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for Paper();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  v8 = v0 + v3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v8 + v1[5], v9);
  v11 = v8 + v1[6];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v8 + v1[7];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v8 + v1[8];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v8 + v1[9];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v8 + v1[10];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v8 + v1[11];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  char v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t (*v21)(uint64_t, uint64_t, char, char, double, double, double, double);

  v2 = *(_QWORD *)(type metadata accessor for Paper() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 41) & 0xFFFFFFFFFFFFF8;
  v9 = v0 + v6;
  v10 = v0 + v7;
  v11 = *(double *)v10;
  v12 = *(double *)(v10 + 8);
  v13 = *(double *)(v10 + 16);
  v14 = *(double *)(v10 + 24);
  v15 = *(_BYTE *)(v10 + 32);
  v16 = *(_BYTE *)(v10 + 33);
  v17 = swift_task_alloc();
  v18 = *(_OWORD *)(v0 + v8);
  *(_QWORD *)(v1 + 16) = v17;
  *(_QWORD *)v17 = v1;
  *(_QWORD *)(v17 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_OWORD *)(v17 + 16) = v18;
  v21 = (uint64_t (*)(uint64_t, uint64_t, char, char, double, double, double, double))((char *)&async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                                             + async function pointer to specialized CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:darkMode:isRTL:));
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v17 + 32) = v19;
  *v19 = v17;
  v19[1] = specialized closure #1 in CanvasElementPDFRenderer.pdfData<A, B>(_:in:bounds:completion:);
  return v21(v0 + v3, v9, v15, v16, v11, v12, v13, v14);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

void closure #1 in variable initialization expression of CompactTextStyleView.image()
{
  uint64_t v0;
  double v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v0 = *MEMORY[0x1E0DC4A88];
  v1 = *MEMORY[0x1E0DC1448];
  v2 = (void *)*MEMORY[0x1E0DC4920];
  v3 = (void *)objc_opt_self();
  v4 = v2;
  v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  v6 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v0, v1);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v5);

  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v8, 1);

  v10 = v9;
  v11 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF4EB00);
  v12 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {

    return;
  }
LABEL_7:
  __break(1u);
}

void CompactTextStyleView.didTapSelf()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  objc_class *v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  objc_super v17;
  CGRect v18;
  CGRect v19;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))&v0[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_viewControllerProvider])();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView];
    v5 = (objc_class *)type metadata accessor for TextStyleViewController();
    v6 = (char *)objc_allocWithZone(v5);
    *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_contentViewMargin] = 0x4028000000000000;
    *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize] = xmmword_1DDF353E0;
    *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_textStyleView] = v4;
    v17.receiver = v6;
    v17.super_class = v5;
    v7 = v4;
    v8 = objc_msgSendSuper2(&v17, sel_initWithNibName_bundle_, 0, 0);
    objc_msgSend(v8, sel_setModalPresentationStyle_, 7, v17.receiver, v17.super_class);
    v9 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, sel_setSourceView_, v1);

    }
    v11 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v1, sel_bounds);
      v19 = CGRectInset(v18, -2.0, -2.0);
      objc_msgSend(v12, sel_setSourceRect_, v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);

    }
    v13 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, sel_setDelegate_, v1);

    }
    v15 = objc_msgSend(v8, sel_popoverPresentationController);
    if (v15)
    {
      v16 = v15;
      objc_msgSend(v15, sel__setIgnoresKeyboardNotifications_, 1);

    }
    objc_msgSend(v3, sel_presentViewController_animated_completion_, v8, 1, 0);

  }
}

void CompactTextStyleView.selectedTextStyles.setter(uint64_t a1, _QWORD *a2)
{
  char *v2;
  objc_class *ObjectType;
  void *v6;
  char **v7;
  id v8;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView] + *a2) = a1;
  TextStyleView.updateUI()();
  v9.receiver = v2;
  v9.super_class = ObjectType;
  LODWORD(a2) = objc_msgSendSuper2(&v9, sel_isHighlighted);
  v6 = (void *)objc_opt_self();
  v7 = &selRef_secondarySystemFillColor;
  if (!(_DWORD)a2)
    v7 = &selRef_quaternarySystemFillColor;
  v8 = objc_msgSend(v6, *v7);
  objc_msgSend(v2, sel_setBackgroundColor_, v8);

}

uint64_t type metadata accessor for CompactTextStyleView()
{
  return objc_opt_self();
}

uint64_t protocol witness for TextStyleWidget.selectedTextStyles.getter in conformance CompactTextStyleView()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit20CompactTextStyleView_textStyleView)
                   + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles);
}

void protocol witness for TextStyleWidget.selectedTextStyles.setter in conformance CompactTextStyleView(uint64_t a1)
{
  CompactTextStyleView.selectedTextStyles.setter(a1, &OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles);
}

void protocol witness for TextStyleWidget.allowedTextStyles.setter in conformance CompactTextStyleView(uint64_t a1)
{
  CompactTextStyleView.selectedTextStyles.setter(a1, &OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles);
}

Swift::Void __swiftcall CanvasGenerationTool.generationTool(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  char v4;
  char *v5;
  char *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  unint64_t v33;
  id v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38[5];

  v2 = v1;
  v38[3] = (uint64_t)&type metadata for PencilAndPaperFeatureFlags;
  v38[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v38[0]) = 2;
  v4 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  if ((v4 & 1) != 0)
  {
    v5 = &v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas];
    v6 = (char *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v8)
        goto LABEL_40;
      v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      if (*(_QWORD *)(*v9 + 16) || *(_QWORD *)(v9[1] + 16))
      {
        if (one-time initialization token for generativeLogger != -1)
          swift_once();
        v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)generativeLogger);
        v11 = v2;
        v12 = Logger.logObject.getter();
        v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc();
          v15 = swift_slowAlloc();
          v38[0] = v15;
          *(_DWORD *)v14 = 136315138;
          v16 = CanvasGenerationTool.nameAndPointerDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1DDB0F000, v12, v13, "%s clearing canvas selection", v14, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1DF0E6558](v15, -1, -1);
          MEMORY[0x1DF0E6558](v14, -1, -1);

        }
        else
        {

        }
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
        goto LABEL_17;
      }

    }
    v26 = MEMORY[0x1DF0E666C](v5);
    if (v26)
    {
      v7 = (void *)v26;
      type metadata accessor for PaperTextAttachmentView();
      v27 = (_QWORD *)swift_dynamicCastClass();
      if (!v27)
        goto LABEL_17;
      v28 = v27;
      v29 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v27) + 0x320))();
      if (!v29
        || (v30 = v29,
            v31 = objc_msgSend(v29, sel_standInAttachmentView),
            v30,
            !v31))
      {
LABEL_30:
        switch(-[UIGestureRecognizer state](a1, sel_state))
        {
          case UIGestureRecognizerStateBegan:
            objc_msgSend(v2, sel_gestureRecognizerBegan_, a1);
            break;
          case UIGestureRecognizerStateChanged:
            objc_msgSend(v2, sel_gestureRecognizerChanged_, a1);
            break;
          case UIGestureRecognizerStateEnded:
            objc_msgSend(v2, sel_gestureRecognizerEnded_, a1);
            break;
          case UIGestureRecognizerStateCancelled:
          case UIGestureRecognizerStateFailed:
            objc_msgSend(v2, sel_gestureRecognizerCanceledOrFailed_, a1);
            break;
          default:
            goto LABEL_17;
        }
        goto LABEL_17;
      }
      v32 = *(id *)((char *)v28 + direct field offset for Canvas.paperView);
      v33 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

      if (v33 >> 62)
      {
        swift_bridgeObjectRetain();
        v37 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v37)
        {
LABEL_26:
          if ((v33 & 0xC000000000000001) == 0)
          {
            if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v34 = *(id *)(v33 + 32);
              goto LABEL_29;
            }
            __break(1u);
LABEL_40:
            __break(1u);
            JUMPOUT(0x1DDBAB7ACLL);
          }
LABEL_38:
          v34 = (id)MEMORY[0x1DF0E4D64](0, v33);
LABEL_29:
          v35 = v34;
          swift_bridgeObjectRelease();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          v36 = static NSObject.== infix(_:_:)();

          if ((v36 & 1) == 0)
            goto LABEL_30;
LABEL_17:

          return;
        }
      }
      else if (*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)generativeLogger);
    v19 = v2;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v38[0] = v23;
      *(_DWORD *)v22 = 136315394;
      v24 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001DDF4EB90, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1DDB0F000, v20, v21, "%s %s: returning (feature is not enabled)", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v23, -1, -1);
      MEMORY[0x1DF0E6558](v22, -1, -1);

    }
    else
    {

    }
  }
}

void CanvasGenerationTool.gestureRecognizerBegan(_:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v27 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001DDF4EB70, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v5, v6, "%s - %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v8, -1, -1);
    MEMORY[0x1DF0E6558](v7, -1, -1);

  }
  else
  {

  }
  v11 = (void *)MEMORY[0x1DF0E666C](&v4[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, sel_isHidden) & 1) != 0)
    {
      v13 = v4;
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v17 = swift_slowAlloc();
        v27 = v17;
        *(_DWORD *)v16 = 136315138;
        v18 = CanvasGenerationTool.nameAndPointerDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v14, v15, "%s returning (canvas is hidden)", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v17, -1, -1);
        MEMORY[0x1DF0E6558](v16, -1, -1);

        return;
      }

    }
    else
    {
      objc_msgSend(v4, sel_beginWandPathFromGesture_, a1);
    }

  }
  else
  {
    v20 = v4;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v27 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v21, v22, "%s returning (canvas is nil)", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v24, -1, -1);
      MEMORY[0x1DF0E6558](v23, -1, -1);

    }
    else
    {

    }
  }
}

void CanvasGenerationTool.gestureRecognizerChanged(_:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGPoint CurrentPoint;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const CGPath *path;
  CGAffineTransform transform;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath])
  {
    objc_msgSend(v2, sel_beginWandPathFromGesture_, a1);
    return;
  }
  v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
  if (v5
    && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v6 = a1, v7 = v5, v8 = static NSObject.== infix(_:_:)(), v7, v6, (v8 & 1) != 0))
  {
    v9 = *(void **)&v2[v4];
    if (v9)
    {
      v10 = (void *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
      path = v9;
      objc_msgSend(v6, sel_locationInView_, v10);
      v12 = v11;
      v14 = v13;

      CurrentPoint = CGPathGetCurrentPoint(path);
      if (CurrentPoint.x != v12 || CurrentPoint.y != v14)
      {
        transform.a = 1.0;
        transform.b = 0.0;
        transform.c = 0.0;
        transform.d = 1.0;
        transform.tx = 0.0;
        transform.ty = 0.0;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v12), &transform);
        v17 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
        objc_msgSend(v17, sel_updateSelectionWithPath_pencilLocation_, path, v12, v14);

      }
      goto LABEL_21;
    }
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)generativeLogger);
    path = v2;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v22;
      *(_DWORD *)v21 = 136315138;
      v27 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v25 = "%s returning (wandPath is nil)";
      goto LABEL_14;
    }
  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)generativeLogger);
    path = v2;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v25 = "%s returning (gestureToTrack != gestureRecognizer)";
LABEL_14:
      _os_log_impl(&dword_1DDB0F000, v19, v20, v25, v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v22, -1, -1);
      MEMORY[0x1DF0E6558](v21, -1, -1);

      return;
    }
  }

LABEL_21:
}

void CanvasGenerationTool.gestureRecognizerEnded(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  char v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  char *v27;
  id v28;
  char *v29;
  const CGPath *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  CGPoint CurrentPoint;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  double *v67;
  const CGPath *v68;
  double x;
  double y;
  CGFloat width;
  CGFloat height;
  double v73;
  double v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat MidX;
  unint64_t v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  CGFloat *v89;
  uint64_t v90;
  char *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  NSObject *v99;
  uint64_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  id v106;
  const CGPath *v107;
  uint64_t v108;
  uint64_t v109;
  CGAffineTransform transform;
  CGRect BoundingBox;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  __C::CGRect v117;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3, v4);
  v107 = (const CGPath *)((char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)generativeLogger);
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    *(_QWORD *)&transform.a = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001DDF4EB50, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v8, v9, "%s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v11, -1, -1);
    MEMORY[0x1DF0E6558](v10, -1, -1);

  }
  else
  {

  }
  v14 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
  if (!v14
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v15 = a1, v16 = v14, v17 = static NSObject.== infix(_:_:)(), v16, v15, (v17 & 1) == 0))
  {
    v42 = v7;
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v43, v44, "%s returning (gesture is not tracked)", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v46, -1, -1);
      MEMORY[0x1DF0E6558](v45, -1, -1);

      return;
    }

    goto LABEL_15;
  }
  v18 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
  if (!v18)
  {
    v49 = v7;
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      v53 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v50, v51, "%s returning (wand path is nil)", v52, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v53, -1, -1);
      MEMORY[0x1DF0E6558](v52, -1, -1);

    }
    else
    {

    }
    CanvasGenerationTool.resetGenerativeTool()();
    return;
  }
  v19 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v19)
  {
    v56 = v7;
    v42 = v18;
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v57, v58, "%s returning (magicGenerativeVC is nil)", v59, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v60, -1, -1);
      MEMORY[0x1DF0E6558](v59, -1, -1);

    }
    else
    {

    }
    CanvasGenerationTool.resetGenerativeTool()();
LABEL_15:

    return;
  }
  v20 = (void *)MEMORY[0x1DF0E666C](&v7[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  v21 = v18;
  v22 = v19;
  objc_msgSend(v15, sel_locationInView_, v20);
  v24 = v23;
  v26 = v25;

  v27 = v7;
  v28 = v21;
  v29 = v27;
  v30 = (const CGPath *)v28;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc();
    v105 = swift_slowAlloc();
    v106 = v22;
    *(_QWORD *)&transform.a = v105;
    *(_DWORD *)v33 = 136315650;
    v34 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v36 = swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    v37 = MEMORY[0x1DF0E4A10](v36, v24, v26);
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    CGPathGetBoundingBox(v30);
    v39 = CGRect.debugDescription.getter();
    v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v31, v32, "%s gesture ended (location = %s, boundingBox = %s)", (uint8_t *)v33, 0x20u);
    v41 = v105;
    swift_arrayDestroy();
    v22 = v106;
    MEMORY[0x1DF0E6558](v41, -1, -1);
    MEMORY[0x1DF0E6558](v33, -1, -1);

  }
  else
  {

  }
  CurrentPoint = CGPathGetCurrentPoint(v30);
  if (CurrentPoint.x != v24 || CurrentPoint.y != v26)
  {
    transform.a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.d = 1.0;
    transform.tx = 0.0;
    transform.ty = 0.0;
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v26, *(unint64_t *)&v24), &transform);
  }
  CGPathCloseSubpath(v30);
  v64 = MEMORY[0x1DF0E5874](v30);
  if (v64)
  {
    v65 = (void *)v64;
    v66 = (_QWORD *)CGPathRef.convexHull(centroidRatio:)(0.8);
    v67 = (double *)Array<A>.removeProximityDuplicates(threshold:)(v66, 10.0);
    swift_bridgeObjectRelease();
    v68 = (const CGPath *)Array<A>.smoothCGPath()(v67);
    swift_bridgeObjectRelease();
    if (v68)
    {
      objc_msgSend(v22, sel_finishSelectionWithPath_pencilLocation_, v68, v24, v26);
      BoundingBox = CGPathGetBoundingBox(v68);
      x = BoundingBox.origin.x;
      y = BoundingBox.origin.y;
      width = BoundingBox.size.width;
      height = BoundingBox.size.height;
      v73 = CGRectGetWidth(BoundingBox);
      v112.origin.x = x;
      v112.origin.y = y;
      v112.size.width = width;
      v112.size.height = height;
      v74 = CGRectGetHeight(v112);
      if (v74 < v73)
        v73 = v74;
      v113.origin.x = x;
      v113.origin.y = y;
      v113.size.width = width;
      v113.size.height = height;
      v75 = x + (CGRectGetWidth(v113) - v73) * 0.5;
      v114.origin.x = x;
      v114.origin.y = y;
      v114.size.width = width;
      v114.size.height = height;
      v76 = y + (CGRectGetHeight(v114) - v73) * 0.5;
      v115.origin.x = v75;
      v115.origin.y = v76;
      v115.size.width = v73;
      v115.size.height = v73;
      MidX = CGRectGetMidX(v115);
      v116.origin.x = v75;
      v116.origin.y = v76;
      v116.size.width = v73;
      v116.size.height = v73;
      *(double *)&v78 = CGRectGetMidY(v116);
      v117 = CanvasGenerationTool.allocateGenerationFrame(for:with:)((CGSize)__PAIR128__(*(unint64_t *)&v73, *(unint64_t *)&v73), (CGPoint)__PAIR128__(v78, *(unint64_t *)&MidX));
      v79 = v117.origin.x;
      v80 = v117.origin.y;
      v81 = v117.size.width;
      v82 = v117.size.height;
      *(__C::CGRect *)&v29[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance] = v117;
      v83 = objc_msgSend(objc_allocWithZone((Class)PPKGPMagicPaperState), sel_initWithFrame_isEditing_, 1, v117.origin.x, v117.origin.y, v117.size.width, v117.size.height);
      objc_msgSend(v22, sel_setState_, v83);

      CanvasGenerationTool.magicGenerativeState.setter(4u);
      CanvasGenerationTool.addMagicGenerativeBackgroundView()();
      objc_msgSend(v29, sel_disableGestureRecognizer);
      v84 = type metadata accessor for TaskPriority();
      v85 = (uint64_t)v107;
      (*(void (**)(const CGPath *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v107, 1, 1, v84);
      type metadata accessor for MainActor();
      v86 = v29;
      v87 = v65;
      v88 = static MainActor.shared.getter();
      v89 = (CGFloat *)swift_allocObject();
      v90 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v89 + 2) = v88;
      *((_QWORD *)v89 + 3) = v90;
      *((_QWORD *)v89 + 4) = v86;
      *((_QWORD *)v89 + 5) = v87;
      v89[6] = v79;
      v89[7] = v80;
      v89[8] = v81;
      v89[9] = v82;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v85, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:), (uint64_t)v89);

      swift_release();
    }
    else
    {
      v98 = v29;
      v99 = Logger.logObject.getter();
      v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, (os_log_type_t)v100))
      {
        v101 = (uint8_t *)swift_slowAlloc();
        v102 = swift_slowAlloc();
        v109 = v102;
        *(_DWORD *)v101 = 136315138;
        v107 = v30;
        v103 = CanvasGenerationTool.nameAndPointerDescription.getter();
        v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, &v109);
        v30 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v99, (os_log_type_t)v100, "%s returning (cannot optimize path)", v101, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v102, -1, -1);
        MEMORY[0x1DF0E6558](v101, -1, -1);

      }
      else
      {

      }
      CanvasGenerationTool.magicGenerativeState.setter(7u);
      CanvasGenerationTool.resetGenerativeTool()();

    }
  }
  else
  {
    v91 = v29;
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc();
      v95 = swift_slowAlloc();
      v109 = v95;
      *(_DWORD *)v94 = 136315138;
      v96 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v108 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v92, v93, "%s returning (cannot copy wand path)", v94, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v95, -1, -1);
      MEMORY[0x1DF0E6558](v94, -1, -1);

    }
    else
    {

    }
    CanvasGenerationTool.magicGenerativeState.setter(7u);
    CanvasGenerationTool.resetGenerativeTool()();

  }
}

uint64_t closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(double *)(v9 + 48) = a3;
  *(double *)(v9 + 56) = a4;
  *(double *)(v9 + 32) = a1;
  *(double *)(v9 + 40) = a2;
  *(_QWORD *)(v9 + 16) = a8;
  *(_QWORD *)(v9 + 24) = a9;
  type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 64) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 72) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 80) = v10;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  CanvasGenerationTool.hideToolPickerIfNeeded()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v1;
  *v1 = v0;
  v1[1] = closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:);
  return CanvasGenerationTool.generateImage(for:in:)(*(_QWORD *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void CanvasGenerationTool.gestureRecognizerCanceledOrFailed(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  char *v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  char v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  v4 = v1;
  v5 = a1;
  v6 = (char *)v4;
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v26 = v11;
    *(_DWORD *)v10 = 136315394;
    v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2048;
    objc_msgSend(v7, sel_state, v25, v26);

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v8, v9, "%s gesture %ld", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v11, -1, -1);
    MEMORY[0x1DF0E6558](v10, -1, -1);

  }
  else
  {

  }
  v14 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
  if (v14
    && (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer), v15 = v7, v16 = v14, v17 = static NSObject.== infix(_:_:)(), v16, v15, (v17 & 1) != 0))
  {
    CanvasGenerationTool.magicGenerativeState.setter(7u);
    CanvasGenerationTool.resetGenerativeTool()();
  }
  else
  {
    v18 = v6;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v26 = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v19, v20, "%s returning (gesture is not tracked)", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v22, -1, -1);
      MEMORY[0x1DF0E6558](v21, -1, -1);

    }
    else
    {

    }
  }
}

Swift::Void __swiftcall CanvasGenerationTool.disableGestureRecognizer()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)generativeLogger);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315394;
    v7 = CanvasGenerationTool.nameAndPointerDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001DDF4EB30, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v3, v4, "%s %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v6, -1, -1);
    MEMORY[0x1DF0E6558](v5, -1, -1);

  }
  else
  {

  }
  v9 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
  if (v9)
    objc_msgSend(v9, sel_setEnabled_, 0);
}

void CanvasGenerationTool.beginWandPathFromGesture(_:)(void *a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __objc2_prot_list **p_base_prots;
  _QWORD *v8;
  int v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  id v19;
  double v20;
  CGFloat v21;
  UIView_optional *v22;
  CGSize v23;
  BOOL v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  CGMutablePathRef Mutable;
  uint64_t v60;
  void *v61;
  void *v62;
  char *v63;
  void *v64;
  NSObject *v65;
  os_log_type_t v66;
  void *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8_t *v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  void *v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  id v89;
  char *v90;
  id v91;
  uint64_t v92;
  CGAffineTransform transform;
  CGPoint v94;
  CGRect v95;
  __C::CGRect v96;
  CGRect v97;
  __C::CGRect v98;
  CGRect v99;

  v2 = v1;
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (v4)
  {
    v5 = (void *)v4;
    type metadata accessor for PaperTextAttachmentView();
    v6 = swift_dynamicCastClass();
    p_base_prots = &MiniMenuController.base_prots;
    if (v6)
    {
      v8 = (_QWORD *)v6;
      v9 = *(unsigned __int8 *)(v6 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode);
      *(_BYTE *)(v6 + direct field offset for PaperTextAttachmentView.forceExtraHeightForGenerationMode) = 0;
      if (v9)
      {
        v10 = v5;
        objc_msgSend(v8, sel_frame);
        v12 = v11;
        v14 = v13;
        v16 = v15;
        v18 = v17;
        v19 = objc_msgSend(v8, sel_frame);
        v21 = v20;
        v22 = (UIView_optional *)(*(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x1150))(v19);
        if (!v22)
          v22 = (UIView_optional *)objc_msgSend(v8, sel_superview);
        v23 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v22);

        v95.origin.x = 0.0;
        v95.origin.y = v21;
        v95.size.width = v23.width;
        v95.size.height = v23.height;
        v99.origin.x = v12;
        v99.origin.y = v14;
        v99.size.width = v16;
        v99.size.height = v18;
        v24 = CGRectEqualToRect(v95, v99);
        v96.origin.x = 0.0;
        v96.origin.y = v21;
        v96.size.width = v23.width;
        v96.size.height = v23.height;
        PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v96, 0, !v24, 0);

      }
    }
    objc_msgSend(a1, sel_locationInView_, v5);
    v26 = v25;
    v28 = v27;
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)generativeLogger);
    v30 = v5;
    v31 = v2;
    v32 = v30;
    v33 = (char *)v31;
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v88 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v88;
      *(_DWORD *)v36 = 136315650;
      v37 = CanvasGenerationTool.nameAndPointerDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v39 = swift_bridgeObjectRelease();
      v89 = a1;
      *(_WORD *)(v36 + 12) = 2080;
      v40 = MEMORY[0x1DF0E4A10](v39, v26, v28);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2080;
      v42 = objc_msgSend(v32, sel_debugDescription);
      v43 = v32;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v45;

      v47 = v44;
      v32 = v43;
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a1 = v89;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v34, v35, "%s gesture began at location %s in %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v88, -1, -1);
      v48 = v36;
      p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
      MEMORY[0x1DF0E6558](v48, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v32, (SEL)p_base_prots[277]);
    v94.x = v26;
    v94.y = v28;
    if (!CGRectContainsPoint(v97, v94))
    {
      v63 = v33;
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = v32;
        v68 = (uint8_t *)swift_slowAlloc();
        v69 = swift_slowAlloc();
        *(_QWORD *)&transform.a = v69;
        *(_DWORD *)v68 = 136315138;
        v70 = CanvasGenerationTool.nameAndPointerDescription.getter();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)&transform);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v65, v66, "%s returning (gesture location is outside canvas)", v68, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v69, -1, -1);
        MEMORY[0x1DF0E6558](v68, -1, -1);

        return;
      }

      goto LABEL_24;
    }
    v56 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack;
    v57 = *(void **)&v33[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack];
    *(_QWORD *)&v33[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_gestureToTrack] = a1;
    v58 = a1;

    Mutable = CGPathCreateMutable();
    v60 = OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath;
    v61 = *(void **)&v33[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath];
    *(_QWORD *)&v33[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_wandPath] = Mutable;

    v62 = *(void **)&v33[v60];
    if (v62)
    {
      transform.a = 1.0;
      transform.b = 0.0;
      transform.c = 0.0;
      transform.d = 1.0;
      transform.tx = 0.0;
      transform.ty = 0.0;
      v63 = v62;
      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v28, *(unint64_t *)&v26), &transform);
      v98.origin.x = 0.0;
      v98.origin.y = 0.0;
      v98.size.width = 0.0;
      v98.size.height = 0.0;
      CanvasGenerationTool.placeMagicGenerativePlayground(for:in:)(PaperKit_MagicGenerativePlaygroundState_wandSelection, v98);
      v64 = *(void **)&v33[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
      if (v64)
      {
        objc_msgSend(v64, sel_startSelectionWithPath_pencilLocation_, v63, v26, v28);

        return;
      }
      v80 = v33;
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = v32;
        v84 = (uint8_t *)swift_slowAlloc();
        v85 = swift_slowAlloc();
        v92 = v85;
        *(_DWORD *)v84 = 136315138;
        v86 = CanvasGenerationTool.nameAndPointerDescription.getter();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1DDB0F000, v81, v82, "%s returning (magicGenerativeVC is nil)", v84, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v85, -1, -1);
        MEMORY[0x1DF0E6558](v84, -1, -1);

        return;
      }

LABEL_24:
      return;
    }
    v72 = v33;
    v73 = Logger.logObject.getter();
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v91 = v32;
      v75 = (uint8_t *)swift_slowAlloc();
      v76 = swift_slowAlloc();
      *(_QWORD *)&transform.a = v76;
      *(_DWORD *)v75 = 136315138;
      v77 = CanvasGenerationTool.nameAndPointerDescription.getter();
      v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, (uint64_t *)&transform);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v73, v74, "%s returning (wand path is nil)", v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v76, -1, -1);
      v79 = v75;
      v32 = v91;
      MEMORY[0x1DF0E6558](v79, -1, -1);

    }
    else
    {

    }
    v50 = *(NSObject **)&v33[v56];
    *(_QWORD *)&v33[v56] = 0;

  }
  else
  {
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)generativeLogger);
    v90 = v1;
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v50, v51))
    {

      return;
    }
    v52 = (uint8_t *)swift_slowAlloc();
    v53 = swift_slowAlloc();
    *(_QWORD *)&transform.a = v53;
    *(_DWORD *)v52 = 136315138;
    v54 = CanvasGenerationTool.nameAndPointerDescription.getter();
    v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)&transform);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v50, v51, "%s returning (canvas is nil)", v52, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v53, -1, -1);
    MEMORY[0x1DF0E6558](v52, -1, -1);
  }

}

uint64_t sub_1DDBAE090()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _QWORD *v12;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = v1[9];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasGenerationTool.gestureRecognizerEnded(_:)(v8, v9, v10, v11, a1, v4, v5, v6, v7);
}

id CanvasElementDrawingView.init(frame:drawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  char *v6;
  PKDrawing *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  objc_super v20;

  v6 = v5;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingDisplayLink] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveStreamingStartTimeInterval] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_liveErasingDrawing] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate] = 0;
  v12 = (PKDrawing *)OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp] = 0;
  PKDrawing._bridgeToObjectiveC()(v12);
  v14 = v13;
  v20.receiver = v6;
  v20.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
  v15 = objc_msgSendSuper2(&v20, sel_initWithFrame_drawing_, v14, a2, a3, a4, a5);

  v16 = v15;
  v17 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000028, 0x80000001DDF4EF60);
  objc_msgSend(v16, sel_setAccessibilityIdentifier_, v17);

  v18 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  return v16;
}

void __swiftcall CanvasElementDrawingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  void *v4;
  Class isa;
  double y;
  double x;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  uint64_t (*v11)(void);
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  objc_super v22;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView], *(_QWORD *)&with.is_nil);
  if (!v8)
    goto LABEL_12;
  v9 = v8;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x88);
  v12 = (_QWORD *)v11();
  if (v12)
  {
    v13 = v12;
    v14 = (*(uint64_t (**)(double, double))((*v10 & *v12) + 0x7A0))(x, y);

    if (v14)
      goto LABEL_4;
  }
  v15 = (_QWORD *)v11();
  if (v15)
  {
    v16 = v15;
    v17 = (void *)(*(uint64_t (**)(void))((*v10 & *v15) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
    v18 = (_QWORD *)swift_dynamicCastClass();
    if (v18 && (v19 = *(void **)((char *)v18 + *(_QWORD *)((*v10 & *v18) + 0x4D0))) != 0)
    {
      v20 = objc_msgSend(v19, sel_hitTest_withEvent_, 0, x, y);

      if (v20)
      {
LABEL_4:

        return;
      }
    }
    else
    {

    }
  }
  objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v9, x, y);
  v21 = objc_msgSend(v9, sel_hitTest_withEvent_, isa);

  if (!v21)
  {
LABEL_12:
    v22.receiver = v4;
    v22.super_class = (Class)type metadata accessor for CanvasElementDrawingView();
    -[UIView_optional hitTest:withEvent:](&v22, sel_hitTest_withEvent_, isa, x, y);
  }
}

Swift::Void __swiftcall CanvasElementDrawingView.initializeMathRecognitionIfNecessary()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void (*v30)(double *__return_ptr);
  id v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  double v37;
  double v38;
  double v39;
  ValueMetadata *v40;
  unint64_t v41;
  CGRect v42;

  v1 = v0;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView], v5);
  if (v8)
  {
    v9 = v8;
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v11 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x88))();

    if (v11)
    {
      v40 = &type metadata for PencilAndPaperFeatureFlags;
      v41 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v38) = 5;
      v12 = isFeatureEnabled(_:)();
      v13 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      if ((v12 & 1) == 0)
      {
LABEL_26:

        return;
      }
      v14 = OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate;
      if (*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate])
        goto LABEL_5;
      v17 = objc_msgSend(v1, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      v18 = PKDrawing.strokes.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      v19 = *(_QWORD *)(v18 + 16);
      v13 = swift_bridgeObjectRelease();
      if (!v19)
        goto LABEL_5;
      v20 = (*(uint64_t (**)(uint64_t))((*v10 & *v11) + 0x720))(v13);
      v13 = swift_unknownObjectRelease();
      if (v20)
      {
        if (one-time initialization token for mathLogger != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)mathLogger);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_1DDB0F000, v22, v23, "Creating MathRecognitionViewControllerDelegate", v24, 2u);
          MEMORY[0x1DF0E6558](v24, -1, -1);
        }

        v25 = v11;
        v26 = objc_msgSend(v1, sel_recognitionController);
        objc_allocWithZone((Class)type metadata accessor for MathRecognitionViewControllerDelegate());
        v16 = MathRecognitionViewControllerDelegate.init(canvas:view:recognitionController:)(v25, v1, v26);
      }
      else
      {
LABEL_5:
        v15 = (*(uint64_t (**)(uint64_t))((*v10 & *v11) + 0x720))(v13);
        swift_unknownObjectRelease();
        if (v15)
        {
LABEL_15:
          v28 = *(_QWORD *)&v1[v14];
          if (v28)
          {
            v29 = *(void **)(v28 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
            if (v29)
            {
              v30 = *(void (**)(double *__return_ptr))((*v10 & *v11) + 0x728);
              v31 = v29;
              v30(&v38);
              v32 = (id)LOBYTE(v38);
              if (objc_msgSend(v31, sel_solvingStyle) != v32)
              {
                if (one-time initialization token for mathLogger != -1)
                  swift_once();
                v33 = type metadata accessor for Logger();
                __swift_project_value_buffer(v33, (uint64_t)mathLogger);
                v34 = Logger.logObject.getter();
                v35 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v34, v35))
                {
                  v36 = (uint8_t *)swift_slowAlloc();
                  *(_DWORD *)v36 = 134217984;
                  v38 = *(double *)&v32;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl(&dword_1DDB0F000, v34, v35, "Setting solving style: %ld", v36, 0xCu);
                  MEMORY[0x1DF0E6558](v36, -1, -1);
                }

                objc_msgSend(v31, sel_setSolvingStyle_, v32);
              }
              objc_msgSend(v1, sel_drawingTransform);
              v37 = sqrt(v38 * v38 + v39 * v39);
              if (v37 > 0.0)
              {
                objc_msgSend(v11, sel_bounds);
                objc_msgSend(v31, sel_setCanvasWidth_, CGRectGetWidth(v42) / v37);
              }

            }
          }
          goto LABEL_26;
        }
        v16 = 0;
      }
      v27 = *(void **)&v1[v14];
      *(_QWORD *)&v1[v14] = v16;

      goto LABEL_15;
    }
  }
}

