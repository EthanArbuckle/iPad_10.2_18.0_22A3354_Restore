void specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t i;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v28 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v15.n128_f64[0] = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = a1 + 56;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & *(_QWORD *)(a1 + 56);
  v28[0] = (unint64_t)(v20 + 63) >> 6;
  v28[1] = a2;
  if (!v22)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  for (i = v23 | (v18 << 6); ; i = __clz(__rbit64(v26)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v17, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v5 + 72) * i, v4, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v17, v4);
    specialized Set._Variant.insert(_:)((uint64_t)v12, v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    if (v22)
      goto LABEL_4;
LABEL_5:
    v25 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v28[0])
      goto LABEL_24;
    v26 = *(_QWORD *)(v19 + 8 * v25);
    ++v18;
    if (!v26)
    {
      v18 = v25 + 1;
      if (v25 + 1 >= v28[0])
        goto LABEL_24;
      v26 = *(_QWORD *)(v19 + 8 * v18);
      if (!v26)
      {
        v18 = v25 + 2;
        if (v25 + 2 >= v28[0])
          goto LABEL_24;
        v26 = *(_QWORD *)(v19 + 8 * v18);
        if (!v26)
        {
          v18 = v25 + 3;
          if (v25 + 3 >= v28[0])
            goto LABEL_24;
          v26 = *(_QWORD *)(v19 + 8 * v18);
          if (!v26)
            break;
        }
      }
    }
LABEL_20:
    v22 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v28[0])
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v17, 1, 1, v4, v15);
LABEL_25:
    swift_release();
    return;
  }
  v26 = *(_QWORD *)(v19 + 8 * v27);
  if (v26)
  {
    v18 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v18 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v18 >= v28[0])
      goto LABEL_24;
    v26 = *(_QWORD *)(v19 + 8 * v18);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
}

uint64_t closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3[3];
  v11 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  CalculateDocumentController.trackResult(for:itemUUID:)(a2, (uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t CalculateDocumentController.sendResultForExpression(_:itemUUID:)(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  uint64_t v12;

  v3 = (void *)CalculateExpression.result.getter();
  if (v3)
  {
    v4 = v3;
    if ((objc_msgSend(v3, sel_isTrivial) & 1) == 0)
    {
      v11 = objc_msgSend(v4, sel_formattedResult);
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v6 = v12;

      v7 = (void *)CalculateExpression.result.getter();
      if (v7)
        goto LABEL_5;
LABEL_7:
      v10 = 0;
      goto LABEL_8;
    }

  }
  v5 = 0;
  v6 = 0;
  v7 = (void *)CalculateExpression.result.getter();
  if (!v7)
    goto LABEL_7;
LABEL_5:
  v8 = v7;
  v9 = objc_msgSend(v7, sel_unitType);

  v10 = v9 == (id)16;
LABEL_8:
  CalculateDocumentController.sendResult(_:itemUUID:needsAttribution:)(v5, v6, a2, v10);
  return swift_bridgeObjectRelease();
}

uint64_t CalculateDocumentController.sendResult(_:itemUUID:needsAttribution:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  _BYTE v16[8];
  uint64_t v17;

  v9 = v4 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  result = swift_beginAccess();
  v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)v9 + 32;
    swift_bridgeObjectRetain();
    v13 = a4 & 1;
    do
    {
      outlined init with copy of WeakObserver(v12, (uint64_t)v16);
      if (MEMORY[0x1DF0E666C](v16))
      {
        v14 = v17;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(a1, a2, a3, v13, ObjectType, v14);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v16);
      v12 += 16;
      --v11;
    }
    while (v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall CalculateDocumentController.sendExpressionsChanged()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _BYTE v7[8];
  uint64_t v8;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers);
  swift_beginAccess();
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakObserver(v4, (uint64_t)v7);
      if (MEMORY[0x1DF0E666C](v7))
      {
        v5 = v8;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v7);
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
}

void CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - v13;
  if ((CalculateExpression.needsEvaluation.getter() & 1) == 0)
    CalculateDocumentController.sendResultForExpression(_:itemUUID:)(a1, a2);
  CalculateExpression.id.getter();
  v15 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v15 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
    if ((v16 & 1) != 0)
    {
      outlined init with copy of WeakCalculateExpression();
      v29 = 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  if ((v29 & 1) != 0)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
LABEL_13:
    CalculateExpression.id.getter();
    swift_weakInit();
    v18 = swift_weakAssign();
    outlined init with take of WeakCalculateExpression(v18, (uint64_t)&v30);
    v31 = 0;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v30, (uint64_t)v10);
    v19 = swift_endAccess();
    MEMORY[0x1E0C80A78](v19, v20);
    *(&v28 - 4) = v3;
    *(&v28 - 3) = a1;
    *(&v28 - 2) = a2;
    withObservationTracking<A>(_:onChange:)();
    return;
  }
  Strong = swift_weakLoadStrong();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
  if (!Strong)
    goto LABEL_13;
  swift_release();
  if (Strong != a1)
    goto LABEL_13;
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)mathLogger);
  swift_retain_n();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v28 = v25;
    *(_DWORD *)v24 = 136380675;
    v26 = CalculateExpression.expression.getter();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v22, v23, "Already tracked result for: %{private}s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v25, -1, -1);
    MEMORY[0x1DF0E6558](v24, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void (*implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  return partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:);
}

void CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - v13;
  if ((CalculateExpression.needsEvaluation.getter() & 1) == 0)
    CalculateDocumentController.updateTokens(expression:itemUUID:)(a1, a2);
  CalculateExpression.id.getter();
  v15 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)v15 + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
    if ((v16 & 1) != 0)
    {
      outlined init with copy of WeakCalculateExpression();
      v29 = 0;
    }
    else
    {
      v28 = 0;
      v29 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  if ((v29 & 1) != 0)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
LABEL_13:
    CalculateExpression.id.getter();
    swift_weakInit();
    v18 = swift_weakAssign();
    outlined init with take of WeakCalculateExpression(v18, (uint64_t)&v30);
    v31 = 0;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v30, (uint64_t)v10);
    v19 = swift_endAccess();
    MEMORY[0x1E0C80A78](v19, v20);
    *(&v28 - 4) = v3;
    *(&v28 - 3) = a1;
    *(&v28 - 2) = a2;
    withObservationTracking<A>(_:onChange:)();
    return;
  }
  Strong = swift_weakLoadStrong();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
  if (!Strong)
    goto LABEL_13;
  swift_release();
  if (Strong != a1)
    goto LABEL_13;
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)mathLogger);
  swift_retain_n();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v28 = v25;
    *(_DWORD *)v24 = 136380675;
    v26 = CalculateExpression.expression.getter();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v22, v23, "Already tracked tokens for: %{private}s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v25, -1, -1);
    MEMORY[0x1DF0E6558](v24, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void (*implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4, v7);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v4);
  v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v8;
  *(_QWORD *)(v11 + 24) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  return partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:);
}

void closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD aBlock[6];
  _QWORD v46[2];

  v40 = a6;
  v41 = a7;
  v38 = a3;
  v39 = a5;
  v37 = type metadata accessor for DispatchWorkItemFlags();
  v8 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v9);
  v44 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v42 = *(_QWORD *)(v11 - 8);
  v43 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v15, v18);
  swift_beginAccess();
  v19 = MEMORY[0x1DF0E666C](a1 + 16);
  if (v19)
  {
    v20 = (void *)v19;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v35 = v14;
      v34 = Strong;
      swift_beginAccess();
      v22 = v38;
      specialized Dictionary._Variant.removeValue(forKey:)(v38, (uint64_t)v46);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
      swift_endAccess();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v36 = static OS_dispatch_queue.main.getter();
      v33 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v23 = swift_allocObject();
      swift_weakInit();
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v15);
      v24 = *(unsigned __int8 *)(v16 + 80);
      v38 = v8;
      v25 = v37;
      v26 = (v24 + 32) & ~v24;
      v27 = swift_allocObject();
      *(_QWORD *)(v27 + 16) = v33;
      *(_QWORD *)(v27 + 24) = v23;
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v27 + v26, (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
      aBlock[4] = v40;
      aBlock[5] = v27;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = v41;
      v28 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v29 = v35;
      static DispatchQoS.unspecified.getter();
      v46[0] = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      v30 = v44;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v31 = (void *)v36;
      MEMORY[0x1DF0E48C0](0, v29, v30, v28);
      _Block_release(v28);

      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v30, v25);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v43);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  if (v6)
  {
    v7 = (void *)v6;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      a4();

      swift_release();
    }
    else
    {

    }
  }
}

unint64_t CalculateDocumentController.calculateDocumentProvider.getter()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::Int *v20;
  Swift::Int v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t result;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t *v40;
  char *v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  id v57;
  void *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v2 = v0;
  v3 = type metadata accessor for UUID();
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = MEMORY[0x1E0DEE9E8];
  v71 = MEMORY[0x1E0DEE9D8];
  v69 = MEMORY[0x1E0DEE9D8];
  v6 = v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  if (!MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document)
    || (v7 = *(_QWORD *)(v6 + 8),
        ObjectType = swift_getObjectType(),
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7),
        swift_unknownObjectRelease(),
        !v9))
  {
LABEL_61:
    v60 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentProvider()), sel_init);
    *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v70;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v71;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_evaluationResults] = v69;
    swift_bridgeObjectRelease();
    return (unint64_t)v60;
  }
  v61 = v9;
  v10 = dispatch thunk of CalculateDocument.declaredSymbols.getter();
  v11 = v10;
  v12 = 0;
  v13 = v10 + 56;
  v14 = 1 << *(_BYTE *)(v10 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v10 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v12 << 6);
      goto LABEL_7;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v22 >= v17)
      goto LABEL_23;
    v23 = *(_QWORD *)(v13 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_23;
      v23 = *(_QWORD *)(v13 + 8 * v12);
      if (!v23)
      {
        v12 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_23;
        v23 = *(_QWORD *)(v13 + 8 * v12);
        if (!v23)
          break;
      }
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_7:
    v20 = (Swift::Int *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    v21 = *v20;
    v1 = v20[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v68, v21, v1);
    swift_bridgeObjectRelease();
  }
  v24 = v22 + 3;
  if (v24 >= v17)
  {
LABEL_23:
    swift_release();
    result = dispatch thunk of CalculateDocument.expressions.getter();
    v1 = result;
    if (result >> 62)
      goto LABEL_59;
    v26 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v26)
      goto LABEL_25;
LABEL_60:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_61;
  }
  v23 = *(_QWORD *)(v13 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v17)
      goto LABEL_23;
    v23 = *(_QWORD *)(v13 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  result = _CocoaArrayWrapper.endIndex.getter();
  v26 = result;
  if (!result)
    goto LABEL_60;
LABEL_25:
  if (v26 >= 1)
  {
    v27 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings);
    v63 = v1 & 0xC000000000000001;
    v64 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionStrokeGroups);
    swift_beginAccess();
    v62 = v27;
    swift_beginAccess();
    v28 = 0;
    v65 = v26;
    while (1)
    {
      if (v63)
        MEMORY[0x1DF0E4D64](v28, v1);
      else
        swift_retain();
      CalculateExpression.id.getter();
      v29 = CalculateExpression.expression.getter();
      v31 = v30;
      v32 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpression()), sel_init);
      v33 = *v64;
      if (*(_QWORD *)(*v64 + 16))
      {
        swift_bridgeObjectRetain();
        v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
        if ((v35 & 1) != 0)
        {
          v36 = *(void **)(*(_QWORD *)(v33 + 56) + 8 * v34);
          v37 = v36;
        }
        else
        {
          v36 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = 0;
      }
      v38 = *(void **)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_strokeGroupIdentifier];
      *(_QWORD *)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_strokeGroupIdentifier] = v36;
      v39 = v36;

      v40 = (uint64_t *)&v32[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
      *v40 = v29;
      v40[1] = v31;
      swift_bridgeObjectRelease();
      v41 = v32;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v36)
        break;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v5, v67);

      swift_release();
LABEL_28:
      if (v65 == ++v28)
        goto LABEL_60;
    }
    v42 = v39;
    v43 = (void *)CalculateExpression.result.getter();
    if (v43)
    {
      v44 = v43;
      if (objc_msgSend(v43, sel_isTrivial))
      {

        swift_release();
LABEL_55:
        (*(void (**)(char *, uint64_t))(v66 + 8))(v5, v67);
        goto LABEL_28;
      }
      v45 = objc_msgSend(v44, sel_formattedResult);
      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v48 = v47;

      v49 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpressionEvaluationResult()), sel_init);
      v50 = (uint64_t *)&v49[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_string];
      *v50 = v46;
      v50[1] = v48;
      swift_bridgeObjectRelease();
      v51 = *(void **)&v49[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier];
      *(_QWORD *)&v49[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_strokeGroupIdentifier] = v42;
      v52 = v42;

      v53 = *v62;
      if (*(_QWORD *)(*v62 + 16))
      {
        swift_bridgeObjectRetain();
        v54 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
        if ((v55 & 1) != 0)
        {
          v56 = *(void **)(*(_QWORD *)(v53 + 56) + 8 * v54);
          v57 = v56;
        }
        else
        {
          v56 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v56 = 0;
      }
      v58 = *(void **)&v49[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing];
      *(_QWORD *)&v49[OBJC_IVAR____TtC8PaperKit30MathExpressionEvaluationResult_drawing] = v56;

      v59 = v49;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

    }
    else
    {

    }
    swift_release();
    goto LABEL_55;
  }
  __break(1u);
  return result;
}

uint64_t CalculateDocumentController.resultForExpressionWithUUID(_:locale:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  id v17;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document;
  if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document))
  {
    v6 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, ObjectType, v6))
    {
      v8 = CalculateExpression.result.getter();
      if (v8)
      {
        v9 = (void *)v8;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale>);
        v10 = type metadata accessor for Locale();
        v11 = *(_QWORD *)(v10 - 8);
        v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        v13 = swift_allocObject();
        *(_OWORD *)(v13 + 16) = xmmword_1DDF32CF0;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v13 + v12, a2, v10);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v9, sel_setLocales_, isa);

        if ((objc_msgSend(v9, sel_isTrivial) & 1) == 0)
        {
          v17 = objc_msgSend(v9, sel_formattedResult);
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          swift_unknownObjectRelease();
          swift_release();

          return v15;
        }
        swift_unknownObjectRelease();
        swift_release();

      }
      else
      {
        swift_unknownObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

id CalculateDocumentController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CalculateDocumentController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CalculateDocumentController()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for WeakCalculateExpression(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WeakCalculateExpression(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WeakCalculateExpression()
{
  return &type metadata for WeakCalculateExpression;
}

uint64_t initializeWithCopy for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for WeakObserver(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WeakObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WeakObserver()
{
  return &type metadata for WeakObserver;
}

unint64_t lazy protocol witness table accessor for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalculateDocumentProvider.CodingKeys, &type metadata for CalculateDocumentProvider.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalculateDocumentProvider.CodingKeys, &type metadata for CalculateDocumentProvider.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalculateDocumentProvider.CodingKeys, &type metadata for CalculateDocumentProvider.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalculateDocumentProvider.CodingKeys, &type metadata for CalculateDocumentProvider.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentProvider.CodingKeys and conformance CalculateDocumentProvider.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v8 = a2;
    result = MEMORY[0x1DF0E6450](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [MathExpression] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MathExpression]);
    v11 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a2, v10, (uint64_t (*)(uint64_t))type metadata accessor for MathExpression, a3);
    result = MEMORY[0x1DF0E6450](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [MathExpressionEvaluationResult] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MathExpressionEvaluationResult]);
    v11 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(a2, v10, (uint64_t (*)(uint64_t))type metadata accessor for MathExpressionEvaluationResult, a3);
    result = MEMORY[0x1DF0E6450](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpression.CodingKeys, &type metadata for MathExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpression.CodingKeys, &type metadata for MathExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpression.CodingKeys, &type metadata for MathExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpression.CodingKeys, &type metadata for MathExpression.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpression.CodingKeys and conformance MathExpression.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpressionEvaluationResult.CodingKeys, &type metadata for MathExpressionEvaluationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpressionEvaluationResult.CodingKeys, &type metadata for MathExpressionEvaluationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpressionEvaluationResult.CodingKeys, &type metadata for MathExpressionEvaluationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MathExpressionEvaluationResult.CodingKeys, &type metadata for MathExpressionEvaluationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MathExpressionEvaluationResult.CodingKeys and conformance MathExpressionEvaluationResult.CodingKeys);
  }
  return result;
}

uint64_t sub_1DDC4582C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  uint64_t v0;

  closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(*(_QWORD *)(v0 + 16));
}

uint64_t objectdestroy_8Tm_0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  uint64_t v0;

  closure #1 in closure #2 in implicit closure #1 in CalculateDocumentController.trackExpressions(in:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in CalculateDocumentController.trackExpressions(in:)()
{
  return closure #1 in CalculateDocumentController.trackExpressions(in:)();
}

void (*partial apply for implicit closure #1 in CalculateDocumentController.trackExpressions(in:)())()
{
  return implicit closure #1 in CalculateDocumentController.trackExpressions(in:)();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE v8[16];
  _BYTE v9[16];
  uint64_t v10;

  result = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = a1 + 32;
    v5 = MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with copy of WeakObserver(v4, (uint64_t)v9);
      if (MEMORY[0x1DF0E666C](v9))
      {
        swift_unknownObjectRelease();
        outlined init with take of WeakObserver((uint64_t)v9, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
        v5 = v10;
        v7 = *(_QWORD *)(v10 + 16);
        v6 = *(_QWORD *)(v10 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v5 = v10;
        }
        *(_QWORD *)(v5 + 16) = v7 + 1;
        outlined init with take of WeakObserver((uint64_t)v8, v5 + 16 * v7 + 32);
      }
      else
      {
        outlined destroy of weak AnyContainerCanvasElementView?((uint64_t)v9);
      }
      v4 += 16;
      --v3;
    }
    while (v3);
    return v10;
  }
  return result;
}

uint64_t specialized static CalculateDocumentController.cleanupStaleControllers()()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  char *v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char *v35;
  int64_t v36;

  v0 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  if (one-time initialization token for controllers == -1)
    goto LABEL_2;
LABEL_40:
  swift_once();
LABEL_2:
  swift_beginAccess();
  v1 = static CalculateDocumentController.controllers;
  v35 = (char *)static CalculateDocumentController.controllers + 64;
  v2 = 1 << *((_BYTE *)static CalculateDocumentController.controllers + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *((_QWORD *)static CalculateDocumentController.controllers + 8);
  v36 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
  {
LABEL_5:
    v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v7 = v6 | (v5 << 6);
    goto LABEL_17;
  }
  while (1)
  {
    while (1)
    {
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      if (v5 >= v36)
        goto LABEL_37;
      v9 = *(_QWORD *)&v35[8 * v5];
      if (!v9)
      {
        v10 = v5 + 1;
        if (v5 + 1 >= v36)
          goto LABEL_37;
        v9 = *(_QWORD *)&v35[8 * v10];
        if (!v9)
        {
          v10 = v5 + 2;
          if (v5 + 2 >= v36)
            goto LABEL_37;
          v9 = *(_QWORD *)&v35[8 * v10];
          if (!v9)
          {
            v10 = v5 + 3;
            if (v5 + 3 >= v36)
            {
LABEL_37:
              swift_release();
              static CalculateDocumentController.controllers = (_UNKNOWN *)v0;
              return swift_bridgeObjectRelease();
            }
            v9 = *(_QWORD *)&v35[8 * v10];
            if (!v9)
            {
              while (1)
              {
                v5 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_39;
                if (v5 >= v36)
                  goto LABEL_37;
                v9 = *(_QWORD *)&v35[8 * v5];
                ++v10;
                if (v9)
                  goto LABEL_16;
              }
            }
          }
        }
        v5 = v10;
      }
LABEL_16:
      v4 = (v9 - 1) & v9;
      v7 = __clz(__rbit64(v9)) + (v5 << 6);
LABEL_17:
      v11 = 8 * v7;
      v12 = *(void **)(v1[6] + v11);
      v13 = *(char **)(v1[7] + v11);
      v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
      swift_beginAccess();
      v15 = v12;
      v16 = v13;
      v17 = swift_bridgeObjectRetain();
      v18 = specialized _ArrayProtocol.filter(_:)(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)v14 = v18;
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(*(_QWORD *)v14 + 16))
      {
        v19 = MEMORY[0x1DF0E666C](&v16[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]);
        swift_unknownObjectRelease();
        if (v19)
          break;
      }

      if (v4)
        goto LABEL_5;
    }
    v20 = v15;
    v21 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
    v25 = *(_QWORD *)(v0 + 16);
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (*(_QWORD *)(v0 + 24) >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v23 & 1) != 0)
          goto LABEL_32;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v28 & 1) != 0)
          goto LABEL_32;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v20);
      if ((v28 & 1) != (v30 & 1))
        goto LABEL_42;
      v24 = v29;
      if ((v28 & 1) != 0)
      {
LABEL_32:
        v32 = *(_QWORD *)(v0 + 56);
        v33 = 8 * v24;

        *(_QWORD *)(v32 + v33) = v21;
        goto LABEL_33;
      }
    }
    specialized _NativeDictionary._insert(at:key:value:)(v24, (uint64_t)v20, (uint64_t)v21, (_QWORD *)v0);
    v31 = v20;
LABEL_33:

    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_5;
  }
  __break(1u);
LABEL_42:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of WeakObserver(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t outlined init with take of WeakObserver(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t partial apply for closure #1 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
  CalculateExpression.plain.getter();
  return swift_release();
}

void (*partial apply for implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)())()
{
  uint64_t *v0;

  return implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with copy of WeakCalculateExpression()
{
  return swift_weakCopyInit();
}

uint64_t sub_1DDC45DE0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
  partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)((uint64_t)&OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForTokens, (uint64_t)&unk_1EA845018, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:), (uint64_t)&block_descriptor_29);
}

void partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)()
{
  partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)((void (*)(void))CalculateDocumentController.trackTokens(for:itemUUID:));
}

void partial apply for closure #1 in CalculateDocumentController.trackResult(for:itemUUID:)()
{

}

void (*partial apply for implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)())()
{
  uint64_t *v0;

  return implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(v0[2], v0[3], v0[4]);
}

void partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)()
{
  partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)((uint64_t)&OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_trackedExpressionsForResults, (uint64_t)&unk_1EA845090, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:), (uint64_t)&block_descriptor_42_2);
}

void partial apply for closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v9 + 32) & ~v9), a1, a2, a3, a4);
}

uint64_t objectdestroy_20Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)()
{
  partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)((void (*)(void))CalculateDocumentController.trackResult(for:itemUUID:));
}

void partial apply for closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackTokens(for:itemUUID:)(void (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 80);
  closure #1 in closure #2 in implicit closure #2 in CalculateDocumentController.trackResult(for:itemUUID:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)()
{
  uint64_t *v0;

  return closure #2 in CalculateDocumentController.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(v0[2], v0[3], v0 + 4);
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t sub_1DDC4605C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CalculateDocumentController.init()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for DrawingIdentifier()
{
  return &type metadata for DrawingIdentifier;
}

ValueMetadata *type metadata accessor for MathExpressionEvaluationResult.CodingKeys()
{
  return &type metadata for MathExpressionEvaluationResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MathExpressionEvaluationResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC4614C + 4 * byte_1DDF393C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC46180 + 4 * byte_1DDF393C0[v4]))();
}

uint64_t sub_1DDC46180(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC46188(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC46190);
  return result;
}

uint64_t sub_1DDC4619C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC461A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC461A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC461B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MathExpression.CodingKeys()
{
  return &type metadata for MathExpression.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CalculateDocumentProvider.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDC46218 + 4 * byte_1DDF393CF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDC4624C + 4 * byte_1DDF393CA[v4]))();
}

uint64_t sub_1DDC4624C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC46254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC4625CLL);
  return result;
}

uint64_t sub_1DDC46268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC46270);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDC46274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC4627C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculateDocumentProvider.CodingKeys()
{
  return &type metadata for CalculateDocumentProvider.CodingKeys;
}

unint64_t lazy protocol witness table accessor for type DrawingIdentifier and conformance DrawingIdentifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier;
  if (!lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for DrawingIdentifier, &type metadata for DrawingIdentifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DrawingIdentifier and conformance DrawingIdentifier);
  }
  return result;
}

unint64_t specialized CalculateDocumentProvider.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CalculateDocumentProvider.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void UUID.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC46624()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  if (BYTE6(v1) != 16)
  {
    v5 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type CRCodingError and conformance CRCodingError();
    swift_allocError();
    strcpy(v6, "Invalid UUID.");
    *((_WORD *)v6 + 7) = -4864;
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *MEMORY[0x1E0D11EF8], v5);
    swift_willThrow();
    return outlined consume of Data._Representation(v3, v1);
  }
  if (v0)
  {
    *(_QWORD *)(v4 - 72) = v2;
    if (v0 == 1)
    {
      if ((int)v3 <= v3 >> 32)
      {
        if (!__DataStorage._bytes.getter())
        {
LABEL_17:
          __DataStorage._length.getter();
          __break(1u);
          goto LABEL_18;
        }
        if (!__OFSUB__((int)v3, __DataStorage._offset.getter()))
        {
          __DataStorage._length.getter();
          goto LABEL_13;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      __break(1u);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 16);
      swift_retain();
      swift_retain();
      if (!__DataStorage._bytes.getter())
      {
LABEL_18:
        __DataStorage._length.getter();
        __break(1u);
        JUMPOUT(0x1DDC468ECLL);
      }
      if (!__OFSUB__(v8, __DataStorage._offset.getter()))
      {
        __DataStorage._length.getter();
        swift_release();
        swift_release();
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_13:
  UUID.init(uuid:)();
  return outlined consume of Data._Representation(v3, v1);
}

unint64_t lazy protocol witness table accessor for type CRCodingError and conformance CRCodingError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError;
  if (!lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError)
  {
    v1 = type metadata accessor for CRCodingError();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D11F10], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError);
  }
  return result;
}

uint64_t UUID.data()()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t __src;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __src = UUID.uuid.getter();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  UUID.uuid.getter();
  return specialized Data.init(bytes:count:)(&__src, 16);
}

uint64_t specialized Data.init(bytes:count:)(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return specialized Data.InlineData.init(_:)(__src, &__src[a2]);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  type metadata accessor for Data.RangeReference();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t StepperButton.addTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8, v8);
    v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v6, sel_addTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

char *StepperButton.init(image:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  Class isa;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  Class v41;
  id v43;
  id v44;
  objc_super v45;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3518]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  v8 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  *(_QWORD *)&v7[v8] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v9 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration;
  *(_QWORD *)&v7[v9] = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_scale_, 7, 2, 19.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit13StepperButton_image] = a1;
  v44 = a1;

  v45.receiver = v7;
  v45.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v45, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  v12 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton];
  v13 = v10;
  objc_msgSend(v12, sel_setUserInteractionEnabled_, 1);
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v13, sel_addSubview_, v12);
  v43 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1DDF329D0;
  v15 = objc_msgSend(v12, sel_topAnchor);
  v16 = objc_msgSend(v13, sel_topAnchor);
  v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(_QWORD *)(v14 + 32) = v17;
  v18 = objc_msgSend(*(id *)&v10[v11], sel_leadingAnchor);
  v19 = objc_msgSend(v13, sel_leadingAnchor);
  v20 = objc_msgSend(v18, (SEL)&selRef_setData_withArchivedModelData_ + 6, v19);

  *(_QWORD *)(v14 + 40) = v20;
  v21 = objc_msgSend(*(id *)&v10[v11], sel_bottomAnchor);
  v22 = objc_msgSend(v13, sel_bottomAnchor);
  v23 = objc_msgSend(v21, (SEL)&selRef_setData_withArchivedModelData_ + 6, v22);

  *(_QWORD *)(v14 + 48) = v23;
  v24 = objc_msgSend(*(id *)&v10[v11], sel_trailingAnchor);
  v25 = objc_msgSend(v13, sel_trailingAnchor);
  v26 = objc_msgSend(v24, (SEL)&selRef_setData_withArchivedModelData_ + 6, v25);

  *(_QWORD *)(v14 + 56) = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_activateConstraints_, isa);

  v28 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  v29 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_image];
  v30 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration];
  v31 = *(id *)&v13[OBJC_IVAR____TtC8PaperKit13StepperButton_imageView];
  v32 = objc_msgSend(v29, sel_imageWithConfiguration_, v30);
  objc_msgSend(v31, sel_setImage_, v32);

  v33 = *(void **)&v13[v28];
  objc_msgSend(v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v10[v11], sel_addSubview_, v33);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DDF329E0;
  v35 = objc_msgSend(v33, sel_centerXAnchor);
  v36 = objc_msgSend(v13, sel_centerXAnchor);
  v37 = objc_msgSend(v35, sel_constraintEqualToAnchor_, v36);

  *(_QWORD *)(v34 + 32) = v37;
  v38 = objc_msgSend(*(id *)&v13[v28], sel_centerYAnchor);
  v39 = objc_msgSend(v13, sel_centerYAnchor);
  v40 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v39);

  *(_QWORD *)(v34 + 40) = v40;
  specialized Array._endMutation()();
  v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_activateConstraints_, v41);

  StepperButton.updateUI()();
  return v13;
}

void StepperButton.updateUI()()
{
  char *v0;
  objc_class *ObjectType;
  void *v2;
  void *v3;
  char **v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char **v11;
  char **v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  objc_super v17;
  objc_super v18;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton];
  v19.receiver = v0;
  v19.super_class = ObjectType;
  objc_msgSend(v2, sel_setEnabled_, objc_msgSendSuper2(&v19, sel_isEnabled));
  v18.receiver = v0;
  v18.super_class = ObjectType;
  LODWORD(v2) = objc_msgSendSuper2(&v18, sel_isHighlighted);
  v3 = (void *)objc_opt_self();
  v4 = &selRef_tertiarySystemFillColor;
  if (!(_DWORD)v2)
    v4 = &selRef_quaternarySystemFillColor;
  v5 = objc_msgSend(v3, *v4);
  objc_msgSend(v0, sel_setBackgroundColor_, v5);

  v6 = objc_msgSend(v0, sel_traitCollection);
  v7 = objc_msgSend(v6, sel_userInterfaceStyle);

  v8 = (void *)objc_opt_self();
  v9 = v8;
  if (v7 == (id)2)
    v10 = 1;
  else
    v10 = 2;
  if (v7 == (id)2)
    v11 = &selRef_systemGrayColor;
  else
    v11 = &selRef_systemGray3Color;
  if (v7 == (id)2)
    v12 = &selRef_systemGray3Color;
  else
    v12 = &selRef_systemGrayColor;
  v13 = objc_msgSend(v8, *v11);
  v14 = objc_msgSend(v9, *v12);
  v15 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit13StepperButton_imageView];
  v17.receiver = v0;
  v17.super_class = ObjectType;
  if (objc_msgSendSuper2(&v17, sel_isEnabled))
    v16 = v13;
  else
    v16 = v14;
  objc_msgSend(v15, sel_setTintColor_, v16);
  objc_msgSend(v15, sel_setOverrideUserInterfaceStyle_, v10);

}

id @objc StepperButton.isSelected.getter(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v5, *a3);
}

void @objc StepperButton.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  const char *v6;
  id v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  v6 = *a4;
  v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  StepperButton.updateUI()();

}

uint64_t StepperButton.removeTarget(_:action:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;

  v6 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton);
  outlined init with copy of Any?(a1, (uint64_t)v15);
  v7 = v16;
  if (v16)
  {
    v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    v9 = *(_QWORD *)(v7 - 8);
    v10 = MEMORY[0x1E0C80A78](v8, v8);
    v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v6, sel_removeTarget_action_forControlEvents_, v13, a2, a3);
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for StepperButton()
{
  return objc_opt_self();
}

void specialized StepperButton.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC8PaperKit13StepperButton_contentButton;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3518]), sel_init);
  v2 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  v3 = OBJC_IVAR____TtC8PaperKit13StepperButton_imageConfiguration;
  *(_QWORD *)&v0[v3] = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_scale_, 7, 2, 19.0);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL static CanvasCalculateDocumentIndex.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

void CanvasCalculateDocumentIndex.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

BOOL static CanvasCalculateDocumentIndex.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

Swift::Int CanvasCalculateDocumentIndex.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance CanvasCalculateDocumentIndex(double *a1, double *a2)
{
  return *a2 < *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CanvasCalculateDocumentIndex()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CanvasCalculateDocumentIndex()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL static CalculateDocumentExpressionSolvingBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CalculateDocumentExpressionSolvingBehavior.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CalculateDocumentExpressionSolvingBehavior.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CanvasCalculateDocument.document.getter()
{
  return 0;
}

uint64_t CanvasCalculateDocument.shouldAutosolveNewExpressions.getter()
{
  return 1;
}

uint64_t CanvasCalculateDocument.expression(withId:)()
{
  return 0;
}

uint64_t CanvasCalculateDocument.expression(for:)()
{
  return 0;
}

uint64_t CanvasCalculateDocument.graphableExpression(for:)@<X0>(uint64_t a1@<X8>)
{
  return CanvasCalculateDocument.graphableExpression(for:)(a1);
}

{
  uint64_t v2;

  v2 = type metadata accessor for GraphableExpression();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

unint64_t lazy protocol witness table accessor for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasCalculateDocumentIndex, &type metadata for CanvasCalculateDocumentIndex);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentIndex and conformance CanvasCalculateDocumentIndex);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior;
  if (!lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalculateDocumentExpressionSolvingBehavior, &type metadata for CalculateDocumentExpressionSolvingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalculateDocumentExpressionSolvingBehavior and conformance CalculateDocumentExpressionSolvingBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasCalculateDocumentIndex()
{
  return &type metadata for CanvasCalculateDocumentIndex;
}

uint64_t storeEnumTagSinglePayload for CalculateDocumentExpressionSolvingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDC47B24 + 4 * byte_1DDF39A55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDC47B58 + 4 * asc_1DDF39A50[v4]))();
}

uint64_t sub_1DDC47B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC47B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC47B68);
  return result;
}

uint64_t sub_1DDC47B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC47B7CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDC47B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC47B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculateDocumentExpressionSolvingBehavior()
{
  return &type metadata for CalculateDocumentExpressionSolvingBehavior;
}

uint64_t dispatch thunk of CanvasCalculateDocument.document.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.shouldAutosolveNewExpressions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.insert(_:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.move(_:toIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.remove(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.expression(withId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.expression(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CanvasCalculateDocument.graphableExpression(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocument.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of PaperKitCalculateDocumentAttachment.calculateDocumentExpressionSolvingBehavior.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

void AnyCanvasElementView.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t AnyCanvasElementView.isEditingCanvasElement.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  char *v36;
  uint64_t v37;

  v1 = v0;
  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v36 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v37 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v36 - v16;
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (char *)&v36 - v20;
  v22 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v23 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))(v19);
  if (v23)
  {
    v24 = v23;
    (*(void (**)(void))((*v22 & *v23) + 0x300))();

    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v26 = v25(v21, 0, 1, v2);
  }
  else
  {
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v26 = v25(v21, 1, 1, v2);
  }
  (*(void (**)(uint64_t))((*v22 & *v1) + 0xE0))(v26);
  v25(v17, 0, 1, v2);
  v27 = (uint64_t)&v9[*(int *)(v6 + 48)];
  outlined init with copy of CRKeyPath?((uint64_t)v21, (uint64_t)v9);
  outlined init with copy of CRKeyPath?((uint64_t)v17, v27);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v28((uint64_t)v9, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v29 = v28(v27, 1, v2);
    if (v29 == 1)
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    else
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    v32 = v37;
    outlined init with copy of CRKeyPath?((uint64_t)v9, v37);
    if (v28(v27, 1, v2) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v32, v2);
      v31 = 0;
      v30 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      v33 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v36, v27, v2);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(char *, uint64_t))(v3 + 8);
      v34(v33, v2);
      v30 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v34((char *)v32, v2);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, v30);
  return v31 & 1;
}

id AnyCanvasElementView.isElementFirstResponder.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_isFirstResponder);
}

uint64_t AnyCanvasElementView.resizeHandles.getter()
{
  _QWORD *v0;
  char v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
  if ((~v1 & 6) == 0)
    return specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of AnyCanvasElementView.resizeHandles.getter);
  if ((v1 & 2) != 0)
    return specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #1 of AnyCanvasElementView.resizeHandles.getter);
  return MEMORY[0x1E0DEE9E8];
}

double AnyCanvasElementView.subscript.getter()
{
  return 0.0;
}

double AnyCanvasElementView.selectionCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;

  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8))(v5);
  v3 = v5[1];
  *a1 = v5[0];
  a1[1] = v3;
  result = *(double *)&v6;
  a1[2] = v6;
  return result;
}

void __swiftcall AnyCanvasElementView.boundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  _QWORD *v1;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v7;
  CGFloat MinY;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v11;
  CGRect v12;
  CGRect v13;

  v12.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x138))();
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  v7 = -CGRectGetMinX(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  MinY = CGRectGetMinY(v13);
  CGAffineTransformMakeTranslation(&v11, v7, -MinY);
  v9 = *(_OWORD *)&v11.c;
  v10 = *(_OWORD *)&v11.tx;
  *(_OWORD *)&retstr->a = *(_OWORD *)&v11.a;
  *(_OWORD *)&retstr->c = v9;
  *(_OWORD *)&retstr->tx = v10;
}

void __swiftcall AnyCanvasElementView.paperBoundsTransform()(CGAffineTransform *__return_ptr retstr)
{
  _QWORD *v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  void *v6;
  CGFloat v7;
  CGFloat v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  CGAffineTransform v24;
  CGAffineTransform t2;
  _OWORD v26[2];
  double v27;
  double v28;
  CGAffineTransform t1;
  CGAffineTransform v30;
  char v31;

  v2 = v1;
  v4 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  v5 = MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = (void *)v5;
    (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0))(v26);
    v22 = v26[1];
    v23 = v26[0];
    v7 = v27;
    v8 = v28;
    AnyCanvasElementView.paperBoundsTransform()(&v30);
    CGAffineTransformMakeScale(&t1, v30.a, v30.a);
    v9 = *(_OWORD *)&t1.a;
    v10 = *(_OWORD *)&t1.c;
    v11 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v23;
    *(_OWORD *)&t1.c = v22;
    t1.tx = v7;
    t1.ty = v8;
    *(_OWORD *)&t2.a = v9;
    *(_OWORD *)&t2.c = v10;
    *(_OWORD *)&t2.tx = v11;
    CGAffineTransformConcat(&v24, &t1, &t2);
    a = v24.a;
    b = v24.b;
    c = v24.c;
    d = v24.d;
    tx = v24.tx;
    ty = v24.ty;

  }
  else
  {
    v18 = (void *)MEMORY[0x1DF0E666C](v4);
    if (v18)
    {

    }
    else
    {
      v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v20 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x88))();
      if (v20)
      {
        v21 = v20;
        (*(void (**)(_OWORD *__return_ptr))((*v19 & *v20) + 0x5B8))(v26);

        outlined init with take of CGAffineTransform?((uint64_t)v26, (uint64_t)&v30);
        if ((v31 & 1) == 0)
        {
          a = v30.a;
          b = v30.b;
          c = v30.c;
          d = v30.d;
          tx = v30.tx;
          ty = v30.ty;
          goto LABEL_6;
        }
      }
    }
    (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0))(&t1);
    a = t1.a;
    b = t1.b;
    c = t1.c;
    d = t1.d;
    tx = t1.tx;
    ty = t1.ty;
  }
LABEL_6:
  retstr->a = a;
  retstr->b = b;
  retstr->c = c;
  retstr->d = d;
  retstr->tx = tx;
  retstr->ty = ty;
}

Swift::Void __swiftcall AnyCanvasElementView.didBeginDrawing()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  id v3;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (v2)
  {
    v3 = v2;
    (*(void (**)())((*v1 & *v2) + 0x5C0))();

  }
}

Swift::Void __swiftcall AnyCanvasElementView.didEndDrawing()()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (v1)
  {
    v2 = (id)v1;
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

  }
}

Swift::Bool __swiftcall AnyCanvasElementView.intersects(_:canvasBounds:)(__C::CGRect _, __C::CGRect canvasBounds)
{
  _QWORD *v2;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  void *v7;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v12;
  CGFloat v13;
  double v14;
  double v15;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;

  height = _.size.height;
  width = _.size.width;
  y = _.origin.y;
  x = _.origin.x;
  v7 = (void *)MEMORY[0x1DF0E666C]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, (__n128)_.origin, *(__n128 *)&_.origin.y, (__n128)_.size, *(__n128 *)&_.size.height, (__n128)canvasBounds.origin, *(__n128 *)&canvasBounds.origin.y, (__n128)canvasBounds.size, *(__n128 *)&canvasBounds.size.height);
  if (!v7)
  {
    objc_msgSend(v2, sel_bounds);
    v12 = x;
    v13 = y;
    v14 = width;
    v15 = height;
    return CGRectIntersectsRect(v25, *(CGRect *)&v12);
  }

  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x190))(&v21);
  a = v21.a;
  b = v21.b;
  c = v21.c;
  d = v21.d;
  v20 = v21;
  ty = v21.ty;
  tx = v21.tx;
  v22.origin.x = 0.0;
  v22.origin.y = 0.0;
  v22.size.width = 1.0;
  v22.size.height = 1.0;
  v23 = CGRectApplyAffineTransform(v22, &v20);
  v26.origin.x = x;
  v26.origin.y = y;
  v26.size.width = width;
  v26.size.height = height;
  if (CGRectIntersectsRect(v23, v26))
  {
    v20.a = a;
    v20.b = b;
    v20.c = c;
    v20.d = d;
    v20.tx = tx;
    v20.ty = ty;
    CGAffineTransformInvert(&v19, &v20);
    v20 = v19;
    v24.origin.x = x;
    v24.origin.y = y;
    v24.size.width = width;
    v24.size.height = height;
    v25 = CGRectApplyAffineTransform(v24, &v20);
    v12 = 0.0;
    v13 = 0.0;
    v14 = 1.0;
    v15 = 1.0;
    return CGRectIntersectsRect(v25, *(CGRect *)&v12);
  }
  return 0;
}

id AnyCanvasElementView.dragInteractionPreviewForLifting(item:session:)()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_, v0);
}

void AnyCanvasElementView.identity.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.sharedCanvasElement.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id AnyCanvasElementView.init(frame:canvas:parentCanvasElement:)(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField] = 0;
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext] = 0;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v6[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected] = 0;
  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for AnyCanvasElementView();
  v13 = objc_msgSendSuper2(&v18, sel_initWithFrame_, a3, a4, a5, a6);
  v14 = objc_msgSend(v13, sel_layer);
  v15 = objc_msgSend((id)objc_opt_self(), sel_blueColor);
  v16 = objc_msgSend(v15, sel_CGColor);

  objc_msgSend(v14, sel_setBorderColor_, v16);
  return v13;
}

void AnyCanvasElementView.modelBounds.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.uneditedModelFrame.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.modelFrame.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.modelFrame.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.uneditedModelCoordinateSpace.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.modelCoordinateSpace.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.modelCoordinateSpace.setter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.uneditedModelHitTestPath.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.modelHitTestPath.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvasElementView.flags.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyCanvasElementView.isSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected);
}

uint64_t AnyCanvasElementView.isSelected.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = result;
  return result;
}

Swift::Void __swiftcall AnyCanvasElementView.updateFrame()()
{
  _QWORD *v0;
  CGFloat v1;
  double v2;
  CGFloat v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  _QWORD *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v9 = specialized static AnyCanvasElementView.convert(_:to:)(v8, v1, v3, v5, v7);
  v11 = v10;
  v13 = v12;
  v15 = v14;

  objc_msgSend(v0, sel_setFrame_, v9, v11, v13, v15);
  objc_msgSend(v0, sel_setNeedsLayout);
}

id AnyCanvasElementView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AnyCanvasElementView()
{
  return objc_opt_self();
}

void @objc AnyCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void))
{
  id v9;
  id v10;
  id v11;

  v9 = a3;
  v10 = a4;
  swift_unknownObjectRetain();
  v11 = a1;
  a6();

  swift_unknownObjectRelease();
}

void specialized AnyCanvasElementView.init(coder:)()
{
  _BYTE *v0;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField] = 0;
  v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double specialized static AnyCanvasElementView.convert(_:to:)(_QWORD *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  if (a1)
  {
    AnyCanvasElementView.paperBoundsTransform()(&v34);
    v31 = *(_OWORD *)&v34.a;
    v32 = *(_OWORD *)&v34.c;
    v30 = *(_OWORD *)&v34.tx;
    v10 = objc_msgSend(a1, sel_window);
    v11 = 1.0;
    v12 = 1.0;
    if (v10)
    {
      v13 = v10;
      v14 = objc_msgSend(v10, sel_screen);

      objc_msgSend(v14, sel_scale);
      v12 = v15;

    }
    v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v17 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x88))();
    if (v17)
    {
      v18 = v17;
      v19 = (void *)(*(uint64_t (**)(void))((*v16 & *v17) + 0x308))();

      if (v19)
      {
        objc_msgSend(v19, sel_zoomScale);
        v11 = v20;

      }
    }
    v22 = v31;
    v21 = v32;
    v23 = v30;
  }
  else
  {
    v21 = xmmword_1DDF33A30;
    v22 = xmmword_1DDF33970;
    v23 = 0uLL;
    v11 = 1.0;
    v12 = 1.0;
  }
  *(_OWORD *)&v33.a = v22;
  *(_OWORD *)&v33.c = v21;
  *(_OWORD *)&v33.tx = v23;
  v35.origin.x = a2;
  v35.origin.y = a3;
  v35.size.width = a4;
  v35.size.height = a5;
  v36 = CGRectApplyAffineTransform(v35, &v33);
  v37.origin.x = CGRect.rounded(scale:)(v11 * v12, v36.origin.x, v36.origin.y, v36.size.width, v36.size.height);
  x = v37.origin.x;
  y = v37.origin.y;
  width = v37.size.width;
  height = v37.size.height;
  MinX = CGRectGetMinX(v37);
  v38.origin.x = x;
  v38.origin.y = y;
  v38.size.width = width;
  v38.size.height = height;
  CGRectGetMinY(v38);
  v39.origin.x = x;
  v39.origin.y = y;
  v39.size.width = width;
  v39.size.height = height;
  CGRectGetWidth(v39);
  v40.origin.x = x;
  v40.origin.y = y;
  v40.size.width = width;
  v40.size.height = height;
  CGRectGetHeight(v40);
  return MinX;
}

void specialized AnyCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _BYTE *v4;

  *((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible) = 1;
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    v4 = v3;

    if (v3)
    {
      v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *((_BYTE *)v0
                                                                                        + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging);
      objc_msgSend(v4, sel_setHidden_);

    }
    else
    {
      __break(1u);
    }
  }
}

void specialized AnyCanvasElementView.contextMenuInteraction(_:willEndFor:animator:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _BYTE *v4;

  *((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isContextMenuInteractionVisible) = 0;
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    v4 = v3;

    if (v3)
    {
      v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = *((_BYTE *)v0
                                                                                        + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging);
      objc_msgSend(v4, sel_setHidden_);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t outlined init with take of CGAffineTransform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CRKeyPath?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath;
  if (!lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath)
  {
    v1 = type metadata accessor for CRKeyPath();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12C90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath);
  }
  return result;
}

double TextBox.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t TextBox.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t TextBox.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*TextBox.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

double TextBox.rotation.getter()
{
  double v1;

  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for TextBox()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextBox;
  if (!type metadata singleton initialization cache for TextBox)
    return swift_getSingletonMetadata();
  return result;
}

double key path getter for TextBox.rotation : TextBox@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for TextBox.rotation : TextBox()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t TextBox.rotation.setter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$rotation.getter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for TextBox.$rotation : TextBox(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t TextBox.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*TextBox.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for TextBox() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t TextBox.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TextBox() + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TextBox.text.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TextBox() + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*TextBox.text.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextBox();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t TextBox.isFixedWidth.getter()
{
  unsigned __int8 v1;

  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for TextBox.isFixedWidth : TextBox@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for TextBox.isFixedWidth : TextBox()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  return CRRegister.wrappedValue.setter();
}

uint64_t TextBox.isFixedWidth.setter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*TextBox.isFixedWidth.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t TextBox.$isFixedWidth.getter()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for TextBox.$isFixedWidth : TextBox(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t TextBox.$isFixedWidth.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for TextBox();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*TextBox.$isFixedWidth.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for TextBox() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t TextBox.additionalFields.getter()
{
  type metadata accessor for TextBox();
  return swift_bridgeObjectRetain();
}

uint64_t TextBox.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TextBox() + 32);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*TextBox.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for TextBox();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static TextBox.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F040EEE8;
  v4 = qword_1F040EEF0;
  v3 = unk_1F040EEF8;
  v5 = qword_1F040EF00;
  v6 = qword_1F040EF08;
  v7 = qword_1F040EF10;
  v8 = qword_1F040EF18;
  v10 = qword_1F040EF20;
  v9 = *(_QWORD *)byte_1F040EF28;
  v11 = qword_1F040EF30;
  v12 = qword_1F040EF38;
  *a1 = static TextBox.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t TextBox.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for TextBox();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v2 + 32)) = MEMORY[0x1E0DEE9E0];
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope;
  if (!lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope, &type metadata for TextAttributeScope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope and conformance TextAttributeScope);
  }
  return result;
}

uint64_t TextBox.minAppFormatVersion.getter()
{
  return 2;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.minEncodingVersion.getter();
}

uint64_t protocol witness for static CRStruct_Base_4.fields.getter in conformance TextBox@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F040EEE8;
  v4 = qword_1F040EEF0;
  v3 = unk_1F040EEF8;
  v5 = qword_1F040EF00;
  v6 = qword_1F040EF08;
  v7 = qword_1F040EF10;
  v8 = qword_1F040EF18;
  v10 = qword_1F040EF20;
  v9 = *(_QWORD *)byte_1F040EF28;
  v11 = qword_1F040EF30;
  v12 = qword_1F040EF38;
  *a1 = static TextBox.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v9;
  a1[10] = v11;
  a1[11] = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return static CRStruct_4.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.init() in conformance TextBox@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a2 + *(int *)(a1 + 32)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRStruct_4.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance TextBox()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  return CRDT.init(serializedData:)();
}

uint64_t TextBox.textResizeBehavior.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  result = CRRegister.wrappedValue.getter();
  if (v4 == 1)
    v3 = 2;
  else
    v3 = 3;
  *a1 = v3;
  return result;
}

uint64_t protocol witness for ShapeTextBox.text.getter in conformance TextBox@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for ShapeTextBox.text.setter in conformance TextBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

_BYTE *protocol witness for ShapeTextBox.textResizeBehavior.setter in conformance TextBox(_BYTE *result)
{
  if ((*result & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
    return (_BYTE *)CRRegister.wrappedValue.setter();
  }
  return result;
}

uint64_t protocol witness for ShapeTextBox.isFixedWidth.getter in conformance TextBox()
{
  unsigned __int8 v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  return v1;
}

void protocol witness for ShapeTextBox.textContentType.getter in conformance TextBox(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.getter in conformance TextBox@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for ShapeTextBox.emptyStringAttributes.setter in conformance TextBox(uint64_t a1)
{
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

double protocol witness for ShapeTextBox.opacity.getter in conformance TextBox()
{
  return 1.0;
}

uint64_t TextBox.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 3;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t TextBox.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t TextBox.indexableTextContent<A>(in:)()
{
  return specialized TextBox.indexableTextContent<A>(in:)();
}

uint64_t TextBox.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = v4;
  outlined init with take of CGRect?(a4 + 24, v5 + 16);
  return swift_task_switch();
}

uint64_t TextBox.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  CGContext *v1;
  uint64_t v2;
  double v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;

  v1 = *(CGContext **)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v2, v0 + 16);
  specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(v2, v1, v3, v4, v5, v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(uint64_t a1, CGContext *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  CGFloat a;
  double MidX;
  double MidY;
  CGFloat v31;
  CGFloat tx;
  CGFloat ty;
  CGFloat v34;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGContext *v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  CGContext *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  __int128 v65;
  __int128 v66;
  CGAffineTransform v67;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v70;
  CGRect v71;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  *(_QWORD *)&v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v59 - v18;
  v20 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  *(_QWORD *)&v65 = *(_QWORD *)(v13 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v65)(v19, v20, v12);
  v21 = (void *)CRAttributedString.attributedString.getter();
  v22 = objc_msgSend(v21, sel_string);

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  if (v23)
    v26 = 0;
  else
    v26 = v25 == 0xE000000000000000;
  if (v26)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    if ((v27 & 1) == 0)
    {
      CGContextSaveGState(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.value.getter();
      a = t1.a;
      v70.origin.x = a3;
      v70.origin.y = a4;
      v70.size.width = a5;
      v70.size.height = a6;
      MidX = CGRectGetMidX(v70);
      v71.origin.x = a3;
      v71.origin.y = a4;
      v71.size.width = a5;
      v71.size.height = a6;
      MidY = CGRectGetMidY(v71);
      CGAffineTransformMakeRotation(&t1, a);
      v60 = *(_OWORD *)&t1.a;
      v59 = *(_OWORD *)&t1.c;
      v31 = -MidX;
      tx = t1.tx;
      ty = t1.ty;
      CGAffineTransformMakeTranslation(&t1, v31, -MidY);
      v34 = t1.a;
      b = t1.b;
      v64 = a4;
      v63 = a3;
      c = t1.c;
      d = t1.d;
      v62 = a6;
      v61 = a5;
      v38 = t1.tx;
      v39 = t1.ty;
      *(_OWORD *)&t2.a = v60;
      *(_OWORD *)&t2.c = v59;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v67, &t1, &t2);
      v60 = *(_OWORD *)&v67.a;
      v59 = *(_OWORD *)&v67.c;
      v40 = v67.tx;
      v41 = v67.ty;
      t1.a = v34;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v38;
      t1.ty = v39;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v60;
      *(_OWORD *)&t1.c = v59;
      t1.tx = v40;
      t1.ty = v41;
      CGAffineTransformConcat(&v67, &t1, &t2);
      t1 = v67;
      v42 = a2;
      CGContextConcatCTM(a2, &t1);
      UIGraphicsPushContext(a2);
      v43 = objc_allocWithZone(MEMORY[0x1E0DC12C0]);
      v44 = objc_msgSend(v43, sel_initWithSize_, v61, v62);
      v62 = *(double *)&v44;
      v45 = v66;
      ((void (*)(_QWORD, uint64_t, uint64_t))v65)(v66, v20, v12);
      v46 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
      v47 = CRTextStorage.init(_:)(v45);
      v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12F0]), sel_init);
      v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C8]), sel_init);
      objc_msgSend(v49, sel_setTextStorage_, v47);
      objc_msgSend(v49, sel_addTextLayoutManager_, v48);
      objc_msgSend(v48, sel_setTextContainer_, v44);
      v50 = objc_msgSend(v48, sel_documentRange);
      v51 = objc_msgSend(v50, sel_location);

      CGAffineTransformMakeTranslation(&t1, v63, v64);
      v66 = *(_OWORD *)&t1.a;
      v65 = *(_OWORD *)&t1.c;
      v52 = *(_OWORD *)&t1.tx;
      v53 = swift_allocObject();
      v54 = v65;
      *(_OWORD *)(v53 + 16) = v66;
      *(_OWORD *)(v53 + 32) = v54;
      *(_OWORD *)(v53 + 48) = v52;
      *(_QWORD *)(v53 + 64) = v42;
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = partial apply for closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:);
      *(_QWORD *)(v55 + 24) = v53;
      *(_QWORD *)&t1.tx = partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(_QWORD *)&t1.ty = v55;
      *(_QWORD *)&t1.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&t1.b = 1107296256;
      *(_QWORD *)&t1.c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(_QWORD *)&t1.d = &block_descriptor_28;
      v56 = _Block_copy(&t1);
      swift_unknownObjectRetain();
      v57 = v42;
      swift_retain();
      swift_release();
      v58 = objc_msgSend(v48, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v51, 4, v56);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();

      _Block_release(v56);
      LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v47 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        UIGraphicsPopContext();
        CGContextRestoreGState(v57);
      }
    }
  }
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  CGFloat a;
  double MidX;
  double MidY;
  CGFloat v31;
  CGFloat tx;
  CGFloat ty;
  CGFloat v34;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGContext *v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  void *v56;
  CGContext *v57;
  id v58;
  __int128 v59;
  __int128 v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  __int128 v65;
  __int128 v66;
  CGAffineTransform v67;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v70;
  CGRect v71;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  *(_QWORD *)&v66 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v59 - v18;
  v20 = a1 + *(int *)(type metadata accessor for TextBox() + 24);
  *(_QWORD *)&v65 = *(_QWORD *)(v13 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v65)(v19, v20, v12);
  v21 = (void *)CRAttributedString.attributedString.getter();
  v22 = objc_msgSend(v21, sel_string);

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25 = v24;

  if (v23)
    v26 = 0;
  else
    v26 = v25 == 0xE000000000000000;
  if (v26)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    if ((v27 & 1) == 0)
    {
      CGContextSaveGState(a2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      CRRegister.wrappedValue.getter();
      a = t1.a;
      v70.origin.x = a3;
      v70.origin.y = a4;
      v70.size.width = a5;
      v70.size.height = a6;
      MidX = CGRectGetMidX(v70);
      v71.origin.x = a3;
      v71.origin.y = a4;
      v71.size.width = a5;
      v71.size.height = a6;
      MidY = CGRectGetMidY(v71);
      CGAffineTransformMakeRotation(&t1, a);
      v60 = *(_OWORD *)&t1.a;
      v59 = *(_OWORD *)&t1.c;
      v31 = -MidX;
      tx = t1.tx;
      ty = t1.ty;
      CGAffineTransformMakeTranslation(&t1, v31, -MidY);
      v34 = t1.a;
      b = t1.b;
      v64 = a4;
      v63 = a3;
      c = t1.c;
      d = t1.d;
      v62 = a6;
      v61 = a5;
      v38 = t1.tx;
      v39 = t1.ty;
      *(_OWORD *)&t2.a = v60;
      *(_OWORD *)&t2.c = v59;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v67, &t1, &t2);
      v60 = *(_OWORD *)&v67.a;
      v59 = *(_OWORD *)&v67.c;
      v40 = v67.tx;
      v41 = v67.ty;
      t1.a = v34;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v38;
      t1.ty = v39;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v60;
      *(_OWORD *)&t1.c = v59;
      t1.tx = v40;
      t1.ty = v41;
      CGAffineTransformConcat(&v67, &t1, &t2);
      t1 = v67;
      v42 = a2;
      CGContextConcatCTM(a2, &t1);
      UIGraphicsPushContext(a2);
      v43 = objc_allocWithZone(MEMORY[0x1E0DC12C0]);
      v44 = objc_msgSend(v43, sel_initWithSize_, v61, v62);
      v62 = *(double *)&v44;
      v45 = v66;
      ((void (*)(_QWORD, uint64_t, uint64_t))v65)(v66, v20, v12);
      v46 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
      v47 = CRTextStorage.init(_:)(v45);
      v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12F0]), sel_init);
      v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C8]), sel_init);
      objc_msgSend(v49, sel_setTextStorage_, v47);
      objc_msgSend(v49, sel_addTextLayoutManager_, v48);
      objc_msgSend(v48, sel_setTextContainer_, v44);
      v50 = objc_msgSend(v48, sel_documentRange);
      v51 = objc_msgSend(v50, sel_location);

      CGAffineTransformMakeTranslation(&t1, v63, v64);
      v66 = *(_OWORD *)&t1.a;
      v65 = *(_OWORD *)&t1.c;
      v52 = *(_OWORD *)&t1.tx;
      v53 = swift_allocObject();
      v54 = v65;
      *(_OWORD *)(v53 + 16) = v66;
      *(_OWORD *)(v53 + 32) = v54;
      *(_OWORD *)(v53 + 48) = v52;
      *(_QWORD *)(v53 + 64) = v42;
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)partial apply;
      *(_QWORD *)(v55 + 24) = v53;
      *(_QWORD *)&t1.tx = thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)partial apply;
      *(_QWORD *)&t1.ty = v55;
      *(_QWORD *)&t1.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&t1.b = 1107296256;
      *(_QWORD *)&t1.c = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      *(_QWORD *)&t1.d = &block_descriptor_24_0;
      v56 = _Block_copy(&t1);
      swift_unknownObjectRetain();
      v57 = v42;
      swift_retain();
      swift_release();
      v58 = objc_msgSend(v48, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v51, 4, v56);

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();

      _Block_release(v56);
      LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v47 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        UIGraphicsPopContext();
        CGContextRestoreGState(v57);
      }
    }
  }
}

double specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  CGFloat v19;
  char x_low;
  double v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double MidX;
  uint64_t v33;
  CGRect v34;
  char v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  x = v34.origin.x;
  y = v34.origin.y;
  width = v34.size.width;
  height = v34.size.height;
  v17 = type metadata accessor for Shape();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, a1 + *(int *)(v17 + 52), v4);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  v19 = v34.origin.x;
  CRRegister.wrappedValue.getter();
  x_low = LOBYTE(v34.origin.x);
  outlined init with take of CGRect?(a2, (uint64_t)&v34);
  if ((v35 & 1) == 0)
  {
    v21 = CGRectGetWidth(v34) + -48.0;
    if ((x_low & 1) != 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v21 = 1.79769313e308;
  if ((x_low & 1) == 0)
  {
LABEL_5:
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    v21 = CGRectGetWidth(v36);
  }
LABEL_6:
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, v21, 1.79769313e308);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1280]), sel_init);
  objc_msgSend(v23, sel_addTextContainer_, v22);
  v18(v8, (uint64_t)v12, v4);
  v24 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  v25 = CRTextStorage.init(_:)((uint64_t)v8);
  objc_msgSend(v25, sel_addLayoutManager_, v23);
  objc_msgSend(v23, sel_usedRectForTextContainer_, v22);
  v28 = v27;
  if (v19 == 0.0)
  {
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    v30 = CGRectGetMidX(v37) - v28 * 0.5;
    v38.origin.x = x;
    v38.origin.y = y;
    v38.size.width = width;
    v38.size.height = height;
    CGRectGetMidY(v38);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  else if ((LOBYTE(v19) & 1) != 0)
  {
    v39.origin.x = x;
    v39.origin.y = y;
    v39.size.width = width;
    v39.size.height = height;
    MidX = CGRectGetMidX(v39);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    return MidX + v28 * -0.5;
  }
  else
  {
    v29 = v26;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);

    return x + v29;
  }
  return v30;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CGFloat y;
  double x;
  CGFloat height;
  CGFloat width;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  int x_low;
  double v21;
  id v22;
  id v23;
  id v24;
  id v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double MidX;
  uint64_t v33;
  CGRect v34;
  char v35;
  CGRect v36;
  CGRect v37;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v33 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  x = v34.origin.x;
  y = v34.origin.y;
  width = v34.size.width;
  height = v34.size.height;
  v17 = type metadata accessor for TextBox();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v12, a1 + *(int *)(v17 + 24), v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  CRRegister.wrappedValue.getter();
  if (LOBYTE(v34.origin.x) == 1)
    v19 = 2;
  else
    v19 = 3;
  CRRegister.wrappedValue.getter();
  x_low = LOBYTE(v34.origin.x);
  outlined init with take of CGRect?(a2, (uint64_t)&v34);
  if ((v35 & 1) == 0)
  {
    v21 = CGRectGetWidth(v34) + -48.0;
    if (!x_low)
      goto LABEL_9;
    goto LABEL_8;
  }
  v21 = 1.79769313e308;
  if (x_low)
  {
LABEL_8:
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    v21 = CGRectGetWidth(v36);
  }
LABEL_9:
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, v21, 1.79769313e308);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1280]), sel_init);
  objc_msgSend(v23, sel_addTextContainer_, v22);
  v18(v8, (uint64_t)v12, v4);
  v24 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  v25 = CRTextStorage.init(_:)((uint64_t)v8);
  objc_msgSend(v25, sel_addLayoutManager_, v23);
  objc_msgSend(v23, sel_usedRectForTextContainer_, v22);
  v28 = v27;
  if ((v19 & 1) != 0)
  {
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    MidX = CGRectGetMidX(v37);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    return MidX + v28 * -0.5;
  }
  else
  {
    v29 = v26;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);

    return x + v29;
  }
}

__C::CGRect __swiftcall TextBox.renderFrame(in:)(__C::CGRect_optional *in)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double MidX;
  double MidY;
  CGFloat v11;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGAffineTransform v30;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v33;
  CGRect v34;
  CGRect v35;

  v2 = specialized static ShapeTextBoxRendering.unrotatedRenderFrame<A>(_:in:)(v1, (uint64_t)in);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v28 = v4 - v8 * 0.0;
  v29 = v2 - v6 * 0.0;
  v33.origin.x = v2;
  v33.origin.y = v4;
  v33.size.width = v6;
  v26 = v6;
  v27 = v8;
  v33.size.height = v8;
  MidX = CGRectGetMidX(v33);
  v34.origin.x = v2;
  v34.origin.y = v4;
  v34.size.width = v6;
  v34.size.height = v8;
  MidY = CGRectGetMidY(v34);
  CGAffineTransformMakeRotation(&t1, t1.a);
  v22 = *(_OWORD *)&t1.c;
  v24 = *(_OWORD *)&t1.a;
  v11 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v11);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v18 = t1.tx;
  v19 = t1.ty;
  *(_OWORD *)&t2.a = v24;
  *(_OWORD *)&t2.c = v22;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v30, &t1, &t2);
  v23 = *(_OWORD *)&v30.c;
  v25 = *(_OWORD *)&v30.a;
  v20 = v30.tx;
  v21 = v30.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v18;
  t1.ty = v19;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v25;
  *(_OWORD *)&t1.c = v23;
  t1.tx = v20;
  t1.ty = v21;
  CGAffineTransformConcat(&v30, &t1, &t2);
  t1.a = v26;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = v27;
  t1.tx = v29;
  t1.ty = v28;
  t2 = v30;
  CGAffineTransformConcat(&v30, &t1, &t2);
  t1 = v30;
  v35.origin.x = 0.0;
  v35.origin.y = 0.0;
  v35.size.width = 1.0;
  v35.size.height = 1.0;
  return (__C::CGRect)CGRectApplyAffineTransform(v35, &t1);
}

Swift::Void __swiftcall TextBox.apply(_:)(CGAffineTransform *a1)
{
  CGFloat tx;
  CGFloat ty;
  __int128 v4;
  __int128 v5;
  CGAffineTransform v6;
  CGAffineTransform t2;
  CGAffineTransform v8;
  CGAffineTransform t1;

  v4 = *(_OWORD *)&a1->c;
  v5 = *(_OWORD *)&a1->a;
  tx = a1->tx;
  ty = a1->ty;
  specialized CanvasElement.coordinateSpace.getter(&v8);
  t1 = v8;
  *(_OWORD *)&t2.a = v5;
  *(_OWORD *)&t2.c = v4;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v6, &t1, &t2);
  t1 = v6;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1);
  type metadata accessor for TextBox();
  CRAttributedString<>.apply(_:)(&a1->a);
}

void TextBox.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, __C::CGRect_optional *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  id v38;
  uint64_t v39;
  void *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  CGFloat MinX;
  double v46;
  CGFloat v47;
  uint64_t v48;
  id v49;
  id v50;
  Class isa;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE v64[4];
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __C::CGRect_optional *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[9];
  __int16 v85;
  char v86;
  __C::CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  CGRect v93;

  v9 = v8;
  v81 = a5;
  v82 = a7;
  v69 = (__C::CGRect_optional *)a2;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v64[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v83 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80, v19);
  v79 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = type metadata accessor for Date();
  v21 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v22);
  v24 = &v64[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = *a1;
  v78 = *a6;
  v77 = a6[1];
  v76 = a6[2];
  v75 = a6[3];
  v74 = a6[4];
  v73 = a6[5];
  v72 = a6[6];
  v71 = a6[7];
  v70 = a6[8];
  v25 = *((unsigned __int8 *)a6 + 74);
  v26 = *((unsigned __int16 *)a6 + 36);
  type metadata accessor for CanvasElementPDFAnnotation();
  v27 = swift_dynamicCastClass();
  if (v27)
  {
    v28 = (void *)v27;
    v66 = a8;
    v65 = v26 | (v25 << 16);
    *(_BYTE *)(v27 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;
    v32 = a3;
    v33 = (void *)MEMORY[0x1DF0E41AC](v29, v31);
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setType_, v33);

    v87 = TextBox.renderFrame(in:)(a4);
    x = v87.origin.x;
    y = v87.origin.y;
    width = v87.size.width;
    height = v87.size.height;
    v38 = objc_msgSend(v28, sel_page);
    v39 = v9;
    if (v38)
    {
      v40 = v38;
      objc_msgSend(v38, sel_boundsForBox_, 0);
      v42 = v41;
      v44 = v43;

      v88.origin.x = x;
      v88.origin.y = y;
      v88.size.width = width;
      v88.size.height = height;
      MinX = CGRectGetMinX(v88);
      v89.origin.x = x;
      v89.origin.y = y;
      v89.size.width = width;
      v89.size.height = height;
      v46 = v44 + v42 + v42 - CGRectGetMaxY(v89);
      v90.origin.x = x;
      v90.origin.y = y;
      v90.size.width = width;
      v90.size.height = height;
      v47 = CGRectGetWidth(v90);
      v91.origin.x = x;
      v91.origin.y = y;
      v91.size.width = width;
      v91.size.height = height;
      height = CGRectGetHeight(v91);
      width = v47;
      x = MinX;
      y = v46;
    }
    v48 = v83;
    v49 = v32;
    v92.origin.x = x;
    v92.origin.y = y;
    v92.size.width = width;
    v92.size.height = height;
    v93 = CGRectIntegral(v92);
    objc_msgSend(v28, sel_setBounds_, v93.origin.x, v93.origin.y, v93.size.width, v93.size.height);

    v50 = v49;
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v24, v68);
    objc_msgSend(v28, sel_setModificationDate_, isa);

    outlined init with copy of SharedTagged_9<TaggedCanvasElement>?((uint64_t)v69, (uint64_t)v18);
    v52 = v80;
    v53 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48))(v18, 1, v80);
    v54 = v66;
    if (v53 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v56 = v81;
      v55 = v82;
LABEL_12:
      v84[0] = v78;
      v84[1] = v77;
      v84[2] = v76;
      v84[3] = v75;
      v84[4] = v74;
      v84[5] = v73;
      v84[6] = v72;
      v84[7] = v71;
      v84[8] = v70;
      v85 = v65;
      v86 = BYTE2(v65);
      v63 = type metadata accessor for TextBox();
      CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)((uint64_t)a4, v39, v56, (uint64_t)v84, v55, v63, v54, (uint64_t)&protocol witness table for TextBox);

      return;
    }
    v69 = a4;
    v83 = v9;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v48 + 32))(v79, v18, v52);
    v57 = v67;
    v58 = v67;
    v56 = v81;
    if (v67 >> 62)
    {
      if (v67 >> 62 != 1)
      {
        (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v79, v52);
        v55 = v82;
        goto LABEL_11;
      }
      v58 = v67 & 0x3FFFFFFFFFFFFFFFLL;
    }
    outlined copy of PaperDocument.PDFDocumentUse(v67);
    v59 = type metadata accessor for TextBox();
    v60 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    v61 = (void *)v58;
    v62 = v79;
    v55 = v82;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v61, (uint64_t)v79, 1, v56, v59, v82, v60, (char *)&protocol witness table for TextBox, v54);
    outlined consume of PaperDocument.PDFDocumentUse(v57);
    (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v62, v52);
LABEL_11:
    v39 = v83;
    a4 = v69;
    goto LABEL_12;
  }
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance TextBox(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 3;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance TextBox()
{
  return specialized TextBox.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for CanvasElement.apply(_:) in conformance TextBox(double *a1)
{
  CGFloat v2;
  CGFloat v3;
  __int128 v5;
  __int128 v6;
  CGAffineTransform v7;
  CGAffineTransform t2;
  CGAffineTransform v9;
  CGAffineTransform t1;

  v5 = *((_OWORD *)a1 + 1);
  v6 = *(_OWORD *)a1;
  v2 = a1[4];
  v3 = a1[5];
  specialized CanvasElement.coordinateSpace.getter(&v9);
  t1 = v9;
  *(_OWORD *)&t2.a = v6;
  *(_OWORD *)&t2.c = v5;
  t2.tx = v2;
  t2.ty = v3;
  CGAffineTransformConcat(&v7, &t1, &t2);
  t1 = v7;
  specialized CanvasElement.coordinateSpace.setter((uint64_t)&t1);
  return CRAttributedString<>.apply(_:)(a1);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance TextBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = v4;
  outlined init with take of CGRect?(a4 + 24, v5 + 16);
  return swift_task_switch();
}

uint64_t specialized TextBox.indexableTextContent<A>(in:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32CF0;
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v1 = (void *)CRAttributedString.attributedString.getter();
  v2 = objc_msgSend(v1, sel_string);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *(_QWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 40) = v5;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t outlined init with copy of SharedTagged_9<TaggedCanvasElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for CRStruct_Base_4 in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t base witness table accessor for CRStruct_Base in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_3 : CRDT in TextBox()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>, MEMORY[0x1E0D12590]);
}

uint64_t associated type witness table accessor for CRStruct_Base_4.Type_4 : CRDT in TextBox()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Bool> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Bool>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t base witness table accessor for CRMergeable in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t base witness table accessor for CRType in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in TextBox()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_4<TextBox> and conformance CRStructMergeableDelta_4<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_4<TextBox>, MEMORY[0x1E0D12758]);
}

uint64_t base witness table accessor for CRCodable in TextBox()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t sub_1DDC4CBF8()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDC4CC38()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDC4CC90()
{
  type metadata accessor for TextBox();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for TextBox(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TextBox(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for TextBox(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextBox()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC4D2D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_9;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[8]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for TextBox()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC4D3E4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_9;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Bool>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void type metadata completion function for TextBox()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEF040], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D11780]);
    if (v1 <= 0x3F)
    {
      _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope, (uint64_t)&type metadata for TextAttributeScope, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D12568]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Bool>();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

void type metadata accessor for CRRegister<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<Bool>)
  {
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Bool>);
  }
}

uint64_t sub_1DDC4D6A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(void *a1)
{
  uint64_t v1;

  return closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(a1, (double *)(v1 + 16), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1DDC4D6D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t sub_1DDC4D700()
{
  return swift_deallocObject();
}

void CanvasCollaborationAvatarView.update(animated:)(char a1)
{
  char *v1;
  id v3;
  id v4;
  id v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id (*v28)();
  uint64_t v29;

  v3 = objc_msgSend(v1, sel_superview);

  if (v3 && (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] & 1) == 0)
  {
    CanvasCollaborationAvatarView.updateImage()();
    CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(0);
    v4 = CanvasCollaborationAvatarView.label.getter();
    v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v4, sel_setFont_, v5);

    objc_msgSend(v1, sel_setBackgroundColor_, *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_color]);
    if ((a1 & 1) != 0)
      v6 = 0.375;
    else
      v6 = 0.0;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v1;
    v8 = v1;
    v9 = objc_msgSend(v8, sel_layer);
    objc_msgSend(v9, sel_setMasksToBounds_, 1);

    v10 = objc_msgSend(v8, sel_layer);
    v11 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v11, sel_lineHeight);
    v13 = v12;

    v14 = 15.0;
    if (v13 + 6.0 > 30.0)
      v14 = (v13 + 6.0) * 0.5;
    objc_msgSend(v10, sel_setCornerRadius_, v14);

    v15 = CanvasCollaborationAvatarView.label.getter();
    v16 = (void *)MEMORY[0x1DF0E41AC](*(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name], *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name + 8]);
    objc_msgSend(v15, sel_setText_, v16);

    objc_msgSend(v8, sel_layoutIfNeeded);
    v17 = (void *)objc_opt_self();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v8;
    v28 = partial apply for closure #2 in CanvasCollaborationAvatarView.update(animated:);
    v29 = v18;
    v19 = MEMORY[0x1E0C809B0];
    v24 = MEMORY[0x1E0C809B0];
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v27 = &block_descriptor_29;
    v20 = _Block_copy(&v24);
    v21 = v8;
    swift_release();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = partial apply for closure #1 in CanvasCollaborationAvatarView.update(animated:);
    *(_QWORD *)(v22 + 24) = v7;
    v28 = (id (*)())partial apply for closure #2 in closure #1 in StickerDragPreviewContainerView._animateLiftCancellation(alongside:completion:);
    v29 = v22;
    v24 = v19;
    v25 = 1107296256;
    v26 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
    v27 = &block_descriptor_9_1;
    v23 = _Block_copy(&v24);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v20, v23, v6, 0.0, 0.85, 0.0);
    swift_release();
    _Block_release(v23);
    _Block_release(v20);
  }
}

void CanvasCollaborationAvatarView.frameAnchorPoint.setter(double a1, double a2)
{
  char *v2;
  double *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  void *v11;
  _QWORD v12[6];

  v3 = (double *)&v2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint];
  *v3 = a1;
  v3[1] = a2;
  CanvasCollaborationAvatarView.update(animated:)(0);
  v4 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
  v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
  if (v5)
    objc_msgSend(v5, sel_invalidate);
  v6 = (void *)objc_opt_self();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v2;
  v12[4] = partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer();
  v12[5] = v7;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v12[3] = &block_descriptor_23;
  v8 = _Block_copy(v12);
  v9 = v2;
  swift_release();
  v10 = objc_msgSend(v6, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v8, 5.0);
  _Block_release(v8);
  v11 = *(void **)&v2[v4];
  *(_QWORD *)&v2[v4] = v10;

}

id CanvasCollaborationAvatarView.init(name:color:boundingSuperview:fetchImage:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  _BYTE *v7;
  objc_class *ObjectType;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  Class isa;
  objc_super v31;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType();
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;
  v15 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name];
  *v15 = a1;
  v15[1] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_color] = a3;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview] = a4;
  v16 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage];
  *v16 = a5;
  v16[1] = a6;
  v17 = &v7[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint];
  *v17 = 0;
  v17[1] = 0;
  v31.receiver = v7;
  v31.super_class = ObjectType;
  v18 = a3;
  v19 = a4;
  swift_retain();
  v20 = objc_msgSendSuper2(&v31, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v20, sel_setAlpha_, 0.0);
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v20, sel_handleTap_);
  objc_msgSend(v20, sel_addGestureRecognizer_, v21);

  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3858]), sel_initWithTarget_action_, v20, sel_handleHoverWithRecognizer_);
  objc_msgSend(v20, sel_addGestureRecognizer_, v22);

  v23 = v20;
  v24 = CanvasCollaborationAvatarView.imageView.getter();
  objc_msgSend(v23, sel_addSubview_, v24);

  v25 = v23;
  v26 = CanvasCollaborationAvatarView.label.getter();
  objc_msgSend(v25, sel_addSubview_, v26);

  v27 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1DDF329D0;
  *(_QWORD *)(v28 + 32) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint, (SEL *)&selRef_topAnchor);
  *(_QWORD *)(v28 + 40) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint, (SEL *)&selRef_bottomAnchor);
  *(_QWORD *)(v28 + 48) = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint, (SEL *)&selRef_leadingAnchor);
  *(_QWORD *)(v28 + 56) = CanvasCollaborationAvatarView.imageViewWidthConstraint.getter();
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, sel_activateConstraints_, isa);

  CanvasCollaborationAvatarView.update(animated:)(0);
  swift_release();
  return v25;
}

id CanvasCollaborationAvatarView.imageView.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id CanvasCollaborationAvatarView.label.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v5 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
    objc_msgSend(v4, sel_setTextColor_, v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id CanvasCollaborationAvatarView.imageViewTopConstraint.getter(uint64_t *a1, SEL *a2)
{
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v3 = *a1;
  v4 = *(void **)&v2[*a1];
  if (v4)
  {
    v5 = *(id *)&v2[*a1];
  }
  else
  {
    v7 = CanvasCollaborationAvatarView.imageView.getter();
    v8 = objc_msgSend(v7, *a2);

    v9 = objc_msgSend(v2, *a2);
    v10 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v9);

    v11 = *(void **)&v2[v3];
    *(_QWORD *)&v2[v3] = v10;
    v5 = v10;

    v4 = 0;
  }
  v12 = v4;
  return v5;
}

id CanvasCollaborationAvatarView.imageViewWidthConstraint.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  int v6;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;
  id v12;
  double v13;
  id v14;
  void *v15;
  id v16;

  v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint;
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint];
  }
  else
  {
    v4 = CanvasCollaborationAvatarView.imageView.getter();
    v5 = objc_msgSend(v4, sel_widthAnchor);

    v6 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
    v7 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v7, sel_lineHeight);
    v9 = v8;

    if (v9 + 6.0 > 30.0)
      v10 = v9 + 6.0;
    else
      v10 = 30.0;
    if (v6 == 1)
    {
      v11 = objc_msgSend(v0, sel_traitCollection);
      v12 = objc_msgSend(v11, sel_preferredContentSizeCategory);

      LOBYTE(v11) = UIContentSizeCategory.isAccessibilityCategory.getter();
      v13 = 10.0;
      if ((v11 & 1) == 0)
        v13 = 6.0;
      v10 = v10 - v13;
    }
    v14 = objc_msgSend(v5, sel_constraintEqualToConstant_, v10);

    v15 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v14;
    v3 = v14;

    v2 = 0;
  }
  v16 = v2;
  return v3;
}

void CanvasCollaborationAvatarView.init(coder:)(void *a1)
{
  _BYTE *v1;

  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CanvasCollaborationAvatarView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  void *v1;
  Class isa;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  objc_super v11;

  isa = a1.value.super.isa;
  v11.receiver = v1;
  v11.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v11, sel_traitCollectionDidChange_, isa);
  if (isa)
    isa = (Class)-[objc_class preferredContentSizeCategory](isa, sel_preferredContentSizeCategory);
  v3 = objc_msgSend(v1, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

  if (!isa)
  {

    goto LABEL_11;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {

    swift_bridgeObjectRelease_n();
    return;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
LABEL_11:
    CanvasCollaborationAvatarView.update(animated:)(0);
}

Swift::Void __swiftcall CanvasCollaborationAvatarView.didMoveToWindow()()
{
  unsigned __int8 *v0;
  id v1;
  double v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  uint64_t v9;
  id v10;
  int v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGAffineTransform v20;
  CGAffineTransform v21;
  CGRect v22;
  CGRect v23;

  v1 = objc_msgSend(v0, sel_window);

  if (v1 && (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] & 1) == 0)
  {
    v2 = CanvasCollaborationAvatarView.adjustedFrame.getter();
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v9 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted;
    v10 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v10, sel_lineHeight);

    v11 = v0[v9];
    v12 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v12, sel_lineHeight);
    v14 = v13;

    v15 = v14 + 6.0;
    v16 = 3.0;
    if (v11)
      v16 = -3.0;
    v17 = 10.0;
    if (v11)
      v17 = -10.0;
    v18 = v15 / v16;
    if (v15 > 30.0)
      v19 = v18;
    else
      v19 = v17;
    v22.origin.x = v2;
    v22.origin.y = v4;
    v22.size.width = v6;
    v22.size.height = v8;
    v23 = CGRectOffset(v22, 0.0, v19);
    objc_msgSend(v0, sel_setFrame_, v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
    v21.a = 1.0;
    v21.b = 0.0;
    v21.c = 0.0;
    v21.d = 1.0;
    v21.tx = 0.0;
    v21.ty = 0.0;
    CGAffineTransformScale(&v20, &v21, 0.5, 0.5);
    v21 = v20;
    objc_msgSend(v0, sel_setTransform_, &v21);
    objc_msgSend(v0, sel_setAlpha_, 0.0);
    objc_msgSend(v0, sel_layoutIfNeeded);
    CanvasCollaborationAvatarView.update(animated:)(1);
  }
}

double CanvasCollaborationAvatarView.adjustedFrame.getter()
{
  char *v0;
  double v1;
  double v2;
  id v3;
  double v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  double Width;
  double v13;
  CGRect v15;

  CanvasCollaborationAvatarView.contentWidth.getter();
  v2 = v1;
  v3 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v3, sel_lineHeight);

  v4 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorPoint] + v2 * -0.5;
  v5 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview];
  v6 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v5, sel_convertPoint_fromView_, v6, v4, 0.0);
  v8 = v7;

  v9 = objc_msgSend(v0, sel_superview);
  objc_msgSend(v5, sel_convertPoint_fromView_, v9, v2 + v4, 0.0);
  v11 = v10;

  objc_msgSend(v5, sel_bounds);
  Width = CGRectGetWidth(v15);
  if (v8 < 8.0)
    return v4 + 8.0 - v8;
  v13 = Width + -8.0;
  if (v13 < v11)
    return v4 - vabdd_f64(v13, v11);
  return v4;
}

void CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  uint64_t v14;
  id v15;
  int v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _QWORD *v29;
  void *v30;
  CGFloat *v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  CGFloat *v42;
  CGRect v43;
  CGRect v44;

  v3 = v2;
  v3[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 1;
  objc_msgSend(v3, sel_frame);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted;
  v15 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v15, sel_lineHeight);

  v16 = v3[v14];
  v17 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v17, sel_lineHeight);
  v19 = v18;

  v20 = v19 + 6.0;
  v21 = 3.0;
  if (v16)
    v21 = -3.0;
  v22 = 10.0;
  if (v16)
    v22 = -10.0;
  v23 = v20 / v21;
  if (v20 > 30.0)
    v24 = v23;
  else
    v24 = v22;
  v43.origin.x = v7;
  v43.origin.y = v9;
  v43.size.width = v11;
  v43.size.height = v13;
  v44 = CGRectOffset(v43, 0.0, v24);
  x = v44.origin.x;
  y = v44.origin.y;
  width = v44.size.width;
  height = v44.size.height;
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = v3;
  v29[3] = a1;
  v29[4] = a2;
  v30 = (void *)objc_opt_self();
  v31 = (CGFloat *)swift_allocObject();
  *((_QWORD *)v31 + 2) = v3;
  v31[3] = x;
  v31[4] = y;
  v31[5] = width;
  v31[6] = height;
  v41 = partial apply for closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:);
  v42 = v31;
  v32 = MEMORY[0x1E0C809B0];
  v37 = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v40 = &block_descriptor_32_0;
  v33 = _Block_copy(&v37);
  v34 = v3;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(a1);
  swift_release();
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = partial apply for closure #1 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:);
  *(_QWORD *)(v35 + 24) = v29;
  v41 = _sIg_Ieg_TRTA_0;
  v42 = (CGFloat *)v35;
  v37 = v32;
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
  v40 = &block_descriptor_38_0;
  v36 = _Block_copy(&v37);
  swift_retain();
  swift_release();
  objc_msgSend(v30, sel_animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion_, 0, v33, v36, 0.375, 0.0, 0.85, 0.0);
  swift_release();
  _Block_release(v36);
  _Block_release(v33);
}

id closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(void *a1, double a2, double a3, double a4, double a5)
{
  CGAffineTransform v11;
  CGAffineTransform v12;

  objc_msgSend(a1, sel_setAlpha_, 0.0);
  objc_msgSend(a1, sel_setFrame_, a2, a3, a4, a5);
  v12.a = 1.0;
  v12.b = 0.0;
  v12.c = 0.0;
  v12.d = 1.0;
  v12.tx = 0.0;
  v12.ty = 0.0;
  CGAffineTransformScale(&v11, &v12, 0.5, 0.5);
  v12 = v11;
  return objc_msgSend(a1, sel_setTransform_, &v12);
}

void CanvasCollaborationAvatarView.contentWidth.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  id v2;
  id v3;
  int v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  if (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] == 1)
  {
    v2 = objc_msgSend(v0, sel_traitCollection);
    v3 = objc_msgSend(v2, sel_preferredContentSizeCategory);

    UIContentSizeCategory.isAccessibilityCategory.getter();
    v4 = v0[v1];
    v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v5, sel_lineHeight);

    if (v4 == 1)
    {
      v6 = objc_msgSend(v0, sel_traitCollection);
      v7 = objc_msgSend(v6, sel_preferredContentSizeCategory);

      UIContentSizeCategory.isAccessibilityCategory.getter();
    }
    CanvasCollaborationAvatarView.nameWidth.getter();
    if (v0[v1] == 1)
    {
      v8 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
      objc_msgSend(v8, sel_lineHeight);

    }
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_boundingSuperview], sel_frame);
  }
  else
  {
    v9 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v9, sel_lineHeight);

  }
}

double CanvasCollaborationAvatarView.nameWidth.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t inited;
  void *v3;
  id v4;
  id v5;
  Class isa;
  double v7;
  double v8;

  v1 = (void *)MEMORY[0x1DF0E41AC](*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name), *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_name + 8));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v3 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v4 = v3;
  v5 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(_QWORD *)(inited + 40) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_sizeWithAttributes_, isa);
  v8 = v7;

  return ceil(v8);
}

double CanvasCollaborationAvatarView.labelWidth.getter()
{
  void *v0;
  double v1;
  double v2;
  uint64_t v3;
  double v4;
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;
  id v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;
  double v18;
  id v19;
  double v20;
  double v21;

  CanvasCollaborationAvatarView.contentWidth.getter();
  v2 = v1;
  v3 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  v4 = 0.0;
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) == 1
    && ((v5 = objc_msgSend(v0, sel_traitCollection),
         v6 = objc_msgSend(v5, sel_preferredContentSizeCategory),
         v5,
         LOBYTE(v5) = UIContentSizeCategory.isAccessibilityCategory.getter(),
         v6,
         (v5 & 1) == 0)
      ? (v4 = 3.0)
      : (v4 = 5.0),
        *((_BYTE *)v0 + v3) == 1))
  {
    v7 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v7, sel_lineHeight);
    v9 = v8;

    if (v9 + 6.0 > 30.0)
      v10 = v9 + 6.0;
    else
      v10 = 30.0;
    v11 = objc_msgSend(v0, sel_traitCollection);
    v12 = objc_msgSend(v11, sel_preferredContentSizeCategory);

    LOBYTE(v11) = UIContentSizeCategory.isAccessibilityCategory.getter();
    v13 = 10.0;
    if ((v11 & 1) == 0)
      v13 = 6.0;
    v14 = v10 - v13;
  }
  else
  {
    v15 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v15, sel_lineHeight);
    v17 = v16;

    if (v17 + 6.0 > 30.0)
      v14 = v17 + 6.0;
    else
      v14 = 30.0;
  }
  v18 = 0.0;
  if (*((_BYTE *)v0 + v3) == 1)
  {
    v19 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v19, sel_lineHeight);
    v21 = v20;

    v18 = 9.0;
    if (v21 + 6.0 > 30.0)
      v18 = (v21 + 6.0) * 0.5 * 0.6;
    if (v18 <= 12.0)
      v18 = 12.0;
  }
  return v2 - v4 - v14 + -6.0 - v18;
}

id CanvasCollaborationAvatarView.labelWidthConstraint.getter(uint64_t *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v7 = CanvasCollaborationAvatarView.label.getter();
    v8 = objc_msgSend(v7, *a2);

    v9 = objc_msgSend(v8, sel_constraintEqualToConstant_, 0.0);
    v10 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v9;
    v5 = v9;

    v4 = 0;
  }
  v11 = v4;
  return v5;
}

void CanvasCollaborationAvatarView.updateImage()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  id v9;
  double v10;
  double v11;
  double v12;
  id v13;
  id v14;
  double v15;
  int v16;
  id v17;
  double v18;
  double v19;
  double v20;
  id v21;
  id v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = CanvasCollaborationAvatarView.imageView.getter();
  v6 = objc_msgSend(v5, sel_image);

  if (!v6)
  {
    v7 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
    v8 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
    v9 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v9, sel_lineHeight);
    v11 = v10;

    if (v11 + 6.0 > 30.0)
      v12 = v11 + 6.0;
    else
      v12 = 30.0;
    if (v8 == 1)
    {
      v13 = objc_msgSend(v0, sel_traitCollection);
      v14 = objc_msgSend(v13, sel_preferredContentSizeCategory);

      LOBYTE(v13) = UIContentSizeCategory.isAccessibilityCategory.getter();
      v15 = 10.0;
      if ((v13 & 1) == 0)
        v15 = 6.0;
      v12 = v12 - v15;
    }
    v16 = v0[v7];
    v17 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
    objc_msgSend(v17, sel_lineHeight);
    v19 = v18;

    if (v19 + 6.0 > 30.0)
      v20 = v19 + 6.0;
    else
      v20 = 30.0;
    if (v16 == 1)
    {
      v21 = objc_msgSend(v0, sel_traitCollection);
      v22 = objc_msgSend(v21, sel_preferredContentSizeCategory);

      LOBYTE(v21) = UIContentSizeCategory.isAccessibilityCategory.getter();
      v23 = 6.0;
      if ((v21 & 1) != 0)
        v23 = 10.0;
      v20 = v20 - v23;
    }
    v24 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v4, 1, 1, v24);
    v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for MainActor();
    v26 = v0;
    swift_retain();
    v27 = static MainActor.shared.getter();
    v28 = swift_allocObject();
    v29 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v28 + 16) = v27;
    *(_QWORD *)(v28 + 24) = v29;
    *(_QWORD *)(v28 + 32) = v26;
    *(double *)(v28 + 40) = v12;
    *(double *)(v28 + 48) = v20;
    *(_QWORD *)(v28 + 56) = v25;
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasCollaborationAvatarView.updateImage(), v28);
    swift_release();
  }
}

void CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(char a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  Class isa;
  id v19;

  if (*((_BYTE *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) == 1)
  {
    v2 = CanvasCollaborationAvatarView.label.getter();
    v3 = objc_msgSend(v2, sel_superview);

    if (!v3)
    {
      v4 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
      objc_msgSend(v4, sel_setActive_, 0);

      v5 = CanvasCollaborationAvatarView.label.getter();
      objc_msgSend(v1, sel_addSubview_, v5);

      v6 = (void *)objc_opt_self();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1DDF329D0;
      v8 = CanvasCollaborationAvatarView.label.getter();
      v9 = objc_msgSend(v8, sel_leadingAnchor);

      v10 = CanvasCollaborationAvatarView.imageView.getter();
      v11 = objc_msgSend(v10, sel_trailingAnchor);

      v12 = objc_msgSend(v9, sel_constraintEqualToAnchor_constant_, v11, 6.0);
      *(_QWORD *)(v7 + 32) = v12;
      v13 = CanvasCollaborationAvatarView.label.getter();
      v14 = objc_msgSend(v13, sel_centerYAnchor);

      v15 = CanvasCollaborationAvatarView.imageView.getter();
      v16 = objc_msgSend(v15, sel_centerYAnchor);

      v17 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v16);
      *(_QWORD *)(v7 + 40) = v17;
      *(_QWORD *)(v7 + 48) = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
      *(_QWORD *)(v7 + 56) = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint, (SEL *)&selRef_heightAnchor);
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v6, sel_activateConstraints_, isa);

    }
  }
  else if ((a1 & 1) != 0)
  {
    v19 = CanvasCollaborationAvatarView.label.getter();
    objc_msgSend(v19, sel_removeFromSuperview);

  }
}

void closure #1 in CanvasCollaborationAvatarView.update(animated:)(void *a1)
{
  id v2;

  CanvasCollaborationAvatarView.updateLabelPresence(removeIfHidden:)(1);
  v2 = objc_msgSend(a1, sel_window);

  if (v2)
    *((_BYTE *)a1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow) = 1;
}

id closure #2 in CanvasCollaborationAvatarView.update(animated:)(void *a1)
{
  id v2;
  void *v3;
  double v4;
  _QWORD v6[6];

  v6[0] = 0x3FF0000000000000;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0x3FF0000000000000;
  v6[4] = 0;
  v6[5] = 0;
  objc_msgSend(a1, sel_setTransform_, v6);
  CanvasCollaborationAvatarView.updateFrameAndConstraints()();
  objc_msgSend(a1, sel_setAlpha_, 1.0);
  v2 = CanvasCollaborationAvatarView.label.getter();
  v3 = v2;
  v4 = 0.0;
  if (*((_BYTE *)a1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded))
    v4 = 1.0;
  objc_msgSend(v2, sel_setAlpha_, v4);

  return objc_msgSend(a1, sel_layoutIfNeeded);
}

void CanvasCollaborationAvatarView.updateFrameAndConstraints()()
{
  unsigned __int8 *v0;
  id v1;
  uint64_t v2;
  int v3;
  id v4;
  double v5;
  double v6;
  double v7;
  id v8;
  id v9;
  double v10;
  id v11;
  double v12;
  double v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  double v20;
  id v21;
  id v22;
  id v23;
  double v24;
  id v25;
  double v26;
  double v27;
  id v28;

  objc_msgSend(v0, sel_setFrame_, CanvasCollaborationAvatarView.adjustedFrame.getter());
  v1 = CanvasCollaborationAvatarView.imageViewWidthConstraint.getter();
  v2 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  v3 = v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded];
  v4 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v4, sel_lineHeight);
  v6 = v5;

  if (v6 + 6.0 > 30.0)
    v7 = v6 + 6.0;
  else
    v7 = 30.0;
  if (v3 == 1)
  {
    v8 = objc_msgSend(v0, sel_traitCollection);
    v9 = objc_msgSend(v8, sel_preferredContentSizeCategory);

    LOBYTE(v8) = UIContentSizeCategory.isAccessibilityCategory.getter();
    v10 = 10.0;
    if ((v8 & 1) == 0)
      v10 = 6.0;
    v7 = v7 - v10;
  }
  objc_msgSend(v1, sel_setConstant_, v7);

  v11 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint, (SEL *)&selRef_leadingAnchor);
  v12 = 0.0;
  v13 = 0.0;
  if (v0[v2] == 1)
  {
    v14 = objc_msgSend(v0, sel_traitCollection, 0.0);
    v15 = objc_msgSend(v14, sel_preferredContentSizeCategory);

    LOBYTE(v14) = UIContentSizeCategory.isAccessibilityCategory.getter();
    v13 = 3.0;
    if ((v14 & 1) != 0)
      v13 = 5.0;
  }
  objc_msgSend(v11, sel_setConstant_, v13);

  v16 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint, (SEL *)&selRef_topAnchor);
  if (v0[v2] == 1)
  {
    v17 = objc_msgSend(v0, sel_traitCollection);
    v18 = objc_msgSend(v17, sel_preferredContentSizeCategory);

    LOBYTE(v17) = UIContentSizeCategory.isAccessibilityCategory.getter();
    if ((v17 & 1) != 0)
      v12 = 5.0;
    else
      v12 = 3.0;
  }
  objc_msgSend(v16, sel_setConstant_, v12);

  v19 = CanvasCollaborationAvatarView.imageViewTopConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint, (SEL *)&selRef_bottomAnchor);
  v20 = 0.0;
  if (v0[v2] == 1)
  {
    v21 = objc_msgSend(v0, sel_traitCollection, 0.0);
    v22 = objc_msgSend(v21, sel_preferredContentSizeCategory);

    LOBYTE(v21) = UIContentSizeCategory.isAccessibilityCategory.getter();
    v20 = 3.0;
    if ((v21 & 1) != 0)
      v20 = 5.0;
  }
  objc_msgSend(v19, sel_setConstant_, -v20);

  v23 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint, (SEL *)&selRef_widthAnchor);
  v24 = CanvasCollaborationAvatarView.labelWidth.getter();
  if (v24 <= 0.0)
    v24 = 0.0;
  objc_msgSend(v23, sel_setConstant_, v24);

  v28 = CanvasCollaborationAvatarView.labelWidthConstraint.getter(&OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint, (SEL *)&selRef_heightAnchor);
  v25 = specialized static CanvasCollaborationAvatarView.labelFont.getter();
  objc_msgSend(v25, sel_lineHeight);
  v27 = v26;

  objc_msgSend(v28, sel_setConstant_, v27);
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 64) = a7;
  *(double *)(v7 + 48) = a1;
  *(double *)(v7 + 56) = a2;
  *(_QWORD *)(v7 + 40) = a6;
  type metadata accessor for MainActor();
  *(_QWORD *)(v7 + 72) = static MainActor.shared.getter();
  *(_QWORD *)(v7 + 80) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v7 + 88) = v8;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(double, double);

  v3 = (uint64_t (*)(double, double))(**(int **)(*(_QWORD *)(v0 + 40)
                                                         + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage)
                                              + *(_QWORD *)(*(_QWORD *)(v0 + 40)
                                                          + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_fetchImage));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = closure #1 in CanvasCollaborationAvatarView.updateImage();
  return v3(*(double *)(v0 + 48), *(double *)(v0 + 56));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release();
  if (v1)
  {
    v2 = *(void **)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 64) + 16;
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](v3);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = CanvasCollaborationAvatarView.imageView.getter();

      v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v2);
      objc_msgSend(v6, sel_setImage_, v7);

    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasCollaborationAvatarView.updateImage()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BYTE *v8;
  id v9;
  void *v10;
  _QWORD v11[6];

  if (a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] == 1)
  {
    a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
    CanvasCollaborationAvatarView.update(animated:)(1);
    v3 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
    v4 = *(void **)&a2[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v4)
      objc_msgSend(v4, sel_invalidate);
    v5 = (void *)objc_opt_self();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a2;
    v11[4] = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    v11[5] = v6;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v11[3] = &block_descriptor_72_0;
    v7 = _Block_copy(v11);
    v8 = a2;
    swift_release();
    v9 = objc_msgSend(v5, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v7, 5.0);
    _Block_release(v7);
    v10 = *(void **)&a2[v3];
    *(_QWORD *)&a2[v3] = v9;

  }
}

void CanvasCollaborationAvatarView.handleHover(recognizer:)(void *a1)
{
  _BYTE *v1;
  id v2;
  void **v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;

  v2 = objc_msgSend(a1, sel_state);
  if (v2 == (id)3)
  {
    if (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] != 1)
      return;
    v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
    CanvasCollaborationAvatarView.update(animated:)(1);
    v3 = (void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    v8 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v8)
      objc_msgSend(v8, sel_invalidate);
    v5 = (void *)objc_opt_self();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v1;
    v18 = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    v19 = v9;
    v14 = MEMORY[0x1E0C809B0];
    v15 = 1107296256;
    v7 = &block_descriptor_45;
    goto LABEL_11;
  }
  if (v2 == (id)1 && (v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] & 1) == 0)
  {
    v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 1;
    CanvasCollaborationAvatarView.update(animated:)(1);
    v3 = (void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
    if (v4)
      objc_msgSend(v4, sel_invalidate);
    v5 = (void *)objc_opt_self();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v1;
    v18 = closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
    v19 = v6;
    v14 = MEMORY[0x1E0C809B0];
    v15 = 1107296256;
    v7 = &block_descriptor_52;
LABEL_11:
    v16 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v17 = v7;
    v10 = _Block_copy(&v14);
    v11 = v1;
    swift_release();
    v12 = objc_msgSend(v5, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v10, 5.0, v14, v15);
    _Block_release(v10);
    v13 = *v3;
    *v3 = v12;

  }
}

uint64_t type metadata accessor for CanvasCollaborationAvatarView()
{
  return objc_opt_self();
}

id specialized static CanvasCollaborationAvatarView.labelFont.getter()
{
  uint64_t v0;
  id v1;
  double v2;
  double v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v0 = *MEMORY[0x1E0DC4B10];
  v1 = objc_msgSend((id)objc_opt_self(), sel_preferredFontDescriptorWithTextStyle_, *MEMORY[0x1E0DC4B10]);
  objc_msgSend(v1, sel_pointSize);
  v3 = v2 * 2.99;
  v4 = (void *)objc_opt_self();
  objc_msgSend(v1, sel_pointSize);
  v5 = objc_msgSend(v4, sel_systemFontOfSize_weight_);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37F8]), sel_initForTextStyle_, v0);
  v7 = objc_msgSend(v6, sel_scaledFontForFont_maximumPointSize_, v5, v3);

  return v7;
}

uint64_t sub_1DDC50288()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.update(animated:)()
{
  uint64_t v0;

  closure #1 in CanvasCollaborationAvatarView.update(animated:)(*(void **)(v0 + 16));
}

id partial apply for closure #2 in CanvasCollaborationAvatarView.update(animated:)()
{
  uint64_t v0;

  return closure #2 in CanvasCollaborationAvatarView.update(animated:)(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_1DDC502D4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC502F8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasCollaborationAvatarView.updateImage()(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 4);
  v7 = v1[5];
  v8 = v1[6];
  v9 = *((_QWORD *)v1 + 7);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasCollaborationAvatarView.updateImage()(v7, v8, a1, v4, v5, v6, v9);
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()()
{
  CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(0, 0);
}

uint64_t sub_1DDC503E4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

id partial apply for closure #1 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)()
{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(id);
  id result;

  v1 = *(void **)(v0 + 16);
  v2 = *(uint64_t (**)(id))(v0 + 24);
  result = objc_msgSend(v1, sel_removeFromSuperview);
  *((_BYTE *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview) = 0;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded) = 0;
  if (v2)
    return (id)v2(result);
  return result;
}

uint64_t sub_1DDC50470()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)()
{
  uint64_t v0;

  return closure #2 in CanvasCollaborationAvatarView.removeFromSuperviewAnimated(completion:)(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_1DDC504A4()
{
  swift_release();
  return swift_deallocObject();
}

void specialized CanvasCollaborationAvatarView.init(frame:)()
{
  _BYTE *v0;

  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_frameAnchorIsInverted] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_hasDisplayedInWindow] = 0;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isRemovingFromSuperview] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___label] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewTopConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewBottomConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewLeadingConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___imageViewWidthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelWidthConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView____lazy_storage___labelHeightConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized CanvasCollaborationAvatarView.handleTap(_:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void *);
  void *v22;
  void (*v23)(uint64_t);
  uint64_t v24;

  v1 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded;
  v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] = (v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_isExpanded] & 1) == 0;
  CanvasCollaborationAvatarView.update(animated:)(1);
  v2 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer;
  v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autohideTimer];
  if (v3)
    objc_msgSend(v3, sel_invalidate);
  v4 = (void *)objc_opt_self();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v0;
  v23 = (void (*)(uint64_t))closure #1 in CanvasCollaborationAvatarView.resetAutohideTimer()partial apply;
  v24 = v5;
  v6 = MEMORY[0x1E0C809B0];
  v19 = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v22 = &block_descriptor_59;
  v7 = _Block_copy(&v19);
  v8 = v0;
  swift_release();
  v9 = objc_msgSend(v4, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v7, 5.0);
  _Block_release(v7);
  v10 = *(void **)&v0[v2];
  *(_QWORD *)&v0[v2] = v9;

  if (v0[v1] == 1)
  {
    v11 = OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer;
    v12 = *(void **)&v8[OBJC_IVAR____TtC8PaperKit29CanvasCollaborationAvatarView_autocollapseTimer];
    if (v12)
      objc_msgSend(v12, sel_invalidate);
    v13 = (void *)objc_opt_self();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v8;
    v23 = partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer();
    v24 = v14;
    v19 = v6;
    v20 = 1107296256;
    v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v22 = &block_descriptor_65_0;
    v15 = _Block_copy(&v19);
    v16 = v8;
    swift_release();
    v17 = objc_msgSend(v13, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v15, 2.5);
    _Block_release(v15);
    v18 = *(void **)&v8[v11];
    *(_QWORD *)&v8[v11] = v17;

  }
}

void partial apply for closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CanvasCollaborationAvatarView.resetAutocollapseTimer()(a1, *(_BYTE **)(v1 + 16));
}

uint64_t CanvasGenerationTool.nameAndPointerDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  v0._countAndFlagsBits = 60;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._object = (void *)0x80000001DDF4C0D0;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 15913;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  return 0;
}

Swift::Void __swiftcall ContainerCanvasElementView.enterFormFillingMode()()
{
  ContainerCanvasElementView.canvas.getter();
}

void sub_1DDC5098C(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, id a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void *, uint64_t, uint64_t, uint64_t);
  _QWORD *v38;
  void *v39;

  if (a1)
  {
    v22 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x608))();
    if (v22)
    {
      v39 = (void *)v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementViewController<Image>);
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v24 = v23;
        v25 = v23 + direct field offset for CanvasElementViewController.formDelegate;
        swift_beginAccess();
        if (MEMORY[0x1DF0E666C](v25))
        {
          v26 = *(_QWORD *)(v25 + 8);
          ObjectType = swift_getObjectType();
          v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 16);
          v29 = v39;
          v28(v24, 1, ObjectType, v26);
          swift_unknownObjectRelease();

        }
        else
        {

        }
        v30 = a1;
        goto LABEL_16;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPageView<PaperDocumentPage>);
      v31 = swift_dynamicCastClass();
      if (v31)
      {
        v32 = MEMORY[0x1DF0E666C](v31 + direct field offset for PaperDocumentPageView.documentView);
        if (v32)
        {
          v33 = (void *)v32;
          v34 = v32 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
          swift_beginAccess();
          if (MEMORY[0x1DF0E666C](v34))
          {
            v35 = *(_QWORD *)(v34 + 8);
            v36 = swift_getObjectType();
            v37 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v35 + 80);
            v38 = a1;
            v37(v33, 1, v36, v35);

            swift_unknownObjectRelease();
            return;
          }

          v30 = v39;
        }
        else
        {

          v30 = v39;
        }
        goto LABEL_16;
      }

    }
    v30 = a1;
LABEL_16:

  }
}

void ContainerCanvasElementView.addCanvasElements<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[13];

  v9[12] = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v9[10] = *(_QWORD *)(v1 - 8);
  v9[11] = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v9[9] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Capsule();
  MEMORY[0x1E0C80A78](v4, v5);
  v9[8] = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = v6;
  MEMORY[0x1E0C80A78](v7, v8);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29[24];

  v11 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v12 = v11[149];
  v13 = v11[150];
  v21 = *(_QWORD *)(v13 + 16);
  v22 = v12;
  v14 = type metadata accessor for Capsule();
  v20 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v19 - v16;
  v23 = a4;
  v24 = v13;
  v25 = v11[151];
  v26 = a5;
  v27 = a6;
  v28 = a2;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x5B0))(0);
  CanvasElementView.canvasElement.getter((uint64_t)v17);
  v29[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v17, v29, v22, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v17, v14);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t (*v15)(uint64_t *, _QWORD);
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v14 = *a1;
  v15 = (uint64_t (*)(uint64_t *, _QWORD))Capsule.Ref<>.root.modify();
  v16 = ContainerCanvasElement.addCanvasElements<A, B>(_:capsule:)(a2, (uint64_t)a1, *(_QWORD *)(v14 + *MEMORY[0x1E0D12A70]), a3, a4, a5, a6);
  result = v15(&v18, 0);
  *a7 = v16;
  return result;
}

void ContainerCanvasElementView.remove(members:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger();
  MEMORY[0x1E0C80A78](v0, v1);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t closure #1 in ContainerCanvasElementView.remove(members:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  unsigned __int8 v31[31];
  char v32;

  v23 = a6;
  v10 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v11 = v10[149];
  v12 = v10[150];
  v21 = *(_QWORD *)(v12 + 16);
  v22 = v11;
  v13 = type metadata accessor for Capsule();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v20 - v16;
  v32 = 0;
  v18 = v10[151];
  v24 = v12;
  v25 = v18;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v29 = a5 & 1;
  v30 = &v32;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  result = swift_endAccess();
  if (v32 == 1)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v17);
    v31[0] = 4;
    AnyCanvas.merge<A>(_:from:)((uint64_t)v17, v31, v22, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  return result;
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, BOOL *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t result;
  int64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  void (*v60)(uint64_t *, _QWORD);
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char *v79;
  void (*v80)(uint64_t *, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t (*v85)(char *, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  BOOL *v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  int64_t v117;

  v91 = a6;
  v92 = a3;
  v12 = *a1;
  v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v13);
  v84 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v88 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v18, v19);
  v103 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v101 = *(_QWORD *)(v21 - 8);
  v102 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v100 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v99 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v98 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v97 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v96 = (char *)&v83 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v95 = (char *)&v83 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v40 = (char *)&v83 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = *(_QWORD *)(v12 + *MEMORY[0x1E0D12A70]);
  v110 = v106;
  v111 = a7;
  v108 = a8;
  v112 = a8;
  swift_getKeyPath();
  v109 = a7;
  v105 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v86 = CROrderedSet.count.getter();
  v41 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
  v87 = v40;
  v104 = v36;
  v85 = v41;
  v41(v40, v36);
  v42 = *(_QWORD *)(a2 + 56);
  v93 = a2 + 56;
  v43 = 1 << *(_BYTE *)(a2 + 32);
  v44 = -1;
  if (v43 < 64)
    v44 = ~(-1 << v43);
  v45 = v44 & v42;
  v94 = (unint64_t)(v43 + 63) >> 6;
  v107 = a2;
  result = swift_bridgeObjectRetain();
  v47 = 0;
  v48 = v96;
  while (1)
  {
    if (v45)
    {
      v49 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      v117 = v47;
      v50 = v49 | (v47 << 6);
      goto LABEL_5;
    }
    v62 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v62 >= v94)
      goto LABEL_21;
    v63 = *(_QWORD *)(v93 + 8 * v62);
    v64 = v47 + 1;
    if (!v63)
    {
      v64 = v47 + 2;
      if (v47 + 2 >= v94)
        goto LABEL_21;
      v63 = *(_QWORD *)(v93 + 8 * v64);
      if (!v63)
      {
        v64 = v47 + 3;
        if (v47 + 3 >= v94)
          goto LABEL_21;
        v63 = *(_QWORD *)(v93 + 8 * v64);
        if (!v63)
          break;
      }
    }
LABEL_20:
    v45 = (v63 - 1) & v63;
    v117 = v64;
    v50 = __clz(__rbit64(v63)) + (v64 << 6);
LABEL_5:
    v51 = v98;
    v52 = *(void (**)(char *, unint64_t, uint64_t))(v98 + 16);
    v53 = v95;
    v52(v95, *(_QWORD *)(v107 + 48) + *(_QWORD *)(v98 + 72) * v50, v27);
    v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v51 + 32))(v48, v53, v27);
    MEMORY[0x1E0C80A78](v54, v55);
    v56 = v109;
    *(&v83 - 4) = v106;
    *(&v83 - 3) = v56;
    *(&v83 - 2) = v108;
    swift_getKeyPath();
    v57 = v97;
    v52(v97, (unint64_t)v48, v27);
    WeakTagged_9.tag.getter();
    v115 = v113;
    v116 = v114;
    MEMORY[0x1DF0E30E4](v27);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    v58 = v100;
    SharedTagged_9.init(_:id:)();
    v59 = *(void (**)(char *, uint64_t))(v51 + 8);
    v59(v57, v27);
    v60 = (void (*)(uint64_t *, _QWORD))Capsule.Ref<>.subscript.modify();
    v61 = (uint64_t)v99;
    CROrderedSet.remove(_:)();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v58, v102);
    outlined destroy of StocksKitCurrencyCache.Provider?(v61, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v60(&v113, 0);
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v59)(v48, v27);
    v47 = v117;
  }
  v65 = v47 + 4;
  if (v47 + 4 < v94)
  {
    v63 = *(_QWORD *)(v93 + 8 * v65);
    if (!v63)
    {
      while (1)
      {
        v64 = v65 + 1;
        if (__OFADD__(v65, 1))
          goto LABEL_29;
        if (v64 >= v94)
          goto LABEL_21;
        v63 = *(_QWORD *)(v93 + 8 * v64);
        ++v65;
        if (v63)
          goto LABEL_20;
      }
    }
    v64 = v47 + 4;
    goto LABEL_20;
  }
LABEL_21:
  v66 = swift_release();
  v67 = v92;
  MEMORY[0x1E0C80A78](v66, v68);
  v69 = v109;
  *(&v83 - 4) = v106;
  *(&v83 - 3) = v69;
  *(&v83 - 2) = v108;
  if (v70)
  {
    swift_getKeyPath();
    v71 = (uint64_t)v88;
    v72 = (uint64_t)v105;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v73 = v89;
    v74 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v71, 1, v90))
    {
      result = outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      v79 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v84, v71, v74);
      outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v115 = v67;
      swift_bridgeObjectRetain();
      v80 = (void (*)(uint64_t *, _QWORD))Ref.subscript.modify();
      v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      v82 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0DEB3D0]);
      PKDrawingStruct.deleteStrokes<A, B>(_:in:)((uint64_t)&v115, v72, v81, v82);
      swift_bridgeObjectRelease();
      v80(&v113, 0);
      result = (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v79, v74);
    }
    v78 = 1;
  }
  else
  {
    swift_getKeyPath();
    v75 = v87;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v76 = v104;
    v77 = CROrderedSet.count.getter();
    result = v85(v75, v76);
    v78 = v77 != v86;
  }
  *v91 = v78;
  return result;
}

uint64_t closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  if (!(a2 >> 62))
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, a2);
      else
        v7 = *(id *)(a2 + 8 * v5 + 32);
      v8 = v7;
      v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (v9)
      {
        v10 = (void *)v9;
        v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
        swift_retain();

        *(_BYTE *)(v11 + 48) = 0;
        FormTextFieldAnalytics.recordEvent()();

        swift_release();
      }
      else
      {

      }
      ++v5;
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void ContainerCanvasElementView.duplicate(members:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  MEMORY[0x1E0C80A78](v0, v1);
  ContainerCanvasElementView.canvas.getter();
}

uint64_t sub_1DDC52584(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x650))(v4, v3, v2, v5 & 1);
    if (one-time initialization token for canvasElementPasteOffset != -1)
      swift_once();
    ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(v1);
  }
  return MEMORY[0x1E0DEE9E8];
}

void ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v12 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  MEMORY[0x1E0C80A78](v1, v2);
  v11 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v10, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x1E0C80A78](v7, v8);
  ContainerCanvasElementView.canvas.getter();
}

void sub_1DDC52798(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t (*)(), double);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;

  if (a1)
  {
    *(_QWORD *)(v10 - 160) = v6;
    *(_QWORD *)(v10 - 152) = v7;
    *(_QWORD *)(v10 - 144) = v4;
    v11 = MEMORY[0x1E0C80A78](a1, a2);
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t (*)(), double))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x468);
    *(_QWORD *)(v10 - 136) = v15;
    v16 = v14(0, 1, partial apply for closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:), v11);
    (*(void (**)(uint64_t))((*v13 & *v2) + 0x488))(v16);
    swift_getKeyPath();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.subscript.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v17 = CROrderedSet.map<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v8);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v9, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v20 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      type metadata accessor for Paper();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v21 = *(_QWORD *)(v10 - 160);
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v9, v18);
      v22 = *(_QWORD *)(v10 - 120);
      v24 = *(_QWORD *)(v10 - 152);
      v23 = *(_QWORD *)(v10 - 144);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v21 + *(int *)(*(_QWORD *)(v10 - 128) + 20), v23);
      outlined destroy of PKStrokeProperties(v21, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      v20 = CROrderedSet.map<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    }
    v25 = (char *)*(id *)(v10 - 136);
    v26 = objc_msgSend(v25, sel_window);
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v26);
      if (v28)
      {
        v29 = v28;
        v30 = objc_msgSend(v28, sel__visibilityUpdatesEnabled);
        objc_msgSend(v29, sel__setVisibilityUpdatesEnabled_, 0);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = specialized Set.init<A>(_:)(v17);
        swift_bridgeObjectRelease();
        v32 = specialized Set.init<A>(_:)(v20);
        swift_bridgeObjectRelease();
        AnyCanvas.selection.setter(v31, v32, 6, 0);
        objc_msgSend(v29, sel__setVisibilityUpdatesEnabled_, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_11;
      }

    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = specialized Set.init<A>(_:)(v17);
    swift_bridgeObjectRelease();
    v34 = specialized Set.init<A>(_:)(v20);
    swift_bridgeObjectRelease();
    AnyCanvas.selection.setter(v33, v34, 6, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v25;
LABEL_11:

    if (*(_QWORD *)&v25[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView])
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();

    }
    else
    {
      __break(1u);
    }
  }
}

void ContainerCanvasElementView.pasteDrawing(fromURL:at:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v20 - v13;
  v15 = Data.init(contentsOf:options:)();
  v17 = v16;
  v21 = v7;
  v22 = a2;
  v23 = a3;
  type metadata accessor for PKDrawingCoherence(0);
  outlined copy of Data._Representation(v15, v17);
  v18 = specialized PKDrawingCoherence.__allocating_init(data:)();
  outlined consume of Data._Representation(v15, v17);
  v19 = v24 & 1;
  Capsule<>.init(drawing:)((uint64_t)v18);
  outlined consume of Data._Representation(v15, v17);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v14, v10, v6);
  ContainerCanvasElementView.pastePaper(_:andStrokes:at:)((uint64_t)v14, 1, v22, v23, v19);
}

void ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[16];
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;

  v63 = a5;
  v52[13] = a4;
  v52[12] = a3;
  v57 = a2;
  v67 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v52[14] = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v9);
  v60 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v52[9] = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v52[10] = (char *)v52 - v18;
  v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v64 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  MEMORY[0x1E0C80A78](v22, v23);
  v52[6] = (char *)v52 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v56 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v55 = (char *)v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v53, v28);
  v54 = (char *)v52 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v30, v31);
  v59 = (char *)v52 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v66 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  v58 = (char *)v52 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v70 = (char *)v52 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v68 = (char *)v52 - v43;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x1E0C80A78](v44, v45);
  v52[8] = (char *)v52 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v52[7] = (char *)v52 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v65 = v5;
  ContainerCanvasElementView.canvas.getter();
}

void ContainerCanvasElementView.pasteElements(fromURL:andStrokes:at:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t FileVersionPolicy;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[10];
  char *v13;
  uint64_t v14;
  int v15;

  v12[9] = a5;
  v15 = a2;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  MEMORY[0x1E0C80A78](FileVersionPolicy, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)v12 - v11;
  ContainerCanvasElementView.canvas.getter();
}

uint64_t sub_1DDC542B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(unint64_t, _QWORD, uint64_t);
  uint64_t v19;
  id v20;
  int v21;
  uint64_t v22;

  if (a1)
  {
    *(_QWORD *)(v10 - 112) = v7;
    *(_QWORD *)(v10 - 192) = v5;
    *(_QWORD *)(v10 - 184) = v3;
    *(_QWORD *)(v10 - 176) = v1;
    *(_QWORD *)(v10 - 168) = v2;
    v11 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_context;
    *(_QWORD *)(v10 - 104) = a1;
    *(_QWORD *)(v10 - 128) = *(_QWORD *)(a1 + v11);
    *(_QWORD *)(v10 - 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    v12 = type metadata accessor for CRCodableVersion();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
    v17 = v16 + v15;
    v18 = *(void (**)(unint64_t, _QWORD, uint64_t))(v13 + 104);
    v18(v17, *MEMORY[0x1E0D12370], v12);
    v18(v17 + v14, *MEMORY[0x1E0D12378], v12);
    v19 = one-time initialization token for allReadableFileFormatVersions;
    v20 = *(id *)(v10 - 128);
    if (v19 != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D127E0], v9);
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    v21 = *(_DWORD *)(v10 - 156) & 1;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v9);

    swift_bridgeObjectRelease();
    v22 = *(_QWORD *)(v10 - 152);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v10 - 144) + 32))(v22, v8, *(_QWORD *)(v10 - 192));
    ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(v22, *(_DWORD *)(v10 - 132) & 1, *(_QWORD *)(v10 - 184), *(_QWORD *)(v10 - 176), v21);
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(uint64_t a1)
{
  return closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:at:)(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  return WeakRef.init<A>(_:)();
}

uint64_t closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[9];
  char v22;
  unsigned __int8 v23[24];

  v21[1] = a4;
  v10 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v11 = v10[149];
  v12 = v10[150];
  v13 = *(_QWORD *)(v12 + 16);
  v14 = type metadata accessor for Capsule();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v21 - v17;
  v19 = v10[151];
  v21[4] = v12;
  v21[5] = v19;
  v21[6] = a2;
  *(double *)&v21[7] = a5;
  *(double *)&v21[8] = a6;
  v22 = a3;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.canvasElement.getter((uint64_t)v18);
  v23[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v18, v23, v11, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(CGAffineTransform *, _QWORD);
  _QWORD *v66;
  void (*v67)(char *, _QWORD *);
  char *v68;
  _QWORD *v69;
  char *v70;
  unsigned int (*v71)(char *, uint64_t, uint64_t);
  _QWORD *v72;
  void (*v73)(CGAffineTransform *, _QWORD);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(CGAffineTransform *, _QWORD);
  double *v82;
  double v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  void (*v108)(CGAffineTransform *, _QWORD);
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(CGAffineTransform *, _QWORD);
  void (*v114)(CGAffineTransform *, _QWORD);
  unint64_t *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  int v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, _QWORD);
  void (*v132)(char *, _QWORD);
  _OWORD *v133;
  _OWORD *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  void (*v148)(CGAffineTransform *, _QWORD);
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  unsigned int (*v166)(uint64_t, uint64_t, uint64_t);
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, char *, uint64_t);
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(char *, uint64_t, uint64_t);
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unsigned int (*v192)(char *, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  CGAffineTransform v197;
  CGAffineTransform t2;
  char v199[8];
  char v200[8];
  CGAffineTransform t1;
  _QWORD *v202;

  v175 = a5;
  v174 = a4;
  LODWORD(v172) = a3;
  v202 = a1;
  v10 = *a1;
  v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v161 = *(_QWORD *)(v162 - 8);
  MEMORY[0x1E0C80A78](v162, v11);
  v149 = (char *)&v149 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v170 = *(_QWORD *)(v171 - 8);
  MEMORY[0x1E0C80A78](v171, v13);
  v169 = (char *)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v168, v15);
  v167 = (char *)&v149 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v182 = *(_QWORD *)(v189 - 8);
  MEMORY[0x1E0C80A78](v189, v17);
  v173 = (char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v181 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v19);
  v180 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v179 = (char *)&v149 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v178 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v185 = (char *)&v149 - v29;
  v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v186 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v30);
  v184 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v10 + *MEMORY[0x1E0D12A70]);
  v154 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v153 = (char *)&v149 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v183 = (char *)&v149 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v150 = *(_QWORD *)(v188 - 8);
  MEMORY[0x1E0C80A78](v188, v39);
  v187 = (char *)&v149 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v41, v42);
  v152 = (char *)&v149 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v160 = (char *)&v149 - v46;
  v157 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v157, v47);
  v156 = (char *)&v149 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v49, v50);
  v158 = (uint64_t)&v149 - v51;
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v193 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v53);
  v163 = (char *)&v149 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v55, v56);
  v58 = (char *)&v149 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v166 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*(v165 - 1);
  MEMORY[0x1E0C80A78](v165, v59);
  v164 = (char *)&v149 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v192 = (unsigned int (*)(char *, uint64_t, uint64_t))*(v191 - 1);
  MEMORY[0x1E0C80A78](v191, v61);
  v63 = (char *)&v149 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  v64 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v177 = a2;
  Capsule.Ref.import<A>(_:)();
  v155 = v32;
  v194 = v32;
  v195 = v174;
  v196 = v175;
  swift_getKeyPath();
  swift_getKeyPath();
  v176 = (uint64_t (*)(char *, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  Capsule<>.subscript.getter();
  swift_release();
  v65 = (void (*)(CGAffineTransform *, _QWORD))Capsule.Ref<>.subscript.modify();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v66 = v191;
  CROrderedSet.append<A>(contentsOf:)();
  v67 = (void (*)(char *, _QWORD *))*((_QWORD *)v192 + 1);
  v67(v63, v66);
  v65(&t1, 0);
  swift_release();
  swift_getKeyPath();
  v159 = v64;
  Capsule<>.subscript.getter();
  swift_release();
  v68 = v164;
  CROrderedSet.makeIterator()();
  v69 = v165;
  v67(v63, v66);
  v70 = v163;
  CROrderedSet.Iterator.next()();
  v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48);
  if (v71(v58, 1, v52) != 1)
  {
    v191 = *(_QWORD **)(v193 + 32);
    v192 = v71;
    do
    {
      ((void (*)(char *, char *, uint64_t))v191)(v70, v58, v52);
      v72 = v69;
      v73 = (void (*)(CGAffineTransform *, _QWORD))SharedTagged_9.subscript.modify();
      v74 = v52;
      v75 = v58;
      v76 = v70;
      v78 = *(_QWORD *)(v77 + 24);
      v79 = *(_QWORD *)(v77 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v77, v78);
      v80 = v78;
      v70 = v76;
      v58 = v75;
      v52 = v74;
      v81 = (void (*)(CGAffineTransform *, _QWORD))(*(uint64_t (**)(CGAffineTransform *, uint64_t, uint64_t))(v79 + 24))(&t2, v80, v79);
      v83 = v82[1] + a7;
      *v82 = *v82 + a6;
      v82[1] = v83;
      v81(&t2, 0);
      v73(&t1, 0);
      v69 = v72;
      (*(void (**)(char *, uint64_t))(v193 + 8))(v70, v74);
      CROrderedSet.Iterator.next()();
    }
    while (v192(v58, 1, v74) != 1);
  }
  result = (*((uint64_t (**)(char *, _QWORD *))v166 + 1))(v68, v69);
  if ((v172 & 1) != 0)
  {
    swift_getKeyPath();
    v85 = (uint64_t)v160;
    Capsule<>.subscript.getter();
    swift_release();
    v86 = v161;
    v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v161 + 48);
    v88 = v162;
    if (v87(v85, 1, v162) != 1)
    {
      v89 = (uint64_t)v156;
      v90 = (uint64_t)v202;
      Ref.subscript.getter();
      v91 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v91(v85, v88);
      v92 = v158;
      outlined init with take of PKStrokeStruct(v89, v158, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v93 = (char *)(v92 + *(int *)(v157 + 20));
      v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*(_QWORD *)&t1.a == *(_QWORD *)&t2.a)
      {
        v95 = v92;
        return outlined destroy of PKStrokeProperties(v95, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      }
      v166 = v87;
      v165 = v91;
      CGAffineTransformMakeTranslation(&t1, a6, a7);
      a = t1.a;
      b = t1.b;
      c = t1.c;
      d = t1.d;
      tx = t1.tx;
      ty = t1.ty;
      v163 = (char *)v94;
      v164 = v93;
      CROrderedSet.makeIterator()();
      v102 = v183;
      CROrderedSet.Iterator.next()();
      v103 = v151;
      v176 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v186 + 48);
      v104 = v176(v102, 1, v151);
      v105 = v189;
      v106 = v173;
      v107 = (uint64_t)v185;
      if (v104 != 1)
      {
        v172 = *(void (**)(char *, char *, uint64_t))(v186 + 32);
        v172(v184, v102, v103);
        while (1)
        {
          v122 = v179;
          Ref.subscript.getter();
          v123 = v190;
          CRRegister.value.getter();
          SharedTagged_2.tagged1.getter();
          v193 = *(_QWORD *)(v182 + 8);
          ((void (*)(char *, uint64_t))v193)(v106, v105);
          v192 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 8);
          ((void (*)(char *, uint64_t))v192)(v122, v123);
          v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
          v125 = *(_QWORD *)(v124 - 8);
          v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
          v127 = v126(v107, 1, v124);
          v177 = v125;
          v191 = v126;
          if (v127 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
          }
          else
          {
            v128 = (uint64_t)v167;
            Ref.subscript.getter();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
            v129 = v169;
            CRRegister.wrappedValue.getter();
            outlined destroy of PKStrokeProperties(v128, type metadata accessor for PKStrokeStruct);
            (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v107, v124);
            v130 = v171;
            v131 = (void (*)(char *, _QWORD))Ref.subscript.modify();
            type metadata accessor for PKStrokeInheritedProperties(0);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
            v132 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
            v134 = v133;
            v135 = v133[1];
            v136 = v133[2];
            *(_OWORD *)&t1.a = *v133;
            *(_OWORD *)&t1.c = v135;
            *(_OWORD *)&t1.tx = v136;
            t2.a = a;
            t2.b = b;
            t2.c = c;
            t2.d = d;
            t2.tx = tx;
            t2.ty = ty;
            CGAffineTransformConcat(&v197, &t1, &t2);
            v137 = *(_OWORD *)&v197.c;
            v138 = *(_OWORD *)&v197.tx;
            *v134 = *(_OWORD *)&v197.a;
            v134[1] = v137;
            v134[2] = v138;
            v139 = (uint64_t)v202;
            v132(v199, 0);
            v131(v200, 0);
            v140 = v129;
            v106 = v173;
            v141 = v130;
            v90 = v139;
            v105 = v189;
            (*(void (**)(char *, uint64_t))(v170 + 8))(v140, v141);
          }
          v142 = v180;
          Ref.subscript.getter();
          v143 = v190;
          CRRegister.value.getter();
          v144 = v103;
          v145 = (uint64_t)v178;
          SharedTagged_2.tagged1.getter();
          ((void (*)(char *, uint64_t))v193)(v106, v105);
          ((void (*)(char *, uint64_t))v192)(v142, v143);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v191)(v145, 1, v124) == 1)
          {
            v146 = v184;
            (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v144);
            outlined destroy of StocksKitCurrencyCache.Provider?(v145, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
            v107 = (uint64_t)v185;
            v103 = v144;
            v120 = v146;
          }
          else
          {
            v113 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
            v114 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
            v116 = v115;
            v117 = *v115;
            v118 = *v115 & 0xFFFF000000000000;
            LODWORD(v197.a) = *v115;
            WORD2(v197.a) = WORD2(v117);
            _So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_isPastedStroke_setter(&v197);
            *v116 = v118 | LODWORD(v197.a) | ((unint64_t)WORD2(v197.a) << 32);
            v90 = (uint64_t)v202;
            v114(&t2, 0);
            v113(&t1, 0);
            v119 = v184;
            (*(void (**)(char *, uint64_t))(v186 + 8))(v184, v144);
            (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v145, v124);
            v107 = (uint64_t)v185;
            v103 = v144;
            v120 = v119;
          }
          v121 = v183;
          v105 = v189;
          CROrderedSet.Iterator.next()();
          if (v176(v121, 1, v103) == 1)
            break;
          v172(v120, v121, v103);
        }
      }
      (*(void (**)(char *, uint64_t))(v150 + 8))(v187, v188);
      v108 = (void (*)(CGAffineTransform *, _QWORD))Capsule.Ref<>.root.modify();
      v109 = v155;
      v110 = v175;
      ContainerCanvasElement.ensureHasDrawing<A>(in:)(v90, v155, v175);
      v108(&t1, 0);
      v111 = v153;
      Capsule.Ref<>.root.getter();
      v85 = (uint64_t)v152;
      (*(void (**)(uint64_t, uint64_t))(v110 + 48))(v109, v110);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v111, v109);
      v112 = v162;
      if (!v166(v85, 1, v162))
      {
        v147 = v149;
        (*(void (**)(char *, uint64_t, uint64_t))(v161 + 16))(v149, v85, v112);
        outlined destroy of StocksKitCurrencyCache.Provider?(v85, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        v148 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
        CROrderedSet.append<A>(contentsOf:)();
        v148(&t1, 0);
        ((void (*)(char *, uint64_t))v165)(v147, v112);
        v95 = v158;
        return outlined destroy of PKStrokeProperties(v95, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      }
      outlined destroy of PKStrokeProperties(v158, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    }
    return outlined destroy of StocksKitCurrencyCache.Provider?(v85, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  }
  return result;
}

uint64_t closure #2 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, a1, v4, v7);
  SharedTagged_9.tag.getter();
  v11 = v13;
  v12 = v14;
  MEMORY[0x1DF0E3408](v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

void ContainerCanvasElementView.subelementView(at:with:)()
{
  ContainerCanvasElementView.canvas.getter();
}

void *sub_1DDC55B04(_QWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  uint64_t v21;
  double v22;
  double v23;
  _QWORD *v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  unint64_t v31;
  id v32;
  void *v33;

  if (!a1)
    return 0;
  v24 = a1;
  v25 = objc_msgSend(v20, sel_hitTest_withEvent_, v21, v23, v22);
  if (v25)
  {
    v26 = v25;
    v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v24) + 0x2F8))();
    v29 = v28;
    ObjectType = swift_getObjectType();
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(ObjectType, v29);

    v32 = v26;
    v33 = specialized Sequence.first(where:)(v31, v32);
    swift_bridgeObjectRelease();

    v24 = v32;
  }
  else
  {
    v33 = 0;
  }

  return v33;
}

uint64_t ContainerCanvasElementView.canConvertToHandwriting(members:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t result;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  id v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[24];
  uint64_t v88;
  __int128 v89[2];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v82 = a2;
  v4 = *MEMORY[0x1E0DEEDD8] & *v2;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v5);
  v70 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v79 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v10, v11);
  v73 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v74 = (uint64_t)&v69 - v15;
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 16);
  v78 = *(_QWORD *)(v4 + 1192);
  v77 = v16;
  v76 = type metadata accessor for Capsule();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v17);
  v19 = (char *)&v69 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBox?);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v69 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v69 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v36 = (char *)&v69 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v80 = (char *)&v69 - v39;
  v40 = ContainerCanvasElementView.pencilKitAttachmentViews()();
  if (!(v40 >> 62))
  {
    result = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_37:
    swift_bridgeObjectRelease();
    return 0;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_37;
LABEL_3:
  if ((v40 & 0xC000000000000001) != 0)
  {
    v42 = (id)MEMORY[0x1DF0E4D64](0, v40);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v42 = *(id *)(v40 + 32);
LABEL_6:
    v81 = v42;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + 16) != 1 || *(_QWORD *)(v82 + 16))
    {

      return 0;
    }
    specialized Collection.first.getter(a1, (uint64_t)v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      return 0;
    }
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v80, v31, v32);
    WeakTagged_9.tagged4.getter();
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v23, 1, v43) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for WeakRef<TextBox>?);
      v45 = type metadata accessor for TextBox();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v27, 1, 1, v45);
    }
    else
    {
      CanvasElementView.canvasElement.getter((uint64_t)v19);
      WeakRef.subscript.getter();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v19, v76);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v23, v43);
      v46 = type metadata accessor for TextBox();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v27, 1, v46) != 1)
      {
        v84 = v46;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v83);
        outlined init with take of PKStrokeStruct((uint64_t)v27, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
LABEL_16:
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v36, v80, v32);
        v48 = (uint64_t)v79;
        if (v84 == 2)
        {
          WeakTagged_9.tagged6.getter();
          v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
          v50 = *(_QWORD *)(v49 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for WeakRef<Shape>?);
            v51 = *(void (**)(char *, uint64_t))(v33 + 8);
            v51(v36, v32);
            v85 = 0uLL;
            *(_QWORD *)&v86 = 0;
            *((_QWORD *)&v86 + 1) = 1;
          }
          else
          {
            CanvasElementView.canvasElement.getter((uint64_t)v19);
            v53 = (uint64_t)v73;
            WeakRef.subscript.getter();
            (*(void (**)(char *, uint64_t))(v75 + 8))(v19, v76);
            (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
            v54 = v74;
            outlined init with take of (key: Int, value: AnyCRValue)?(v53, v74, &demangling cache variable for type metadata for Shape?);
            v55 = type metadata accessor for Shape();
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v54, 1, v55) == 1)
            {
              v51 = *(void (**)(char *, uint64_t))(v33 + 8);
              v51(v36, v32);
              outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for Shape?);
              v85 = 0u;
              v86 = 0u;
            }
            else
            {
              *((_QWORD *)&v86 + 1) = v55;
              v56 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v85);
              outlined init with take of PKStrokeStruct(v54, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
              v51 = *(void (**)(char *, uint64_t))(v33 + 8);
              v51(v36, v32);
            }
          }
          v52 = v81;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v83, &demangling cache variable for type metadata for Any???);
        }
        else
        {
          v51 = *(void (**)(char *, uint64_t))(v33 + 8);
          v51(v36, v32);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v83, (uint64_t)&v85, &demangling cache variable for type metadata for Any??);
          v52 = v81;
        }
        if (*((_QWORD *)&v86 + 1) == 1)
        {
          v57 = &demangling cache variable for type metadata for Any??;
          v58 = &v85;
        }
        else
        {
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v85, (uint64_t)v87, &demangling cache variable for type metadata for Any?);
          if (v88)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
            if ((swift_dynamicCast() & 1) != 0)
            {
              outlined init with take of FindResult(v89, (uint64_t)&v91);
              v59 = v92;
              v60 = v93;
              __swift_project_boxed_opaque_existential_1(&v91, v92);
              if (((*(uint64_t (**)(uint64_t, uint64_t))(v60 + 80))(v59, v60) & 1) != 0)
              {
                v61 = v92;
                v62 = v93;
                __swift_project_boxed_opaque_existential_1(&v91, v92);
                v63 = v70;
                (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v61, v62);
                v64 = v72;
                v65 = (void *)CRAttributedString.attributedString.getter();
                (*(void (**)(char *, uint64_t))(v71 + 8))(v63, v64);
                v66 = objc_msgSend(v65, sel_string);

                if (!v66)
                {
                  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v66 = (id)MEMORY[0x1DF0E41AC](v67);
                  swift_bridgeObjectRelease();
                }
                v68 = objc_msgSend(v52, sel_canConvertTextToHandwriting_, v66);

                v51(v80, v32);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
                return (uint64_t)v68;
              }
              v51(v80, v32);

              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v91);
              return 0;
            }
LABEL_34:
            v90 = 0;
            memset(v89, 0, sizeof(v89));

            v51(v80, v32);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v89, &demangling cache variable for type metadata for ShapeTextBox?);
            return 0;
          }
          v57 = &demangling cache variable for type metadata for Any?;
          v58 = (__int128 *)v87;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v58, v57);
        goto LABEL_34;
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for TextBox?);
    memset(v83, 0, sizeof(v83));
    v84 = 2;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, uint64_t a8, double a9, void *a10)
{
  uint64_t v16;
  void *v17;
  unint64_t v18;
  _QWORD *v19;
  double (*v20)(uint64_t);
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  Swift::OpaquePointer v30;
  Swift::OpaquePointer v31;
  void (*v32)(unint64_t, uint64_t);
  _QWORD *v33;

  v16 = a8 + 16;
  v17 = (void *)MEMORY[0x1DF0E41AC](a4, a5);
  v18 = specialized static HandwritingReflowView.convertTokensToReflowElements(string:ranges:tokens:drawings:textSize:)(v17, a1, a2, a3, a9);

  v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v20 = *(double (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a6) + 0x100);
  v21 = swift_bridgeObjectRetain();
  v22 = v20(v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  type metadata accessor for ReflowLayoutManager();
  swift_allocObject();
  v29 = specialized ReflowLayoutManager.init(contents:frame:addSpaces:)(v18, 0, v22, v24, v26, v28);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v30._rawValue = *(void **)(v29 + 80);
  swift_beginAccess();
  v31._rawValue = *(void **)(v29 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReflowLayoutManager.layoutText(contents:lines:)(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = *(void (**)(unint64_t, uint64_t))((*v19 & *a7) + 0x4B8);
  swift_retain();
  v32(v18, v29);
  swift_release();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v16))
  {
    v33 = a10;
    specialized CanvasMembers.init(_:)(v33);

    ContainerCanvasElementView.remove(members:)();
  }
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for CHReflowableTextToken);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for PKDrawing();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t ContainerCanvasElementView.unorderedTransientSubelementViews.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (!v0)
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v1 = v0;
  v2 = FormFillingView.unorderedFormFields.getter();

  return v2;
}

uint64_t ContainerCanvasElementView.transientFormFields.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v0 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (!v0)
    return MEMORY[0x1E0DEE9D8];
  v1 = v0;
  v2 = FormFillingView.formFields.getter();

  return v2;
}

Swift::Void __swiftcall ContainerCanvasElementView.addFormFieldViews(_:)(Swift::OpaquePointer a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3)
      return;
  }
  else if (!*(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  ContainerCanvasElementView.createFormFillingViewIfNeeded()();
  v2 = (void *)specialized ContainerCanvasElementView.formFillingView.getter();
  if (v2)
  {
    v4 = v2;
    FormFillingView.add(_:)(a1);

  }
}

Swift::Void __swiftcall ContainerCanvasElementView.setFormFieldGroups(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2;

  if (*((_QWORD *)a1._rawValue + 2))
  {
    ContainerCanvasElementView.createFormFillingViewIfNeeded()();
    v2 = specialized ContainerCanvasElementView.formFillingView.getter();
    if (v2)
    {
      *(Swift::OpaquePointer *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups) = a1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall ContainerCanvasElementView.addWidgets(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;

  ContainerCanvasElementView.createFormFillingViewIfNeeded()();
  v1 = specialized ContainerCanvasElementView.formFillingView.getter();
  if (v1)
  {
    v2 = (void *)v1;
    swift_beginAccess();
    v3 = v2;
    v4 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v4);
    swift_endAccess();
    FormFillingView.updateUI()();

  }
}

void ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v20 = a5;
  v30 = a1;
  v31 = a4;
  v29 = a3;
  v19 = a2;
  v6 = *MEMORY[0x1E0DEEDD8] & *v5;
  v7 = type metadata accessor for Optional();
  v24 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v18[1] = v6;
  v23 = *(_QWORD *)(*(_QWORD *)(v6 + 1200) + 16);
  v9 = type metadata accessor for Capsule();
  v21 = *(_QWORD *)(v9 - 8);
  v22 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = type metadata accessor for CRKeyPath();
  v27 = *(_QWORD *)(v11 - 8);
  v28 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v26 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v16 = type metadata accessor for WeakRef();
  MEMORY[0x1E0C80A78](v16, v17);
  ContainerCanvasElementView.canvas.getter();
}

void sub_1DDC56B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  void *v21;
  id v22;

  *(_QWORD *)(v7 - 144) = a1;
  if (a1)
  {
    *(_QWORD *)(v7 - 224) = *(_QWORD *)(*(_QWORD *)(v7 - 96) + 16);
    *(_QWORD *)(v7 - 208) = type metadata accessor for Capsule();
    Capsule<>.rootID.getter();
    WeakRef.init(id:)();
    CanvasElementView.canvasElement.getter(v4);
    WeakRef.subscript.getter();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 184) + 8))(v4, *(_QWORD *)(v7 - 176));
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v3, 1, v6);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 160) + 8))(v3, *(_QWORD *)(v7 - 152));
    if (v8 == 1)
    {
      v11 = MEMORY[0x1E0C80A78](v9, v10);
      v12 = *(_QWORD **)(v7 - 144);
      v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      (*(void (**)(_QWORD, _QWORD, uint64_t (*)(), double))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x468))(0, 0, partial apply for closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:), v11);
      v14 = *(_QWORD *)(v7 - 136);
    }
    else
    {
      v15 = *(_QWORD *)(v7 - 112);
      v16 = *(_QWORD *)(v7 - 104);
      v14 = *(_QWORD *)(v7 - 136);
      v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if ((*(_DWORD *)(v7 - 196) & 1) != 0)
      {
        v17 = MEMORY[0x1E0C80A78](v9, v10);
        v12 = *(_QWORD **)(v7 - 144);
        (*(void (**)(_QWORD, _QWORD, uint64_t (*)(), double))((*v13 & *v12) + 0x468))(0, 0, partial apply for closure #2 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:), v17);
      }
      else
      {
        *(_BYTE *)(v7 - 81) = 4;
        v12 = *(_QWORD **)(v7 - 144);
        AnyCanvas.merge<A>(_:from:)(v16, (unsigned __int8 *)(v7 - 81), v15, *(_QWORD *)(v7 - 224));
      }
    }
    (*(void (**)(_QWORD))((*v13 & *v12) + 0x5B0))(0);
    Capsule<>.rootID.getter();
    v18 = ContainerCanvasElementView.unorderedSubelementViews.getter();
    if (*(_QWORD *)(v18 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v20 & 1) != 0))
    {
      v21 = *(void **)(*(_QWORD *)(v18 + 56) + 8 * v19);
      v22 = v21;
    }
    else
    {
      v21 = 0;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v7 - 128) + 8))(v14, *(_QWORD *)(v7 - 120));
    ContainerCanvasElementView.reparentViewIfNeeded(_:)(v21);

  }
}

uint64_t closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28[24];

  v19 = a6;
  v21 = a3;
  v9 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a1);
  v20 = v9[149];
  v10 = v9[150];
  v11 = *(_QWORD *)(v10 + 16);
  v12 = type metadata accessor for Capsule();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v18 - v15;
  v22 = a4;
  v23 = v10;
  v24 = v9[151];
  v25 = a5;
  v26 = v19;
  v27 = a2;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.canvasElement.getter((uint64_t)v16);
  v28[0] = 4;
  AnyCanvas.merge<A>(_:from:)((uint64_t)v16, v28, v20, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, _QWORD);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55[40];
  uint64_t v56;

  v48 = a1;
  KeyPath = a5;
  v42 = a7;
  v56 = a4;
  v39 = *a1;
  v10 = type metadata accessor for CRKeyPath();
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v40 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v38 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v37 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Capsule();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v36 - v22;
  v24 = type metadata accessor for Ref();
  v25 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)&v36 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, a2, v19, v27);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
  v49 = *(_QWORD *)(v39 + *MEMORY[0x1E0D12A70]);
  v50 = a3;
  v30 = v42;
  v51 = v56;
  v52 = KeyPath;
  v53 = a6;
  v54 = v42;
  KeyPath = swift_getKeyPath();
  v31 = v38;
  Capsule<>.root.getter();
  v32 = v40;
  Capsule<>.rootID.getter();
  v33 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 88))(v32, a3, v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v31, a3);
  v34 = (void (*)(char *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v47);
  v34(v55, 0);
  return swift_release();
}

uint64_t key path setter for ContainerCanvasElement.subelements : <A><A1>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 48);
  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v11, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 80))(v11, v5, v6);
}

void ContainerCanvasElementView.reparentViewIfNeeded(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void (*v14)(void);
  id v15;
  uint64_t *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  void *v20;
  uint64_t inited;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t i;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v33 = a1;
    v9 = ContainerCanvasElementView.transientFormFields.getter();
    v10 = specialized Sequence<>.contains(_:)((uint64_t)v33, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0
      || (ContainerCanvasElementView.createSubelementsContainerViewIfNeeded()(),
          (v11 = specialized ContainerCanvasElementView.subelementsContainerView.getter()) == 0))
    {

      return;
    }
    v12 = (void *)v11;
    swift_unknownObjectWeakAssign();
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v14 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v33) + 0xE0);
    v15 = v12;
    v14();
    v16 = (_QWORD *)((char *)v2 + *(_QWORD *)((*v13 & *v2) + 0x4D8));
    swift_beginAccess();
    v17 = v33;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v34 = *v16;
    *v16 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
    *v16 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_endAccess();
    objc_msgSend(v15, sel_addSubview_, v17);
    v19 = specialized ContainerCanvasElementView.formFillingView.getter();
    if (!v19)
      goto LABEL_17;
    v20 = (void *)v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = v17;
    v35 = inited;
    v22 = v20;
    specialized Array._endMutation()();
    v23 = v35;
    if (v35 >> 62)
    {
      v27 = v17;
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v24)
        goto LABEL_14;
    }
    else
    {
      v24 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      v25 = v17;
      if (!v24)
        goto LABEL_14;
    }
    if (v24 < 1)
    {
LABEL_21:
      __break(1u);
      return;
    }
    for (i = 0; i != v24; ++i)
    {
      if ((v23 & 0xC000000000000001) != 0)
      {
        MEMORY[0x1DF0E4D64](i, v23);
        swift_unknownObjectRelease();
      }
    }
LABEL_14:
    v28 = &v22[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v29 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(v28, v23);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v30 = v31;
      if (v31 >= v29)
        goto LABEL_16;
    }
    else
    {
      v30 = *(_QWORD *)((*(_QWORD *)v28 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v30 >= v29)
      {
LABEL_16:
        specialized Array.replaceSubrange<A>(_:with:)(v29, v30, (void (*)(_QWORD))type metadata accessor for AnyCanvasElementView);
        swift_endAccess();
        swift_bridgeObjectRelease();

LABEL_17:
        ContainerCanvasElementView.canvas.getter();
      }
    }
    __break(1u);
    goto LABEL_21;
  }
}

uint64_t closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(_QWORD *a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t (*v13)(double);
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t inited;
  id v25;
  Swift::OpaquePointer v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(uint64_t (*)(uint64_t), _QWORD *);
  _QWORD *v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x2D0);
  v14 = (_QWORD *)v13(v9);
  if (v14)
  {
    v15 = v14;
    v35 = (*(uint64_t (**)(void))((*v12 & *v14) + 0xF0))();
    v17 = v16;

  }
  else
  {
    v35 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = (_QWORD *)((uint64_t (*)(void))v13)();
  if (v18)
  {
    v19 = v18;
    (*(void (**)(_QWORD, unint64_t))((*v12 & *v18) + 0xF8))(0, 0xE000000000000000);

  }
  v20 = swift_unknownObjectWeakAssign();
  (*(void (**)(uint64_t))((*v12 & *a2) + 0xE0))(v20);
  swift_beginAccess();
  v21 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  swift_endAccess();

  v22 = specialized ContainerCanvasElementView.formFillingView.getter();
  if (v22)
  {
    v23 = (void *)v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = a2;
    v36 = (void *)inited;
    v25 = v23;
    specialized Array._endMutation()();
    v26._rawValue = v36;
    v27 = a2;
    FormFillingView.add(_:)(v26);
    swift_bridgeObjectRelease();

  }
  v28 = (_QWORD *)swift_allocObject();
  v29 = v35;
  v28[2] = a2;
  v28[3] = v29;
  v28[4] = v17;
  v28[5] = a3;
  v30 = *(void (**)(uint64_t (*)(uint64_t), _QWORD *))((*v12 & *a1) + 0x460);
  v31 = a2;
  v32 = a3;
  v30(partial apply for closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:), v28);
  return swift_release();
}

uint64_t closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*(uint64_t (**)(void))((*a2 & *MEMORY[0x1E0DEEDD8]) + 0x2D0))();
  if (v8)
  {
    v9 = v8;
    (*(void (**)(uint64_t, uint64_t))((*v7 & *v8) + 0xF8))(a3, a4);

  }
  return ContainerCanvasElementView.reparentViewIfNeeded(_:)(a2);
}

void protocol witness for AnyContainerCanvasElementView.remove(members:) in conformance ContainerCanvasElementView<A>()
{
  ContainerCanvasElementView.remove(members:)();
}

void protocol witness for AnyContainerCanvasElementView.duplicate(members:) in conformance ContainerCanvasElementView<A>()
{
  ContainerCanvasElementView.duplicate(members:)();
}

void protocol witness for AnyContainerCanvasElementView.pasteDrawing(fromURL:at:) in conformance ContainerCanvasElementView<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ContainerCanvasElementView.pasteDrawing(fromURL:at:)(a1, a2, a3, a4 & 1);
}

void protocol witness for AnyContainerCanvasElementView.pasteElements(fromURL:andStrokes:at:) in conformance ContainerCanvasElementView<A>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  ContainerCanvasElementView.pasteElements(fromURL:andStrokes:at:)(a1, a2, a3, a4, a5 & 1);
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;

  v1 = v0[3];
  v2 = v0[6];
  v3 = v0[9];
  v5 = 4;
  return AnyCanvas.merge<A>(_:from:)(v3, &v5, v1, *(_QWORD *)(v2 + 16));
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)()
{
  uint64_t v0;

  return closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(*(_QWORD **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in ContainerCanvasElementView.mergeCanvasElement<A>(_:shouldRegisterUndo:)(a1, v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1DDC57A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 24) + 72))(*(_QWORD *)(a3 + a2 - 48));
}

uint64_t sub_1DDC57A70()
{
  return 48;
}

__n128 sub_1DDC57A7C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

{
  return specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _SetStorage<CRAsset>);
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NSObject>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<UIColor>);
}

void *specialized _NativeSet.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v4 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v12;
    return result;
  }
  v29 = v4;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(_QWORD *)(v10 + 48) + v24, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v24, v9, v5);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v12;
    return result;
  }
  v29 = v4;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(_QWORD *)(v10 + 48) + v24, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v24, v9, v5);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0CB0998]);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>);
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0D12C70]);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v11, MEMORY[0x1E0D12C88]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>);
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]);
  swift_bridgeObjectRetain();
  v28 = a1;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a2;
    v14 = ~v12;
    v15 = *(_QWORD *)(v6 + 72);
    v29 = v6;
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v17 = v15 * v13;
      v16(v9, *(_QWORD *)(v10 + 48) + v15 * v13, v5);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v5);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v19 = 1;
        a2 = v27;
        v6 = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    v20 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v20;
    v30 = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
      v22 = v30;
    }
    v23 = *(_QWORD *)(v22 + 48) + v17;
    v6 = v29;
    a2 = v27;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 32))(v27, v23, v5);
    specialized _NativeSet._delete(at:)(v13, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0]);
    *v20 = v30;
    swift_bridgeObjectRelease();
    v19 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
  swift_bridgeObjectRetain();
  v28 = a1;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a2;
    v14 = ~v12;
    v15 = *(_QWORD *)(v6 + 72);
    v29 = v6;
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v17 = v15 * v13;
      v16(v9, *(_QWORD *)(v10 + 48) + v15 * v13, v5);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v5);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v19 = 1;
        a2 = v27;
        v6 = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    v20 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v20;
    v30 = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      v22 = v30;
    }
    v23 = *(_QWORD *)(v22 + 48) + v17;
    v6 = v29;
    a2 = v27;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 32))(v27, v23, v5);
    specialized _NativeSet._delete(at:)(v13, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x1E0D12B78]);
    *v20 = v30;
    swift_bridgeObjectRelease();
    v19 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  swift_bridgeObjectRetain();
  v28 = a1;
  v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v26 = v2;
    v27 = a2;
    v14 = ~v12;
    v15 = *(_QWORD *)(v6 + 72);
    v29 = v6;
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v17 = v15 * v13;
      v16(v9, *(_QWORD *)(v10 + 48) + v15 * v13, v5);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12890]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v5);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v19 = 1;
        a2 = v27;
        v6 = v29;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    v20 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v20;
    v30 = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      v22 = v30;
    }
    v23 = *(_QWORD *)(v22 + 48) + v17;
    v6 = v29;
    a2 = v27;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 32))(v27, v23, v5);
    specialized _NativeSet._delete(at:)(v13, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888]);
    *v20 = v30;
    swift_bridgeObjectRelease();
    v19 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    if ((v6 & 1) != 0)
    {
      v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  v9 = NSObject._rawHashValue(seed:)(v8);
  v10 = -1 << *(_BYTE *)(v4 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_12;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    v14 = ~v10;
    do
    {
      v11 = (v11 + 1) & v14;
      if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_12;
      v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
      v16 = static NSObject.== infix(_:_:)();

    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v2;
  v20 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<NSObject>);
    v18 = v20;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant.remove(_:)(unsigned __int8 a1)
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = *v1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 8;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(unsigned __int8 *)(v7 + v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 8;
    }
    while (*(unsigned __int8 *)(v7 + v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v1;
  v13 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v10 = v13;
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v6);
  specialized _NativeSet._delete(at:)(v6);
  *v1 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = __CocoaSet.count.getter();
  v3 = swift_unknownObjectRetain();
  v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  v16 = v4;
  v5 = *(_QWORD *)(v4 + 40);
  swift_retain();
  v6 = NSObject._rawHashValue(seed:)(v5);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v11 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v11;
        if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
        v13 = static NSObject.== infix(_:_:)();

        if ((v13 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t (*v33)(uint64_t);
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v6 = a2(0);
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v30 = v4;
    v14 = ~v12;
    swift_retain();
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v32 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v36 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v31(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v34, v33, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
        v21 = v20 & v14;
        if (a1 >= (uint64_t)v32)
        {
          if (v21 >= v32 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v16 = v18;
            v24 = v18 * a1;
            if (v18 * a1 < v19
              || *(_QWORD *)(v10 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(v10 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v24 != v19)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v32 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v4 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*v4 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
}

void specialized _NativeSet._delete(at:)(int64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v35 = a4;
  v33 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v30 = v4;
    v14 = ~v12;
    swift_retain();
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v32 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v36 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v31(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v34, v33, v35);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
        v21 = v20 & v14;
        if (a1 >= (uint64_t)v32)
        {
          if (v21 >= v32 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v16 = v18;
            v24 = v18 * a1;
            if (v18 * a1 < v19
              || *(_QWORD *)(v10 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(v10 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v24 != v19)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v32 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v4 = v30;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v25 = *v4;
  v26 = *(_QWORD *)(*v4 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_BYTE *)(v12 + v2);
          v14 = (_BYTE *)(v12 + v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for SignatureItem);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for ReflowElement);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?)
                  - 8);
  v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_25;
  v18 = *(_QWORD *)(v5 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_33;
  if (v19 < 0)
  {
LABEL_35:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v20 = v17 + v16;
  v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v9);
  v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1)
    outlined init with copy of PageId?(a3, v17);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a3, &demangling cache variable for type metadata for CollectionOfOne<PageId?>);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  unint64_t *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v8 = a3;
    v4 = a2;
    v5 = a1;
    if (!(*v3 >> 62))
    {
      v9 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2)
        goto LABEL_4;
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4)
    goto LABEL_37;
LABEL_4:
  v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 - v6;
    if (!__OFSUB__(v10, v6))
      goto LABEL_7;
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v32;
    if (!__OFADD__(v12, v32))
      goto LABEL_9;
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_39:
  swift_bridgeObjectRetain();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v11 = v10 - v6;
  if (__OFSUB__(v10, v6))
    goto LABEL_41;
LABEL_7:
  v9 = *v3;
  v32 = v11;
  if (*v3 >> 62)
    goto LABEL_42;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v11;
  if (__OFADD__(v12, v11))
    goto LABEL_44;
LABEL_9:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v30 = v7;
  v31 = v8;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
    v12 = 1;
  }
  if (v9 >> 62)
    goto LABEL_45;
  v16 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x1DF0E4D70](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *v3 = v9;
  v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  v17 = v15 + 32 + 8 * v5;
  type metadata accessor for ReflowElement();
  swift_arrayDestroy();
  v18 = v32;
  if (!v32)
  {
LABEL_29:
    if (v10 < 1)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      return specialized Array._endMutation()();
    }
    if (v30)
    {
      v25 = swift_bridgeObjectRetain();
      v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10);
      swift_release();
      goto LABEL_34;
    }
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_52;
  }
  if (!(v9 >> 62))
  {
    v19 = *(_QWORD *)(v15 + 16);
    v20 = v19 - v4;
    if (!__OFSUB__(v19, v4))
      goto LABEL_22;
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v18 = v32;
  v20 = v28 - v4;
  if (__OFSUB__(v28, v4))
    goto LABEL_48;
LABEL_22:
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = (char *)(v17 + 8 * v10);
    v22 = (char *)(v15 + 32 + 8 * v4);
    if (v21 != v22 || v21 >= &v22[8 * v20])
    {
      memmove(v21, v22, 8 * v20);
      v18 = v32;
    }
    if (!(v9 >> 62))
    {
      v23 = *(_QWORD *)(v15 + 16);
      v24 = v23 + v18;
      if (!__OFADD__(v23, v18))
      {
LABEL_28:
        *(_QWORD *)(v15 + 16) = v24;
        goto LABEL_29;
      }
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_49:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v24 = v29 + v32;
    if (!__OFADD__(v29, v32))
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v9 = a3;
    v5 = a2;
    v7 = a1;
    v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5)
    goto LABEL_31;
LABEL_4:
  v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v10;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v8 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
    goto LABEL_36;
LABEL_8:
  v8 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v8;
  v28 = v9;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if (v8 >> 62)
    goto LABEL_37;
  v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x1DF0E4D70](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *v4 = v8;
  v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = (_QWORD *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (!v10)
  {
LABEL_28:
    *v17 = v28;
    return specialized Array._endMutation()();
  }
  if (!(v8 >> 62))
  {
    v18 = *(_QWORD *)(v15 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v19 = v26 - v5;
  if (__OFSUB__(v26, v5))
    goto LABEL_40;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = (char *)(v17 + 1);
    v21 = (char *)(v15 + 32 + 8 * v5);
    if (v17 + 1 != (_QWORD *)v21 || v20 >= &v21[8 * v19])
      memmove(v20, v21, 8 * v19);
    if (!(v8 >> 62))
    {
      v22 = *(_QWORD *)(v15 + 16);
      v23 = v22 + v10;
      if (!__OFADD__(v22, v10))
      {
LABEL_27:
        *(_QWORD *)(v15 + 16) = v23;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v23 = v27 + v10;
    if (!__OFADD__(v27, v10))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for ReflowElement();
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  specialized Set._subtract<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (void (*)(char *))specialized Set._Variant.remove(_:));
}

{
  specialized Set._subtract<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, (void (*)(char *))specialized Set._Variant.remove(_:));
}

void specialized Set._subtract<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void (*v34)(char *);

  v34 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v31 - v19;
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
    return;
  v21 = *(_QWORD *)(a1 + 56);
  v32 = a1 + 56;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v33 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain();
  v25 = 0;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_6;
    }
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v33)
      goto LABEL_24;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v25;
    if (!v29)
    {
      v25 = v28 + 1;
      if (v28 + 1 >= v33)
        goto LABEL_24;
      v29 = *(_QWORD *)(v32 + 8 * v25);
      if (!v29)
      {
        v25 = v28 + 2;
        if (v28 + 2 >= v33)
          goto LABEL_24;
        v29 = *(_QWORD *)(v32 + 8 * v25);
        if (!v29)
        {
          v25 = v28 + 3;
          if (v28 + 3 >= v33)
            goto LABEL_24;
          v29 = *(_QWORD *)(v32 + 8 * v25);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v24 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v20, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v13 + 72) * v27, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v20, v12);
    v34(v16);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, a2);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  v30 = v28 + 4;
  if (v30 >= v33)
  {
LABEL_24:
    swift_release();
    return;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v25 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v33)
      goto LABEL_24;
    v29 = *(_QWORD *)(v32 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

double specialized CRRegister<>.bounds(in:)(unint64_t *a1, objc_class *a2)
{
  return specialized CRRegister<>.bounds(in:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, &lazy protocol witness table cache variable for type Capsule<Paper> and conformance Capsule<A>, (void (*)(_QWORD *__return_ptr, double *, char *))partial apply for closure #1 in CRRegister<>.bounds(in:));
}

{
  return specialized CRRegister<>.bounds(in:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>, &lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (void (*)(_QWORD *__return_ptr, double *, char *))closure #1 in CRRegister<>.bounds(in:)partial apply);
}

double specialized CRRegister<>.bounds(in:)(unint64_t *a1, objc_class *a2, uint64_t *a3, unint64_t *a4, void (*a5)(_QWORD *__return_ptr, double *, char *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t *boxed_opaque_existential_1;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, unint64_t *);
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  objc_class *v87;
  uint64_t v88;
  unint64_t *v89;
  CGAffineTransform *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  void (*v103)(_QWORD *__return_ptr, double *, char *);
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t *v124;
  unint64_t *v125;
  uint64_t v126;
  objc_class *isa;
  char *v128;
  uint64_t v129[3];
  unint64_t *v130;
  uint64_t v131;
  unint64_t *v132;
  PKStrokePath_optional v133;
  PKInk_optional v134;

  v103 = a5;
  v124 = a4;
  v125 = a1;
  isa = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v116 = (uint64_t *)((char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v115 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v9);
  v114 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v101 = (char *)&v100 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v119 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v100 - v19;
  v122 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v122, v21);
  v120 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v128 = (char *)&v100 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v117 = (char *)&v100 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v100 - v31;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v118 = (char *)&v100 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v100 - v39;
  v110 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v110, v41);
  v111 = (char *)&v100 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v43);
  v109 = (char *)&v100 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v45, v46);
  v121 = (uint64_t)&v100 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v123 = *(unint64_t **)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v100 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v100 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v108, v56);
  v107 = (char *)&v100 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v126 = (uint64_t)&v100 - v60;
  v61 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(a3);
  v130 = v61;
  v131 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v124, a3, MEMORY[0x1E0D12B28]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v129);
  (*(void (**)(uint64_t *, unint64_t *, unint64_t *))(*(v61 - 1) + 16))(boxed_opaque_existential_1, v125, v61);
  v106 = v131;
  v124 = v130;
  v105 = __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v63 = (void (*)(char *, uint64_t))v123[1];
  v125 = (unint64_t *)v48;
  v63(v51, v48);
  v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v55, 1, v64) == 1)
  {
    v66 = v114;
    v67 = v115;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
    v68 = (void (*)(char *, unint64_t *))v63;
    CRRegister.value.getter();
    v69 = v116;
    v70 = v125;
    SharedTagged_2.tagged2.getter();
    v71 = (uint64_t)v69;
    v68(v51, v70);
    v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    v73 = *(_QWORD *)(v72 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v71, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      v74 = *MEMORY[0x1E0C9D628];
    }
    else
    {
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
      v91 = v101;
      v92 = v102;
      v93 = (*(uint64_t (**)(char *, char *, uint64_t))(v67 + 32))(v101, v66, v102);
      v95 = MEMORY[0x1E0C80A78](v93, v94);
      *(&v100 - 2) = (uint64_t)v129;
      v74 = specialized Sequence.reduce<A>(_:_:)(v103, (uint64_t)(&v100 - 4), v95, v96, v97, v98);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v91, v92);
    }
  }
  else
  {
    v75 = (uint64_t)v107;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v55, v64);
    outlined init with take of PKStrokeStruct(v75, v126, type metadata accessor for PKStrokeStruct);
    v125 = v130;
    isa = (objc_class *)v131;
    v124 = __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v76 = (uint64_t)v111;
    CRRegister.wrappedValue.getter();
    v77 = v112;
    v78 = v109;
    v79 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v109, v76 + *(int *)(v110 + 32), v113);
    outlined destroy of PKStrokeProperties(v76, type metadata accessor for PKStrokeProperties);
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
    isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v123 = (unint64_t *)v131;
    v125 = v130;
    v116 = __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
    v124 = (unint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v32, type metadata accessor for PKStrokeInheritedProperties);
      v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      if (v80(v20, 1, v33) == 1)
        break;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, v20, v33);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v81 = (uint64_t)v117;
    Ref.subscript.getter();
    v82 = *(void (**)(char *, uint64_t))(v34 + 8);
    v82(v40, v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    v125 = v132;
    outlined destroy of PKStrokeProperties(v81, type metadata accessor for PKStrokeInheritedProperties);
    v117 = (char *)v131;
    v123 = v130;
    v116 = __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
    v83 = v118;
    CRRegister.wrappedValue.getter();
    v84 = (uint64_t)v119;
    v85 = (uint64_t)v128;
    while (1)
    {
      __swift_project_boxed_opaque_existential_1(v129, (uint64_t)v130);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v85, type metadata accessor for PKStrokeInheritedProperties);
      if (v80((char *)v84, 1, v33) == 1)
        break;
      v82(v83, v33);
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v83, v84, v33);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v84, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v86 = (uint64_t)v120;
    Ref.subscript.getter();
    v82(v83, v33);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v86, type metadata accessor for PKStrokeInheritedProperties);
    v134.value.super.isa = (Class)&v132;
    v88 = v126;
    v87 = isa;
    v133.value.super.isa = isa;
    v89 = v125;
    v133.is_nil = (char)v125;
    *(_QWORD *)&v74 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v133, v134, v90);

    outlined destroy of PKStrokeProperties(v121, type metadata accessor for PKStrokePathStruct);
    outlined destroy of PKStrokeProperties(v88, type metadata accessor for PKStrokeStruct);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
  return v74;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  unint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;

  v45 = a2;
  v3 = type metadata accessor for CRKeyPath();
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v42 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v12);
  v41 = (char *)&v38 - v13;
  v48 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(a1 + 56);
  v39 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v40 = (unint64_t)(v15 + 63) >> 6;
  v46 = a1;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v20 = (uint64_t)v42;
  if (v17)
    goto LABEL_6;
LABEL_7:
  v23 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v23 < v40)
    {
      v24 = *(_QWORD *)(v39 + 8 * v23);
      v25 = v19 + 1;
      if (v24)
        goto LABEL_22;
      v25 = v19 + 2;
      if (v19 + 2 >= v40)
        goto LABEL_29;
      v24 = *(_QWORD *)(v39 + 8 * v25);
      if (v24)
        goto LABEL_22;
      v25 = v19 + 3;
      if (v19 + 3 >= v40)
        goto LABEL_29;
      v24 = *(_QWORD *)(v39 + 8 * v25);
      if (v24)
        goto LABEL_22;
      v25 = v19 + 4;
      if (v19 + 4 >= v40)
        goto LABEL_29;
      v24 = *(_QWORD *)(v39 + 8 * v25);
      if (v24)
      {
LABEL_22:
        v17 = (v24 - 1) & v24;
        v47 = v25;
        for (i = __clz(__rbit64(v24)) + (v25 << 6); ; i = v21 | (v19 << 6))
        {
          v27 = v41;
          (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v41, *(_QWORD *)(v46 + 48) + *(_QWORD *)(v7 + 72) * i, v6);
          v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v11, v27, v6);
          v29 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v45) + 0x2F8))(v28);
          v31 = v30;
          ObjectType = swift_getObjectType();
          MEMORY[0x1DF0E30E4](v6);
          v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(ObjectType, v31);

          if (*(_QWORD *)(v33 + 16) && (v34 = specialized __RawDictionaryStorage.find<A>(_:)(v20), (v35 & 1) != 0))
          {
            v36 = *(id *)(*(_QWORD *)(v33 + 56) + 8 * v34);
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v20, v44);
            v37 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
            MEMORY[0x1DF0E4398](v37);
            if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            result = specialized Array._endMutation()();
            v19 = v47;
            if (!v17)
              goto LABEL_7;
          }
          else
          {
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v20, v44);
            result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
            v19 = v47;
            if (!v17)
              goto LABEL_7;
          }
LABEL_6:
          v21 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
          v47 = v19;
        }
      }
      v26 = v19 + 5;
      if (v19 + 5 < v40)
      {
        v24 = *(_QWORD *)(v39 + 8 * v26);
        if (v24)
        {
          v25 = v19 + 5;
          goto LABEL_22;
        }
        while (1)
        {
          v25 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_31;
          if (v25 >= v40)
            break;
          v24 = *(_QWORD *)(v39 + 8 * v25);
          ++v26;
          if (v24)
            goto LABEL_22;
        }
      }
    }
LABEL_29:
    swift_release();
    return v48;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  result = MEMORY[0x1E0DEE9D8];
  v20 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(type metadata accessor for CRKeyPath() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x2F8);
    v9 = *(_QWORD *)(v6 + 72);
    v10 = swift_bridgeObjectRetain();
    do
    {
      v11 = (void *)v8(v10);
      v13 = v12;
      ObjectType = swift_getObjectType();
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);

      if (*(_QWORD *)(v15 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v17 & 1) != 0))
      {
        v18 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v16);
        v19 = swift_bridgeObjectRelease();
        MEMORY[0x1DF0E4398](v19);
        if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        v10 = specialized Array._endMutation()();
      }
      else
      {
        v10 = swift_bridgeObjectRelease();
      }
      v7 += v9;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v20;
  }
  return result;
}

void *specialized Sequence.first(where:)(unint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v5 - 4, a1) : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if (objc_msgSend(a2, sel_isDescendantOfView_, v6))
      {
        swift_bridgeObjectRelease();
        return v7;
      }

      ++v5;
      if (v8 == v4)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

void specialized ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x1E0C80A78](v1, v2);
  MEMORY[0x1E0C80A78](v3, v4);
  v8 = (char *)&v6 - v5;
  v7 = v0;
  ContainerCanvasElementView.canvas.getter();
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v3 = v2;
  v5 = a1;
  if (a1 >> 62)
    goto LABEL_35;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v7 = 0;
    v8 = v5 & 0xC000000000000001;
    v19 = v3;
    v20 = v5 + 32;
    v23 = v5;
    v24 = a2 & 0xC000000000000001;
    v9 = a2 >> 62;
    v21 = v5 & 0xC000000000000001;
    v22 = v6;
    while (1)
    {
      if (v8)
      {
        v10 = (id)MEMORY[0x1DF0E4D64](v7, v5);
        if (!v9)
          goto LABEL_6;
      }
      else
      {
        v10 = *(id *)(v20 + 8 * v7);
        if (!v9)
        {
LABEL_6:
          v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v11)
            goto LABEL_14;
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11)
      {
LABEL_14:

        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
LABEL_7:
      if (v24)
        v12 = (id)MEMORY[0x1DF0E4D64](0, a2);
      else
        v12 = *(id *)(a2 + 32);
      v5 = (uint64_t)v12;
      type metadata accessor for AnyCanvasElementView();
      v13 = static NSObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
      {
LABEL_31:

        swift_bridgeObjectRelease();
        return v7;
      }
      if (v11 != 1)
        break;

      swift_bridgeObjectRelease();
LABEL_26:
      v6 = v22;
      v5 = v23;
      v9 = a2 >> 62;
      v8 = v21;
LABEL_27:
      if (__OFADD__(v7++, 1))
        goto LABEL_34;
      if (v7 == v6)
        return 0;
    }
    if (v24)
    {
      v5 = 1;
      while (1)
      {
        MEMORY[0x1DF0E4D64](v5, a2);
        v3 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v14 = static NSObject.== infix(_:_:)();
        swift_unknownObjectRelease();
        if ((v14 & 1) != 0)
          goto LABEL_31;
        ++v5;
        if (v3 == v11)
          goto LABEL_25;
      }
      __break(1u);
    }
    else
    {
      v15 = 5;
      while (1)
      {
        v3 = v15 - 3;
        if (__OFADD__(v15 - 4, 1))
          break;
        v5 = (uint64_t)*(id *)(a2 + 8 * v15);
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_31;
        ++v15;
        if (v3 == v11)
        {
LABEL_25:

          swift_bridgeObjectRelease();
          v3 = v19;
          goto LABEL_26;
        }
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  id v20;
  id v21;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v23;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v5 = swift_bridgeObjectRetain();
  v37 = a2;
  v6 = specialized Collection.firstIndex(where:)(v5, a2);
  v8 = v7;
  v9 = v2;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_82;
    if (*a1 >> 62)
    {
LABEL_83:
      swift_bridgeObjectRetain();
      v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v10 != v32)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v35 = v9;
      v36 = v37 & 0xC000000000000001;
      v34 = a1;
      while (1)
      {
        v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v12 = (id)MEMORY[0x1DF0E4D64](v10);
        }
        else
        {
          if ((v10 & 0x8000000000000000) != 0)
            goto LABEL_71;
          if (v10 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_72;
          v12 = *(id *)(v11 + 8 * v10 + 32);
        }
        v13 = v12;
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          v14 = _CocoaArrayWrapper.endIndex.getter();
          if (!v14)
            goto LABEL_22;
        }
        else
        {
          v14 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v14)
            goto LABEL_22;
        }
        if (v36)
          v15 = (id)MEMORY[0x1DF0E4D64](0, v37);
        else
          v15 = *(id *)(v37 + 32);
        v16 = v15;
        type metadata accessor for AnyCanvasElementView();
        v17 = static NSObject.== infix(_:_:)();

        if ((v17 & 1) != 0)
        {

          swift_bridgeObjectRelease();
          v18 = __OFADD__(v10++, 1);
          if (v18)
            goto LABEL_73;
          goto LABEL_43;
        }
        if (v14 != 1)
        {
          if (v36)
          {
            v28 = 1;
            while (1)
            {
              MEMORY[0x1DF0E4D64](v28, v37);
              a1 = (_QWORD *)(v28 + 1);
              if (__OFADD__(v28, 1))
                break;
              v9 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v9 & 1) != 0)
                goto LABEL_59;
              ++v28;
              if (a1 == (_QWORD *)v14)
                goto LABEL_57;
            }
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          v9 = 5;
          while (1)
          {
            a1 = (_QWORD *)(v9 - 3);
            if (__OFADD__(v9 - 4, 1))
              break;
            v29 = *(id *)(v37 + 8 * v9);
            v30 = static NSObject.== infix(_:_:)();

            if ((v30 & 1) != 0)
            {
LABEL_59:

              swift_bridgeObjectRelease();
              a1 = v34;
              v9 = v35;
              v18 = __OFADD__(v10++, 1);
              if (v18)
                goto LABEL_73;
              goto LABEL_43;
            }
            ++v9;
            if (a1 == (_QWORD *)v14)
            {
LABEL_57:

              swift_bridgeObjectRelease();
              a1 = v34;
              v9 = v35;
              if (v6 != v10)
                goto LABEL_23;
              goto LABEL_41;
            }
          }
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
LABEL_22:

        swift_bridgeObjectRelease();
        if (v6 == v10)
          goto LABEL_41;
LABEL_23:
        v19 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v20 = (id)MEMORY[0x1DF0E4D64](v6, *a1);
          v19 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
            goto LABEL_27;
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_76;
          if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_77;
          v20 = *(id *)(v19 + 8 * v6 + 32);
          if ((v19 & 0xC000000000000001) == 0)
          {
LABEL_27:
            if ((v10 & 0x8000000000000000) != 0)
              goto LABEL_78;
            if (v10 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_79;
            v21 = *(id *)(v19 + 8 * v10 + 32);
            goto LABEL_30;
          }
        }
        v21 = (id)MEMORY[0x1DF0E4D64](v10, v19);
        v19 = *a1;
LABEL_30:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v19;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v19);
        v23 = *(void **)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
        *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v21;

        specialized Array._endMutation()();
        v24 = *a1;
        v25 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v24;
        if (!v25 || v24 < 0 || (v24 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v24);
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_80;
        if (v10 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_81;
        v26 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20);
        *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v10 + 0x20) = v20;

        specialized Array._endMutation()();
LABEL_41:
        v18 = __OFADD__(v6++, 1);
        if (v18)
          goto LABEL_75;
        v18 = __OFADD__(v10++, 1);
        if (v18)
          goto LABEL_73;
LABEL_43:
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v27 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v27 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v10 == v27)
          return v6;
      }
    }
    return v6;
  }
  if (!(*a1 >> 62))
    return *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1DDC5CD54()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(a1, *(_QWORD **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1DDC5CD88()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ContainerCanvasElementView.reparentViewIfNeeded(_:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void specialized ContainerCanvasElementView.convertToHandwriting(members:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[15];
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *v0;
  v31 = *MEMORY[0x1E0DEEDD8];
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  MEMORY[0x1E0C80A78](v1, v2);
  v27[8] = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v27[14] = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v4);
  v27[11] = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v27[13] = (char *)v27 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v29 = (char *)v27 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v12, v13);
  v27[12] = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v27[9] = (char *)v27 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  MEMORY[0x1E0C80A78](v18, v19);
  v27[7] = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  MEMORY[0x1E0C80A78](v30, v23);
  v27[10] = (char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  ContainerCanvasElementView.canvas.getter();
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.ColorAttribute, &type metadata for TextAttributeScope.ColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.ColorAttribute, &type metadata for TextAttributeScope.ColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.ColorAttribute, &type metadata for TextAttributeScope.ColorAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute);
  }
  return result;
}

uint64_t sub_1DDC5D8D0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC5D8F4()
{
  id *v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #3 in ContainerCanvasElementView.convertToHandwriting(members:)(a1, a2, a3, *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD **)(v3 + 64), *(_QWORD **)(v3 + 72), *(_QWORD *)(v3 + 80), *(double *)(v3 + 56), *(void **)(v3 + 88));
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.remove(members:)()
{
  uint64_t v0;

  return closure #1 in ContainerCanvasElementView.remove(members:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1DDC5D9A0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #2 in ContainerCanvasElementView.remove(members:)()
{
  Swift::OpaquePointer *v0;

  FormFillingView.add(_:)(v0[2]);
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ContainerCanvasElementView.remove(members:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(BOOL **)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDC5DA1C()
{
  return 24;
}

__n128 sub_1DDC5DA28(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDC5DA44()
{
  return 24;
}

__n128 sub_1DDC5DA50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDC5DA64()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)()
{
  uint64_t v0;

  return implicit closure #1 in Analytics.recordRemoveCanvasElementEvent(type:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1DDC5DA94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ContainerCanvasElementView.recordRemoveMembersAnalytics(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)()
{
  uint64_t v0;

  return closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 48), *(_QWORD *)(v0 + 56), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ContainerCanvasElementView.pastePaper(_:andStrokes:pasteOffset:)(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48));
}

_QWORD *_So13PKStrokeFlagsa34__Unnamed_union___Anonymous_field0V02__c10_struct___e1_F0V_isPastedStroke_setter(_QWORD *result)
{
  *result |= 0x80000000000uLL;
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)()
{
  uint64_t v0;

  return closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(*(_QWORD **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD **)(v0 + 56), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t partial apply for implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)()
{
  uint64_t v0;

  return implicit closure #1 in Analytics.recordAddCanvasElementEvent(type:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in closure #1 in ContainerCanvasElementView.addCanvasElements<A>(_:)(a1, v2[7], v2[2], v2[4], v2[5], v2[6], a2);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ReflowElement);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3)
    goto LABEL_31;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 - v9;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x1DF0E4D70](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (!v8)
    return specialized Array._endMutation()();
  if (!(v7 >> 62))
  {
    v15 = *(_QWORD *)(v13 + 16);
    v16 = v15 - v3;
    if (!__OFSUB__(v15, v3))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v16 = v22 - v3;
  if (__OFSUB__(v22, v3))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16)
      memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
    if (!(v7 >> 62))
    {
      v18 = *(_QWORD *)(v13 + 16);
      v19 = v18 + v8;
      if (!__OFADD__(v18, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v19;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v23 + v8;
    if (!__OFADD__(v23, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of PageId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageOverlayView);
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(_QWORD *)v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in CRRegister<>.bounds(in:)partial apply(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  partial apply for closure #1 in CRRegister<>.bounds(in:)(a1, a2);
}

uint64_t protocol witness for PaperKitLiveStreamMessenger.send(thumbnail:) in conformance ExtensionViewController.LiveStreamMessenger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PaperKitLiveStreamMessenger.send(thumbnail:)(a1, a2, a3, a4);
}

uint64_t PaperKitLiveStreamMessenger.send(thumbnail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(a1, a2, a4, a5);
}

void PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  dispatch_semaphore_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a3;
  v23 = a4;
  v24 = a2;
  v5 = type metadata accessor for CRAsset();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5, v8);
  v9 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = dispatch_semaphore_create(0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = (v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  v19 = v23;
  *((_QWORD *)v18 + 4) = v22;
  *((_QWORD *)v18 + 5) = v19;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v16], v9, v5);
  *(_QWORD *)&v18[v17] = v24;
  *(_QWORD *)&v18[(v17 + 15) & 0xFFFFFFFFFFFFFFF8] = v14;
  swift_unknownObjectRetain();
  v20 = v14;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessengerLink.send(_:), (uint64_t)v18);
  swift_release();
  OS_dispatch_semaphore.wait()();

}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:)
                                        + async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:));
  v10 = (_QWORD *)swift_task_alloc();
  v8[9] = v10;
  *v10 = v8;
  v10[1] = closure #1 in PaperKitLiveStreamMessengerLink.send(_:);
  return v12(a4);
}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = a2;
  v3[10] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in PaperKitLiveStreamMessengerLink.send(_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1 >> 60 != 15)
  {
    v2 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(v2, *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
    outlined consume of Data?(v2, v1);
  }
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for CRMulticastLink.send(_:) in conformance PaperKitLiveStreamMessengerLink<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return PaperKitLiveStreamMessengerLink.send(_:)(a1, a2, *v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

void protocol witness for CRMulticastLink.send(_:) in conformance PaperKitLiveStreamMessengerLink<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  PaperKitLiveStreamMessengerLink.send(_:)(a1, *v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84;
  uint64_t v85;

  v69 = a4;
  v78 = a6;
  v79 = a7;
  v82 = a5;
  v66 = a3;
  v60 = a2;
  v68 = a1;
  v80 = a9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v73 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v76 = AssociatedTypeWitness;
  v77 = *(_QWORD *)(v75 + 64);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v15);
  v74 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v81 = (char *)&v60 - v19;
  v63 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v20);
  v61 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a10;
  v64 = a8;
  v22 = type metadata accessor for Capsule();
  v23 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v60 - v25;
  v27 = type metadata accessor for CRKeyPath();
  v28 = *(_QWORD *)(v27 - 8);
  v71 = v27;
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
  v32 = *(unsigned __int8 *)(v28 + 80);
  v72 = v28;
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DDF33AB0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v34 + v33, v60, v27);
  swift_bridgeObjectRetain();
  CRKeyPath.init(_:)();
  v83[0] = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type [CRKeyPath] and conformance [A]();
  v67 = v31;
  CRKeyPath.init<A>(_:)();
  type metadata accessor for CRMulticastSyncManager();
  v35 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v26, v66, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v26, 0, 1, v22);
  v36 = v68;
  MEMORY[0x1DF0E3D44]();
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v69, v63);
  v37 = CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)();
  v39 = v79;
  v38 = v80;
  v84 = type metadata accessor for PaperKitLiveStreamMessengerLink(0, v79, v80, v40);
  v85 = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperKitLiveStreamMessengerLink<A>, v84);
  v83[0] = v70;
  swift_unknownObjectRetain();
  v66 = v37;
  CRMulticastSyncManager.setLink(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  v41 = ObjectIdentifier.debugDescription.getter();
  v68 = v42;
  v69 = v41;
  v43 = v81;
  (*(void (**)(uint64_t, uint64_t))(v38 + 40))(v39, v38);
  v44 = type metadata accessor for TaskPriority();
  v45 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v73, 1, 1, v44);
  v46 = swift_allocObject();
  swift_weakInit();
  v48 = v74;
  v47 = v75;
  v49 = v76;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, v43, v76);
  type metadata accessor for MainActor();
  v50 = v78;
  swift_bridgeObjectRetain();
  swift_retain();
  v51 = static MainActor.shared.getter();
  v52 = (*(unsigned __int8 *)(v47 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  v53 = (v77 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  v54 = (char *)swift_allocObject();
  v55 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v54 + 2) = v51;
  *((_QWORD *)v54 + 3) = v55;
  v56 = v64;
  *((_QWORD *)v54 + 4) = v79;
  *((_QWORD *)v54 + 5) = v56;
  v57 = v65;
  *((_QWORD *)v54 + 6) = v80;
  *((_QWORD *)v54 + 7) = v57;
  *((_QWORD *)v54 + 8) = v82;
  *((_QWORD *)v54 + 9) = v50;
  v58 = v68;
  *((_QWORD *)v54 + 10) = v69;
  *((_QWORD *)v54 + 11) = v58;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v54[v52], v48, v49);
  *(_QWORD *)&v54[v53] = v46;
  swift_release();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v45, (uint64_t)&async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:), (uint64_t)v54);
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v81, v49);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v71);
  return v66;
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[16] = a8;
  v8[17] = v14;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  swift_getAssociatedTypeWitness();
  v8[18] = swift_getAssociatedConformanceWitness();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[19] = AssociatedTypeWitness;
  v8[20] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[21] = swift_task_alloc();
  v8[22] = swift_task_alloc();
  v10 = swift_checkMetadataState();
  v8[23] = v10;
  v8[24] = *(_QWORD *)(v10 - 8);
  v8[25] = swift_task_alloc();
  v11 = swift_getAssociatedTypeWitness();
  v8[26] = v11;
  v8[27] = *(_QWORD *)(v11 - 8);
  v8[28] = swift_task_alloc();
  v8[29] = type metadata accessor for MainActor();
  v8[30] = static MainActor.shared.getter();
  v8[31] = dispatch thunk of Actor.unownedExecutor.getter();
  v8[32] = v12;
  return swift_task_switch();
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for multipeerLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[33] = __swift_project_value_buffer(v1, (uint64_t)multipeerLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[15];
  if (v4)
  {
    v11 = v0[12];
    v6 = v0[13];
    v12 = v0[14];
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1DDB0F000, v2, v3, "Started forwarding %s message stream for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v8, -1, -1);
    MEMORY[0x1DF0E6558](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[24] + 16))(v0[25], v0[16], v0[23]);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  swift_beginAccess();
  v0[34] = static MainActor.shared.getter();
  v0[35] = swift_getAssociatedConformanceWitness();
  v9 = (_QWORD *)swift_task_alloc();
  v0[36] = v9;
  *v9 = v0;
  v9[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 296) = v1;
  *(_QWORD *)(v0 + 304) = v2;
  if (v2 >> 60 == 15)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    swift_release();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 120);
    if (v5)
    {
      v20 = *(_QWORD *)(v0 + 112);
      v8 = *(_QWORD *)(v0 + 96);
      v7 = *(_QWORD *)(v0 + 104);
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v21 = v10;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v6, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1DDB0F000, v3, v4, "Ended forwarding %s message stream for %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v10, -1, -1);
      MEMORY[0x1DF0E6558](v9, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (swift_weakLoadStrong())
  {
    if ((CRMulticastSyncManager.isValidMessage(_:)() & 1) != 0)
    {
      swift_bridgeObjectRetain();
      outlined copy of Data?(v1, v2);
      swift_bridgeObjectRetain();
      outlined copy of Data?(v1, v2);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.debug.getter();
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(_QWORD *)(v0 + 104);
      if (v13)
      {
        v15 = *(_QWORD *)(v0 + 96);
        v16 = swift_slowAlloc();
        *(_QWORD *)(v0 + 72) = swift_slowAlloc();
        *(_DWORD *)v16 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v16 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, (uint64_t *)(v0 + 72));
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2048;
        __asm { BR              X10 }
      }
      outlined consume of Data?(v1, v2);
      swift_bridgeObjectRelease_n();
      outlined consume of Data?(v1, v2);

      CRMulticastSyncManager.receive(_:)();
      swift_release();
      outlined consume of Data?(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
      *(_QWORD *)(v0 + 272) = static MainActor.shared.getter();
      *(_QWORD *)(v0 + 280) = swift_getAssociatedConformanceWitness();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 288) = v19;
      *v19 = v0;
      v19[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
      return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
    }
    swift_release();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 312) = v18;
  *v18 = v0;
  v18[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  return ImageThumbnailManager.receiveThumbnailMessage(_:)(v1, v2);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  outlined consume of Data?(v0[37], v0[38]);
  v0[34] = static MainActor.shared.getter();
  v0[35] = swift_getAssociatedConformanceWitness();
  v1 = (_QWORD *)swift_task_alloc();
  v0[36] = v1;
  *v1 = v0;
  v1[1] = closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:);
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  swift_release();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v5(v2, v1, v3);
  swift_getAssociatedConformanceWitness();
  v6 = _getErrorEmbeddedNSError<A>(_:)();
  v7 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 152);
    swift_allocError();
    v5(v9, v7, v8);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a7;
  v49 = a8;
  v51 = a5;
  v52 = a6;
  v50 = a3;
  v47 = a10;
  v45 = a4;
  v46 = a9;
  v10 = *a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v14;
  v15 = (uint64_t *)(v10 + *MEMORY[0x1E0D126F0]);
  v16 = *v15;
  v44 = v15[1];
  type metadata accessor for Capsule();
  v17 = type metadata accessor for AsyncStream();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17, v20);
  v21 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v41 - v24;
  v26 = ObjectIdentifier.debugDescription.getter();
  v41 = v27;
  v42 = v26;
  CRMulticastSyncManager.updates.getter();
  v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v14, 1, 1, v28);
  v29 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v25, v17);
  v30 = (*(unsigned __int8 *)(v18 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v31 = (v19 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (char *)swift_allocObject();
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  v33 = v49;
  *((_QWORD *)v32 + 4) = v48;
  *((_QWORD *)v32 + 5) = v33;
  v34 = v46;
  *((_QWORD *)v32 + 6) = v16;
  *((_QWORD *)v32 + 7) = v34;
  v35 = v44;
  v36 = v45;
  *((_QWORD *)v32 + 8) = v47;
  *((_QWORD *)v32 + 9) = v35;
  *((_QWORD *)v32 + 10) = v50;
  *((_QWORD *)v32 + 11) = v36;
  v37 = v41;
  *((_QWORD *)v32 + 12) = v42;
  *((_QWORD *)v32 + 13) = v37;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v32[v30], v21, v17);
  *(_QWORD *)&v32[v31] = v29;
  v38 = &v32[(v31 + 15) & 0xFFFFFFFFFFFFFFF8];
  v39 = v52;
  *(_QWORD *)v38 = v51;
  *((_QWORD *)v38 + 1) = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v43, (uint64_t)&async function pointer to partial apply for closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:), (uint64_t)v32);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, v17);
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 136) = v14;
  *(_QWORD *)(v8 + 144) = v15;
  *(_QWORD *)(v8 + 128) = v13;
  *(_OWORD *)(v8 + 112) = v12;
  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 72) = a4;
  v9 = type metadata accessor for Capsule();
  *(_QWORD *)(v8 + 152) = v9;
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  type metadata accessor for Optional();
  *(_QWORD *)(v8 + 176) = swift_task_alloc();
  v10 = type metadata accessor for AsyncStream.Iterator();
  *(_QWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 192) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 200) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for multipeerLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[26] = __swift_project_value_buffer(v1, (uint64_t)multipeerLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[12];
  if (v4)
  {
    v11 = v0[9];
    v6 = v0[10];
    v12 = v0[11];
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1DDB0F000, v2, v3, "Started merging %s multicast stream for %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v8, -1, -1);
    MEMORY[0x1DF0E6558](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  type metadata accessor for AsyncStream();
  AsyncStream.makeAsyncIterator()();
  swift_beginAccess();
  v9 = (_QWORD *)swift_task_alloc();
  v0[27] = v9;
  *v9 = v0;
  v9[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 112) + 16;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 168), v1, v2);
    v5 = MEMORY[0x1DF0E666C](v4);
    *(_QWORD *)(v0 + 224) = v5;
    if (v5)
    {
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 232) = v6;
      *v6 = v0;
      v6[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
      return LiveEditable.endedLiveEditing()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 96);
  if (v10)
  {
    v12 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v17 = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1DDB0F000, v8, v9, "Ended merging %s multicast stream for %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v15, -1, -1);
    MEMORY[0x1DF0E6558](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 240) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(void (**)(uint64_t))(v0 + 120);
  swift_release();
  v2(v1);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[19];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[27] = v4;
  *v4 = v0;
  v4[1] = closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.send(thumbnail:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PaperKitLiveStreamMessenger.messages.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1DDC60184()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC601A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  type metadata accessor for Capsule();
  v1 = type metadata accessor for AsyncStream();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for Capsule();
  v3 = *(_QWORD *)(type metadata accessor for AsyncStream() - 8);
  v12 = v1[2];
  v11 = v1[3];
  v4 = v1[11];
  v10 = v1[10];
  v5 = v1[12];
  v6 = v1[13];
  v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [CRKeyPath] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CRKeyPath]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for PaperKitLiveStreamMessengerLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaperKitLiveStreamMessengerLink);
}

uint64_t sub_1DDC60444()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC60468()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  unint64_t v3;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v3 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[8];
  v7 = v1[9];
  v9 = v1[10];
  v8 = v1[11];
  v12 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(a1, v4, v5, v6, v7, v9, v8, v12);
}

uint64_t type metadata instantiation function for PaperKitLiveStreamMessengerLink()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1DDC6062C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for CRAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperKitLiveStreamMessengerLink.send(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t);

  v2 = *(_QWORD *)(type metadata accessor for CRAsset() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + v4);
  v7 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8));
  v8 = swift_task_alloc();
  v9 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)v8 = v1;
  *(_QWORD *)(v8 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_OWORD *)(v8 + 56) = v9;
  *(_QWORD *)(v8 + 40) = v6;
  *(_QWORD *)(v8 + 48) = v7;
  v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:)
                                        + async function pointer to specialized static ImageThumbnailManager.generateThumbnailMessage(from:));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 72) = v10;
  *v10 = v8;
  v10[1] = closure #1 in PaperKitLiveStreamMessengerLink.send(_:);
  return v12(v5);
}

void __swiftcall UIView.transformForConvertingFromView(_:)(CGAffineTransform *__return_ptr retstr, UIView *a2)
{
  UIView *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  CGFloat x;
  CGFloat y;
  double width;
  double height;
  BOOL v11;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGRect v14;
  CGRect v15;

  v4 = xmmword_1DDF33A30;
  v5 = xmmword_1DDF33970;
  v6 = 0uLL;
  if (v2 != a2)
  {
    -[UIView convertRect:fromCoordinateSpace:](v2, sel_convertRect_fromCoordinateSpace_, a2, 0.0, 0.0, 1.0, 1.0);
    x = v14.origin.x;
    y = v14.origin.y;
    width = v14.size.width;
    height = v14.size.height;
    v15.origin.x = 0.0;
    v15.origin.y = 0.0;
    v15.size.width = 1.0;
    v15.size.height = 1.0;
    v11 = CGRectEqualToRect(v14, v15);
    v6 = 0uLL;
    v5 = xmmword_1DDF33970;
    v4 = xmmword_1DDF33A30;
    if (!v11)
    {
      CGAffineTransformMakeTranslation(&v13, x, y);
      CGAffineTransformScale(&v12, &v13, width + 0.0, height + 0.0);
      v5 = *(_OWORD *)&v12.a;
      v4 = *(_OWORD *)&v12.c;
      v6 = *(_OWORD *)&v12.tx;
    }
  }
  *(_OWORD *)&retstr->a = v5;
  *(_OWORD *)&retstr->c = v4;
  *(_OWORD *)&retstr->tx = v6;
}

Swift::Void __swiftcall CanvasElementPDFAnnotationAppearanceStreamView.draw(_:)(__C::CGRect a1)
{
  char *v1;
  double height;
  double width;
  double y;
  double x;
  uint64_t v6;
  void *v7;
  CGContext *v8;
  CGContext *v9;
  double v10;
  CGFloat v11;
  double v12;
  objc_super v13;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
  objc_msgSendSuper2(&v13, sel_drawRect_, x, y, width, height);
  v6 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation]);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = UIGraphicsGetCurrentContext();
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v7, sel_bounds);
      v11 = -v10;
      objc_msgSend(v7, sel_bounds);
      CGContextTranslateCTM(v9, v11, -v12);
      objc_msgSend(v7, sel_drawWithBox_inContext_, 0, v9);

      v7 = v9;
    }

  }
}

uint64_t type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView()
{
  return objc_opt_self();
}

id CanvasElementPDFAnnotationAppearanceStreamView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void CanvasElementPDFAnnotationAppearanceStreamView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id CanvasElementPDFAnnotationAppearanceStreamView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for CanvasElementPDFAnnotationAppearanceStreamView()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for CanvasViewTiledViewDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasViewTiledViewDelegate.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t @objc CanvasViewTiledViewDelegate.canvasView(_:beganStroke:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v16;

  v7 = type metadata accessor for PKStroke();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3;
  v13 = a4;
  v14 = a1;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t @objc CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  char v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)();

  return v9 & 1;
}

unint64_t CanvasViewTiledViewDelegate.tiledViewAttachmentViews()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  unint64_t v4;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  v2 = (void *)v1;
  v3 = (id)specialized Canvas.paperView.getter();

  v4 = ContainerCanvasElementView.pencilKitAttachmentViews()();
  return v4;
}

Class @objc CanvasViewTiledViewDelegate.tiledViewAttachmentViews()(void *a1)
{
  id v1;
  Class isa;

  v1 = a1;
  CanvasViewTiledViewDelegate.tiledViewAttachmentViews()();

  type metadata accessor for PKAttachmentView();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t @objc CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LOBYTE(a1) = specialized CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)();

  return a1 & 1;
}

void @objc CanvasViewTiledViewDelegate.init()()
{
  specialized CanvasViewTiledViewDelegate.init()();
}

id CanvasViewTiledViewDelegate.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasViewTiledViewDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasViewTiledViewDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewTiledViewDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasViewTiledViewDelegate);
}

id specialized CanvasViewTiledViewDelegate.init(canvas:)()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2 = (objc_class *)type metadata accessor for CanvasViewTiledViewDelegate(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasViewTiledViewDelegate.__allocating_init(canvas:)()
{
  uint64_t *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CanvasViewTiledViewDelegate(0, v0[10], v0[11], v0[12]));
  return specialized CanvasViewTiledViewDelegate.init(canvas:)();
}

uint64_t specialized CanvasViewTiledViewDelegate.canvasView(_:shouldBeginDrawingWith:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  void *v4;
  id v5;
  unsigned int v6;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1)
    return 1;
  v2 = (void *)v1;
  v3 = (char *)CanvasView.paperViewController.getter();

  if (!v3)
    return 1;
  v4 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_toolPicker];
  objc_msgSend(v4, sel__dismissPopovers);
  v5 = v4;
  v6 = objc_msgSend(v5, sel__isHandwritingToolSelected);

  return v6 ^ 1;
}

uint64_t specialized CanvasViewTiledViewDelegate._canvasViewSnapshottingDisabled(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasViewTiledViewDelegate.canvas);
  if (!v1)
    goto LABEL_5;
  v2 = (void *)v1;
  v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  if (!MEMORY[0x1DF0E666C](v3))
  {

LABEL_5:
    v6 = 0;
    return v6 & 1;
  }
  v4 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  LOBYTE(v4) = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 56))(v2, ObjectType, v4);
  swift_unknownObjectRelease();

  v6 = v4 ^ 1;
  return v6 & 1;
}

void specialized CanvasViewTiledViewDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for PKAttachmentView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PKAttachmentView;
  if (!lazy cache variable for type metadata for PKAttachmentView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKAttachmentView);
  }
  return result;
}

id SynapseLinkItem.icon.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Class isa;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_linkPreviewMetadata));
  if (v1)
  {
    v2 = v1;
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    outlined copy of Data._Representation(v3, v5);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend((id)objc_opt_self(), sel_metadataWithDataRepresentation_, isa);
    outlined consume of Data._Representation(v3, v5);

    v8 = objc_msgSend(v7, sel_icon);
    if (v8
      && (v9 = v8, v10 = objc_msgSend(v8, sel_platformImage), v9, v10)
      || (v11 = objc_msgSend(v7, sel_image)) != 0
      && (v12 = v11,
          v10 = objc_msgSend(v11, sel_platformImage),
          v12,
          v10))
    {
      outlined consume of Data._Representation(v3, v5);

    }
    else
    {
      if (one-time initialization token for logger != -1)
        swift_once();
      v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)logger);
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1DDB0F000, v19, v20, "Unarchived linkPreviewMetadata doesn't have an icon image.", v21, 2u);
        MEMORY[0x1DF0E6558](v21, -1, -1);
      }

      v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
      outlined consume of Data._Representation(v3, v5);
    }
    return v10;
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)logger);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1DDB0F000, v14, v15, "Synapse item's linkPreviewMetadata is nil.", v16, 2u);
      MEMORY[0x1DF0E6558](v16, -1, -1);
    }

    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_init);
  }
}

id SynapseLinkItem.synapseItem.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
}

uint64_t SynapseLinkItem.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t SynapseLinkItem.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*SynapseLinkItem.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id SynapseLinkItem.init(synapseItem:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = a1;
  v10.receiver = v1;
  v10.super_class = ObjectType;
  v4 = a1;
  v5 = objc_msgSendSuper2(&v10, sel_init);
  v6 = (void *)objc_opt_self();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_defaultCenter, v10.receiver, v10.super_class);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_linkPreviewDidFinishLoadingWithNotification_, *MEMORY[0x1E0DB0760], v4);

  return v7;
}

uint64_t SynapseLinkItem.targetURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for URL();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t SynapseLinkItem.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v23;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5, v6);
  v9 = (char *)&v23 - v8;
  v10 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  v11 = objc_msgSend(v10, sel_displayTitle, v7);
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v14 = objc_msgSend(v10, sel_itemURL);
    if (v14)
    {
      v15 = v14;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v16 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 0, 1, v16);
    }
    else
    {
      v16 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v4, 1, 1, v16);
    }
    outlined init with take of URL?((uint64_t)v4, (uint64_t)v9);
    type metadata accessor for URL();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, v16) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      v13 = URL.host.getter();
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v16);
      if (v19)
      {
        if (String.count.getter() < 31)
          return v13;
        swift_bridgeObjectRelease();
      }
    }
    v20 = objc_msgSend(v10, sel_sourceLastKnownName);
    if (v20)
    {
      v21 = v20;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      if (one-time initialization token for noTitleString != -1)
        swift_once();
      v13 = static SynapseLinkItem.noTitleString;
      swift_bridgeObjectRetain();
    }
  }
  return v13;
}

uint64_t SynapseLinkItem.subtitle.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_sourceLastKnownName));
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t SynapseLinkItem.dataRepresentation.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v17[2];

  v17[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  v17[0] = 0;
  v2 = objc_msgSend(v1, sel_dataRepresentationWithError_, v17);
  v3 = v17[0];
  if (v2)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = v3;
    v6 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)logger);
    v8 = v6;
    v9 = v6;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (void *)swift_slowAlloc();
      v17[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue();
      v14 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v10, v11, "%s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v13, -1, -1);
      MEMORY[0x1DF0E6558](v12, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return v4;
}

Swift::Void __swiftcall SynapseLinkItem.loadPreviewIfNeeded()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_loadFullPreviewIfNeeded);
}

void SynapseLinkItem.linkPreviewDidFinishLoading(notification:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  void *v4;
  _BYTE v5[24];
  uint64_t v6;

  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    Notification.object.getter();
    if (v6)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
      if ((swift_dynamicCast() & 1) != 0)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        if ((static NSObject.== infix(_:_:)() & 1) != 0
          && (v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate, swift_beginAccess(),
                                                                             MEMORY[0x1DF0E666C](v1)))
        {
          v2 = *(_QWORD *)(v1 + 8);
          ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v2 + 8))(v0, &protocol witness table for SynapseLinkItem, ObjectType, v2);

          swift_unknownObjectRelease();
        }
        else
        {

        }
      }
    }
    else
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t one-time initialization function for noTitleString()
{
  Swift::String v0;
  Swift::String_optional v1;
  Swift::String v2;
  uint64_t result;
  Swift::String v4;
  Swift::String v5;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._object = (void *)0x80000001DDF53370;
  v0._countAndFlagsBits = 0x656C746954206F4ELL;
  v0._object = (void *)0xE800000000000000;
  v1.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000054;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  result = v4._countAndFlagsBits;
  static SynapseLinkItem.noTitleString = (__int128)v4;
  return result;
}

id SynapseLinkItem.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SynapseLinkItem.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SynapseLinkItem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for LinkItem.delegate.getter in conformance SynapseLinkItem()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t protocol witness for LinkItem.delegate.setter in conformance SynapseLinkItem(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for LinkItem.delegate.modify in conformance SynapseLinkItem(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void SynapseLinkItem.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t protocol witness for LinkItem.targetURL.getter in conformance SynapseLinkItem@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for URL();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t protocol witness for LinkItem.subtitle.getter in conformance SynapseLinkItem()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_sourceLastKnownName));
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id protocol witness for LinkItem.loadPreviewIfNeeded() in conformance SynapseLinkItem()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_loadFullPreviewIfNeeded);
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDC62240@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1DDC62298(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for SynapseLinkItem()
{
  return objc_opt_self();
}

uint64_t method lookup function for SynapseLinkItem()
{
  return swift_lookUpClassMethod();
}

void ReflowSpace.minWidth.getter()
{
  uint64_t v0;

  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
    swift_once();
  CGRectGetWidth(*(CGRect *)(v0 + 16));
}

double ReflowSpace.initialBaselineOnLine.getter()
{
  return 0.0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance ReflowSpace.CodingKeys@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReflowSpace.CodingKeys()
{
  return 0x656D617266;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReflowSpace.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656D617266 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReflowSpace.CodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReflowSpace.CodingKeys@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReflowSpace.CodingKeys()
{
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowSpace.CodingKeys()
{
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReflowSpace.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  _OWORD v11[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReflowSpace.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 144) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  swift_retain();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of PaperKitPDFDocument??(*(id *)(v1 + 144));
    type metadata accessor for ReflowSpace();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(_BYTE *)(v1 + 137) = 0;
    swift_release();
    *(_QWORD *)(v1 + 96) = 0;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 104) = xmmword_1DDF33970;
    *(_QWORD *)(v1 + 120) = -1;
    *(_QWORD *)(v1 + 128) = 0;
    *(_BYTE *)(v1 + 136) = 0;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, MEMORY[0x1E0C9B9E0]);
    swift_retain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v9 = v11[1];
    *(_OWORD *)(v1 + 16) = v11[0];
    *(_OWORD *)(v1 + 32) = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_release();
  }
  return v1;
}

uint64_t ReflowSpace.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  _OWORD v11[2];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReflowSpace.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = *(_OWORD *)(v2 + 32);
  v11[0] = *(_OWORD *)(v2 + 16);
  v11[1] = v9;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type CGRect and conformance CGRect(&lazy protocol witness table cache variable for type CGRect and conformance CGRect, MEMORY[0x1E0C9B9C0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

id ReflowSpace._layer.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = *(void **)(v0 + 144);
  v2 = v1;
  if (v1 == (void *)1)
  {
    if (one-time initialization token for showDebugUI != -1)
      swift_once();
    if (static ReflowTextView.showDebugUI == 1)
    {
      v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
      objc_msgSend(v2, sel_setBorderWidth_, 0.5);
      v3 = objc_msgSend((id)objc_opt_self(), sel_blueColor);
      v4 = objc_msgSend(v3, sel_colorWithAlphaComponent_, 0.1);

      v5 = objc_msgSend(v4, sel_CGColor);
      objc_msgSend(v2, sel_setBorderColor_, v5);

    }
    else
    {
      v2 = 0;
    }
    v6 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v2;
    v7 = v2;
    outlined consume of PaperKitPDFDocument??(v6);
  }
  outlined copy of CALayer??(v1);
  return v2;
}

uint64_t ReflowSpace.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(20);
  v1._countAndFlagsBits = 0x53776F6C6665523CLL;
  v1._object = (void *)0xEE00203A65636170;
  String.append(_:)(v1);
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
    swift_once();
  CGRectGetWidth(*(CGRect *)(v0 + 16));
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 32;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

void ReflowSpace.__ivar_destroyer()
{
  uint64_t v0;

  outlined consume of PaperKitPDFDocument??(*(id *)(v0 + 144));
}

uint64_t ReflowSpace.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of PaperKitPDFDocument??(*(id *)(v0 + 144));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowSpace()
{
  return objc_opt_self();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReflowSpace@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for ReflowSpace();
  v5 = swift_allocObject();
  result = ReflowSpace.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReflowSpace(_QWORD *a1)
{
  return ReflowSpace.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReflowSpace()
{
  return ReflowSpace.debugDescription.getter();
}

unint64_t lazy protocol witness table accessor for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowSpace.CodingKeys, &type metadata for ReflowSpace.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowSpace.CodingKeys, &type metadata for ReflowSpace.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowSpace.CodingKeys, &type metadata for ReflowSpace.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowSpace.CodingKeys, &type metadata for ReflowSpace.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowSpace.CodingKeys and conformance ReflowSpace.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGRect and conformance CGRect(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGRect(255);
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReflowSpace.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1DDC62BB8 + 4 * byte_1DDF3A298[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1DDC62BD8 + 4 * byte_1DDF3A29D[v4]))();
}

_BYTE *sub_1DDC62BB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1DDC62BD8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDC62BE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDC62BE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDC62BF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDC62BF8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReflowSpace.CodingKeys()
{
  return &type metadata for ReflowSpace.CodingKeys;
}

BOOL specialized Ref<>.containsStrokes<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  char v30;
  BOOL v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;

  v58 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v53 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v57 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v49 = *(_QWORD *)(v13 - 8);
  v50 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v47 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v48 = (char *)&v46 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = MEMORY[0x1E0C80A78](v24, v26);
  v29 = (char *)&v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v2, v19, v27);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  WeakRef.init<A>(_:)();
  v51 = a1;
  v30 = specialized Set.contains(_:)((uint64_t)v29, a1);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v29, v24);
  if ((v30 & 1) != 0)
  {
    return 1;
  }
  else
  {
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v32 = v52;
    v33 = v58;
    Ref.subscript.getter();
    v34 = v54;
    CRRegister.value.getter();
    v35 = v56;
    v36 = (uint64_t)v57;
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v32, v7);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v36, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      return 0;
    }
    else
    {
      v39 = v47;
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      v40 = v48;
      v41 = v49;
      v42 = v50;
      v43 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v48, v39, v50);
      MEMORY[0x1E0C80A78](v43, v44);
      *(&v46 - 2) = v51;
      *(&v46 - 1) = v33;
      v31 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)(&v46 - 4));
      (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
    }
  }
  return v31;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a3 + 56);
  v28 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v29 = (unint64_t)(v16 + 63) >> 6;
  v31 = a3;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (v18)
  {
    v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v22 = v21 | (v20 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v14, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v7 + 72) * v22, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    v26 = v30(v10);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v3)
      goto LABEL_28;
    if ((v26 & 1) != 0)
    {
      a2 = 1;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v20++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v20 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v20);
  if (v24)
  {
LABEL_18:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_19;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 2;
  if (v20 + 2 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 3;
  if (v20 + 3 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 4;
  if (v20 + 4 >= v29)
  {
LABEL_27:
    a2 = 0;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v20 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v29)
      goto LABEL_27;
    v24 = *(_QWORD *)(v28 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  int v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *);
  uint64_t v27;
  uint64_t v28;

  v26 = a1;
  v27 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v25 = *(_QWORD *)(v28 - 8);
  v18 = MEMORY[0x1E0C80A78](v28, v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v24, v12, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11810]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D117E0]);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3);
    if (v21 == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v11, v3);
    v22 = v26(v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v2)
      break;
  }
  while ((v22 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v28);
  return v21 != 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  int v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *);
  uint64_t v27;
  uint64_t v28;

  v26 = a1;
  v27 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v25 = *(_QWORD *)(v28 - 8);
  v18 = MEMORY[0x1E0C80A78](v28, v17);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v24, v12, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1, v3);
    if (v21 == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v11, v3);
    v22 = v26(v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v2)
      break;
  }
  while ((v22 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v28);
  return v21 != 1;
}

uint64_t specialized Ref<>.getAllStrokes<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  _QWORD v52[2];
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v66 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v56 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v52 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v57 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v14);
  v53 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v17 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  v60 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v58 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v62 = *(_QWORD *)(v29 - 8);
  v63 = v29;
  MEMORY[0x1E0C80A78](v29, v30);
  v54 = (char *)v52 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v61 = (char *)v52 - v34;
  v35 = type metadata accessor for PKDrawingStruct();
  v36 = a2;
  v52[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v52[1] = v35;
  Ref.subscript.getter();
  v37 = v21;
  CRRegister.value.getter();
  v38 = v59;
  SharedTagged_2.tagged2.getter();
  v39 = v28;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v20, v38);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v24, v37);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v28, 1, v40) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    v42 = v66;
    v43 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v56, v65, v3);
    specialized Set._Variant.insert(_:)((uint64_t)v9, v43);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v9, v3);
  }
  else
  {
    v45 = v54;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v40);
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v45, v63);
    v46 = v53;
    CRSequence.makeIterator()();
    v47 = v55;
    CRSequence.Iterator.next()();
    v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    v49 = v48(v13, 1, v3);
    v50 = v64;
    if (v49 != 1)
    {
      v51 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
      do
      {
        v51(v9, v13, v3);
        specialized Ref<>.getAllStrokes<A>(_:in:)(v50, v36);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v3);
        CRSequence.Iterator.next()();
      }
      while (v48(v13, 1, v3) != 1);
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v47);
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v63);
  }
}

uint64_t (*ReflowLayoutManager.spacingAdjustment.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t ReflowLayoutManager.init(frame:initialFrame:contents:lines:layoutLines:strokesToReflow:textScalePercentage:usageBounds:lineHeights:spacingAdjustment:allowScaling:selectionAffinity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v26;
  __int128 v27;

  v26 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v20 + 80) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v20 + 88) = v26;
  *(_QWORD *)(v20 + 96) = v26;
  v27 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v20 + 120) = *MEMORY[0x1E0C9D628];
  *(_QWORD *)(v20 + 104) = v26;
  *(_QWORD *)(v20 + 112) = 100;
  *(_OWORD *)(v20 + 136) = v27;
  *(_QWORD *)(v20 + 152) = v26;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 202) = 0u;
  *(_BYTE *)(v20 + 218) = 1;
  *(_QWORD *)(v20 + 224) = 0;
  *(double *)(v20 + 16) = a9;
  *(double *)(v20 + 24) = a10;
  *(double *)(v20 + 32) = a11;
  *(double *)(v20 + 40) = a12;
  *(double *)(v20 + 48) = a13;
  *(double *)(v20 + 56) = a14;
  *(double *)(v20 + 64) = a15;
  *(double *)(v20 + 72) = a16;
  swift_beginAccess();
  *(_QWORD *)(v20 + 80) = a1;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v20 + 88) = a2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v20 + 96) = a3;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v20 + 104) = a4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v20 + 112) = a5;
  *(_OWORD *)(v20 + 120) = a17;
  *(_QWORD *)(v20 + 136) = a18;
  *(_QWORD *)(v20 + 144) = a19;
  *(_QWORD *)(v20 + 152) = a6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  outlined init with take of (key: Int, value: AnyCRValue)?(a7, v20 + 160, &demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  swift_release();
  *(_BYTE *)(v20 + 218) = a8;
  *(_QWORD *)(v20 + 224) = a20;
  return v20;
}

uint64_t ReflowLayoutManager.copy()()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  double v20;
  double v21;
  _BYTE v22[64];

  v1 = *(double *)(v0 + 32);
  v20 = *(double *)(v0 + 24);
  v21 = *(double *)(v0 + 16);
  v2 = *(double *)(v0 + 40);
  v3 = *(double *)(v0 + 48);
  v4 = *(double *)(v0 + 56);
  v5 = *(double *)(v0 + 64);
  v6 = *(double *)(v0 + 72);
  swift_beginAccess();
  v7 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  v8 = *(_QWORD *)(v0 + 88);
  swift_beginAccess();
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v19 = *(_OWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 152);
  swift_beginAccess();
  outlined init with take of (key: Int, value: AnyCRValue)?(v0 + 160, (uint64_t)v22, &demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  v15 = *(_BYTE *)(v0 + 218);
  v16 = *(_QWORD *)(v0 + 224);
  type metadata accessor for ReflowLayoutManager();
  v17 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of ReflowSpacingAdjustment?((uint64_t)v22);
  ReflowLayoutManager.init(frame:initialFrame:contents:lines:layoutLines:strokesToReflow:textScalePercentage:usageBounds:lineHeights:spacingAdjustment:allowScaling:selectionAffinity:)(v7, v8, v9, v10, v11, v14, (uint64_t)v22, v15, v21, v20, v1, v2, v3, v4, v5, v6, v19, v12, v13,
    v16);
  return v17;
}

uint64_t closure #1 in static ReflowLayoutManager.process(lines:in:)@<X0>(id *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, double *a5@<X4>, double *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  PKDrawing *v57;
  void *v58;
  void *v59;
  id v60;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double MaxX;
  double v68;
  double v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  BOOL v85;
  uint64_t *v86;
  uint64_t v87;
  double *v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v111;
  id v112;
  id v113;
  uint64_t v114;
  id v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  id v122;
  char *v123;
  uint64_t v124;
  id v125;
  double *v126;
  double *v127;
  double *v128;
  char *v129;
  uint64_t *v130;
  char *v131;
  char *v132;
  double MaxY;
  double v134;
  double v135;
  unint64_t v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;

  v124 = a3;
  v127 = a5;
  v128 = a6;
  v126 = a4;
  v122 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  *(_QWORD *)&v135 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v132 = (char *)&v122 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v131 = (char *)&v122 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v123 = (char *)&v122 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *a1;
  v32 = objc_msgSend(*a1, sel_strokeIdentifiers, v29);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CHStrokeIdentifier);
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v125 = v31;
  v34 = objc_msgSend(v31, sel_nonTextStrokeIdentifiers);
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v136 = v33;
  specialized Array.append<A>(contentsOf:)(v35);
  v36 = v136;
  if (v136 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v37 = result;
    v129 = v12;
    v130 = a7;
    if (result)
      goto LABEL_3;
LABEL_21:
    v40 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    swift_bridgeObjectRelease_n();
    v48 = objc_msgSend(v122, sel_strokes);
    type metadata accessor for PKStroke();
    v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized _ArrayProtocol.filter(_:)(v49, v40);
    v51 = v50;
    swift_bridgeObjectRelease();
    v52 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v52);
    v53 = type metadata accessor for PKDrawing();
    v54 = *(_QWORD *)(v53 - 8);
    v55 = v123;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v123, 1, 1, v53);
    v136 = v51;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
    v56 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v58 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53) != 1)
    {
      PKDrawing._bridgeToObjectiveC()(v57);
      v58 = v59;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
    }
    v60 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0)), sel_initWithStrokes_fromDrawing_, v56, v58);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    objc_msgSend(v60, sel_bounds);
    objc_msgSend(v60, sel_set_canvasBounds_);
    objc_msgSend(v60, sel__canvasBounds);
    x = v137.origin.x;
    y = v137.origin.y;
    width = v137.size.width;
    height = v137.size.height;
    MinX = CGRectGetMinX(v137);
    v138.origin.x = x;
    v138.origin.y = y;
    v138.size.width = width;
    v138.size.height = height;
    MinY = CGRectGetMinY(v138);
    v139.origin.x = x;
    v139.origin.y = y;
    v139.size.width = width;
    v139.size.height = height;
    MaxX = CGRectGetMaxX(v139);
    v140.origin.x = x;
    v140.origin.y = y;
    v140.size.width = width;
    v140.size.height = height;
    v68 = CGRectGetMinY(v140);
    v141.origin.x = x;
    v141.origin.y = y;
    v141.size.width = width;
    v141.size.height = height;
    v134 = CGRectGetMinX(v141);
    v142.origin.x = x;
    v142.origin.y = y;
    v142.size.width = width;
    v142.size.height = height;
    MaxY = CGRectGetMaxY(v142);
    v143.origin.x = x;
    v143.origin.y = y;
    v143.size.width = width;
    v143.size.height = height;
    v135 = CGRectGetMaxX(v143);
    v144.origin.x = x;
    v144.origin.y = y;
    v144.size.width = width;
    v144.size.height = height;
    v69 = CGRectGetMaxY(v144);
    v70 = v126;
    v71 = v126[4];
    v72 = v126[5];
    v73 = v126[6] - v71;
    v74 = v126[7] - v72;
    v75 = v73 * v73 + v74 * v74;
    v76 = ((MinX - v71) * v73 + (MinY - v72) * v74) / v75;
    v77 = v73 * v76;
    v78 = v72 + v74 * v76;
    v79 = sqrt(v75);
    v80 = v74 / v79;
    v81 = MinX - (v71 + v77);
    v82 = -v73 / v79;
    v83 = v82 * (MinY - v78) + v74 / v79 * v81;
    v85 = v83 <= -200.0 || v83 >= 200.0 || (*(_QWORD *)&v83 & 0x7FF0000000000000) == 0x7FF0000000000000;
    v87 = (uint64_t)v129;
    v86 = v130;
    v89 = v127;
    v88 = v128;
    if (!v85)
    {
      v90 = *v127;
      if (v83 > *v127)
        v90 = v83;
      *v127 = v90;
      v91 = *v88;
      if (*v88 >= v83)
        v91 = v83;
      *v88 = v91;
      v71 = v70[4];
      v72 = v70[5];
      v73 = v70[6] - v71;
      v74 = v70[7] - v72;
      v75 = v73 * v73 + v74 * v74;
      v92 = sqrt(v75);
      v80 = v74 / v92;
      v82 = -v73 / v92;
    }
    v93 = ((MaxX - v71) * v73 + (v68 - v72) * v74) / v75;
    v94 = v82 * (v68 - (v72 + v74 * v93)) + v80 * (MaxX - (v71 + v73 * v93));
    if (v94 > -200.0 && v94 < 200.0 && (*(_QWORD *)&v94 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      v97 = *v89;
      if (v94 > *v89)
        v97 = v94;
      *v89 = v97;
      v98 = *v88;
      if (*v88 >= v94)
        v98 = v94;
      *v88 = v98;
      v71 = v70[4];
      v72 = v70[5];
      v73 = v70[6] - v71;
      v74 = v70[7] - v72;
      v75 = v73 * v73 + v74 * v74;
      v99 = sqrt(v75);
      v80 = v74 / v99;
      v82 = -v73 / v99;
    }
    v100 = ((v134 - v71) * v73 + (MaxY - v72) * v74) / v75;
    v101 = v82 * (MaxY - (v72 + v74 * v100)) + v80 * (v134 - (v71 + v73 * v100));
    if (v101 > -200.0 && v101 < 200.0 && (*(_QWORD *)&v101 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      v104 = *v89;
      if (v101 > *v89)
        v104 = v101;
      *v89 = v104;
      v105 = *v88;
      if (*v88 >= v101)
        v105 = v101;
      *v88 = v105;
      v71 = v70[4];
      v72 = v70[5];
      v73 = v70[6] - v71;
      v74 = v70[7] - v72;
      v75 = v73 * v73 + v74 * v74;
      v106 = sqrt(v75);
      v80 = v74 / v106;
      v82 = -v73 / v106;
    }
    v107 = ((v135 - v71) * v73 + (v69 - v72) * v74) / v75;
    v108 = v82 * (v69 - (v72 + v74 * v107)) + v80 * (v135 - (v71 + v73 * v107));
    if (v108 > -200.0 && v108 < 200.0 && (*(_QWORD *)&v108 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      v111 = *v89;
      if (v108 > *v89)
        v111 = v108;
      *v89 = v111;
      if (*v88 < v108)
        v108 = *v88;
      *v88 = v108;
    }
    type metadata accessor for ReflowWord();
    swift_allocObject();
    v112 = v125;
    v113 = v60;
    v114 = ReflowWord.init(reflowableTextToken:drawing:scale:image:)(v112, v113, 0, 1.0);
    v115 = *(id *)(v114 + 272);
    objc_msgSend(v115, sel__canvasBounds);
    v116 = objc_msgSend(v115, sel_imageFromRect_scale_);

    v117 = *(void **)(v114 + 288);
    *(_QWORD *)(v114 + 288) = v116;

    v118 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v87, 1, 1, v118);
    type metadata accessor for MainActor();
    swift_retain();
    v119 = static MainActor.shared.getter();
    v120 = (_QWORD *)swift_allocObject();
    v121 = MEMORY[0x1E0DF06E8];
    v120[2] = v119;
    v120[3] = v121;
    v120[4] = v114;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(v87, (uint64_t)&async function pointer to partial apply for closure #1 in ReflowWord.generateImage(), (uint64_t)v120);

    result = swift_release();
    *v86 = v114;
    return result;
  }
  v37 = *(uint64_t *)((v136 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  v129 = v12;
  v130 = a7;
  if (*(double *)&v37 == 0.0)
    goto LABEL_21;
LABEL_3:
  if (v37 >= 1)
  {
    v39 = 0;
    *(_QWORD *)&MaxY = v36 & 0xC000000000000001;
    v40 = MEMORY[0x1E0DEE9D8];
    v134 = *(double *)&v37;
    while (1)
    {
      if (MaxY == 0.0)
        swift_unknownObjectRetain();
      else
        MEMORY[0x1DF0E4D64](v39, v36);
      type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
      v41 = (void *)swift_dynamicCastClass();
      if (v41)
      {
        v42 = objc_msgSend(v41, sel_strokeUUID);
        v43 = v132;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v44 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        v44(v16, v43, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
        swift_unknownObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
          goto LABEL_15;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
        swift_unknownObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
        {
          v44 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
LABEL_15:
          v45 = v131;
          v44(v131, v16, v17);
          v44(*(char **)&v135, v45, v17);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
          v47 = *(_QWORD *)(v40 + 16);
          v46 = *(_QWORD *)(v40 + 24);
          if (v47 >= v46 >> 1)
            v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v40);
          *(_QWORD *)(v40 + 16) = v47 + 1;
          v44((char *)(v40+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v47), *(char **)&v135, v17);
          goto LABEL_6;
        }
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
LABEL_6:
      if (*(_QWORD *)&v134 == ++v39)
        goto LABEL_22;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReflowLayoutManager.init(contents:frame:strokesToReflow:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  uint64_t v7;
  CGFloat v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat a;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double MinX;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  CGFloat v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  double v81;
  double v82;
  CGFloat v83;
  CGFloat v84;
  CGPoint v85;
  CGPoint v86;
  double v87;
  CGFloat v88;
  CGFloat v89;
  double v90;
  CGFloat v91;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v97;
  CGPoint v98;
  CGFloat v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  float64x2_t *v113;
  uint64_t v114;
  __int128 v115;
  float64x2_t v116;
  float64x2_t v117;
  CGPoint v118;
  _QWORD *v119;
  char isUniquelyReferenced_nonNull_native;
  CGFloat v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  __int128 v128;
  _QWORD *v129;
  uint64_t v131;
  CGFloat *v132;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  CGFloat v142;
  CGFloat v144;
  float64x2_t v145;
  __int128 v146;
  CGAffineTransform v147;
  CGAffineTransform v148;
  _BYTE v149[48];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  CGPoint v158;
  CGPoint v159;
  CGPoint v160;
  CGPoint v161;
  CGPoint v162;
  CGRect v163;

  v7 = a2;
  v11 = MEMORY[0x1E0DEE9D8];
  v157 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v6 + 80) = MEMORY[0x1E0DEE9D8];
  v12 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v6 + 120) = *MEMORY[0x1E0C9D628];
  *(CGFloat *)(v6 + 88) = v11;
  v132 = (CGFloat *)(v6 + 88);
  *(CGFloat *)(v6 + 96) = v11;
  *(CGFloat *)(v6 + 104) = v11;
  *(_QWORD *)(v6 + 112) = 100;
  *(_OWORD *)(v6 + 136) = v12;
  *(CGFloat *)(v6 + 152) = v11;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 202) = 0u;
  *(_BYTE *)(v6 + 218) = 1;
  *(_QWORD *)(v6 + 224) = 0;
  *(CGFloat *)(v6 + 48) = a3;
  *(CGFloat *)(v6 + 56) = a4;
  *(CGFloat *)(v6 + 64) = a5;
  *(CGFloat *)(v6 + 72) = a6;
  *(CGFloat *)(v6 + 16) = a3;
  *(CGFloat *)(v6 + 24) = a4;
  *(CGFloat *)(v6 + 32) = a5;
  *(CGFloat *)(v6 + 40) = a6;
  v148.a = v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    v14 = v13 - 1;
    for (i = 32; ; i += 160)
    {
      v16 = *(_OWORD *)(a1 + i + 112);
      v153 = *(_OWORD *)(a1 + i + 96);
      v154 = v16;
      v17 = *(_OWORD *)(a1 + i + 144);
      v155 = *(_OWORD *)(a1 + i + 128);
      v156 = v17;
      v18 = *(_OWORD *)(a1 + i + 48);
      *(_OWORD *)&v149[32] = *(_OWORD *)(a1 + i + 32);
      v150 = v18;
      v19 = *(_OWORD *)(a1 + i + 80);
      v151 = *(_OWORD *)(a1 + i + 64);
      v152 = v19;
      v20 = *(_OWORD *)(a1 + i + 16);
      *(_OWORD *)v149 = *(_OWORD *)(a1 + i);
      *(_OWORD *)&v149[16] = v20;
      v21 = *(double *)v149;
      outlined retain of ReflowTextLine((uint64_t)v149);
      if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
        swift_once();
      v22 = static UIConstants.handwritingReflowMinimumSpaceWidth;
      type metadata accessor for ReflowSpace();
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 144) = 1;
      *(_BYTE *)(v23 + 137) = 0;
      v25 = UnknownCanvasElementView.flags.modify(v23, v24);
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_QWORD *)(v23 + 96) = 0;
      *(double *)(v23 + 104) = v25;
      *(_QWORD *)(v23 + 112) = v26;
      *(_QWORD *)(v23 + 120) = -1;
      *(_QWORD *)(v23 + 128) = 0;
      *(_BYTE *)(v23 + 136) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = v22;
      *(_QWORD *)(v23 + 40) = 0x4000000000000000;
      v147.a = v21;
      swift_bridgeObjectRetain();
      v27 = swift_retain();
      MEMORY[0x1DF0E4398](v27);
      if (*(_QWORD *)((*(_QWORD *)&v147.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v147.a & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined release of ReflowTextLine((uint64_t)v149);
      specialized Array.append<A>(contentsOf:)(*(unint64_t *)&v147.a);
      if (!v14)
        break;
      --v14;
    }
    swift_bridgeObjectRelease();
    a = v148.a;
    v6 = v131;
    v11 = MEMORY[0x1E0DEE9D8];
    v7 = a2;
  }
  else
  {
    a = v11;
  }
  swift_beginAccess();
  *(CGFloat *)(v6 + 80) = a;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v6 + 88) = a1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + 104) = v7;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v6 + 88);
  v148.a = v11;
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v30 = *(_QWORD *)(v29 + 16);
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = 32;
  while (v30 != v31)
  {
    v33 = *(_OWORD *)(v29 + v32 + 16);
    *(_OWORD *)v149 = *(_OWORD *)(v29 + v32);
    *(_OWORD *)&v149[16] = v33;
    v34 = *(_OWORD *)(v29 + v32 + 32);
    v35 = *(_OWORD *)(v29 + v32 + 48);
    v36 = *(_OWORD *)(v29 + v32 + 80);
    v151 = *(_OWORD *)(v29 + v32 + 64);
    v152 = v36;
    *(_OWORD *)&v149[32] = v34;
    v150 = v35;
    v37 = *(_OWORD *)(v29 + v32 + 96);
    v38 = *(_OWORD *)(v29 + v32 + 112);
    v39 = *(_OWORD *)(v29 + v32 + 144);
    v155 = *(_OWORD *)(v29 + v32 + 128);
    v156 = v39;
    v153 = v37;
    v154 = v38;
    v40 = *(_OWORD *)&v149[32];
    v41 = v150;
    v42 = *(_QWORD *)v149;
    outlined retain of ReflowTextLine((uint64_t)v149);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v163.origin.x = a3;
    v163.origin.y = a4;
    v163.size.width = a5;
    v163.size.height = a6;
    MinX = CGRectGetMinX(v163);
    v148.a = v11;
    v45 = *(_QWORD *)(*(_QWORD *)&v11 + 16);
    v44 = *(_QWORD *)(*(_QWORD *)&v11 + 24);
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      v11 = v148.a;
    }
    v46 = sqrt((*(double *)&v41 - *(double *)&v40) * (*(double *)&v41 - *(double *)&v40)+ (*((double *)&v41 + 1) - *((double *)&v40 + 1)) * (*((double *)&v41 + 1) - *((double *)&v40 + 1)));
    v47 = (*(double *)&v41 - *(double *)&v40) / v46;
    v48 = (*((double *)&v41 + 1) - *((double *)&v40 + 1)) / v46;
    v49 = (MinX - *(double *)&v40) / v47;
    v50 = v47 * v49;
    v51 = v153;
    v52 = v154;
    v53 = v151;
    v54 = v152;
    v55 = v48 * v49;
    v56 = v156;
    v57 = *(_QWORD *)&v11 + 160 * v45;
    v58 = v155;
    *(_OWORD *)(v57 + 48) = *(_OWORD *)&v149[16];
    *(_QWORD *)(*(_QWORD *)&v11 + 16) = v45 + 1;
    *(_QWORD *)(v57 + 32) = v42;
    *(_QWORD *)(v57 + 40) = v42;
    *(double *)(v57 + 64) = *(double *)&v40 + v50 - a3;
    *(double *)(v57 + 72) = *((double *)&v40 + 1) + v55 - a4;
    *(double *)(v57 + 80) = *(double *)&v41 - a3;
    *(double *)(v57 + 88) = *((double *)&v41 + 1) - a4;
    *(double *)(v57 + 96) = *(double *)&v53 - a3;
    *(double *)(v57 + 104) = *((double *)&v53 + 1) - a4;
    *(double *)(v57 + 112) = *(double *)&v54 - a3;
    *(double *)(v57 + 120) = *((double *)&v54 + 1) - a4;
    *(double *)(v57 + 128) = *(double *)&v51 - a3;
    *(double *)(v57 + 136) = *((double *)&v51 + 1) - a4;
    *(double *)(v57 + 144) = *(double *)&v52 - a3;
    *(double *)(v57 + 152) = *((double *)&v52 + 1) - a4;
    *(_QWORD *)(v57 + 184) = v31;
    *(_OWORD *)(v57 + 160) = v58;
    *(_QWORD *)(v57 + 176) = v56;
    v32 += 160;
    if (++v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
  }
  swift_bridgeObjectRelease_n();
  *v132 = v11;
  swift_bridgeObjectRelease();
  v59 = *v132;
  v60 = *(_QWORD *)(*(_QWORD *)v132 + 16);
  if (!v60)
    goto LABEL_52;
  swift_bridgeObjectRetain();
  v61 = 0;
  v135 = a3;
  v136 = a4;
  do
  {
    v62 = (_OWORD *)(*(_QWORD *)&v59 + 32 + 160 * v61);
    v63 = v62[1];
    *(_OWORD *)v149 = *v62;
    *(_OWORD *)&v149[16] = v63;
    v64 = v62[2];
    v65 = v62[3];
    v66 = v62[5];
    v151 = v62[4];
    v152 = v66;
    *(_OWORD *)&v149[32] = v64;
    v150 = v65;
    v67 = v62[6];
    v68 = v62[7];
    v69 = v62[9];
    v155 = v62[8];
    v156 = v69;
    v153 = v67;
    v154 = v68;
    v70 = *(_QWORD *)v149;
    if (*(_QWORD *)v149 >> 62)
    {
      outlined retain of ReflowTextLine((uint64_t)v149);
      swift_bridgeObjectRetain();
      v71 = _CocoaArrayWrapper.endIndex.getter();
      if (!v71)
        goto LABEL_28;
    }
    else
    {
      v71 = *(_QWORD *)((*(_QWORD *)v149 & 0xFFFFFFFFFFFFF8) + 0x10);
      outlined retain of ReflowTextLine((uint64_t)v149);
      swift_bridgeObjectRetain();
      if (!v71)
        goto LABEL_28;
    }
    if (v71 < 1)
      goto LABEL_49;
    v72 = 0;
    v73 = *((_QWORD *)&v156 + 1);
    v140 = *(double *)&v149[40];
    v141 = *(double *)&v149[32];
    v138 = *((double *)&v150 + 1) - *(double *)&v149[40];
    v139 = *(double *)&v150 - *(double *)&v149[32];
    v137 = v139 * v139 + v138 * v138;
    do
    {
      if ((v70 & 0xC000000000000001) != 0)
      {
        v74 = MEMORY[0x1DF0E4D64](v72, v70);
      }
      else
      {
        v74 = *(_QWORD *)(v70 + 8 * v72 + 32);
        swift_retain();
      }
      ++v72;
      v75 = *(double *)(v74 + 24) - v136;
      *(double *)(v74 + 16) = *(double *)(v74 + 16) - v135;
      *(double *)(v74 + 24) = v75;
      v76 = *(double *)(v74 + 56) - v136;
      *(double *)(v74 + 48) = *(double *)(v74 + 48) - v135;
      *(double *)(v74 + 56) = v76;
      *(_QWORD *)(v74 + 120) = v73;
      v158.x = (*(double (**)(void))(*(_QWORD *)v74 + 232))();
      v78 = v77;
      v80 = v79;
      v81 = *(double *)(v74 + 32);
      v82 = *(double *)(v74 + 40);
      v83 = *(double *)(v74 + 16) - v81 * 0.0;
      v84 = *(double *)(v74 + 24) - v82 * 0.0;
      v148.b = 0.0;
      v148.c = 0.0;
      v148.a = v81;
      v148.d = v82;
      v148.tx = v83;
      v148.ty = v84;
      v85 = CGPointApplyAffineTransform(v158, &v148);
      v148.b = 0.0;
      v148.c = 0.0;
      v148.a = v81;
      v148.d = v82;
      v148.tx = v83;
      v148.ty = v84;
      v159.x = v78;
      v159.y = v80;
      v86 = CGPointApplyAffineTransform(v159, &v148);
      v87 = (v139 * (v85.x - v141) + v138 * (v85.y - v140)) / v137;
      v88 = v141 + v139 * v87;
      v89 = v140 + v138 * v87;
      v90 = (v139 * (v86.x - v141) + v138 * (v86.y - v140)) / v137;
      v148.b = 0.0;
      v148.c = 0.0;
      v148.a = v81;
      v148.d = v82;
      v148.tx = v83;
      v142 = v140 + v138 * v90;
      v144 = v141 + v139 * v90;
      v148.ty = v84;
      CGAffineTransformInvert(&v147, &v148);
      v91 = v147.a;
      b = v147.b;
      c = v147.c;
      d = v147.d;
      tx = v147.tx;
      ty = v147.ty;
      v148 = v147;
      v160.x = v88;
      v160.y = v89;
      v97 = CGPointApplyAffineTransform(v160, &v148);
      v148.a = v91;
      v148.b = b;
      v148.c = c;
      v148.d = d;
      v148.tx = tx;
      v148.ty = ty;
      v161.y = v142;
      v161.x = v144;
      v98 = CGPointApplyAffineTransform(v161, &v148);
      (*(void (**)(double, double, double, double))(*(_QWORD *)v74 + 240))(v97.x, v97.y, v98.x, v98.y);
      swift_release();
    }
    while (v71 != v72);
LABEL_28:
    ++v61;
    swift_bridgeObjectRelease();
    outlined release of ReflowTextLine((uint64_t)v149);
    if (v61 == v60)
      goto LABEL_31;
  }
  while (v61 < *(_QWORD *)(*(_QWORD *)&v59 + 16));
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease();
  v99 = *v132;
  v100 = *(_QWORD *)(*(_QWORD *)v132 + 16);
  if (!v100)
LABEL_52:
    __break(1u);
  swift_bridgeObjectRetain();
  v101 = 0;
  v102 = 0;
  v103 = v100 - 1;
  v145 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
  while (2)
  {
    v104 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 48);
    *(_OWORD *)v149 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 32);
    *(_OWORD *)&v149[16] = v104;
    v105 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 64);
    v106 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 80);
    v107 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 112);
    v151 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 96);
    v152 = v107;
    *(_OWORD *)&v149[32] = v105;
    v150 = v106;
    v108 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 128);
    v109 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 144);
    v110 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 176);
    v155 = *(_OWORD *)(*(_QWORD *)&v99 + v101 + 160);
    v156 = v110;
    v153 = v108;
    v154 = v109;
    v111 = *(_QWORD *)v149;
    if (*(_QWORD *)v149 >> 62)
    {
      outlined retain of ReflowTextLine((uint64_t)v149);
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_44;
LABEL_35:
      if ((v111 & 0xC000000000000001) != 0)
      {
        v113 = (float64x2_t *)MEMORY[0x1DF0E4D64](0, v111);
      }
      else
      {
        if (!*(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_50;
        v113 = *(float64x2_t **)(v111 + 32);
        swift_retain();
      }
      v114 = swift_bridgeObjectRelease();
      v115 = *(_OWORD *)&v149[32];
      v162.x = (*(double (**)(uint64_t))(*(_QWORD *)&v113->f64[0] + 232))(v114);
      v148.b = 0.0;
      v148.c = 0.0;
      v116 = v113[4];
      v117 = vaddq_f64(v113[3], vmulq_f64(v116, v145));
      v148.a = v113[4].f64[0];
      v148.d = v116.f64[1];
      *(float64x2_t *)&v148.tx = v117;
      v118 = CGPointApplyAffineTransform(v162, &v148);
      outlined release of ReflowTextLine((uint64_t)v149);
      swift_beginAccess();
      v119 = *(_QWORD **)v132;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v132 = v119;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v119 = specialized _ArrayBuffer._consumeAndCreateNew()(v119);
        *(_QWORD *)v132 = v119;
      }
      if (v102 >= v119[2])
        goto LABEL_51;
      *(double *)&v119[v101 / 8 + 6] = sqrt((v118.x - *(double *)&v115) * (v118.x - *(double *)&v115)+ (v118.y - *((double *)&v115 + 1)) * (v118.y - *((double *)&v115 + 1)));
      swift_endAccess();
      swift_release();
      if (v103 == v102)
        goto LABEL_47;
LABEL_45:
      v101 += 160;
      ++v102;
      continue;
    }
    break;
  }
  v112 = *(_QWORD *)((*(_QWORD *)v149 & 0xFFFFFFFFFFFFF8) + 0x10);
  outlined retain of ReflowTextLine((uint64_t)v149);
  swift_bridgeObjectRetain();
  if (v112)
    goto LABEL_35;
LABEL_44:
  swift_bridgeObjectRelease();
  outlined release of ReflowTextLine((uint64_t)v149);
  if (v103 != v102)
    goto LABEL_45;
LABEL_47:
  swift_bridgeObjectRelease();
  v121 = *v132;
  v122 = *(_QWORD *)(*(_QWORD *)v132 + 16);
  if (!v122)
    goto LABEL_52;
  v123 = (2 * v122) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  v124 = swift_allocObject();
  *(_OWORD *)(v124 + 16) = xmmword_1DDF32CF0;
  v126 = UnknownCanvasElementView.flags.modify(v124, v125);
  *(_QWORD *)(v124 + 32) = MEMORY[0x1E0DEE9D8];
  *(_OWORD *)(v124 + 40) = 0u;
  *(_OWORD *)(v124 + 56) = 0u;
  *(_QWORD *)(v124 + 72) = 0;
  *(double *)(v124 + 80) = v126;
  *(_QWORD *)(v124 + 88) = v127;
  *(_QWORD *)(v124 + 96) = 0;
  *(_QWORD *)(v124 + 104) = 0;
  *(double *)(v124 + 112) = v126;
  *(_QWORD *)(v124 + 120) = v127;
  *(_QWORD *)(v124 + 128) = 0;
  *(_QWORD *)(v124 + 136) = 0;
  *(double *)(v124 + 144) = v126;
  *(_QWORD *)(v124 + 152) = v127;
  *(_OWORD *)(v124 + 160) = 0u;
  *(_OWORD *)(v124 + 176) = 0u;
  swift_bridgeObjectRetain_n();
  *(CGFloat *)v149 = v121;
  *(_QWORD *)&v149[8] = *(_QWORD *)&v121 + 32;
  *(_QWORD *)&v149[16] = 1;
  *(_QWORD *)&v149[24] = v123;
  specialized ArraySlice.append<A>(contentsOf:)(v124);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v128 = *(_OWORD *)&v149[16];
  v146 = *(_OWORD *)v149;
  *(CGFloat *)v149 = v121;
  *(_OWORD *)&v149[8] = v146;
  *(_OWORD *)&v149[24] = v128;
  v129 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_AJs5NeverOTg503_s8f5Kit19h52LayoutManagerC8contents5frame09strokesToC0ACSayAA0C8iJ56VG_So6CGRectVSay06PencilB08PKStrokeVGtcfcA2H_AHt_tXEfU1_So0Z0VTf1cn_n(v149, v135, v136, a5, a6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v131 + 88) = v129;
  swift_bridgeObjectRelease();
  return v131;
}

_QWORD *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTg503_s8f5Kit19h50LayoutManagerC10layoutText8contents5linesySayAA0C7b3CG_w6AA0cG4j6VGtF12m9Graphics7O14VAK_AKt_tXEfU_Tf1cn_n(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  _OWORD v57[2];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[144];
  __int128 v101;
  _BYTE v102[80];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v53 = result[3];
  v107 = result[4] >> 1;
  if (__OFSUB__(v107, v53))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v1 = *result;
  v50 = result[2];
  v52 = *(_QWORD *)(*result + 16);
  if (v107 - v53 >= (uint64_t)v52)
    v2 = *(_QWORD *)(*result + 16);
  else
    v2 = v107 - v53;
  v106 = MEMORY[0x1E0DEE9D8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v49 = v1;
    v3 = v106;
    if (v2)
    {
      v51 = v1 + 32;
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v5 = 0;
      v6 = 0;
      v54 = v53;
      do
      {
        if ((v5 & 1) != 0)
        {
          _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(&v88);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v88, (uint64_t)&v98, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
          v5 = 1;
        }
        else
        {
          v7 = v52;
          if (v6 == v52)
            goto LABEL_13;
          if (v6 >= v52)
            goto LABEL_40;
          v8 = (__int128 *)(v51 + 160 * v6);
          v9 = v8[1];
          v88 = *v8;
          v89 = v9;
          v10 = v8[2];
          v11 = v8[3];
          v12 = v8[5];
          v92 = v8[4];
          v93 = v12;
          v90 = v10;
          v91 = v11;
          v13 = v8[6];
          v14 = v8[7];
          v15 = v8[9];
          v96 = v8[8];
          v97 = v15;
          v94 = v13;
          v95 = v14;
          v7 = v6 + 1;
          if (v54 == v107)
          {
LABEL_13:
            _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(&v88);
            outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v88, (uint64_t)&v98, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
            v5 = 1;
          }
          else
          {
            if (v54 < v53 || v54 >= v107)
              goto LABEL_41;
            v16 = (__int128 *)(v50 + 160 * v54);
            v17 = v16[1];
            v78 = *v16;
            v79 = v17;
            v18 = v16[2];
            v19 = v16[3];
            v20 = v16[5];
            v82 = v16[4];
            v83 = v20;
            v80 = v18;
            v81 = v19;
            v21 = v16[6];
            v22 = v16[7];
            v23 = v16[9];
            v86 = v16[8];
            v87 = v23;
            v84 = v21;
            v85 = v22;
            ++v54;
            v99 = v89;
            v98 = v88;
            *(_OWORD *)&v100[48] = v93;
            *(_OWORD *)&v100[32] = v92;
            *(_OWORD *)&v100[16] = v91;
            *(_OWORD *)v100 = v90;
            *(_OWORD *)&v100[112] = v97;
            *(_OWORD *)&v100[96] = v96;
            *(_OWORD *)&v100[80] = v95;
            *(_OWORD *)&v100[64] = v94;
            *(_OWORD *)&v102[64] = v21;
            v103 = v22;
            v104 = v86;
            v105 = v23;
            *(_OWORD *)v102 = v80;
            *(_OWORD *)&v102[16] = v81;
            *(_OWORD *)&v102[32] = v82;
            *(_OWORD *)&v102[48] = v83;
            *(_OWORD *)&v100[128] = v78;
            v101 = v79;
            UnknownCanvasElementView.flags.modify(&v98, v4);
            outlined retain of ReflowTextLine((uint64_t)&v88);
            outlined retain of ReflowTextLine((uint64_t)&v78);
            v5 = 0;
          }
          v6 = v7;
        }
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v98, (uint64_t)&v78, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v78, (uint64_t)&v88, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        result = (_QWORD *)_s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)&v88);
        if ((_DWORD)result == 1)
          goto LABEL_44;
        v57[0] = v98;
        v57[1] = v99;
        v58 = *(_QWORD *)v100;
        v56 = *(float64x2_t *)&v100[8];
        v59 = *(_OWORD *)&v100[8];
        v60 = *(_OWORD *)&v100[24];
        v61 = *(_OWORD *)&v100[40];
        v62 = *(_OWORD *)&v100[56];
        v63 = *(_OWORD *)&v100[72];
        v64 = *(_OWORD *)&v100[88];
        v65 = *(_OWORD *)&v100[104];
        v66 = *(_OWORD *)&v100[120];
        v67 = *(_QWORD *)&v100[136];
        v68 = v101;
        v55 = *(float64x2_t *)&v102[8];
        v70 = *(_OWORD *)&v102[8];
        v71 = *(_OWORD *)&v102[24];
        v72 = *(_OWORD *)&v102[40];
        v73 = *(_OWORD *)&v102[56];
        v69 = *(_QWORD *)v102;
        v74 = *(_QWORD *)&v102[72];
        v75 = v103;
        v76 = v104;
        v77 = v105;
        result = (_QWORD *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)v57);
        v106 = v3;
        v25 = *(_QWORD *)(v3 + 16);
        v24 = *(_QWORD *)(v3 + 24);
        if (v25 >= v24 >> 1)
        {
          result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
          v3 = v106;
        }
        *(_QWORD *)(v3 + 16) = v25 + 1;
        *(_QWORD *)(v3 + 8 * v25 + 32) = *(_OWORD *)&vsubq_f64(v55, v56);
        --v2;
      }
      while (v2);
    }
    else
    {
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v6 = 0;
      v5 = 0;
      v54 = v53;
    }
    if ((v5 & 1) != 0 || v52 == v6)
    {
LABEL_37:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)v3;
    }
    v26 = v52 - v6;
    if (v52 >= v6)
      v27 = v52 - v6;
    else
      v27 = 0;
    v28 = (__int128 *)(v49 + 160 * v6 + 32);
    v29 = v54;
    v30 = (__int128 *)(v50 + 160 * v54);
    v31 = v54;
    while (v27)
    {
      v32 = v28[1];
      v88 = *v28;
      v89 = v32;
      v33 = v28[2];
      v34 = v28[3];
      v35 = v28[5];
      v92 = v28[4];
      v93 = v35;
      v90 = v33;
      v91 = v34;
      v36 = v28[6];
      v37 = v28[7];
      v38 = v28[9];
      v96 = v28[8];
      v97 = v38;
      v94 = v36;
      v95 = v37;
      if (v107 == v31)
        goto LABEL_37;
      if (v29 < v53 || v31 >= v107)
        goto LABEL_39;
      v39 = v30[1];
      v78 = *v30;
      v79 = v39;
      v40 = v30[2];
      v41 = v30[3];
      v42 = v30[5];
      v82 = v30[4];
      v83 = v42;
      v80 = v40;
      v81 = v41;
      v43 = v30[6];
      v44 = v30[7];
      v45 = v30[9];
      v86 = v30[8];
      v87 = v45;
      v84 = v43;
      v85 = v44;
      v99 = v89;
      v98 = v88;
      *(_OWORD *)&v100[48] = v93;
      *(_OWORD *)&v100[32] = v92;
      *(_OWORD *)&v100[16] = v91;
      *(_OWORD *)v100 = v90;
      *(_OWORD *)&v100[112] = v97;
      *(_OWORD *)&v100[96] = v96;
      *(_OWORD *)&v100[80] = v95;
      *(_OWORD *)&v100[64] = v94;
      *(_OWORD *)&v102[64] = v43;
      v103 = v44;
      v104 = v86;
      v105 = v45;
      *(_OWORD *)v102 = v80;
      *(_OWORD *)&v102[16] = v81;
      *(_OWORD *)&v102[32] = v82;
      *(_OWORD *)&v102[48] = v83;
      *(_OWORD *)&v100[128] = v78;
      v101 = v79;
      outlined retain of ReflowTextLine((uint64_t)&v88);
      outlined retain of ReflowTextLine((uint64_t)&v78);
      result = (_QWORD *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)&v98);
      v106 = v3;
      v47 = *(_QWORD *)(v3 + 16);
      v46 = *(_QWORD *)(v3 + 24);
      if (v47 >= v46 >> 1)
      {
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
        v3 = v106;
      }
      v48 = *((double *)&v80 + 1) - *((double *)&v90 + 1);
      --v27;
      *(_QWORD *)(v3 + 16) = v47 + 1;
      *(double *)(v3 + 8 * v47 + 32) = v48;
      v28 += 10;
      v30 += 10;
      ++v31;
      --v26;
      v29 = v54;
      if (!v26)
        goto LABEL_37;
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

_QWORD *_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_AJs5NeverOTg503_s8f5Kit19h52LayoutManagerC8contents5frame09strokesToC0ACSayAA0C8iJ56VG_So6CGRectVSay06PencilB08PKStrokeVGtcfcA2H_AHt_tXEfU1_So0Z0VTf1cn_n(_QWORD *result, CGFloat a2, CGFloat a3, double a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _OWORD __dst[20];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[20];
  _OWORD __src[20];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v60 = result[3];
  v109 = result[4] >> 1;
  if (__OFSUB__(v109, v60))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v6 = v5;
  v58 = result[2];
  v59 = *result;
  v62 = *(_QWORD *)(*result + 16);
  if (v109 - v60 >= (uint64_t)v62)
    v11 = *(_QWORD *)(*result + 16);
  else
    v11 = v109 - v60;
  v108 = MEMORY[0x1E0DEE9D8];
  result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = v108;
    if (v11)
    {
      swift_bridgeObjectRetain();
      result = (_QWORD *)swift_unknownObjectRetain();
      v14 = 0;
      v15 = 0;
      v64 = v60;
      while (1)
      {
        if ((v14 & 1) != 0)
        {
          _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(v96);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v96, (uint64_t)__src, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
          v14 = 1;
        }
        else
        {
          v16 = v62;
          if (v15 == v62)
            goto LABEL_13;
          if (v15 >= v62)
            goto LABEL_45;
          v17 = (_OWORD *)(v59 + 32 + 160 * v15);
          v18 = v17[1];
          v96[0] = *v17;
          v96[1] = v18;
          v19 = v17[2];
          v20 = v17[3];
          v21 = v17[5];
          v96[4] = v17[4];
          v96[5] = v21;
          v96[2] = v19;
          v96[3] = v20;
          v22 = v17[6];
          v23 = v17[7];
          v24 = v17[9];
          v96[8] = v17[8];
          v96[9] = v24;
          v96[6] = v22;
          v96[7] = v23;
          v16 = v15 + 1;
          if (v64 == v109)
          {
LABEL_13:
            _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(v96);
            outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v96, (uint64_t)__src, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
            v14 = 1;
          }
          else
          {
            if (v64 < v60 || v64 >= v109)
              goto LABEL_46;
            v25 = (__int128 *)(v58 + 160 * v64);
            v26 = v25[1];
            v86 = *v25;
            v87 = v26;
            v27 = v25[2];
            v28 = v25[3];
            v29 = v25[5];
            v90 = v25[4];
            v91 = v29;
            v88 = v27;
            v89 = v28;
            v30 = v25[6];
            v31 = v25[7];
            v32 = v25[9];
            v94 = v25[8];
            v95 = v32;
            v92 = v30;
            v93 = v31;
            ++v64;
            __src[1] = v96[1];
            __src[0] = v96[0];
            __src[5] = v96[5];
            __src[4] = v96[4];
            __src[3] = v96[3];
            __src[2] = v96[2];
            __src[9] = v96[9];
            __src[8] = v96[8];
            __src[7] = v96[7];
            __src[6] = v96[6];
            __src[16] = v30;
            __src[17] = v31;
            __src[18] = v94;
            __src[19] = v32;
            __src[12] = v88;
            __src[13] = v89;
            __src[14] = v90;
            __src[15] = v91;
            __src[10] = v86;
            __src[11] = v87;
            UnknownCanvasElementView.flags.modify(__src, v13);
            outlined retain of ReflowTextLine((uint64_t)v96);
            outlined retain of ReflowTextLine((uint64_t)&v86);
            v14 = 0;
          }
          v15 = v16;
        }
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)__src, (uint64_t)&v86, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v96, &demangling cache variable for type metadata for (ReflowTextLine, ReflowTextLine)?);
        result = (_QWORD *)_s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v96);
        if ((_DWORD)result == 1)
          goto LABEL_49;
        closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)(__src, (uint64_t)&v98, a2, a3, a4, a5);
        if (v6)
          break;
        v6 = 0;
        memcpy(__dst, __src, sizeof(__dst));
        result = (_QWORD *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)__dst);
        v73 = v102;
        v75 = v103;
        v69 = v100;
        v71 = v101;
        v81 = v106;
        v83 = v107;
        v77 = v104;
        v79 = v105;
        v65 = v98;
        v67 = v99;
        v34 = *(_QWORD *)(v12 + 16);
        v33 = *(_QWORD *)(v12 + 24);
        v108 = v12;
        if (v34 >= v33 >> 1)
        {
          result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v12 = v108;
        }
        *(_QWORD *)(v12 + 16) = v34 + 1;
        v35 = (_OWORD *)(v12 + 160 * v34);
        v35[2] = v65;
        v35[3] = v67;
        v35[6] = v73;
        v35[7] = v75;
        v35[4] = v69;
        v35[5] = v71;
        v35[10] = v81;
        v35[11] = v83;
        v35[8] = v77;
        v35[9] = v79;
        if (!--v11)
          goto LABEL_25;
      }
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, sizeof(__dst));
      outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)__dst);
      return (_QWORD *)v12;
    }
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_unknownObjectRetain();
    v15 = 0;
    v14 = 0;
    v64 = v60;
LABEL_25:
    if ((v14 & 1) != 0 || v62 == v15)
    {
LABEL_39:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)v12;
    }
    v36 = v62 - v15;
    if (v62 >= v15)
      v37 = v62 - v15;
    else
      v37 = 0;
    v38 = 160 * v15 + 32;
    v39 = v64;
    v40 = (_OWORD *)(v58 + 160 * v64);
    while (v37)
    {
      v41 = *(_OWORD *)(v59 + v38 + 16);
      v86 = *(_OWORD *)(v59 + v38);
      v87 = v41;
      v42 = *(_OWORD *)(v59 + v38 + 32);
      v43 = *(_OWORD *)(v59 + v38 + 48);
      v44 = *(_OWORD *)(v59 + v38 + 80);
      v90 = *(_OWORD *)(v59 + v38 + 64);
      v91 = v44;
      v88 = v42;
      v89 = v43;
      v45 = *(_OWORD *)(v59 + v38 + 96);
      v46 = *(_OWORD *)(v59 + v38 + 112);
      v47 = *(_OWORD *)(v59 + v38 + 144);
      v94 = *(_OWORD *)(v59 + v38 + 128);
      v95 = v47;
      v92 = v45;
      v93 = v46;
      if (v109 == v39)
        goto LABEL_39;
      if (v64 < v60 || v39 >= v109)
        goto LABEL_44;
      v48 = v40[1];
      __dst[0] = *v40;
      __dst[1] = v48;
      v49 = v40[2];
      v50 = v40[3];
      v51 = v40[5];
      __dst[4] = v40[4];
      __dst[5] = v51;
      __dst[2] = v49;
      __dst[3] = v50;
      v52 = v40[6];
      v53 = v40[7];
      v54 = v40[9];
      __dst[8] = v40[8];
      __dst[9] = v54;
      __dst[6] = v52;
      __dst[7] = v53;
      v96[0] = v86;
      v96[1] = v87;
      v96[4] = v90;
      v96[5] = v91;
      v96[2] = v88;
      v96[3] = v89;
      v96[8] = v94;
      v96[9] = v95;
      v96[6] = v92;
      v96[7] = v93;
      v96[16] = v52;
      v96[17] = v53;
      v96[18] = __dst[8];
      v96[19] = v54;
      v96[12] = __dst[2];
      v96[13] = __dst[3];
      v96[14] = __dst[4];
      v96[15] = __dst[5];
      v96[10] = __dst[0];
      v96[11] = __dst[1];
      memcpy(__src, v96, sizeof(__src));
      outlined retain of ReflowTextLine((uint64_t)&v86);
      outlined retain of ReflowTextLine((uint64_t)__dst);
      closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)(__src, (uint64_t)&v98, a2, a3, a4, a5);
      if (v6)
      {
        outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)v96);
        swift_release();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return (_QWORD *)v12;
      }
      v6 = 0;
      v61 = v37;
      v63 = v36;
      result = (_QWORD *)outlined release of (ReflowTextLine, ReflowTextLine)((uint64_t)v96);
      v74 = v102;
      v76 = v103;
      v70 = v100;
      v72 = v101;
      v82 = v106;
      v84 = v107;
      v78 = v104;
      v80 = v105;
      v66 = v98;
      v68 = v99;
      v56 = *(_QWORD *)(v12 + 16);
      v55 = *(_QWORD *)(v12 + 24);
      v108 = v12;
      if (v56 >= v55 >> 1)
      {
        result = (_QWORD *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v12 = v108;
      }
      *(_QWORD *)(v12 + 16) = v56 + 1;
      v57 = (_OWORD *)(v12 + 160 * v56);
      v57[2] = v66;
      v57[3] = v68;
      v57[6] = v74;
      v57[7] = v76;
      v57[4] = v70;
      v57[5] = v72;
      v57[10] = v82;
      v57[11] = v84;
      v37 = v61 - 1;
      v57[8] = v78;
      v57[9] = v80;
      v38 += 160;
      v40 += 10;
      ++v39;
      --v36;
      if (v63 == 1)
        goto LABEL_39;
    }
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

double closure #3 in ReflowLayoutManager.init(contents:frame:strokesToReflow:)@<D0>(void *__src@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, double MaxX@<D2>, CGFloat Width@<D3>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double result;
  _OWORD v29[20];
  CGRect v30;

  memcpy(v29, __src, sizeof(v29));
  outlined retain of (ReflowTextLine, ReflowTextLine)((uint64_t)v29);
  outlined release of ReflowTextLine((uint64_t)&v29[10]);
  v13 = *(_QWORD *)&v29[0];
  if (*(_QWORD *)&v29[0] >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    if (!v14)
      goto LABEL_27;
  }
  else
  {
    v14 = *(_QWORD *)((*(_QWORD *)&v29[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14)
      goto LABEL_27;
  }
  v15 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
    __break(1u);
  }
  else if ((v13 & 0xC000000000000001) == 0)
  {
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v15 < *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v16 = *(_QWORD *)(v13 + 8 * v15 + 32);
      swift_retain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_25;
  }
  v16 = MEMORY[0x1DF0E4D64](v15, v13);
LABEL_8:
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v16 + 136) & 1) != 0)
  {
LABEL_18:
    swift_release();
LABEL_28:
    v20 = 0.0;
    goto LABEL_29;
  }
  v30.origin.x = a3;
  v30.origin.y = a4;
  v30.size.width = MaxX;
  v30.size.height = Width;
  Width = CGRectGetWidth(v30);
  MaxX = CGRectGetMaxX(*(CGRect *)(v16 + 16));
  v6 = *(_QWORD *)&v29[10];
  if (!(*(_QWORD *)&v29[10] >> 62))
  {
    v17 = *(_QWORD *)((*(_QWORD *)&v29[10] & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_26:
    swift_release();
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
LABEL_11:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = MEMORY[0x1DF0E4D64](0, v6);
LABEL_14:
    MaxX = Width - MaxX;
    swift_bridgeObjectRelease();
    if (one-time initialization token for handwritingReflowMinimumSpaceWidth == -1)
      goto LABEL_15;
    goto LABEL_32;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(_QWORD *)(v6 + 32);
    swift_retain();
    goto LABEL_14;
  }
  __break(1u);
LABEL_32:
  swift_once();
LABEL_15:
  v18 = *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth;
  if (v18 + CGRectGetWidth(*(CGRect *)(v7 + 16)) >= MaxX)
  {
    swift_release();
    goto LABEL_18;
  }
  v19 = CGRectGetWidth(*(CGRect *)(v7 + 16));
  swift_release();
  swift_release();
  v20 = MaxX - (v18 + v19 * 0.5);
LABEL_29:
  v21 = *((_QWORD *)&v29[9] + 1);
  v22 = *(_QWORD *)&v29[9];
  v23 = *(_QWORD *)&v29[1];
  v24 = *((_QWORD *)&v29[0] + 1);
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v24;
  *(_QWORD *)(a2 + 16) = v23;
  *(double *)(a2 + 24) = v20;
  v25 = v29[3];
  *(_OWORD *)(a2 + 32) = v29[2];
  *(_OWORD *)(a2 + 48) = v25;
  v26 = v29[5];
  *(_OWORD *)(a2 + 64) = v29[4];
  *(_OWORD *)(a2 + 80) = v26;
  v27 = v29[7];
  *(_OWORD *)(a2 + 96) = v29[6];
  *(_OWORD *)(a2 + 112) = v27;
  result = *(double *)&v29[8];
  *(_OWORD *)(a2 + 128) = v29[8];
  *(_QWORD *)(a2 + 144) = v22;
  *(_QWORD *)(a2 + 152) = v21;
  return result;
}

BOOL ReflowLayoutManager.canReplaceStrokesAtomically(_:)(uint64_t a1)
{
  unint64_t v1;
  void (*v2)(unint64_t, char *, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char *v80;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v89 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v88, v12);
  v83 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v87 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v14);
  v86 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v85 = (char *)&v82 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v98 = *(_QWORD *)(v19 - 8);
  v99 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v97 = (uint64_t)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v96 = (char *)&v82 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v95 = (char *)&v82 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v102 = (char *)&v82 - v35;
  v36 = *(_QWORD *)(a1 + 16);
  if (!v36)
    return 1;
  v82 = v1;
  v100 = v34;
  v91 = v11;
  v84 = v8;
  v104 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
  v37 = specialized Set.startIndex.getter(a1);
  v39 = v38;
  v41 = v40 & 1;
  v93 = a1;
  v94 = a1 + 56;
  v92 = v7;
  do
  {
    if (v37 < 0 || v37 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (((*(_QWORD *)(v94 + (((unint64_t)v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
      goto LABEL_37;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v39)
      goto LABEL_38;
    LODWORD(v101) = v41;
    v42 = *(_QWORD *)(a1 + 48);
    v44 = v98;
    v43 = v99;
    v45 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    v46 = v95;
    v45(v95, v42 + *(_QWORD *)(v98 + 72) * v37, v99);
    v47 = v96;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v96, v46, v43);
    v45((char *)v97, (uint64_t)v47, v43);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B70]);
    Ref.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v43);
    v48 = v104;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1);
      v48 = v104;
    }
    v7 = v92;
    v50 = *(_QWORD *)(v48 + 16);
    v49 = *(_QWORD *)(v48 + 24);
    if (v50 >= v49 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      v48 = v104;
    }
    *(_QWORD *)(v48 + 16) = v50 + 1;
    v2 = *(void (**)(unint64_t, char *, uint64_t))(v100 + 32);
    v2(v48+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72) * v50, v102, v28);
    a1 = v93;
    v51 = specialized _NativeSet.index(after:)(v37, v39, v101 & 1, v93);
    v37 = v51;
    v39 = v52;
    v41 = v53 & 1;
    --v36;
  }
  while (v36);
  outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v51, v52, v41);
  v97 = specialized Set.init<A>(_:)(v48);
  swift_release();
  v54 = v82;
  swift_beginAccess();
  v39 = *(_QWORD *)(v54 + 80);
  if (!(v39 >> 62))
  {
    v55 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_14;
  }
LABEL_42:
  swift_bridgeObjectRetain();
  v55 = _CocoaArrayWrapper.endIndex.getter();
LABEL_14:
  v56 = v83;
  v57 = 0;
  if (!v55)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    v80 = *(char **)(v97 + 16);
    swift_bridgeObjectRelease();
    return v57 == v80;
  }
  v58 = 0;
  v96 = (char *)(v39 & 0xC000000000000001);
  v93 = v39 & 0xFFFFFFFFFFFFFF8;
  v82 = v39 + 32;
  v94 = v55;
  v95 = (char *)v39;
  while (1)
  {
    while (1)
    {
      if (v96)
      {
        v59 = MEMORY[0x1DF0E4D64](v58, v39);
        v60 = __OFADD__(v58++, 1);
        if (v60)
          goto LABEL_39;
      }
      else
      {
        if (v58 >= *(_QWORD *)(v93 + 16))
          goto LABEL_41;
        v59 = *(_QWORD *)(v82 + 8 * v58);
        swift_retain();
        v60 = __OFADD__(v58++, 1);
        if (v60)
          goto LABEL_39;
      }
      type metadata accessor for ReflowWord();
      v61 = swift_dynamicCastClass();
      v62 = v59;
      if (v61)
        break;
      swift_release();
      if (v58 == v55)
        goto LABEL_33;
    }
    v63 = v61;
    v99 = v62;
    v101 = v58;
    v102 = v57;
    v64 = *(_QWORD *)(v61 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    v65 = v87;
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
    v67 = v85;
    v68 = v64;
    v69 = v90;
    v66(v85, v68, v90);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    Capsule<>.root.getter();
    v98 = *(_QWORD *)(v65 + 8);
    ((void (*)(char *, uint64_t))v98)(v67, v69);
    v70 = *(_QWORD *)(v63 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    v71 = (uint64_t)v86;
    v66(v86, v70, v69);
    v72 = v84;
    v73 = MEMORY[0x1E0DEE9E8];
    v103 = MEMORY[0x1E0DEE9E8];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    CROrderedSet.makeIterator()();
    CROrderedSet.Iterator.next()();
    v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48);
    v75 = v73;
    v76 = (uint64_t)v56;
    if (v74(v7, 1, v28) != 1)
    {
      v77 = v100;
      do
      {
        v2((unint64_t)v31, v7, v28);
        specialized Ref<>.getAllStrokes<A>(_:in:)((uint64_t)&v103, v71);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v31, v28);
        CROrderedSet.Iterator.next()();
      }
      while (v74(v7, 1, v28) != 1);
      v75 = v103;
      v76 = (uint64_t)v83;
    }
    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v72);
    ((void (*)(uint64_t, uint64_t))v98)(v71, v90);
    v56 = (char *)v76;
    outlined destroy of PKDrawingStruct(v76);
    if ((specialized Set.isDisjoint(with:)(v97, v75) & 1) == 0)
      break;
    swift_release();
    v58 = v101;
    v78 = v102;
LABEL_31:
    v39 = *(_QWORD *)(v75 + 16);
    swift_bridgeObjectRelease();
    v60 = __OFADD__(v78, v39);
    v57 = &v78[v39];
    if (v60)
      goto LABEL_40;
    v55 = v94;
    v39 = (unint64_t)v95;
    if (v58 == v94)
      goto LABEL_33;
  }
  v79 = specialized Set.isSubset(of:)(v97, v75);
  swift_release();
  v58 = v101;
  v78 = v102;
  if ((v79 & 1) != 0)
    goto LABEL_31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;
  int64_t i;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  _QWORD v41[2];
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v41 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v47 = (char *)v41 - v15;
  v16 = *(_QWORD *)(a2 + 16);
  if (!v16)
    return 1;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return 1;
  if (v16 >= v17)
    v18 = a1;
  else
    v18 = a2;
  if (v16 >= v17)
    a1 = a2;
  v19 = *(_QWORD *)(v18 + 56);
  v43 = v18 + 56;
  v20 = -1 << *(_BYTE *)(v18 + 32);
  v41[1] = ~v20;
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & v19;
  v42 = (unint64_t)(63 - v20) >> 6;
  v50 = a1 + 56;
  v46 = v18;
  swift_bridgeObjectRetain();
  v51 = a1;
  result = swift_bridgeObjectRetain();
  for (i = 0; ; i = v49)
  {
    v44 = v22;
    v45 = i;
    if (!v22)
      break;
    v48 = (v22 - 1) & v22;
    v49 = i;
    v25 = __clz(__rbit64(v22)) | (i << 6);
LABEL_29:
    v30 = v47;
    v31 = *(_QWORD *)(v5 + 72);
    v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v32(v47, *(_QWORD *)(v46 + 48) + v31 * v25, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v30, v4);
    if (*(_QWORD *)(v51 + 16))
    {
      v33 = v51;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
      v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v35 = -1 << *(_BYTE *)(v33 + 32);
      v36 = v34 & ~v35;
      if (((*(_QWORD *)(v50 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
      {
        v37 = ~v35;
        while (1)
        {
          v32(v8, *(_QWORD *)(v51 + 48) + v36 * v31, v4);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12890]);
          v38 = dispatch thunk of static Equatable.== infix(_:_:)();
          v39 = *(void (**)(char *, uint64_t))(v5 + 8);
          v39(v8, v4);
          if ((v38 & 1) != 0)
            break;
          v36 = (v36 + 1) & v37;
          if (((*(_QWORD *)(v50 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
            goto LABEL_12;
        }
        swift_bridgeObjectRelease();
        v39(v12, v4);
        v40 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    v22 = v48;
  }
  v26 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v26 >= v42)
    goto LABEL_39;
  v27 = *(_QWORD *)(v43 + 8 * v26);
  v28 = i + 1;
  if (v27)
    goto LABEL_28;
  v28 = i + 2;
  if (i + 2 >= v42)
    goto LABEL_39;
  v27 = *(_QWORD *)(v43 + 8 * v28);
  if (v27)
    goto LABEL_28;
  v28 = i + 3;
  if (i + 3 >= v42)
    goto LABEL_39;
  v27 = *(_QWORD *)(v43 + 8 * v28);
  if (v27)
  {
LABEL_28:
    v48 = (v27 - 1) & v27;
    v49 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
    goto LABEL_29;
  }
  v29 = i + 4;
  if (i + 4 >= v42)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    v40 = 1;
LABEL_37:
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v40;
  }
  v27 = *(_QWORD *)(v43 + 8 * v29);
  if (v27)
  {
    v28 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v42)
      goto LABEL_39;
    v27 = *(_QWORD *)(v43 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_28;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t ReflowLayoutManager.replaceStrokes(_:with:)(uint64_t a1, unint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  Swift::Int v44;
  _OWORD *v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int isUniquelyReferenced_nonNull_native;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  Swift::Int v99;
  Swift::Int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int64_t v107;
  char v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char v139;
  unint64_t v140;
  _QWORD *v141;
  char v142;
  uint64_t v143;
  objc_class *v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  objc_class *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  objc_class *v159;
  _BYTE *v160;
  uint64_t v161;
  objc_class *v162;
  _BYTE *v163;
  uint64_t result;
  uint64_t v165;
  uint64_t v166;
  char v167[8];
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  int64_t v174;
  uint64_t *v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  int64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  int64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  unint64_t v192;
  uint64_t v193;
  objc_super v194;
  objc_super v195;
  objc_super v196;
  objc_super v197;
  uint64_t v198;

  v183 = a1;
  v189 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v188 = *(_QWORD *)(v189 - 8);
  MEMORY[0x1E0C80A78](v189, v7);
  v187 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v182, v9);
  v181 = (char *)&v171 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v185 = *(_QWORD *)(v186 - 8);
  MEMORY[0x1E0C80A78](v186, v11);
  v180 = (char *)&v171 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v184 = (char *)&v171 - v15;
  v16 = type metadata accessor for IndexSet();
  v173 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v171 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = a2;
  v176 = a2;
  swift_bridgeObjectRetain();
  v177 = v19;
  IndexSet.init()();
  v175 = (uint64_t *)(v2 + 80);
  swift_beginAccess();
  v172 = v2;
  v20 = *(_QWORD *)(v2 + 80);
  if ((unint64_t)v20 >> 62)
    goto LABEL_312;
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v174 = v16;
  if (v21)
  {
    if (v21 < 1)
    {
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
      goto LABEL_320;
    }
    v22 = 0;
    v193 = 0;
    v190 = v20 & 0xC000000000000001;
    v179 = v20;
    v178 = v21;
    v23 = v186;
    v5 = (uint64_t)v181;
    do
    {
      if (v190)
      {
        v24 = MEMORY[0x1DF0E4D64](v22, v20);
      }
      else
      {
        v24 = *(_QWORD *)(v20 + 8 * v22 + 32);
        swift_retain();
      }
      type metadata accessor for ReflowWord();
      v25 = swift_dynamicCastClass();
      if (v25)
      {
        v26 = v25;
        v192 = v24;
        v27 = *(_QWORD *)(v25 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        v28 = v185;
        v29 = *(void (**)(char *, uint64_t, uint64_t))(v185 + 16);
        v30 = v184;
        v29(v184, v27, v23);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
        Capsule<>.root.getter();
        v191 = *(char **)(v28 + 8);
        ((void (*)(char *, uint64_t))v191)(v30, v23);
        v31 = *(_QWORD *)(v26 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        v3 = (uint64_t)v180;
        v29(v180, v31, v23);
        v32 = v188;
        v33 = v187;
        v34 = v189;
        v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v188 + 16))(v187, v5 + *(int *)(v182 + 20), v189);
        MEMORY[0x1E0C80A78](v35, v36);
        v169 = v183;
        v170 = v3;
        v37 = v193;
        v38 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)v167);
        v193 = v37;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
        ((void (*)(uint64_t, uint64_t))v191)(v3, v23);
        outlined destroy of PKDrawingStruct(v5);
        if (v38)
          IndexSet.insert(_:)(v22);
        v20 = v179;
        v21 = v178;
      }
      ++v22;
      swift_release();
    }
    while (v21 != v22);
  }
  else
  {
    v193 = 0;
  }
  swift_bridgeObjectRelease();
  v4 = (unint64_t)v177;
  if ((IndexSet.isEmpty.getter() & 1) == 0)
    goto LABEL_18;
  if (!(v176 >> 62))
  {
    if (*(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_18;
LABEL_321:
    v162 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
    v163 = objc_allocWithZone(v162);
    *(_QWORD *)&v163[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = 0;
    v163[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
    v194.receiver = v163;
    v194.super_class = v162;
    objc_msgSendSuper2(&v194, sel_init);
LABEL_322:
    v16 = MEMORY[0x1E0DEE9E8];
LABEL_323:
    (*(void (**)(unint64_t, int64_t))(v173 + 8))(v4, v174);
    swift_bridgeObjectRelease();
    return v16;
  }
LABEL_320:
  swift_bridgeObjectRetain();
  v161 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v161)
    goto LABEL_321;
LABEL_18:
  v39 = IndexSet.last.getter();
  if ((v40 & 1) == 0)
  {
    v41 = v39;
    v16 = v176;
    v20 = v176 >> 62;
    if (v176 >> 62)
    {
      swift_bridgeObjectRetain();
      v42 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v42)
        goto LABEL_29;
    }
    else
    {
      v42 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v42)
        goto LABEL_29;
    }
    v43 = __OFADD__(v41, 1);
    v44 = v41 + 1;
    if (v43)
    {
      __break(1u);
    }
    else
    {
      v42 = *v175;
      if (!((unint64_t)*v175 >> 62))
      {
        v45 = *(_OWORD **)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v44 >= (uint64_t)v45)
          goto LABEL_29;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRetain();
    v45 = (_OWORD *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v44 < (uint64_t)v45)
    {
LABEL_24:
      v42 = *v175;
      if ((*v175 & 0xC000000000000001) != 0)
        goto LABEL_353;
      if (v44 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v44 < *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v42 = *(_QWORD *)(v42 + 8 * v44 + 32);
        type metadata accessor for ReflowSpace();
        if (!swift_dynamicCastClass())
          goto LABEL_29;
LABEL_28:
        IndexSet.insert(_:)(v44);
        goto LABEL_29;
      }
      __break(1u);
      goto LABEL_357;
    }
LABEL_29:
    v46 = IndexSet.first.getter();
    if ((v47 & 1) != 0)
      goto LABEL_369;
    v48 = v46;
    v44 = v4;
    v49 = IndexSet.last.getter();
    if ((v50 & 1) != 0)
      goto LABEL_370;
    if (v49 < (uint64_t)v48)
    {
      __break(1u);
    }
    else
    {
      v42 = v49 + 1;
      if (!__OFADD__(v49, 1))
      {
        v44 = *v175;
        v16 = (unint64_t)*v175 >> 62;
        if (!v16)
        {
          v51 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v51 < (uint64_t)v48)
            goto LABEL_329;
LABEL_35:
          if ((v48 & 0x8000000000000000) != 0)
            goto LABEL_330;
          if (v16)
          {
            swift_bridgeObjectRetain();
            v51 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v51 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          if (v51 < v42)
            goto LABEL_331;
          if (v42 < 0)
            goto LABEL_332;
          v182 = v20;
          if ((v44 & 0xC000000000000001) != 0)
          {
            if (v42 < v48)
              goto LABEL_341;
            if (v48 != v42)
            {
              if (v48 >= v42)
                goto LABEL_351;
              v51 = type metadata accessor for ReflowElement();
              v65 = v48;
              do
              {
                v20 = v65 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v65);
                v65 = v20;
              }
              while (v42 != v20);
            }
          }
          if (v16)
          {
            if (v44 < 0)
              v51 = v44;
            else
              v51 = v44 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v68 = _CocoaArrayWrapper.subscript.getter();
            v192 = v69;
            v48 = v70;
            v67 = v71;
            swift_bridgeObjectRelease_n();
            v66 = v68;
          }
          else
          {
            v66 = v44 & 0xFFFFFFFFFFFFFF8;
            v192 = (v44 & 0xFFFFFFFFFFFFFF8) + 32;
            v67 = (2 * v42) | 1;
          }
          v16 = v67 >> 1;
          if (v48 == v67 >> 1)
          {
            v3 = MEMORY[0x1E0DEE9D8];
            goto LABEL_88;
          }
          v190 = v66;
          swift_unknownObjectRetain();
          v3 = MEMORY[0x1E0DEE9D8];
          v51 = (uint64_t)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>;
          v191 = (char *)(v67 >> 1);
          v72 = v184;
          v73 = v187;
          while (1)
          {
            if ((uint64_t)v48 >= v16)
              goto LABEL_279;
            type metadata accessor for ReflowWord();
            v74 = swift_dynamicCastClass();
            if (v74)
            {
              v75 = *(_QWORD *)(v74 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
              swift_beginAccess();
              v76 = v185;
              v77 = v186;
              (*(void (**)(char *, uint64_t, uint64_t))(v185 + 16))(v72, v75, v186);
              swift_getKeyPath();
              v4 = v3;
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
              swift_retain_n();
              Capsule<>.subscript.getter();
              swift_release();
              (*(void (**)(char *, uint64_t))(v76 + 8))(v72, v77);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
              v78 = v189;
              v79 = v193;
              v80 = CROrderedSet.map<A>(_:)();
              v193 = v79;
              swift_release();
              (*(void (**)(char *, uint64_t))(v188 + 8))(v73, v78);
              swift_release();
            }
            else
            {
              v80 = MEMORY[0x1E0DEE9D8];
            }
            v5 = *(_QWORD *)(v80 + 16);
            v16 = *(_QWORD *)(v3 + 16);
            v20 = v16 + v5;
            if (__OFADD__(v16, v5))
            {
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
LABEL_282:
              __break(1u);
LABEL_283:
              __break(1u);
LABEL_284:
              __break(1u);
LABEL_285:
              __break(1u);
LABEL_286:
              __break(1u);
LABEL_287:
              __break(1u);
LABEL_288:
              __break(1u);
LABEL_289:
              __break(1u);
LABEL_290:
              __break(1u);
LABEL_291:
              __break(1u);
LABEL_292:
              __break(1u);
LABEL_293:
              __break(1u);
LABEL_294:
              __break(1u);
LABEL_295:
              __break(1u);
LABEL_296:
              __break(1u);
LABEL_297:
              __break(1u);
LABEL_298:
              __break(1u);
LABEL_299:
              __break(1u);
LABEL_300:
              __break(1u);
LABEL_301:
              __break(1u);
LABEL_302:
              __break(1u);
LABEL_303:
              __break(1u);
LABEL_304:
              __break(1u);
LABEL_305:
              __break(1u);
LABEL_306:
              __break(1u);
LABEL_307:
              __break(1u);
LABEL_308:
              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
LABEL_311:
              __break(1u);
LABEL_312:
              swift_bridgeObjectRetain();
              v21 = _CocoaArrayWrapper.endIndex.getter();
              goto LABEL_3;
            }
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && v20 <= *(_QWORD *)(v3 + 24) >> 1)
            {
              if (*(_QWORD *)(v80 + 16))
                goto LABEL_78;
            }
            else
            {
              if (v16 <= v20)
                v82 = v16 + v5;
              else
                v82 = v16;
              v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v82, 1, v3);
              if (*(_QWORD *)(v80 + 16))
              {
LABEL_78:
                v16 = *(_QWORD *)(v3 + 16);
                v20 = (*(_QWORD *)(v3 + 24) >> 1) - v16;
                v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
                if (v20 < v5)
                  goto LABEL_288;
                v84 = *(_QWORD *)(v83 - 8);
                v85 = (*(unsigned __int8 *)(v84 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
                v86 = *(_QWORD *)(v84 + 72);
                v87 = v3 + v85 + v86 * v16;
                v88 = v80 + v85;
                v89 = v86 * v5;
                v90 = v87 + v89;
                v91 = v88 + v89;
                if (v88 < v90 && v87 < v91)
                  goto LABEL_373;
                swift_arrayInitWithCopy();
                if (v5)
                {
                  v93 = *(_QWORD *)(v3 + 16);
                  v43 = __OFADD__(v93, v5);
                  v94 = v93 + v5;
                  if (v43)
                    goto LABEL_297;
                  *(_QWORD *)(v3 + 16) = v94;
                }
                goto LABEL_64;
              }
            }
            if (v5)
              goto LABEL_281;
LABEL_64:
            ++v48;
            swift_bridgeObjectRelease();
            v16 = (int64_t)v191;
            if (v191 == (char *)v48)
            {
              v16 = v190;
              swift_unknownObjectRelease();
LABEL_88:
              swift_unknownObjectRelease();
              v44 = (Swift::Int)v177;
              v95 = IndexSet.first.getter();
              if ((v96 & 1) != 0)
                goto LABEL_371;
              v4 = v95;
              v97 = IndexSet.last.getter();
              if ((v98 & 1) != 0)
                goto LABEL_372;
              if (v97 < (uint64_t)v4)
                goto LABEL_333;
              v16 = v97 + 1;
              if (__OFADD__(v97, 1))
                goto LABEL_334;
              v44 = *v175;
              v20 = (unint64_t)*v175 >> 62;
              if (!v20)
              {
                v42 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (v42 >= (uint64_t)v4)
                  goto LABEL_94;
LABEL_336:
                __break(1u);
                goto LABEL_337;
              }
LABEL_335:
              swift_bridgeObjectRetain_n();
              v42 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v42 < (uint64_t)v4)
                goto LABEL_336;
LABEL_94:
              if ((v4 & 0x8000000000000000) != 0)
              {
LABEL_337:
                __break(1u);
LABEL_338:
                __break(1u);
LABEL_339:
                __break(1u);
                goto LABEL_340;
              }
              if (v20)
              {
                swift_bridgeObjectRetain();
                v42 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v42 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              if (v42 < v16)
                goto LABEL_338;
              if (v16 < 0)
                goto LABEL_339;
              if ((v44 & 0xC000000000000001) == 0)
                goto LABEL_106;
              if (v16 < v4)
                goto LABEL_342;
              if (v4 == v16)
                goto LABEL_106;
              if (v4 < v16)
              {
                type metadata accessor for ReflowElement();
                v99 = v4;
                do
                {
                  v100 = v99 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v99);
                  v99 = v100;
                }
                while (v16 != v100);
LABEL_106:
                if (v20)
                {
                  swift_bridgeObjectRetain();
                  v42 = _CocoaArrayWrapper.subscript.getter();
                  v51 = v101;
                  v5 = v102;
                  v48 = v103;
                  swift_bridgeObjectRelease_n();
                  if ((v48 & 1) == 0)
                    goto LABEL_109;
                }
                else
                {
                  v42 = v44 & 0xFFFFFFFFFFFFFF8;
                  v51 = (v44 & 0xFFFFFFFFFFFFFF8) + 32;
                  v48 = (2 * v16) | 1;
                  v5 = v4;
                }
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                v104 = swift_dynamicCastClass();
                if (!v104)
                {
                  swift_unknownObjectRelease();
                  v104 = MEMORY[0x1E0DEE9D8];
                }
                v105 = *(_QWORD *)(v104 + 16);
                swift_release();
                if (__OFSUB__(v48 >> 1, v5))
                  goto LABEL_343;
                if (v105 != (v48 >> 1) - v5)
                  goto LABEL_344;
                v5 = swift_dynamicCastClass();
                if (!v5)
                {
                  swift_unknownObjectRelease();
                  v5 = MEMORY[0x1E0DEE9D8];
                }
                while (1)
                {
                  swift_unknownObjectRelease();
                  v20 = (int64_t)v175;
                  swift_beginAccess();
                  v106 = v176;
                  swift_bridgeObjectRetain();
                  v183 = v4;
                  specialized Array.replaceSubrange<A>(_:with:)(v4, v16, v106);
                  swift_endAccess();
                  v16 = v172;
                  v48 = v172 + 96;
                  swift_beginAccess();
                  v107 = *(_QWORD *)(*(_QWORD *)(v16 + 96) + 16);
                  if (v107)
                    break;
LABEL_254:
                  v16 = specialized Set.init<A>(_:)(v3);
                  swift_bridgeObjectRelease();
                  if (v183 <= 0)
                    v143 = 0;
                  else
                    v143 = v183 - 1;
                  v4 = (unint64_t)v177;
                  v42 = v176;
                  if (v182)
                  {
                    swift_bridgeObjectRetain();
                    v146 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    v146 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10);
                  }
                  v43 = __OFADD__(v143, v146);
                  v147 = v143 + v146;
                  if (!v43)
                  {
                    v148 = v183 > 0;
                    v149 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
                    v150 = objc_allocWithZone(v149);
                    *(_QWORD *)&v150[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = v147;
                    v150[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = v148;
                    v195.receiver = v150;
                    v195.super_class = v149;
                    objc_msgSendSuper2(&v195, sel_init);
                    goto LABEL_323;
                  }
LABEL_340:
                  __break(1u);
LABEL_341:
                  __break(1u);
LABEL_342:
                  __break(1u);
LABEL_343:
                  __break(1u);
LABEL_344:
                  swift_unknownObjectRelease();
LABEL_109:
                  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v42, v51, v5, v48);
                }
                v4 = 0;
                v108 = 0;
                v109 = ((unint64_t)v5 >> 62) & 1;
                if (v5 < 0)
                  LODWORD(v109) = 1;
                LODWORD(v189) = v109;
                v192 = v5 & 0xC000000000000001;
                v184 = (char *)(v5 + 32);
                v186 = v3;
                v190 = v48;
                v188 = v107;
                while (2)
                {
                  v110 = (char *)(v4 + 1);
                  v111 = *(_QWORD *)v48;
                  v112 = *(_QWORD *)(*(_QWORD *)v48 + 16);
                  if ((v108 & 1) != 0)
                  {
                    if (v4 >= v112)
                      goto LABEL_289;
                    v16 = *(_QWORD *)(v111 + 160 * v4 + 32);
                    if ((_DWORD)v189)
                    {
                      swift_bridgeObjectRetain();
                      swift_retain();
                      swift_bridgeObjectRetain();
                      v113 = _CocoaArrayWrapper.endIndex.getter();
                      swift_release();
                      if (!v113)
                        goto LABEL_368;
                    }
                    else
                    {
                      v113 = *(_QWORD *)(v5 + 16);
                      swift_retain();
                      swift_bridgeObjectRetain();
                      if (!v113)
                        goto LABEL_368;
                    }
                    v114 = v113 - 1;
                    if (__OFSUB__(v113, 1))
                      goto LABEL_291;
                    if (v192)
                    {
                      v115 = MEMORY[0x1DF0E4D64](v114, v5);
                    }
                    else
                    {
                      if ((v114 & 0x8000000000000000) != 0)
                        goto LABEL_293;
                      if (v114 >= *(_QWORD *)(v5 + 16))
                        goto LABEL_294;
                      v115 = *(_QWORD *)&v184[8 * v114];
                      swift_retain();
                    }
                    swift_release();
                    if (!((unint64_t)v16 >> 62))
                    {
                      v116 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
                      if (v116)
                        goto LABEL_134;
LABEL_184:
                      swift_bridgeObjectRelease();
                      swift_release();
                      v48 = v190;
                      swift_beginAccess();
                      v16 = *(_QWORD *)v48;
                      v125 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)v48 = v16;
                      if ((v125 & 1) == 0)
                      {
                        v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v16);
                        *(_QWORD *)v48 = v16;
                      }
                      v3 = v186;
                      v20 = v188;
                      if (v4 >= *(_QWORD *)(v16 + 16))
                        goto LABEL_299;
                      v126 = v16 + 160 * v4;
                      v16 = *(_QWORD *)(v126 + 32);
                      *(_QWORD *)(v126 + 32) = MEMORY[0x1E0DEE9D8];
                      swift_endAccess();
                      swift_bridgeObjectRelease();
                      if (v110 == (char *)v20)
                        goto LABEL_254;
LABEL_244:
                      v108 = 1;
LABEL_122:
                      v4 = (unint64_t)v110;
                      if (v110 == (char *)v20)
                        goto LABEL_282;
                      continue;
                    }
                    swift_bridgeObjectRetain();
                    v116 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v116)
                      goto LABEL_184;
LABEL_134:
                    v43 = __OFSUB__(v116, 1);
                    v117 = v116 - 1;
                    if (v43)
                      goto LABEL_301;
                    v20 = v16 & 0xC000000000000001;
                    if ((v16 & 0xC000000000000001) != 0)
                    {
                      v51 = MEMORY[0x1DF0E4D64](v117, v16);
                      swift_unknownObjectRelease();
                      v3 = v186;
                      v48 = v190;
                      if (v51 != v115)
                        goto LABEL_139;
                    }
                    else
                    {
                      v3 = v186;
                      v48 = v190;
                      if ((v117 & 0x8000000000000000) != 0)
                        goto LABEL_302;
                      if (v117 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_303;
                      if (*(_QWORD *)(v16 + 8 * v117 + 32) != v115)
                      {
LABEL_139:
                        if (v117)
                        {
                          v3 = v16 & 0xFFFFFFFFFFFFFF8;
                          while (1)
                          {
                            v43 = __OFSUB__(v117--, 1);
                            if (v43)
                              break;
                            if (v20)
                            {
                              v51 = MEMORY[0x1DF0E4D64](v117, v16);
                              swift_unknownObjectRelease();
                              if (v51 == v115)
                                goto LABEL_148;
                            }
                            else
                            {
                              if ((v117 & 0x8000000000000000) != 0)
                                goto LABEL_284;
                              if (v117 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
                                goto LABEL_285;
                              if (*(_QWORD *)(v16 + 32 + 8 * v117) == v115)
                              {
LABEL_148:
                                swift_bridgeObjectRelease();
                                v3 = v186;
                                v48 = v190;
                                goto LABEL_226;
                              }
                            }
                            if (!v117)
                              goto LABEL_184;
                          }
                          __break(1u);
LABEL_278:
                          __break(1u);
LABEL_279:
                          __break(1u);
                          goto LABEL_280;
                        }
                        goto LABEL_184;
                      }
                    }
                    swift_bridgeObjectRelease();
LABEL_226:
                    swift_release();
                    swift_beginAccess();
                    v16 = *(_QWORD *)v48;
                    v135 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)v48 = v16;
                    if ((v135 & 1) == 0)
                    {
                      v16 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v16);
                      *(_QWORD *)v48 = v16;
                    }
                    if (v4 >= *(_QWORD *)(v16 + 16))
                      goto LABEL_309;
                    v136 = v117 + 1;
                    if (__OFADD__(v117, 1))
                      goto LABEL_310;
                    if (v136 < 0)
                      goto LABEL_311;
                    specialized Array.replaceSubrange<A>(_:with:)(0, v136);
                    swift_endAccess();
                    v20 = v188;
                    if (v110 == (char *)v188)
                      goto LABEL_254;
LABEL_121:
                    v108 = 0;
                    goto LABEL_122;
                  }
                  break;
                }
                if (v4 >= v112)
                  goto LABEL_290;
                v16 = *(_QWORD *)(v111 + 160 * v4 + 32);
                if ((_DWORD)v189)
                {
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_bridgeObjectRetain();
                  v191 = (char *)_CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                }
                else
                {
                  v191 = *(char **)(v5 + 16);
                  swift_retain();
                  swift_bridgeObjectRetain();
                }
                if (!v191)
                  goto LABEL_367;
                if (v192)
                {
                  v118 = MEMORY[0x1DF0E4D64](0, v5);
                }
                else
                {
                  if (!*(_QWORD *)(v5 + 16))
                    goto LABEL_292;
                  v118 = *(_QWORD *)(v5 + 32);
                  swift_retain();
                }
                swift_release();
                v187 = (char *)(v4 + 1);
                if (!((unint64_t)v16 >> 62))
                {
                  v119 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
                  if (v119)
                    goto LABEL_158;
LABEL_181:
                  swift_bridgeObjectRelease();
                  v185 = 0;
                  v16 = 1;
LABEL_195:
                  swift_release();
                  if (v4 >= *(_QWORD *)(*(_QWORD *)v48 + 16))
                    goto LABEL_295;
                  v129 = v191 - 1;
                  if (__OFSUB__(v191, 1))
                    goto LABEL_296;
                  v51 = *(_QWORD *)(*(_QWORD *)v48 + 160 * v4 + 32);
                  if (v192)
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v130 = MEMORY[0x1DF0E4D64](v129, v5);
                    swift_release();
                    if (!((unint64_t)v51 >> 62))
                      goto LABEL_199;
LABEL_218:
                    swift_bridgeObjectRetain();
                    v131 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v131)
                      goto LABEL_219;
LABEL_200:
                    v43 = __OFSUB__(v131, 1);
                    v132 = v131 - 1;
                    if (v43)
                      goto LABEL_304;
                    v20 = v51 & 0xC000000000000001;
                    if ((v51 & 0xC000000000000001) != 0)
                    {
                      v137 = MEMORY[0x1DF0E4D64](v132, v51);
                      swift_unknownObjectRelease();
                      if (v137 != v130)
                        goto LABEL_205;
                    }
                    else
                    {
                      if ((v132 & 0x8000000000000000) != 0)
                        goto LABEL_305;
                      if (v132 >= *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_306;
                      if (*(_QWORD *)(v51 + 8 * v132 + 32) != v130)
                      {
LABEL_205:
                        if (v132)
                        {
                          v3 = v51 & 0xFFFFFFFFFFFFFF8;
                          while (1)
                          {
                            v43 = __OFSUB__(v132--, 1);
                            if (v43)
                              goto LABEL_278;
                            if (v20)
                            {
                              v133 = MEMORY[0x1DF0E4D64](v132, v51);
                              swift_unknownObjectRelease();
                              if (v133 == v130)
                                goto LABEL_214;
                            }
                            else
                            {
                              if ((v132 & 0x8000000000000000) != 0)
                                goto LABEL_286;
                              if (v132 >= *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
                                goto LABEL_287;
                              if (*(_QWORD *)(v51 + 32 + 8 * v132) == v130)
                              {
LABEL_214:
                                swift_bridgeObjectRelease();
                                v134 = 0;
LABEL_223:
                                v3 = v186;
                                v48 = v190;
                                goto LABEL_235;
                              }
                            }
                            if (!v132)
                            {
                              swift_bridgeObjectRelease();
                              v134 = 1;
                              goto LABEL_223;
                            }
                          }
                        }
                        swift_bridgeObjectRelease();
                        goto LABEL_221;
                      }
                    }
                    swift_bridgeObjectRelease();
                    v134 = 0;
                  }
                  else
                  {
                    if (((unint64_t)v129 & 0x8000000000000000) != 0)
                      goto LABEL_307;
                    if ((unint64_t)v129 >= *(_QWORD *)(v5 + 16))
                      goto LABEL_308;
                    v130 = *(_QWORD *)&v184[8 * (_QWORD)v129];
                    swift_bridgeObjectRetain();
                    swift_retain();
                    if ((unint64_t)v51 >> 62)
                      goto LABEL_218;
LABEL_199:
                    v131 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
                    if (v131)
                      goto LABEL_200;
LABEL_219:
                    swift_bridgeObjectRelease();
                    v132 = 0;
LABEL_221:
                    v134 = 1;
                  }
LABEL_235:
                  swift_release();
                  if ((v16 & 1) == 0)
                  {
                    if ((v134 & 1) != 0)
                    {
                      swift_beginAccess();
                      v138 = *(_QWORD **)v48;
                      v139 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)v48 = v138;
                      v16 = v185;
                      if ((v139 & 1) == 0)
                      {
                        v138 = specialized _ArrayBuffer._consumeAndCreateNew()(v138);
                        *(_QWORD *)v48 = v138;
                      }
                      if (v4 >= v138[2])
                      {
                        __break(1u);
LABEL_314:
                        __break(1u);
LABEL_315:
                        __break(1u);
LABEL_316:
                        __break(1u);
LABEL_317:
                        __break(1u);
                        goto LABEL_318;
                      }
                      v140 = v138[20 * v4 + 4];
                      if (v140 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        v51 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v51 = *(_QWORD *)((v140 & 0xFFFFFFFFFFFFF8) + 0x10);
                      }
                      v20 = v188;
                      v110 = v187;
                      if (v51 < v16)
                        goto LABEL_315;
                      specialized Array.replaceSubrange<A>(_:with:)(v16, v51);
                      swift_endAccess();
                      if (v110 == (char *)v20)
                        goto LABEL_254;
                      goto LABEL_244;
                    }
                    v16 = v185;
                    if ((uint64_t)v132 < v185)
                      goto LABEL_314;
                    swift_beginAccess();
                    v141 = *(_QWORD **)v48;
                    v142 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)v48 = v141;
                    if ((v142 & 1) == 0)
                    {
                      v141 = specialized _ArrayBuffer._consumeAndCreateNew()(v141);
                      *(_QWORD *)v48 = v141;
                    }
                    if (v4 >= v141[2])
                      goto LABEL_316;
                    if (__OFADD__(v132, 1))
                      goto LABEL_317;
                    specialized Array.replaceSubrange<A>(_:with:)(v16, v132 + 1);
                    swift_endAccess();
                  }
                  v20 = v188;
                  v110 = v187;
                  if (v187 == (char *)v188)
                    goto LABEL_254;
                  goto LABEL_121;
                }
                swift_bridgeObjectRetain();
                v119 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v119)
                  goto LABEL_181;
LABEL_158:
                v20 = v16 & 0xC000000000000001;
                if ((v16 & 0xC000000000000001) != 0)
                {
                  v127 = MEMORY[0x1DF0E4D64](0, v16);
                  swift_unknownObjectRelease();
                  if (v127 == v118)
                  {
                    swift_bridgeObjectRelease();
                    v185 = 0;
                    v16 = 0;
                    goto LABEL_195;
                  }
                  if (v119 != 1)
                  {
                    v128 = MEMORY[0x1DF0E4D64](1, v16);
                    swift_unknownObjectRelease();
                    if (v128 != v118)
                    {
                      v120 = v16 & 0xFFFFFFFFFFFFFF8;
                      goto LABEL_166;
                    }
                    goto LABEL_193;
                  }
LABEL_162:
                  swift_bridgeObjectRelease();
                  v185 = 0;
                  v16 = 1;
                }
                else
                {
                  v120 = v16 & 0xFFFFFFFFFFFFFF8;
                  v121 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (!v121)
                    goto LABEL_300;
                  if (*(_QWORD *)(v16 + 32) == v118)
                  {
                    swift_bridgeObjectRelease();
                    v185 = 0;
                    v16 = 0;
                  }
                  else
                  {
                    if (v119 == 1)
                      goto LABEL_162;
                    if (v121 < 2)
                      goto LABEL_319;
                    if (*(_QWORD *)(v16 + 40) != v118)
                    {
LABEL_166:
                      v3 = 0;
                      v122 = v119 - 2;
                      while (v122 != v3)
                      {
                        v124 = v3 + 2;
                        if (v20)
                        {
                          v123 = MEMORY[0x1DF0E4D64](v3 + 2, v16);
                          swift_unknownObjectRelease();
                          if (v123 == v118)
                            goto LABEL_173;
                        }
                        else
                        {
                          if (v124 >= *(_QWORD *)(v120 + 16))
                            goto LABEL_298;
                          if (*(_QWORD *)(v16 + 8 * v3 + 48) == v118)
                          {
LABEL_173:
                            swift_bridgeObjectRelease();
                            v16 = 0;
                            v185 = v3 + 2;
                            goto LABEL_175;
                          }
                        }
                        ++v3;
                        if (__OFADD__(v124, 1))
                          goto LABEL_283;
                      }
                      swift_bridgeObjectRelease();
                      v185 = 0;
                      v16 = 1;
LABEL_175:
                      v3 = v186;
                      goto LABEL_194;
                    }
LABEL_193:
                    swift_bridgeObjectRelease();
                    v16 = 0;
                    v185 = 1;
                  }
                }
LABEL_194:
                v48 = v190;
                goto LABEL_195;
              }
LABEL_352:
              __break(1u);
LABEL_353:
              swift_bridgeObjectRetain();
              MEMORY[0x1DF0E4D64](v44, v42);
              swift_bridgeObjectRelease();
              type metadata accessor for ReflowSpace();
              v42 = swift_dynamicCastClass();
              swift_unknownObjectRelease();
              if (v42)
                goto LABEL_28;
              goto LABEL_29;
            }
          }
        }
LABEL_328:
        swift_bridgeObjectRetain_n();
        v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v51 < (uint64_t)v48)
        {
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
LABEL_334:
          __break(1u);
          goto LABEL_335;
        }
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_328;
  }
  v52 = v172;
  v45 = (_OWORD *)(v172 + 160);
  swift_beginAccess();
  v53 = v52;
  v16 = *(_QWORD *)(v52 + 160);
  if (!v16)
  {
LABEL_257:
    v144 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
    v145 = objc_allocWithZone(v144);
    *(_QWORD *)&v145[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = 0;
    v145[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
    v197.receiver = v145;
    v197.super_class = v144;
    objc_msgSendSuper2(&v197, sel_init);
    goto LABEL_322;
  }
  v54 = *(_QWORD *)(v53 + 168);
  v55 = *(_QWORD *)(v53 + 80);
  swift_bridgeObjectRetain();
  v56 = swift_retain();
  v20 = specialized Collection<>.firstIndex(of:)(v56, v55);
  v58 = v57;
  swift_bridgeObjectRelease();
  if ((v58 & 1) != 0)
  {
    swift_release();
    goto LABEL_257;
  }
  if ((v54 & 1) == 0)
  {
    if (one-time initialization token for handwritingReflowMinimumSpaceWidth == -1)
    {
LABEL_42:
      v59 = static UIConstants.handwritingReflowMinimumSpaceWidth;
      type metadata accessor for ReflowSpace();
      v60 = swift_allocObject();
      *(_QWORD *)(v60 + 144) = 1;
      *(_BYTE *)(v60 + 137) = 0;
      v62 = UnknownCanvasElementView.flags.modify(v60, v61);
      *(_OWORD *)(v60 + 48) = 0u;
      *(_OWORD *)(v60 + 64) = 0u;
      *(_OWORD *)(v60 + 80) = 0u;
      *(_QWORD *)(v60 + 96) = 0;
      *(double *)(v60 + 104) = v62;
      *(_QWORD *)(v60 + 112) = v63;
      *(_QWORD *)(v60 + 120) = -1;
      *(_QWORD *)(v60 + 128) = 0;
      *(_BYTE *)(v60 + 136) = 0;
      *(_QWORD *)(v60 + 16) = 0;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = v59;
      *(_QWORD *)(v60 + 40) = 0x4000000000000000;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v198 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v64 = v20;
LABEL_274:
      v42 = v198;
      v3 = (uint64_t)v175;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Array.replaceSubrange<A>(_:with:)(v64, v64, v42);
      swift_endAccess();
      v45[1] = 0u;
      v45[2] = 0u;
      *(_OWORD *)((char *)v45 + 42) = 0u;
      *v45 = 0u;
      swift_release();
      if ((unint64_t)v42 >> 62)
      {
        swift_bridgeObjectRetain();
        v44 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v43 = __OFADD__(v20, v44);
        v20 += v44;
        if (!v43)
          goto LABEL_276;
      }
      else
      {
        v44 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        v43 = __OFADD__(v20, v44);
        v20 += v44;
        if (!v43)
        {
LABEL_276:
          v159 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
          v160 = objc_allocWithZone(v159);
          *(_QWORD *)&v160[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = v20;
          v160[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = 0;
          v196.receiver = v160;
          v196.super_class = v159;
          objc_msgSendSuper2(&v196, sel_init);
          swift_release();
          goto LABEL_322;
        }
      }
      __break(1u);
LABEL_351:
      __break(1u);
      goto LABEL_352;
    }
LABEL_357:
    swift_once();
    goto LABEL_42;
  }
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
    swift_once();
  v151 = static UIConstants.handwritingReflowMinimumSpaceWidth;
  type metadata accessor for ReflowSpace();
  v152 = swift_allocObject();
  *(_QWORD *)(v152 + 144) = 1;
  *(_BYTE *)(v152 + 137) = 0;
  v154 = UnknownCanvasElementView.flags.modify(v152, v153);
  *(_OWORD *)(v152 + 48) = 0u;
  *(_OWORD *)(v152 + 64) = 0u;
  *(_OWORD *)(v152 + 80) = 0u;
  *(_QWORD *)(v152 + 96) = 0;
  *(double *)(v152 + 104) = v154;
  *(_QWORD *)(v152 + 112) = v155;
  *(_QWORD *)(v152 + 120) = -1;
  *(_QWORD *)(v152 + 128) = 0;
  *(_BYTE *)(v152 + 136) = 0;
  *(_QWORD *)(v152 + 16) = 0;
  *(_QWORD *)(v152 + 24) = 0;
  *(_QWORD *)(v152 + 40) = 0x4000000000000000;
  v156 = v176 >> 62;
  *(_QWORD *)(v152 + 32) = v151;
  if (v156)
  {
    swift_bridgeObjectRetain();
    v165 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v165 < 0)
    {
      __break(1u);
LABEL_360:
      swift_bridgeObjectRetain();
      MEMORY[0x1DF0E4D64](v20, v152);
      swift_bridgeObjectRelease();
      type metadata accessor for ReflowWord();
      v166 = swift_dynamicCastClass();
      if (v166)
      {
        v158 = v166;
        v4 = (unint64_t)v177;
        goto LABEL_272;
      }
      goto LABEL_364;
    }
  }
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v152);
  v152 = *v175;
  if ((*v175 & 0xC000000000000001) != 0)
    goto LABEL_360;
  if (v20 < 0)
  {
    __break(1u);
  }
  else if ((unint64_t)v20 < *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    type metadata accessor for ReflowWord();
    v157 = swift_dynamicCastClass();
    if (!v157)
      goto LABEL_273;
    v158 = v157;
    swift_retain();
LABEL_272:
    *(_BYTE *)(v158 + 136) = 0;
    swift_release();
LABEL_273:
    v64 = v20 + 1;
    if (!__OFADD__(v20, 1))
      goto LABEL_274;
    goto LABEL_366;
  }
  __break(1u);
LABEL_364:
  swift_unknownObjectRelease();
  v4 = (unint64_t)v177;
  v64 = v20 + 1;
  if (!__OFADD__(v20, 1))
    goto LABEL_274;
LABEL_366:
  __break(1u);
LABEL_367:
  swift_release();
  __break(1u);
LABEL_368:
  swift_release();
  __break(1u);
LABEL_369:
  __break(1u);
LABEL_370:
  __break(1u);
LABEL_371:
  __break(1u);
LABEL_372:
  __break(1u);
LABEL_373:
  LODWORD(v169) = 0;
  v168 = 1092;
  v167[0] = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall ReflowLayoutManager.layoutText(contents:lines:)(Swift::OpaquePointer contents, Swift::OpaquePointer lines)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double height;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  __int128 v14;
  _QWORD **v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double Width;
  double v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _QWORD *v45;
  uint64_t (*v46)();
  _QWORD *v47;
  char v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  double v61;
  BOOL v62;
  _QWORD *v63;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  double v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  double v94;
  double v95;
  CGFloat x;
  CGFloat y;
  _QWORD *v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  unint64_t rawValue;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  uint64_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  uint64_t v132;
  double v133;
  double v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  double v141;
  double v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _BYTE v183[64];
  _OWORD v184[10];
  _QWORD v185[5];
  _OWORD v186[2];
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  CGRect v195;
  CGRect v196;

  v11 = v2;
  v14 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v2 + 120) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v2 + 136) = v14;
  v15 = (_QWORD **)(v2 + 96);
  swift_beginAccess();
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v11 + 96) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v17 = *((_QWORD *)lines._rawValue + 2);
  if (!v17)
    goto LABEL_58;
  v18 = *((_OWORD *)lines._rawValue + 9);
  v191 = *((_OWORD *)lines._rawValue + 8);
  v192 = v18;
  v19 = *((_OWORD *)lines._rawValue + 11);
  v193 = *((_OWORD *)lines._rawValue + 10);
  v194 = v19;
  v20 = *((_OWORD *)lines._rawValue + 5);
  v187 = *((_OWORD *)lines._rawValue + 4);
  v188 = v20;
  v21 = *((_OWORD *)lines._rawValue + 7);
  v189 = *((_OWORD *)lines._rawValue + 6);
  v190 = v21;
  v22 = *((_OWORD *)lines._rawValue + 3);
  v186[0] = *((_OWORD *)lines._rawValue + 2);
  v186[1] = v22;
  v8 = *(double *)&v194;
  v3 = *((_QWORD *)&v186[0] + 1);
  *((_QWORD *)&v173 + 1) = *((_QWORD *)&v186[0] + 1);
  v9 = *((double *)&v22 + 1);
  v6 = *((double *)&v187 + 1);
  v4 = *(double *)&v187;
  v5 = *((double *)&v188 + 1);
  height = *(double *)&v188;
  v130 = *(double *)&v22;
  *(_QWORD *)&v174 = v22;
  v175 = v187;
  v176 = v188;
  v131 = *((double *)&v189 + 1);
  v128 = *(double *)&v189;
  v177 = v189;
  v138 = v190;
  v178 = v190;
  v10 = *(double *)&v191;
  v135 = *((_QWORD *)&v190 + 1);
  v136 = *((_QWORD *)&v192 + 1);
  v132 = *((_QWORD *)&v191 + 1);
  v179 = v191;
  v139 = v192;
  v180 = v192;
  v137 = *((_QWORD *)&v193 + 1);
  v129 = *(double *)&v193;
  v181 = v193;
  v182 = v194;
  outlined retain of ReflowTextLine((uint64_t)v186);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v173 = v16;
  Width = CGRectGetWidth(*(CGRect *)(v11 + 16));
  v119 = vabdd_f64(Width, CGRectGetWidth(*(CGRect *)(v11 + 48)));
  v24 = v9 - v119;
  v25 = 0.0;
  if (v9 - v119 < 0.0)
    v24 = 0.0;
  *((double *)&v174 + 1) = v24;
  v185[0] = lines._rawValue;
  v185[1] = lines._rawValue;
  v112 = (char *)lines._rawValue + 32;
  v185[2] = (char *)lines._rawValue + 32;
  v185[3] = 1;
  v185[4] = (2 * v17) | 1;
  swift_bridgeObjectRetain();
  v26 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay8PaperKit14ReflowTextLineVGs10ArraySliceVyAJGG_12CoreGraphics7CGFloatVs5NeverOTg503_s8f5Kit19h50LayoutManagerC10layoutText8contents5linesySayAA0C7b3CG_w6AA0cG4j6VGtF12m9Graphics7O14VAK_AKt_tXEfU_Tf1cn_n(v185);
  swift_bridgeObjectRelease();
  v116 = v17 - 1;
  v113 = v17;
  if (v17 != 1)
  {
    v27 = v26[2];
    if (v27)
    {
      if (v27 == 1)
      {
        v28 = 0;
      }
      else
      {
        v28 = v27 & 0x7FFFFFFFFFFFFFFELL;
        v29 = (double *)(v26 + 5);
        v30 = v27 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v25 = v25 + *(v29 - 1) + *v29;
          v29 += 2;
          v30 -= 2;
        }
        while (v30);
        if (v27 == v28)
          goto LABEL_14;
      }
      v31 = v27 - v28;
      v32 = (double *)&v26[v28 + 4];
      do
      {
        v33 = *v32++;
        v25 = v25 + v33;
        --v31;
      }
      while (v31);
    }
LABEL_14:
    swift_bridgeObjectRelease();
    v115 = v25 / (double)v116;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v115 = v8;
LABEL_15:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DDF35440;
  type metadata accessor for ReflowSpace();
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 144) = 1;
  *(_BYTE *)(v35 + 137) = 0;
  *(_OWORD *)(v35 + 48) = 0u;
  *(_OWORD *)(v35 + 64) = 0u;
  *(_QWORD *)(v35 + 80) = 0;
  v36 = outlined retain of ReflowTextLine((uint64_t)v186);
  v38 = UnknownCanvasElementView.flags.modify(v36, v37);
  *(_QWORD *)(v35 + 88) = 0;
  *(_QWORD *)(v35 + 96) = 0;
  *(double *)(v35 + 104) = v38;
  *(_QWORD *)(v35 + 112) = v39;
  *(_QWORD *)(v35 + 120) = -1;
  *(_QWORD *)(v35 + 128) = 0;
  *(_BYTE *)(v35 + 136) = 0;
  *(_QWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = 0x4000000000000000;
  *(_QWORD *)(v34 + 32) = v35;
  *(_QWORD *)&v184[0] = v34;
  specialized Array._endMutation()();
  v17 = v34;
  swift_bridgeObjectRelease();
  v117 = v11 + 160;
  swift_beginAccess();
  if (*(_QWORD *)(v11 + 160))
  {
    v141 = height;
    v40 = v6;
    v41 = v4;
    v42 = v5;
    v44 = *(double *)(v11 + 192);
    v43 = *(double *)(v11 + 200);
    v46 = ReflowLayoutManager.spacingAdjustment.modify();
    if (*v45)
    {
      v47 = v45;
      v45[6] = specialized ReflowLayoutManager.closestLine(to:lines:)((uint64_t)lines._rawValue, v44, v43);
      *((_BYTE *)v47 + 56) = v48 & 1;
    }
    ((void (*)(_OWORD *, _QWORD))v46)(v184, 0);
    v5 = v42;
    v4 = v41;
    v6 = v40;
    height = v141;
  }
  rawValue = (unint64_t)contents._rawValue;
  if ((unint64_t)contents._rawValue >> 62)
    goto LABEL_59;
  v49 = *(_QWORD *)(((unint64_t)contents._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v133 = v6 - v115;
    v134 = v4 + 0.0;
    v50 = height + 0.0;
    v5 = v5 - v115;
    if (!v49)
      break;
    v51 = 0;
    v52 = 0;
    v53 = -1;
    v4 = v128;
    v111 = v49;
    if ((rawValue & 0xC000000000000001) != 0)
    {
LABEL_23:
      v120 = MEMORY[0x1DF0E4D64](v52, rawValue);
      v54 = __OFADD__(v52, 1);
      v55 = v52 + 1;
      if (!v54)
        goto LABEL_28;
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    while (v52 < *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v120 = *(_QWORD *)(rawValue + 32 + 8 * v52);
      swift_retain();
      v54 = __OFADD__(v52, 1);
      v55 = v52 + 1;
      if (v54)
        goto LABEL_55;
LABEL_28:
      v114 = v55;
      v140 = v5;
      v142 = v50;
LABEL_29:
      v118 = v51;
      while (1)
      {
        v56 = *(_QWORD *)(v11 + 112);
        outlined init with take of (key: Int, value: AnyCRValue)?(v117, (uint64_t)v183, &demangling cache variable for type metadata for ReflowSpacingAdjustment?);
        v57 = *(double *)(v11 + 16);
        v58 = *(double *)(v11 + 24);
        v59 = *(double *)(v11 + 32);
        v60 = *(double *)(v11 + 40);
        outlined retain of ReflowSpacingAdjustment?((uint64_t)v183);
        v195.origin.x = v57;
        v195.origin.y = v58;
        v195.size.width = v59;
        v195.size.height = v60;
        v61 = CGRectGetWidth(v195);
        *(_QWORD *)&v163 = v17;
        *((_QWORD *)&v163 + 1) = v3;
        *(double *)&v164 = v130;
        *((double *)&v164 + 1) = v9;
        *(double *)&v165 = v134;
        *((double *)&v165 + 1) = v133;
        *(double *)&v166 = v142;
        *((double *)&v166 + 1) = v140;
        *(double *)&v167 = v4;
        *((double *)&v167 + 1) = v131;
        *(_QWORD *)&v168 = v138;
        *((_QWORD *)&v168 + 1) = v135;
        *(double *)&v169 = v10;
        *((_QWORD *)&v169 + 1) = v132;
        *(_QWORD *)&v170 = v139;
        *((_QWORD *)&v170 + 1) = v136;
        *(double *)&v171 = v129;
        *((_QWORD *)&v171 + 1) = v137;
        *(double *)&v172 = v8;
        *((_QWORD *)&v172 + 1) = v53;
        v184[7] = v170;
        v184[6] = v169;
        v184[1] = v164;
        v184[0] = v163;
        v184[5] = v168;
        v184[4] = v167;
        v184[3] = v166;
        v184[2] = v165;
        v184[8] = v171;
        v184[9] = v172;
        outlined retain of ReflowTextLine((uint64_t)&v163);
        v62 = ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)((_OWORD *)v120, v56, (uint64_t)v183, (uint64_t)v184, v61, v119);
        outlined release of ReflowTextLine((uint64_t)&v163);
        outlined release of ReflowSpacingAdjustment?((uint64_t)v183);
        if (v62)
          break;
        v159 = v179;
        v160 = v180;
        v161 = v181;
        v162 = v182;
        v155 = v175;
        v156 = v176;
        v157 = v177;
        v158 = v178;
        v153 = v173;
        v154 = v174;
        outlined retain of ReflowTextLine((uint64_t)&v153);
        outlined release of ReflowTextLine((uint64_t)&v163);
        swift_beginAccess();
        v63 = *v15;
        outlined retain of ReflowTextLine((uint64_t)&v153);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v15 = v63;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
          *v15 = v63;
        }
        v66 = v63[2];
        v65 = v63[3];
        if (v66 >= v65 >> 1)
        {
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v65 > 1), v66 + 1, 1, v63);
          *v15 = v63;
        }
        v53 = *((_QWORD *)&v162 + 1);
        v133 = *((double *)&v155 + 1);
        v134 = *(double *)&v155;
        v4 = *(double *)&v157;
        v140 = *((double *)&v156 + 1);
        v142 = *(double *)&v156;
        v8 = *(double *)&v162;
        height = *(double *)&v161;
        v67 = *((_QWORD *)&v159 + 1);
        v10 = *(double *)&v159;
        v136 = *((_QWORD *)&v160 + 1);
        v137 = *((_QWORD *)&v161 + 1);
        v5 = *((double *)&v157 + 1);
        v138 = v158;
        v139 = v160;
        v135 = *((_QWORD *)&v158 + 1);
        v9 = *((double *)&v154 + 1);
        v6 = *(double *)&v154;
        v3 = *((_QWORD *)&v153 + 1);
        v17 = v153;
        v63[2] = v66 + 1;
        v68 = &v63[20 * v66];
        v69 = v154;
        v68[2] = v153;
        v68[3] = v69;
        v70 = v155;
        v71 = v156;
        v72 = v158;
        v68[6] = v157;
        v68[7] = v72;
        v68[4] = v70;
        v68[5] = v71;
        v73 = v159;
        v74 = v160;
        v75 = v162;
        v68[10] = v161;
        v68[11] = v75;
        v68[8] = v73;
        v68[9] = v74;
        v76 = *v15;
        swift_endAccess();
        v51 = v118;
        v131 = v5;
        v132 = v67;
        v129 = height;
        v130 = v6;
        if (v118 < v116)
        {
          v51 = v118 + 1;
          if (v118 + 1 >= v113)
            goto LABEL_56;
          v88 = &v112[160 * v51];
          v89 = *((_OWORD *)v88 + 7);
          v149 = *((_OWORD *)v88 + 6);
          v150 = v89;
          v90 = *((_OWORD *)v88 + 9);
          v151 = *((_OWORD *)v88 + 8);
          v152 = v90;
          v91 = *((_OWORD *)v88 + 3);
          v145 = *((_OWORD *)v88 + 2);
          v146 = v91;
          v92 = *((_OWORD *)v88 + 5);
          v147 = *((_OWORD *)v88 + 4);
          v148 = v92;
          v93 = *((_OWORD *)v88 + 1);
          v143 = *(_OWORD *)v88;
          v144 = v93;
          outlined retain of ReflowTextLine((uint64_t)&v143);
          outlined release of ReflowTextLine((uint64_t)&v153);
          v94 = *((double *)&v144 + 1);
          swift_bridgeObjectRelease();
          v175 = v145;
          v176 = v146;
          v177 = v147;
          v178 = v148;
          v179 = v149;
          v180 = v150;
          v181 = v151;
          v182 = v152;
          v95 = v94 - v119;
          if (v94 - v119 < 0.0)
            v95 = 0.0;
          *(_QWORD *)&v174 = v144;
          *((double *)&v174 + 1) = v95;
          *((_QWORD *)&v173 + 1) = *((_QWORD *)&v143 + 1);
          *(_QWORD *)&v173 = MEMORY[0x1E0DEE9D8];
          goto LABEL_29;
        }
        v77 = v76[2];
        if (!v77)
        {
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        v128 = v4;
        v121 = v10;
        v122 = v9;
        v123 = v8;
        v78 = (__int128 *)&v76[20 * v77];
        v79 = *(v78 - 7);
        v143 = *(v78 - 8);
        v144 = v79;
        v80 = *(v78 - 6);
        v81 = *(v78 - 5);
        v82 = *(v78 - 3);
        v147 = *(v78 - 4);
        v148 = v82;
        v145 = v80;
        v146 = v81;
        v83 = *(v78 - 2);
        v84 = *(v78 - 1);
        v85 = v78[1];
        v151 = *v78;
        v152 = v85;
        v149 = v83;
        v150 = v84;
        v86 = *((_QWORD *)&v85 + 1);
        v10 = *((double *)&v148 + 1);
        v124 = *((double *)&v83 + 1);
        v125 = *(double *)&v83;
        v126 = *((double *)&v84 + 1);
        v127 = *(double *)&v84;
        v9 = *((double *)&v147 + 1);
        v8 = *(double *)&v147;
        v4 = *(double *)&v148;
        height = *((double *)&v145 + 1);
        v6 = *(double *)&v145;
        v5 = *((double *)&v146 + 1);
        v87 = *(double *)&v146;
        outlined retain of ReflowTextLine((uint64_t)&v143);
        outlined release of ReflowTextLine((uint64_t)&v153);
        outlined release of ReflowTextLine((uint64_t)&v143);
        v173 = MEMORY[0x1E0DEE9D8];
        v181 = 0uLL;
        *(double *)&v175 = v6 + 0.0;
        *((double *)&v175 + 1) = v115 + height;
        *(double *)&v176 = v87 + 0.0;
        *((double *)&v176 + 1) = v115 + v5;
        *(double *)&v177 = v8 + 0.0;
        *((double *)&v177 + 1) = v115 + v9;
        *(double *)&v178 = v4 + 0.0;
        *((double *)&v178 + 1) = v115 + v10;
        *(double *)&v179 = v125 + 0.0;
        *((double *)&v179 + 1) = v115 + v124;
        *(double *)&v180 = v127 + 0.0;
        *((double *)&v180 + 1) = v115 + v126;
        v174 = 0uLL;
        *(double *)&v182 = v115;
        if (__OFADD__(v86, 1))
          goto LABEL_54;
        *((_QWORD *)&v182 + 1) = v86 + 1;
        v9 = v122;
        v8 = v123;
        v10 = v121;
        v4 = v128;
      }
      v196 = CGRectUnion(*(CGRect *)(v11 + 120), *(CGRect *)(v120 + 48));
      x = v196.origin.x;
      y = v196.origin.y;
      v6 = v196.size.width;
      height = v196.size.height;
      swift_release();
      *(CGFloat *)(v11 + 120) = x;
      *(CGFloat *)(v11 + 128) = y;
      *(double *)(v11 + 136) = v6;
      *(double *)(v11 + 144) = height;
      v52 = v114;
      if (v114 == v111)
      {
        swift_bridgeObjectRelease();
        goto LABEL_48;
      }
      v5 = v140;
      v50 = v142;
      if ((rawValue & 0xC000000000000001) != 0)
        goto LABEL_23;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
  }
  v140 = v5;
  v142 = height + 0.0;
  swift_bridgeObjectRelease();
  v53 = -1;
  v4 = v128;
LABEL_48:
  v169 = v179;
  v170 = v180;
  v171 = v181;
  v172 = v182;
  v165 = v175;
  v166 = v176;
  v167 = v177;
  v168 = v178;
  v163 = v173;
  v164 = v174;
  swift_beginAccess();
  v98 = *v15;
  outlined retain of ReflowTextLine((uint64_t)&v163);
  v99 = swift_isUniquelyReferenced_nonNull_native();
  *v15 = v98;
  if ((v99 & 1) == 0)
  {
    v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
    *v15 = v98;
  }
  v101 = v98[2];
  v100 = v98[3];
  if (v101 >= v100 >> 1)
  {
    v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), v101 + 1, 1, v98);
    *v15 = v98;
  }
  v98[2] = v101 + 1;
  v102 = &v98[20 * v101];
  v103 = v164;
  v102[2] = v163;
  v102[3] = v103;
  v104 = v165;
  v105 = v166;
  v106 = v168;
  v102[6] = v167;
  v102[7] = v106;
  v102[4] = v104;
  v102[5] = v105;
  v107 = v169;
  v108 = v170;
  v109 = v172;
  v102[10] = v171;
  v102[11] = v109;
  v102[8] = v107;
  v102[9] = v108;
  swift_endAccess();
  *(_QWORD *)&v153 = v17;
  *((_QWORD *)&v153 + 1) = v3;
  *(double *)&v154 = v130;
  *((double *)&v154 + 1) = v9;
  *(double *)&v155 = v134;
  *((double *)&v155 + 1) = v133;
  *(double *)&v156 = v142;
  *((double *)&v156 + 1) = v140;
  *(double *)&v157 = v4;
  *((double *)&v157 + 1) = v131;
  *(_QWORD *)&v158 = v138;
  *((_QWORD *)&v158 + 1) = v135;
  *(double *)&v159 = v10;
  *((_QWORD *)&v159 + 1) = v132;
  *(_QWORD *)&v160 = v139;
  *((_QWORD *)&v160 + 1) = v136;
  *(double *)&v161 = v129;
  *((_QWORD *)&v161 + 1) = v137;
  *(double *)&v162 = v8;
  *((_QWORD *)&v162 + 1) = v53;
  outlined release of ReflowTextLine((uint64_t)&v153);
  outlined release of ReflowTextLine((uint64_t)&v163);
}

Swift::Void __swiftcall ReflowLayoutManager.scaleTextToFit()()
{
  uint64_t v0;
  BOOL v1;
  Swift::OpaquePointer v3;
  Swift::OpaquePointer v4;
  double MaxY;
  double Height;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::OpaquePointer v12;
  Swift::OpaquePointer v13;
  uint64_t v14;
  uint64_t v15;
  Swift::OpaquePointer v16;
  Swift::OpaquePointer v17;
  double v18;

  if ((~*(_QWORD *)(v0 + 16) & 0x7FF0000000000000) != 0)
  {
    v1 = (~*(_QWORD *)(v0 + 24) & 0x7FF0000000000000) == 0
      || (*(_QWORD *)(v0 + 32) & 0x7FF0000000000000) == 0x7FF0000000000000;
    if (!v1 && (*(_QWORD *)(v0 + 40) & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      swift_beginAccess();
      v3._rawValue = *(void **)(v0 + 80);
      swift_beginAccess();
      v4._rawValue = *(void **)(v0 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ReflowLayoutManager.layoutText(contents:lines:)(v3, v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v0 + 218) == 1)
      {
        swift_beginAccess();
        if (!*(_QWORD *)(v0 + 160))
        {
          MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
          Height = CGRectGetHeight(*(CGRect *)(v0 + 16));
          if (one-time initialization token for handwritingReflowVerticalOverflow != -1)
          {
LABEL_38:
            v18 = Height;
            swift_once();
            Height = v18;
          }
          v7 = *(double *)&static UIConstants.handwritingReflowVerticalOverflow;
          if (Height + *(double *)&static UIConstants.handwritingReflowVerticalOverflow >= MaxY)
            v8 = *(_QWORD *)(v0 + 112);
          else
            v8 = 10;
          MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
          Height = v7 + CGRectGetHeight(*(CGRect *)(v0 + 16));
          v9 = *(_QWORD *)(v0 + 112);
          if (Height >= MaxY)
            v10 = 1000;
          else
            v10 = *(_QWORD *)(v0 + 112);
          while (1)
          {
            if (__OFADD__(v8, v10))
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            Height = round((double)(v8 + v10) * 0.5 / 5.0);
            if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
              goto LABEL_34;
            if (Height <= -9.22337204e18)
              goto LABEL_35;
            if (Height >= 9.22337204e18)
              goto LABEL_36;
            v11 = 5 * (uint64_t)Height;
            if ((unsigned __int128)((uint64_t)Height * (__int128)5) >> 64 != v11 >> 63)
              goto LABEL_37;
            *(_QWORD *)(v0 + 112) = v11;
            v12._rawValue = *(void **)(v0 + 80);
            v13._rawValue = *(void **)(v0 + 88);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            ReflowLayoutManager.layoutText(contents:lines:)(v12, v13);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v14 = *(_QWORD *)(v0 + 112);
            MaxY = CGRectGetMaxY(*(CGRect *)(v0 + 120));
            Height = CGRectGetHeight(*(CGRect *)(v0 + 16))
                   + *(double *)&static UIConstants.handwritingReflowVerticalOverflow;
            if (v9 == v14)
              break;
            v9 = *(_QWORD *)(v0 + 112);
            if (Height < MaxY)
              v10 = *(_QWORD *)(v0 + 112);
            else
              v8 = *(_QWORD *)(v0 + 112);
            if (v8 >= v10)
              return;
          }
          if (Height < MaxY)
          {
            v15 = *(_QWORD *)(v0 + 112);
            if (v15 >= 11)
            {
              *(_QWORD *)(v0 + 112) = v15 - 5;
              v16._rawValue = *(void **)(v0 + 80);
              v17._rawValue = *(void **)(v0 + 88);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              ReflowLayoutManager.layoutText(contents:lines:)(v16, v17);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
  }
}

uint64_t ReflowLayoutManager.strokeTransforms()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGFloat v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  double v40;
  double v41;
  char *v42;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v47;
  double v48;
  double MinX;
  double v50;
  double MinY;
  CGFloat v52;
  CGFloat tx;
  CGFloat ty;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CGFloat v58;
  CGFloat v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CGFloat v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  CGFloat v77;
  CGFloat v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  CGFloat *v92;
  void (*v93)(unint64_t, uint64_t, uint64_t);
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  double *v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  char *v105;
  CGFloat *v106;
  uint64_t v107;
  CGFloat a;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  CGFloat v112;
  CGFloat v113;
  char v114;
  uint64_t v115;
  _BOOL8 v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  CGFloat *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t result;
  uint64_t v125;
  double v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  double v132;
  double v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  char *v156;
  uint64_t v157;
  CGAffineTransform v158;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v1, v2);
  isUniquelyReferenced_nonNull_native = (uint64_t)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v157 = (uint64_t)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (unint64_t)&v125 - v11;
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform));
  MEMORY[0x1E0C80A78](v149, v13);
  v148 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v141 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142, v15);
  v140 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v17);
  v137 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>);
  MEMORY[0x1E0C80A78](v136, v19);
  v135 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>.Iterator);
  MEMORY[0x1E0C80A78](v134, v21);
  v156 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = *(double *)(v0 + 16);
  v132 = *(double *)(v0 + 24);
  v23 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]));
  swift_beginAccess();
  v143 = v0;
  v24 = *(_QWORD *)(v0 + 80);
  if (v24 >> 62)
    goto LABEL_49;
  v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v25)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    return *(_QWORD *)&v23;
  }
  while (1)
  {
    v144 = v24 & 0xC000000000000001;
    v129 = v143 + 96;
    swift_beginAccess();
    v26 = 0;
    v128 = v24 & 0xFFFFFFFFFFFFFF8;
    v127 = (_QWORD *)(v24 + 32);
    v126 = 0.02;
    v154 = v6;
    v131 = (_QWORD *)v24;
    v130 = v25;
    while (1)
    {
      if (v144)
      {
        v6 = MEMORY[0x1DF0E4D64](v26, v24);
        v28 = __OFADD__(v26++, 1);
        if (v28)
          goto LABEL_44;
      }
      else
      {
        if (v26 >= *(_QWORD *)(v128 + 16))
          goto LABEL_48;
        v6 = v127[v26];
        swift_retain();
        v28 = __OFADD__(v26++, 1);
        if (v28)
          goto LABEL_44;
      }
      type metadata accessor for ReflowWord();
      v29 = swift_dynamicCastClass();
      if (v29)
        break;
LABEL_7:
      swift_release();
      if (v26 == v25)
        goto LABEL_50;
    }
    v30 = v29;
    v31 = round(*(double *)(v29 + 80));
    if ((~*(_QWORD *)&v31 & 0x7FF0000000000000) == 0)
      goto LABEL_45;
    if (v31 <= -9.22337204e18)
      goto LABEL_46;
    if (v31 < 9.22337204e18)
      break;
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRetain_n();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v25)
      goto LABEL_50;
  }
  v32 = (uint64_t)v31;
  v147 = v26;
  v146 = v6;
  if ((uint64_t)v31 < 0 || *(_QWORD *)(*(_QWORD *)v129 + 16) <= v32)
  {
    swift_retain();
    v41 = 0.0;
  }
  else
  {
    v33 = (double *)(*(_QWORD *)v129 + 160 * v32);
    v34 = v33[10] - v33[8];
    v35 = v33[11] - v33[9];
    v36 = sqrt(v34 * v34 + v35 * v35);
    v37 = atan2(v35 / v36, v34 / v36);
    swift_retain();
    v38 = ReflowWord.baselineDelta.getter();
    v40 = atan2(v39, v38);
    if ((*(_BYTE *)(v30 + 296) & (vabdd_f64(v37, v40) > v126)) != 0)
      v41 = v37 - v40;
    else
      v41 = 0.0;
  }
  v42 = (char *)*(id *)(v30 + 272);
  objc_msgSend(v42, sel__canvasBounds);
  x = v161.origin.x;
  y = v161.origin.y;
  width = v161.size.width;
  height = v161.size.height;
  v47 = *(double *)(v30 + 176);
  v48 = *(double *)(v30 + 184);
  MinX = CGRectGetMinX(v161);
  v162.origin.x = x;
  v162.origin.y = y;
  v162.size.width = width;
  v162.size.height = height;
  v50 = MinX + v47 * CGRectGetWidth(v162);
  v163.origin.x = x;
  v163.origin.y = y;
  v163.size.width = width;
  v163.size.height = height;
  MinY = CGRectGetMinY(v163);
  v164.origin.x = x;
  v164.origin.y = y;
  v164.size.width = width;
  v164.size.height = height;
  v52 = CGRectGetHeight(v164);
  CGAffineTransformMakeTranslation(&t1, -v50, -(MinY + v48 * v52));
  v155 = *(_OWORD *)&t1.a;
  v153 = *(_OWORD *)&t1.c;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeRotation(&t1, v41);
  v55 = *(_OWORD *)&t1.a;
  v56 = *(_OWORD *)&t1.c;
  v57 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v155;
  *(_OWORD *)&t1.c = v153;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v55;
  *(_OWORD *)&t2.c = v56;
  *(_OWORD *)&t2.tx = v57;
  CGAffineTransformConcat(&v158, &t1, &t2);
  v155 = *(_OWORD *)&v158.a;
  v153 = *(_OWORD *)&v158.c;
  v58 = v158.tx;
  v59 = v158.ty;
  CGAffineTransformMakeScale(&t1, (double)*(uint64_t *)(v143 + 112) / 100.0, (double)*(uint64_t *)(v143 + 112) / 100.0);
  v60 = *(_OWORD *)&t1.a;
  v61 = *(_OWORD *)&t1.c;
  v62 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v155;
  *(_OWORD *)&t1.c = v153;
  t1.tx = v58;
  t1.ty = v59;
  *(_OWORD *)&t2.a = v60;
  *(_OWORD *)&t2.c = v61;
  *(_OWORD *)&t2.tx = v62;
  CGAffineTransformConcat(&v158, &t1, &t2);
  v155 = *(_OWORD *)&v158.a;
  v153 = *(_OWORD *)&v158.c;
  b = v158.tx;
  v63 = v158.ty;
  v64 = *(double *)(v30 + 48);
  v65 = *(double *)(v30 + 56);
  v66 = *(double *)(v30 + 64);
  v67 = *(double *)(v30 + 72);
  v69 = *(double *)(v30 + 176);
  v68 = *(double *)(v30 + 184);
  v165.origin.x = v64;
  v165.origin.y = v65;
  v165.size.width = v66;
  v165.size.height = v67;
  v70 = CGRectGetMinX(v165);
  v166.origin.x = v64;
  v166.origin.y = v65;
  v166.size.width = v66;
  v166.size.height = v67;
  v71 = v70 + v69 * CGRectGetWidth(v166);
  v167.origin.x = v64;
  v167.origin.y = v65;
  v167.size.width = v66;
  v167.size.height = v67;
  v72 = CGRectGetMinY(v167);
  v168.origin.x = v64;
  v168.origin.y = v65;
  v168.size.width = v66;
  v168.size.height = v67;
  v73 = CGRectGetHeight(v168);
  CGAffineTransformMakeTranslation(&t1, v133 + v71, v132 + v72 + v68 * v73);
  v74 = *(_OWORD *)&t1.a;
  v75 = *(_OWORD *)&t1.c;
  v76 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v155;
  *(_OWORD *)&t1.c = v153;
  t1.tx = b;
  t1.ty = v63;
  *(_OWORD *)&t2.a = v74;
  *(_OWORD *)&t2.c = v75;
  *(_OWORD *)&t2.tx = v76;
  CGAffineTransformConcat(&v158, &t1, &t2);
  *(CGFloat *)&v153 = v158.a;
  b = v158.b;
  c = v158.c;
  d = v158.d;
  v77 = v158.tx;
  v78 = v158.ty;
  v145 = v42;
  v79 = &v42[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v80 = v138;
  v81 = *(void (**)(char *, char *, uint64_t))(v138 + 16);
  *(_QWORD *)&v155 = v30;
  v82 = v137;
  v83 = v139;
  v81(v137, v79, v139);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v84 = v140;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v83);
  v85 = *(_QWORD *)(v155 + 280);
  v86 = v141;
  v87 = v135;
  v88 = v142;
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v135, v84, v142);
  v6 = *(int *)(v136 + 52);
  *(_QWORD *)&v87[v6] = v85;
  swift_bridgeObjectRetain();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v84, v88);
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v84, v87, v88);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  v89 = v156;
  dispatch thunk of Sequence.makeIterator()();
  v90 = v134;
  v24 = (unint64_t)&v89[*(int *)(v134 + 52)];
  *(_QWORD *)v24 = *(_QWORD *)&v87[v6];
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)&v155 = *(int *)(v90 + 56);
  v89[v155] = 0;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
  v91 = v154;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(isUniquelyReferenced_nonNull_native, 1, v5) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(isUniquelyReferenced_nonNull_native, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
LABEL_5:
      v27 = (uint64_t)v156;
      v156[v155] = 1;
LABEL_6:
      outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, [CGAffineTransform]>.Iterator);

      v6 = v146;
      swift_release();
      v24 = (unint64_t)v131;
      v25 = v130;
      v26 = v147;
      goto LABEL_7;
    }
    v93 = *(void (**)(unint64_t, uint64_t, uint64_t))(v91 + 32);
    v93(v12, isUniquelyReferenced_nonNull_native, v5);
    v94 = *(_QWORD *)(v24 + 8);
    v95 = *(_QWORD *)(*(_QWORD *)v24 + 16);
    if (v94 == v95)
    {
      (*(void (**)(unint64_t, uint64_t))(v91 + 8))(v12, v5);
      goto LABEL_5;
    }
    if (v94 >= v95)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v96 = isUniquelyReferenced_nonNull_native;
    v97 = v94 + 1;
    v98 = (double *)(*(_QWORD *)v24 + 48 * v94);
    v100 = v98[8];
    v99 = v98[9];
    v102 = v98[6];
    v101 = v98[7];
    v104 = v98[4];
    v103 = v98[5];
    *(_QWORD *)(v24 + 8) = v97;
    v105 = v148;
    v106 = (CGFloat *)&v148[*(int *)(v149 + 48)];
    v6 = v12;
    v93((unint64_t)v148, v12, v5);
    *v106 = v104;
    v106[1] = v103;
    v106[2] = v102;
    v106[3] = v101;
    v106[4] = v100;
    v106[5] = v99;
    v107 = v157;
    v93(v157, (uint64_t)v105, v5);
    t1.a = v104;
    t1.b = v103;
    t1.c = v102;
    t1.d = v101;
    t1.tx = v100;
    t1.ty = v99;
    *(_QWORD *)&t2.a = v153;
    t2.b = b;
    t2.c = c;
    t2.d = d;
    t2.tx = v77;
    t2.ty = v78;
    CGAffineTransformConcat(&v158, &t1, &t2);
    a = v158.a;
    v109 = v158.b;
    v110 = v158.c;
    v111 = v158.d;
    v112 = v158.tx;
    v113 = v158.ty;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    t1.a = v23;
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(v107);
    v115 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
    v116 = (v114 & 1) == 0;
    v117 = v115 + v116;
    if (__OFADD__(v115, v116))
      goto LABEL_42;
    v118 = v114;
    if (*(_QWORD *)(*(_QWORD *)&v23 + 24) < v117)
      break;
    v27 = (uint64_t)v156;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_34;
    }
LABEL_36:
    v23 = t1.a;
    if ((v118 & 1) != 0)
    {
      v92 = (CGFloat *)(*(_QWORD *)(*(_QWORD *)&t1.a + 56) + 48 * v12);
      *v92 = a;
      v92[1] = v109;
      v92[2] = v110;
      v92[3] = v111;
      v92[4] = v112;
      v92[5] = v113;
      v91 = v154;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&t1.a + 8 * (v12 >> 6) + 64) |= 1 << v12;
      v91 = v154;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v154 + 16))(*(_QWORD *)(*(_QWORD *)&v23 + 48) + *(_QWORD *)(v154 + 72) * v12, v157, v5);
      v121 = (CGFloat *)(*(_QWORD *)(*(_QWORD *)&v23 + 56) + 48 * v12);
      *v121 = a;
      v121[1] = v109;
      v121[2] = v110;
      v121[3] = v111;
      v121[4] = v112;
      v121[5] = v113;
      v122 = *(_QWORD *)(*(_QWORD *)&v23 + 16);
      v28 = __OFADD__(v122, 1);
      v123 = v122 + 1;
      if (v28)
        goto LABEL_43;
      *(_QWORD *)(*(_QWORD *)&v23 + 16) = v123;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v157, v5);
    isUniquelyReferenced_nonNull_native = v96;
    v12 = v6;
    if ((*(_BYTE *)(v27 + v155) & 1) != 0)
      goto LABEL_6;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, isUniquelyReferenced_nonNull_native);
  v119 = specialized __RawDictionaryStorage.find<A>(_:)(v157);
  if ((v118 & 1) == (v120 & 1))
  {
    v12 = v119;
LABEL_34:
    v27 = (uint64_t)v156;
    goto LABEL_36;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int ReflowLayoutManager.reflowWords(for:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Swift::Int result;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  Swift::Int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;

  v74 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v71 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v70, v7);
  v69 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v67 = *(_QWORD *)(v9 - 8);
  v68 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v66 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12, v13);
  v65 = (char *)&v59 - v14;
  v61 = type metadata accessor for IndexSet();
  v15 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  IndexSet.init()();
  v59 = (uint64_t *)(v1 + 80);
  swift_beginAccess();
  v19 = *(_QWORD *)(v1 + 80);
  v60 = v15;
  v62 = v18;
  if ((unint64_t)v19 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    if (!v20)
      goto LABEL_14;
  }
  else
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v20)
      goto LABEL_14;
  }
  if (v20 < 1)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((uint64_t)v15 < v42)
      goto LABEL_20;
    while (1)
    {
LABEL_29:
      result = IndexSet.first.getter();
      if ((v46 & 1) != 0)
        goto LABEL_82;
      v19 = result;
      result = IndexSet.last.getter();
      if ((v47 & 1) != 0)
        goto LABEL_83;
      if (result < v19)
        break;
      v15 = result + 1;
      if (__OFADD__(result, 1))
        goto LABEL_65;
      v3 = *v2;
      v2 = (Swift::Int *)((unint64_t)*v2 >> 62);
      if (!v2)
      {
        v48 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (v48 < v19)
          goto LABEL_67;
        goto LABEL_35;
      }
LABEL_66:
      swift_bridgeObjectRetain_n();
      v57 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v57 < v19)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
LABEL_35:
      if (v19 < 0)
        goto LABEL_68;
      if (v2)
      {
        swift_bridgeObjectRetain();
        v49 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
      }
      else
      {
        v49 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v49 < (uint64_t)v15)
        goto LABEL_69;
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_70;
      if ((v3 & 0xC000000000000001) == 0)
        goto LABEL_47;
      if (v15 >= v19)
      {
        if (v19 != v15)
        {
          if (v19 >= v15)
            goto LABEL_80;
          type metadata accessor for ReflowElement();
          v50 = v19;
          do
          {
            v51 = v50 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v50);
            v50 = v51;
          }
          while (v15 != v51);
        }
LABEL_47:
        if (v2)
        {
          swift_bridgeObjectRetain();
          v42 = _CocoaArrayWrapper.subscript.getter();
          v2 = v52;
          v19 = v53;
          v15 = v54;
          swift_bridgeObjectRelease_n();
          if ((v15 & 1) == 0)
            goto LABEL_51;
        }
        else
        {
          v42 = v3 & 0xFFFFFFFFFFFFFF8;
          v2 = (Swift::Int *)((v3 & 0xFFFFFFFFFFFFFF8) + 32);
          v15 = (2 * v15) | 1;
          if ((v15 & 1) == 0)
            goto LABEL_51;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        v55 = swift_dynamicCastClass();
        if (!v55)
        {
          swift_unknownObjectRelease();
          v55 = MEMORY[0x1E0DEE9D8];
        }
        v56 = *(_QWORD *)(v55 + 16);
        swift_release();
        if (__OFSUB__(v15 >> 1, v19))
          goto LABEL_77;
        if (v56 != (v15 >> 1) - v19)
          goto LABEL_78;
        v37 = swift_dynamicCastClass();
        swift_unknownObjectRelease();
        v38 = v61;
        v39 = v60;
        if (!v37)
        {
          v37 = MEMORY[0x1E0DEE9D8];
          goto LABEL_58;
        }
        goto LABEL_59;
      }
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
      v15 = MEMORY[0x1DF0E4D64](v15, v19);
      swift_bridgeObjectRelease();
      type metadata accessor for ReflowSpace();
      v58 = swift_dynamicCastClass();
      swift_unknownObjectRelease();
      if (v58)
        goto LABEL_26;
    }
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v3 = 0;
  v75 = v19 & 0xC000000000000001;
  v64 = v19;
  v63 = v20;
  v21 = v68;
  do
  {
    if (v75)
    {
      v22 = MEMORY[0x1DF0E4D64](v3, v19);
    }
    else
    {
      v22 = *(_QWORD *)(v19 + 8 * v3 + 32);
      swift_retain();
    }
    type metadata accessor for ReflowWord();
    v23 = swift_dynamicCastClass();
    if (v23)
    {
      v24 = v23;
      v77 = v22;
      v25 = *(_QWORD *)(v23 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      v26 = v67;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
      v28 = v65;
      v27(v65, v25, v21);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v29 = (uint64_t)v69;
      Capsule<>.root.getter();
      v76 = *(void (**)(char *, uint64_t))(v26 + 8);
      v76(v28, v21);
      v30 = *(_QWORD *)(v24 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
      swift_beginAccess();
      v31 = v66;
      v27((char *)v66, v30, v21);
      v32 = v71;
      v33 = v72;
      v34 = v73;
      v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v29 + *(int *)(v70 + 20), v73);
      MEMORY[0x1E0C80A78](v35, v36);
      *(&v59 - 2) = v74;
      *(&v59 - 1) = v31;
      LOBYTE(v26) = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:), (uint64_t)(&v59 - 4));
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
      v76((char *)v31, v21);
      outlined destroy of PKDrawingStruct(v29);
      if ((v26 & 1) != 0)
        IndexSet.insert(_:)(v3);
      v19 = v64;
      v20 = v63;
    }
    ++v3;
    swift_release();
  }
  while (v20 != v3);
LABEL_14:
  swift_bridgeObjectRelease();
  v20 = (uint64_t)v62;
  if ((IndexSet.isEmpty.getter() & 1) != 0)
  {
    v37 = MEMORY[0x1E0DEE9D8];
    v38 = v61;
    v39 = v60;
LABEL_59:
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v20, v38);
    return v37;
  }
  result = IndexSet.last.getter();
  if ((v41 & 1) != 0)
  {
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v15 = result + 1;
  v2 = v59;
  if (__OFADD__(result, 1))
    goto LABEL_61;
  v19 = *v59;
  if ((unint64_t)*v59 >> 62)
    goto LABEL_62;
  v42 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  if ((uint64_t)v15 >= v42)
    goto LABEL_29;
LABEL_20:
  result = IndexSet.last.getter();
  if ((v43 & 1) == 0)
  {
    v15 = result + 1;
    if (__OFADD__(result, 1))
      goto LABEL_72;
    v19 = *v2;
    if ((*v2 & 0xC000000000000001) != 0)
      goto LABEL_73;
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v15 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      type metadata accessor for ReflowSpace();
      if (!swift_dynamicCastClass())
        goto LABEL_29;
LABEL_26:
      result = IndexSet.last.getter();
      if ((v44 & 1) != 0)
        goto LABEL_85;
      if (!__OFADD__(result++, 1))
      {
        IndexSet.insert(_:)(result);
        goto LABEL_29;
      }
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_unknownObjectRelease();
LABEL_51:
    v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v42, (uint64_t)v2, v19, v15);
    v38 = v61;
    v39 = v60;
LABEL_58:
    swift_unknownObjectRelease();
    goto LABEL_59;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

id ReflowLayoutManager.TextPosition.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowLayoutManager.TextPosition();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ReflowLayoutManager.closestPosition(to:)(double a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double *v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  objc_class *v45;
  _BYTE *v46;
  objc_super v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CGRect v58;

  v7 = (unint64_t *)(v2 + 96);
  swift_beginAccess();
  v8 = swift_bridgeObjectRetain();
  v9 = specialized ReflowLayoutManager.closestLine(to:lines:)(v8, a1, a2);
  v11 = v10;
  swift_bridgeObjectRelease();
  result = 0;
  if ((v11 & 1) != 0)
    return result;
  if (v9 < 0)
    goto LABEL_42;
  v13 = *v7;
  v14 = *(_QWORD *)(*v7 + 16);
  if (v14 < (unint64_t)v9)
    goto LABEL_43;
  if (!v9)
  {
    v4 = 0;
    if (v14 > 0)
      goto LABEL_14;
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  v4 = 0;
  v15 = v9 - 1;
  for (i = 32; ; i += 160)
  {
    v17 = *(_OWORD *)(v13 + i + 16);
    v48 = *(_OWORD *)(v13 + i);
    v49 = v17;
    v18 = *(_OWORD *)(v13 + i + 32);
    v19 = *(_OWORD *)(v13 + i + 48);
    v20 = *(_OWORD *)(v13 + i + 80);
    v52 = *(_OWORD *)(v13 + i + 64);
    v53 = v20;
    v50 = v18;
    v51 = v19;
    v21 = *(_OWORD *)(v13 + i + 96);
    v22 = *(_OWORD *)(v13 + i + 112);
    v23 = *(_OWORD *)(v13 + i + 144);
    v56 = *(_OWORD *)(v13 + i + 128);
    v57 = v23;
    v54 = v21;
    v55 = v22;
    v11 = v48;
    if ((unint64_t)v48 >> 62)
      break;
    v24 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    v25 = __OFADD__(v4, v24);
    v4 += v24;
    if (v25)
      goto LABEL_12;
LABEL_8:
    if (!v15)
      goto LABEL_13;
    --v15;
  }
  outlined retain of ReflowTextLine((uint64_t)&v48);
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  outlined release of ReflowTextLine((uint64_t)&v48);
  v25 = __OFADD__(v4, v26);
  v4 += v26;
  if (!v25)
    goto LABEL_8;
LABEL_12:
  __break(1u);
LABEL_13:
  swift_bridgeObjectRelease();
  v13 = *v7;
  if (v9 < *(_QWORD *)(*v7 + 16))
  {
LABEL_14:
    v3 = *(_QWORD *)(v13 + 160 * v9 + 32);
    if (v3 >> 62)
      goto LABEL_44;
    v27 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v27; v27 = _CocoaArrayWrapper.endIndex.getter())
    {
      v13 = 0;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          v11 = MEMORY[0x1DF0E4D64](v13, v3);
        }
        else
        {
          v11 = *(_QWORD *)(v3 + 8 * v13 + 32);
          swift_retain();
        }
        if (CGRectGetMaxX(*(CGRect *)(v11 + 48)) <= a1)
        {
          swift_release();
        }
        else
        {
          v28 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 136))();
          swift_release();
          if ((v28 & 1) == 0)
            goto LABEL_31;
        }
        v29 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        ++v13;
        if (v29 == v27)
          goto LABEL_26;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
    }
LABEL_26:
    swift_bridgeObjectRelease();
    if (v9 >= *(_QWORD *)(*v7 + 16))
      goto LABEL_72;
    v11 = *(_QWORD *)(*v7 + 160 * v9 + 32);
    if (v11 >> 62)
      goto LABEL_73;
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_32;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_32:
    if (v9 >= *(_QWORD *)(*v7 + 16))
    {
      __break(1u);
LABEL_47:
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t)v13 >= v30)
        goto LABEL_48;
LABEL_35:
      if (v9 >= *(_QWORD *)(*v7 + 16))
        goto LABEL_76;
      v31 = (_OWORD *)(*v7 + 160 * v9);
      v32 = v31[3];
      v48 = v31[2];
      v49 = v32;
      v33 = v31[4];
      v34 = v31[5];
      v35 = v31[7];
      v52 = v31[6];
      v53 = v35;
      v50 = v33;
      v51 = v34;
      v36 = v31[8];
      v37 = v31[9];
      v38 = v31[11];
      v56 = v31[10];
      v57 = v38;
      v54 = v36;
      v55 = v37;
      v11 = v48;
      if ((v48 & 0xC000000000000001) == 0)
      {
        if ((v13 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v13 < *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v39 = *(double **)(v48 + 8 * v13 + 32);
          swift_retain();
LABEL_40:
          v40 = v39[6];
          v41 = v39[7];
          v42 = v39[8];
          v43 = v39[9];
          swift_release();
          v58.origin.x = v40;
          v58.origin.y = v41;
          v58.size.width = v42;
          v58.size.height = v43;
          v11 = CGRectGetMidX(v58) <= a1;
          goto LABEL_67;
        }
        __break(1u);
LABEL_80:
        __break(1u);
        break;
      }
LABEL_77:
      outlined retain of ReflowTextLine((uint64_t)&v48);
      v39 = (double *)MEMORY[0x1DF0E4D64](v13, v11);
      outlined release of ReflowTextLine((uint64_t)&v48);
      goto LABEL_40;
    }
    v11 = *(_QWORD *)(*v7 + 160 * v9 + 32);
    if (v11 >> 62)
      goto LABEL_47;
    v30 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)v13 < v30)
      goto LABEL_35;
LABEL_48:
    if (v9 >= *(_QWORD *)(*v7 + 16))
      goto LABEL_80;
    v7 = *(unint64_t **)(*v7 + 160 * v9 + 32);
    if (!((unint64_t)v7 >> 62))
    {
      v13 = *(_QWORD *)(((unint64_t)v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain();
      if (v13)
        goto LABEL_51;
LABEL_66:
      swift_bridgeObjectRelease();
      v11 = 1;
LABEL_67:
      v7 = (unint64_t *)(v4 + v13);
      if (!__OFADD__(v4, v13))
      {
        v45 = (objc_class *)type metadata accessor for ReflowLayoutManager.TextPosition();
        v46 = objc_allocWithZone(v45);
        *(_QWORD *)&v46[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index] = v7;
        v46[OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity] = v11;
        v47.receiver = v46;
        v47.super_class = v45;
        return objc_msgSendSuper2(&v47, sel_init);
      }
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain();
  result = (id)_CocoaArrayWrapper.endIndex.getter();
  v13 = (unint64_t)result;
  if (!result)
    goto LABEL_66;
LABEL_51:
  v25 = __OFSUB__(v13--, 1);
  if (v25)
  {
    __break(1u);
    goto LABEL_84;
  }
  v30 = (unint64_t)v7 & 0xC000000000000001;
  if (((unint64_t)v7 & 0xC000000000000001) != 0)
  {
LABEL_84:
    v44 = MEMORY[0x1DF0E4D64](v13, v7);
    v11 = v44;
LABEL_56:
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v44);
    swift_release();
    if ((v9 & 1) != 0 && v13)
    {
      while (1)
      {
        v25 = __OFSUB__(v13--, 1);
        if (v25)
        {
          __break(1u);
          goto LABEL_71;
        }
        if (v30)
        {
          v11 = MEMORY[0x1DF0E4D64](v13, v7);
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
          if (v13 >= *(_QWORD *)(((unint64_t)v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_75;
          v11 = v7[v13 + 4];
          swift_retain();
        }
        v9 = (*(uint64_t (**)(void))(*(_QWORD *)v11 + 136))();
        swift_release();
        if ((v9 & 1) == 0 || !v13)
          goto LABEL_66;
      }
    }
    goto LABEL_66;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    if (v13 >= *(_QWORD *)(((unint64_t)v7 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_86;
    v11 = v7[v13 + 4];
    v44 = swift_retain();
    goto LABEL_56;
  }
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

uint64_t ReflowLayoutManager.caretRect(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  double *v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  double MinX;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  double *v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat MaxX;
  CGFloat MaxY;
  _OWORD *v44;
  CGFloat v45;
  CGFloat v46;
  double *v47;
  double v48;
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[10];
  uint64_t v59;
  _QWORD v60[3];
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_index);
  v4 = (_QWORD *)(v1 + 96);
  result = swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
    goto LABEL_44;
  swift_bridgeObjectRetain();
  v8 = 32;
  while (1)
  {
    v9 = *(_OWORD *)(v6 + v8 + 16);
    v58[0] = *(_OWORD *)(v6 + v8);
    v58[1] = v9;
    v10 = *(_OWORD *)(v6 + v8 + 32);
    v11 = *(_OWORD *)(v6 + v8 + 48);
    v12 = *(_OWORD *)(v6 + v8 + 80);
    v58[4] = *(_OWORD *)(v6 + v8 + 64);
    v58[5] = v12;
    v58[2] = v10;
    v58[3] = v11;
    v13 = *(_OWORD *)(v6 + v8 + 96);
    v14 = *(_OWORD *)(v6 + v8 + 112);
    v15 = *(_OWORD *)(v6 + v8 + 144);
    v58[8] = *(_OWORD *)(v6 + v8 + 128);
    v58[9] = v15;
    v58[6] = v13;
    v58[7] = v14;
    v16 = *(_QWORD *)&v58[0];
    v59 = *(_QWORD *)&v58[0];
    if (*(_QWORD *)&v58[0] >> 62)
      break;
    v17 = *(_QWORD *)((*(_QWORD *)&v58[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    outlined retain of ReflowTextLine((uint64_t)v58);
    if (v3 < v17)
      goto LABEL_9;
LABEL_5:
    outlined release of ReflowTextLine((uint64_t)v58);
    v18 = __OFSUB__(v3, v17);
    v3 -= v17;
    if (v18)
    {
      __break(1u);
      goto LABEL_31;
    }
    v8 += 160;
    if (!--v7)
    {
      result = swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(*v4 + 16);
      if (!v26)
        goto LABEL_44;
      v27 = (__int128 *)(*v4 + 160 * v26);
      v28 = *(v27 - 7);
      v49[0] = *(v27 - 8);
      v49[1] = v28;
      v29 = *(v27 - 6);
      v30 = *(v27 - 5);
      v31 = *(v27 - 3);
      v52 = *(v27 - 4);
      v53 = v31;
      v50 = v29;
      v51 = v30;
      v32 = *(v27 - 2);
      v33 = *(v27 - 1);
      v34 = v27[1];
      v56 = *v27;
      v57 = v34;
      v55 = v33;
      v54 = v32;
      v3 = *(_QWORD *)&v49[0];
      v60[0] = *(_QWORD *)&v49[0];
      v4 = (_QWORD *)(*(_QWORD *)&v49[0] & 0xFFFFFFFFFFFFFF8);
      if (!(*(_QWORD *)&v49[0] >> 62))
      {
        v35 = *(_QWORD *)((*(_QWORD *)&v49[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined retain of ReflowTextLine((uint64_t)v49);
        outlined retain of [ReflowElement]((uint64_t)v60);
        if (v35)
          goto LABEL_18;
        goto LABEL_32;
      }
LABEL_31:
      outlined retain of ReflowTextLine((uint64_t)v49);
      outlined retain of [ReflowElement]((uint64_t)v60);
      v35 = _CocoaArrayWrapper.endIndex.getter();
      if (v35)
      {
LABEL_18:
        v36 = v35 - 1;
        if (__OFSUB__(v35, 1))
        {
          __break(1u);
        }
        else if ((v3 & 0xC000000000000001) == 0)
        {
          if ((v36 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v36 < v4[2])
          {
            v37 = *(double **)(v3 + 8 * v36 + 32);
            swift_retain();
LABEL_23:
            outlined release of [ReflowElement]((uint64_t)v60);
            v38 = v37[6];
            v39 = v37[7];
            v40 = v37[8];
            v41 = v37[9];
            v62.origin.x = v38;
            v62.origin.y = v39;
            v62.size.width = v40;
            v62.size.height = v41;
            MaxX = CGRectGetMaxX(v62);
            v63.origin.x = v38;
            v63.origin.y = v39;
            v63.size.width = v40;
            v63.size.height = v41;
            MaxY = CGRectGetMaxY(v63);
            swift_release();
            v44 = v49;
            v45 = MaxX;
            v46 = MaxY;
            goto LABEL_33;
          }
          __break(1u);
          goto LABEL_38;
        }
        v37 = (double *)MEMORY[0x1DF0E4D64](v36, v3);
        goto LABEL_23;
      }
LABEL_32:
      outlined release of [ReflowElement]((uint64_t)v60);
      v46 = *((CGFloat *)&v50 + 1);
      *(_QWORD *)&v45 = v50;
      v44 = v49;
      goto LABEL_33;
    }
  }
  outlined retain of ReflowTextLine((uint64_t)v58);
  outlined retain of [ReflowElement]((uint64_t)&v59);
  v17 = _CocoaArrayWrapper.endIndex.getter();
  outlined release of [ReflowElement]((uint64_t)&v59);
  if (v3 >= v17)
    goto LABEL_5;
LABEL_9:
  result = swift_bridgeObjectRelease();
  v19 = v16 & 0xC000000000000001;
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtCC8PaperKit19ReflowLayoutManager12TextPosition_affinity) & 1) != 0)
  {
    if (!v19)
    {
      if (v3 < 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v3 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v20 = (double *)swift_retain();
        goto LABEL_14;
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_38:
    v20 = (double *)MEMORY[0x1DF0E4D64](v3, v16);
LABEL_14:
    v21 = v20[6];
    v22 = v20[7];
    v23 = v20[8];
    v24 = v20[9];
    swift_release();
    v61.origin.x = v21;
    v61.origin.y = v22;
    v61.size.width = v23;
    v61.size.height = v24;
    MinX = CGRectGetMaxX(v61);
LABEL_29:
    v48 = MinX;
    v65.origin.x = v21;
    v65.origin.y = v22;
    v65.size.width = v23;
    v65.size.height = v24;
    v46 = CGRectGetMaxY(v65);
    v44 = v58;
    v45 = v48;
LABEL_33:
    ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&v46, *(unint64_t *)&v45));
    return outlined release of ReflowTextLine((uint64_t)v44);
  }
  if (v19)
  {
    v47 = (double *)MEMORY[0x1DF0E4D64](v3, v16);
    goto LABEL_28;
  }
  if (v3 < 0)
    goto LABEL_42;
  if ((unint64_t)v3 < *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v47 = (double *)swift_retain();
LABEL_28:
    v21 = v47[6];
    v22 = v47[7];
    v23 = v47[8];
    v24 = v47[9];
    swift_release();
    v64.origin.x = v21;
    v64.origin.y = v22;
    v64.size.width = v23;
    v64.size.height = v24;
    MinX = CGRectGetMinX(v64);
    goto LABEL_29;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void ReflowLayoutManager.caretRect(for:point:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  double v5;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[2];

  v5 = round(*(double *)(a1 + 80));
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    return;
  }
  if (v5 >= 9.22337204e18)
    goto LABEL_41;
  v8 = (uint64_t)v5;
  if (((uint64_t)v5 & 0x8000000000000000) == 0)
  {
    swift_beginAccess();
    v9 = *(_QWORD *)(v3 + 96);
    if (*(_QWORD *)(v9 + 16) > v8)
    {
      v10 = (_OWORD *)(v9 + 160 * v8);
      v39 = v10[8];
      v40 = v10[9];
      v41 = v10[10];
      v42 = v10[11];
      v35 = v10[4];
      v36 = v10[5];
      v37 = v10[6];
      v38 = v10[7];
      v33 = v10[2];
      v34 = v10[3];
      goto LABEL_36;
    }
  }
  v11 = v3 + 96;
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 96);
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    goto LABEL_43;
  swift_bridgeObjectRetain();
  v14 = 0;
  do
  {
    if (v14 >= *(_QWORD *)(v12 + 16))
      goto LABEL_38;
    v15 = (__int128 *)(v12 + 32 + 160 * v14);
    v16 = v15[1];
    v33 = *v15;
    v34 = v16;
    v17 = v15[2];
    v18 = v15[3];
    v19 = v15[5];
    v37 = v15[4];
    v38 = v19;
    v35 = v17;
    v36 = v18;
    v20 = v15[6];
    v21 = v15[7];
    v22 = v15[9];
    v41 = v15[8];
    v42 = v22;
    v39 = v20;
    v40 = v21;
    v23 = v33;
    v43[0] = v33;
    if ((unint64_t)v33 >> 62)
    {
      swift_bridgeObjectRetain_n();
      outlined retain of [ReflowElement]((uint64_t)v43);
      outlined retain of ReflowTextLine((uint64_t)&v33);
      v24 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [ReflowElement]((uint64_t)v43);
      if (!v24)
        goto LABEL_9;
    }
    else
    {
      v24 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      outlined retain of [ReflowElement]((uint64_t)v43);
      outlined retain of ReflowTextLine((uint64_t)&v33);
      if (!v24)
        goto LABEL_9;
    }
    if ((v23 & 0xC000000000000001) != 0)
    {
      v27 = MEMORY[0x1DF0E4D64](0, v23);
      swift_unknownObjectRelease();
      if (v27 == a1)
        goto LABEL_34;
      if (v24 != 1)
      {
        v28 = MEMORY[0x1DF0E4D64](1, v23);
        swift_unknownObjectRelease();
        if (v28 == a1)
        {
LABEL_34:
          outlined release of [ReflowElement]((uint64_t)v43);
          outlined release of [ReflowElement]((uint64_t)v43);
          swift_bridgeObjectRelease();
          ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
          outlined release of ReflowTextLine((uint64_t)&v33);
          return;
        }
        if (v24 != 2)
        {
          v29 = 2;
          do
          {
            v30 = MEMORY[0x1DF0E4D64](v29, v23);
            v31 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_42;
            v32 = v30;
            swift_unknownObjectRelease();
            if (v32 == a1)
              goto LABEL_34;
            ++v29;
          }
          while (v31 != v24);
        }
      }
    }
    else
    {
      if (*(_QWORD *)(v23 + 32) == a1)
        goto LABEL_34;
      if (v24 != 1)
      {
        if (*(_QWORD *)(v23 + 40) == a1)
          goto LABEL_34;
        if (v24 != 2)
        {
          v25 = 6;
          while (1)
          {
            v26 = v25 - 3;
            if (__OFADD__(v25 - 4, 1))
              break;
            if (*(_QWORD *)(v23 + 8 * v25) == a1)
              goto LABEL_34;
            ++v25;
            if (v26 == v24)
              goto LABEL_9;
          }
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
      }
    }
LABEL_9:
    ++v14;
    outlined release of [ReflowElement]((uint64_t)v43);
    outlined release of [ReflowElement]((uint64_t)v43);
    outlined release of ReflowTextLine((uint64_t)&v33);
  }
  while (v14 != v13);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(*(_QWORD *)v11 + 16))
    goto LABEL_43;
LABEL_36:
  ReflowTextLine.caretRect(at:)((CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
}

uint64_t ReflowLayoutManager.textSize(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t result;
  char v55;
  Swift::Int v56;
  Swift::Int v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  Swift::Int v77;
  Swift::Int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  void (*v91)(char *, uint64_t, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t v97;
  char *v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD v115[10];
  _OWORD v116[10];
  _QWORD v117[3];

  v114 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v102 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v108 = (char *)&v102 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v102 - v17;
  swift_beginAccess();
  v19 = *(_QWORD *)(v2 + 96);
  v109 = *(_QWORD *)(v19 + 16);
  if (!v109)
  {
LABEL_32:
    if (one-time initialization token for handwritingReflowDefaultTextSize != -1)
LABEL_100:
      swift_once();
    goto LABEL_33;
  }
  v103 = v2 + 96;
  v104 = v7;
  v105 = v11;
  v106 = v18;
  v107 = a1;
  v112 = v19 + 32;
  v20 = swift_bridgeObjectRetain();
  a1 = 0;
  v21 = 1;
  v111 = v20;
  while (1)
  {
    if ((unint64_t)a1 >= *(_QWORD *)(v20 + 16))
      goto LABEL_93;
    v22 = (_OWORD *)(v112 + 160 * a1);
    v23 = v22[1];
    v116[0] = *v22;
    v116[1] = v23;
    v24 = v22[2];
    v25 = v22[3];
    v26 = v22[5];
    v116[4] = v22[4];
    v116[5] = v26;
    v116[2] = v24;
    v116[3] = v25;
    v27 = v22[6];
    v28 = v22[7];
    v29 = v22[9];
    v116[8] = v22[8];
    v116[9] = v29;
    v116[6] = v27;
    v116[7] = v28;
    v30 = *(_QWORD *)&v116[0];
    v117[0] = *(_QWORD *)&v116[0];
    v110 = *(_QWORD *)&v116[0] >> 62;
    if (*(_QWORD *)&v116[0] >> 62)
    {
      swift_bridgeObjectRetain();
      outlined retain of [ReflowElement]((uint64_t)v117);
      outlined retain of ReflowTextLine((uint64_t)v116);
      v39 = _CocoaArrayWrapper.endIndex.getter();
      outlined release of [ReflowElement]((uint64_t)v117);
      v113 = v39;
      if (!v39)
        goto LABEL_3;
    }
    else
    {
      v31 = *(_QWORD *)((*(_QWORD *)&v116[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      outlined retain of [ReflowElement]((uint64_t)v117);
      outlined retain of ReflowTextLine((uint64_t)v116);
      v113 = v31;
      if (!v31)
        goto LABEL_3;
    }
    v32 = (v30 & 0xC000000000000001) == 0;
    if ((v30 & 0xC000000000000001) != 0)
    {
      v40 = MEMORY[0x1DF0E4D64](0, v30);
      swift_unknownObjectRelease();
      if (v40 == v114)
        break;
      if (v113 == 1)
        goto LABEL_3;
      v41 = MEMORY[0x1DF0E4D64](1, v30);
      swift_unknownObjectRelease();
      if (v41 == v114)
        goto LABEL_35;
      v33 = v30 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_13;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFF8;
    v34 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v34)
      goto LABEL_94;
    if (*(_QWORD *)(v30 + 32) == v114)
      break;
    if (v113 != 1)
    {
      if (v34 < 2)
        goto LABEL_95;
      if (*(_QWORD *)(v30 + 40) == v114)
        goto LABEL_35;
LABEL_13:
      v35 = 0;
      v36 = v113 - 2;
      while (v36 != v35)
      {
        v38 = v35 + 2;
        if ((v30 & 0xC000000000000001) != 0)
        {
          v37 = MEMORY[0x1DF0E4D64](v35 + 2, v30);
          swift_unknownObjectRelease();
          if (v37 == v114)
          {
            outlined release of [ReflowElement]((uint64_t)v117);
            v21 = v35 + 2;
            if (v35 + 2 < 0)
              goto LABEL_96;
            v32 = 0;
            v42 = v110;
            if (v110)
              goto LABEL_36;
            goto LABEL_29;
          }
        }
        else
        {
          if (v38 >= *(_QWORD *)(v33 + 16))
            goto LABEL_89;
          if (*(_QWORD *)(v30 + 8 * v35 + 48) == v114)
          {
            v21 = v35 + 2;
            v32 = 1;
            goto LABEL_35;
          }
        }
        ++v35;
        if (__OFADD__(v38, 1))
        {
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
      }
    }
LABEL_3:
    ++a1;
    outlined release of [ReflowElement]((uint64_t)v117);
    outlined release of ReflowTextLine((uint64_t)v116);
    v20 = v111;
    if (a1 == v109)
    {
      swift_bridgeObjectRelease();
      v44 = *(_QWORD *)(*(_QWORD *)v103 + 16);
      a1 = v107;
      if (!v44)
        goto LABEL_32;
      v45 = (_OWORD *)(*(_QWORD *)v103 + 160 * v44);
      v46 = *(v45 - 7);
      v115[0] = *(v45 - 8);
      v115[1] = v46;
      v47 = *(v45 - 6);
      v48 = *(v45 - 5);
      v49 = *(v45 - 3);
      v115[4] = *(v45 - 4);
      v115[5] = v49;
      v115[2] = v47;
      v115[3] = v48;
      v50 = *(v45 - 2);
      v51 = *(v45 - 1);
      v52 = v45[1];
      v115[8] = *v45;
      v115[9] = v52;
      v115[7] = v51;
      v115[6] = v50;
      outlined retain of ReflowTextLine((uint64_t)v115);
      ReflowTextLine.textSize.getter();
      outlined release of ReflowTextLine((uint64_t)v115);
LABEL_33:
      v53 = type metadata accessor for PKDrawing();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(a1, 1, 1, v53);
    }
  }
  v21 = 0;
LABEL_35:
  outlined release of [ReflowElement]((uint64_t)v117);
  v42 = v110;
  if (!v110)
  {
LABEL_29:
    v43 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    outlined retain of [ReflowElement]((uint64_t)v117);
    goto LABEL_38;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_102;
  }
  swift_bridgeObjectRetain();
  v43 = _CocoaArrayWrapper.endIndex.getter();
  outlined release of [ReflowElement]((uint64_t)v117);
LABEL_38:
  if (v43 < v21)
    goto LABEL_97;
  if (v21)
    v55 = v32;
  else
    v55 = 1;
  if ((v55 & 1) == 0)
  {
    type metadata accessor for ReflowElement();
    v56 = 0;
    do
    {
      v57 = v56 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v56);
      v56 = v57;
    }
    while (v21 != v57);
  }
  LODWORD(v114) = v32;
  if (v42)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.subscript.getter();
    v59 = v61;
    v58 = v62;
    v60 = v63;
    outlined release of [ReflowElement]((uint64_t)v117);
    outlined release of [ReflowElement]((uint64_t)v117);
  }
  else
  {
    v58 = 0;
    v59 = (v30 & 0xFFFFFFFFFFFFFF8) + 32;
    v60 = (2 * v21) | 1;
  }
  a1 = v60 >> 1;
  if (v60 >> 1 != v58)
  {
    v64 = v60 >> 1;
    while (!__OFSUB__(v64--, 1))
    {
      if (v64 < v58 || v64 >= a1)
        goto LABEL_91;
      type metadata accessor for ReflowWord();
      if (swift_dynamicCastClass())
      {
        a1 = (uint64_t)&v102;
        v66 = *(_QWORD *)(v59 + 8 * v64);
        swift_retain();
        goto LABEL_57;
      }
      if (v64 == v58)
        goto LABEL_55;
    }
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
LABEL_55:
  a1 = (uint64_t)&v102;
  v66 = 0;
LABEL_57:
  swift_unknownObjectRelease();
  v67 = v113;
  if (!v66)
  {
LABEL_62:
    v75 = type metadata accessor for PKDrawing();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v108, 1, 1, v75);
    goto LABEL_63;
  }
  type metadata accessor for ReflowWord();
  v68 = swift_dynamicCastClass();
  if (!v68)
  {
    swift_release();
    goto LABEL_62;
  }
  v69 = *(id *)(v68 + 272);
  swift_release();
  v70 = type metadata accessor for PKDrawing();
  v71 = *(_QWORD **)(v70 - 8);
  a1 = v71[7];
  v72 = v105;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))a1)(v105, 1, 1, v70);
  v73 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawing and conformance PKDrawing, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD1100], MEMORY[0x1E0CD1110]);
  MEMORY[0x1DF0E4F38](v69, v72, v70, v73);

  v74 = (unsigned int (*)(char *, uint64_t, uint64_t))v71[6];
  if (v74(v72, 1, v70) == 1)
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))a1)(v108, 1, 1, v70);
    goto LABEL_63;
  }
  v96 = (void (*)(char *, uint64_t, uint64_t))v71[4];
  v97 = (uint64_t)v108;
  v98 = v72;
  v99 = v96;
  v96(v108, (uint64_t)v98, v70);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))a1)(v97, 0, 1, v70);
  if (v74((char *)v97, 1, v70) != 1)
  {
    swift_bridgeObjectRelease();
    v85 = (uint64_t)v106;
    v99(v106, (uint64_t)v108, v70);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))a1)(v85, 0, 1, v70);
    v100 = v107;
LABEL_87:
    ReflowTextLine.textSize.getter();
    outlined release of ReflowTextLine((uint64_t)v116);
    return outlined init with take of (key: Int, value: AnyCRValue)?(v85, v100, &demangling cache variable for type metadata for PKDrawing?);
  }
LABEL_63:
  if (v67 < v21)
    goto LABEL_98;
  if (v42)
  {
    swift_bridgeObjectRetain_n();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    result = outlined release of [ReflowElement]((uint64_t)v117);
  }
  else
  {
    v76 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  if (v76 < v67)
    goto LABEL_99;
  if (((v21 != v67) & ~(_DWORD)v114) == 0)
  {
LABEL_72:
    if (v42)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.subscript.getter();
      a1 = v79;
      v21 = v80;
      v82 = v81;
      outlined release of [ReflowElement]((uint64_t)v117);
      outlined release of [ReflowElement]((uint64_t)v117);
      v67 = v82 >> 1;
    }
    else
    {
      a1 = (v30 & 0xFFFFFFFFFFFFFF8) + 32;
    }
    if (v21 == v67)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v84 = type metadata accessor for PKDrawing();
      v85 = (uint64_t)v106;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v106, 1, 1, v84);
LABEL_86:
      v100 = v107;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v108, &demangling cache variable for type metadata for PKDrawing?);
      goto LABEL_87;
    }
    while (v21 < v67)
    {
      type metadata accessor for ReflowWord();
      v83 = swift_dynamicCastClass();
      if (v83)
      {
        v86 = v83;
        swift_retain();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        v87 = *(id *)(v86 + 272);
        swift_release();
        v88 = type metadata accessor for PKDrawing();
        v89 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD1100];
        v90 = *(_QWORD *)(v88 - 8);
        v91 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56);
        v92 = v104;
        v91(v104, 1, 1, v88);
        v93 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawing and conformance PKDrawing, v89, MEMORY[0x1E0CD1110]);
        MEMORY[0x1DF0E4F38](v87, v92, v88, v93);

        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v92, 1, v88) == 1)
        {
          v85 = (uint64_t)v106;
          v94 = (uint64_t)v106;
          v95 = 1;
        }
        else
        {
          v101 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
          v85 = (uint64_t)v106;
          v101(v106, v92, v88);
          v94 = v85;
          v95 = 0;
        }
        v91((char *)v94, v95, 1, v88);
        goto LABEL_86;
      }
      if (v67 == ++v21)
        goto LABEL_79;
    }
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  if (v21 < v67)
  {
    type metadata accessor for ReflowElement();
    v77 = v21;
    do
    {
      v78 = v77 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v77);
      v77 = v78;
    }
    while (v67 != v78);
    goto LABEL_72;
  }
LABEL_102:
  __break(1u);
  return result;
}

double ReflowLayoutManager.textSize(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v7, v8);
  v40 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStroke();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v15 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  v20 = MEMORY[0x1E0DEE9D8];
  if (v19)
  {
    v34 = v6;
    v35 = v1;
    v41 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    v21 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v22 = *(_QWORD *)(v11 + 72);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v37 = v22;
    v38 = v11;
    do
    {
      v36(v14, v21, v10);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v24 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v20 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v41;
      }
      v26 = *(_QWORD *)(v20 + 16);
      v25 = *(_QWORD *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v20 = v41;
      }
      *(_QWORD *)(v20 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v26, v18, v39);
      v11 = v38;
      v21 += v37;
      --v19;
    }
    while (v19);
    v6 = v34;
  }
  v27 = specialized Set.init<A>(_:)(v20);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v28 = swift_bridgeObjectRetain();
  v29 = specialized Sequence.first(where:)(v28, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v29)
  {
    ReflowLayoutManager.textSize(for:)((uint64_t)v6, v29);
    v31 = v30;
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    if (one-time initialization token for handwritingReflowDefaultTextSize != -1)
      swift_once();
    return *(double *)&static UIConstants.handwritingReflowDefaultTextSize;
  }
  return v31;
}

uint64_t ReflowLayoutManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReflowLayoutManager()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ReflowLayoutManager.TextPosition()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ReflowLayoutManager.TextPosition.Affinity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC6CD40 + 4 * byte_1DDF3A495[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC6CD74 + 4 * byte_1DDF3A490[v4]))();
}

uint64_t sub_1DDC6CD74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC6CD7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC6CD84);
  return result;
}

uint64_t sub_1DDC6CD90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC6CD98);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC6CD9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC6CDA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReflowLayoutManager.TextPosition.Affinity()
{
  return &type metadata for ReflowLayoutManager.TextPosition.Affinity;
}

uint64_t destroy for ReflowSpacingAdjustment()
{
  return swift_release();
}

uint64_t initializeWithCopy for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReflowSpacingAdjustment(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReflowSpacingAdjustment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReflowSpacingAdjustment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowSpacingAdjustment()
{
  return &type metadata for ReflowSpacingAdjustment;
}

unint64_t lazy protocol witness table accessor for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity;
  if (!lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ReflowLayoutManager.TextPosition.Affinity, &type metadata for ReflowLayoutManager.TextPosition.Affinity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReflowLayoutManager.TextPosition.Affinity and conformance ReflowLayoutManager.TextPosition.Affinity);
  }
  return result;
}

BOOL specialized Array._hoistableIsNativeTypeChecked()(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t specialized Array._getCount()(unint64_t a1)
{
  uint64_t v2;

  if (!(a1 >> 62))
    return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  _QWORD *v1;

  if (result + 1 > *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  return result;
}

uint64_t specialized Set.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t i;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v49 = *(_QWORD **)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v38 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v38 - v14;
  if (*(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16))
    return 0;
  v17 = *(_QWORD *)(a2 + 56);
  v47 = a2 + 56;
  v18 = -1 << *(_BYTE *)(a2 + 32);
  v40 = ~v18;
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v17;
  v41 = (unint64_t)(63 - v18) >> 6;
  v48 = a1 + 56;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v44 = a2;
  v39 = v15;
  v45 = 0;
  v46 = v20;
  if (!v20)
    goto LABEL_8;
LABEL_7:
  v42 = (v20 - 1) & v20;
  v43 = v22;
  for (i = __clz(__rbit64(v20)) | (v22 << 6); ; i = __clz(__rbit64(v25)) + (v26 << 6))
  {
    v28 = *(_QWORD *)(a2 + 48);
    v29 = v49;
    v30 = v49[9];
    v31 = (void (*)(char *, unint64_t, uint64_t))v49[2];
    v31(v15, v28 + v30 * i, v4);
    ((void (*)(char *, char *, uint64_t))v29[4])(v11, v15, v4);
    if (!*(_QWORD *)(a1 + 16)
      || (lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]), v32 = dispatch thunk of Hashable._rawHashValue(seed:)(), v33 = -1 << *(_BYTE *)(a1 + 32), v34 = v32 & ~v33, ((*(_QWORD *)(v48 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0))
    {
      v37 = (void (*)(char *, uint64_t))v49[1];
LABEL_31:
      v37(v11, v4);
      v16 = 0;
      goto LABEL_32;
    }
    v35 = ~v33;
    while (1)
    {
      v31(v7, *(_QWORD *)(a1 + 48) + v34 * v30, v4);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12890]);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37 = (void (*)(char *, uint64_t))v49[1];
      v37(v7, v4);
      if ((v36 & 1) != 0)
        break;
      v34 = (v34 + 1) & v35;
      if (((*(_QWORD *)(v48 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
        goto LABEL_31;
    }
    result = ((uint64_t (*)(char *, uint64_t))v37)(v11, v4);
    v20 = v42;
    v22 = v43;
    a2 = v44;
    v15 = v39;
    v45 = v43;
    v46 = v42;
    if (v42)
      goto LABEL_7;
LABEL_8:
    v24 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v24 >= v41)
      goto LABEL_34;
    v25 = *(_QWORD *)(v47 + 8 * v24);
    v26 = v22 + 1;
    if (!v25)
    {
      v26 = v22 + 2;
      if (v22 + 2 >= v41)
        goto LABEL_34;
      v25 = *(_QWORD *)(v47 + 8 * v26);
      if (!v25)
      {
        v26 = v22 + 3;
        if (v22 + 3 >= v41)
          goto LABEL_34;
        v25 = *(_QWORD *)(v47 + 8 * v26);
        if (!v25)
          break;
      }
    }
LABEL_21:
    v42 = (v25 - 1) & v25;
    v43 = v26;
  }
  v27 = v22 + 4;
  if (v22 + 4 >= v41)
  {
LABEL_34:
    v16 = 1;
LABEL_32:
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v16;
  }
  v25 = *(_QWORD *)(v47 + 8 * v27);
  if (v25)
  {
    v26 = v22 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v26 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v26 >= v41)
      goto LABEL_34;
    v25 = *(_QWORD *)(v47 + 8 * v26);
    ++v27;
    if (v25)
      goto LABEL_21;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v10 = *(_QWORD *)(v1 + 16);
    v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v7 <= v2 ? v2 : v5 - v10)
      break;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v5 >= v10)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size_0(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 25;
  v4[2] = v7;
  v4[3] = (2 * (v13 >> 3)) | 1;
  if (v5 < v10)
    goto LABEL_30;
LABEL_17:
  if ((v7 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = v11 + 8 * v10;
    if (v15 >= (unint64_t)&v4[v7 + 4] || v14 >= v15 + 8 * v7)
    {
      type metadata accessor for ReflowElement();
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        v17 = v4[2];
        v18 = v10 + v17;
        if (!__OFADD__(v10, v17))
        {
          if (v18 >= v10)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 8 * v10;
              *(_QWORD *)(v1 + 16) = v10;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

size_t specialized ArraySlice.reserveCapacity(_:)(size_t result)
{
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v8 = *(_QWORD *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 160 * v6 + 160 * v7 == result + 160 * (_QWORD)v9 + 32)
    goto LABEL_29;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_26;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v10 = *(_QWORD *)(v1 + 16);
    v7 = v5 - v10;
    if (__OFSUB__(v5, v10))
    {
      __break(1u);
      goto LABEL_33;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (!(v7 <= v2 ? v2 : v5 - v10))
      break;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
    v4 = (_QWORD *)swift_allocObject();
    result = _swift_stdlib_malloc_size_0(v4);
    v4[2] = v7;
    v4[3] = 2 * ((uint64_t)(result - 32) / 160);
    if (v5 >= v10)
      goto LABEL_15;
LABEL_28:
    __break(1u);
LABEL_29:
    v18 = *(_QWORD *)(result + 24);
    result = swift_release();
    v19 = (v18 >> 1) - (_QWORD)v9;
    v20 = __OFADD__(v7, v19);
    v7 += v19;
    if (v20)
      goto LABEL_38;
  }
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v5 < v10)
    goto LABEL_28;
LABEL_15:
  if ((v7 & 0x8000000000000000) == 0)
  {
    v13 = (unint64_t)(v4 + 4);
    v14 = v11 + 160 * v10;
    if (v14 >= (unint64_t)&v4[20 * v7 + 4] || v13 >= v14 + 160 * v7)
    {
      swift_arrayInitWithCopy();
      if (!__OFSUB__(0, v10))
      {
        v16 = v4[2];
        v17 = v10 + v16;
        if (!__OFADD__(v10, v16))
        {
          if (v17 >= v10)
          {
            result = swift_unknownObjectRelease();
            if ((v17 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v13 - 160 * v10;
              *(_QWORD *)(v1 + 16) = v10;
              *(_QWORD *)(v1 + 24) = (2 * v17) | 1;
LABEL_26:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_36;
          }
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
LABEL_39:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.append<A>(contentsOf:)(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v2 = result;
  if ((unint64_t)result >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v5 = v1[2];
  v4 = v1[3];
  v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
    goto LABEL_34;
  }
  if ((v4 & 1) == 0)
    goto LABEL_9;
  v7 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  if (v7 + 8 * v5 + 8 * v6 != v8 + 8 * v9 + 32)
  {
    swift_release();
LABEL_9:
    v10 = v6;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v8 + 24);
  result = swift_release();
  v12 = (v11 >> 1) - v9;
  v13 = __OFADD__(v6, v12);
  v10 = v6 + v12;
  if (v13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_11:
  result = v6 + v3;
  if (__OFADD__(v6, v3))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v10 < result)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v14 = 2 * v10;
    if (v14 > result)
      result = v14;
  }
  result = specialized ArraySlice.reserveCapacity(_:)(result);
  v16 = v1[2];
  v15 = v1[3];
  v17 = (v15 >> 1) - v16;
  if (__OFSUB__(v15 >> 1, v16))
    goto LABEL_35;
  v18 = v1[1] + 8 * v16 + 8 * v17;
  if ((v15 & 1) == 0)
  {
LABEL_22:
    v21 = v17;
    goto LABEL_24;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  v20 = *(_QWORD *)(v19 + 16);
  if (v18 != v19 + 8 * v20 + 32)
  {
    result = swift_release();
    goto LABEL_22;
  }
  v22 = *(_QWORD *)(v19 + 24);
  result = swift_release();
  v23 = (v22 >> 1) - v20;
  v13 = __OFADD__(v17, v23);
  v21 = v17 + v23;
  if (v13)
  {
LABEL_41:
    __break(1u);
    return result;
  }
LABEL_24:
  v24 = v21 - v17;
  if (__OFSUB__(v21, v17))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  result = specialized Array._copyContents(initializing:)(v18, v21 - v17, v2);
  if (v26 < v3)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v27 = result;
  v28 = v25;
  v29 = v26;
  if (v26 <= 0)
    goto LABEL_29;
  result = v17 + v26;
  if (__OFADD__(v17, v26))
    goto LABEL_38;
  specialized _SliceBuffer.count.setter(result);
LABEL_29:
  if (v29 == v24)
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v27, v28);
  else
    return swift_bridgeObjectRelease();
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *__dst;

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_29;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v33 = v15 - v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  __dst = (char *)(v9 + 32);
  v17 = v9 + 32 + 8 * a2;
  v31 = (char *)(v17 + 8 * a3);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v7);
  v32 = a4;
  if (v18)
  {
    v19 = v18;
    v30 = v9;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 8 * v20);
    type metadata accessor for ReflowElement();
    swift_arrayDestroy();
    if (a2 < 0)
      goto LABEL_43;
    v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 8 * a2);
    swift_arrayDestroy();
    v32(v17, a3);
    if (v14 < 0)
      goto LABEL_43;
    v23 = &v22[8 * v33];
    if (v31 != v23 || v31 >= &v23[8 * v14])
      memmove(v31, v23, 8 * v14);
    swift_arrayDestroy();
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
    v9 = v30;
LABEL_23:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v28 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v20, v28);
      v29 = v20 + v28;
      if (!v11)
      {
        if (v29 >= v20)
        {
          if ((v29 & 0x8000000000000000) == 0)
          {
            *v4 = v9;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v29) | 1;
            return result;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v20 = v4[2];
  v11 = __OFADD__(v20, a2);
  v24 = v20 + a2;
  if (v11)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v24 < v20)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (__OFSUB__(v24, v20))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  type metadata accessor for ReflowElement();
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[8 * (v24 - v20)], a3);
  v25 = v24 + v33;
  if (__OFADD__(v24, v33))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v26 = v4[3] >> 1;
  if (v26 < v25)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!__OFSUB__(v26, v25))
  {
    swift_arrayInitWithCopy();
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *__dst;

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_32;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v34 = v15 - v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  __dst = (char *)(v9 + 32);
  v17 = v9 + 32 + 160 * a2;
  v33 = (char *)(v17 + 160 * a3);
  v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v7);
  if (v18)
  {
    v19 = v18;
    v31 = a4;
    v32 = v9;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 160 * v20);
    swift_arrayDestroy();
    if (a2 < 0)
      goto LABEL_46;
    v22 = &v21[160 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 160 * a2);
    swift_arrayDestroy();
    v31(v17, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[160 * v34];
    if (v33 != v23 || v33 >= &v23[160 * v14])
      memmove(v33, v23, 160 * v14);
    swift_arrayDestroy();
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
    v9 = v32;
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v29 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v20, v29);
      v30 = v20 + v29;
      if (!v11)
      {
        if (v30 >= v20)
        {
          if ((v30 & 0x8000000000000000) == 0)
          {
            *v4 = v9;
            v4[1] = &__dst[-160 * v20];
            v4[2] = v20;
            v4[3] = (2 * v30) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v20 = v4[2];
  v25 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v25 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v25, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_arrayInitWithCopy();
  a4((uint64_t)&__dst[160 * a2], a3);
  v26 = v25 + v34;
  if (__OFADD__(v25, v34))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v27 = v4[3] >> 1;
  if (v27 < v26)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!__OFSUB__(v27, v26))
  {
    swift_arrayInitWithCopy();
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _SliceBuffer.count.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v5 = v2[3];
  v34 = v2[2];
  v6 = (v5 >> 1) - v34;
  if (__OFSUB__(v5 >> 1, v34))
    goto LABEL_57;
  v3 = a2;
  v4 = a1;
  if (a1 >> 62)
LABEL_58:
    result = _CocoaArrayWrapper.endIndex.getter();
  else
    result = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v36 = result;
  if (result == v3)
    return swift_bridgeObjectRelease();
  v35 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) == 0)
  {
    if ((v3 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) > v3)
    {
      v8 = *(_QWORD *)(v4 + 8 * v3 + 32);
      result = swift_retain();
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_62;
  }
  result = MEMORY[0x1DF0E4D64](v3, v4);
  v8 = result;
LABEL_10:
  v37 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    v32 = v4 & 0xFFFFFFFFFFFFFF8;
    v29 = v4 + 32;
    v30 = v2;
    while (1)
    {
      if (__OFADD__(v6, 1))
        goto LABEL_50;
      v38 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v6, v6 + 1, *v2, v2[1], v34, v5);
      v9 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
      specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v38, v6, 0, v9);
      swift_release();
      swift_release();
      v10 = v2[2];
      v5 = v2[3];
      v34 = v10;
      v11 = (v5 >> 1) - v10;
      if (__OFSUB__(v5 >> 1, v10))
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      v31 = v6 + 1;
      v33 = v5 >> 1;
      v12 = v4;
      v3 = *v2;
      v13 = v2[1];
      if ((v5 & 1) != 0)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v14 = swift_dynamicCastClass();
        v15 = v34;
        if (!v14)
        {
          swift_unknownObjectRelease();
          v14 = MEMORY[0x1E0DEE9D8];
        }
        v16 = *(_QWORD *)(v14 + 16);
        if (v13 + 8 * v34 + 8 * v11 != v14 + 8 * v16 + 32)
        {
          swift_release();
          v4 = v11;
          if (v6 >= v11)
            goto LABEL_38;
          goto LABEL_23;
        }
        v2 = *(uint64_t **)(v14 + 24);
        swift_release();
        v17 = ((unint64_t)v2 >> 1) - v16;
        v4 = v11 + v17;
        if (__OFADD__(v11, v17))
          goto LABEL_56;
      }
      else
      {
        v4 = (v5 >> 1) - v10;
      }
      v15 = v34;
      if (v6 >= v4)
        goto LABEL_38;
LABEL_23:
      *(_QWORD *)(v13 + 8 * v15 + 8 * v6) = v8;
      v18 = v36;
      v19 = v37;
      if (v37 != v36)
      {
        v20 = v15;
        v21 = 0;
        v2 = (uint64_t *)(~v6 + v4);
        v22 = v13 + 8 * v6 + 8 * v20 + 8;
        while (1)
        {
          v6 = (uint64_t)v21 + v19;
          if (v35)
          {
            v8 = MEMORY[0x1DF0E4D64]((char *)v21 + v19, v12);
            v18 = v6 + 1;
            if (__OFADD__(v6, 1))
              goto LABEL_47;
          }
          else
          {
            if (v6 < 0)
              goto LABEL_48;
            if ((unint64_t)v6 >= *(_QWORD *)(v32 + 16))
              goto LABEL_49;
            v8 = *(_QWORD *)(v29 + 8 * v37 + 8 * (_QWORD)v21);
            swift_retain();
            v18 = v6 + 1;
            if (__OFADD__(v6, 1))
            {
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
              goto LABEL_51;
            }
          }
          if (v2 == v21)
          {
            v6 = v4;
            goto LABEL_37;
          }
          *(_QWORD *)(v22 + 8 * (_QWORD)v21) = v8;
          v21 = (uint64_t *)((char *)v21 + 1);
          v19 = v37;
          if (v18 == v36)
          {
            v8 = 0;
            v6 = (uint64_t)v21 + v31;
            v37 = v36;
            goto LABEL_38;
          }
        }
      }
      v8 = 0;
      ++v6;
LABEL_37:
      v37 = v18;
LABEL_38:
      v23 = v6 - v11;
      v2 = v30;
      if (__OFSUB__(v6, v11))
        goto LABEL_52;
      v4 = v12;
      if (v23)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v24 = swift_dynamicCastClass();
        if (!v24)
        {
          swift_unknownObjectRelease();
          v24 = MEMORY[0x1E0DEE9D8];
        }
        v25 = *(_QWORD *)(v24 + 16);
        v26 = __OFADD__(v25, v23);
        v27 = v25 + v23;
        if (v26)
          goto LABEL_53;
        *(_QWORD *)(v24 + 16) = v27;
        swift_release();
        v28 = v33 + v23;
        if (__OFADD__(v33, v23))
          goto LABEL_54;
        if ((v28 & 0x8000000000000000) != 0)
          goto LABEL_55;
        v5 = v5 & 1 | (2 * v28);
        v30[3] = v5;
      }
      if (!v8)
        return swift_bridgeObjectRelease();
    }
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size_0(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 25;
  v27[2] = v6;
  v27[3] = (2 * (v29 >> 3)) | 1;
  return (uint64_t)v27;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_32;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 160 * a5 + 160 * v8;
  if (v13 == v11 + 160 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 160 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 160 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size_0(v27);
  v27[2] = v6;
  v27[3] = 2 * ((uint64_t)(v28 - 32) / 160);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = v8 + 8 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 25;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 160 * v6 + 160 * v7 != v9 + 160 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = (v8 + 160 * v6 - a1 - 32) / 160;
    isUniquelyReferenced_nonNull = v7 + v16;
    if (!__OFADD__(v7, v16))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_19:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  _BOOL8 v58;
  uint64_t v59;

  v3 = v2;
  v54 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v51 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v50, v8);
  v49 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v46 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v45 = (char *)&v42 - v15;
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16)
      goto LABEL_3;
  }
  else
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
    {
LABEL_3:
      v58 = v3;
      v55 = a1 & 0xC000000000000001;
      v17 = 4;
      v44 = a1;
      v43 = v16;
      v18 = v48;
      do
      {
        v20 = v17 - 4;
        if (v55)
        {
          v21 = MEMORY[0x1DF0E4D64](v17 - 4, a1);
          v22 = __OFADD__(v20, 1);
          v19 = v17 - 3;
          if (v22)
            goto LABEL_15;
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 8 * v17);
          swift_retain();
          v22 = __OFADD__(v20, 1);
          v19 = v17 - 3;
          if (v22)
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        type metadata accessor for ReflowWord();
        v23 = swift_dynamicCastClass();
        if (v23)
        {
          v24 = v23;
          v56 = v19;
          v25 = *(_QWORD *)(v23 + 272);
          v59 = v21;
          v26 = v25 + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          v27 = v47;
          v28 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
          v29 = v45;
          v28(v45, v26, v18);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
          swift_retain();
          v30 = (uint64_t)v49;
          Capsule<>.root.getter();
          v57 = *(void (**)(char *, uint64_t))(v27 + 8);
          v57(v29, v18);
          v31 = *(_QWORD *)(v24 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
          swift_beginAccess();
          v32 = v46;
          v28(v46, v31, v18);
          v33 = v51;
          v35 = v52;
          v34 = v53;
          v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v30 + *(int *)(v50 + 20), v53);
          MEMORY[0x1E0C80A78](v36, v37);
          *(&v42 - 2) = v54;
          *(&v42 - 1) = (uint64_t)v32;
          v38 = v58;
          v3 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:), (uint64_t)(&v42 - 4));
          v58 = v38;
          v39 = *(void (**)(char *, uint64_t))(v35 + 8);
          v40 = v59;
          v39(v33, v34);
          swift_release();
          v57(v32, v18);
          outlined destroy of PKDrawingStruct(v30);
          if (v3)
          {
            swift_bridgeObjectRelease();
            return v40;
          }
          a1 = v44;
          v16 = v43;
          v19 = v56;
        }
        swift_release();
        ++v17;
      }
      while (v19 != v16);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v43 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v15);
  v45 = (char *)&v33 - v16;
  if (!(a1 >> 62))
  {
    v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_3;
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17)
    goto LABEL_19;
LABEL_3:
  v18 = 0;
  v19 = a1 & 0xC000000000000001;
  v34 = a1 + 32;
  v35 = a2;
  v36 = a1;
  v37 = v3;
  v38 = a1 & 0xC000000000000001;
  v39 = v17;
  while (1)
  {
    if (v19)
    {
      v20 = MEMORY[0x1DF0E4D64](v18, a1);
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
        goto LABEL_23;
    }
    else
    {
      v20 = *(_QWORD *)(v34 + 8 * v18);
      swift_retain();
      v21 = __OFADD__(v18, 1);
      v22 = v18 + 1;
      if (v21)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    v40 = v22;
    v41 = v20;
    swift_getKeyPath();
    v46 = v41;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*(_BYTE *)(v41 + 24) == 1)
      break;
    swift_release();
LABEL_18:
    v18 = v40;
    v19 = v38;
    if (v40 == v39)
      goto LABEL_19;
  }
  v23 = v41;
  swift_getKeyPath();
  v46 = v23;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v24 = v23 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  swift_beginAccess();
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v44(v45, v24, v10);
  v25 = a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
  {
    v27 = v25 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    swift_bridgeObjectRetain();
    v42 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v44(v9, v27, v10);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v28(v9, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
        break;
      v29 = v43;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v43, v9, v10);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v11 + 8);
      v31(v29, v10);
      if ((v30 & 1) != 0)
      {
        a2 = v35;
        swift_bridgeObjectRelease();
        v31(v45, v10);
        swift_release();
        a1 = v36;
        v3 = v37;
        goto LABEL_18;
      }
      v27 += v42;
      if (!--v26)
        goto LABEL_21;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
LABEL_21:
    v28(v9, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v45, v10);
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if ((a4 & 1) == 0)
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v10 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
  }
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v56 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v59 = (char *)&v41 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PKStroke();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v42 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25.n128_f64[0] = MEMORY[0x1E0C80A78](v23, v24);
  v54 = (char *)&v41 - v26;
  v60 = MEMORY[0x1E0DEE9D8];
  v49 = *(_QWORD *)(a1 + 16);
  if (v49)
  {
    v27 = 0;
    v47 = a2;
    v48 = a1;
    v45 = v19;
    v46 = v18;
    v55 = v7;
    v44 = v20;
    v28 = v56;
    while (v27 < *(_QWORD *)(a1 + 16))
    {
      v51 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      v30 = *(_QWORD *)(v20 + 72);
      v53 = v27;
      v50 = v30;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v20 + 16))(v18, a1 + v51 + v30 * v27, v19, v25);
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v43)(v18, 0, 1, v19);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
        goto LABEL_22;
      v52 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v52(v54, v18, v19);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v32 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      v33 = *(_QWORD *)(a2 + 16);
      if (v33)
      {
        v34 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
        swift_bridgeObjectRetain();
        v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
        v57 = *(_QWORD *)(v9 + 72);
        v58 = v35;
        while (1)
        {
          v58(v7, v34, v8);
          v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          v29(v7, 0, 1, v8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v28, v7, v8);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
          v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          v37 = *(void (**)(char *, uint64_t))(v9 + 8);
          v37(v28, v8);
          if ((v36 & 1) != 0)
          {
            a2 = v47;
            swift_bridgeObjectRelease();
            v37(v59, v8);
            v19 = v45;
            v52(v42, v54, v45);
            v38 = v60;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
              v38 = v60;
            }
            v7 = v55;
            v40 = *(_QWORD *)(v38 + 16);
            v39 = *(_QWORD *)(v38 + 24);
            if (v40 >= v39 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
              v38 = v60;
            }
            *(_QWORD *)(v38 + 16) = v40 + 1;
            v52((char *)(v38 + v51 + v40 * v50), v42, v19);
            v60 = v38;
            v20 = v44;
            goto LABEL_6;
          }
          v34 += v57;
          --v33;
          v7 = v55;
          if (!v33)
            goto LABEL_4;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_4:
        v29(v7, 1, 1, v8);
      }
      a2 = v47;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v59, v8);
      v20 = v44;
      v19 = v45;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v54, v45);
LABEL_6:
      v27 = v53 + 1;
      a1 = v48;
      v18 = v46;
      if (v53 + 1 == v49)
      {
        v43(v46, 1, 1, v19, v25);
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v18, 1, 1, v19, v25);
LABEL_22:
    swift_bridgeObjectRelease();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27CHReflowableTextResultTokenCG_8PaperKit10ReflowWordCs5NeverOTg503_s8h5Kit19j39LayoutManagerC7process5lines2inSayAA0C8e54LineVG8contents_Say06PencilB08PKStrokeVG09strokesToC0tr54So012CHReflowableiJ0CG_AA18PKDrawingCoherenceCtFZAA0C4k8CSo0pI11fG6CXEfU_AI18PKDrawingCoherenceCSay0xI00Z0VGAI0jeU0V12CoreGraphics7CGFloatVAYTf1cn_nTf4ngnnnn_n(unint64_t a1, void *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  id v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
    goto LABEL_16;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v9)
      break;
    v20 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v9 < 0)
    {
      __break(1u);
      return result;
    }
    v11 = 0;
    while (v9 != v11)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1DF0E4D64](v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      v18 = v12;
      closure #1 in static ReflowLayoutManager.process(lines:in:)(&v18, a2, a3, a4, a5, a6, &v19);

      if (v6)
        return swift_release();
      ++v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v9 == v11)
        return v20;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ReflowLayoutManager.init(contents:frame:addSpaces:)(unint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  double v39;
  double Height;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t *v49;
  uint64_t v50;
  double v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  CGRect v56;

  v7 = v6;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 80) = MEMORY[0x1E0DEE9D8];
  v12 = (unint64_t *)(v6 + 80);
  *(_QWORD *)(v6 + 88) = v11;
  v13 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v6 + 120) = *MEMORY[0x1E0C9D628];
  *(_QWORD *)(v6 + 96) = v11;
  *(_QWORD *)(v6 + 104) = v11;
  *(_QWORD *)(v6 + 112) = 100;
  *(_OWORD *)(v6 + 136) = v13;
  *(_QWORD *)(v6 + 152) = v11;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 202) = 0u;
  *(_BYTE *)(v6 + 218) = 1;
  *(_QWORD *)(v6 + 224) = 0;
  *(double *)(v6 + 48) = a3;
  *(double *)(v6 + 56) = a4;
  *(double *)(v6 + 64) = a5;
  *(double *)(v6 + 72) = a6;
  *(double *)(v6 + 16) = a3;
  *(double *)(v6 + 24) = a4;
  v14 = a1 >> 62;
  *(double *)(v6 + 32) = a5;
  *(double *)(v6 + 40) = a6;
  if ((a2 & 1) != 0)
  {
    v55 = v11;
    if (v14)
      goto LABEL_36;
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v15)
    {
      do
      {
        if (v15 < 1)
          goto LABEL_82;
        v52 = v14;
        v53 = v7;
        v17 = 0;
        v54 = v15;
        while (1)
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            v11 = MEMORY[0x1DF0E4D64](v17, a1);
          }
          else
          {
            v11 = *(_QWORD *)(a1 + 8 * v17 + 32);
            swift_retain();
          }
          v18 = one-time initialization token for handwritingReflowMinimumSpaceWidth;
          swift_retain();
          if (v18 != -1)
            swift_once();
          v19 = static UIConstants.handwritingReflowMinimumSpaceWidth;
          type metadata accessor for ReflowSpace();
          v20 = swift_allocObject();
          *(_QWORD *)(v20 + 144) = 1;
          *(_BYTE *)(v20 + 137) = 0;
          v22 = UnknownCanvasElementView.flags.modify(v20, v21);
          *(_OWORD *)(v20 + 48) = 0u;
          *(_OWORD *)(v20 + 64) = 0u;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_QWORD *)(v20 + 96) = 0;
          *(double *)(v20 + 104) = v22;
          *(_QWORD *)(v20 + 112) = v23;
          *(_QWORD *)(v20 + 120) = -1;
          *(_QWORD *)(v20 + 128) = 0;
          *(_BYTE *)(v20 + 136) = 0;
          *(_QWORD *)(v20 + 16) = 0;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = v19;
          *(_QWORD *)(v20 + 40) = 0x4000000000000000;
          swift_release();
          if (v55 >> 62)
            break;
          v14 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
          v24 = v14 + 2;
          if (__OFADD__(v14, 2))
            goto LABEL_35;
LABEL_13:
          v25 = 0;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
            || (v55 & 0x8000000000000000) != 0
            || (v55 & 0x4000000000000000) != 0)
          {
            goto LABEL_18;
          }
          if (v24 > *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
          {
            v25 = 1;
LABEL_18:
            if (v55 >> 62)
            {
              swift_bridgeObjectRetain();
              v26 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v26 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            if (v26 <= v24)
              v27 = v24;
            else
              v27 = v26;
            v55 = MEMORY[0x1DF0E4D70](v25, v27, 1, v55);
          }
          specialized Array._endMutation()();
          v28 = swift_retain();
          MEMORY[0x1DF0E4398](v28);
          if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v29 = swift_retain();
          MEMORY[0x1DF0E4398](v29);
          v7 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v7 >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          ++v17;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_release();
          swift_release();
          if (v54 == v17)
          {
            swift_bridgeObjectRelease();
            v30 = v55;
            v14 = v52;
            v7 = v53;
            v11 = MEMORY[0x1E0DEE9D8];
            goto LABEL_38;
          }
        }
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v24 = v14 + 2;
        if (!__OFADD__(v14, 2))
          goto LABEL_13;
LABEL_35:
        __break(1u);
LABEL_36:
        swift_bridgeObjectRetain();
        result = _CocoaArrayWrapper.endIndex.getter();
        v15 = result;
      }
      while (result);
    }
    swift_bridgeObjectRelease();
    v30 = MEMORY[0x1E0DEE9D8];
LABEL_38:
    swift_beginAccess();
    *v12 = v30;
  }
  else
  {
    swift_beginAccess();
    *v12 = a1;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v31 = result;
    if (!result)
      goto LABEL_57;
  }
  else
  {
    v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v31)
      goto LABEL_57;
  }
  if (v31 < 1)
  {
    __break(1u);
    goto LABEL_80;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v31; ++i)
    {
      MEMORY[0x1DF0E4D64](i, a1);
      type metadata accessor for ReflowWord();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    type metadata accessor for ReflowWord();
    for (j = 0; j != v31; ++j)
    {
      if (swift_dynamicCastClass())
      {
        v34 = swift_retain();
        MEMORY[0x1DF0E4398](v34);
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
  }
LABEL_57:
  swift_bridgeObjectRelease();
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v35 = result;
    if (result)
    {
LABEL_59:
      if (v35 >= 1)
      {
        v36 = 0;
        v37 = 0.0;
        do
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            v38 = MEMORY[0x1DF0E4D64](v36, v11);
          }
          else
          {
            v38 = *(_QWORD *)(v11 + 8 * v36 + 32);
            swift_retain();
          }
          v39 = (*(double *)(v38 + 248) + *(double *)(v38 + 264)) * 0.5
              - (*(double *)(v38 + 216) + *(double *)(v38 + 232)) * 0.5;
          objc_msgSend(*(id *)(v38 + 272), sel__canvasBounds);
          Height = CGRectGetHeight(v56);
          swift_release();
          if (v37 <= v39 * Height)
            v37 = v39 * Height;
          ++v36;
        }
        while (v35 != v36);
        swift_bridgeObjectRelease_n();
        v41 = v37 * 1.2;
        goto LABEL_70;
      }
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
  }
  else
  {
    v35 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v35)
      goto LABEL_59;
  }
  swift_bridgeObjectRelease_n();
  v41 = 0.0;
LABEL_70:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1DDF32CF0;
  v44 = UnknownCanvasElementView.flags.modify(v42, v43);
  *(_QWORD *)(v42 + 32) = v11;
  *(_OWORD *)(v42 + 40) = 0u;
  *(_OWORD *)(v42 + 56) = 0u;
  *(_QWORD *)(v42 + 72) = 0;
  *(double *)(v42 + 80) = v44;
  *(_QWORD *)(v42 + 88) = v45;
  *(_QWORD *)(v42 + 96) = 0;
  *(_QWORD *)(v42 + 104) = 0;
  *(double *)(v42 + 112) = v44;
  *(_QWORD *)(v42 + 120) = v45;
  *(_QWORD *)(v42 + 128) = 0;
  *(_QWORD *)(v42 + 136) = 0;
  *(double *)(v42 + 144) = v44;
  *(_QWORD *)(v42 + 152) = v45;
  *(_QWORD *)(v42 + 160) = 0;
  *(_QWORD *)(v42 + 168) = 0;
  *(double *)(v42 + 176) = v41;
  *(_QWORD *)(v42 + 184) = 0;
  swift_beginAccess();
  *(_QWORD *)(v7 + 88) = v42;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 + 104) = v11;
  result = swift_bridgeObjectRelease();
  if (!v31)
    return v7;
  if (v31 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v46 = 0;
      do
      {
        v47 = MEMORY[0x1DF0E4D64](v46++, a1);
        v48 = *(double *)(v47 + 24) - a4;
        *(double *)(v47 + 16) = *(double *)(v47 + 16) - a3;
        *(double *)(v47 + 24) = v48;
        swift_unknownObjectRelease();
      }
      while (v31 != v46);
    }
    else
    {
      v49 = (uint64_t *)(a1 + 32);
      do
      {
        v50 = *v49++;
        v51 = *(double *)(v50 + 24) - a4;
        *(double *)(v50 + 16) = *(double *)(v50 + 16) - a3;
        *(double *)(v50 + 24) = v51;
        --v31;
      }
      while (v31);
    }
    return v7;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
  return result;
}

uint64_t specialized ReflowLayoutManager.closestLine(to:lines:)(uint64_t a1, double a2, double a3)
{
  int64_t v3;
  uint64_t v7;
  _OWORD *v8;
  int64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v45 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  v7 = v45;
  v8 = (_OWORD *)(a1 + 32);
  for (i = v3 - 1; ; --i)
  {
    v10 = v8[7];
    v41 = v8[6];
    v42 = v10;
    v11 = v8[9];
    v43 = v8[8];
    v44 = v11;
    v12 = v8[3];
    v37 = v8[2];
    v38 = v12;
    v13 = v8[5];
    v39 = v8[4];
    v40 = v13;
    v14 = v8[1];
    v36[0] = *v8;
    v36[1] = v14;
    v15 = v43;
    v16 = v37;
    v17 = v38;
    outlined retain of ReflowTextLine((uint64_t)v36);
    outlined release of ReflowTextLine((uint64_t)v36);
    v45 = v7;
    v19 = *(_QWORD *)(v7 + 16);
    v18 = *(_QWORD *)(v7 + 24);
    if (v19 >= v18 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v7 = v45;
    }
    v20 = (*(double *)&v15 + *((double *)&v15 + 1)) * 0.5;
    v21 = sqrt((*(double *)&v17 - *(double *)&v16) * (*(double *)&v17 - *(double *)&v16)+ (*((double *)&v17 + 1) - *((double *)&v16 + 1)) * (*((double *)&v17 + 1) - *((double *)&v16 + 1)));
    v22 = v20 * ((*((double *)&v17 + 1) - *((double *)&v16 + 1)) / v21);
    v23 = v20 * (-(*(double *)&v17 - *(double *)&v16) / v21);
    v24 = *(double *)&v16 + v22;
    v25 = *((double *)&v16 + 1) + v23;
    v26 = *(double *)&v17 + v22 - (*(double *)&v16 + v22);
    v27 = *((double *)&v17 + 1) + v23 - (*((double *)&v16 + 1) + v23);
    v28 = ((a2 - v24) * v26 + (a3 - v25) * v27) / (v26 * v26 + v27 * v27);
    *(_QWORD *)(v7 + 16) = v19 + 1;
    *(double *)(v7 + 8 * v19 + 32) = sqrt((v24 + v26 * v28 - a2) * (v24 + v26 * v28 - a2)+ (v25 + v27 * v28 - a3) * (v25 + v27 * v28 - a3))- v20;
    if (!i)
      break;
    v8 += 10;
  }
  if (v19)
  {
    v29 = 0;
    v30 = 0;
    v31 = *(double *)(v7 + 32);
    v32 = v7 + 40;
    do
    {
      v33 = *(double *)(v32 + 8 * v29);
      if (v33 < v31)
        v30 = v29 + 1;
      v34 = v29 + 1;
      if (v33 < v31)
        v31 = *(double *)(v32 + 8 * v29);
      ++v29;
    }
    while (v19 != v34);
  }
  else
  {
    v30 = 0;
  }
  swift_release();
  return v30;
}

uint64_t outlined retain of ReflowTextLine(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ReflowTextLine(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

char *specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v7 = *v3;
  v8 = v7 + 32 + 8 * a1;
  type metadata accessor for ReflowElement();
  result = (char *)swift_arrayDestroy();
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v11)
    goto LABEL_14;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_18;
  if (v13 < 0)
  {
LABEL_21:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 8 * a3);
  v14 = (char *)(v7 + 32 + 8 * a2);
  if (result != v14 || result >= &v14[8 * v13])
    result = (char *)memmove(result, v14, 8 * v13);
  v16 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v16, v11);
  v17 = v16 + v11;
  if (v10)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v17;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v7 = *v3;
  v8 = v7 + 32 + 160 * a1;
  result = (char *)swift_arrayDestroy();
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v11)
    goto LABEL_11;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_15;
  if (v13 < 0)
  {
LABEL_18:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 160 * a3);
  v14 = (char *)(v7 + 32 + 160 * a2);
  if (result != v14 || result >= &v14[160 * v13])
    result = (char *)memmove(result, v14, 160 * v13);
  v15 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v15, v11);
  v16 = v15 + v11;
  if (v10)
    goto LABEL_16;
  *(_QWORD *)(v7 + 16) = v16;
LABEL_11:
  if (a3 > 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

_QWORD *specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = v3 - v2;
  if (__OFSUB__(v3, v2))
    goto LABEL_56;
  v5 = result[4];
  v6 = result[3] >> 1;
  if (v5 == v6)
    return result;
  v39 = result[2];
  if (v5 < v39 || v5 >= v6)
    goto LABEL_57;
  v8 = v5 + 1;
  v33 = result[1];
  v9 = *(_QWORD *)(v33 + 8 * v5);
  result = (_QWORD *)swift_retain();
  v32 = v6 - 1;
  v34 = v6;
  while (1)
  {
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
      break;
    v40 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    v11 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v40, v4, 0, v11);
    swift_release();
    result = (_QWORD *)swift_release();
    v13 = *(_QWORD *)(v1 + 16);
    v12 = *(_QWORD *)(v1 + 24);
    v36 = v12 >> 1;
    v14 = (v12 >> 1) - v13;
    if (__OFSUB__(v12 >> 1, v13))
      goto LABEL_50;
    v37 = v9;
    v15 = *(_QWORD *)(v1 + 8);
    if ((v12 & 1) != 0)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      v16 = swift_dynamicCastClass();
      if (!v16)
      {
        swift_unknownObjectRelease();
        v16 = MEMORY[0x1E0DEE9D8];
      }
      v17 = *(_QWORD *)(v16 + 16);
      if (v15 + 8 * v13 + 8 * v14 == v16 + 8 * v17 + 32)
      {
        v21 = v12;
        v22 = *(_QWORD *)(v16 + 24);
        result = (_QWORD *)swift_release();
        v23 = (v22 >> 1) - v17;
        v18 = v14 + v23;
        if (__OFADD__(v14, v23))
          goto LABEL_55;
        LOBYTE(v12) = v21;
        if (v4 >= v18)
        {
LABEL_25:
          v9 = v37;
          v19 = __OFSUB__(v4, v14);
          v20 = v4 - v14;
          if (v19)
            goto LABEL_51;
          goto LABEL_39;
        }
      }
      else
      {
        result = (_QWORD *)swift_release();
        v18 = (v12 >> 1) - v13;
        if (v4 >= v14)
          goto LABEL_25;
      }
    }
    else
    {
      v18 = (v12 >> 1) - v13;
      if (v4 >= v14)
        goto LABEL_25;
    }
    *(_QWORD *)(v15 + 8 * v13 + 8 * v4) = v37;
    if (v8 == v34)
    {
      v9 = 0;
      ++v4;
      v8 = v34;
      v19 = __OFSUB__(v10, v14);
      v20 = v10 - v14;
      if (v19)
        goto LABEL_51;
    }
    else
    {
      v38 = v18;
      v35 = v4;
      if (v8 < v39 || v8 >= v34)
      {
LABEL_48:
        __break(1u);
        break;
      }
      v24 = 0;
      v25 = v15 + 8 * v4 + 8 * v13 + 8;
      v26 = v33 + 8 * v8;
      v27 = v8 + 1;
      while (1)
      {
        if (~v35 + v38 == v24)
        {
          v4 = v38;
          v8 += v24 + 1;
          v9 = *(_QWORD *)(v26 + 8 * v24);
          goto LABEL_38;
        }
        *(_QWORD *)(v25 + 8 * v24) = *(_QWORD *)(v26 + 8 * v24);
        if (v32 - v8 == v24)
          break;
        v28 = v27 + v24;
        result = (_QWORD *)swift_retain();
        if (v27 + v24 >= v39)
        {
          ++v24;
          if (v28 < v34)
            continue;
        }
        goto LABEL_48;
      }
      v9 = 0;
      v4 = v35 + v24 + 2;
      v8 = v34;
LABEL_38:
      result = (_QWORD *)swift_retain();
      v19 = __OFSUB__(v4, v14);
      v20 = v4 - v14;
      if (v19)
        goto LABEL_51;
    }
LABEL_39:
    if (v20)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      result = (_QWORD *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v29 = result[2];
      v19 = __OFADD__(v29, v20);
      v30 = v29 + v20;
      if (v19)
        goto LABEL_52;
      result[2] = v30;
      result = (_QWORD *)swift_release();
      v31 = v36 + v20;
      if (__OFADD__(v36, v20))
        goto LABEL_53;
      if (v31 < 0)
        goto LABEL_54;
      *(_QWORD *)(v1 + 24) = v12 & 1 | (2 * v31);
    }
    if (!v9)
      return result;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

_QWORD *specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v35[5];

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v15 = v9;
    goto LABEL_10;
  }
  v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(v13 + 24);
  swift_release();
  v17 = (v16 >> 1) - v14;
  v18 = __OFADD__(v9, v17);
  v15 = v9 + v17;
  if (v18)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v19 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v15 < v19)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v20 = 2 * v15;
    if (v20 > v19)
      v19 = v20;
  }
  result = (_QWORD *)specialized ArraySlice.reserveCapacity(_:)(v19);
  v23 = v4[2];
  v22 = v4[3];
  v24 = (v22 >> 1) - v23;
  if (__OFSUB__(v22 >> 1, v23))
    goto LABEL_40;
  v25 = v4[1] + 8 * v23 + 8 * v24;
  if ((v22 & 1) == 0)
  {
LABEL_21:
    v28 = v24;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_unknownObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
  }
  v27 = *(_QWORD *)(v26 + 16);
  if (v25 != v26 + 8 * v27 + 32)
  {
    result = (_QWORD *)swift_release();
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(v26 + 24);
  result = (_QWORD *)swift_release();
  v30 = (v29 >> 1) - v27;
  v18 = __OFADD__(v24, v30);
  v28 = v24 + v30;
  if (v18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v31 = v28 - v24;
  if (__OFSUB__(v28, v24))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v31 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
    goto LABEL_48;
  v32 = a2 + 8 * a3;
  if (v32 < v25 + 8 * v6 && v25 < v32 + 8 * v6)
    goto LABEL_48;
  type metadata accessor for ReflowElement();
  result = (_QWORD *)swift_arrayInitWithCopy();
  if (v6)
  {
    if (__OFADD__(v24, v6))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    result = (_QWORD *)specialized _SliceBuffer.count.setter(v24 + v6);
  }
LABEL_34:
  if (v6 == v31)
  {
    v35[0] = a1;
    v35[1] = a2;
    v35[2] = a3;
    v35[3] = a4;
    v35[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v35);
  }
  return result;
}

uint64_t specialized static ReflowLayoutManager.process(lines:in:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __objc2_prot_list **p_base_prots;
  char **v7;
  _QWORD *v8;
  id v9;
  void *v10;
  BOOL v11;
  unint64_t v12;
  double tx;
  double ty;
  CGPoint v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGPoint v21;
  CGPoint v22;
  CGPoint v23;
  CGPoint v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGPoint v32;
  CGPoint v33;
  double a;
  double b;
  double c;
  double d;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  CGPoint v45;
  CGPoint v46;
  double v47;
  double v48;
  double v49;
  id v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  double v54;
  double v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  double *v71;
  CGFloat v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  CGPoint v83;
  CGPoint v84;
  CGPoint v85;
  CGPoint v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  double MaxX;
  double MinX;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  CGFloat v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t result;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  CGFloat v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  unint64_t v120;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  double v126;
  uint64_t v127;
  CGFloat v128;
  CGFloat v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  int64_t v133;
  CGFloat v134;
  uint64_t v135;
  CGFloat v136;
  unint64_t v137;
  CGAffineTransform v138;
  CGPoint v139;
  CGPoint v140;
  CGPoint v141;
  CGPoint v142;
  CGPoint v143;
  __int128 v144;
  __int128 v145;
  double v146;
  double v147;
  double v148[4];
  CGPoint v149;
  CGPoint v150;
  uint64_t v151;
  CGPoint v152;
  CGPoint v153;
  CGPoint v154;
  CGPoint v155;
  CGPoint v156;
  CGPoint v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;

  v2 = a1;
  v151 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_112;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    v4 = 0;
    v5 = 0;
    v120 = v2 & 0xC000000000000001;
    v112 = v2 + 32;
    v113 = v2 & 0xFFFFFFFFFFFFFF8;
    v118 = *(double *)(MEMORY[0x1E0C9BAA8] + 8);
    v119 = *MEMORY[0x1E0C9BAA8];
    v116 = *(double *)(MEMORY[0x1E0C9BAA8] + 24);
    v117 = *(double *)(MEMORY[0x1E0C9BAA8] + 16);
    v128 = *(double *)(MEMORY[0x1E0C9BAA8] + 40);
    v129 = *(double *)(MEMORY[0x1E0C9BAA8] + 32);
    p_base_prots = &MiniMenuController.base_prots;
    v7 = &selRef_setCanvasWidth_;
    v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v114 = v3;
    v115 = v2;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_4:
      v9 = (id)MEMORY[0x1DF0E4D64](v4, v2);
      goto LABEL_7;
    }
    while (1)
    {
      if (v4 >= *(_QWORD *)(v113 + 16))
        goto LABEL_108;
      v9 = *(id *)(v112 + 8 * v4);
LABEL_7:
      v10 = v9;
      v11 = __OFADD__(v4, 1);
      v12 = v4 + 1;
      if (v11)
        goto LABEL_102;
      v146 = 0.0;
      v147 = 0.0;
      objc_msgSend(v9, sel_principalLines);
      tx = v138.tx;
      ty = v138.ty;
      v15 = v139;
      objc_msgSend(v10, (SEL)p_base_prots[164]);
      v152.x = denormalizePrincipalLine(tx, ty, v15.x, v15.y, v16, v17, v18);
      v134 = v20;
      v136 = v19;
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v21 = CGPointApplyAffineTransform(v152, &v138);
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v153.y = v134;
      v153.x = v136;
      v22 = CGPointApplyAffineTransform(v153, &v138);
      v149 = v21;
      v150 = v22;
      objc_msgSend(v10, sel_principalLines);
      v23 = v142;
      v24 = v143;
      objc_msgSend(v10, (SEL)p_base_prots[164]);
      v154.x = denormalizePrincipalLine(v23.x, v23.y, v24.x, v24.y, v25, v26, v27);
      v29 = v28;
      v31 = v30;
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v32 = CGPointApplyAffineTransform(v154, &v138);
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v155.x = v29;
      v155.y = v31;
      v33 = CGPointApplyAffineTransform(v155, &v138);
      objc_msgSend(v10, sel_principalLines);
      a = v138.a;
      b = v138.b;
      c = v138.c;
      d = v138.d;
      objc_msgSend(v10, (SEL)p_base_prots[164]);
      v156.x = denormalizePrincipalLine(a, b, c, d, v38, v39, v40);
      v42 = v41;
      v44 = v43;
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v45 = CGPointApplyAffineTransform(v156, &v138);
      v138.a = v119;
      v138.b = v118;
      v138.c = v117;
      v138.d = v116;
      v138.tx = v129;
      v138.ty = v128;
      v157.x = v42;
      v157.y = v44;
      v46 = CGPointApplyAffineTransform(v157, &v138);
      objc_msgSend(v10, v7[340]);
      v48 = v47;
      objc_msgSend(v10, (SEL)p_base_prots[164]);
      if (CGRectGetHeight(v158) >= v48)
      {
        objc_msgSend(v10, (SEL)p_base_prots[164]);
        v49 = CGRectGetHeight(v159) * 1.2;
      }
      else
      {
        objc_msgSend(v10, v7[340]);
      }
      v126 = v49;
      v50 = objc_msgSend(v10, sel_tokens, v112);
      type metadata accessor for CHReflowableTextResultToken();
      v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v52 = a2;
      v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27CHReflowableTextResultTokenCG_8PaperKit10ReflowWordCs5NeverOTg503_s8h5Kit19j39LayoutManagerC7process5lines2inSayAA0C8e54LineVG8contents_Say06PencilB08PKStrokeVG09strokesToC0tr54So012CHReflowableiJ0CG_AA18PKDrawingCoherenceCtFZAA0C4k8CSo0pI11fG6CXEfU_AI18PKDrawingCoherenceCSay0xI00Z0VGAI0jeU0V12CoreGraphics7CGFloatVAYTf1cn_nTf4ngnnnn_n(v51, v52, (uint64_t)&v151, v148, &v147, &v146);
      swift_bridgeObjectRelease();

      v54 = v146;
      v55 = v147;
      if (v146 > v147)
      {
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3)
          break;
        goto LABEL_3;
      }
      v125 = v10;
      v56 = objc_msgSend(v10, sel_hasEndingLineBreak);
      v57 = (unint64_t)v53 >> 62;
      if (!v56)
        goto LABEL_21;
      if (v57)
      {
        swift_bridgeObjectRetain();
        v58 = _CocoaArrayWrapper.endIndex.getter();
        if (v58)
        {
LABEL_15:
          v59 = v58 - 1;
          if (__OFSUB__(v58, 1))
            goto LABEL_109;
          if ((v53 & 0xC000000000000001) != 0)
          {
            v60 = MEMORY[0x1DF0E4D64](v59, v53);
          }
          else
          {
            if ((v59 & 0x8000000000000000) != 0)
              goto LABEL_110;
            if (v59 >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_111;
            v60 = *(_QWORD *)(v53 + 8 * v59 + 32);
            swift_retain();
          }
          swift_bridgeObjectRelease();
          *(_BYTE *)(v60 + 136) = 1;
          swift_release();
LABEL_21:
          if (!v57)
            goto LABEL_22;
          goto LABEL_92;
        }
      }
      else
      {
        v58 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v58)
          goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      if (!v57)
      {
LABEL_22:
        v61 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v61)
          goto LABEL_104;
        swift_bridgeObjectRetain();
        goto LABEL_24;
      }
LABEL_92:
      swift_bridgeObjectRetain_n();
      v61 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v61 < 1)
      {
        __break(1u);
LABEL_116:
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v110 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v110 < 1)
        goto LABEL_116;
      swift_bridgeObjectRetain();
      v111 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v111 < v61)
        goto LABEL_105;
LABEL_24:
      v137 = v53 & 0xC000000000000001;
      if ((v53 & 0xC000000000000001) != 0 && v61 != 1)
      {
        type metadata accessor for ReflowWord();
        v62 = 1;
        do
        {
          v63 = v62 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v62);
          v62 = v63;
        }
        while (v61 != v63);
      }
      v122 = v8;
      v123 = v5;
      v124 = v12;
      if (v57)
      {
        if (v53 < 0)
          v2 = v53;
        else
          v2 = v53 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.subscript.getter();
        v64 = v67;
        v135 = v68;
        v65 = v69;
        swift_bridgeObjectRelease_n();
        *(_QWORD *)&v138.a = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        v70 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v70)
        {
LABEL_35:
          if (v137)
          {
            v71 = (double *)MEMORY[0x1DF0E4D64](0, v53);
          }
          else
          {
            if (!*(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_107;
            v71 = *(double **)(v53 + 32);
            swift_retain();
          }
          v132 = (v65 >> 1) - v135;
          v133 = v65 >> 1;
          if (v65 >> 1 == v135)
          {
LABEL_39:
            swift_release();
            goto LABEL_40;
          }
          if (v57)
          {
            v127 = v53 & 0xFFFFFFFFFFFFFF8;
            if (v53 < 0)
              v2 = v53;
            else
              v2 = v53 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain();
            v88 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v127 = v53 & 0xFFFFFFFFFFFFFF8;
            v88 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          v89 = 0;
          v130 = v88 - 1;
          v131 = v64 + 8 * v135;
          while (2)
          {
            if (v135 + v89 >= v133)
            {
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
            v90 = *(_QWORD *)(v131 + 8 * v89);
            v91 = v71[2];
            v92 = v71[3];
            v94 = v71[4];
            v93 = v71[5];
            swift_retain();
            swift_retain();
            v160.origin.x = v91;
            v160.origin.y = v92;
            v160.size.width = v94;
            v160.size.height = v93;
            MaxX = CGRectGetMaxX(v160);
            MinX = CGRectGetMinX(*(CGRect *)(v90 + 16));
            type metadata accessor for ReflowSpace();
            v97 = swift_allocObject();
            *(_QWORD *)(v97 + 144) = 1;
            *(_BYTE *)(v97 + 137) = 0;
            v99 = UnknownCanvasElementView.flags.modify(v97, v98);
            *(_OWORD *)(v97 + 48) = 0u;
            *(_OWORD *)(v97 + 64) = 0u;
            *(_OWORD *)(v97 + 80) = 0u;
            *(_QWORD *)(v97 + 96) = 0;
            *(double *)(v97 + 104) = v99;
            *(_QWORD *)(v97 + 112) = v100;
            *(_QWORD *)(v97 + 120) = -1;
            *(_QWORD *)(v97 + 128) = 0;
            *(_BYTE *)(v97 + 136) = 0;
            *(double *)(v97 + 16) = MaxX;
            *(_QWORD *)(v97 + 24) = 0;
            *(double *)(v97 + 32) = MinX - MaxX;
            *(_QWORD *)(v97 + 40) = 0x4000000000000000;
            swift_release();
            swift_release();
            v101 = v138.a;
            v102 = *(_QWORD *)&v138.a >> 62;
            if (*(_QWORD *)&v138.a >> 62)
            {
              swift_bridgeObjectRetain();
              v2 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              v103 = v2 + 2;
              if (__OFADD__(v2, 2))
                goto LABEL_99;
            }
            else
            {
              v2 = *(_QWORD *)((*(_QWORD *)&v138.a & 0xFFFFFFFFFFFFF8) + 0x10);
              v103 = v2 + 2;
              if (__OFADD__(v2, 2))
                goto LABEL_99;
            }
            v104 = 0;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
              || (*(_QWORD *)&v101 & 0x8000000000000000) != 0
              || (*(_QWORD *)&v101 & 0x4000000000000000) != 0)
            {
LABEL_65:
              if (v102)
              {
                swift_bridgeObjectRetain();
                v2 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v2 = *(_QWORD *)((*(_QWORD *)&v101 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              if (v2 <= v103)
                v105 = v103;
              else
                v105 = v2;
              *(_QWORD *)&v138.a = MEMORY[0x1DF0E4D70](v104, v105, 1, *(_QWORD *)&v101);
            }
            else if (v103 > *(_QWORD *)((*(_QWORD *)&v101 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1)
            {
              v104 = 1;
              goto LABEL_65;
            }
            specialized Array._endMutation()();
            v106 = swift_retain();
            MEMORY[0x1DF0E4398](v106);
            if (*(_QWORD *)((*(_QWORD *)&v138.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v138.a & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v107 = swift_retain();
            MEMORY[0x1DF0E4398](v107);
            if (*(_QWORD *)((*(_QWORD *)&v138.a & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v138.a & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
            swift_release();
            if (v130 == v89)
              break;
            v108 = v89 + 1;
            if (v137)
            {
              v71 = (double *)MEMORY[0x1DF0E4D64](v89 + 1, v53);
              if (__OFADD__(v108, 1))
                goto LABEL_100;
            }
            else
            {
              if (v108 >= *(_QWORD *)(v127 + 16))
                goto LABEL_101;
              v71 = *(double **)(v53 + 8 * v89 + 40);
              swift_retain();
              if (__OFADD__(v108, 1))
                goto LABEL_100;
            }
            if (v132 == ++v89)
              goto LABEL_39;
            continue;
          }
        }
      }
      else
      {
        v64 = (v53 & 0xFFFFFFFFFFFFFF8) + 32;
        v65 = (2 * v61) | 1;
        *(_QWORD *)&v138.a = MEMORY[0x1E0DEE9D8];
        v66 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        v135 = 1;
        if (v66)
          goto LABEL_35;
      }
LABEL_40:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v72 = v138.a;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v73 = v61 - 1;
      if (v137)
      {
        swift_bridgeObjectRetain();
        MEMORY[0x1DF0E4D64](v61 - 1, v53);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v76 = swift_allocObject();
        *(_OWORD *)(v76 + 16) = xmmword_1DDF35440;
        v77 = MEMORY[0x1DF0E4D64](v61 - 1, v53);
        v74 = v114;
        v2 = v115;
        v5 = v123;
        v4 = v124;
        v75 = v125;
      }
      else
      {
        v74 = v114;
        v2 = v115;
        v5 = v123;
        v4 = v124;
        v75 = v125;
        if (v73 >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_106;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v76 = swift_allocObject();
        *(_OWORD *)(v76 + 16) = xmmword_1DDF35440;
        v77 = *(_QWORD *)(v53 + 8 * v73 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)(v76 + 32) = v77;
      *(_QWORD *)&v138.a = v76;
      specialized Array._endMutation()();
      specialized Array.append<A>(contentsOf:)(*(unint64_t *)&v138.a);
      v138.a = v72;
      memset(&v138.b, 0, 24);
      *(CGPoint *)&v138.tx = v21;
      v139 = v22;
      v140 = v32;
      v141 = v33;
      v142 = v45;
      v143 = v46;
      *(double *)&v144 = v54;
      *((double *)&v144 + 1) = v55;
      v145 = *(unint64_t *)&v126;
      outlined retain of ReflowTextLine((uint64_t)&v138);
      v8 = v122;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122[2] + 1, 1, v122);
      v7 = &selRef_setCanvasWidth_;
      v79 = v8[2];
      v78 = v8[3];
      if (v79 >= v78 >> 1)
        v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v78 > 1), v79 + 1, 1, v8);
      v8[2] = v79 + 1;
      v80 = &v8[20 * v79];
      v81 = *(_OWORD *)&v138.c;
      v80[2] = *(_OWORD *)&v138.a;
      v80[3] = v81;
      v82 = *(_OWORD *)&v138.tx;
      v83 = v139;
      v84 = v141;
      v80[6] = v140;
      v80[7] = v84;
      v80[4] = v82;
      v80[5] = v83;
      v85 = v142;
      v86 = v143;
      v87 = v145;
      v80[10] = v144;
      v80[11] = v87;
      v80[8] = v85;
      v80[9] = v86;

      outlined release of ReflowTextLine((uint64_t)&v138);
      if (v4 == v74)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v8;
      }
      p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
      if (v120)
        goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(uint64_t result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD v72[10];
  _BYTE v73[160];
  uint64_t v74[20];
  uint64_t v75;
  _BYTE v76[160];
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  v3 = v2[3];
  v62 = v2[2];
  v4 = (v3 >> 1) - v62;
  if (__OFSUB__(v3 >> 1, v62))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v5 = a2;
  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 == a2)
  {
    _s8PaperKit14ReflowTextLineVSgWOi0_(v77);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v77, (uint64_t)&v86, &demangling cache variable for type metadata for ReflowTextLine?);
  }
  else
  {
    if (v7 <= a2)
    {
LABEL_53:
      __break(1u);
      return result;
    }
    v8 = (_OWORD *)(result + 160 * a2);
    v9 = v8[9];
    v10 = v8[7];
    v82 = v8[8];
    v83 = v9;
    v11 = v8[9];
    v12 = v8[11];
    v84 = v8[10];
    v85 = v12;
    v13 = v8[5];
    v14 = v8[3];
    v78 = v8[4];
    v79 = v13;
    v15 = v8[5];
    v16 = v8[7];
    v80 = v8[6];
    v81 = v16;
    v17 = v8[3];
    v77[0] = v8[2];
    v77[1] = v17;
    v92 = v82;
    v93 = v11;
    v18 = v8[11];
    v94 = v84;
    v95 = v18;
    v88 = v78;
    v89 = v15;
    v90 = v80;
    v91 = v10;
    v5 = a2 + 1;
    v86 = v77[0];
    v87 = v14;
    UnknownCanvasElementView.flags.modify(&v86, a2);
    outlined retain of ReflowTextLine((uint64_t)v77);
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v76, &demangling cache variable for type metadata for ReflowTextLine?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for ReflowTextLine?);
  result = _s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v77);
  if ((_DWORD)result != 1)
  {
    v59 = v2;
    while (!__OFADD__(v4, 1))
    {
      v75 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *v2, v2[1], v62, v3);
      v19 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
      specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v75, v4, 0, v19);
      swift_release();
      result = swift_release();
      v20 = v2[2];
      v21 = v2[3];
      v62 = v20;
      v22 = (v21 >> 1) - v20;
      if (__OFSUB__(v21 >> 1, v20))
        goto LABEL_45;
      v23 = v2[1];
      v61 = v2[3];
      v60 = v21 >> 1;
      if ((v21 & 1) != 0)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        v24 = swift_dynamicCastClass();
        if (!v24)
        {
          swift_unknownObjectRelease();
          v24 = MEMORY[0x1E0DEE9D8];
        }
        v25 = *(_QWORD *)(v24 + 16);
        if (v23 + 160 * v62 + 160 * v22 == v24 + 160 * v25 + 32)
        {
          v27 = *(_QWORD *)(v24 + 24);
          result = swift_release();
          v28 = (v27 >> 1) - v25;
          v26 = v22 + v28;
          if (__OFADD__(v22, v28))
            goto LABEL_51;
        }
        else
        {
          swift_release();
          v26 = v22;
        }
      }
      else
      {
        v26 = (v21 >> 1) - v20;
      }
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v73, &demangling cache variable for type metadata for ReflowTextLine?);
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for ReflowTextLine?);
      result = _s8PaperKit14ReflowTextLineVSgWOg(v74);
      if ((_DWORD)result != 1 && v4 < v26)
      {
        if (v5 <= v7)
          v29 = v7;
        else
          v29 = v5;
        v58 = v29;
        v30 = v23 + 160 * v62;
        do
        {
          v31 = v30;
          v32 = (_OWORD *)(v30 + 160 * v4);
          v33 = v4 + 1;
          while (1)
          {
            v4 = v33;
            result = outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v73, (uint64_t)v72, &demangling cache variable for type metadata for ReflowTextLine?);
            v35 = v72[1];
            *v32 = v72[0];
            v32[1] = v35;
            v36 = v72[5];
            v38 = v72[2];
            v37 = v72[3];
            v32[4] = v72[4];
            v32[5] = v36;
            v32[2] = v38;
            v32[3] = v37;
            v39 = v72[9];
            v41 = v72[6];
            v40 = v72[7];
            v32[8] = v72[8];
            v32[9] = v39;
            v32[6] = v41;
            v32[7] = v40;
            if (v5 != v7)
              break;
            _s8PaperKit14ReflowTextLineVSgWOi0_(v63);
            outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v63, (uint64_t)&v86, &demangling cache variable for type metadata for ReflowTextLine?);
            outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v73, &demangling cache variable for type metadata for ReflowTextLine?);
            outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for ReflowTextLine?);
            result = _s8PaperKit14ReflowTextLineVSgWOg(v74);
            if ((_DWORD)result != 1)
            {
              v32 += 10;
              v33 = v4 + 1;
              if (v4 < v26)
                continue;
            }
            v5 = v7;
            goto LABEL_35;
          }
          if (v5 == v58)
            goto LABEL_50;
          v42 = (_OWORD *)(v6 + 32 + 160 * v5);
          v43 = v42[7];
          v44 = v42[5];
          v68 = v42[6];
          v69 = v43;
          v45 = v42[7];
          v46 = v42[9];
          v70 = v42[8];
          v71 = v46;
          v47 = v42[3];
          v48 = v42[1];
          v64 = v42[2];
          v65 = v47;
          v49 = v42[3];
          v50 = v42[5];
          v66 = v42[4];
          v67 = v50;
          v51 = v42[1];
          v63[0] = *v42;
          v63[1] = v51;
          v92 = v68;
          v93 = v45;
          v52 = v42[9];
          v94 = v70;
          v95 = v52;
          v88 = v64;
          v89 = v49;
          v90 = v66;
          v91 = v44;
          ++v5;
          v86 = v63[0];
          v87 = v48;
          UnknownCanvasElementView.flags.modify(&v86, v34);
          outlined retain of ReflowTextLine((uint64_t)v63);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v73, &demangling cache variable for type metadata for ReflowTextLine?);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for ReflowTextLine?);
          result = _s8PaperKit14ReflowTextLineVSgWOg(v74);
          if ((_DWORD)result == 1)
            break;
          v30 = v31;
        }
        while (v4 < v26);
      }
LABEL_35:
      v53 = __OFSUB__(v4, v22);
      v54 = v4 - v22;
      if (v53)
        goto LABEL_46;
      v2 = v59;
      if (v54)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain();
        result = swift_dynamicCastClass();
        if (!result)
        {
          swift_unknownObjectRelease();
          result = MEMORY[0x1E0DEE9D8];
        }
        v55 = *(_QWORD *)(result + 16);
        v53 = __OFADD__(v55, v54);
        v56 = v55 + v54;
        if (v53)
          goto LABEL_47;
        *(_QWORD *)(result + 16) = v56;
        result = swift_release();
        v57 = v60 + v54;
        if (__OFADD__(v60, v54))
          goto LABEL_48;
        if ((v57 & 0x8000000000000000) != 0)
          goto LABEL_49;
        v61 = v61 & 1 | (2 * v57);
        v59[3] = v61;
      }
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v86, (uint64_t)v76, &demangling cache variable for type metadata for ReflowTextLine?);
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v76, (uint64_t)v77, &demangling cache variable for type metadata for ReflowTextLine?);
      result = _s8PaperKit14ReflowTextLineVSgWOg((uint64_t *)v77);
      v3 = v61;
      if ((_DWORD)result == 1)
        return result;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  return result;
}

uint64_t specialized ArraySlice.append<A>(contentsOf:)(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;

  v3 = v1[2];
  v2 = v1[3];
  v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_37;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if ((v2 & 1) == 0)
    goto LABEL_7;
  v7 = v1[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  if (v7 + 160 * v3 + 160 * v4 != v8 + 160 * v9 + 32)
  {
    swift_release();
LABEL_7:
    v10 = v4;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v8 + 24);
  swift_release();
  v12 = (v11 >> 1) - v9;
  v13 = __OFADD__(v4, v12);
  v10 = v4 + v12;
  if (v13)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_9:
  v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v15 = 2 * v10;
    if (v15 > v14)
      v14 = v15;
  }
  result = specialized ArraySlice.reserveCapacity(_:)(v14);
  v18 = v1[2];
  v17 = v1[3];
  v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18))
    goto LABEL_38;
  v20 = v1[1] + 160 * v18 + 160 * v19;
  if ((v17 & 1) == 0)
  {
LABEL_20:
    v23 = v19;
    goto LABEL_22;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v22 = *(_QWORD *)(v21 + 16);
  if (v20 != v21 + 160 * v22 + 32)
  {
    result = swift_release();
    goto LABEL_20;
  }
  v24 = *(_QWORD *)(v21 + 24);
  result = swift_release();
  v25 = (v24 >> 1) - v22;
  v13 = __OFADD__(v19, v25);
  v23 = v19 + v25;
  if (v13)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_22:
  v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!v6)
    goto LABEL_33;
  if (v26 < v6)
    goto LABEL_40;
  if (a1 + 32 < v20 + 160 * v6 && v20 < a1 + 32 + 160 * v6)
    goto LABEL_45;
  result = swift_arrayInitWithCopy();
  if (v6 > 0)
  {
    if (!__OFADD__(v19, v6))
    {
      result = specialized _SliceBuffer.count.setter(v19 + v6);
      goto LABEL_33;
    }
    goto LABEL_42;
  }
LABEL_33:
  if (v6 == v26)
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(a1, v6);
  return result;
}

uint64_t outlined release of (ReflowTextLine, ReflowTextLine)(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

double _s8PaperKit14ReflowTextLineV_ACtSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined retain of (ReflowTextLine, ReflowTextLine)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s8PaperKit14ReflowTextLineVSgWOg(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double _s8PaperKit14ReflowTextLineVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double denormalizePrincipalLine(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  if (a7 == 0.0)
    a7 = 1.0;
  return a5 + a1 * a7;
}

unint64_t type metadata accessor for CHReflowableTextResultToken()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CHReflowableTextResultToken;
  if (!lazy cache variable for type metadata for CHReflowableTextResultToken)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CHReflowableTextResultToken);
  }
  return result;
}

uint64_t sub_1DDC72054()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReflowWord.generateImage()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ReflowWord.generateImage()(a1, v4, v5, v6);
}

BOOL partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:)()
{
  uint64_t v0;

  return specialized Ref<>.containsStrokes<A>(_:in:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined retain of [ReflowElement](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of [ReflowElement](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of ReflowSpacingAdjustment?(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t outlined release of ReflowSpacingAdjustment?(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t partial apply for specialized closure #1 in Ref<>.containsStrokes<A>(_:in:)()
{
  return partial apply for specialized closure #1 in PKDrawingStruct.containsStrokes<A>(_:in:)() & 1;
}

uint64_t type metadata completion function for CanvasViewRulerHostingDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasViewRulerHostingDelegate.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

void __swiftcall CanvasViewRulerHostingDelegate.rulerHostingView()(UIView_optional *__return_ptr retstr)
{
  uint64_t v1;

  if (!MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasViewRulerHostingDelegate.canvas))
    __break(1u);
}

id @objc CanvasViewRulerHostingDelegate.rulerHostingView()@<X0>(UIView_optional *a1@<X8>)
{
  id v1;

  CanvasViewRulerHostingDelegate.rulerHostingView()(a1);
  return v1;
}

void @objc CanvasViewRulerHostingDelegate.init()()
{
  specialized CanvasViewRulerHostingDelegate.init()();
}

id CanvasViewRulerHostingDelegate.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasViewRulerHostingDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasViewRulerHostingDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasViewRulerHostingDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasViewRulerHostingDelegate);
}

id specialized CanvasViewRulerHostingDelegate.init(canvas:)()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2 = (objc_class *)type metadata accessor for CanvasViewRulerHostingDelegate(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasViewRulerHostingDelegate.__allocating_init(canvas:)()
{
  uint64_t *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CanvasViewRulerHostingDelegate(0, v0[10], v0[11], v0[12]));
  return specialized CanvasViewRulerHostingDelegate.init(canvas:)();
}

void specialized CanvasViewRulerHostingDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

char *SignatureCreationViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  uint64_t v5;
  id v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  id v17;
  objc_super v19;

  swift_bridgeObjectRelease();
  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize] = xmmword_1DDF3A640;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_downArrowImagePadding] = 0x4020000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonBottomPadding] = 0x402C000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonImagePadding] = 0x4020000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineInset] = 0x4040000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLinePadding] = 0x4028000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureMarkPadding] = 0x4020000000000000;
  v5 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v7 = v3;
  *(_QWORD *)&v3[v5] = objc_msgSend(v6, sel_initWithWhite_alpha_, 0.6, 0.7);
  v8 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration;
  v9 = (void *)objc_opt_self();
  *(_QWORD *)&v7[v8] = objc_msgSend(v9, sel_configurationWithScale_, 2);
  v10 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration;
  *(_QWORD *)&v7[v10] = objc_msgSend(v9, sel_configurationWithPointSize_weight_scale_, 2, 3, 0.0);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signaturePenWidth] = 0x3FF0000000000000;
  v11 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar;
  *(_QWORD *)&v7[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A28]), sel_init);
  v12 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView;
  *(_QWORD *)&v7[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1140]), sel_init);
  v13 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView;
  *(_QWORD *)&v7[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = 0;
  v14 = &v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(_QWORD *)v15 = UnknownCanvasElementView.flags.modify;
  *((_QWORD *)v15 + 1) = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

  v19.receiver = v7;
  v19.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  v16 = (char *)objc_msgSendSuper2(&v19, sel_initWithNibName_bundle_, 0, 0);
  objc_msgSend(v16, sel_setModalTransitionStyle_, 0);
  objc_msgSend(v16, sel_setModalPresentationStyle_, 2);
  objc_msgSend(v16, sel_setModalInPresentation_, 1);
  objc_msgSend(v16, sel_setPreferredContentSize_, *(double *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize], *(double *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize + 8]);
  v17 = *(id *)&v16[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar];
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  return v16;
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  Class isa;
  char *v44;
  id v45;
  void *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  id v57;
  Class v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  id v64;
  Class v65;
  void *v66;
  void *v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  uint64_t v72;
  id v73;
  Class v74;
  char *v75;
  id v76;
  id v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  Swift::String v81;
  Swift::String_optional v82;
  Swift::String v83;
  id v84;
  void *v85;
  id v86;
  char *v87;
  void *v88;
  id v89;
  void *v90;
  uint64_t v91;
  id v92;
  id v93;
  void *v94;
  id v95;
  id v96;
  id v97;
  id v98;
  void *v99;
  id v100;
  id v101;
  id v102;
  Class v103;
  void *v104;
  id v105;
  char *v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  uint64_t v111;
  char *v112;
  id v113;
  id v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  id v121;
  id v122;
  id v123;
  id v124;
  void *v125;
  id v126;
  id v127;
  Class v128;
  id v129;
  void *v130;
  id v131;
  id v132;
  uint64_t v133;
  id v134;
  id v135;
  void *v136;
  void *v137;
  id v138;
  void *v139;
  uint64_t v140;
  id v141;
  id v142;
  void *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  id v150;
  id v151;
  id v152;
  id v153;
  id v154;
  id v155;
  id v156;
  id v157;
  id v158;
  id v159;
  void *v160;
  id v161;
  id v162;
  id v163;
  Class v164;
  id v165;
  void *v166;
  void *v167;
  id v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  id v174;
  id v175;
  void *v176;
  id v177;
  id v178;
  id v179;
  id v180;
  id v181;
  id v182;
  id v183;
  id v184;
  void *v185;
  id v186;
  id v187;
  id v188;
  Class v189;
  void (*v190)(char *, uint64_t);
  uint64_t v191;
  _QWORD v192[2];
  id v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  id v198;
  void (*v199)(char *, char *, uint64_t);
  uint64_t v200;
  uint64_t v201;
  id v202;
  __int128 v203;
  __int128 v204;
  char *v205;
  char *v206;
  id v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  objc_super v217;
  Swift::String v218;

  v1 = v0;
  v2 = type metadata accessor for PKInkingTool.InkType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v192 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v192 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIConfigurationTextAttributesTransformer?);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)&v204 = (char *)v192 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIButton.Configuration();
  v208 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v205 = (char *)v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v209 = (char *)v192 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v206 = (char *)v192 - v22;
  v23 = (objc_class *)type metadata accessor for SignatureCreationViewController();
  v217.receiver = v0;
  v217.super_class = v23;
  objc_msgSendSuper2(&v217, sel_viewDidLoad);
  v24 = objc_msgSend(v0, sel_view);
  if (!v24)
  {
    __break(1u);
    goto LABEL_36;
  }
  v25 = v24;
  v198 = (id)objc_opt_self();
  v26 = objc_msgSend(v198, sel_systemBackgroundColor);
  objc_msgSend(v25, sel_setBackgroundColor_, v26);

  v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v28 = v27;
  v210 = v14;
  v192[0] = v10;
  v192[1] = v7;
  v196 = v3;
  v197 = v6;
  v29 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar];
  objc_msgSend(v27, sel_addSubview_, v29);

  v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v30 = swift_allocObject();
  v203 = xmmword_1DDF329E0;
  *(_OWORD *)(v30 + 16) = xmmword_1DDF329E0;
  v31 = objc_msgSend(v29, sel_widthAnchor);
  v32 = objc_msgSend(v1, sel_view);
  if (!v32)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v33 = v32;
  v195 = v2;
  v34 = objc_msgSend(v32, sel_widthAnchor);

  v35 = objc_msgSend(v31, sel_constraintEqualToAnchor_, v34);
  *(_QWORD *)(v30 + 32) = v35;
  v36 = objc_msgSend(v29, sel_topAnchor);
  v37 = objc_msgSend(v1, sel_view);
  if (!v37)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v38 = v37;
  v39 = (void *)objc_opt_self();
  v40 = objc_msgSend(v38, sel_safeAreaLayoutGuide);

  v41 = objc_msgSend(v40, sel_topAnchor);
  v42 = objc_msgSend(v36, sel_constraintEqualToAnchor_, v41);

  *(_QWORD *)(v30 + 40) = v42;
  *(_QWORD *)&v214 = v30;
  specialized Array._endMutation()();
  v211 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v212 = v39;
  objc_msgSend(v39, sel_activateConstraints_, isa);

  v44 = v206;
  static UIButton.Configuration.plain()();
  v214 = *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  SignatureDescription.localizedTitle()();
  UIButton.Configuration.title.setter();
  v45 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration];
  v46 = (void *)MEMORY[0x1DF0E41AC](0x2E6E6F7276656863, 0xEC0000006E776F64);
  v207 = (id)objc_opt_self();
  v47 = objc_msgSend(v207, sel_systemImageNamed_withConfiguration_, v46, v45);

  v202 = v45;
  UIButton.Configuration.image.setter();
  UIButton.Configuration.imagePadding.setter();
  UIButton.Configuration.imagePlacement.setter();
  *(_QWORD *)(swift_allocObject() + 16) = v1;
  v48 = v1;
  v49 = v204;
  UIConfigurationTextAttributesTransformer.init(_:)();
  v50 = type metadata accessor for UIConfigurationTextAttributesTransformer();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v49, 0, 1, v50);
  UIButton.Configuration.titleTextAttributesTransformer.setter();
  v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A48]), sel_init);
  v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIButton);
  v199 = *(void (**)(char *, char *, uint64_t))(v208 + 16);
  v199(v209, v44, v210);
  v53 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  *(_QWORD *)(swift_allocObject() + 16) = v48;
  v54 = v48;
  v200 = v53;
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v201 = v52;
  v55 = (void *)UIButton.init(configuration:primaryAction:)();
  objc_msgSend(v51, sel_setTitleView_, v55);

  v56 = swift_allocObject();
  v204 = xmmword_1DDF35440;
  *(_OWORD *)(v56 + 16) = xmmword_1DDF35440;
  *(_QWORD *)(v56 + 32) = v51;
  *(_QWORD *)&v214 = v56;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINavigationItem);
  v57 = v51;
  v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setItems_, v58);

  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 0, v54, sel_doneAction_);
  v60 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem;
  v61 = *(void **)&v54[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem];
  *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = v59;

  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = v204;
  v63 = *(void **)&v54[v60];
  v194 = v29;
  if (!v63)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  *(_QWORD *)(v62 + 32) = v63;
  *(_QWORD *)&v214 = v62;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  v64 = v63;
  v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_setRightBarButtonItems_, v65);

  v66 = *(void **)&v54[v60];
  if (!v66)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v67 = v57;
  objc_msgSend(v66, sel_setEnabled_, 0);
  v68 = objc_msgSend(v54, sel_presentationController);
  if (!v68 || (v69 = v68, v70 = objc_msgSend(v68, sel_presentationStyle), v69, v70 != (id)7))
  {
    v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 1, v54, sel_cancelAction_);
    v72 = swift_allocObject();
    *(_OWORD *)(v72 + 16) = v204;
    *(_QWORD *)(v72 + 32) = v71;
    *(_QWORD *)&v214 = v72;
    specialized Array._endMutation()();
    v73 = v71;
    v74 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v57, sel_setLeftBarButtonItems_, v74);

  }
  v75 = v205;
  static UIButton.Configuration.plain()();
  v76 = objc_msgSend(v54, sel_traitCollection);
  v77 = objc_msgSend(v76, sel_userInterfaceIdiom);

  v78 = v210;
  if (v77 == (id)6)
  {
    v79 = v209;
    static UIButton.Configuration.borderedProminent()();
    v80 = v208;
    (*(void (**)(char *, uint64_t))(v208 + 8))(v75, v78);
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v75, v79, v78);
  }
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v193 = v67;
  v218._countAndFlagsBits = 0xD000000000000024;
  v218._object = (void *)0x80000001DDF538D0;
  v81._countAndFlagsBits = 0x7261656C43;
  v81._object = (void *)0xE500000000000000;
  v82.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v82.value._object = (void *)0xEB00000000656C62;
  v83._countAndFlagsBits = 0;
  v83._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v81, v82, paperKitBundle, v83, v218);
  UIButton.Configuration.title.setter();
  v84 = v202;
  v85 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000016, 0x80000001DDF53900);
  v86 = objc_msgSend(v207, sel_systemImageNamed_withConfiguration_, v85, v84);

  UIButton.Configuration.image.setter();
  UIButton.Configuration.imagePadding.setter();
  v199(v209, v75, v78);
  *(_QWORD *)(swift_allocObject() + 16) = v54;
  v87 = v54;
  UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  v88 = (void *)UIButton.init(configuration:primaryAction:)();
  objc_msgSend(v88, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v88, sel_setEnabled_, 0);
  v89 = objc_msgSend(v87, sel_view);
  if (!v89)
    goto LABEL_41;
  v90 = v89;
  objc_msgSend(v89, sel_addSubview_, v88);

  v91 = swift_allocObject();
  *(_OWORD *)(v91 + 16) = v203;
  v92 = objc_msgSend(v88, sel_centerXAnchor);
  v93 = objc_msgSend(v87, sel_view);
  if (!v93)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v94 = v93;
  v95 = objc_msgSend(v93, sel_centerXAnchor);

  v96 = objc_msgSend(v92, sel_constraintEqualToAnchor_, v95);
  *(_QWORD *)(v91 + 32) = v96;
  v97 = objc_msgSend(v88, sel_bottomAnchor);
  v98 = objc_msgSend(v87, sel_view);
  if (!v98)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v99 = v98;
  v100 = objc_msgSend(v98, sel_safeAreaLayoutGuide);

  v101 = objc_msgSend(v100, sel_bottomAnchor);
  v102 = objc_msgSend(v97, sel_constraintEqualToAnchor_constant_, v101, -14.0);

  *(_QWORD *)(v91 + 40) = v102;
  *(_QWORD *)&v214 = v91;
  specialized Array._endMutation()();
  v103 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v212, sel_activateConstraints_, v103);

  v104 = *(void **)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton];
  *(_QWORD *)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = v88;
  v105 = v88;

  v106 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  if (one-time initialization token for signatureInstructionString != -1)
    swift_once();
  v107 = (void *)MEMORY[0x1DF0E41AC](static UIConstants.signatureInstructionString, *((_QWORD *)&static UIConstants.signatureInstructionString + 1));
  objc_msgSend(v106, sel_setText_, v107);

  objc_msgSend(v106, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  *(_QWORD *)&v204 = *(_QWORD *)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor];
  objc_msgSend(v106, sel_setTextColor_);
  objc_msgSend(v106, sel_setTextAlignment_, 1);
  v108 = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4AB8]);
  objc_msgSend(v106, sel_setFont_, v108);

  v109 = objc_msgSend(v87, sel_view);
  if (!v109)
    goto LABEL_44;
  v110 = v109;
  objc_msgSend(v109, sel_addSubview_, v106);

  v111 = swift_allocObject();
  v203 = xmmword_1DDF354A0;
  *(_OWORD *)(v111 + 16) = xmmword_1DDF354A0;
  v112 = v106;
  v113 = objc_msgSend(v106, sel_centerXAnchor);
  v114 = objc_msgSend(v87, sel_view);
  if (!v114)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v115 = v114;
  v116 = objc_msgSend(v114, sel_centerXAnchor);

  v117 = objc_msgSend(v113, sel_constraintEqualToAnchor_, v116);
  *(_QWORD *)(v111 + 32) = v117;
  v118 = objc_msgSend(v112, sel_widthAnchor);
  v119 = objc_msgSend(v87, sel_view);
  if (!v119)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v120 = v119;
  v121 = objc_msgSend(v119, sel_safeAreaLayoutGuide);

  v122 = objc_msgSend(v121, sel_widthAnchor);
  v123 = objc_msgSend(v118, sel_constraintEqualToAnchor_, v122);

  *(_QWORD *)(v111 + 40) = v123;
  v209 = v112;
  v124 = objc_msgSend(v112, sel_bottomAnchor);
  v125 = v105;
  v126 = objc_msgSend(v105, sel_topAnchor);
  v127 = objc_msgSend(v124, sel_constraintEqualToAnchor_constant_, v126, -8.0);

  *(_QWORD *)(v111 + 48) = v127;
  *(_QWORD *)&v214 = v111;
  specialized Array._endMutation()();
  v128 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v212, sel_activateConstraints_, v128);

  v129 = *(id *)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration];
  v130 = (void *)MEMORY[0x1DF0E41AC](0x6B72616D78, 0xE500000000000000);
  v131 = objc_msgSend(v207, sel_systemImageNamed_withConfiguration_, v130, v129);

  if (v131)
  {
    v132 = objc_msgSend(v131, sel_imageWithRenderingMode_, 2);

  }
  else
  {
    v132 = 0;
  }
  v133 = v204;
  v134 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v132);

  objc_msgSend(v134, sel_setTintColor_, v133);
  objc_msgSend(v134, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v135 = objc_msgSend(v87, sel_view);
  if (!v135)
    goto LABEL_47;
  v136 = v135;
  objc_msgSend(v135, sel_addSubview_, v134);

  v137 = *(void **)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView];
  objc_msgSend(v137, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v137, sel_setBackgroundColor_, v133);
  v138 = objc_msgSend(v87, sel_view);
  if (!v138)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v139 = v138;
  v207 = v125;
  objc_msgSend(v138, sel_addSubview_, v137);

  v140 = swift_allocObject();
  *(_OWORD *)(v140 + 16) = xmmword_1DDF39360;
  v141 = objc_msgSend(v134, sel_leadingAnchor);
  v142 = objc_msgSend(v87, sel_view);
  if (!v142)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v143 = v142;
  v144 = objc_msgSend(v142, sel_safeAreaLayoutGuide);

  v145 = objc_msgSend(v144, sel_leadingAnchor);
  v146 = objc_msgSend(v141, sel_constraintEqualToAnchor_constant_, v145, 32.0);

  *(_QWORD *)(v140 + 32) = v146;
  v147 = objc_msgSend(v134, sel_bottomAnchor);
  v148 = objc_msgSend(v209, sel_topAnchor);
  v149 = objc_msgSend(v147, sel_constraintEqualToAnchor_constant_, v148, -12.0);

  *(_QWORD *)(v140 + 40) = v149;
  v150 = objc_msgSend(v137, sel_heightAnchor);
  v151 = objc_msgSend(v150, sel_constraintEqualToConstant_, 1.0);

  *(_QWORD *)(v140 + 48) = v151;
  v152 = objc_msgSend(v137, sel_bottomAnchor);
  v153 = objc_msgSend(v134, sel_bottomAnchor);
  v154 = objc_msgSend(v152, sel_constraintEqualToAnchor_, v153);

  *(_QWORD *)(v140 + 56) = v154;
  v155 = objc_msgSend(v137, sel_leadingAnchor);
  v156 = objc_msgSend(v134, sel_trailingAnchor);
  v157 = objc_msgSend(v155, sel_constraintEqualToAnchor_constant_, v156, 8.0);

  *(_QWORD *)(v140 + 64) = v157;
  v158 = objc_msgSend(v137, sel_trailingAnchor);
  v159 = objc_msgSend(v87, sel_view);
  if (!v159)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v160 = v159;
  v161 = objc_msgSend(v159, sel_safeAreaLayoutGuide);

  v162 = objc_msgSend(v161, sel_trailingAnchor);
  v163 = objc_msgSend(v158, sel_constraintEqualToAnchor_constant_, v162, -32.0);

  *(_QWORD *)(v140 + 72) = v163;
  *(_QWORD *)&v214 = v140;
  specialized Array._endMutation()();
  v164 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v212, sel_activateConstraints_, v164);

  v165 = objc_msgSend(v87, sel_view);
  if (!v165)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v166 = v165;
  v167 = *(void **)&v87[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView];
  objc_msgSend(v165, sel_insertSubview_atIndex_, v167, 0);

  v168 = objc_msgSend(v87, sel_traitCollection);
  v169 = objc_msgSend(v168, sel_userInterfaceIdiom);

  v170 = v195;
  if (v169 == (id)6)
  {
    v171 = v192[0];
    MEMORY[0x1DF0E49EC]();
    UIMutableTraits.userInterfaceStyle.setter();
    MEMORY[0x1DF0E49F8](v171);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v196 + 104))(v197, *MEMORY[0x1E0CD0F60], v170);
  v172 = objc_msgSend(v198, sel_blackColor);
  v215 = type metadata accessor for PKInkingTool();
  v216 = MEMORY[0x1E0CD0F70];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v214);
  PKInkingTool.init(_:color:width:)();
  PKCanvasView.tool.setter();
  objc_msgSend(v167, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v167, sel_setDrawingPolicy_, 1);
  objc_msgSend(v167, sel_setDelegate_, v87);
  v173 = swift_allocObject();
  *(_OWORD *)(v173 + 16) = v203;
  v174 = objc_msgSend(v167, sel_widthAnchor);
  v175 = objc_msgSend(v87, sel_view);
  if (!v175)
    goto LABEL_52;
  v176 = v175;
  v177 = objc_msgSend(v175, sel_safeAreaLayoutGuide);

  v178 = objc_msgSend(v177, sel_widthAnchor);
  v179 = objc_msgSend(v174, sel_constraintEqualToAnchor_, v178);

  *(_QWORD *)(v173 + 32) = v179;
  v180 = objc_msgSend(v167, sel_topAnchor);
  v181 = objc_msgSend(v194, sel_bottomAnchor);
  v182 = objc_msgSend(v180, sel_constraintEqualToAnchor_, v181);

  *(_QWORD *)(v173 + 40) = v182;
  v183 = objc_msgSend(v167, sel_bottomAnchor);
  v184 = objc_msgSend(v87, sel_view);
  if (v184)
  {
    v185 = v184;
    v186 = objc_msgSend(v184, sel_safeAreaLayoutGuide);

    v187 = objc_msgSend(v186, sel_bottomAnchor);
    v188 = objc_msgSend(v183, sel_constraintEqualToAnchor_, v187);

    *(_QWORD *)(v173 + 48) = v188;
    *(_QWORD *)&v214 = v173;
    specialized Array._endMutation()();
    v189 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v212, sel_activateConstraints_, v189);

    v190 = *(void (**)(char *, uint64_t))(v208 + 8);
    v191 = v210;
    v190(v205, v210);
    v190(v206, v191);
    return;
  }
LABEL_53:
  __break(1u);
}

uint64_t closure #1 in SignatureCreationViewController.viewDidLoad()(uint64_t a1, uint64_t a2)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_standardAppearance);
  v3 = objc_msgSend(v2, sel_titleTextAttributes);

  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return AttributeContainer.init(_:)();
}

Swift::Bool __swiftcall SignatureCreationViewController.becomeFirstResponder()()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  id v4;
  unsigned int v5;
  char *v6;
  id v7;
  char v8;
  objc_super v10;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_view);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_firstResponder);

    v10.receiver = v1;
    v10.super_class = (Class)type metadata accessor for SignatureCreationViewController();
    v5 = objc_msgSendSuper2(&v10, sel_becomeFirstResponder);
    if (v5)
    {
      if (!v4
        || (type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIResponder),
            v6 = v1,
            v7 = v4,
            v8 = static NSObject.== infix(_:_:)(),
            v7,
            v6,
            (v8 & 1) == 0))
      {
        v7 = *(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder];
        *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = v4;
      }
    }
    else
    {
      v7 = v4;
    }

    LOBYTE(v2) = v5;
  }
  else
  {
    __break(1u);
  }
  return (char)v2;
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  objc_msgSendSuper2(&v10, sel_viewDidAppear_, a1);
  if ((objc_msgSend(v1, sel_isFirstResponder) & 1) == 0)
    objc_msgSend(v1, sel_becomeFirstResponder);
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v4 = *MEMORY[0x1E0DC4750];
  v5 = objc_msgSend((id)objc_opt_self(), sel_mainQueue);
  v6 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v9[4] = partial apply for closure #1 in SignatureCreationViewController.viewDidAppear(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v9[3] = &block_descriptor_65_1;
  v7 = _Block_copy(v9);
  swift_release();
  v8 = objc_msgSend(v3, sel_addObserverForName_object_queue_usingBlock_, v4, 0, v5, v7);
  _Block_release(v7);
  swift_unknownObjectRelease();

}

void closure #1 in SignatureCreationViewController.viewDidAppear(_:)()
{
  void *Strong;
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v9 = objc_msgSend(Strong, sel_firstResponder);

  if (!v9)
    return;
  objc_opt_self();
  v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1)
    goto LABEL_10;
  v2 = objc_msgSend(v1, sel_textFields);
  if (!v2)
    goto LABEL_10;
  v3 = v2;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextField);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v5 = v9;
    if (v8)
      goto LABEL_6;
LABEL_13:

    swift_bridgeObjectRelease();
    return;
  }
  v5 = v9;
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_13;
LABEL_6:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1DF0E4D64](0, v4);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v4 + 32);
LABEL_9:
    v7 = v6;
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_becomeFirstResponder);

LABEL_10:
    return;
  }
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Void __swiftcall SignatureCreationViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  objc_super v8;

  objc_msgSend(v1, sel_resignFirstResponder);
  v3 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder;
  v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder];
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v5, sel_becomeFirstResponder);
    v6 = *(void **)&v1[v3];
    *(_QWORD *)&v1[v3] = 0;

  }
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v7, sel_removeObserver_name_object_, v1, *MEMORY[0x1E0DC4750], 0);

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  objc_msgSendSuper2(&v8, sel_viewDidDisappear_, a1);
}

Swift::Void __swiftcall SignatureCreationViewController.updateTitle()()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t countAndFlagsBits;
  void *v7;
  void *v8;
  id v9;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_topItem);
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  v9 = objc_msgSend(v1, sel_titleView);

  if (!v9)
  {
LABEL_7:
    __break(1u);
    return;
  }
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8);
  if (v4 >= 6)
  {
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x1DF0E41AC](v5, v4);
    objc_msgSend(v3, sel_setTitle_forState_, v8, 0);

    outlined consume of SignatureDescription(v5, v4);
  }
  else
  {
    countAndFlagsBits = SignatureDescription.localizedTitle()()._countAndFlagsBits;
    v7 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setTitle_forState_, v7, 0);

  }
}

void SignatureCreationViewController.clearSignature(with:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  void *v14;
  uint64_t v15;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  v14 = partial apply for closure #1 in SignatureCreationViewController.clearSignature(with:);
  v15 = v3;
  v4 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 1107296256;
  v12 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v13 = &block_descriptor_37;
  v5 = _Block_copy(&v10);
  v6 = v1;
  swift_release();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  v14 = partial apply for closure #2 in SignatureCreationViewController.clearSignature(with:);
  v15 = v7;
  v10 = v4;
  v11 = 1107296256;
  v12 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
  v13 = &block_descriptor_43;
  v8 = _Block_copy(&v10);
  v9 = v6;
  swift_release();
  objc_msgSend(a1, sel_animateAlongsideTransition_completion_, v5, v8);
  _Block_release(v8);
  _Block_release(v5);
}

CGMutablePathRef drawingPath #1 () in SignatureCreationViewController.doneAction(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  char *v21;
  Class isa;
  const CGPath *v23;
  _QWORD v25[2];
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char *v28;
  CGMutablePathRef Mutable;
  CGAffineTransform transform;

  v2 = type metadata accessor for PKStroke();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v28 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKDrawing();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Mutable = CGPathCreateMutable();
  v15 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v16 = PKDrawing.strokes.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v17 = *(_QWORD *)(v16 + 16);
  v25[1] = v16;
  if (v17)
  {
    v18 = v16 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v26 = *(_QWORD *)(v3 + 72);
    v27 = v19;
    while (1)
    {
      v27(v9, v18, v2);
      v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v20(v9, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
        break;
      v21 = v28;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v28, v9, v2);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v21, v2);
      v23 = (const CGPath *)-[objc_class _newPathRepresentation](isa, sel__newPathRepresentation);

      transform.b = 0.0;
      transform.c = 0.0;
      transform.a = 1.0;
      transform.d = 1.0;
      transform.tx = 0.0;
      transform.ty = 0.0;
      CGMutablePathRef.addPath(_:transform:)(v23, &transform);

      v18 += v26;
      if (!--v17)
        goto LABEL_7;
    }
  }
  else
  {
    v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v20(v9, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return Mutable;
}

Swift::Void __swiftcall SignatureCreationViewController.clearAction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  PKDrawing *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)SignatureLogger);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1DDB0F000, v8, v9, "cleared drawing", v10, 2u);
    MEMORY[0x1DF0E6558](v10, -1, -1);
  }

  v11 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView);
  PKDrawing.init()();
  PKDrawing._bridgeToObjectiveC()(v12);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(v11, sel_setDrawing_, v14);

}

Swift::Void __swiftcall SignatureCreationViewController.descriptionAction()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  Swift::String v46;
  Swift::String_optional v47;
  Swift::String v48;
  uint64_t countAndFlagsBits;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t aBlock;
  uint64_t v55;
  void (*v56)(uint64_t, void *);
  void *v57;
  void *v58;
  _QWORD *v59;
  Swift::String v60;
  Swift::String v61;

  v52 = v0;
  v53 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, 0, 0, 0);
  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar], sel_topItem);
  if (!v1)
  {
    __break(1u);
    goto LABEL_20;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_titleView);

  if (!v3)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  v5 = objc_msgSend(v53, sel_popoverPresentationController);
  if (!v5)
    goto LABEL_6;
  v6 = v5;
  v7 = objc_msgSend(v4, sel_imageView);
  if (!v7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v8 = v7;
  objc_msgSend(v6, sel_setSourceView_, v7);

LABEL_6:
  v9 = objc_msgSend(v53, sel_popoverPresentationController);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v4, sel_imageView);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, sel_bounds);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;

      objc_msgSend(v10, sel_setSourceRect_, v14, v16, v18, v20);
      goto LABEL_9;
    }
LABEL_22:
    __break(1u);
    return;
  }
LABEL_9:
  v21 = objc_msgSend(v53, sel_popoverPresentationController);
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v21, sel_setPermittedArrowDirections_, 1);

  }
  v23 = 7;
  v24 = (unint64_t *)&unk_1EA839598;
  do
  {
    v33 = *(v24 - 1);
    v34 = *v24;
    if (*v24)
    {
      outlined copy of SignatureDescription(*(v24 - 1), *v24);
      outlined copy of SignatureDescription(v33, v34);
      outlined consume of SignatureDescription(v33, v34);
      outlined consume of SignatureDescription(0, 0);
      aBlock = v33;
      v55 = v34;
      v25 = SignatureDescription.localizedTitle()();
      v26 = swift_allocObject();
      swift_unknownObjectUnownedInit();
      v27 = swift_allocObject();
      swift_unknownObjectUnownedInit();
      v28 = (_QWORD *)swift_allocObject();
      v28[2] = v33;
      v28[3] = v34;
      v28[4] = v52;
      v28[5] = v26;
      v28[6] = v27;
      v29 = v52;
      swift_retain();
      swift_retain();
      v30 = (void *)MEMORY[0x1DF0E41AC](v25._countAndFlagsBits, v25._object);
      swift_bridgeObjectRelease();
      v58 = partial apply for closure #1 in SignatureCreationViewController.descriptionAction();
      v59 = v28;
      aBlock = MEMORY[0x1E0C809B0];
      v55 = 1107296256;
      v56 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
      v57 = &block_descriptor_31;
      v31 = _Block_copy(&aBlock);
      swift_release();
      v32 = objc_msgSend((id)objc_opt_self(), sel_actionWithTitle_style_handler_, v30, 0, v31);
      _Block_release(v31);
      swift_release();
      swift_release();

      objc_msgSend(v53, sel_addAction_, v32);
    }
    else
    {
      outlined consume of SignatureDescription(*(v24 - 1), 0);
      outlined consume of SignatureDescription(0, 0);
    }
    v24 += 2;
    --v23;
  }
  while (v23);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v60._countAndFlagsBits = 0xD000000000000022;
  v60._object = (void *)0x80000001DDF537A0;
  v35._countAndFlagsBits = 0x6C6562614C206F4ELL;
  v35._object = (void *)0xE800000000000000;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v60);
  v39 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v40 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = v39;
  *(_QWORD *)(v41 + 24) = v40;
  swift_retain();
  swift_retain();
  v42 = (void *)MEMORY[0x1DF0E41AC](v38._countAndFlagsBits, v38._object);
  swift_bridgeObjectRelease();
  v58 = partial apply for closure #2 in SignatureCreationViewController.descriptionAction();
  v59 = (_QWORD *)v41;
  aBlock = MEMORY[0x1E0C809B0];
  v55 = 1107296256;
  v56 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v57 = &block_descriptor_15_0;
  v43 = _Block_copy(&aBlock);
  swift_release();
  v44 = (void *)objc_opt_self();
  v45 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v42, 2, v43);
  _Block_release(v43);
  swift_release();
  swift_release();

  objc_msgSend(v53, sel_addAction_, v45);
  v61._object = (void *)0x80000001DDF4F230;
  v46._countAndFlagsBits = 0x6C65636E6143;
  v46._object = (void *)0xE600000000000000;
  v47.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v47.value._object = (void *)0xEB00000000656C62;
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  v61._countAndFlagsBits = 0xD000000000000017;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, paperKitBundle, v48, v61)._countAndFlagsBits;
  v50 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  v51 = objc_msgSend(v44, sel_actionWithTitle_style_handler_, v50, 1, 0);

  objc_msgSend(v53, sel_addAction_, v51);
  objc_msgSend(v52, sel_presentViewController_animated_completion_, v53, 1, 0);

}

void showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(char *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t aBlock;
  uint64_t v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  void *v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;

  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "show custom label alert", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v43._countAndFlagsBits = 0xD000000000000026;
  v43._object = (void *)0x80000001DDF537D0;
  v6._countAndFlagsBits = 0x4C206D6F74737543;
  v6._object = (void *)0xEC0000006C656261;
  v7.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v7.value._object = (void *)0xEB00000000656C62;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, paperKitBundle, v8, v43)._countAndFlagsBits;
  v10 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend((id)objc_opt_self(), sel_alertControllerWithTitle_message_preferredStyle_, v10, 0, 1);

  v12 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v41 = partial apply for closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  v42 = v12;
  aBlock = MEMORY[0x1E0C809B0];
  v13 = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v40 = &block_descriptor_19_0;
  v14 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v11, sel_addTextFieldWithConfigurationHandler_, v14);
  _Block_release(v14);
  v44._countAndFlagsBits = 0xD000000000000017;
  v44._object = (void *)0x80000001DDF4F230;
  v15._countAndFlagsBits = 0x6C65636E6143;
  v15._object = (void *)0xE600000000000000;
  v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v16.value._object = (void *)0xEB00000000656C62;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v44);
  v19 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  swift_retain();
  v20 = (void *)MEMORY[0x1DF0E41AC](v18._countAndFlagsBits, v18._object);
  swift_bridgeObjectRelease();
  v41 = partial apply for closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  v42 = v19;
  aBlock = v13;
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v40 = &block_descriptor_23_0;
  v21 = _Block_copy(&aBlock);
  swift_release();
  v22 = (void *)objc_opt_self();
  v23 = objc_msgSend(v22, sel_actionWithTitle_style_handler_, v20, 1, v21);
  _Block_release(v21);
  swift_release();

  objc_msgSend(v11, sel_addAction_, v23);
  v45._object = (void *)0x80000001DDF53820;
  v24._countAndFlagsBits = 1701736260;
  v24._object = (void *)0xE400000000000000;
  v25.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v25.value._object = (void *)0xEB00000000656C62;
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v45._countAndFlagsBits = 0xD000000000000015;
  v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, paperKitBundle, v26, v45);
  v28 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v29 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v28;
  swift_retain();
  swift_retain();
  v31 = (void *)MEMORY[0x1DF0E41AC](v27._countAndFlagsBits, v27._object);
  swift_bridgeObjectRelease();
  v41 = partial apply for closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction();
  v42 = v30;
  aBlock = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v40 = &block_descriptor_31;
  v32 = _Block_copy(&aBlock);
  swift_release();
  v33 = objc_msgSend(v22, sel_actionWithTitle_style_handler_, v31, 0, v32);
  _Block_release(v32);
  swift_release();
  swift_release();

  v34 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction;
  v35 = *(void **)&a1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
  *(_QWORD *)&a1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = v33;

  v36 = *(void **)&a1[v34];
  if (v36)
  {
    objc_msgSend(v36, sel_setEnabled_, 0);
    if (*(_QWORD *)&a1[v34])
    {
      objc_msgSend(v11, sel_addAction_);
      objc_msgSend(a1, sel_presentViewController_animated_completion_, v11, 1, 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(void *a1)
{
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  void *v6;
  char *Strong;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  Swift::String v12;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v12._object = (void *)0x80000001DDF53840;
  v2._countAndFlagsBits = 0x6C6562614CLL;
  v2._object = (void *)0xE500000000000000;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v12._countAndFlagsBits = 0xD000000000000032;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v12)._countAndFlagsBits;
  v6 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setPlaceholder_, v6);

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v8 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  v9 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  outlined copy of SignatureDescription(v8, v9);

  if (v9 >= 6)
  {
    v10 = (void *)MEMORY[0x1DF0E41AC](v8, v9);
    outlined consume of SignatureDescription(v8, v9);
    objc_msgSend(a1, sel_setText_, v10);

  }
  else
  {
    outlined consume of SignatureDescription(v8, v9);
  }
  v11 = (id)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(a1, sel_addTarget_action_forControlEvents_, v11, sel_updateDoneButtonState_, 0x20000);

}

void closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  char *Strong;
  id v1;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v1 = *(id *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
  *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

}

void closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *Strong;
  id v5;
  unint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;

  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1DDB0F000, v1, v2, "set custom label", v3, 2u);
    MEMORY[0x1DF0E6558](v3, -1, -1);
  }

  Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  v5 = objc_msgSend(Strong, sel_textFields);

  if (!v5)
    return;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextField);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_8;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_15;
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x1DF0E4D64](0, v6);
  }
  else
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v7 = *(id *)(v6 + 32);
  }
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v8, sel_text);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    v13 = (char *)swift_unknownObjectUnownedLoadStrong();
    v14 = (uint64_t *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    v16 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
    *v14 = v10;
    v14[1] = v12;
    outlined consume of SignatureDescription(v15, v16);
    SignatureCreationViewController.updateTitle()();

    v17 = (char *)swift_unknownObjectUnownedLoadStrong();
    v19 = *(id *)&v17[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction];
    *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

  }
}

void closure #1 in SignatureCreationViewController.descriptionAction()(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  char v17;
  char *Strong;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  _QWORD v23[2];

  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >= 6)
  {
    showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(a4);
    return;
  }
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v7, (uint64_t)SignatureLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  outlined copy of SignatureDescription(a2, a3);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v13, v14))
  {
    outlined consume of SignatureDescription(a2, a3);
    goto LABEL_9;
  }
  v15 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v15 = 134217984;
  v16 = specialized Collection<>.firstIndex(of:)(a2, a3, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
  if ((v17 & 1) == 0)
  {
    v23[1] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of SignatureDescription(a2, a3);
    _os_log_impl(&dword_1DDB0F000, v13, v14, "set standard label %ld", v15, 0xCu);
    MEMORY[0x1DF0E6558](v15, -1, -1);
LABEL_9:

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    Strong = (char *)swift_unknownObjectUnownedLoadStrong();
    v19 = (uint64_t *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    v20 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
    v21 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
    *v19 = a2;
    v19[1] = a3;
    outlined copy of SignatureDescription(a2, a3);
    outlined consume of SignatureDescription(v20, v21);
    SignatureCreationViewController.updateTitle()();

    v22 = (void *)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(v22, sel_dismissViewControllerAnimated_completion_, 1, 0);

    return;
  }
  __break(1u);
}

void closure #2 in SignatureCreationViewController.descriptionAction()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  char *Strong;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  id v8;

  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)SignatureLogger);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1DDB0F000, v1, v2, "clear label", v3, 2u);
    MEMORY[0x1DF0E6558](v3, -1, -1);
  }

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v5 = &Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  v6 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  v7 = *(_QWORD *)&Strong[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  outlined consume of SignatureDescription(v6, v7);
  SignatureCreationViewController.updateTitle()();

  v8 = (id)swift_unknownObjectUnownedLoadStrong();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, 0);

}

Swift::Void __swiftcall SignatureCreationViewController.updateDoneButtonState(_:)(UITextField *a1)
{
  uint64_t v1;
  NSString *v2;
  NSString *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  void *v9;

  v2 = -[UITextField text](a1, sel_text);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    swift_bridgeObjectRelease();
    v7 = HIBYTE(v6) & 0xF;
    if ((v6 & 0x2000000000000000) == 0)
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    v8 = v7 != 0;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction);
  if (v9)
    objc_msgSend(v9, sel_setEnabled_, v8);
}

id SignatureCreationViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SignatureCreationViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SignatureCreationViewController()
{
  return objc_opt_self();
}

uint64_t sub_1DDC76590()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC765B4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) >= 6uLL)
    swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SignatureCreationViewController.descriptionAction()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in SignatureCreationViewController.descriptionAction()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

void partial apply for closure #2 in SignatureCreationViewController.descriptionAction()()
{
  closure #2 in SignatureCreationViewController.descriptionAction()();
}

void partial apply for closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(void *a1)
{
  closure #1 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()(a1);
}

void partial apply for closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  closure #2 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()();
}

void partial apply for closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()()
{
  closure #3 in showCustomLabelAlert #1 () in SignatureCreationViewController.descriptionAction()();
}

uint64_t sub_1DDC76648()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in SignatureCreationViewController.clearSignature(with:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_setAlpha_, 0.0);
}

void partial apply for closure #2 in SignatureCreationViewController.clearSignature(with:)()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_setAlpha_, 1.0);
  SignatureCreationViewController.clearAction()();
}

void specialized SignatureCreationViewController.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;

  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_panelSize] = xmmword_1DDF3A640;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_downArrowImagePadding] = 0x4020000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonBottomPadding] = 0x402C000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButtonImagePadding] = 0x4020000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineInset] = 0x4040000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLinePadding] = 0x4028000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureMarkPadding] = 0x4020000000000000;
  v1 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineColor;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.6, 0.7);
  v2 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_buttonImageConfiguration;
  v3 = (void *)objc_opt_self();
  *(_QWORD *)&v0[v2] = objc_msgSend(v3, sel_configurationWithScale_, 2);
  v4 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_xmarkImageConfiguration;
  *(_QWORD *)&v0[v4] = objc_msgSend(v3, sel_configurationWithPointSize_weight_scale_, 2, 3, 0.0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signaturePenWidth] = 0x3FF0000000000000;
  v5 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3A28]), sel_init);
  v6 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1140]), sel_init);
  v7 = OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView;
  *(_QWORD *)&v0[v7] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_savedFirstResponder] = 0;
  v8 = &v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion];
  *(_QWORD *)v9 = UnknownCanvasElementView.flags.modify;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_customLabelDoneAction] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized SignatureCreationViewController.doneAction(_:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  void *v44;
  id v45;
  void *v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double MaxY;
  double v56;
  char *v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  objc_class *v62;
  objc_class *v63;
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  void *v76;
  id v77;
  NSObject *v78;
  uint64_t v79;
  os_log_type_t v80;
  uint8_t *v81;
  CGMutablePathRef v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  char *v92;
  objc_super v93;
  uint64_t aBlock;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  CGRect v100;
  CGRect v101;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v90 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v89 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v92 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PKDrawing();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView];
  v20 = objc_msgSend(v19, sel_drawing, v16);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v21 = PKDrawing.strokes.getter();
  v88 = v14;
  v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v91 = (void *)v13;
  v22(v18, v13);
  v23 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRelease();
  if (!v23)
  {
    if (one-time initialization token for SignatureLogger != -1)
      swift_once();
    v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)SignatureLogger);
    v78 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v80))
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v81 = 0;
      _os_log_impl(&dword_1DDB0F000, v78, v80, "signature creation with empty signature ignored", v81, 2u);
      MEMORY[0x1DF0E6558](v81, -1, -1);
    }
    goto LABEL_12;
  }
  v85 = v7;
  v87 = v5;
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v84 = v10;
  v86 = v6;
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)SignatureLogger);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1DDB0F000, v25, v26, "created signature", v27, 2u);
    MEMORY[0x1DF0E6558](v27, -1, -1);
  }

  v28 = (uint64_t *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  v29 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription];
  v30 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureDescription + 8];
  outlined copy of SignatureDescription(v29, v30);
  v31 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000024, 0x80000001DDF53880);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = v30;
  v98 = partial apply for closure #1 in static SignatureAnalytics.created(_:);
  v99 = v32;
  aBlock = MEMORY[0x1E0C809B0];
  v95 = 1107296256;
  v96 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v97 = &block_descriptor_55;
  v33 = _Block_copy(&aBlock);
  v34 = (uint64_t)v1;
  outlined copy of SignatureDescription(v29, v30);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v33);

  outlined consume of SignatureDescription(v29, v30);
  v35 = objc_msgSend(v19, sel_drawing);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  PKDrawing.bounds.getter();
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = v91;
  v22(v18, (uint64_t)v91);
  v45 = objc_msgSend(v1, sel_view);
  if (v45)
  {
    v46 = v45;
    objc_msgSend(v45, sel_convertRect_fromCoordinateSpace_, v19, v37, v39, v41, v43);
    v48 = v47;
    v50 = v49;
    v52 = v51;
    v54 = v53;

    v100.origin.x = v48;
    v100.origin.y = v50;
    v100.size.width = v52;
    v100.size.height = v54;
    MaxY = CGRectGetMaxY(v100);
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureLineView], sel_frame);
    v56 = MaxY - CGRectGetMaxY(v101);
    v57 = v92;
    UUID.init()();
    v58 = v90;
    static Date.now.getter();
    v59 = *v28;
    v83 = v28[1];
    outlined copy of SignatureDescription(v59, v83);
    v82 = drawingPath #1 () in SignatureCreationViewController.doneAction(_:)(v34);
    v60 = objc_msgSend(v19, sel_drawing);
    v61 = (uint64_t)v87;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v88 + 56))(v61, 0, 1, v44);
    v62 = (objc_class *)type metadata accessor for SignatureItem();
    v91 = (void *)v34;
    v63 = v62;
    v64 = objc_allocWithZone(v62);
    v65 = v89;
    v66 = v57;
    v67 = v84;
    (*(void (**)(_BYTE *, char *, uint64_t))(v89 + 16))(&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_uniqueID], v66, v84);
    *(double *)&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_baselineOffset] = v56;
    v68 = &v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate];
    v69 = v85;
    v70 = v86;
    (*(void (**)(_BYTE *, char *, uint64_t))(v85 + 16))(&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_creationDate], v58, v86);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v68, 0, 1, v70);
    v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_shouldPersist] = 1;
    v71 = (uint64_t *)&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription];
    v72 = v83;
    *v71 = v59;
    v71[1] = v72;
    *(_QWORD *)&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_path] = v82;
    outlined init with copy of PKDrawing?(v61, (uint64_t)&v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_drawing]);
    v64[OBJC_IVAR____TtC8PaperKit13SignatureItem_isOwned] = 1;
    v93.receiver = v64;
    v93.super_class = v63;
    v73 = objc_msgSendSuper2(&v93, sel_init);
    outlined destroy of PKDrawing?(v61);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v58, v70);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v92, v67);
    type metadata accessor for SignatureManager();
    swift_initStaticObject();
    SignatureManager.saveSignature(_:)(v73);
    v74 = swift_allocObject();
    v75 = v91;
    *(_QWORD *)(v74 + 16) = v91;
    *(_QWORD *)(v74 + 24) = v73;
    v98 = partial apply for closure #1 in SignatureCreationViewController.doneAction(_:);
    v99 = v74;
    aBlock = MEMORY[0x1E0C809B0];
    v95 = 1107296256;
    v96 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v97 = &block_descriptor_61;
    v76 = _Block_copy(&aBlock);
    v77 = v75;
    v78 = v73;
    swift_release();
    objc_msgSend(v77, sel_dismissViewControllerAnimated_completion_, 1, v76);
    _Block_release(v76);
LABEL_12:

    return;
  }
  __break(1u);
}

void specialized SignatureCreationViewController.cancelAction(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v1 = v0;
  if (one-time initialization token for SignatureLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)SignatureLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "cancelled creation", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v1;
  v9[4] = partial apply for closure #1 in SignatureCreationViewController.cancelAction(_:);
  v9[5] = v6;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v9[3] = &block_descriptor_49_0;
  v7 = _Block_copy(v9);
  v8 = v1;
  swift_release();
  objc_msgSend(v8, sel_dismissViewControllerAnimated_completion_, 1, v7);
  _Block_release(v7);
}

id specialized SignatureCreationViewController.canvasViewDrawingDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_signatureView), sel_drawing, v5);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = PKDrawing.strokes.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease();
  result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_doneItem);
  if (result)
  {
    objc_msgSend(result, sel_setEnabled_, v10 != 0);
    result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_clearButton);
    if (result)
    {
      objc_msgSend(result, sel_setEnabled_, v10 != 0);
      return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_navigationBar), sel_setNeedsLayout);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.cancelAction(_:)()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(*(_QWORD *)(v0 + 16)
                                     + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion);
  swift_retain();
  v1(0);
  return swift_release();
}

uint64_t sub_1DDC77320()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24) >= 6uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t partial apply for closure #1 in static SignatureAnalytics.created(_:)()
{
  uint64_t v0;

  return closure #1 in static SignatureAnalytics.created(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined init with copy of PKDrawing?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PKDrawing?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDC773DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.doneAction(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void (**)(uint64_t))(*(_QWORD *)(v0 + 16)
                                      + OBJC_IVAR____TtC8PaperKit31SignatureCreationViewController_completion);
  swift_retain();
  v2(v1);
  return swift_release();
}

void partial apply for closure #1 in SignatureCreationViewController.viewDidAppear(_:)()
{
  closure #1 in SignatureCreationViewController.viewDidAppear(_:)();
}

uint64_t partial apply for closure #1 in SignatureCreationViewController.viewDidLoad()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in SignatureCreationViewController.viewDidLoad()(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #2 in SignatureCreationViewController.viewDidLoad()()
{
  SignatureCreationViewController.descriptionAction()();
}

void partial apply for closure #3 in SignatureCreationViewController.viewDidLoad()()
{
  SignatureCreationViewController.clearAction()();
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1DDC77548(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1DDC7759C + 4 * byte_1DDF3A674[a2]))(0x6E65657267);
}

uint64_t sub_1DDC7759C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E65657267 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x44676E6977617264;
  else
    v3 = 0x676E69727473;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEB00000000617461;
  if ((a2 & 1) != 0)
    v5 = 0x44676E6977617264;
  else
    v5 = 0x676E69727473;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000617461;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0xEE00657079546E6FLL;
  else
    v2 = 0xEA00000000006E6FLL;
  if ((a2 & 1) != 0)
    v3 = 0xEE00657079546E6FLL;
  else
    v3 = 0xEA00000000006E6FLL;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1DDC7771C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1DDC77784 + 4 * byte_1DDF3A67C[a2]))(0xD000000000000010);
}

uint64_t sub_1DDC77784(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001DDF4B810)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x80000001DDF4B030;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6973736572707865;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0xEB00000000736E6FLL;
    else
      v6 = 0x80000001DDF4B050;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000011;
    v6 = 0x80000001DDF4B030;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0x6973736572707865;
    v3 = 0xEB00000000736E6FLL;
  }
  else
  {
    v3 = 0x80000001DDF4B050;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), sel_rawValue);
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a2 + 16) + 16), sel_rawValue);
  v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  specialized static Data.== infix(_:_:)(v4, v6);
  LOBYTE(v7) = v11;
  outlined consume of Data._Representation(v8, v10);
  outlined consume of Data._Representation(v4, v6);
  return v7 & 1;
}

id Color.uiColor.getter()
{
  _QWORD *v0;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *v0);
}

void static Color.clear.getter(CGColorRef *a1@<X8>)
{
  Color.init(red:green:blue:alpha:)(a1, 0.0, 0.0, 0.0, 0.0);
}

void static Color.black.getter(CGColorRef *a1@<X8>)
{
  Color.init(red:green:blue:alpha:)(a1, 0.0, 0.0, 0.0, 1.0);
}

uint64_t static Color.== infix(_:_:)()
{
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

id Color.cgColor.getter()
{
  id *v0;

  return *v0;
}

id key path getter for Color.cgColor : Color@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void key path setter for Color.cgColor : Color(id *a1)
{
  Color.cgColor.setter((CGColor *)*a1);
}

void Color.cgColor.setter(CGColor *a1)
{
  id *v1;
  CGColor *v2;
  CGColorSpace *v3;
  int v4;
  CGColorRef CopyByMatchingToColorSpace;
  CGColor *v6;

  v2 = a1;
  v3 = CGColorGetColorSpace(a1);
  if (one-time initialization token for extendedSRGBColorSpace != -1)
    swift_once();
  v4 = CFEqual(v3, (CFTypeRef)static Color.extendedSRGBColorSpace);

  if (v4)
    goto LABEL_6;
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v2, 0);
  if (CopyByMatchingToColorSpace)
  {
    v6 = CopyByMatchingToColorSpace;

    v2 = v6;
LABEL_6:

    *v1 = v2;
    return;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void Color.init(platformColor:)(void *a1@<X0>, _QWORD *a2@<X8>)
{
  CGColor *v4;

  Color.init(cgColor:)((CGColor *)objc_msgSend(a1, sel_CGColor), &v4);

  *a2 = v4;
}

void (*Color.cgColor.modify(void **a1))(void **a1, char a2)
{
  void **v1;
  void *v2;
  id v3;

  v2 = *v1;
  *a1 = *v1;
  a1[1] = v1;
  v3 = v2;
  return Color.cgColor.modify;
}

void Color.cgColor.modify(void **a1, char a2)
{
  void *v2;
  CGColor *v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    Color.cgColor.setter(v3);

  }
  else
  {
    Color.cgColor.setter((CGColor *)v2);
  }
}

CGColorSpaceRef one-time initialization function for extendedSRGBColorSpace()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (result)
    static Color.extendedSRGBColorSpace = (uint64_t)result;
  else
    __break(1u);
  return result;
}

void Color.init(red:green:blue:alpha:)(CGColorRef *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGColorSpace *v6;
  CGColorSpace *v7;
  CGColorRef v8;
  CGFloat v9[4];

  v9[0] = a2;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = a5;
  v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v6)
  {
    v7 = v6;
    v8 = CGColorCreate(v6, v9);

    if (v8)
    {
      *a1 = v8;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Color.init(cgColor:)(CGColor *a1@<X0>, CGColor **a2@<X8>)
{
  CGColor *v2;
  CGColorSpace *v4;
  int v5;
  CGColorRef CopyByMatchingToColorSpace;

  v2 = a1;
  v4 = CGColorGetColorSpace(a1);
  if (one-time initialization token for extendedSRGBColorSpace != -1)
    swift_once();
  v5 = CFEqual(v4, (CFTypeRef)static Color.extendedSRGBColorSpace);

  if (!v5)
  {
    CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v2, 0);

    v2 = CopyByMatchingToColorSpace;
  }
  *a2 = v2;
}

void static Color.white.getter(CGColorRef *a1@<X8>)
{
  Color.init(red:green:blue:alpha:)(a1, 1.0, 1.0, 1.0, 1.0);
}

void static Color.gray.getter(CGColorRef *a1@<X8>)
{
  Color.init(red:green:blue:alpha:)(a1, 0.5, 0.5, 0.5, 1.0);
}

void Color.red.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.green.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(_QWORD *)(v2 + 16) >= 2uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.blue.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(_QWORD *)(v2 + 16) >= 3uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void Color.alpha.getter()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = CGColorRef.components.getter();

  if (v2)
  {
    if (*(_QWORD *)(v2 + 16) >= 4uLL)
    {
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  __break(1u);
}

double *Color.almostEqual(_:)(void **a1)
{
  id *v1;
  void *v2;
  id v3;
  double *result;
  double v5;
  id v6;
  double v7;
  id v8;
  double v9;
  id v10;
  double v11;
  id v12;
  double v13;
  id v14;
  double v15;
  id v16;
  double v17;
  id v18;
  double v19;

  v2 = *a1;
  v3 = *v1;
  result = (double *)CGColorRef.components.getter();
  if (!result)
    goto LABEL_30;
  if (!*((_QWORD *)result + 2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v5 = result[4];

  swift_bridgeObjectRelease();
  v6 = v2;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!*((_QWORD *)result + 2))
    goto LABEL_23;
  v7 = result[4];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v5, v7) >= 0.01)
    return 0;
  v8 = v3;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (*((_QWORD *)result + 2) < 2uLL)
    goto LABEL_24;
  v9 = result[5];

  swift_bridgeObjectRelease();
  v10 = v6;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (*((_QWORD *)result + 2) < 2uLL)
    goto LABEL_25;
  v11 = result[5];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v9, v11) >= 0.01)
    return 0;
  v12 = v8;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*((_QWORD *)result + 2) < 3uLL)
    goto LABEL_26;
  v13 = result[6];

  swift_bridgeObjectRelease();
  v14 = v10;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (*((_QWORD *)result + 2) < 3uLL)
    goto LABEL_27;
  v15 = result[6];

  swift_bridgeObjectRelease();
  if (vabdd_f64(v13, v15) >= 0.01)
    return 0;
  v16 = v12;
  result = (double *)CGColorRef.components.getter();
  if (!result)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (*((_QWORD *)result + 2) < 4uLL)
    goto LABEL_28;
  v17 = result[7];

  swift_bridgeObjectRelease();
  v18 = v14;
  result = (double *)CGColorRef.components.getter();
  if (result)
  {
    if (*((_QWORD *)result + 2) >= 4uLL)
    {
      v19 = result[7];

      swift_bridgeObjectRelease();
      return (double *)(vabdd_f64(v17, v19) < 0.01);
    }
    goto LABEL_29;
  }
LABEL_37:
  __break(1u);
  return result;
}

void static Color.random()(CGColorRef *a1@<X8>)
{
  CGFloat v2;
  CGFloat v3;
  unint64_t v4;

  v2 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  v3 = (double)specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
  v4 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  Color.init(red:green:blue:alpha:)(a1, v2, v3, (double)v4 * 1.11022302e-16 + 0.0, 1.0);
}

uint64_t Color.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  dispatch thunk of CRDecoder.valueContainer()();
  if (!v0)
  {
    dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
    v2 = v1;
    swift_release();
    __asm { BR              X10 }
  }
  return swift_release();
}

void Color.encode(to:)()
{
  CGColor **v0;
  CGColor *v1;
  CGColor *v2;
  uint64_t v3;
  double v4;
  unsigned int v5;
  CGColor *v6;
  uint64_t v7;
  double v8;
  unsigned int v9;
  CGColor *v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  CGColor *v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD v21[4];
  uint64_t v22;

  v1 = *v0;
  if (CGColorGetNumberOfComponents(v1) != 4)
  {
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v2 = v1;
  v3 = CGColorRef.components.getter();

  if (!v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_12;
  v4 = *(double *)(v3 + 32);
  swift_bridgeObjectRelease();
  *(float *)&v5 = v4;
  v21[0] = _OSSwapInt32(v5);
  v6 = v2;
  v7 = CGColorRef.components.getter();

  if (!v7)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(v7 + 16) < 2uLL)
    goto LABEL_13;
  v8 = *(double *)(v7 + 40);
  swift_bridgeObjectRelease();
  *(float *)&v9 = v8;
  v21[1] = _OSSwapInt32(v9);
  v10 = v6;
  v11 = CGColorRef.components.getter();

  if (!v11)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_QWORD *)(v11 + 16) < 3uLL)
    goto LABEL_14;
  v12 = *(double *)(v11 + 48);
  swift_bridgeObjectRelease();
  *(float *)&v13 = v12;
  v21[2] = _OSSwapInt32(v13);
  v14 = v10;
  v15 = CGColorRef.components.getter();

  if (v15)
  {
    if (*(_QWORD *)(v15 + 16) >= 4uLL)
    {
      v16 = *(double *)(v15 + 56);
      swift_bridgeObjectRelease();
      *(float *)&v17 = v16;
      v21[3] = _OSSwapInt32(v17);
      v18 = specialized Data.init<A>(_:)((uint64_t)v21, (uint64_t)&v22);
      v20 = v19;
      Data.encode(to:)();
      outlined consume of Data._Representation(v18, v20);
      return;
    }
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
}

void Color.withAlphaComponent(_:)(CGColorRef *a1@<X8>, CGFloat a2@<D0>)
{
  id *v2;
  id v5;
  uint64_t v6;
  CGFloat v7;
  id v8;
  uint64_t v9;
  CGFloat v10;
  id v11;
  uint64_t v12;
  CGFloat v13;
  CGColorSpace *v14;
  CGColorSpace *v15;
  CGColorRef v16;
  CGFloat v17[4];

  v5 = *v2;
  v6 = CGColorRef.components.getter();
  if (!v6)
    goto LABEL_13;
  if (!*(_QWORD *)(v6 + 16))
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = *(double *)(v6 + 32);
  swift_bridgeObjectRelease();
  v8 = v5;
  v9 = CGColorRef.components.getter();

  if (!v9)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(_QWORD *)(v9 + 16) < 2uLL)
    goto LABEL_11;
  v10 = *(double *)(v9 + 40);
  swift_bridgeObjectRelease();
  v11 = v8;
  v12 = CGColorRef.components.getter();

  if (!v12)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_QWORD *)(v12 + 16) < 3uLL)
    goto LABEL_12;
  v13 = *(double *)(v12 + 48);

  swift_bridgeObjectRelease();
  v17[0] = v7;
  v17[1] = v10;
  v17[2] = v13;
  v17[3] = a2;
  v14 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (!v14)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = v14;
  v16 = CGColorCreate(v14, v17);

  if (v16)
  {
    *a1 = v16;
    return;
  }
LABEL_17:
  __break(1u);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Color.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance Color.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1DDC78B44()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Color.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC78BD8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Color.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1DDC78C64()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Color.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Color.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Color.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1DDC78D18 + 4 * byte_1DDF3A68C[*v0]))();
}

void sub_1DDC78D18(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65657267;
  a1[1] = 0xE500000000000000;
}

void sub_1DDC78D30(_QWORD *a1@<X8>)
{
  *a1 = 1702194274;
  a1[1] = 0xE400000000000000;
}

void sub_1DDC78D44(_QWORD *a1@<X8>)
{
  *a1 = 0x6168706C61;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Color.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDC78D84 + 4 * byte_1DDF3A690[*v0]))(6579570, 0xE300000000000000);
}

uint64_t sub_1DDC78D84()
{
  return 0x6E65657267;
}

uint64_t sub_1DDC78D98()
{
  return 1702194274;
}

uint64_t sub_1DDC78DA8()
{
  return 0x6168706C61;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Color.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized Color.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Color.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Color.CodingKeys()
{
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Color.CodingKeys()
{
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Color.init(from:)(_QWORD *a1@<X0>, CGColorRef *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  CGColorRef v15;
  _BYTE v16[32];
  CGFloat v17[4];
  char v18;
  CGFloat v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Color.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    goto LABEL_3;
  v18 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10 = v19;
  v18 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v11 = v19;
  v18 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v12 = v19;
  v18 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17[0] = v10;
  v17[1] = v11;
  v17[2] = v12;
  v17[3] = v19;
  v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v13)
  {
    v14 = v13;
    v15 = CGColorCreate(v13, v17);

    if (v15)
    {
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
      *a2 = v15;
LABEL_3:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

_QWORD *Color.encode(to:)(_QWORD *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  _QWORD *result;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Color.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v9;
  result = (_QWORD *)CGColorRef.components.getter();
  if (!result)
    goto LABEL_18;
  if (!result[2])
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = result[4];

  swift_bridgeObjectRelease();
  v20 = v12;
  HIBYTE(v19) = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v13 = v10;
  result = (_QWORD *)CGColorRef.components.getter();
  if (!result)
    goto LABEL_19;
  if (result[2] < 2uLL)
    goto LABEL_15;
  v14 = result[5];

  swift_bridgeObjectRelease();
  v20 = v14;
  HIBYTE(v19) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v15 = v13;
  result = (_QWORD *)CGColorRef.components.getter();
  if (!result)
    goto LABEL_20;
  if (result[2] >= 3uLL)
  {
    v16 = result[6];

    swift_bridgeObjectRelease();
    v20 = v16;
    HIBYTE(v19) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v15;
    result = (_QWORD *)CGColorRef.components.getter();
    if (!result)
      goto LABEL_21;
    if (result[2] >= 4uLL)
    {
      v18 = result[7];

      swift_bridgeObjectRelease();
      v20 = v18;
      HIBYTE(v19) = 3;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      return (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

void Color.hash(into:)()
{
  void **v0;
  void *v1;
  id v2;

  v1 = *v0;
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  v2 = v1;
  _CFObject.hash(into:)();

}

Swift::Int Color.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Color()
{
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Color()
{
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Color()
{
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance Color(_QWORD *a1@<X0>, CGColorRef *a2@<X8>)
{
  Color.init(from:)(a1, a2);
}

_QWORD *protocol witness for Encodable.encode(to:) in conformance Color(_QWORD *a1)
{
  return Color.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Color()
{
  lazy protocol witness table accessor for type Color and conformance Color();
  lazy protocol witness table accessor for type Color and conformance Color();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Color()
{
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  return static _CFObject.== infix(_:_:)() & 1;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Color()
{
  return Color.init(from:)();
}

void protocol witness for CRCodable.encode(to:) in conformance Color()
{
  Color.encode(to:)();
}

void Color.isDefaultState.getter()
{
  CGColorSpace *v0;
  CGColorSpace *v1;
  CGColorRef v2;
  CGFloat v3[4];

  memset(v3, 0, 24);
  v3[3] = 1.0;
  v0 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v0)
  {
    v1 = v0;
    v2 = CGColorCreate(v0, v3);

    if (v2)
    {
      type metadata accessor for CGColorRef(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
      static _CFObject.== infix(_:_:)();

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void Color.init(defaultState:)(CGColorRef *a1@<X8>)
{
  CGColorSpace *v2;
  CGColorSpace *v3;
  CGColorRef v4;
  CGFloat v5[4];

  memset(v5, 0, 24);
  v5[3] = 1.0;
  v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v2)
  {
    v3 = v2;
    v4 = CGColorCreate(v2, v5);

    if (v4)
    {
      *a1 = v4;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type Color.CodingKeys and conformance Color.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color.CodingKeys, &type metadata for Color.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color.CodingKeys, &type metadata for Color.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color.CodingKeys, &type metadata for Color.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys;
  if (!lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Color.CodingKeys, &type metadata for Color.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Color.CodingKeys and conformance Color.CodingKeys);
  }
  return result;
}

id sub_1DDC79940@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *a2 = v2;
  return v2;
}

void sub_1DDC7994C(id *a1)
{
  Color.cgColor.setter((CGColor *)*a1);
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

uint64_t storeEnumTagSinglePayload for Color.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDC799D0 + 4 * byte_1DDF3A699[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDC79A04 + 4 * byte_1DDF3A694[v4]))();
}

uint64_t sub_1DDC79A04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC79A0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC79A14);
  return result;
}

uint64_t sub_1DDC79A20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC79A28);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDC79A2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC79A34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Color.CodingKeys()
{
  return &type metadata for Color.CodingKeys;
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t __buf;

  if (result)
  {
    v1 = result;
    __buf = 0;
    arc4random_buf(&__buf, 8uLL);
    result = (__buf * (unsigned __int128)v1) >> 64;
    if (__buf * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > __buf * v1)
      {
        do
        {
          __buf = 0;
          arc4random_buf(&__buf, 8uLL);
        }
        while (v2 > __buf * v1);
        return (__buf * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Color.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Color.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t _OSSwapInt32(unsigned int a1)
{
  return bswap32(a1);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int64_t v29;
  unint64_t v30;
  unint64_t i;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  void (*v35)(char *, char *, uint64_t);
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(unint64_t, char *, uint64_t);
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v2 = type metadata accessor for CRKeyPath();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for UUID();
  v52 = *(_QWORD *)(v53 - 8);
  v11 = MEMORY[0x1E0C80A78](v53, v10);
  v45 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v44 = (char *)&v42 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v42 - v22;
  v24 = *(_QWORD *)(a1 + 56);
  v47 = a1 + 56;
  v25 = 1 << *(_BYTE *)(a1 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v48 = (unint64_t)(v25 + 63) >> 6;
  v51 = a1;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v46 = MEMORY[0x1E0DEE9D8];
  if (!v27)
    goto LABEL_7;
LABEL_4:
  v30 = __clz(__rbit64(v27));
  v27 &= v27 - 1;
  for (i = v30 | (v29 << 6); ; i = __clz(__rbit64(v33)) + (v29 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v23, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v16 + 72) * i, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v23, v15);
    WeakRef.id.getter();
    CRKeyPath.uuid.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v50);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v9, 1, v53) == 1)
    {
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      if (v27)
        goto LABEL_4;
    }
    else
    {
      v35 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      v35(v44, v9, v53);
      v43 = (uint64_t (*)(unint64_t, char *, uint64_t))v35;
      v35(v45, v44, v53);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v46 + 16) + 1, 1, v46);
      v37 = *(_QWORD *)(v46 + 16);
      v36 = *(_QWORD *)(v46 + 24);
      v38 = v37 + 1;
      if (v37 >= v36 >> 1)
      {
        v42 = v37 + 1;
        v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v46);
        v38 = v42;
        v46 = v41;
      }
      v39 = v45;
      v40 = v46;
      *(_QWORD *)(v46 + 16) = v38;
      result = v43(v40+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v37, v39, v53);
      if (v27)
        goto LABEL_4;
    }
LABEL_7:
    v32 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v32 >= v48)
      goto LABEL_29;
    v33 = *(_QWORD *)(v47 + 8 * v32);
    ++v29;
    if (!v33)
    {
      v29 = v32 + 1;
      if (v32 + 1 >= v48)
        goto LABEL_29;
      v33 = *(_QWORD *)(v47 + 8 * v29);
      if (!v33)
      {
        v29 = v32 + 2;
        if (v32 + 2 >= v48)
          goto LABEL_29;
        v33 = *(_QWORD *)(v47 + 8 * v29);
        if (!v33)
        {
          v29 = v32 + 3;
          if (v32 + 3 >= v48)
            goto LABEL_29;
          v33 = *(_QWORD *)(v47 + 8 * v29);
          if (!v33)
            break;
        }
      }
    }
LABEL_22:
    v27 = (v33 - 1) & v33;
  }
  v34 = v32 + 4;
  if (v34 >= v48)
  {
LABEL_29:
    swift_release();
    return v46;
  }
  v33 = *(_QWORD *)(v47 + 8 * v34);
  if (v33)
  {
    v29 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v29 >= v48)
      goto LABEL_29;
    v33 = *(_QWORD *)(v47 + 8 * v29);
    ++v34;
    if (v33)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v8 << 6); ; i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i));
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized Array._endMutation()();
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_25;
      v12 = *(_QWORD *)(v2 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_25;
        v12 = *(_QWORD *)(v2 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_25;
          v12 = *(_QWORD *)(v2 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_25:
    swift_release();
    return v14;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_25;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, &lazy cache variable for type metadata for UIPress);
    Set.Iterator.init(_cocoa:)();
    v1 = v29;
    v28 = v30;
    v3 = v31;
    v2 = v32;
    v4 = v33;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v28 = a1 + 56;
    v3 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v2 = 0;
  }
  v27 = (unint64_t)(v3 + 64) >> 6;
  v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v8 = v2;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_38;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v11 = v34;
    swift_unknownObjectRelease();
    if (!v34)
      goto LABEL_38;
LABEL_31:
    v15 = v11;
    v16 = objc_msgSend(v15, sel_key);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v17, sel_characters);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v19;

      v21 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26[2] + 1, 1, v26);
      v23 = v21[2];
      v22 = v21[3];
      if (v23 >= v22 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
      v21[2] = v23 + 1;
      v26 = v21;
      v24 = &v21[2 * v23];
      v24[4] = v25;
      v24[5] = v20;
    }
    else
    {

    }
  }
  if (v4)
  {
    v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v10 = v9 | (v2 << 6);
LABEL_30:
    v11 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v11)
      goto LABEL_38;
    goto LABEL_31;
  }
  v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v27)
      goto LABEL_38;
    v13 = *(_QWORD *)(v28 + 8 * v12);
    ++v2;
    if (!v13)
    {
      v2 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_38;
      v13 = *(_QWORD *)(v28 + 8 * v2);
      if (!v13)
      {
        v2 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_38;
        v13 = *(_QWORD *)(v28 + 8 * v2);
        if (!v13)
        {
          v2 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_38;
          v13 = *(_QWORD *)(v28 + 8 * v2);
          if (!v13)
          {
            v2 = v8 + 5;
            if (v8 + 5 >= v27)
              goto LABEL_38;
            v13 = *(_QWORD *)(v28 + 8 * v2);
            if (!v13)
            {
              v14 = v8 + 6;
              while (v27 != v14)
              {
                v13 = *(_QWORD *)(v28 + 8 * v14++);
                if (v13)
                {
                  v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              outlined consume of [AnyHashable : Any].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    v4 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

void CanvasElementResizeView.selection.setter(int64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  void *v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  _QWORD v96[7];

  v5 = v4;
  v87 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v95 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v14);
  v94 = (char *)&v75 - v15;
  v16 = type metadata accessor for CRKeyPath();
  v92 = *(_QWORD *)(v16 - 8);
  v93 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  v21 = (char *)MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v21)
    goto LABEL_7;
  v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v22)
  {
    if (*(_BYTE *)(v22 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) == 1)
    {

LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v80 = a4;
    v23 = *(_QWORD *)&v21[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
    if (v23)
    {
      v24 = *(_BYTE *)(v23 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing);

      if ((v24 & 1) != 0)
        goto LABEL_7;
    }
    else
    {

    }
    v81 = a2;
    v25 = (_QWORD *)MEMORY[0x1DF0E666C](v20);
    v83 = v20;
    if (v25)
    {
      v26 = v25;
      v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x320))();

      if (v27)
      {
        type metadata accessor for TiledTextView();
        if (swift_dynamicCastClass())
        {
          v76 = v27;
          v28 = TiledTextView.paperAttachments.getter();
          v82 = v28;
          if (v28 >> 62)
            goto LABEL_46;
          v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v29)
          {
            while (1)
            {
              v30 = 0;
              v85 = v82 & 0xC000000000000001;
              v77 = v82 + 32;
              v90 = v19;
              v78 = v5;
              v79 = a1;
              v84 = v29;
              while (1)
              {
                if (v85)
                {
                  v32 = (char *)MEMORY[0x1DF0E4D64](v30, v82);
                  v33 = __OFADD__(v30, 1);
                  v34 = v30 + 1;
                  if (v33)
                    goto LABEL_45;
                }
                else
                {
                  v32 = (char *)*(id *)(v77 + 8 * v30);
                  v33 = __OFADD__(v30, 1);
                  v34 = v30 + 1;
                  if (v33)
                    goto LABEL_45;
                }
                v88 = v34;
                v89 = v32;
                v35 = MEMORY[0x1DF0E666C](v20);
                if (!v35)
                  break;
                v36 = (void *)v35;
                type metadata accessor for AnyCanvas();
                v31 = v89;
                v37 = static NSObject.== infix(_:_:)();

                if ((v37 & 1) == 0)
                  break;
LABEL_16:

                v30 = v88;
                if (v88 == v84)
                  goto LABEL_47;
              }
              v38 = *(_QWORD *)&v89[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
              if (!v38)
                goto LABEL_67;
              v86 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
              v39 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
              a1 = *(_QWORD *)(v39 + 16);
              if (!a1)
                break;
              v96[0] = MEMORY[0x1E0DEE9D8];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1, 0);
              v40 = specialized Set.startIndex.getter(v39);
              v20 = v41;
              v5 = v42 & 1;
              v91 = v39 + 56;
              while ((v40 & 0x8000000000000000) == 0 && v40 < 1 << *(_BYTE *)(v39 + 32))
              {
                if (((*(_QWORD *)(v91 + (((unint64_t)v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
                  goto LABEL_43;
                if (*(_DWORD *)(v39 + 36) != (_DWORD)v20)
                  goto LABEL_44;
                v43 = v94;
                (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v94, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v10 + 72) * v40, v9);
                v44 = v95;
                (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v95, v43, v9);
                MEMORY[0x1DF0E3168](v9);
                (*(void (**)(char *, uint64_t))(v10 + 8))(v44, v9);
                v45 = v96[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1);
                  v45 = v96[0];
                }
                v47 = *(_QWORD *)(v45 + 16);
                v46 = *(_QWORD *)(v45 + 24);
                if (v47 >= v46 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
                  v45 = v96[0];
                }
                *(_QWORD *)(v45 + 16) = v47 + 1;
                v19 = v90;
                (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v45+ ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))+ *(_QWORD *)(v92 + 72) * v47, v90, v93);
                v96[0] = v45;
                v48 = specialized _NativeSet.index(after:)(v40, v20, v5 & 1, v39);
                v40 = v48;
                v20 = v49;
                v5 = v50 & 1;
                if (!--a1)
                {
                  outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v48, v49, v50 & 1);
                  swift_bridgeObjectRelease();
                  v5 = v78;
                  v20 = v83;
                  goto LABEL_38;
                }
              }
              __break(1u);
LABEL_43:
              __break(1u);
LABEL_44:
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              swift_bridgeObjectRetain();
              v29 = _CocoaArrayWrapper.endIndex.getter();
              if (!v29)
                goto LABEL_47;
            }
            v45 = MEMORY[0x1E0DEE9D8];
LABEL_38:
            v51 = *(_QWORD *)(v45 + 16);
            swift_bridgeObjectRelease();
            a1 = v79;
            v52 = v89;
            if (v51)
            {
              v53 = *(void **)&v89[v86];
              if (!v53)
                goto LABEL_68;
              v31 = v53;
              CanvasElementResizeView.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

            }
            else
            {
              v31 = v89;
            }
            goto LABEL_16;
          }
LABEL_47:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {

        }
      }
    }
    v54 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v55 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v56 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    v57 = *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    v58 = *(_BYTE *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Set.== infix(_:_:)(v55, a1) & 1) != 0)
    {
      v59 = specialized static Set.== infix(_:_:)(v56, v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = v80;
      if ((v59 & 1) != 0)
      {
        if ((v58 & 1) != 0)
        {
          if ((v80 & 1) != 0)
            goto LABEL_7;
        }
        else if ((v80 & 1) == 0 && v57 == v87)
        {
          goto LABEL_7;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v60 = v80;
    }
    v61 = v83;
    v62 = (void *)MEMORY[0x1DF0E666C](v83);
    if (!v62)
      goto LABEL_7;
    v63 = v60;
    v64 = v62;
    v65 = swift_bridgeObjectRetain();
    v66 = specialized Sequence.compactMap<A>(_:)(v65, v64);
    swift_bridgeObjectRelease();

    v67 = v81;
    *(_QWORD *)v54 = a1;
    *(_QWORD *)(v54 + 8) = v67;
    *(_QWORD *)(v54 + 16) = v87;
    *(_BYTE *)(v54 + 24) = v63 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CanvasElementResizeView.selectionChanged(oldCanvasElements:)((Swift::OpaquePointer)v66);
    swift_bridgeObjectRelease();
    v96[3] = &type metadata for PencilAndPaperFeatureFlags;
    v96[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    LOBYTE(v96[0]) = 0;
    v68 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    if ((v68 & 1) != 0)
      CanvasElementResizeView.ensureStrokesAreSelected()();
    v69 = MEMORY[0x1DF0E666C](v61);
    if (v69)
    {
      v70 = (_QWORD *)v69;
      if (*(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController))
      {
        v71 = *(_QWORD *)v54;
        v72 = *(_QWORD *)(v54 + 8);
        v73 = *(_QWORD *)(v54 + 16);
        v74 = *(_BYTE *)(v54 + 24);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        MiniMenuState.update(from:in:)(v71, v72, v73, v74, v70);

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

      }
    }
    else
    {

    }
  }
  else
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
  }
}

uint64_t CanvasElementResizeView.resizingStrokes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24) & 1) != 0
    || *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16) != 6)
  {
    return MEMORY[0x1E0DEE9E8];
  }
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v8);
  if (!v11
    || (v12 = v11,
        v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x2F8))(),
        v15 = v14,
        v12,
        ObjectType = swift_getObjectType(),
        v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(ObjectType, v15),
        v13,
        !v17))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, 1, 1, v1);
    goto LABEL_9;
  }
  v18 = objc_msgSend(v17, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v10, v5, v1);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v10, 0, 1, v1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
  {
LABEL_9:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
    return MEMORY[0x1E0DEE9E8];
  }
  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
    return MEMORY[0x1E0DEE9E8];
  v19 = (void *)v23[1];
  v20 = swift_bridgeObjectRetain();
  v21 = specialized _NativeSet.filter(_:)(v20, v19);

  return v21;
}

Swift::Void __swiftcall CanvasElementResizeView.selectionChanged(oldCanvasElements:)(Swift::OpaquePointer oldCanvasElements)
{
  void *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  id v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  _QWORD *v28;
  void *v29;
  UIAccessibilityNotifications v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  char *v41;
  unint64_t v42;
  void *rawValue;
  unint64_t v44;
  void *v45;
  void *v46;

  CanvasElementResizeView.addControlHandles()();
  objc_msgSend(v1, sel_layoutSubviews);
  v45 = v1;
  CanvasElementResizeView.endTransform(cancel:)(1);
  if ((unint64_t)oldCanvasElements._rawValue >> 62)
    goto LABEL_49;
  v3 = *(_QWORD *)(((unint64_t)oldCanvasElements._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  rawValue = oldCanvasElements._rawValue;
  if (v3)
  {
    v4 = 0;
    v44 = (unint64_t)oldCanvasElements._rawValue & 0xC000000000000001;
    v41 = (char *)oldCanvasElements._rawValue + 32;
    v42 = (unint64_t)oldCanvasElements._rawValue & 0xFFFFFFFFFFFFFF8;
    do
    {
      if (v44)
      {
        v5 = (_QWORD *)MEMORY[0x1DF0E4D64](v4, rawValue);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v42 + 16))
          goto LABEL_47;
        v5 = *(id *)&v41[8 * v4];
      }
      v6 = v5;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v8 = v45;
      v9 = swift_bridgeObjectRetain();
      v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
      swift_bridgeObjectRelease();

      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
        if (!v11)
          goto LABEL_5;
      }
      else
      {
        v11 = *(void **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11)
          goto LABEL_5;
      }
      if ((v10 & 0xC000000000000001) != 0)
        v12 = (id)MEMORY[0x1DF0E4D64](0, v10);
      else
        v12 = *(id *)(v10 + 32);
      v13 = v12;
      type metadata accessor for AnyCanvasElementView();
      v14 = static NSObject.== infix(_:_:)();

      if ((v14 & 1) != 0)
      {
LABEL_17:
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
      if (v11 != (void *)1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1DF0E4D64](1, v10);
          v15 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if ((v15 & 1) != 0)
            goto LABEL_17;
          if (v11 != (void *)2)
          {
            v16 = 2;
            do
            {
              MEMORY[0x1DF0E4D64](v16, v10);
              oldCanvasElements._rawValue = (void *)(v16 + 1);
              if (__OFADD__(v16, 1))
                goto LABEL_46;
              v17 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if ((v17 & 1) != 0)
                goto LABEL_17;
              ++v16;
            }
            while (oldCanvasElements._rawValue != v11);
          }
        }
        else
        {
          v18 = *(id *)(v10 + 40);
          v19 = static NSObject.== infix(_:_:)();

          if ((v19 & 1) != 0)
            goto LABEL_17;
          if (v11 != (void *)2)
          {
            v20 = 6;
            while (1)
            {
              oldCanvasElements._rawValue = (void *)(v20 - 3);
              if (__OFADD__(v20 - 4, 1))
                break;
              v21 = *(id *)(v10 + 8 * v20);
              v22 = static NSObject.== infix(_:_:)();

              if ((v22 & 1) != 0)
                goto LABEL_17;
              ++v20;
              if (oldCanvasElements._rawValue == v11)
                goto LABEL_5;
            }
LABEL_48:
            __break(1u);
LABEL_49:
            swift_bridgeObjectRetain();
            v3 = _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_3;
          }
        }
      }
LABEL_5:
      swift_bridgeObjectRelease_n();
      (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x230))(0);
LABEL_6:

    }
    while (v4 != v3);
  }
  swift_bridgeObjectRelease();
  v23 = v45;
  v24 = swift_bridgeObjectRetain();
  v25 = specialized Sequence.compactMap<A>(_:)(v24, (uint64_t)v23);
  swift_bridgeObjectRelease();

  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v26)
      goto LABEL_51;
  }
  else
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v26)
      goto LABEL_51;
  }
  if (v26 < 1)
  {
    __break(1u);
    return;
  }
  for (i = 0; i != v26; ++i)
  {
    if ((v25 & 0xC000000000000001) != 0)
      v28 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v25);
    else
      v28 = *(id *)(v25 + 8 * i + 32);
    v29 = v28;
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v28) + 0x230))(1);

  }
LABEL_51:
  swift_bridgeObjectRelease();
  v30 = *MEMORY[0x1E0DC4578];
  v31 = *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v31
    && (v32 = *(void **)(v31 + 16)) != 0
    && (v33 = objc_msgSend(v32, sel_view)) != 0)
  {
    v46 = v33;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v34 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();

  }
  else
  {
    v34 = 0;
  }
  UIAccessibilityPostNotification(v30, v34);
  swift_unknownObjectRelease();
  v35 = v23;
  v36 = swift_bridgeObjectRetain();
  v37 = specialized Sequence.compactMap<A>(_:)(v36, (uint64_t)v35);
  swift_bridgeObjectRelease();

  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v39._object = (void *)0xE900000000000073;
  v39._countAndFlagsBits = 0x746E656D656C6520;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40 = (void *)MEMORY[0x1DF0E41AC](0x676E697A69736552, 0xE900000000000020);
  swift_bridgeObjectRelease();
  objc_msgSend(v35, sel_setAccessibilityLabel_, v40);

}

char *CanvasElementResizeView.init(frame:canvas:)(void *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t (*v21)(uint64_t, uint64_t);
  char *v22;
  void *v23;
  char *v24;
  id v25;
  uint64_t v26;
  void *v27;
  char *result;
  id v29;
  uint64_t v30;
  void *v31;
  id v32;
  char *v33;
  id v34;

  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_moreButton) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_contextMenuInteraction) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer) = 0;
  v10 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 1;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage) = 0;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) = 0;
  v11 = v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v12 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)v11 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = 6;
  *(_BYTE *)(v11 + 24) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v5 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement) = 0;
  v13 = a1;
  ResizeView.init(frame:canvas:resizeHandles:)(v13, 0, a2, a3, a4, a5);
  v15 = (char *)v14;
  v16 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000027, 0x80000001DDF53AD0);
  objc_msgSend(v15, sel_setAccessibilityIdentifier_, v16);

  type metadata accessor for MiniMenuController();
  swift_allocObject();
  v17 = MiniMenuController.init()();
  v17[5] = &protocol witness table for CanvasElementResizeView;
  v18 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x1DF0E666C](v18))
  {
    v19 = v17[5];
    ObjectType = swift_getObjectType();
    v21 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
    v22 = v15;
    v23 = (void *)v21(ObjectType, v19);
    swift_unknownObjectRelease();
  }
  else
  {
    v24 = v15;
    v23 = 0;
  }
  swift_unknownObjectWeakAssign();

  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController] = v17;
  swift_release();
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v15, sel_tapped_);
  v26 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer;
  v27 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer];
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer] = v25;

  result = *(char **)&v15[v26];
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  result = (char *)objc_msgSend(result, sel_setDelegate_, v15);
  if (!*(_QWORD *)&v15[v26])
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v15, sel_addGestureRecognizer_);
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v15, sel_doubleTapped_);
  v30 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer;
  v31 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer];
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer] = v29;

  result = *(char **)&v15[v30];
  if (!result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(result, sel_setNumberOfTapsRequired_, 2);
  result = *(char **)&v15[v30];
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(result, sel_setDelegate_, v15);
  result = *(char **)&v15[v26];
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!*(_QWORD *)&v15[v30])
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (char *)objc_msgSend(result, sel_requireGestureRecognizerToFail_);
  if (*(_QWORD *)&v15[v30])
  {
    objc_msgSend(v15, sel_addGestureRecognizer_);
    v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3750]), sel_initWithDelegate_, v15);
    objc_msgSend(v32, sel__setLiftDelay_, 0.5);
    objc_msgSend(v32, sel__setPointerLiftDelay_, 0.5);
    objc_msgSend(v32, sel__setAllowsPointerDragBeforeLiftDelay_, 0);
    v33 = v15;
    v34 = v32;
    objc_msgSend(v33, sel_addInteraction_, v34);

    return v33;
  }
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementResizeView.didMoveToWindow()()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  objc_msgSendSuper2(&v6, sel_didMoveToWindow);
  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_layer);
  v2 = objc_msgSend(v0, sel_window);
  v3 = v2;
  if (!v2 || (v4 = objc_msgSend(v2, sel_tintColor)) == 0)
  {
    if (one-time initialization token for resizeHandleColor != -1)
      swift_once();
    v4 = (id)static UIConstants.resizeHandleColor;
  }

  v5 = objc_msgSend(v4, sel_CGColor);
  objc_msgSend(v1, sel_setBorderColor_, v5);

  if (*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection] + 16)
    || *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8] + 16))
  {
    CanvasElementResizeView.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
  }
}

void CanvasElementResizeView.controlHandleCoordinateSpaceScaled.getter(_OWORD *a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v21[6];
  CGAffineTransform v22;

  v3 = v1;
  v4 = swift_bridgeObjectRetain();
  v5 = specialized Sequence.compactMap<A>(_:)(v4, (uint64_t)v3);
  swift_bridgeObjectRelease();

  if (!(v5 >> 62))
  {
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    v11 = 1.0;
    v13 = 0.0;
    v14 = 0.0;
    v12 = 0.0;
    v9 = 0.0;
    v10 = 1.0;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v15)
    goto LABEL_8;
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v6 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v5);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v5 + 32);
LABEL_6:
    v7 = v6;
    v8 = swift_bridgeObjectRelease();
    (*(void (**)(_QWORD *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x1A8))(v21, v8);

    v10 = *(double *)v21;
    v9 = *(double *)&v21[1];
    v12 = *(double *)&v21[2];
    v11 = *(double *)&v21[3];
    v14 = *(double *)&v21[4];
    v13 = *(double *)&v21[5];
LABEL_9:
    ResizeView.modelToViewTransform.getter((__int128 *)&v22);
    t1.a = v10;
    t1.b = v9;
    t1.c = v12;
    t1.d = v11;
    t1.tx = v14;
    t1.ty = v13;
    t2 = v22;
    CGAffineTransformConcat(&v18, &t1, &t2);
    v16 = *(_OWORD *)&v18.c;
    v17 = *(_OWORD *)&v18.tx;
    *a1 = *(_OWORD *)&v18.a;
    a1[1] = v16;
    a1[2] = v17;
    return;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.addControlHandles()()
{
  char *v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 v24[32];

  v1 = (unint64_t *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  v2 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v3)
      goto LABEL_10;
  }
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v5 = (id)MEMORY[0x1DF0E4D64](i, v2);
    else
      v5 = *(id *)(v2 + 8 * i + 32);
    v6 = v5;
    objc_msgSend(v5, sel_removeFromSuperview);

  }
LABEL_10:
  swift_bridgeObjectRelease();
  *v1 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v7 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v3 = v0;
  v8 = swift_bridgeObjectRetain();
  v2 = specialized Sequence.compactMap<A>(_:)(v8, v3);
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(*((_QWORD *)v7 + 1) + 16))
    goto LABEL_27;
  if (!(v2 >> 62))
  {
    if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_29:
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 != 1)
    goto LABEL_27;
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_26;
LABEL_14:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v9 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v2);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v2 + 32);
LABEL_17:
    v10 = v9;
    v11 = swift_bridgeObjectRelease();
    v22 = v10;
    v23 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x150))(v11);
    v12 = *(_QWORD *)(v23 + 16);
    if (v12)
    {
      v13 = (unsigned __int8 *)(v23 + 32);
      do
      {
        v15 = *v13++;
        v14 = v15;
        if ((v2 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v16 = (id)MEMORY[0x1DF0E4D64](0, v2);
          swift_bridgeObjectRelease();
        }
        else
        {
          v16 = *(id *)(v2 + 32);
        }
        v24[0] = v14;
        v17 = objc_allocWithZone((Class)type metadata accessor for ControlHandleView());
        ControlHandleView.init(elementView:controlPoint:)((uint64_t)v16, v24);
        v19 = v18;
        swift_beginAccess();
        v20 = v19;
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        objc_msgSend(*(id *)&v20[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer], sel_addTarget_action_, v3, sel_controlHandleMoved_);
        objc_msgSend((id)v3, sel_addSubview_, v20);

        --v12;
      }
      while (v12);
    }

LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  __break(1u);
}

void CanvasElementResizeView.showRectangularSelection.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v4 <= 1)
  {
    v5 = *(_QWORD *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v5)
    {
      v6 = v1;
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);
      swift_bridgeObjectRelease();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v12)
        {
LABEL_8:
          if ((v8 & 0xC000000000000001) != 0)
          {
            v9 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v8);
          }
          else
          {
            if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            v9 = *(id *)(v8 + 32);
          }
          v10 = v9;
          v11 = swift_bridgeObjectRelease();
          (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x108))(v11);

          return;
        }
      }
      else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
  }
}

unint64_t CanvasElementResizeView.showRectangularHandles.getter()
{
  char v0;

  CanvasElementResizeView.showRectangularSelection.getter();
  if ((v0 & 1) != 0)
    return (CanvasElementResizeView.modifiableProperties.getter() >> 1) & 1;
  else
    return 0;
}

double CanvasElementResizeView.selectionCornerRadius.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  _QWORD v30[7];
  _QWORD v31[6];
  char v32;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  v11 = 0.0;
  if (*(_QWORD *)(v10 + 16) == 1)
  {
    specialized Collection.first.getter(v10, (uint64_t)v5);
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Link>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v9, 1, 1, v14);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
      return v11;
    }
    WeakTagged_9.tagged5.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Link>);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v9, 1, v15) == 1)
      goto LABEL_5;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for WeakRef<Link>?);
    v17 = *(_QWORD *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
    swift_bridgeObjectRelease();
    if (!v17)
    {
      if (one-time initialization token for resizeCornerRadius != -1)
        swift_once();
      v18 = *(double *)&static UIConstants.resizeCornerRadius;
      v19 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
      if (v19)
      {
        v20 = v19;
        v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v22 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x308))();
        if (v22)
        {
          v23 = v22;
          objc_msgSend(v22, sel_zoomScale);
          v25 = v24;

        }
        else
        {
          v25 = 1.0;
        }
        (*(void (**)(_QWORD *__return_ptr))((*v21 & *v20) + 0x5B8))(v30);
        outlined init with take of CGAffineTransform?((uint64_t)v30, (uint64_t)v31);
        if ((v32 & 1) != 0)
        {

          v27 = 1.0;
        }
        else
        {
          v28 = *(double *)v31;
          v29 = *(double *)&v31[1];

          v27 = sqrt(v28 * v28 + v29 * v29);
        }
        v26 = v25 * v27;
      }
      else
      {
        v26 = 1.0;
      }
      return v18 * v26;
    }
  }
  return v11;
}

uint64_t CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter@<X0>(__int128 *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  _QWORD *v4;
  double (*v5)(CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  CGFloat x;
  double v9;
  CGFloat y;
  double v11;
  CGFloat width;
  double v13;
  CGFloat height;
  _OWORD *v15;
  __int128 v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  double v24;
  CGFloat v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CGAffineTransform v32;
  CGRect v33;

  result = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (result)
  {
    v4 = (_QWORD *)result;
    *(_QWORD *)&v32.a = CanvasElementResizeView.resizingStrokes.getter();
    v5 = *(double (**)(CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x3D0);
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    v7 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0DEB3D0]);
    x = v5(&v32, v6, v7);
    y = v9;
    width = v11;
    height = v13;
    swift_bridgeObjectRelease();
    v15 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
    if ((v1[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform + 48] & 1) == 0)
    {
      v16 = v15[1];
      *(_OWORD *)&v32.a = *v15;
      *(_OWORD *)&v32.c = v16;
      *(_OWORD *)&v32.tx = v15[2];
      v17 = x;
      *(CGFloat *)&v16 = y;
      v18 = width;
      v19 = height;
      v33 = CGRectApplyAffineTransform(*(CGRect *)((char *)&v16 - 8), &v32);
      x = v33.origin.x;
      y = v33.origin.y;
      width = v33.size.width;
      height = v33.size.height;
    }
    v20 = v1;
    v21 = swift_bridgeObjectRetain();
    v22 = specialized Sequence.compactMap<A>(_:)(v21, (uint64_t)v20);
    swift_bridgeObjectRelease();

    v23 = *(void **)&v20[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer];
    if (v23)
    {
      objc_msgSend(v23, sel_rotation);
      v25 = v24;
    }
    else
    {
      v25 = 0.0;
    }
    specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(v22, 1, (__int128 *)&v32, x, y, width, height, v25);
    v30 = *(_OWORD *)&v32.c;
    v31 = *(_OWORD *)&v32.a;
    v29 = *(_OWORD *)&v32.tx;

    result = swift_bridgeObjectRelease();
    v28 = v29;
    v26 = v30;
    v27 = v31;
  }
  else
  {
    v26 = xmmword_1DDF33A30;
    v27 = xmmword_1DDF33970;
    v28 = 0uLL;
  }
  *a1 = v27;
  a1[1] = v26;
  a1[2] = v28;
  return result;
}

unsigned __int8 *CanvasElementResizeView.availableSelectionHandles(for:)(double a1, double a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  size_t v23;
  uint64_t isStackAllocationSafe;
  uint64_t v25;
  Swift::Int v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD v43[3];
  id v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v43[2] = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v5 = v2;
  v6 = swift_bridgeObjectRetain();
  v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v44 = v5;
    if (v8)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v44 = v5;
  if (!v8)
    goto LABEL_13;
LABEL_3:
  v45 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
LABEL_38:
    swift_once();
    goto LABEL_26;
  }
  v9 = 0;
  v10 = v45;
  do
  {
    if ((v7 & 0xC000000000000001) != 0)
      v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v9, v7);
    else
      v11 = *(id *)(v7 + 8 * v9 + 32);
    v12 = v11;
    v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x148))();

    v45 = v10;
    v15 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    if (v15 >= v14 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      v10 = v45;
    }
    ++v9;
    *(_QWORD *)(v10 + 16) = v15 + 1;
    *(_QWORD *)(v10 + 8 * v15 + 32) = v13;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  v5 = v44;
LABEL_14:
  v16 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of CanvasElementResizeView.availableSelectionHandles(for:));
  v17 = *(_QWORD *)(v10 + 16);
  if (v17)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = 0;
    v43[1] = v16;
    do
    {
      v19 = *(_QWORD *)(v10 + 8 * v18 + 32);
      v20 = *(_BYTE *)(v16 + 32);
      v21 = v20 & 0x3F;
      v22 = (unint64_t)((1 << v20) + 63) >> 6;
      v23 = 8 * v22;
      swift_bridgeObjectRetain();
      isStackAllocationSafe = swift_bridgeObjectRetain();
      if (v21 <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1E0C80A78](isStackAllocationSafe, v25);
        bzero((char *)v43 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), v23);
        v26 = specialized closure #1 in _NativeSet.intersection(_:)((Swift::Int)v43 - ((v23 + 15) & 0x3FFFFFFFFFFFFFF0), v22, v16, v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        v27 = (void *)swift_slowAlloc();
        bzero(v27, v23);
        v26 = specialized closure #1 in _NativeSet.intersection(_:)((Swift::Int)v27, v22, v16, v19);
        swift_bridgeObjectRelease();
        MEMORY[0x1DF0E6558](v27, -1, -1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v18;
      v16 = v26;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v16 = v26;
    v5 = v44;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v45 = v16;
  if ((CanvasElementResizeView.modifiableProperties.getter() & 4) == 0)
  {
    specialized Set._Variant.remove(_:)(1u);
    specialized Set._Variant.remove(_:)(5u);
LABEL_43:
    specialized Set._Variant.remove(_:)(7u);
    specialized Set._Variant.remove(_:)(3u);
    goto LABEL_44;
  }
  if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1)
    goto LABEL_38;
LABEL_26:
  if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize > a1)
  {
    specialized Set._Variant.remove(_:)(1u);
    specialized Set._Variant.remove(_:)(5u);
  }
  v28 = v5;
  v29 = swift_bridgeObjectRetain();
  v30 = specialized Sequence.compactMap<A>(_:)(v29, (uint64_t)v28);
  swift_bridgeObjectRelease();

  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v31 == 1)
  {
    v32 = v28;
    v33 = swift_bridgeObjectRetain();
    v34 = specialized Sequence.compactMap<A>(_:)(v33, (uint64_t)v32);
    swift_bridgeObjectRelease();

    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v38)
        goto LABEL_33;
    }
    else if (*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_33:
      if ((v34 & 0xC000000000000001) != 0)
      {
        v35 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v34);
      }
      else
      {
        if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
          __break(1u);
        v35 = *(id *)(v34 + 32);
      }
      v36 = v35;
      v37 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v36) + 0x118))(v37);

      goto LABEL_44;
    }
    swift_bridgeObjectRelease();
  }
  if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize > a2)
    goto LABEL_43;
LABEL_44:
  v39 = v5;
  v40 = (unsigned __int8 *)swift_bridgeObjectRetain();
  v41 = specialized Sequence.compactMap<A>(_:)(v40, (uint64_t)v39);
  swift_bridgeObjectRelease_n();

  return v41;
}

unint64_t CanvasElementResizeView.canDrag.getter()
{
  return CanvasElementResizeView.modifiableProperties.getter() & 1;
}

BOOL CanvasElementResizeView.canRotate.getter()
{
  return CanvasElementResizeView.modifiableProperties.getter() > 7;
}

unint64_t CanvasElementResizeView.canChangeAspectRatio.getter()
{
  return (CanvasElementResizeView.modifiableProperties.getter() >> 2) & 1;
}

void __swiftcall CanvasElementResizeView.hitTestChrome(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  void *v3;
  objc_class *isa;
  CGFloat y;
  CGFloat x;
  UIEvent_optional v7;
  UIView_optional *v8;
  UIEvent_optional v9;
  UIView_optional *v10;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v7.value.super.isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v8, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v7);
    if (!v9.value.super.isa)
    {
      v9.value.super.isa = isa;
      ResizeView.hitTestChrome(_:with:)(v10, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v9);
    }
  }
}

void __swiftcall CanvasElementResizeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  objc_class *isa;
  double y;
  double x;
  UIEvent_optional v8;
  UIView_optional *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  id v15;
  UIEvent_optional v16;
  UIView_optional *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  char *v32;
  void *v33;
  char v34;
  char v35[24];
  ValueMetadata *v36;
  unint64_t v37;
  CGPoint v38;
  CGPoint v39;
  CGRect v40;
  CGRect v41;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) != 0)
    return;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0)
  {
    v8.value.super.isa = isa;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v9, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v8);
    if (v16.value.super.isa)
      return;
    v16.value.super.isa = isa;
    ResizeView.hitTestChrome(_:with:)(v17, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v16);
    if (v18)
      return;
  }
  v36 = &type metadata for PencilAndPaperFeatureFlags;
  v37 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v35[0] = 0;
  v10 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  if ((v10 & 1) == 0)
  {
    v11 = MEMORY[0x1DF0E666C](&v4[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v11)
    {
      v12 = (_QWORD *)v11;
      objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
      v38.x = x;
      v38.y = y;
      if (CGRectContainsPoint(v40, v38)
        && (v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x320))()) != 0)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, sel_selectionInteraction);

        LOBYTE(v14) = objc_msgSend(v15, sel_currentSelectionHasStrokes);
        if ((v14 & 1) != 0)
          return;
      }
      else
      {

      }
    }
  }
  v19 = v4;
  v20 = swift_bridgeObjectRetain();
  v21 = specialized Sequence.compactMap<A>(_:)(v20, (uint64_t)v19);
  swift_bridgeObjectRelease();

  if (!(v21 >> 62))
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
      goto LABEL_15;
LABEL_22:
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)&v19[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
    v39.x = x;
    v39.y = y;
    if (CGRectContainsPoint(v41, v39))
    {
      CanvasElementResizeView.ensureStrokesAreSelected()();
LABEL_24:
      v32 = v19;
    }
    return;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_22;
LABEL_15:
  v23 = 4;
  while (1)
  {
    if ((v21 & 0xC000000000000001) != 0)
      v24 = (_QWORD *)MEMORY[0x1DF0E4D64](v23 - 4, v21);
    else
      v24 = *(id *)(v21 + 8 * v23);
    v25 = v24;
    v26 = v23 - 3;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    objc_msgSend(v24, sel_convertPoint_fromCoordinateSpace_, v19, x, y);
    v28 = v27;
    v30 = v29;
    v31 = objc_msgSend(v25, sel_hitTest_withEvent_, isa);
    if (v31)
      break;

    ++v23;
    if (v26 == v22)
      goto LABEL_22;
  }
  v33 = v31;
  swift_bridgeObjectRelease();
  CanvasElementResizeView.ensureStrokesAreSelected()();
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    objc_msgSend(v19, sel_convertPoint_toCoordinateSpace_, v33, x, y);
    objc_msgSend(v33, sel_hitTest_withEvent_, isa);

    return;
  }
  v34 = (*(uint64_t (**)(double, double))((*MEMORY[0x1E0DEEDD8] & *v25) + 0xC0))(v28, v30);

  if ((v34 & 1) == 0)
  {

    goto LABEL_24;
  }
}

Swift::Void __swiftcall CanvasElementResizeView.controlHandleMoved(_:)(UIPanGestureRecognizer *a1)
{
  unint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  uint64_t v22;
  Swift::Bool v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  double v34;
  double v35;
  uint64_t v36;
  CGFloat a;
  double v38;
  char *v39;
  uint64_t v40;
  void *v41;
  id v42;
  double v43;
  double v44;
  double v45;
  double b;
  double v47;
  double v48;
  id v49;
  _BYTE v50[9];
  _QWORD v51[6];
  CGAffineTransform v52;
  CGAffineTransform t2;
  CGAffineTransform t1;
  char v55;
  CGAffineTransform v56;

  v3 = -[UIPanGestureRecognizer view](a1, sel_view);
  if (v3)
  {
    v49 = v3;
    type metadata accessor for ControlHandleView();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = v4;
      v6 = (id *)(id)v1;
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);
      swift_bridgeObjectRelease();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v10 = v49;
        if (v9)
        {
LABEL_5:
          if ((v8 & 0xC000000000000001) != 0)
          {
            v11 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v8);
          }
          else
          {
            if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_39;
            }
            v11 = *(id *)(v8 + 32);
          }
          v9 = v11;
          swift_bridgeObjectRelease();
          v6 = v6;
          v12 = swift_bridgeObjectRetain();
          v1 = specialized Sequence.compactMap<A>(_:)(v12, (uint64_t)v6);
          swift_bridgeObjectRelease();

          if (v1 >> 62)
          {
            swift_bridgeObjectRetain();
            v22 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v22)
            {
LABEL_10:
              if ((v1 & 0xC000000000000001) == 0)
              {
                if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_41:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  JUMPOUT(0x1DDC7D5B4);
                }
                v13 = *(id *)(v1 + 32);
                goto LABEL_13;
              }
LABEL_39:
              v13 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v1);
LABEL_13:
              v14 = v13;
              v15 = swift_bridgeObjectRelease();
              (*(void (**)(_QWORD *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x1A8))(v51, v15);

              v17 = *(double *)v51;
              v16 = *(double *)&v51[1];
              v19 = *(double *)&v51[2];
              v18 = *(double *)&v51[3];
              v21 = *(double *)&v51[4];
              v20 = *(double *)&v51[5];
LABEL_20:
              ResizeView.modelToViewTransform.getter((__int128 *)&v52);
              t1.a = v17;
              t1.b = v16;
              t1.c = v19;
              t1.d = v18;
              t1.tx = v21;
              t1.ty = v20;
              t2 = v52;
              CGAffineTransformConcat(&v56, &t1, &t2);
              switch((unint64_t)-[UIPanGestureRecognizer state](a1, sel_state))
              {
                case 0uLL:
                  goto LABEL_35;
                case 1uLL:
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
                  v36 = swift_allocObject();
                  *(_OWORD *)(v36 + 16) = xmmword_1DDF35440;
                  *(_QWORD *)(v36 + 32) = v9;
                  *(_QWORD *)&t1.a = v36;
                  specialized Array._endMutation()();
                  a = t1.a;
                  v9 = v9;
                  CanvasElementResizeView.beginTransform(elements:)(*(Swift::OpaquePointer *)&a);
                  swift_bridgeObjectRelease();
                  LOBYTE(t1.a) = *(_BYTE *)(v5 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
                  v38 = (*(double (**)(CGAffineTransform *, CGAffineTransform *, _QWORD, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x158))(&t1, &v56, 0, 1);
                  v39 = (char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation;
                  *(double *)v39 = v38;
                  *((_QWORD *)v39 + 1) = v40;
                  v41 = *(id *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
                  *(id *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = (id)v5;
                  v42 = v49;
                  outlined consume of ResizeView.ActiveHandle(v41);

                  goto LABEL_36;
                case 2uLL:
                  -[UIPanGestureRecognizer translationInView:](a1, sel_translationInView_, v6);
                  v25 = v24;
                  v27 = v26;
                  v28 = *(_BYTE *)(v5 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
                  v29 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
                  if (v29)
                  {
                    v30 = v29;
                    v31 = (_QWORD *)MEMORY[0x1E0DEEDD8];
                    v32 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x308))();
                    if (v32)
                    {
                      v33 = v32;
                      objc_msgSend(v32, sel_zoomScale);
                      v35 = v34;

                    }
                    else
                    {
                      v35 = 1.0;
                    }
                    (*(void (**)(CGAffineTransform *__return_ptr))((*v31 & *v30) + 0x5B8))(&t2);
                    outlined init with take of CGAffineTransform?((uint64_t)&t2, (uint64_t)&t1);
                    if ((v55 & 1) != 0)
                    {

                      v44 = 1.0;
                    }
                    else
                    {
                      v45 = t1.a;
                      b = t1.b;

                      v44 = sqrt(v45 * v45 + b * b);
                    }
                    v43 = v35 * v44;
                  }
                  else
                  {
                    v43 = 1.0;
                  }
                  v47 = v25
                      + *(double *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation);
                  v48 = v27
                      + *(double *)((char *)v6 + OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation + 8);
                  v50[0] = v28;
                  (*(void (**)(_BYTE *, CGAffineTransform *, double, _QWORD, double, double))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x160))(v50, &v56, COERCE_DOUBLE(*(_QWORD *)&v43), 0, v47, v48);
                  objc_msgSend(v6, sel_setNeedsLayout);
                  goto LABEL_35;
                case 3uLL:
                  v23 = 0;
                  goto LABEL_27;
                case 4uLL:
                case 5uLL:
                  v23 = 1;
LABEL_27:
                  CanvasElementResizeView.endTransform(cancel:)(v23);
LABEL_35:

LABEL_36:
                  return;
                default:
                  goto LABEL_41;
              }
            }
          }
          else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_10;
          }
          swift_bridgeObjectRelease();
          v18 = 1.0;
          v20 = 0.0;
          v21 = 0.0;
          v19 = 0.0;
          v16 = 0.0;
          v17 = 1.0;
          goto LABEL_20;
        }
      }
      else
      {
        v9 = *(_QWORD **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        v10 = v49;
        if (v9)
          goto LABEL_5;
      }

      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.ensureStrokesAreSelected()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v9)(void);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  void *v14;
  id v15;
  PKDrawing *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  Class isa;
  _QWORD *v25;

  v1 = v0;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v7)
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x2F8);
    v25 = v7;
    v10 = (void *)v9();
    v12 = v11;
    ObjectType = swift_getObjectType();
    v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(ObjectType, v12);

    if (v14)
    {
      v15 = objc_msgSend(v14, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      PKDrawing._bridgeToObjectiveC()(v16);
      v18 = v17;
      v19 = objc_msgSend(v17, sel_uuid);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24) & 1) != 0)
      {

        swift_unknownObjectRelease();
      }
      else
      {
        v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
        v21 = (*(uint64_t (**)(void))((*v8 & *v25) + 0x320))();
        if (v21)
        {
          v22 = (void *)v21;
          v23 = swift_bridgeObjectRetain();
          specialized Sequence.compactMap<A>(_:)(v23);
          swift_bridgeObjectRelease();
          type metadata accessor for UUID();
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v22, sel_setSelectedStrokeIds_selectionType_forAttachment_, isa, v20, v19);

        }
        swift_unknownObjectRelease();

      }
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.beginTransform()()
{
  void *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char *v6;
  __int128 v7;
  CGFloat v8;
  CGFloat v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform v15;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v18[3];
  __int128 v19[2];
  double v20;
  double v21;
  CGAffineTransform v22;

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  CanvasElementResizeView.beginTransform(elements:)((Swift::OpaquePointer)v3);
  swift_bridgeObjectRelease();
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 1;
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v5 = (void *)v4;
    AnyCanvas.isResizingChanged()();

  }
  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v18);
  v6 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  v7 = v18[1];
  *(_OWORD *)v6 = v18[0];
  *((_OWORD *)v6 + 1) = v7;
  *((_OWORD *)v6 + 2) = v18[2];
  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v19);
  v13 = v19[1];
  v14 = v19[0];
  v8 = v20;
  v9 = v21;
  ResizeView.modelToViewTransform.getter((__int128 *)&v22);
  *(_OWORD *)&t1.a = v14;
  *(_OWORD *)&t1.c = v13;
  t1.tx = v8;
  t1.ty = v9;
  t2 = v22;
  CGAffineTransformConcat(&v15, &t1, &t2);
  v10 = *(_OWORD *)&v15.c;
  v11 = *(_OWORD *)&v15.tx;
  v12 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *(_OWORD *)v12 = *(_OWORD *)&v15.a;
  *((_OWORD *)v12 + 1) = v10;
  *((_OWORD *)v12 + 2) = v11;
}

Swift::Void __swiftcall CanvasElementResizeView.beginTransform(elements:)(Swift::OpaquePointer elements)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  char v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  _BYTE v18[24];
  ValueMetadata *v19;
  unint64_t v20;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
  v5 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
  outlined copy of ResizeView.ActiveHandle(v5);
  CanvasElementResizeView.endTransform(cancel:)(1);
  v6 = *(void **)(v1 + v4);
  *(_QWORD *)(v2 + v4) = v5;
  outlined copy of ResizeView.ActiveHandle(v5);
  outlined consume of ResizeView.ActiveHandle(v6);
  v7 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  *(Swift::OpaquePointer *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements) = elements;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v2 + v7);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9)
      goto LABEL_10;
  }
  if (v9 < 1)
  {
    __break(1u);
    return;
  }
  v10 = 0;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
      v12 = (_QWORD *)MEMORY[0x1DF0E4D64](v10, v8);
    else
      v12 = *(id *)(v8 + 8 * v10 + 32);
    v13 = v12;
    ++v10;
    (*(void (**)(void))((*v11 & *v12) + 0x1E8))();

  }
  while (v9 != v10);
LABEL_10:
  swift_bridgeObjectRelease();
  v19 = &type metadata for PencilAndPaperFeatureFlags;
  v20 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v18[0] = 0;
  v14 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  if ((v14 & 1) != 0
    && (CanvasElementResizeView.ensureStrokesAreSelected()(),
        (v15 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas)) != 0))
  {
    v16 = v15;
    v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x320))();

    objc_msgSend(v17, sel_transformingSelectionBegan);
    outlined consume of ResizeView.ActiveHandle(v5);

  }
  else
  {
    outlined consume of ResizeView.ActiveHandle(v5);
  }
}

Swift::Void __swiftcall CanvasElementResizeView.updateTransform(with:)(CGAffineTransform *with)
{
  char *v1;
  char *v2;
  double a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double ty;
  double tx;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  char v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(CGAffineTransform *, _QWORD);
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform t2;
  CGAffineTransform v44;
  CGAffineTransform t1;
  CGAffineTransform v46;

  v2 = v1;
  a = with->a;
  b = with->b;
  c = with->c;
  d = with->d;
  tx = with->tx;
  ty = with->ty;
  v41 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  v10 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements];
  if ((unint64_t)v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11)
      goto LABEL_10;
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11)
      goto LABEL_10;
  }
  if (v11 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  v12 = 0;
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  do
  {
    if ((v10 & 0xC000000000000001) != 0)
      v14 = (_QWORD *)MEMORY[0x1DF0E4D64](v12, v10);
    else
      v14 = *(id *)(v10 + 8 * v12 + 32);
    v15 = v14;
    ++v12;
    (*(void (**)(CGAffineTransform *__return_ptr))((*v13 & *v14) + 0x1A0))(&v44);
    t1 = v44;
    t2.a = a;
    t2.b = b;
    t2.c = c;
    t2.d = d;
    t2.tx = tx;
    t2.ty = ty;
    CGAffineTransformConcat(&v42, &t1, &t2);
    v46 = v42;
    (*(void (**)(CGAffineTransform *))((*v13 & *v15) + 0x1B0))(&v46);

  }
  while (v11 != v12);
LABEL_10:
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)&v2[v41];
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v10 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v10)
      goto LABEL_19;
  }
  if (v10 < 1)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v17 = 0;
  do
  {
    if ((v16 & 0xC000000000000001) != 0)
      v18 = (id)MEMORY[0x1DF0E4D64](v17, v16);
    else
      v18 = *(id *)(v16 + 8 * v17 + 32);
    v19 = v18;
    ++v17;
    objc_msgSend(v18, sel_layoutIfNeeded, v41);
    objc_msgSend(v19, sel_setNeedsDisplay);

  }
  while (v10 != v17);
LABEL_19:
  swift_bridgeObjectRelease();
  *(_QWORD *)&t1.d = &type metadata for PencilAndPaperFeatureFlags;
  *(_QWORD *)&t1.tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(t1.a) = 0;
  v20 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&t1);
  if ((v20 & 1) != 0)
  {
    v21 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
    if (v21)
    {
      v22 = v21;
      v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x320))();

      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = tx;
      t1.ty = ty;
      objc_msgSend(v23, sel_transformingSelectionChanged_, &t1);

    }
  }
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = tx;
  t1.ty = ty;
  a = 0.01;
  if (!CGAffineTransform.almostEqual(_:scaleThreshold:translationThreshold:)(&t1.a, 0.01, 0.1))
  {
    v24 = v2;
    v25 = swift_bridgeObjectRetain();
    v10 = specialized Sequence.compactMap<A>(_:)(v25, (uint64_t)v24);
    swift_bridgeObjectRelease();

    if (!((unint64_t)v10 >> 62))
    {
      v26 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v26)
      {
LABEL_25:
        if (v26 < 1)
        {
          __break(1u);
          goto LABEL_56;
        }
        v27 = 0;
        v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        do
        {
          if ((v10 & 0xC000000000000001) != 0)
            v29 = (_QWORD *)MEMORY[0x1DF0E4D64](v27, v10);
          else
            v29 = *(id *)(v10 + 8 * v27 + 32);
          v30 = v29;
          (*(void (**)(CGAffineTransform *__return_ptr))((*v28 & *v29) + 0x200))(&t2);
          if ((LOBYTE(t2.a) & 0x20) != 0)
          {
            v31 = (void (*)(CGAffineTransform *, _QWORD))(*(uint64_t (**)(CGAffineTransform *))((*v28 & *v30) + 0x210))(&t2);
            *v32 &= 0xFFFFFFFFFFFFFF9FLL;
            v31(&t2, 0);
          }

          ++v27;
        }
        while (v26 != v27);
      }
LABEL_36:
      swift_bridgeObjectRelease_n();
      goto LABEL_37;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    if (v26)
      goto LABEL_25;
    goto LABEL_36;
  }
LABEL_37:
  if (fabs(sqrt(with->a * with->a + with->b * with->b) + -1.0) < a)
    goto LABEL_51;
  v33 = *(_QWORD *)&v2[v41];
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    if (v34)
    {
LABEL_40:
      if (v34 >= 1)
      {
        v35 = 0;
        v36 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        do
        {
          if ((v33 & 0xC000000000000001) != 0)
            v37 = (_QWORD *)MEMORY[0x1DF0E4D64](v35, v33);
          else
            v37 = *(id *)(v33 + 8 * v35 + 32);
          v38 = v37;
          if (((*(uint64_t (**)(void))((*v36 & *v37) + 0x118))() & 1) != 0)
          {
            v39 = (_QWORD *)(*(uint64_t (**)(void))((*v36 & *v38) + 0x2D0))();
            if (v39)
            {
              v40 = v39;
              (*(void (**)(void))((*v36 & *v39) + 0x148))();

            }
          }
          ++v35;

        }
        while (v34 != v35);
        goto LABEL_50;
      }
LABEL_56:
      __break(1u);
      return;
    }
  }
  else
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v34)
      goto LABEL_40;
  }
LABEL_50:
  swift_bridgeObjectRelease();
LABEL_51:
  if (fabs(tx) >= a || fabs(ty) >= a)
    CanvasElementResizeView.updateCanvasElementFlagsAfterPositionChanged()();
  objc_msgSend(v2, sel_setNeedsLayout, v41);
}

Swift::Void __swiftcall CanvasElementResizeView.endTransform(cancel:)(Swift::Bool cancel)
{
  _BYTE *v1;
  _BYTE *v2;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char **v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  char *v36;
  char v37[24];
  ValueMetadata *v38;
  unint64_t v39;

  v2 = v1;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  v5 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    v38 = &type metadata for PencilAndPaperFeatureFlags;
    v39 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
    v37[0] = 0;
    v7 = isFeatureEnabled(_:)();
    v8 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    if ((v7 & 1) != 0)
    {
      v9 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x320))(v8);
      v10 = v9;
      v11 = &selRef_transformingSelectionCancelled;
      if (!cancel)
        v11 = &selRef_transformingSelectionEnded;
      objc_msgSend(v9, *v11);

    }
    v12 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
    v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements];
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v31)
        goto LABEL_8;
    }
    else if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_8:
      v14 = *(_QWORD *)&v2[v12];
      if (!cancel)
      {
        if ((v14 & 0x8000000000000000) != 0 || (v14 & 0x4000000000000000) != 0)
        {
          v35 = swift_bridgeObjectRetain();
          v15 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v35);
          swift_bridgeObjectRelease();
        }
        else
        {
          v15 = v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
        }
        v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v17 = (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x4F8))(v15, 0);
        swift_release();
        v14 = *(_QWORD *)&v2[v12];
        if ((v17 & 1) != 0)
        {
          v18 = swift_bridgeObjectRetain();
          specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v18);
          v19 = swift_bridgeObjectRelease();
          v20 = (void *)(*(uint64_t (**)(uint64_t))((*v16 & *v6) + 0x320))(v19);
          if (v20)
          {
            v21 = v20;
            v22 = objc_msgSend(v20, sel_selectionInteraction);

            objc_msgSend(v22, sel_didResizeExternalElements);
          }
          goto LABEL_31;
        }
      }
      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        v26 = _CocoaArrayWrapper.endIndex.getter();
        if (v26)
          goto LABEL_20;
      }
      else
      {
        v26 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v26)
        {
LABEL_20:
          v36 = v4;
          if (v26 < 1)
          {
            __break(1u);
            return;
          }
          v27 = 0;
          v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          do
          {
            if ((v14 & 0xC000000000000001) != 0)
              v29 = (_QWORD *)MEMORY[0x1DF0E4D64](v27, v14);
            else
              v29 = *(id *)(v14 + 8 * v27 + 32);
            v30 = v29;
            ++v27;
            (*(void (**)(_QWORD, uint64_t))((*v28 & *v29) + 0x1F0))(0, 1);
            objc_msgSend(v30, sel_layoutIfNeeded);
            objc_msgSend(v30, sel_setNeedsDisplay);

          }
          while (v26 != v27);
          swift_bridgeObjectRelease();
          v4 = v36;
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease();
LABEL_31:
      *(_QWORD *)&v2[v12] = MEMORY[0x1E0DEE9D8];

      swift_bridgeObjectRelease();
      goto LABEL_32;
    }

LABEL_32:
    v32 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
    *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
    outlined consume of ResizeView.ActiveHandle(v32);
    v2[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
    v33 = MEMORY[0x1DF0E666C](v4);
    if (v33)
    {
      v34 = (void *)v33;
      AnyCanvas.isResizingChanged()();

    }
    objc_msgSend(v2, sel_setNeedsLayout);
    return;
  }
  v23 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v23);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v24 = MEMORY[0x1DF0E666C](v4);
  if (v24)
  {
    v25 = (void *)v24;
    AnyCanvas.isResizingChanged()();

  }
  objc_msgSend(v2, sel_setNeedsLayout);
}

void CanvasElementResizeView.rotationSnapOffset.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE v9[32];
  _QWORD v10[6];

  v1 = OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(v0 + v1);
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_6:
        if ((v4 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v6 = *(id *)(v4 + 32);
          goto LABEL_9;
        }
LABEL_14:
        v6 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v4);
LABEL_9:
        v7 = v6;
        v8 = swift_bridgeObjectRelease();
        (*(void (**)(_QWORD *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x1A0))(v10, v8);

        CGAffineTransform.decompose(initialRotation:)((uint64_t)v9, 0.0);
        return;
      }
    }
    else
    {
      v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_14;
  }
}

unint64_t CanvasElementResizeView.modifiableProperties.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  double v27[6];

  v2 = v0;
  v3 = swift_bridgeObjectRetain();
  v4 = 0;
  v5 = specialized Sequence.compactMap<A>(_:)(v3, (uint64_t)v2);
  swift_bridgeObjectRelease();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if (v6 < 1)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v2;
      v8 = 0;
      v1 = 15;
      v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      do
      {
        if ((v5 & 0xC000000000000001) != 0)
          v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v5);
        else
          v10 = *(id *)(v5 + 8 * v8 + 32);
        v11 = v10;
        ++v8;
        v12 = (*(uint64_t (**)(void))((*v9 & *v10) + 0x1F8))();

        v1 &= v12;
      }
      while (v6 != v8);
      swift_bridgeObjectRelease();
      v2 = v7;
      if ((v1 & 4) == 0)
        goto LABEL_34;
      goto LABEL_13;
    }
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v1 = 15;
LABEL_13:
  v13 = v2;
  v14 = swift_bridgeObjectRetain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14, (uint64_t)v13);
  swift_bridgeObjectRelease();

  if (v15 >> 62)
    goto LABEL_30;
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    if (v16 < 2)
      break;
    v17 = v13;
    v18 = swift_bridgeObjectRetain();
    v4 = specialized Sequence.compactMap<A>(_:)(v18, (uint64_t)v17);
    swift_bridgeObjectRelease();

    if (v4 >> 62)
    {
LABEL_32:
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      if (!v19)
      {
LABEL_33:
        swift_bridgeObjectRelease_n();
        break;
      }
    }
    else
    {
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v19)
        goto LABEL_33;
    }
    v20 = 4;
    v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    while (1)
    {
      v13 = (id)(v20 - 4);
      v22 = (v4 & 0xC000000000000001) != 0
          ? (_QWORD *)MEMORY[0x1DF0E4D64](v20 - 4, v4)
          : *(id *)(v4 + 8 * v20);
      v23 = v22;
      v24 = v20 - 3;
      if (__OFADD__(v13, 1))
        break;
      (*(void (**)(double *__return_ptr))((*v21 & *v22) + 0x1A0))(v27);

      if ((fabs(v27[0]) >= 1.0e-12 || fabs(v27[3]) >= 1.0e-12) && (fabs(v27[1]) >= 1.0e-12 || fabs(v27[2]) >= 1.0e-12))
      {
        swift_bridgeObjectRelease_n();
        v1 &= ~4uLL;
        goto LABEL_34;
      }
      ++v20;
      if (v24 == v19)
        goto LABEL_33;
    }
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_34:
  v25 = *(_QWORD *)(CanvasElementResizeView.resizingStrokes.getter() + 16);
  swift_bridgeObjectRelease();
  if (v25)
    return v1 & 0xFFFFFFFFFFFFFFFBLL;
  else
    return v1;
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementsAfterResize()()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (v9)
      {
        v10 = (void *)v9;
        v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
        swift_retain();

        *(_BYTE *)(v11 + 50) = 1;
        FormTextFieldAnalytics.recordEvent()();

        swift_release();
      }
      else
      {

      }
      ++v5;
    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementFlagsAfterPositionChanged()()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, _QWORD);
  _QWORD v11[5];

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_14;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      (*(void (**)(_QWORD *__return_ptr))((*v6 & *v7) + 0x200))(v11);
      if ((v11[0] & 0x40) != 0)
      {
        v10 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))((*v6 & *v8) + 0x210))(v11);
        if ((*v9 & 0x40) != 0)
          *v9 &= ~0x40uLL;
        v10(v11, 0);
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_14;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.updateCanvasElementsAfterPositionChanged()()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v1 = v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (v9)
      {
        v10 = (void *)v9;
        v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
        swift_retain();

        *(_BYTE *)(v11 + 51) = 1;
        FormTextFieldAnalytics.recordEvent()();

        swift_release();
      }
      else
      {

      }
      ++v5;
    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementResizeView.nudge(by:)(CGPoint by)
{
  uint64_t v1;
  uint64_t v2;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void (*v15)(_BYTE *, _QWORD);
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  size_t v25;
  CGAffineTransform v26;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE v29[32];
  CGAffineTransform v30;

  v2 = v1;
  CGAffineTransformMakeTranslation(&v30, by.x, by.y);
  a = v30.a;
  b = v30.b;
  c = v30.c;
  d = v30.d;
  tx = v30.tx;
  ty = v30.ty;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements);
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v10)
  {
    if (v10 < 1)
    {
      __break(1u);
      return;
    }
    v12 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v13 = (_QWORD *)MEMORY[0x1DF0E4D64](v12, v9);
      else
        v13 = *(id *)(v9 + 8 * v12 + 32);
      v14 = v13;
      ++v12;
      v15 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*v11 & *v13) + 0x1B8))(v29);
      v17 = v16;
      v18 = v16[1];
      v19 = v16[2];
      *(_OWORD *)&t1.a = *v16;
      *(_OWORD *)&t1.c = v18;
      *(_OWORD *)&t1.tx = v19;
      t2.a = a;
      t2.b = b;
      t2.c = c;
      t2.d = d;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v26, &t1, &t2);
      v20 = *(_OWORD *)&v26.c;
      v21 = *(_OWORD *)&v26.tx;
      *v17 = *(_OWORD *)&v26.a;
      v17[1] = v20;
      v17[2] = v21;
      v15(v29, 0);

    }
    while (v10 != v12);
  }
  swift_bridgeObjectRelease();
  v22 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v22)
  {
    v23 = (_QWORD *)v22;
    v24 = CanvasElementResizeView.resizingStrokes.getter();
    v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v24);
    swift_bridgeObjectRelease();
    (*(void (**)(size_t, CGAffineTransform *, uint64_t))((*v11 & *v23) + 0x400))(v25, &v30, 1);

    swift_release();
  }
}

uint64_t CanvasElementResizeView.handlePressesBegan(_:with:)(uint64_t a1, objc_class *a2)
{
  char *v2;
  UIPressesEvent_optional v5;
  Class isa;
  char *v7;
  UIPressesEvent_optional v8;
  char v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL8 v27;
  double v28;
  double v29;

  v5.value.super.super.isa = (Class)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5.value.super.super.isa)
  {
    isa = v5.value.super.super.isa;
    v7 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    if (*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection] + 16)
      || *(_QWORD *)(*((_QWORD *)v7 + 1) + 16))
    {
      v5.value.super.super.isa = a2;
      if (ResizeView.updateGestureModifiersState(_:)(v5)
        || (v8.value.super.super.isa = a2, (ResizeView.handlePressesBegan(_:with:)(a1, v8) & 1) != 0))
      {
        v9 = 1;
LABEL_42:

        return v9 & 1;
      }
      v10 = objc_msgSend(v2, sel_window);
      if (v10)
      {
        v11 = v10;
        if (!a2)
          goto LABEL_17;
        v12 = -[objc_class touchesForWindow:](a2, sel_touchesForWindow_, v10);
        if (!v12)
          goto LABEL_17;
        v13 = v12;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
        lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
        v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        v15 = (v14 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(_QWORD *)(v14 + 16);
        swift_bridgeObjectRelease();
        if (v15)
        {
          v9 = 0;
        }
        else
        {
LABEL_17:
          v16 = swift_bridgeObjectRetain();
          v17 = (void *)specialized Collection.first.getter(v16);
          swift_bridgeObjectRelease();
          if (v17 && (v18 = objc_msgSend(v17, sel_key), v17, v18))
          {
            v19 = objc_msgSend(v18, sel_keyCode);

            switch((unint64_t)v19)
            {
              case '*':
              case 'L':
                v20 = *(_QWORD *)v7;
                v21 = *((_QWORD *)v7 + 1);
                v22 = *((_QWORD *)v7 + 2);
                v23 = v7[24];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v9 = 1;
                AnyCanvas.performSelectionAction(_:_:at:)(4, v20, v21, v22, v23, 0);
                swift_bridgeObjectRelease();
                goto LABEL_22;
              case 'O':
                if (a2)
                  v27 = ((unint64_t)-[objc_class modifierFlags](a2, sel_modifierFlags) >> 17) & 1;
                else
                  LOBYTE(v27) = 0;
                v28 = 1.0;
                goto LABEL_35;
              case 'P':
                if (a2)
                  v27 = ((unint64_t)-[objc_class modifierFlags](a2, sel_modifierFlags) >> 17) & 1;
                else
                  LOBYTE(v27) = 0;
                v28 = -1.0;
LABEL_35:
                v29 = 0.0;
                break;
              case 'Q':
                if (a2)
                  v27 = ((unint64_t)-[objc_class modifierFlags](a2, sel_modifierFlags) >> 17) & 1;
                else
                  LOBYTE(v27) = 0;
                v28 = 0.0;
                v29 = 1.0;
                break;
              case 'R':
                if (a2)
                  v27 = ((unint64_t)-[objc_class modifierFlags](a2, sel_modifierFlags) >> 17) & 1;
                else
                  LOBYTE(v27) = 0;
                v28 = 0.0;
                v29 = -1.0;
                break;
              default:
                goto LABEL_21;
            }
            ResizeView.startNudging(by:largerJump:)((CGPoint)__PAIR128__(*(unint64_t *)&v29, *(unint64_t *)&v28), v27);
            v9 = 1;
          }
          else
          {
LABEL_21:
            v24 = v2;
            v25 = swift_bridgeObjectRetain();
            v26 = specialized Sequence.compactMap<A>(_:)(v25, (uint64_t)v24);
            swift_bridgeObjectRelease();

            v9 = specialized CanvasElementResizeView.chainPressesBegan(_:to:with:)(a1, v26);
LABEL_22:
            swift_bridgeObjectRelease();
          }
        }

        goto LABEL_42;
      }
    }
    v9 = 0;
    goto LABEL_42;
  }
  v9 = 0;
  return v9 & 1;
}

Swift::Bool __swiftcall CanvasElementResizeView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  BOOL v13;
  objc_super v15;
  CGPoint v16;
  CGRect v17;

  v2 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v4)
  {
    v5 = *(void **)(v4 + 16);
    if (v5)
    {
      swift_retain();
      v6 = objc_msgSend(v5, sel_view);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)(v4 + 24);
        swift_getKeyPath();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        if ((*(_BYTE *)(v8 + 32) & 1) != 0)
        {
          -[UIGestureRecognizer locationInView:](a1, sel_locationInView_, v7);
          v10 = v9;
          v12 = v11;
          objc_msgSend(v7, sel_bounds);
          v16.x = v10;
          v16.y = v12;
          v13 = CGRectContainsPoint(v17, v16);
          swift_release();

          if (v13)
            return 0;
        }
        else
        {
          swift_release();

        }
      }
      else
      {
        swift_release();
      }
    }
  }
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  return -[UIGestureRecognizer gestureRecognizerShouldBegin:](&v15, sel_gestureRecognizerShouldBegin_, a1);
}

Swift::Void __swiftcall CanvasElementResizeView.tapped(_:)(UITapGestureRecognizer *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  CGPoint v28;
  CGRect v29;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController];
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 24);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
    swift_retain();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(_BYTE *)(v4 + 32) = (*(_BYTE *)(v4 + 32) & 1) == 0;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_release();
  }
  v5 = v1;
  v6 = swift_bridgeObjectRetain();
  v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 1)
    return;
  v9 = v5;
  v10 = swift_bridgeObjectRetain();
  v11 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t)v9);
  swift_bridgeObjectRelease();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v27)
      goto LABEL_8;
LABEL_18:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_8:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v11);
  }
  else
  {
    if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v12 = *(id *)(v11 + 32);
  }
  v13 = v12;
  v14 = swift_bridgeObjectRelease();
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2D0))(v14);

  if (v16)
  {
    objc_msgSend(v16, sel_bounds);
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23;
    -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v16);
    v28.x = v25;
    v28.y = v26;
    v29.origin.x = v18;
    v29.origin.y = v20;
    v29.size.width = v22;
    v29.size.height = v24;
    if (CGRectContainsPoint(v29, v28) && ((*(uint64_t (**)(void))((*v15 & *v16) + 0x98))() & 1) == 0)
      objc_msgSend(v16, sel_becomeFirstResponder);

  }
}

Swift::Void __swiftcall CanvasElementResizeView.doubleTapped(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  void *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  _QWORD *v28;
  id v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;

  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas, v8);
  if (!v11)
    return;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x2F8);
  v34 = v11;
  v14 = (void *)v13();
  -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v14);
  v16 = v15;
  v18 = v17;

  v19 = (void *)v13();
  v20 = objc_msgSend(v19, sel_hitTest_withEvent_, 0, v16, v18);

  if (!v20)
  {
LABEL_8:

    return;
  }
  type metadata accessor for AnyCanvasElementView();
  v21 = swift_dynamicCastClass();
  if (!v21
    || (v22 = (_QWORD *)v21,
        (v23 = (void *)MEMORY[0x1DF0E666C](v21 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0))
  {

    goto LABEL_8;
  }

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v24 = swift_allocObject();
  v25 = v12;
  v26 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_1DDF32CF0;
  (*(void (**)(void))((*v25 & *v22) + 0xE8))();
  SharedTagged_9.tag.getter();
  v35 = v37;
  v36 = v38;
  MEMORY[0x1DF0E3408](v5);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  if (*(_QWORD *)(v26 + 16))
    v27 = specialized Set.init(_nonEmptyArrayLiteral:)(v26);
  else
    v27 = MEMORY[0x1E0DEE9E8];
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  CanvasElementResizeView.selection.setter(v27, MEMORY[0x1E0DEE9E8], 6, 0);
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v22) + 0xD8))() & 1) != 0)
  {
    type metadata accessor for ShapeView();
    if (swift_dynamicCastClass())
    {
      v29 = v20;
      v30 = v34;
      ShapeView.addTextBox(canvas:)(v34);

    }
    v31 = (void *)(*(uint64_t (**)(void))((*v28 & *v22) + 0x2D0))();
    if (v31)
    {
      v32 = v31;
      objc_msgSend(v31, sel_becomeFirstResponder);

    }
  }

}

UIContextMenuConfiguration_optional __swiftcall CanvasElementResizeView.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  char *v2;
  double y;
  double x;
  UIEvent_optional v6;
  UIView_optional *v7;
  uint64_t v8;
  Swift::Bool v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  objc_class *v16;
  objc_class *v17;
  objc_class *v18;
  UIEvent_optional v19;
  UIView_optional *v20;
  void *v21;
  void *v22;
  UIContextMenuConfiguration_optional result;

  y = configurationForMenuAtLocation.y;
  x = configurationForMenuAtLocation.x;
  if ((objc_msgSend(v2, sel_isHidden) & 1) == 0)
  {
    v6.value.super.isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v7, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v6);
    if (v19.value.super.isa)
    {

      goto LABEL_7;
    }
    ResizeView.hitTestChrome(_:with:)(v20, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v19);
    v22 = v21;

    if (v22)
      goto LABEL_7;
  }
  v8 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v8)
  {
LABEL_7:
    v18 = 0;
    goto LABEL_8;
  }
  v10 = (void *)v8;
  v11 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v15 = v11[24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)((uint64_t)_.super.isa, v12, v13, v14, v15, x, y);
  v17 = v16;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v17;
LABEL_8:
  result.value.super.isa = v18;
  result.is_nil = v9;
  return result;
}

UITargetedPreview_optional __swiftcall CanvasElementResizeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  char *v2;
  objc_class *v5;
  Swift::Bool v6;
  objc_class *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  Swift::OpaquePointer v11;
  unint64_t v12;
  UITargetedPreview_optional result;

  v5 = (objc_class *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v5)
  {
    v7 = v5;
    v8 = v2;
    v9 = swift_bridgeObjectRetain();
    v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);
    swift_bridgeObjectRelease();

    if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
    {
      v11._rawValue = specialized _copyCollectionToContiguousArray<A>(_:)(v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11._rawValue = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
    }
    v12 = (unint64_t)AnyCanvas.contextMenuInteraction(_:canvasElementViews:previewForHighlightingMenuWithConfiguration:)(_, v11, previewForHighlightingMenuWithConfiguration);

    swift_release();
    v5 = (objc_class *)v12;
  }
  result.value.super.isa = v5;
  result.is_nil = v6;
  return result;
}

uint64_t CanvasElementResizeView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id CanvasElementResizeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementResizeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeView()
{
  return objc_opt_self();
}

void specialized static CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace(for:strokeBounds:rotateSingleElements:multiSelectionRotation:)(unint64_t a1@<X0>, char a2@<W1>, __int128 *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGFloat y;
  CGFloat height;
  uint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  CGFloat *v27;
  _QWORD *v28;
  int64x2_t v29;
  CGFloat x;
  CGFloat width;
  CGFloat v32;
  _QWORD *v33;
  void *v34;
  CGFloat *v35;
  CGFloat v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  double MidX;
  double MidY;
  CGFloat a;
  CGFloat b;
  CGFloat v48;
  CGFloat c;
  CGFloat d;
  CGFloat ty;
  CGFloat tx;
  _QWORD *v53;
  __int128 *v54;
  CGFloat rect2;
  CGFloat rect2a;
  CGFloat rect2b;
  CGFloat rect2_8;
  CGFloat rect2_8a;
  CGFloat rect2_8b;
  CGFloat rect2_16;
  __int128 rect2_16a;
  __int128 rect2_16b;
  CGFloat v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  CGFloat r2;
  CGFloat r2a;
  __int128 r2b;
  int8x16_t v71;
  CGFloat v72;
  __int128 v73;
  CGAffineTransform v74;
  CGAffineTransform t2;
  CGAffineTransform t1;
  char v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  _BYTE v81[48];
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;
  CGRect v90;
  CGRect v91;

  v16 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17)
      goto LABEL_3;
  }
  else
  {
    v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
      goto LABEL_3;
  }
  v41 = xmmword_1DDF33A30;
  v42 = xmmword_1DDF33970;
  v43 = 0uLL;
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0
    || (~*(_QWORD *)&a5 & 0x7FF0000000000000) == 0
    || (~*(_QWORD *)&a6 & 0x7FF0000000000000) == 0
    || (~*(_QWORD *)&a7 & 0x7FF0000000000000) == 0)
  {
    goto LABEL_40;
  }
LABEL_3:
  r2 = a7;
  v64 = a6;
  rect2_8 = a4;
  rect2_16 = a5;
  if ((a2 & 1) == 0)
    goto LABEL_9;
  if (v16)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 == 1)
      goto LABEL_8;
LABEL_9:
    v20 = *MEMORY[0x1E0C9D628];
    v19 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v21 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    rect2 = *MEMORY[0x1E0C9D628];
    if (v17)
    {
      if (v17 >= 1)
      {
        v54 = a3;
        y = *(double *)(MEMORY[0x1E0C9D628] + 8);
        height = *(double *)(MEMORY[0x1E0C9D628] + 24);
        swift_bridgeObjectRetain();
        v24 = 0;
        v25 = vdup_n_s32(a8 == 0.0);
        if (a8 == 0.0)
          v26 = 50;
        else
          v26 = 52;
        if (a8 == 0.0)
          v27 = (CGFloat *)v81;
        else
          v27 = (CGFloat *)&v77;
        v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v29.i64[0] = v25.u32[0];
        v29.i64[1] = v25.u32[1];
        v71 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v29, 0x3FuLL));
        x = v20;
        width = v21;
        v32 = height;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
            v33 = (_QWORD *)MEMORY[0x1DF0E4D64](v24, a1);
          else
            v33 = *(id *)(a1 + 8 * v24 + 32);
          v34 = v33;
          (*(void (**)(void))((*v28 & *v33) + 8 * v26))();
          v35 = (CGFloat *)&v81[40];
          if (a8 != 0.0)
            v35 = (CGFloat *)&v80;
          v36 = *v35;
          ++v24;
          t1.a = *v27;
          *(int8x16_t *)&t1.b = vbslq_s8(v71, *(int8x16_t *)&v81[8], v78);
          *(int8x16_t *)&t1.d = vbslq_s8(v71, *(int8x16_t *)&v81[24], v79);
          t1.ty = v36;
          v82.origin.x = 0.0;
          v82.origin.y = 0.0;
          v82.size.width = 1.0;
          v82.size.height = 1.0;
          v89 = CGRectApplyAffineTransform(v82, &t1);
          v83.origin.x = x;
          v83.origin.y = y;
          v83.size.width = width;
          v83.size.height = height;
          v84 = CGRectUnion(v83, v89);
          x = v84.origin.x;
          y = v84.origin.y;
          width = v84.size.width;
          height = v84.size.height;

        }
        while (v17 != v24);
        swift_bridgeObjectRelease();
        a3 = v54;
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_42;
    }
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v32 = height;
LABEL_26:
    v85.origin.x = x;
    v85.origin.y = y;
    v85.size.width = width;
    v85.size.height = height;
    v90.origin.x = rect2_8;
    v90.origin.y = rect2_16;
    v90.size.width = v64;
    v90.size.height = r2;
    v86 = CGRectUnion(v85, v90);
    v37 = v86.origin.x;
    v38 = v86.origin.y;
    v39 = v86.size.width;
    v40 = v86.size.height;
    v91.origin.x = rect2;
    v91.origin.y = v19;
    v91.size.width = v21;
    v91.size.height = v32;
    if (CGRectEqualToRect(v86, v91))
    {
      v41 = xmmword_1DDF33A30;
      v42 = xmmword_1DDF33970;
      v43 = 0uLL;
    }
    else
    {
      v72 = v37 - v39 * 0.0;
      r2a = v38 - v40 * 0.0;
      v87.origin.x = v37;
      v87.origin.y = v38;
      v87.size.width = v39;
      v87.size.height = v40;
      MidX = CGRectGetMidX(v87);
      v88.origin.x = v37;
      v88.origin.y = v38;
      v88.size.width = v39;
      v88.size.height = v40;
      MidY = CGRectGetMidY(v88);
      CGAffineTransformMakeRotation(&t1, a8);
      rect2_16a = *(_OWORD *)&t1.c;
      v65 = *(_OWORD *)&t1.a;
      rect2a = t1.tx;
      rect2_8a = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      a = t1.a;
      b = t1.b;
      v48 = v40;
      c = t1.c;
      d = t1.d;
      tx = t1.tx;
      ty = t1.ty;
      *(_OWORD *)&t2.a = v65;
      *(_OWORD *)&t2.c = rect2_16a;
      t2.tx = rect2a;
      t2.ty = rect2_8a;
      CGAffineTransformConcat(&v74, &t1, &t2);
      rect2_16b = *(_OWORD *)&v74.c;
      v66 = *(_OWORD *)&v74.a;
      rect2b = v74.ty;
      rect2_8b = v74.tx;
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = tx;
      t1.ty = ty;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v66;
      *(_OWORD *)&t1.c = rect2_16b;
      t1.tx = rect2_8b;
      t1.ty = rect2b;
      CGAffineTransformConcat(&v74, &t1, &t2);
      t1.a = v39;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = v48;
      t1.tx = v72;
      t1.ty = r2a;
      t2 = v74;
      CGAffineTransformConcat(&v74, &t1, &t2);
      v42 = *(_OWORD *)&v74.a;
      v41 = *(_OWORD *)&v74.c;
      v43 = *(_OWORD *)&v74.tx;
    }
    goto LABEL_40;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    goto LABEL_9;
LABEL_8:
  if (CGRect.isFinite.getter(a4, a5, a6, a7))
    goto LABEL_9;
  if (!v17)
  {
    x = *MEMORY[0x1E0C9D628];
    v19 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v21 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v32 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    rect2 = *MEMORY[0x1E0C9D628];
    y = v19;
    width = v21;
    height = v32;
    goto LABEL_26;
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    swift_bridgeObjectRetain();
    v53 = (_QWORD *)MEMORY[0x1DF0E4D64](0, a1);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v53 = *(id *)(a1 + 32);
LABEL_33:
    (*(void (**)(_BYTE *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v53) + 0x190))(v81);
    r2b = *(_OWORD *)&v81[16];
    v73 = *(_OWORD *)v81;
    v67 = *(_OWORD *)&v81[32];

    v43 = v67;
    v41 = r2b;
    v42 = v73;
LABEL_40:
    *a3 = v42;
    a3[1] = v41;
    a3[2] = v43;
    return;
  }
  __break(1u);
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;

  v37 = a2;
  v38 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v47 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v9);
  v45 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v43 = *(_QWORD *)(v11 - 8);
  v44 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = a3;
  v15 = *(_QWORD *)(a3 + 56);
  v40 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v42 = a4 + OBJC_IVAR___PKDrawingCoherence_model;
  result = swift_beginAccess();
  v39 = 0;
  v20 = 0;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v22 = v43;
  v21 = v44;
  v23 = v46;
  v24 = (uint64_t)v47;
  v25 = v48;
  while (1)
  {
    if (v18)
    {
      v50 = (v18 - 1) & v18;
      v51 = v20;
      v26 = __clz(__rbit64(v18)) | (v20 << 6);
      goto LABEL_5;
    }
    v31 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v31 >= v41)
      goto LABEL_24;
    v32 = *(_QWORD *)(v40 + 8 * v31);
    v33 = v20 + 1;
    if (!v32)
    {
      v33 = v20 + 2;
      if (v20 + 2 >= v41)
        goto LABEL_24;
      v32 = *(_QWORD *)(v40 + 8 * v33);
      if (!v32)
      {
        v33 = v20 + 3;
        if (v20 + 3 >= v41)
          goto LABEL_24;
        v32 = *(_QWORD *)(v40 + 8 * v33);
        if (!v32)
          break;
      }
    }
LABEL_20:
    v50 = (v32 - 1) & v32;
    v51 = v33;
    v26 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_5:
    v27 = v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v14, *(_QWORD *)(v49 + 48) + *(_QWORD *)(v22 + 72) * v26, v21);
    v28 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v45, v42, v25);
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v25);
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v24, 1, v29);
    outlined destroy of StocksKitCurrencyCache.Provider?(v24, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v14, v21);
    v20 = v51;
    v18 = v50;
    if (v30 != 1)
    {
      *(unint64_t *)((char *)v38 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      if (__OFADD__(v39++, 1))
      {
        __break(1u);
LABEL_24:
        v36 = v49;
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v38, v37, v39, v36);
      }
    }
  }
  v34 = v20 + 4;
  if (v20 + 4 >= v41)
    goto LABEL_24;
  v32 = *(_QWORD *)(v40 + 8 * v34);
  if (v32)
  {
    v33 = v20 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v41)
      goto LABEL_24;
    v32 = *(_QWORD *)(v40 + 8 * v33);
    ++v34;
    if (v32)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unsigned __int8 *specialized Sequence.compactMap<A>(_:)(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  int64_t v25;
  uint64_t v26;

  v3 = a1;
  v26 = MEMORY[0x1E0DEE9D8];
  v24 = a1 + 56;
  v4 = 1 << a1[32];
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *((_QWORD *)a1 + 7);
  v25 = (unint64_t)(v4 + 63) >> 6;
  result = (unsigned __int8 *)swift_bridgeObjectRetain();
  v8 = 0;
  v22 = a2;
  v23 = result;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v6)
      {
        v9 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v10 = v9 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_47;
        if (v8 >= v25)
        {
LABEL_45:
          swift_release();
          return (unsigned __int8 *)v26;
        }
        v12 = *(_QWORD *)&v24[8 * v8];
        if (!v12)
        {
          v13 = v8 + 1;
          if (v8 + 1 >= v25)
            goto LABEL_45;
          v12 = *(_QWORD *)&v24[8 * v13];
          if (v12)
            goto LABEL_16;
          v13 = v8 + 2;
          if (v8 + 2 >= v25)
            goto LABEL_45;
          v12 = *(_QWORD *)&v24[8 * v13];
          if (v12)
            goto LABEL_16;
          v13 = v8 + 3;
          if (v8 + 3 >= v25)
            goto LABEL_45;
          v12 = *(_QWORD *)&v24[8 * v13];
          if (v12)
          {
LABEL_16:
            v8 = v13;
          }
          else
          {
            v21 = v8 + 4;
            if (v8 + 4 >= v25)
              goto LABEL_45;
            v12 = *(_QWORD *)&v24[8 * v21];
            for (v8 += 4; !v12; ++v21)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                goto LABEL_48;
              if (v8 >= v25)
                goto LABEL_45;
              v12 = *(_QWORD *)&v24[8 * v8];
            }
          }
        }
        v6 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v8 << 6);
      }
      v14 = *(unsigned __int8 *)(*((_QWORD *)v3 + 6) + v10);
      v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles);
      if (!(v15 >> 62))
        break;
      swift_bridgeObjectRetain_n();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16)
        goto LABEL_20;
LABEL_4:
      result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
    }
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v16)
      goto LABEL_4;
LABEL_20:
    v17 = (v15 & 0xC000000000000001) != 0
        ? (unsigned __int8 *)MEMORY[0x1DF0E4D64](0, v15)
        : (unsigned __int8 *)*(id *)(v15 + 32);
    if (v17[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] != v14)
      break;
LABEL_33:
    v20 = swift_bridgeObjectRelease_n();
    MEMORY[0x1DF0E4398](v20);
    if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = (unsigned __int8 *)specialized Array._endMutation()();
  }

  if (v16 == 1)
    goto LABEL_4;
  v18 = 5;
  while (1)
  {
    result = (v15 & 0xC000000000000001) != 0
           ? (unsigned __int8 *)MEMORY[0x1DF0E4D64](v18 - 4, v15)
           : (unsigned __int8 *)*(id *)(v15 + 8 * v18);
    v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
      break;
    if (result[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type] == v14)
    {
      a2 = v22;
      v3 = v23;
      goto LABEL_33;
    }

    ++v18;
    if (v19 == v16)
    {
      result = (unsigned __int8 *)swift_bridgeObjectRelease_n();
      a2 = v22;
      v3 = v23;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void specialized CanvasElementResizeView.init(coder:)()
{
  _BYTE *v0;
  char *v1;
  char *v2;
  uint64_t v3;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_moreButton] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_contextMenuInteraction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_tapGestureRecognizer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_doubleTapGestureRecognizer] = 0;
  v1 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_dragLocation];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_draggedImage] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu] = 0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v3 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)v2 = MEMORY[0x1E0DEE9E8];
  *((_QWORD *)v2 + 1) = v3;
  *((_QWORD *)v2 + 2) = 6;
  v2[24] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_editingCanvasElements] = MEMORY[0x1E0DEE9D8];
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_hasDraggingCanvasElement] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementResizeView.chainPressesBegan(_:to:with:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = swift_bridgeObjectRetain();
  v5 = (void *)specialized Collection.first.getter(v4);
  swift_bridgeObjectRelease();
  if (!v5)
    return 0;
  v6 = objc_msgSend(v5, sel_key);

  if (!v6)
    return 0;
  if ((objc_msgSend(v6, sel_modifierFlags) & 0x100000) != 0)
    goto LABEL_23;
  v7 = objc_msgSend(v6, sel_characters);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  swift_bridgeObjectRelease();
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v11)
    goto LABEL_23;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v32 == 1)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (!result)
      {

        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_10;
    }
  }
  else if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
  {
    result = swift_bridgeObjectRetain();
LABEL_10:
    if ((a2 & 0xC000000000000001) != 0)
    {
      v13 = (_QWORD *)MEMORY[0x1DF0E4D64](0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      v13 = *(id *)(a2 + 32);
    }
    v14 = v13;
    v15 = swift_bridgeObjectRelease();
    v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v17 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x2D0))(v15);

    if (v17)
    {
      if (((*(uint64_t (**)(void))((*v16 & *v17) + 0x98))() & 1) == 0
        && objc_msgSend(v17, sel_becomeFirstResponder))
      {
        v18 = objc_msgSend(v6, sel_keyCode);
        if (v18 != (id)40)
        {
          if (v18 == (id)44)
          {
            v19 = *(void **)((char *)v17 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
            if (v19)
            {
              v20 = v19;
              result = (uint64_t)objc_msgSend(v20, sel_text);
              if (result)
              {
                v21 = (void *)result;
                v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v24 = v23;

                v25._countAndFlagsBits = 32;
                v25._object = (void *)0xE100000000000000;
                String.append(_:)(v25);
                if (v24)
                {
                  v26 = (void *)MEMORY[0x1DF0E41AC](v22, v24);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v26 = 0;
                }
                objc_msgSend(v20, sel_setText_, v26);

                goto LABEL_30;
              }
              goto LABEL_37;
            }
          }
          else
          {
            v27 = *(void **)((char *)v17 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
            if (v27)
            {
              v28 = v27;
              specialized Sequence.compactMap<A>(_:)(a1);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
              lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
              v29 = BidirectionalCollection<>.joined(separator:)();
              v31 = v30;
              swift_bridgeObjectRelease();
              v26 = (void *)MEMORY[0x1DF0E41AC](v29, v31);
              swift_bridgeObjectRelease();
              objc_msgSend(v28, sel_setText_, v26);

LABEL_30:
            }
          }
        }
        objc_msgSend(v17, sel_setNeedsLayout);

        return 1;
      }

    }
  }
LABEL_23:

  return 0;
}

uint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = type metadata accessor for NSObject(255, a2);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void outlined consume of ResizeView.ActiveHandle(id a1)
{
  if ((unint64_t)a1 >= 2)

}

id outlined copy of ResizeView.ActiveHandle(id result)
{
  if ((unint64_t)result >= 2)
    return result;
  return result;
}

uint64_t specialized CanvasElementResizeView.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1)
{
  char *v1;
  uint64_t result;
  void *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;

  result = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (result)
  {
    v4 = (void *)result;
    v5 = v1;
    v6 = swift_bridgeObjectRetain();
    v7 = specialized Sequence.compactMap<A>(_:)(v6, (uint64_t)v5);
    swift_bridgeObjectRelease();

    if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
    {
      specialized _copyCollectionToContiguousArray<A>(_:)(v7);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(a1, sel_setPreferredCommitStyle_, 1);

    return swift_release();
  }
  return result;
}

uint64_t MiniPopoverState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MiniPopoverState()
{
  return objc_opt_self();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance MiniPopoverState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for MiniPopoverState();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata instantiation function for MiniPopoverButton()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for MiniPopoverButton()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniPopoverButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniPopoverButton(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  v5 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  v6 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for MiniPopoverButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniPopoverButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniPopoverButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for MiniPopoverButton()
{
  JUMPOUT(0x1DF0E63B4);
}

uint64_t associated type witness table accessor for View.Body : View in MiniPopoverButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniPopoverButtonStyle.makeBody(configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  _OWORD v17[3];

  v0 = type metadata accessor for LiftHoverEffect();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ButtonStyleConfiguration.Label();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  if (one-time initialization token for buttonSize != -1)
    swift_once();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v13, v9, v5);
  v14 = &v13[*(int *)(v10 + 36)];
  v15 = v17[1];
  *(_OWORD *)v14 = v17[0];
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v17[2];
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  static CustomHoverEffect<>.lift.getter();
  lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return outlined destroy of ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>((uint64_t)v13);
}

uint64_t MiniPopoverButton.knownPopoverSize.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
  State.wrappedValue.getter();
  return v1;
}

uint64_t MiniPopoverButton.$isPopoverVisible.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  Binding.projectedValue.getter();
  return v1;
}

uint64_t MiniPopoverButton.arrowEdge(proxy:knownPopoverSize:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat MinY;
  CGFloat v33;
  CGFloat v34;
  double v35;
  _BOOL4 v36;
  CGFloat v37;
  CGFloat v38;
  double v39;
  double MaxY;
  uint64_t v41;
  CGFloat v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  CGFloat v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  uint64_t v58;
  double v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  double v64;
  double v65;
  CGFloat v66;
  CGFloat v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  v6 = type metadata accessor for GlobalCoordinateSpace();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    if (one-time initialization token for estimatedPopoverSize != -1)
      swift_once();
    v64 = *(double *)&qword_1F042F140;
  }
  else
  {
    v64 = *(double *)&a3;
  }
  static CoordinateSpaceProtocol<>.global.getter();
  GeometryProxy.frame<A>(in:)();
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v19 = (double *)specialized MiniPopoverButton.popoverState.getter();
  v20 = v19[6];
  v21 = v19[7];
  v22 = v19[8];
  v23 = v19[9];
  if (one-time initialization token for popoverMargin != -1)
    swift_once();
  v65 = UIEdgeInsetsInsetRect(v20, v21, v22, v23, *(double *)&static MiniMenuConstants.popoverMargin, *((double *)&static MiniMenuConstants.popoverMargin + 1));
  v66 = v24;
  v62 = v25;
  v63 = v26;
  v27 = (double *)specialized MiniPopoverButton.popoverState.getter();
  v28 = v27[2];
  v29 = v27[3];
  v30 = v27[4];
  v31 = v27[5];
  v68.origin.x = v12;
  v68.origin.y = v14;
  v68.size.width = v16;
  v68.size.height = v18;
  MinY = CGRectGetMinY(v68);
  v67 = v18;
  v33 = v14;
  v34 = v12;
  v35 = MinY;
  v69.origin.x = v28;
  v69.origin.y = v29;
  v69.size.width = v30;
  v69.size.height = v31;
  if (CGRectGetMaxY(v69) < v35)
    goto LABEL_11;
  v70.origin.x = v34;
  v70.origin.y = v33;
  v70.size.width = v16;
  v70.size.height = v67;
  v84.origin.x = v28;
  v84.origin.y = v29;
  v84.size.width = v30;
  v84.size.height = v31;
  v71 = CGRectIntersection(v70, v84);
  v85.origin.x = v28;
  v85.origin.y = v29;
  v85.size.width = v30;
  v85.size.height = v31;
  v36 = CGRectEqualToRect(v71, v85);
  v61 = v34;
  if (!v36)
    goto LABEL_12;
  v72.origin.x = v34;
  v72.origin.y = v33;
  v72.size.width = v16;
  v37 = v16;
  v38 = v67;
  v72.size.height = v67;
  v39 = CGRectGetMinY(v72);
  v73.origin.x = v28;
  v73.origin.y = v29;
  v73.size.width = v30;
  v73.size.height = v31;
  v59 = v39 - CGRectGetMinY(v73);
  v74.origin.x = v28;
  v74.origin.y = v29;
  v74.size.width = v30;
  v74.size.height = v31;
  MaxY = CGRectGetMaxY(v74);
  v75.origin.x = v61;
  v75.origin.y = v33;
  v75.size.width = v37;
  v75.size.height = v38;
  v16 = v37;
  v34 = v61;
  if (v59 < MaxY - CGRectGetMaxY(v75))
  {
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Edge, CGFloat)>);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1DDF33AB0;
    *(_BYTE *)(v41 + 32) = 0;
    v76.origin.x = v65;
    v76.size.height = v66;
    v43 = v62;
    v42 = v63;
    v76.origin.y = v62;
    v76.size.width = v63;
    v44 = CGRectGetMaxY(v76);
    v77.origin.x = v34;
    v77.origin.y = v33;
    v77.size.width = v16;
    v45 = v34;
    v46 = v67;
    v77.size.height = v67;
    v47 = v44 - CGRectGetMaxY(v77);
    *(double *)(v41 + 40) = v47;
    *(_BYTE *)(v41 + 48) = 2;
    v78.origin.x = v45;
    v78.origin.y = v33;
    v78.size.width = v16;
    v78.size.height = v46;
    v48 = CGRectGetMinY(v78);
    v79.origin.x = v65;
    v79.size.height = v66;
    v79.origin.y = v43;
    v79.size.width = v42;
    v49 = CGRectGetMinY(v79);
    v50 = 0;
  }
  else
  {
LABEL_12:
    v60 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Edge, CGFloat)>);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1DDF33AB0;
    v50 = 2;
    *(_BYTE *)(v41 + 32) = 2;
    v80.origin.x = v34;
    v80.origin.y = v33;
    v80.size.width = v16;
    v51 = v67;
    v80.size.height = v67;
    v52 = CGRectGetMinY(v80);
    v53 = v65;
    v54 = v66;
    v81.origin.x = v65;
    v56 = v62;
    v55 = v63;
    v81.origin.y = v62;
    v81.size.width = v63;
    v81.size.height = v66;
    v47 = v52 - CGRectGetMinY(v81);
    *(double *)(v41 + 40) = v47;
    *(_BYTE *)(v41 + 48) = 0;
    v82.origin.x = v53;
    v82.origin.y = v56;
    v82.size.width = v55;
    v82.size.height = v54;
    v48 = CGRectGetMaxY(v82);
    v83.size.width = v60;
    v83.origin.x = v61;
    v83.origin.y = v33;
    v83.size.height = v51;
    v49 = CGRectGetMaxY(v83);
  }
  *(double *)(v41 + 56) = v48 - v49;
  if (v64 > v47)
  {
    if (v64 <= *(double *)(v41 + 56))
      v50 = *(unsigned __int8 *)(v41 + 48);
    else
      v50 = 2;
  }
  swift_bridgeObjectRelease();
  return v50;
}

uint64_t MiniPopoverButton.body.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  __int128 v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  _QWORD v51[2];
  __int128 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = swift_allocObject();
  v5 = a1[2];
  v6 = a1[3];
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 24) = v6;
  v8 = a1[4];
  v7 = a1[5];
  *(_QWORD *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v7;
  v9 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v4 + 128) = v9;
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(v2 + 96);
  v10 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v4 + 64) = v10;
  v11 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v4 + 96) = v11;
  outlined retain of MiniPopoverButton<A, B>(v2);
  v37 = v5;
  v12 = type metadata accessor for Button();
  v13 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDFA58], v12);
  v14 = lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle();
  *(_QWORD *)&v62 = v12;
  *((_QWORD *)&v62 + 1) = &type metadata for MiniPopoverButtonStyle;
  v63 = v13;
  v64 = v14;
  v15 = MEMORY[0x1DF0E63FC](255, &v62, MEMORY[0x1E0CDE000], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  v36 = v6;
  v16 = type metadata accessor for ModifiedContent();
  *(_QWORD *)&v62 = v12;
  *((_QWORD *)&v62 + 1) = &type metadata for MiniPopoverButtonStyle;
  v63 = v13;
  v64 = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v51[0] = v7;
  v51[1] = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  v18 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v16, v51);
  *(_QWORD *)&v62 = v15;
  *((_QWORD *)&v62 + 1) = v16;
  v63 = OpaqueTypeConformance2;
  v64 = v18;
  MEMORY[0x1DF0E63FC](0, &v62, MEMORY[0x1E0CDF0A8], 0);
  *(_QWORD *)&v62 = v15;
  *((_QWORD *)&v62 + 1) = v16;
  v63 = OpaqueTypeConformance2;
  v64 = v18;
  swift_getOpaqueTypeConformance2();
  *(_QWORD *)&v52 = GeometryReader.init(content:)();
  *((_QWORD *)&v52 + 1) = v19;
  if (one-time initialization token for buttonSize != -1)
    swift_once();
  static Alignment.center.getter();
  v20 = type metadata accessor for GeometryReader();
  v21 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9318], v20);
  View.frame(width:height:alignment:)();
  swift_release();
  v40 = v62;
  v41 = v63;
  v42 = v64;
  v43 = v65;
  v44 = v66;
  v45 = v67;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v37;
  *(_QWORD *)(v22 + 24) = v36;
  *(_QWORD *)(v22 + 32) = v8;
  *(_QWORD *)(v22 + 40) = v7;
  v23 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v22 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v22 + 128) = v23;
  *(_QWORD *)(v22 + 144) = *(_QWORD *)(v2 + 96);
  v24 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v22 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v22 + 64) = v24;
  v25 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v22 + 80) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v22 + 96) = v25;
  outlined retain of MiniPopoverButton<A, B>(v2);
  v26 = type metadata accessor for ModifiedContent();
  v50[0] = v21;
  v50[1] = MEMORY[0x1E0CD8D70];
  v27 = MEMORY[0x1E0CD9C20];
  v28 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v26, v50);
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  v29 = v58;
  v30 = v60;
  v40 = v52;
  v41 = v53;
  v42 = v54;
  v43 = v55;
  v44 = v56;
  v45 = v57;
  v46 = v58;
  v47 = v59;
  v48 = v60;
  v49 = v61;
  v31 = type metadata accessor for ModifiedContent();
  v39[0] = v28;
  v39[1] = MEMORY[0x1E0CDC8B0];
  v32 = MEMORY[0x1DF0E6450](v27, v31, v39);
  static ViewBuilder.buildExpression<A>(_:)(&v40, v31, v32);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v29);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v30);
  v33 = v68;
  v34 = v70;
  v52 = v62;
  v53 = v63;
  v54 = v64;
  v55 = v65;
  v56 = v66;
  v57 = v67;
  v58 = v68;
  v59 = v69;
  v60 = v70;
  v61 = v71;
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)&v52, v31, a2);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v33);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v34);
}

void closure #1 in MiniPopoverButton.body.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  ValueMetadata *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  ValueMetadata *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  ValueMetadata *v66;
  uint64_t v67;
  unint64_t v68;

  v42 = a5;
  v38 = a4;
  v41 = a3;
  v52 = a1;
  v54 = a7;
  v56 = type metadata accessor for PopoverAttachmentAnchor();
  v58 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v9);
  v55 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Button();
  v46 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v37 - v14;
  v16 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDFA58], v11, v13);
  v17 = lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle();
  v65 = v11;
  v66 = &type metadata for MiniPopoverButtonStyle;
  v67 = v16;
  v68 = v17;
  v40 = v16;
  v39 = v17;
  v18 = MEMORY[0x1DF0E63FC](0, &v65, MEMORY[0x1E0CDE000], 0);
  v53 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v57 = (char *)&v37 - v20;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  v21 = type metadata accessor for ModifiedContent();
  v44 = v21;
  v65 = v11;
  v66 = &type metadata for MiniPopoverButtonStyle;
  v67 = v16;
  v68 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v47 = OpaqueTypeConformance2;
  v23 = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  v64[0] = a6;
  v64[1] = v23;
  v24 = a6;
  v45 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v21, v64);
  v65 = v18;
  v66 = (ValueMetadata *)v21;
  v67 = OpaqueTypeConformance2;
  v68 = v45;
  v50 = MEMORY[0x1DF0E63FC](0, &v65, MEMORY[0x1E0CDF0A8], 0);
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v25);
  v43 = (char *)&v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v49 = (char *)&v37 - v29;
  v30 = swift_allocObject();
  v31 = v41;
  v32 = v38;
  *(_QWORD *)(v30 + 16) = v41;
  *(_QWORD *)(v30 + 24) = v32;
  v33 = v42;
  *(_QWORD *)(v30 + 32) = v42;
  *(_QWORD *)(v30 + 40) = v24;
  v34 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v30 + 112) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v30 + 128) = v34;
  *(_QWORD *)(v30 + 144) = *(_QWORD *)(a2 + 96);
  v35 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v30 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v30 + 64) = v35;
  v36 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v30 + 80) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v30 + 96) = v36;
  v59 = v31;
  v60 = v32;
  v61 = v33;
  v62 = v24;
  v63 = a2;
  outlined retain of MiniPopoverButton<A, B>(a2);
  Button.init(action:label:)();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v11);
  v65 = v31;
  v66 = v32;
  v67 = v33;
  v68 = v24;
  type metadata accessor for MiniPopoverButton();
}

uint64_t sub_1DDC827F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  MiniPopoverButton.$isPopoverVisible.getter();
  *(_DWORD *)(v5 - 296) = v6;
  v7 = static Anchor.Source<A>.bounds.getter();
  v9 = *(uint64_t **)(v5 - 224);
  v8 = *(_QWORD *)(v5 - 216);
  *v9 = v7;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 200) + 104))(v9, *MEMORY[0x1E0CDC3D0], v8);
  MiniPopoverButton.knownPopoverSize.getter();
  MiniPopoverButton.arrowEdge(proxy:knownPopoverSize:)(*(_QWORD *)(v5 - 248), v11, v11, v10 & 1);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v0;
  *(_QWORD *)(v12 + 24) = v3;
  *(_QWORD *)(v12 + 32) = v4;
  *(_QWORD *)(v12 + 40) = v1;
  v13 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v12 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v12 + 128) = v13;
  *(_QWORD *)(v12 + 144) = *(_QWORD *)(v2 + 96);
  v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v12 + 64) = v14;
  v15 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v12 + 80) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v12 + 96) = v15;
  outlined retain of MiniPopoverButton<A, B>(v2);
  v16 = swift_checkMetadataState();
  v17 = *(_QWORD *)(v5 - 304);
  v18 = *(_QWORD *)(v5 - 288);
  v19 = *(_QWORD *)(v5 - 320);
  v20 = *(_QWORD *)(v5 - 224);
  v21 = *(_QWORD *)(v5 - 280);
  v22 = *(_QWORD *)(v5 - 208);
  View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 200) + 8))(v20, *(_QWORD *)(v5 - 216));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 240) + 8))(v22, v21);
  *(_QWORD *)(v5 - 120) = v21;
  *(_QWORD *)(v5 - 112) = v16;
  *(_QWORD *)(v5 - 104) = v18;
  *(_QWORD *)(v5 - 96) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = *(_QWORD *)(v5 - 272);
  v25 = *(_QWORD *)(v5 - 264);
  static ViewBuilder.buildExpression<A>(_:)(v19, v25, OpaqueTypeConformance2);
  v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 256) + 8);
  v26(v19, v25);
  static ViewBuilder.buildBlock<A>(_:)(v24, v25, *(_QWORD *)(v5 - 232));
  return ((uint64_t (*)(uint64_t, uint64_t))v26)(v24, v25);
}

uint64_t closure #1 in closure #1 in MiniPopoverButton.body.getter(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  outlined retain of ReflowSpacingAdjustment?((uint64_t)&v3);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Bool>);
  MEMORY[0x1DF0E24B4](&v2);
  Binding.wrappedValue.setter();
  outlined release of ReflowSpacingAdjustment?((uint64_t)&v3);
  return swift_release();
}

uint64_t closure #2 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v18 - v13;
  (*(void (**)(double))(v15 + 72))(v12);
  static ViewBuilder.buildExpression<A>(_:)(v9, a2, a3);
  v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, a2);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v14, a2, a4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v35 = a6;
  v10 = *(_QWORD *)(a3 - 8);
  v32 = a4;
  v33 = v10;
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  v13 = type metadata accessor for ModifiedContent();
  v34 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v32 - v20;
  (*(void (**)(double))(a1 + 88))(v19);
  type metadata accessor for CGSize(0);
  v23 = v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  *(_QWORD *)(v24 + 32) = v32;
  *(_QWORD *)(v24 + 40) = a5;
  v25 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v24 + 112) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v24 + 128) = v25;
  *(_QWORD *)(v24 + 144) = *(_QWORD *)(a1 + 96);
  v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v24 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v24 + 64) = v26;
  v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v24 + 96) = v27;
  outlined retain of MiniPopoverButton<A, B>(a1);
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA00]);
  View.onGeometryChange<A>(for:of:action:)(v23, (uint64_t)specialized implicit closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter, 0, (uint64_t)partial apply for closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter, v24, a3, v23, a5);
  swift_release();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, a3);
  v28 = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  v36[0] = a5;
  v36[1] = v28;
  v29 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v13, v36);
  static ViewBuilder.buildExpression<A>(_:)(v16, v13, v29);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v16, v13);
  static ViewBuilder.buildBlock<A>(_:)((uint64_t)v21, v13, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v21, v13);
}

uint64_t specialized implicit closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = GeometryProxy.size.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

void closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter()
{
  type metadata accessor for MiniPopoverButton();
}

uint64_t sub_1DDC82E04()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
  return State.wrappedValue.setter();
}

uint64_t View.onGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[0] = _GeometryActionModifier.init(value:action:)();
  v15[1] = v10;
  v15[2] = v11;
  v15[3] = v12;
  v13 = type metadata accessor for _GeometryActionModifier();
  swift_retain();
  swift_retain();
  MEMORY[0x1DF0E22B0](v15, a6, v13, a8);
  swift_release();
  return swift_release();
}

void closure #2 in MiniPopoverButton.body.getter(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  type metadata accessor for MiniPopoverButton();
}

void sub_1DDC82F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  MiniPopoverButton.knownPopoverSize.getter();
  if ((v7 & 1) != 0)
  {
    type metadata accessor for SecureHostingController(0, v2, v1, v6);
    (*(void (**)(void))(v0 + 88))();
    v8 = (void *)specialized SecureHostingController.__allocating_init(rootView:)(v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
    v9 = objc_msgSend(v8, sel_view);
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, sel_intrinsicContentSize);
      v12 = v11;
      v14 = v13;

      v15 = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v5 - 96) = *(_OWORD *)v0;
      *(_OWORD *)(v5 - 80) = v15;
      *(_QWORD *)(v5 - 120) = v12;
      *(_QWORD *)(v5 - 112) = v14;
      *(_BYTE *)(v5 - 104) = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGSize?>);
      State.wrappedValue.setter();

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance MiniPopoverButton<A, B>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MiniPopoverButton.body.getter(a1, a2);
}

void partial apply for closure #1 in MiniPopoverButton.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  closure #1 in MiniPopoverButton.body.getter(a1, v2 + 48, *(_QWORD *)(v2 + 16), *(ValueMetadata **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t outlined retain of MiniPopoverButton<A, B>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle;
  if (!lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniPopoverButtonStyle, &type metadata for MiniPopoverButtonStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>;
  if (!lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDC4E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in MiniPopoverButton.body.getter()
{
  return partial apply for closure #2 in MiniPopoverButton.body.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in MiniPopoverButton.body.getter);
}

uint64_t specialized MiniPopoverButton.popoverState.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = *(_QWORD *)(v0 + 56);
  if (!result)
  {
    type metadata accessor for MiniPopoverState();
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, v2, (uint64_t (*)(uint64_t))type metadata accessor for MiniPopoverState, (uint64_t)&protocol conformance descriptor for MiniPopoverState);
    result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in MiniPopoverButton.body.getter()
{
  return partial apply for closure #2 in MiniPopoverButton.body.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in closure #1 in MiniPopoverButton.body.getter);
}

uint64_t partial apply for closure #2 in MiniPopoverButton.body.getter(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #2 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #2 in closure #1 in MiniPopoverButton.body.getter(v1[6], v1[2], v1[4], a1);
}

uint64_t partial apply for closure #3 in closure #1 in MiniPopoverButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #3 in closure #1 in MiniPopoverButton.body.getter((uint64_t)(v1 + 6), v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t objectdestroyTm_5()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter()
{
  closure #1 in closure #3 in closure #1 in MiniPopoverButton.body.getter();
}

ValueMetadata *type metadata accessor for MiniPopoverButtonStyle()
{
  return &type metadata for MiniPopoverButtonStyle;
}

uint64_t sub_1DDC832D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;
  unint64_t v20;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = type metadata accessor for Button();
  v3 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDFA58], v2);
  v4 = lazy protocol witness table accessor for type MiniPopoverButtonStyle and conformance MiniPopoverButtonStyle();
  v17 = v2;
  v18 = &type metadata for MiniPopoverButtonStyle;
  v19 = v3;
  v20 = v4;
  v5 = MEMORY[0x1DF0E63FC](255, &v17, MEMORY[0x1E0CDE000], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _GeometryActionModifier<CGSize>);
  v6 = type metadata accessor for ModifiedContent();
  v17 = v2;
  v18 = &type metadata for MiniPopoverButtonStyle;
  v19 = v3;
  v20 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v16[0] = v1;
  v16[1] = lazy protocol witness table accessor for type _GeometryActionModifier<CGSize> and conformance _GeometryActionModifier<A>();
  v8 = MEMORY[0x1E0CD9C20];
  v9 = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v6, v16);
  v17 = v5;
  v18 = (ValueMetadata *)v6;
  v19 = OpaqueTypeConformance2;
  v20 = v9;
  MEMORY[0x1DF0E63FC](255, &v17, MEMORY[0x1E0CDF0A8], 0);
  v17 = v5;
  v18 = (ValueMetadata *)v6;
  v19 = OpaqueTypeConformance2;
  v20 = v9;
  swift_getOpaqueTypeConformance2();
  v10 = type metadata accessor for GeometryReader();
  v11 = type metadata accessor for ModifiedContent();
  v12 = type metadata accessor for ModifiedContent();
  v15[0] = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9318], v10);
  v15[1] = MEMORY[0x1E0CD8D70];
  v14[0] = MEMORY[0x1DF0E6450](v8, v11, v15);
  v14[1] = MEMORY[0x1E0CDC8B0];
  return MEMORY[0x1DF0E6450](v8, v12, v14);
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in MiniPopoverButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
    v2[0] = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDC528], MEMORY[0x1E0CDC520]);
    v2[1] = MEMORY[0x1E0CD8D70];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDC8357C()
{
  uint64_t (*v0)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout>);
  type metadata accessor for LiftHoverEffect();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8];
  lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, 255, v0, MEMORY[0x1E0CD9AD0]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Int) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

NSString *one-time initialization function for PaperKitPDFThumbnailViewDidSelectPageNotification()
{
  NSString *result;

  result = (NSString *)MEMORY[0x1DF0E41AC](0xD000000000000031, 0x80000001DDF53C90);
  PaperKitPDFThumbnailViewDidSelectPageNotification = result;
  return result;
}

NSNotificationName PaperKitPDFThumbnailViewDidSelectPageNotification.getter()
{
  if (one-time initialization token for PaperKitPDFThumbnailViewDidSelectPageNotification != -1)
    swift_once();
  return PaperKitPDFThumbnailViewDidSelectPageNotification;
}

void key path setter for PaperDocumentThumbnailView.documentView : PaperDocumentThumbnailView(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v2 = v1;
  PaperDocumentThumbnailView.documentView.didset();

}

void PaperDocumentThumbnailView.documentView.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;

  v1 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x1DF0E666C](v2);
  swift_unknownObjectWeakAssign();

  v4 = *(void **)(v0 + v1);
  v5 = MEMORY[0x1DF0E666C](v2);
  if (v5)
  {
    v6 = (void *)v5;
    v7 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    v8 = *v7;
    v9 = v4;

  }
  else
  {
    v10 = v4;
    v8 = 0;
  }
  objc_msgSend(v4, sel_setPDFView_, v8);

  v11 = MEMORY[0x1DF0E666C](v2);
  if (v11)
  {
    v12 = (void *)v11;
    swift_unknownObjectWeakAssign();

  }
  PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();
}

uint64_t PaperDocumentThumbnailView.documentView.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void PaperDocumentThumbnailView.documentView.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  PaperDocumentThumbnailView.documentView.didset();

}

void (*PaperDocumentThumbnailView.documentView.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperDocumentThumbnailView.documentView.modify;
}

void PaperDocumentThumbnailView.documentView.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    PaperDocumentThumbnailView.documentView.didset();
  }
  free(v3);
}

BOOL static PaperDocumentThumbnailView.ThumbnailLayout.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void PaperDocumentThumbnailView.ThumbnailLayout.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PaperDocumentThumbnailView.ThumbnailLayout.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PaperDocumentThumbnailView.thumbnailLayout.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id PaperDocumentThumbnailView.thumbnailLayout.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  swift_beginAccess();
  *v3 = v2;
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setLayoutMode_, v2 ^ 1u);
}

void (*PaperDocumentThumbnailView.thumbnailLayout.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return PaperDocumentThumbnailView.thumbnailLayout.modify;
}

void PaperDocumentThumbnailView.thumbnailLayout.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
    objc_msgSend(*(id *)(v3[3] + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setLayoutMode_, (*(_BYTE *)(v3[3] + v3[4]) & 1) == 0);
  free(v3);
}

id PaperDocumentThumbnailView.contentInset.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_contentInset);
}

id PaperDocumentThumbnailView.contentInset.setter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setContentInset_);
}

void (*PaperDocumentThumbnailView.contentInset.modify(_QWORD *a1))(double **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  v3[4] = v1;
  v3[5] = v4;
  objc_msgSend(*(id *)(v1 + v4), sel_contentInset);
  *v3 = v5;
  v3[1] = v6;
  v3[2] = v7;
  v3[3] = v8;
  return PaperDocumentThumbnailView.contentInset.modify;
}

void PaperDocumentThumbnailView.contentInset.modify(double **a1)
{
  double *v1;

  v1 = *a1;
  objc_msgSend(*(id *)(*((_QWORD *)*a1 + 4) + *((_QWORD *)*a1 + 5)), sel_setContentInset_, **a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

id PaperDocumentThumbnailView.thumbnailSize.getter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_thumbnailSize);
}

id PaperDocumentThumbnailView.thumbnailSize.setter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setThumbnailSize_);
}

id (*PaperDocumentThumbnailView.thumbnailSize.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  a1[2] = v1;
  a1[3] = v3;
  objc_msgSend(*(id *)(v1 + v3), sel_thumbnailSize);
  *a1 = v4;
  a1[1] = v5;
  return PaperDocumentThumbnailView.thumbnailSize.modify;
}

id PaperDocumentThumbnailView.thumbnailSize.modify(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 24)), sel_setThumbnailSize_, *(double *)a1, *(double *)(a1 + 8));
}

void PaperDocumentThumbnailView.updateThumbnailSize()()
{
  char *v0;
  uint64_t v1;
  id v2;
  id v3;
  CGSize v4;
  id v5;
  void *v6;
  id v7;
  _BOOL8 v8;
  id v9;

  v1 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  v2 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView];
  v3 = objc_msgSend(v0, sel_traitCollection);
  v4 = PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)((UITraitCollection)v3);

  objc_msgSend(v2, sel_setThumbnailSize_, v4.width, v4.height);
  v9 = *(id *)&v0[v1];
  v5 = objc_msgSend(v0, sel_traitCollection);
  v6 = v5;
  if (v0[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] == 1)
  {
    v7 = objc_msgSend(v5, sel_horizontalSizeClass);

    v8 = v7 == (id)2;
  }
  else
  {

    v8 = 0;
  }
  objc_msgSend(v9, sel_setLargeThumbnails_, v8);

}

double PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(id a1)
{
  _BYTE *v1;
  double v3;
  id v4;
  double v5;
  double v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  if (v1[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] == 1
    && objc_msgSend(a1, sel_horizontalSizeClass) == (id)2)
  {
    if (one-time initialization token for largeThumbnailViewWidth != -1)
      swift_once();
    v3 = *(double *)&static UIConstants.largeThumbnailViewWidth;
  }
  else
  {
    v3 = 81.0;
  }
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultMetrics);
  objc_msgSend(v4, sel_scaledValueForValue_compatibleWithTraitCollection_, a1, v3);
  v6 = v5;

  v7 = objc_msgSend(v1, sel_window);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_screen);

    objc_msgSend(v9, sel_scale);
    v11 = v10;

  }
  else
  {
    v11 = 1.0;
  }
  v12 = (v3 + (v6 - v3) * 0.5) * v11;
  v13 = floor(v12);
  v14 = v12 - v13;
  v15 = ceil(v12);
  if (v14 < 0.49)
    v15 = v13;
  return v15 / v11;
}

CGSize __swiftcall PaperDocumentThumbnailView.defaultThumbnailViewCellSize(for:)(UITraitCollection a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  double v6;
  double v7;
  CGSize result;

  PaperDocumentThumbnailView.defaultThumbnailWidth(for:)(a1.super.isa);
  v2 = objc_msgSend(v1, sel_window);
  if (v2)
  {
    v4 = v2;
    v5 = objc_msgSend(v2, sel_screen);

    objc_msgSend(v5, sel_scale);
  }
  v6 = UnknownCanvasElementView.flags.modify(v2, v3);
  result.height = v7;
  result.width = v6;
  return result;
}

char *PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)(char a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  _BYTE *v6;
  id v12;
  _BYTE *v13;
  id v14;
  id v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  objc_super v39;

  v6 = v5;
  swift_getObjectType();
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout] = 1;
  v12 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentThumbnailView.ThumbnailDelegate());
  v13 = v6;
  v14 = objc_msgSend(v12, sel_init);
  *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailDelegate] = v14;
  v15 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PPKPDFThumbnailView()), sel_initWithFrame_, 0.0, 0.0, 100.0, 100.0);
  v16 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView] = v15;
  objc_msgSend(v15, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(*(id *)&v13[v16], sel_setAllowsPageReordering_, 1);
  objc_msgSend(*(id *)&v13[v16], sel_setThumbnailContextMenuDelegate_, v14);
  objc_msgSend(*(id *)&v13[v16], sel_setThumbnailDataSourceDelegate_, v14);
  v13[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_supportsLargeThumbnails] = a1;

  v39.receiver = v13;
  v39.super_class = (Class)type metadata accessor for PaperDocumentThumbnailView();
  v17 = (char *)objc_msgSendSuper2(&v39, sel_initWithFrame_, a2, a3, a4, a5);
  PaperDocumentThumbnailView.updateThumbnailSize()();
  swift_unknownObjectWeakAssign();
  v18 = OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView;
  objc_msgSend(v17, sel_addSubview_, *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView]);
  v19 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1DDF329D0;
  v21 = objc_msgSend(*(id *)&v17[v18], sel_leadingAnchor);
  v22 = objc_msgSend(v17, sel_leadingAnchor);
  v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

  *(_QWORD *)(v20 + 32) = v23;
  v24 = objc_msgSend(*(id *)&v17[v18], sel_trailingAnchor);
  v25 = objc_msgSend(v17, sel_trailingAnchor);
  v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(_QWORD *)(v20 + 40) = v26;
  v27 = objc_msgSend(*(id *)&v17[v18], sel_topAnchor);
  v28 = objc_msgSend(v17, sel_topAnchor);
  v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

  *(_QWORD *)(v20 + 48) = v29;
  v30 = objc_msgSend(*(id *)&v17[v18], sel_bottomAnchor);
  v31 = objc_msgSend(v17, sel_bottomAnchor);
  v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

  *(_QWORD *)(v20 + 56) = v32;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_activateConstraints_, isa);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UITraitDefinition.Type>);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1DDF32CF0;
  v35 = type metadata accessor for UITraitHorizontalSizeClass();
  v36 = MEMORY[0x1E0DC23D0];
  *(_QWORD *)(v34 + 32) = v35;
  *(_QWORD *)(v34 + 40) = v36;
  v37 = v17;
  UIView.registerForTraitChanges<A>(_:handler:)();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v37;
}

Swift::Void __swiftcall PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);
  v2 = v0 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (!v3)
  {
    v8 = v1;
LABEL_6:
    v7 = 0;
    goto LABEL_7;
  }
  v4 = (void *)v3;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) != 1)
  {
    v9 = v1;

    goto LABEL_6;
  }
  v5 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  v6 = v1;
  v7 = objc_msgSend(v5, sel_allowsDocumentAssembly);

LABEL_7:
  objc_msgSend(v1, sel_setAllowsPageReordering_, v7);

}

uint64_t PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a2;
  v36 = a3;
  v37 = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRStableAsset();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14, v17);
  v18 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v34 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v9, v21);
  URL.pathExtension.getter();
  CRStableAsset.init(url:extension:)();
  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v8, 1, 1, v24);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v23, v14);
  v25 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v26 = (v16 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (char *)swift_allocObject();
  *((_QWORD *)v27 + 2) = 0;
  *((_QWORD *)v27 + 3) = 0;
  v28 = v34;
  *((_QWORD *)v27 + 4) = v34;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v27[v25], v18, v14);
  v29 = v36;
  *(_QWORD *)&v27[v26] = v35;
  v30 = &v27[(v26 + 15) & 0xFFFFFFFFFFFFFFF8];
  v31 = v37;
  *(_QWORD *)v30 = v29;
  *((_QWORD *)v30 + 1) = v31;
  v32 = v28;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:), (uint64_t)v27);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v23, v14);
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  v9 = type metadata accessor for URL();
  v8[10] = v9;
  v8[11] = *(_QWORD *)(v9 - 8);
  v8[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtCC8PaperKit26PaperDocumentThumbnailView17ThumbnailDelegate_thumbnailView);
  *(_QWORD *)(v0 + 104) = v1;
  if (v1)
  {
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 112) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  else
  {
    (*(void (**)(void))(v0 + 64))();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  char *v1;
  char *v2;

  v1 = *(char **)(v0 + 104);
  swift_release();
  v2 = &v1[OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView];
  swift_beginAccess();
  *(_QWORD *)(v0 + 120) = MEMORY[0x1DF0E666C](v2);

  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 120))
  {
    CRStableAsset.url.getter();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v1;
    *v1 = v0;
    v1[1] = closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:);
    return PaperDocumentView.insertFile(at:at:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56));
  }
  else
  {
    (*(void (**)(_QWORD))(v0 + 64))(0);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 64))(*(_QWORD *)(v0 + 136));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)(*(_QWORD *)v1 + 120);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

uint64_t PaperDocumentThumbnailView.ThumbnailDelegate.menuElements(for:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtCC8PaperKit26PaperDocumentThumbnailView17ThumbnailDelegate_thumbnailView);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  v7 = v5 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  v8 = (void *)MEMORY[0x1DF0E666C](v7);

  if (!v8)
    return 0;
  v9 = a2(a1);

  return v9;
}

id PaperDocumentThumbnailView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentThumbnailView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PaperDocumentThumbnailView()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout;
  if (!lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentThumbnailView.ThumbnailLayout, &type metadata for PaperDocumentThumbnailView.ThumbnailLayout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentThumbnailView.ThumbnailLayout and conformance PaperDocumentThumbnailView.ThumbnailLayout);
  }
  return result;
}

uint64_t sub_1DDC85184@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_documentView;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1DDC851DC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_thumbnailLayout);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

id sub_1DDC8522C(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return PaperDocumentThumbnailView.thumbnailLayout.setter(&v2);
}

id sub_1DDC85260@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_contentInset);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1DDC852A0(double *a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setContentInset_, *a1, a1[1], a1[2], a1[3]);
}

id sub_1DDC852C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*(id *)(*a1 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_thumbnailSize);
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_1DDC85300(double *a1, _QWORD *a2)
{
  return objc_msgSend(*(id *)(*a2 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView), sel_setThumbnailSize_, *a1, a1[1]);
}

uint64_t method lookup function for PaperDocumentThumbnailView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.documentView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailLayout.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.contentInset.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PaperDocumentThumbnailView.thumbnailSize.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t storeEnumTagSinglePayload for PaperDocumentThumbnailView.ThumbnailLayout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDC85510 + 4 * byte_1DDF3AB95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDC85544 + 4 * byte_1DDF3AB90[v4]))();
}

uint64_t sub_1DDC85544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC8554C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC85554);
  return result;
}

uint64_t sub_1DDC85560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC85568);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDC8556C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC85574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaperDocumentThumbnailView.ThumbnailLayout()
{
  return &type metadata for PaperDocumentThumbnailView.ThumbnailLayout;
}

uint64_t type metadata accessor for PaperDocumentThumbnailView.ThumbnailDelegate()
{
  return objc_opt_self();
}

uint64_t sub_1DDC855B0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1DDC855D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for CRStableAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = *(_QWORD *)((char *)v1 + v6);
  v11 = (uint64_t)v1 + v5;
  v12 = (_QWORD *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperDocumentThumbnailView.ThumbnailDelegate.insertFile(at:at:completionHandler:)(a1, v7, v8, v9, v11, v10, v13, v14);
}

void specialized closure #1 in PaperDocumentThumbnailView.init(frame:supportsLargeThumbnails:)()
{
  PaperDocumentThumbnailView.updateThumbnailSize()();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  _OWORD v31[4];
  _OWORD v32[2];
  _OWORD v33[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v29 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v30 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28)
      goto LABEL_37;
    v12 = *(_QWORD *)(v29 + 8 * v11);
    v13 = v30 + 1;
    if (!v12)
    {
      v13 = v30 + 2;
      if (v30 + 2 >= v28)
        goto LABEL_37;
      v12 = *(_QWORD *)(v29 + 8 * v13);
      if (!v12)
      {
        v13 = v30 + 3;
        if (v30 + 3 >= v28)
          goto LABEL_37;
        v12 = *(_QWORD *)(v29 + 8 * v13);
        if (!v12)
        {
          v13 = v30 + 4;
          if (v30 + 4 >= v28)
            goto LABEL_37;
          v12 = *(_QWORD *)(v29 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v30 = v13;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v33[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v15 = *(void **)&v33[0];
    *(_QWORD *)&v32[0] = v16;
    v17 = v16;
    v18 = v15;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIFont?);
    swift_dynamicCast();
    v19 = *(_QWORD *)&v33[0];
    outlined init with take of Any((_OWORD *)((char *)v33 + 8), v31);
    outlined init with take of Any(v31, v33);
    outlined init with take of Any(v33, v32);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v20 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v6 + 8 * (v22 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v6 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v6 + 8 * v23);
      }
      while (v27 == -1);
      v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v19;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  v12 = *(_QWORD *)(v29 + 8 * v14);
  if (v12)
  {
    v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v28)
      goto LABEL_37;
    v12 = *(_QWORD *)(v29 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(_QWORD *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    *(_QWORD *)&v36[0] = v17;
    type metadata accessor for NSAttributedStringKey(0);
    v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[4];
  _OWORD v30[2];
  _OWORD v31[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v28 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v28 + 1;
    if (!v12)
    {
      v13 = v28 + 2;
      if (v28 + 2 >= v26)
        goto LABEL_37;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v28 + 3;
        if (v28 + 3 >= v26)
          goto LABEL_37;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
        {
          v13 = v28 + 4;
          if (v28 + 4 >= v26)
            goto LABEL_37;
          v12 = *(_QWORD *)(v27 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v28 = v13;
LABEL_28:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    *(_QWORD *)&v30[0] = v15;
    v16 = *(id *)&v31[0];
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v17 = *(_QWORD *)&v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v29);
    outlined init with take of Any(v29, v31);
    outlined init with take of Any(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v17;
    result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  _OWORD v29[4];
  _OWORD v30[2];
  _OWORD v31[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorAttributeName, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v28 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v11);
    v13 = v28 + 1;
    if (!v12)
    {
      v13 = v28 + 2;
      if (v28 + 2 >= v26)
        goto LABEL_37;
      v12 = *(_QWORD *)(v27 + 8 * v13);
      if (!v12)
      {
        v13 = v28 + 3;
        if (v28 + 3 >= v26)
          goto LABEL_37;
        v12 = *(_QWORD *)(v27 + 8 * v13);
        if (!v12)
        {
          v13 = v28 + 4;
          if (v28 + 4 >= v26)
            goto LABEL_37;
          v12 = *(_QWORD *)(v27 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v28 = v13;
LABEL_28:
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    *(_QWORD *)&v30[0] = v15;
    v16 = *(id *)&v31[0];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UIFontDescriptorTraitKey : UIFontWeight]);
    swift_dynamicCast();
    v17 = *(_QWORD *)&v31[0];
    outlined init with take of Any((_OWORD *)((char *)v31 + 8), v29);
    outlined init with take of Any(v29, v31);
    outlined init with take of Any(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v17;
    result = (uint64_t)outlined init with take of Any(v30, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return v2;
  }
  v12 = *(_QWORD *)(v27 + 8 * v14);
  if (v12)
  {
    v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v26)
      goto LABEL_37;
    v12 = *(_QWORD *)(v27 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t FormFillingView.unorderedFormFields.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  v1 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  v6 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_12:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
      v15 = static _DictionaryStorage.allocate(capacity:)();
LABEL_16:
      v19 = v15;
      v16 = swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v19);
      swift_bridgeObjectRelease();
      return v19;
    }
LABEL_15:
    v15 = MEMORY[0x1E0DEE9E0];
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_14;
LABEL_3:
  v19 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    v9 = v19;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      v12 = *(int *)(v18 + 48);
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0xE0))();
      *(_QWORD *)&v4[v12] = v11;
      v19 = v9;
      v14 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v9 = v19;
      }
      ++v8;
      *(_QWORD *)(v9 + 16) = v14 + 1;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v4, v9+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v14, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_12;
    goto LABEL_15;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t FormFillingView.formFields.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  v2 = *v1;
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);
  v4 = v3;
  if (v3)
  {
    v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
    swift_bridgeObjectRetain();

    v4 = objc_msgSend(v5, sel_effectiveUserInterfaceLayoutDirection);
    LOBYTE(v4) = v4 == 0;
    if (v2 < 0)
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v2 < 0)
    {
LABEL_8:
      v8 = swift_bridgeObjectRetain();
      v6 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v8);
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  if ((v2 & 0x4000000000000000) != 0)
    goto LABEL_8;
  v6 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
LABEL_7:
  v9 = v6;
  specialized MutableCollection<>.sort(by:)(&v9, (char)v4);
  swift_bridgeObjectRelease();
  return v9;
}

void *FormFillingView.activeWidget.getter()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v10;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  v2 = *v1;
  if (v2 >> 62)
    goto LABEL_14;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = 4;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_uiControl);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease_n();

        return v6;
      }

      ++v4;
      if (v7 == v3)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain_n();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  return 0;
}

void FormFillingView.init(frame:canvas:)(void *a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  uint64_t v11;
  ValueMetadata *v12;
  void *v13;
  char *v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  char *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t Kind;
  void *v38;
  void *v39;
  char *v40;
  id v41;
  void *v42;
  objc_super v43;
  uint64_t v44;

  swift_unknownObjectWeakInit();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups] = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets] = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture] = 0;
  v12 = &type metadata for TextBox;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v11;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = 0;
  v13 = (void *)objc_opt_self();
  v14 = v5;
  v15 = objc_msgSend(v13, sel_preferredInsertionOrder);
  type metadata accessor for AFTextContentType(0);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v42 = a1;
    v44 = v11;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = 0;
    v19 = v11;
    do
    {
      v20 = *(id *)(v16 + 8 * v18 + 32);
      FormContentType.init(_:)((__C::AFTextContentType)v20);
      v21 = (id)specialized FormContentType.uiTextContentType.getter();

      v44 = v19;
      v23 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v19 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v19 = v44;
      }
      ++v18;
      *(_QWORD *)(v19 + 16) = v23 + 1;
      *(_QWORD *)(v19 + 8 * v23 + 32) = v21;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    a1 = v42;
    v12 = &type metadata for TextBox;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes] = v19;
  v24 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  type metadata accessor for FormPageAnalytics();
  swift_allocObject();
  *(_QWORD *)&v14[v24] = FormPageAnalytics.init()();
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = 0;
  swift_unknownObjectWeakAssign();

  v43.receiver = v14;
  v43.super_class = (Class)type metadata accessor for FormFillingView();
  v25 = (char *)objc_msgSendSuper2(&v43, sel_initWithFrame_, a2, a3, a4, a5);
  *(_QWORD *)(*(_QWORD *)&v25[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics] + 128) = &protocol witness table for FormFillingView;
  swift_unknownObjectWeakAssign();
  v26 = objc_allocWithZone(MEMORY[0x1E0DC3D80]);
  v27 = v25;
  v28 = objc_msgSend(v26, sel_initWithTarget_action_, v27, sel_tap_);
  v29 = OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture;
  v30 = *(void **)&v27[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture];
  *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = v28;

  if (!*(_QWORD *)&v27[v29])
  {
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v27, sel_addGestureRecognizer_);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v27, sel_doubleTap_);
  v32 = OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture;
  v33 = *(void **)&v27[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture];
  *(_QWORD *)&v27[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture] = v31;

  v34 = *(void **)&v27[v32];
  if (!v34)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  objc_msgSend(v34, sel_setNumberOfTapsRequired_, 2);
  v35 = *(void **)&v27[v29];
  if (!v35)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (!*(_QWORD *)&v27[v32])
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v35, sel_requireGestureRecognizerToFail_);
  if (!*(_QWORD *)&v27[v32])
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(v27, sel_addGestureRecognizer_);
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v27);
  Kind = v12[223].Kind;
  v38 = *(void **)&v27[Kind];
  *(_QWORD *)&v27[Kind] = v36;

  v39 = *(void **)&v27[Kind];
  if (v39)
  {
    v40 = v27;
    v41 = v39;
    objc_msgSend(v40, sel_addInteraction_, v41);

    return;
  }
LABEL_20:
  __break(1u);
}

Swift::Void __swiftcall FormFillingView.tap(_:)(UITapGestureRecognizer *a1)
{
  char *v1;
  unint64_t v2;
  char *v4;
  uint64_t v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  _QWORD *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void **v38;
  uint64_t v39;
  UITapGestureRecognizer *v40;
  _BOOL4 v41;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  void *v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  _QWORD *v76;
  _OWORD v77[2];
  uint64_t v78;
  CGPoint v79;
  CGPoint v80;
  CGPoint v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;

  v2 = (unint64_t)v1;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas];
  v5 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v5)
    return;
  v76 = (_QWORD *)v5;
  -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v1);
  v7 = v6;
  v9 = v8;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v76) + 0x2C8))(v77);
  v11 = LOBYTE(v77[0]);
  v12 = (void *)(*(uint64_t (**)(void))((*v10 & *v76) + 0x2F8))();
  v14 = v13;
  ObjectType = swift_getObjectType();
  if (v11 != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 208))(ObjectType, v14);

    v24 = MEMORY[0x1DF0E666C](v4);
    if (v24)
    {
      v25 = (void *)v24;
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

    }
    v26 = FormFillingView.activeWidget.getter();
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, sel_page);
      if (v28)
      {
        v29 = v28;
        v30 = objc_msgSend(v28, sel_view);

        if (!v30)
        {
          __break(1u);
          goto LABEL_67;
        }
        objc_msgSend(v30, sel_removeControlForAnnotation_, v27);

        v31 = v27;
        v27 = v30;
      }
      else
      {
        v31 = v76;
      }

      v32 = v27;
    }
    else
    {
      v32 = v76;
    }

    *(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 19) = 49;
    return;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(ObjectType, v14);

  if (!(v16 >> 62))
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_5;
LABEL_12:
    swift_bridgeObjectRelease_n();
    v22 = FormFillingView.widget(at:)(v7, v9);
    if (v22)
    {
      v23 = v22;
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      objc_msgSend(v23, sel_addControl);

LABEL_40:
      return;
    }
    v50 = *(_QWORD *)((char *)v76 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v50)
    {
      v51 = (_QWORD *)(v50 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      if (*(_QWORD *)(*v51 + 16) || *(_QWORD *)(v51[1] + 16))
      {
        (*(void (**)(_QWORD, uint64_t, CGFloat, CGFloat))((*v10 & *v76) + 0x4C0))(0, 1, v7, v9);
        goto LABEL_40;
      }
      v52 = FormFillingView.activeWidget.getter();
      if (!v52)
      {
        objc_msgSend((id)v2, sel_bounds);
        v61 = OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction;
        v62 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction);
        if (v62)
        {
          v63 = v57;
          v64 = v58;
          v65 = v59;
          v66 = v60;
          objc_msgSend(v62, sel_locationInView_, v2);
          v81.x = v67;
          v81.y = v68;
          v84.origin.x = v63;
          v84.origin.y = v64;
          v84.size.width = v65;
          v84.size.height = v66;
          v69 = CGRectContainsPoint(v84, v81);
          v70 = AnyCanvas.formFieldElements.getter();
          if (v70 >> 62)
            v71 = _CocoaArrayWrapper.endIndex.getter();
          else
            v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          if (!v71 || v69)
            goto LABEL_40;
          -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v2);
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
          v78 = 0;
          memset(v77, 0, sizeof(v77));
          v72 = UIEditMenuConfiguration.init(identifier:sourcePoint:)();
          v73 = *(void **)(v2 + v61);
          if (v73)
          {
            v74 = (void *)v72;
            v75 = v73;
            objc_msgSend(v75, sel_presentEditMenuWithConfiguration_, v74);

            goto LABEL_40;
          }
LABEL_71:
          __break(1u);
          return;
        }
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      v53 = v52;
      v54 = objc_msgSend(v52, sel_page);
      if (!v54)
      {
LABEL_51:
        (*(void (**)(_QWORD, uint64_t, CGFloat, CGFloat))((*v10 & *v76) + 0x4C0))(0, 1, v7, v9);

        goto LABEL_40;
      }
      v55 = v54;
      v56 = objc_msgSend(v54, sel_view);

      if (v56)
      {
        objc_msgSend(v56, sel_removeControlForAnnotation_, v53);

        goto LABEL_51;
      }
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
LABEL_61:
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  if (!v17)
    goto LABEL_12;
LABEL_5:
  v18 = 4;
  while (1)
  {
    if ((v16 & 0xC000000000000001) != 0)
      v19 = (id)MEMORY[0x1DF0E4D64](v18 - 4, v16);
    else
      v19 = *(id *)(v16 + 8 * v18);
    v20 = v19;
    v21 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    objc_msgSend(v19, sel_frame);
    v79.x = v7;
    v79.y = v9;
    if (CGRectContainsPoint(v82, v79))
      break;

    ++v18;
    if (v21 == v17)
      goto LABEL_12;
  }
  swift_bridgeObjectRelease_n();
  v33 = FormFillingView.activeWidget.getter();
  if (v33)
  {
    v34 = v33;
    v35 = objc_msgSend(v33, sel_page);
    if (v35)
    {
      v36 = v35;
      v37 = objc_msgSend(v35, sel_view);

      if (!v37)
        goto LABEL_68;
      objc_msgSend(v37, sel_removeControlForAnnotation_, v34);

      v34 = v37;
    }

  }
  v38 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  swift_beginAccess();
  v2 = (unint64_t)*v38;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16)
      goto LABEL_28;
  }
  else
  {
    v16 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v16)
    {
LABEL_28:
      v39 = 4;
      do
      {
        v40 = (v2 & 0xC000000000000001) != 0
            ? (UITapGestureRecognizer *)MEMORY[0x1DF0E4D64](v39 - 4, v2)
            : (UITapGestureRecognizer *)*(id *)(v2 + 8 * v39);
        a1 = v40;
        v10 = (_QWORD *)(v39 - 3);
        if (__OFADD__(v39 - 4, 1))
          goto LABEL_60;
        -[UITapGestureRecognizer frame](v40, sel_frame);
        v80.x = v7;
        v80.y = v9;
        v41 = CGRectContainsPoint(v83, v80);

        if (v41)
        {
          swift_bridgeObjectRelease_n();
          objc_msgSend(v20, sel_becomeFirstResponder);

          goto LABEL_45;
        }
        ++v39;
      }
      while (v10 != (_QWORD *)v16);
    }
  }
  swift_bridgeObjectRelease_n();
  v42 = v20;
  v43 = specialized CanvasMembers.init(_:)(v42);
  v45 = v44;
  v47 = v46;
  v49 = v48;

  AnyCanvas.selection.setter(v43, v45, v47, v49 & 1);
LABEL_45:

}

Swift::Void __swiftcall FormFillingView.doubleTap(_:)(UITapGestureRecognizer *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  double v5;
  CGFloat x;
  double v7;
  CGFloat y;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  CGFloat width;
  CGFloat height;
  void *v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  Class isa;
  id v34;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  id v39;
  void *v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  CGFloat v48;
  _QWORD *v49;
  void *v50;
  int64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  CGFloat ty;
  CGFloat tx;
  _QWORD *v61;
  CGAffineTransform v62;
  CGPoint v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v2 = v1;
  v4 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v4)
    return;
  v61 = (_QWORD *)v4;
  -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v2);
  x = v5;
  y = v7;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v61) + 0x2C8))(&v62);
  if (LOBYTE(v62.a) != 1)
  {
    v10 = (void *)(*(uint64_t (**)(void))((*v9 & *v61) + 0x2F8))();
    v12 = v11;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v12 + 208))(ObjectType, v12);

    *(_BYTE *)(*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics] + 19) = 50;
  }
  v14 = AnyCanvas.formFieldElements.getter();
  v15 = v14;
  if (v14 >> 62)
    goto LABEL_31;
  v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v16; v16 = _CocoaArrayWrapper.endIndex.getter())
  {
    v17 = 4;
    while (1)
    {
      v18 = (v15 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1DF0E4D64](v17 - 4, v15)
          : *(id *)(v15 + 8 * v17);
      v19 = v18;
      v20 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      objc_msgSend(v18, sel_frame);
      v63.x = x;
      v63.y = y;
      if (CGRectContainsPoint(v64, v63))
      {
        swift_bridgeObjectRelease_n();
        objc_msgSend(v19, sel_becomeFirstResponder);

        goto LABEL_16;
      }

      ++v17;
      if (v20 == v16)
        goto LABEL_13;
    }
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
LABEL_13:
  swift_bridgeObjectRelease_n();
  v21 = FormFillingView.widget(at:)(x, y);
  if (!v21)
  {
    if (one-time initialization token for defaultFormFieldSize != -1)
      swift_once();
    height = *((double *)&static FormFillingView.defaultFormFieldSize + 1);
    width = *(double *)&static FormFillingView.defaultFormFieldSize;
    v25 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
    if (v25)
    {
      v26 = v25;
      if (!objc_msgSend(v26, sel_respondsToSelector_, sel_proposedFormRegionForPoint_existingFields_formSize_))goto LABEL_24;
      objc_msgSend(v2, sel_frame);
      v28 = v27;
      v30 = v29;
      v31 = x / v27;
      v32 = y / v29;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      swift_bridgeObjectRetain();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v26, sel_proposedFormRegionForPoint_existingFields_formSize_, isa, v31, v32, v28, v30);

      CGAffineTransformMakeScale(&v62, v28, v30);
      if (v34)
      {
        a = v62.a;
        b = v62.b;
        c = v62.c;
        d = v62.d;
        ty = v62.ty;
        tx = v62.tx;
        v39 = objc_msgSend(v34, sel_quad);
        if (!v39)
          goto LABEL_34;
        v40 = v39;
        objc_msgSend(v39, sel_boundingBox);
        v42 = v41;
        v44 = v43;
        v46 = v45;
        v48 = v47;

        v62.a = a;
        v62.b = b;
        v62.c = c;
        v62.d = d;
        v62.tx = tx;
        v62.ty = ty;
        v65.origin.x = v42;
        v65.origin.y = v44;
        v65.size.width = v46;
        v65.size.height = v48;
        v66 = CGRectApplyAffineTransform(v65, &v62);
        x = v66.origin.x;
        y = v66.origin.y;
        width = v66.size.width;
        height = v66.size.height;

      }
      else
      {
LABEL_24:

      }
    }
    v49 = FormFillingView.addTextBox(at:analytics_documentType:)(5u, x, y, width, height);
    v50 = v61;
    if (v49)
    {
      v51 = specialized CanvasMembers.init(_:)(v49);
      AnyCanvas.selection.setter(v51, v53, v54, v52 & 1);

      v50 = v61;
    }

    v55 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
    v56 = *(_QWORD *)(v55 + 40);
    v57 = __OFADD__(v56, 1);
    v58 = v56 + 1;
    if (!v57)
    {
      *(_QWORD *)(v55 + 40) = v58;
      return;
    }
    __break(1u);
LABEL_34:
    __break(1u);
    return;
  }
  v22 = v21;
  objc_msgSend(v21, sel_addControl);

LABEL_16:
}

Swift::Void __swiftcall FormFillingView.updateUI()()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  id v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  char *v24;
  id v25;
  char v26;
  void *v27;
  int v28;
  uint64_t j;
  uint64_t v30[3];

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v2)
    return;
  v3 = v2;
  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2C8))(v30);
  v4 = LOBYTE(v30[0]);
  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0 && v4 != 1)
    AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x1E0DEE9D8]);
  objc_msgSend(v1, sel_setHidden_, v4 != 1);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);
  v5 = AnyCanvas.formFieldElements.getter();
  v6 = v5;
  v28 = v4;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_7;
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_7:
      if (v7 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0)
          v9 = (id)MEMORY[0x1DF0E4D64](i, v6);
        else
          v9 = *(id *)(v6 + 8 * i + 32);
        v10 = v9;
        objc_msgSend(v9, sel_setNeedsLayout);

      }
    }
  }
  v27 = v3;
  swift_bridgeObjectRelease_n();
  v11 = &v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
  swift_beginAccess();
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 >> 62)
    goto LABEL_36;
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  v14 = v28;
  for (j = v13; j; j = _CocoaArrayWrapper.endIndex.getter())
  {
    v15 = 4;
    v16 = 0;
    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_17:
      v17 = (char *)MEMORY[0x1DF0E4D64](v16, v12);
      goto LABEL_19;
    }
    while (1)
    {
      v17 = (char *)*(id *)(v12 + 8 * v15);
LABEL_19:
      v18 = v17;
      v19 = v16 + 1;
      if (__OFADD__(v16, 1))
        break;
      if (v14 == 1)
      {
        if (one-time initialization token for formFieldBackgroundColor != -1)
          swift_once();
        v20 = (void *)static UIConstants.formFieldBackgroundColor;
        v21 = (id)static UIConstants.formFieldBackgroundColor;
      }
      else
      {
        v20 = 0;
      }
      v22 = *(void **)&v18[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor];
      *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = v20;
      v23 = v20;
      if (v20)
      {
        if (v22)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
          v24 = v22;
          v25 = v23;
          v26 = static NSObject.== infix(_:_:)();

          v14 = v28;
          if ((v26 & 1) != 0)
          {

            v18 = v24;
LABEL_31:

            goto LABEL_32;
          }
        }
      }
      else if (!v22)
      {
        goto LABEL_31;
      }
      objc_msgSend(v18, sel_updateAnnotationEffect, v27);

LABEL_32:
      if (v19 == j)
        goto LABEL_37;
      v16 = ++v15 - 4;
      if ((v12 & 0xC000000000000001) != 0)
        goto LABEL_17;
    }
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain_n();
    v14 = v28;
  }
LABEL_37:

  swift_bridgeObjectRelease_n();
}

void __swiftcall FormFillingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  Class isa;
  double y;
  double x;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *(*v13)(_QWORD *__return_ptr);
  _QWORD *v14;
  int v15;
  int v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  BOOL v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  char *v34;
  void *v35;
  id v36;
  id v37;
  int v38;
  void *v39;
  _QWORD v40[4];
  CGPoint v41;
  CGPoint v42;
  CGRect v43;
  CGRect v44;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas], *(_QWORD *)&with.is_nil);
  if (!v8)
    return;
  v9 = v8;
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x320))();
  if (!v11)
    goto LABEL_25;
  v12 = (void *)v11;
  if (isa && -[objc_class type](isa, sel_type) == (id)11)
    goto LABEL_6;
  v13 = *(_QWORD *(**)(_QWORD *__return_ptr))((*v10 & *v9) + 0x2C8);
  v14 = v13(v40);
  v15 = LOBYTE(v40[0]);
  ((void (*)(_QWORD *__return_ptr, _QWORD *))v13)(v40, v14);
  v16 = LOBYTE(v40[0]);
  v17 = objc_msgSend(v12, sel_selectionInteraction);
  objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v12, x, y);
  LODWORD(v13) = objc_msgSend(v17, sel_hasStrokesAtLocation_);

  if ((_DWORD)v13)
  {
LABEL_6:

    return;
  }
  v18 = FormFillingView.widget(at:)(x, y);
  if (v18)
  {
    v19 = v18;
    if (v15 == 1 || v16 == 3)
    {
      objc_msgSend(v18, sel_addControl);
      v20 = objc_msgSend(v19, sel_uiControl);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
      if (swift_dynamicCast())
      {
        v21 = v39;
        objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v39, x, y);
        v22 = objc_msgSend(v39, sel_hitTest_withEvent_, isa);
LABEL_30:
        v22;

        return;
      }
    }
LABEL_35:

    v34 = v4;
    return;
  }
  v23 = AnyCanvas.formFieldElements.getter();
  v24 = v23;
  v38 = v15;
  if (!(v23 >> 62))
  {
    v25 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  if (!v25)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    if (v38 == 1)
    {
      objc_msgSend(v4, sel_bounds);
      v42.x = x;
      v42.y = y;
      v29 = CGRectContainsPoint(v44, v42);

      if (v29)
LABEL_23:
        v30 = v4;
      return;
    }

LABEL_25:
    return;
  }
LABEL_14:
  v26 = 4;
  while (1)
  {
    if ((v24 & 0xC000000000000001) != 0)
      v27 = (id)MEMORY[0x1DF0E4D64](v26 - 4, v24);
    else
      v27 = *(id *)(v24 + 8 * v26);
    v19 = v27;
    v28 = v26 - 3;
    if (__OFADD__(v26 - 4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    objc_msgSend(v27, sel_frame);
    v41.x = x;
    v41.y = y;
    if (CGRectContainsPoint(v43, v41))
      break;

    ++v26;
    if (v28 == v25)
      goto LABEL_21;
  }
  swift_bridgeObjectRelease_n();
  objc_msgSend(v19, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
  v31 = objc_msgSend(v19, sel_hitTest_withEvent_, isa);
  if (v31)
  {
    v21 = v31;
    objc_opt_self();
    v32 = swift_dynamicCastObjCClass();
    if (v32)
    {
      v33 = (void *)v32;
      objc_msgSend(v4, sel_convertPoint_toCoordinateSpace_, v32, x, y);
      v22 = objc_msgSend(v33, sel_hitTest_withEvent_, isa);
      goto LABEL_30;
    }

  }
  if (v16 == 3)
  {

    return;
  }
  if (v38 == 1)
    goto LABEL_35;
  v35 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
  if (!v35)
  {

    goto LABEL_25;
  }
  v36 = v35;
  v37 = objc_msgSend(v36, sel_recognitionConfidence);

  if (v37 == (id)2)
    goto LABEL_23;
}

Swift::Bool __swiftcall FormFillingView.hitTestIncludingHiddenFields(_:with:)(CGPoint _, UIEvent_optional with)
{
  uint64_t v2;
  uint64_t v3;
  Class isa;
  CGFloat y;
  CGFloat x;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  _BOOL4 v18;
  CGPoint v20;
  CGRect v21;

  v3 = v2;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v7 = MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas, *(_QWORD *)&with.is_nil);
  if (v7)
  {
    v8 = (void *)v7;
    if (isa && -[objc_class type](isa, sel_type) == (id)11)
    {

LABEL_17:
      LOBYTE(v7) = 0;
      return v7;
    }
    v9 = FormFillingView.widget(at:)(x, y);
    if (!v9)
    {
      v11 = AnyCanvas.formFieldElements.getter();
      swift_beginAccess();
      v12 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v12);
      if (v11 >> 62)
        goto LABEL_21;
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter())
      {
        v14 = 4;
        while (1)
        {
          v15 = (v11 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x1DF0E4D64](v14 - 4, v11)
              : *(id *)(v11 + 8 * v14);
          v16 = v15;
          v17 = v14 - 3;
          if (__OFADD__(v14 - 4, 1))
            break;
          objc_msgSend(v15, sel_frame);
          v20.x = x;
          v20.y = y;
          v18 = CGRectContainsPoint(v21, v20);

          if (v18)
          {

            swift_bridgeObjectRelease_n();
            LOBYTE(v7) = 1;
            return v7;
          }
          ++v14;
          if (v17 == v13)
            goto LABEL_16;
        }
        __break(1u);
LABEL_21:
        swift_bridgeObjectRetain();
      }
LABEL_16:

      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    v10 = v9;

    LOBYTE(v7) = 1;
  }
  return v7;
}

void *FormFillingView.widget(at:)(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v26;
  CGPoint v27;
  CGRect v28;

  v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  v6 = *v5;
  if (v6 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain_n();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v7)
    {
LABEL_3:
      v8 = v6 & 0xC000000000000001;
      v9 = 4;
      v10 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
      v26 = v6;
      do
      {
        if (v8)
          v14 = (id)MEMORY[0x1DF0E4D64](v9 - 4, v6);
        else
          v14 = *(id *)(v6 + 8 * v9);
        v12 = v14;
        v15 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        v16 = objc_msgSend(v14, v10[173]);
        if (v16)
        {
          v13 = v16;
          v17 = objc_msgSend(v16, sel_document);
          if (!v17)
            goto LABEL_6;
          v18 = v17;
          v19 = objc_msgSend(v13, sel_view);
          if (!v19)
          {
            v11 = v18;
LABEL_5:

            v12 = v13;
            v13 = v11;
LABEL_6:

            v12 = v13;
            goto LABEL_7;
          }
          v11 = v19;
          v20 = objc_msgSend(v19, sel_pageViewForPageAtIndex_, objc_msgSend(v18, sel_indexForPage_, v13));
          if (!v20)
          {

            v12 = v13;
            v13 = v18;
            v10 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
            goto LABEL_5;
          }
          v21 = v20;
          v22 = v7;
          v23 = v8;
          objc_msgSend(v12, sel_bounds);
          objc_msgSend(v11, sel_convertRect_fromPage_, v13);
          objc_msgSend(v21, sel_convertRect_fromCoordinateSpace_, v11);
          v27.x = a1;
          v27.y = a2;
          v24 = CGRectContainsPoint(v28, v27);

          if (v24)
          {
            swift_bridgeObjectRelease_n();
            return v12;
          }
          v8 = v23;
          v7 = v22;
          v6 = v26;
          v10 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
        }
LABEL_7:

        ++v9;
      }
      while (v15 != v7);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

Swift::Void __swiftcall FormFillingView.add(_:)(Swift::OpaquePointer a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  unint64_t v8;

  v2 = v1;
  if (!((unint64_t)a1._rawValue >> 62))
  {
    v4 = *(_QWORD *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v8 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v8);
    swift_endAccess();
    FormFillingView.updateUI()();
    return;
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1DF0E4D64](i, a1._rawValue);
      else
        v6 = *((id *)a1._rawValue + i + 4);
      v7 = v6;
      objc_msgSend(v2, sel_addSubview_, v6);

    }
    goto LABEL_10;
  }
  __break(1u);
}

double one-time initialization function for defaultFormFieldSize()
{
  double result;

  result = 150.0;
  static FormFillingView.defaultFormFieldSize = xmmword_1DDF3AC80;
  return result;
}

_QWORD *FormFillingView.addTextBox(at:analytics_documentType:)(unsigned __int8 a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t inited;
  Swift::OpaquePointer v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v23;

  v6 = v5;
  v12 = (void *)MEMORY[0x1DF0E666C](v6 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);
  if (!v12)
    return 0;
  v13 = v12;
  LOBYTE(v23) = 1;
  specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v12, 0, 0, 0, 0, 1, (unsigned __int8 *)&v23, 0x7FFFFFFFFFFFFFFFLL, a2, a3, a4, a5, 0, 0, 0xAu, a1);
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
  *(_QWORD *)(inited + 32) = v15;
  v23 = (void *)inited;
  specialized Array._endMutation()();
  v17._rawValue = v23;
  v18 = v15;
  FormFillingView.add(_:)(v17);
  v19 = swift_bridgeObjectRelease();
  v20 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x2D0))(v19);
  if (v20)
  {
    v21 = (void *)v20;
    swift_retain();

    FormTextFieldAnalytics.recordEvent()();
    swift_release();
  }

  return v18;
}

void FormFillingView.frameForFormElement(element:)(uint64_t a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  id v18;
  _BYTE v19[32];

  outlined init with copy of Any(a1, (uint64_t)v19);
  type metadata accessor for CanvasElementPDFAnnotation();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_7;
  v3 = objc_msgSend(v18, sel_page);
  if (!v3)
  {

LABEL_7:
    outlined init with copy of Any(a1, (uint64_t)v19);
    type metadata accessor for AnyCanvasElementView();
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(v18, sel_frame);

    }
    return;
  }
  v4 = v3;
  v5 = objc_msgSend(v18, sel_page);
  if (!v5)
  {
    v10 = 0.0;
    v12 = 0.0;
    v14 = 0.0;
    v16 = 0.0;
    goto LABEL_11;
  }
  v6 = v5;
  v7 = objc_msgSend(v5, sel_view);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v18, sel_bounds);
    objc_msgSend(v8, sel_convertRect_fromPage_, v6);
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

LABEL_11:
    v17 = objc_msgSend(v4, sel_view);
    objc_msgSend(v1, sel_convertRect_fromView_, v17, v10, v12, v14, v16);

    return;
  }
  __break(1u);
}

uint64_t FormFillingView.allFormElements.getter()
{
  char *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v15;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas]);
  if (!v2)
    return MEMORY[0x1E0DEE9D8];
  v3 = (_QWORD *)v2;
  v4 = AnyCanvas.formFieldElements.getter();
  if (v4 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v5 = v4;
  }
  swift_bridgeObjectRelease();
  v6 = (unint64_t *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
  swift_beginAccess();
  v7 = *v6;
  if (*v6 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    swift_bridgeObjectRetain();
    v8 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v8 = v7;
  }
  swift_bridgeObjectRelease();
  v15 = v5;
  specialized Array.append<A>(contentsOf:)(v8);
  v9 = specialized _arrayForceCast<A, B>(_:)(v5);
  v10 = swift_bridgeObjectRelease();
  v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))(v10);
  v12 = objc_msgSend(v11, sel_effectiveUserInterfaceLayoutDirection);

  v15 = v9;
  v13 = v1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v15, v13, v12 == 0);
  swift_bridgeObjectRelease();

  return v15;
}

void FormFillingView.focusNextField(from:direction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  NSObject v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  NSObject v33;
  void *v34;
  NSObject v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  objc_class *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 aBlock;
  __int128 v48;
  id (*v49)();
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  id (*v57)();
  _OWORD v58[2];
  uint64_t v59;

  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas, v13);
  if (v16)
  {
    v17 = (void *)v16;
    v18 = FormFillingView.allFormElements.getter();
    v59 = 0;
    memset(v58, 0, sizeof(v58));
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v55, &demangling cache variable for type metadata for AnyHashable?);
    v46 = v5;
    v45 = v6;
    v44 = v10;
    v43 = v11;
    if (*((_QWORD *)&v56 + 1))
    {
      aBlock = v55;
      v48 = v56;
      v49 = v57;
    }
    else
    {
      v49 = 0;
      v48 = 0u;
      aBlock = 0u;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v55, &demangling cache variable for type metadata for AnyHashable?);
    }
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&aBlock, (uint64_t)v53, &demangling cache variable for type metadata for AnyHashable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyHashable?);
    lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?();
    AnyHashable.init<A>(_:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v20 = 0;
      v21 = v18 + 32;
      while ((MEMORY[0x1DF0E4CEC](v21, &v55) & 1) == 0)
      {
        ++v20;
        v21 += 40;
        if (v19 == v20)
          goto LABEL_9;
      }
      outlined destroy of AnyHashable((uint64_t)&v55);
      if (a2)
      {
        if (v20)
        {
          v24 = v20 - 1;
          v25 = *(_QWORD *)(v18 + 16);
          goto LABEL_21;
        }
      }
      else
      {
        v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        v25 = *(_QWORD *)(v18 + 16);
        if ((uint64_t)v24 < (uint64_t)v25)
        {
          if ((v24 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_21:
          if (v24 < v25)
          {
            v23 = v18 + 32 + 40 * v24;
            goto LABEL_23;
          }
          goto LABEL_57;
        }
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v58, &demangling cache variable for type metadata for AnyHashable?);

      swift_bridgeObjectRelease();
      return;
    }
LABEL_9:
    outlined destroy of AnyHashable((uint64_t)&v55);
    v22 = *(_QWORD *)(v18 + 16);
    if (a2)
    {
      if (v22)
      {
        v23 = v18 + 40 * v22 - 8;
LABEL_23:
        outlined init with copy of AnyHashable(v23, (uint64_t)&aBlock);
LABEL_24:
        swift_bridgeObjectRelease();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v58, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&aBlock, (uint64_t)v58, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v58, (uint64_t)&v50, &demangling cache variable for type metadata for AnyHashable?);
        if (*((_QWORD *)&v48 + 1))
        {
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&aBlock, (uint64_t)&v55, &demangling cache variable for type metadata for AnyHashable?);
          if (*((_QWORD *)&v51 + 1))
          {
            v53[0] = v50;
            v53[1] = v51;
            v54 = v52;
            v26 = MEMORY[0x1DF0E4CEC](&v55, v53);
            outlined destroy of AnyHashable((uint64_t)v53);
            outlined destroy of AnyHashable((uint64_t)&v55);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            if ((v26 & 1) != 0)
            {
LABEL_40:
              outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v58, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              if (*((_QWORD *)&v48 + 1))
              {
                v33.isa = AnyHashable._bridgeToObjectiveC()().isa;
                outlined destroy of AnyHashable((uint64_t)&aBlock);
                type metadata accessor for AnyCanvasElementView();
                v34 = (void *)swift_dynamicCastClass();
                if (v34)
                {
                  objc_msgSend(v34, sel_becomeFirstResponder);

                  goto LABEL_53;
                }

              }
              else
              {
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              }
              outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v58, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              if (*((_QWORD *)&v48 + 1))
              {
                v35.isa = AnyHashable._bridgeToObjectiveC()().isa;
                outlined destroy of AnyHashable((uint64_t)&aBlock);
                type metadata accessor for CanvasElementPDFAnnotation();
                v36 = swift_dynamicCastClass();
                if (v36)
                {
                  v37 = (void *)v36;
                  if (!objc_msgSend((id)objc_opt_self(), sel_isMainThread))
                  {
                    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
                    v38 = (void *)static OS_dispatch_queue.main.getter();
                    v39 = swift_allocObject();
                    *(_QWORD *)(v39 + 16) = v37;
                    v49 = partial apply for closure #1 in FormFillingView.focusNextField(from:direction:);
                    *(_QWORD *)&v50 = v39;
                    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
                    *((_QWORD *)&aBlock + 1) = 1107296256;
                    *(_QWORD *)&v48 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
                    *((_QWORD *)&v48 + 1) = &block_descriptor_32;
                    v40 = _Block_copy(&aBlock);
                    v41 = v35.isa;
                    swift_release();
                    static DispatchQoS.unspecified.getter();
                    *(_QWORD *)&aBlock = MEMORY[0x1E0DEE9D8];
                    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
                    v42 = v46;
                    dispatch thunk of SetAlgebra.init<A>(_:)();
                    MEMORY[0x1DF0E48C0](0, v15, v9, v40);

                    _Block_release(v40);
                    (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v42);
                    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
                    goto LABEL_53;
                  }
                  objc_msgSend(v37, sel_addControl);
                }

              }
              else
              {

                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
              }
LABEL_53:
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v58, &demangling cache variable for type metadata for AnyHashable?);
              return;
            }
LABEL_32:
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            if (*((_QWORD *)&v48 + 1))
            {
              v27.isa = AnyHashable._bridgeToObjectiveC()().isa;
              outlined destroy of AnyHashable((uint64_t)&aBlock);
              type metadata accessor for CanvasElementPDFAnnotation();
              v28 = (void *)swift_dynamicCastClass();
              if (v28)
              {
                v29 = v28;
                v30 = objc_msgSend(v28, sel_page);
                if (!v30)
                {

                  goto LABEL_40;
                }
                v31 = v30;
                v32 = objc_msgSend(v30, sel_view);

                if (v32)
                {
                  objc_msgSend(v32, sel_removeControlForAnnotation_, v29);

                  goto LABEL_40;
                }
LABEL_59:
                __break(1u);
                return;
              }

            }
            else
            {
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
            }
            AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
            goto LABEL_40;
          }
          outlined destroy of AnyHashable((uint64_t)&v55);
        }
        else if (!*((_QWORD *)&v51 + 1))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for AnyHashable?);
          goto LABEL_40;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for (AnyHashable?, AnyHashable?));
        goto LABEL_32;
      }
    }
    else if (v22)
    {
      v23 = v18 + 32;
      goto LABEL_23;
    }
    v49 = 0;
    v48 = 0u;
    aBlock = 0u;
    goto LABEL_24;
  }
}

void FormFillingView.populateTextFields(with:currentField:)(void *a1, unint64_t a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  char *v10;
  id v11;
  Swift::OpaquePointer v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::Int rawValue;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  BOOL v36;
  Swift::Int v37;
  unint64_t v38;
  Swift::Int v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char **v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  void *v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  id v111;
  char v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  id v116;
  void *v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  id v123;
  uint64_t v124;
  void *v125;
  id v126;
  char *v127;
  void *v128;
  char *v129;
  id v130;
  id v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  uint64_t v152;
  id v153;
  void *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[2];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  id v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  void (*v180)(char *, char *, uint64_t);
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  Swift::OpaquePointer v186;
  char *v187;
  id v188;
  char v189;
  char v190;

  v186._rawValue = a1;
  v185 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v183 = *(_QWORD *)(v185 - 8);
  v6 = MEMORY[0x1E0C80A78](v185, v5);
  v184 = (char *)v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas], v6);
  if (!v8)
    return;
  v187 = v2;
  v176 = v8;
  v9 = AnyCanvas.formFieldElements.getter();
  if (v9 >> 62)
    goto LABEL_202;
  v10 = *(char **)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = (id)a2;
  if (!v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();

    return;
  }
  while (2)
  {
    v12._rawValue = 0;
    while (1)
    {
      if ((v9 & 0xC000000000000001) != 0)
        v13 = (_QWORD *)MEMORY[0x1DF0E4D64](v12._rawValue, v9);
      else
        v13 = *(id *)(v9 + 8 * (uint64_t)v12._rawValue + 32);
      v14 = v13;
      v15 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2D0))();
      if (!v15)
      {
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
        goto LABEL_229;
      }
      v16 = (void *)v15;
      v17 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      v18 = v17;

      if (v17)
        break;

      v21 = (char *)v12._rawValue + 1;
      if (__OFADD__(v12._rawValue, 1))
      {
LABEL_193:
        __break(1u);
LABEL_194:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_190;
      }
LABEL_15:
      ++v12._rawValue;
      if (v21 == v10)
        goto LABEL_16;
    }
    type metadata accessor for TextBoxTextView();
    v3 = (uint64_t)(id)a2;
    v19 = v18;
    v20 = static NSObject.== infix(_:_:)();

    if ((v20 & 1) == 0)
    {
      v21 = (char *)v12._rawValue + 1;
      if (__OFADD__(v12._rawValue, 1))
        goto LABEL_193;
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();

    v22 = AnyCanvas.formFieldElements.getter();
    v23 = v22 >> 62;
    v188 = (id)v3;
    if (!(v22 >> 62))
    {
      a2 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      v24 = a2;
      if ((uint64_t)a2 >= (uint64_t)v12._rawValue)
        goto LABEL_20;
LABEL_209:
      __break(1u);
      goto LABEL_210;
    }
LABEL_205:
    v159 = _CocoaArrayWrapper.endIndex.getter();
    if (v159 < (uint64_t)v12._rawValue)
      goto LABEL_225;
    a2 = v159;
    swift_bridgeObjectRetain();
    v160 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v160 < (uint64_t)v12._rawValue)
      goto LABEL_226;
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v3 = (uint64_t)v188;
    if (v24 < (uint64_t)a2)
    {
      __break(1u);
      goto LABEL_209;
    }
LABEL_20:
    if ((a2 & 0x8000000000000000) != 0)
    {
LABEL_210:
      __break(1u);
    }
    else
    {
      if ((v22 & 0xC000000000000001) != 0 && (void *)a2 != v12._rawValue)
      {
        if ((unint64_t)v12._rawValue >= a2)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        type metadata accessor for AnyCanvasElementView();
        rawValue = (Swift::Int)v12._rawValue;
        do
        {
          v26 = rawValue + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(rawValue);
          rawValue = v26;
        }
        while (a2 != v26);
      }
      if (v23)
      {
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.subscript.getter();
        v28 = v30;
        v12._rawValue = v31;
        v29 = v32;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v27 = v22 & 0xFFFFFFFFFFFFFF8;
        v28 = (v22 & 0xFFFFFFFFFFFFFF8) + 32;
        v29 = (2 * a2) | 1;
      }
      v33 = v187;
      v23 = 0;
      v9 = specialized Sequence.compactMap<A>(_:)(v27, v28, (uint64_t)v12._rawValue, v29, (uint64_t)v33);
      swift_unknownObjectRelease();
      v175 = v33;

      v24 = v9 >> 62;
      if (!(v9 >> 62))
      {
        v12._rawValue = *(void **)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        a2 = (unint64_t)v186._rawValue;
        if (v12._rawValue)
          goto LABEL_31;
        break;
      }
    }
    swift_bridgeObjectRetain();
    v12._rawValue = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a2 = (unint64_t)v186._rawValue;
    if (v12._rawValue)
    {
LABEL_31:
      v22 = 0;
      v34 = v9 & 0xC000000000000001;
      v23 = (unint64_t)&OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext;
      while (1)
      {
        if (v34)
          v35 = (unsigned __int8 *)MEMORY[0x1DF0E4D64](v22, v9);
        else
          v35 = (unsigned __int8 *)*(id *)(v9 + 8 * v22 + 32);
        v3 = v35[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext];

        a2 = v22 + 1;
        v36 = __OFADD__(v22, 1);
        if ((v3 & 1) != 0)
        {
          if (!v36)
          {
            if ((a2 & 0x8000000000000000) == 0)
            {
              if (!v24
                || (swift_bridgeObjectRetain(),
                    v23 = _CocoaArrayWrapper.endIndex.getter(),
                    swift_bridgeObjectRelease(),
                    (v23 & 0x8000000000000000) == 0))
              {
                v10 = (char *)v186._rawValue;
                v3 = (uint64_t)v188;
                if (v34 && v22 != -1)
                {
                  v23 = type metadata accessor for ShapeView();
                  v37 = 0;
                  v38 = v22 + 1;
                  do
                  {
                    v39 = v37 + 1;
                    _ArrayBuffer._typeCheckSlowPath(_:)(v37);
                    v37 = v39;
                  }
                  while (v38 != v39);
                }
                if (v24)
                {
                  swift_bridgeObjectRetain();
                  v22 = _CocoaArrayWrapper.subscript.getter();
                  v9 = v40;
                  v12._rawValue = v41;
                  a2 = v42;
                  swift_bridgeObjectRelease_n();
                  if ((a2 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
                v12._rawValue = 0;
                v22 = v9 & 0xFFFFFFFFFFFFFF8;
                v9 = (v9 & 0xFFFFFFFFFFFFFF8) + 32;
                a2 = (2 * a2) | 1;
                if ((a2 & 1) == 0)
                {
LABEL_55:
                  v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v22, v9, (uint64_t)v12._rawValue, a2);
                  a2 = (unint64_t)v10;
LABEL_62:
                  swift_unknownObjectRelease();
                  goto LABEL_63;
                }
LABEL_56:
                v23 = type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                v43 = swift_dynamicCastClass();
                if (!v43)
                {
                  swift_unknownObjectRelease();
                  v43 = MEMORY[0x1E0DEE9D8];
                }
                v44 = *(_QWORD *)(v43 + 16);
                swift_release();
                if (!__OFSUB__(a2 >> 1, v12._rawValue))
                {
                  if (v44 == (a2 >> 1) - (unint64_t)v12._rawValue)
                  {
                    v9 = swift_dynamicCastClass();
                    swift_unknownObjectRelease();
                    a2 = (unint64_t)v10;
                    if (v9)
                      goto LABEL_63;
                    v9 = MEMORY[0x1E0DEE9D8];
                    goto LABEL_62;
                  }
LABEL_220:
                  swift_unknownObjectRelease();
                  goto LABEL_55;
                }
LABEL_219:
                __break(1u);
                goto LABEL_220;
              }
LABEL_218:
              __break(1u);
              goto LABEL_219;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
LABEL_216:
          __break(1u);
          goto LABEL_217;
        }
        if (v36)
          break;
        ++v22;
        v68 = (void *)a2 == v12._rawValue;
        a2 = (unint64_t)v186._rawValue;
        v3 = (uint64_t)v188;
        if (v68)
          goto LABEL_63;
      }
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      v158 = (id)a2;
      v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
      if (!v10)
        goto LABEL_16;
      continue;
    }
    break;
  }
LABEL_63:
  v165 = OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups;
  v45 = *(_QWORD *)&v175[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups];
  v46 = *(_QWORD *)(v45 + 16);
  v47 = &selRef_setCanvasWidth_;
  v182 = v9;
  v178 = v46;
  if (!v46)
  {
    v167 = 0;
    v168 = 0;
    goto LABEL_89;
  }
  v181 = (_QWORD *)(v45 + 32);
  v48 = swift_bridgeObjectRetain();
  v22 = 0;
  v180 = (void (*)(char *, char *, uint64_t))v48;
  while (2)
  {
    if (v22 >= *(_QWORD *)(v48 + 16))
    {
      __break(1u);
      goto LABEL_205;
    }
    v12._rawValue = (void *)v181[v22];
    v179 = (char *)((unint64_t)v12._rawValue >> 62);
    v187 = (char *)v22;
    if (!((unint64_t)v12._rawValue >> 62))
    {
      v9 = *(_QWORD *)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v9)
        break;
      goto LABEL_65;
    }
    swift_bridgeObjectRetain_n();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9)
    {
LABEL_65:
      v22 = (unint64_t)(v187 + 1);
      swift_bridgeObjectRelease_n();
      a2 = (unint64_t)v186._rawValue;
      v3 = (uint64_t)v188;
      v9 = v182;
      v47 = &selRef_setCanvasWidth_;
      v48 = (uint64_t)v180;
      if (v22 == v178)
      {
        v167 = 0;
        v168 = 0;
        goto LABEL_88;
      }
      continue;
    }
    break;
  }
  a2 = (unint64_t)v12._rawValue & 0xC000000000000001;
  v3 = 4;
  while (2)
  {
    if (a2)
      v49 = (_QWORD *)MEMORY[0x1DF0E4D64](v3 - 4, v12._rawValue);
    else
      v49 = *((id *)v12._rawValue + v3);
    v50 = v49;
    v51 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
      goto LABEL_199;
    }
    v52 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v49) + 0x2D0))();
    if (!v52
      || (v53 = (void *)v52,
          v10 = *(char **)(v52 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView),
          v23 = v10,
          v53,
          !v10))
    {

      goto LABEL_71;
    }
    v10 = (char *)v188;
    v54 = static NSObject.== infix(_:_:)();

    if ((v54 & 1) == 0)
    {
LABEL_71:
      ++v3;
      if (v51 == v9)
        goto LABEL_65;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = &selRef_setCanvasWidth_;
  v55 = objc_msgSend(v10, sel_textContentType);
  if (!v55)
    goto LABEL_224;
  v56 = v55;
  a2 = (unint64_t)v186._rawValue;
  FormFillingView.populateTextFieldGroup(_:using:textContentType:)(v12, v186, (__C::UITextContentType)v55);

  v3 = (uint64_t)v188;
  v9 = v182;
  if (v179)
  {
    swift_bridgeObjectRetain();
    v168 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v168 = *(_QWORD *)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v167 = 1;
LABEL_88:
  swift_bridgeObjectRelease();
LABEL_89:
  v57 = *(_QWORD *)&v175[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes];
  v179 = *(char **)(v57 + 16);
  if (!v179)
  {
LABEL_189:
    swift_bridgeObjectRelease();
LABEL_190:
    v156 = (char *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView);

    if (v156)
    {
      v157 = *(_QWORD *)&v156[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
      swift_retain();

      *(_QWORD *)(v157 + 40) = v168;
      swift_release();
    }
    return;
  }
  v162 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  v178 = v57 + 32;
  v58 = v9 & 0xFFFFFFFFFFFFFF8;
  v169 = v9 & 0xFFFFFFFFFFFFFF8;
  if ((v9 & 0x8000000000000000) != 0)
    v58 = v9;
  v161[1] = v58;
  v166 = v9 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  v59 = 0;
  v170 = v9 >> 62;
  v177 = v57;
LABEL_97:
  v60 = *(void **)(v178 + 8 * v59);
  v187 = (char *)(v59 + 1);
  v61 = v60;
  v62 = objc_msgSend((id)v3, v47[404]);
  if (!v62)
  {

    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_94;
    goto LABEL_106;
  }
  v63 = v62;
  v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v66 = v65;
  v68 = v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67;
  if (v68)
  {

    swift_bridgeObjectRelease_n();
    v57 = v177;
LABEL_94:

    goto LABEL_95;
  }
  v69 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v57 = v177;
  if ((v69 & 1) != 0 || !*(_QWORD *)(a2 + 16))
    goto LABEL_94;
LABEL_106:
  v61 = v61;
  v70 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
  if ((v71 & 1) == 0)
  {

    goto LABEL_94;
  }
  v72 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v70);
  v74 = *v72;
  v73 = v72[1];
  swift_bridgeObjectRetain();

  if (v170)
  {
    swift_bridgeObjectRetain();
    v75 = _CocoaArrayWrapper.endIndex.getter();
    if (v75)
      goto LABEL_109;
LABEL_186:

    swift_bridgeObjectRelease();
LABEL_187:
    swift_bridgeObjectRelease();
    v57 = v177;
LABEL_95:
    v59 = (unint64_t)v187;
    if (v187 != v179)
      goto LABEL_96;
    swift_bridgeObjectRelease();
    goto LABEL_189;
  }
  v75 = *(_QWORD *)(v169 + 16);
  swift_bridgeObjectRetain();
  if (!v75)
    goto LABEL_186;
LABEL_109:
  v164 = v74;
  v171 = v73;
  v181 = v61;
  if (v166)
  {
    v76 = 0;
    while (1)
    {
      v77 = (_QWORD *)MEMORY[0x1DF0E4D64](v76, v9);
      v78 = v76 + 1;
      if (__OFADD__(v76, 1))
        goto LABEL_197;
      a2 = (unint64_t)v77;
      v79 = (char *)v77 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v77) + 0x380);
      swift_beginAccess();
      v80 = v183;
      v81 = v184;
      v82 = v185;
      v180 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
      v180(v184, v79, v185);
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      Capsule<>.subscript.getter();
      swift_release();
      v9 = *(_QWORD *)(v80 + 8);
      v83 = v81;
      v84 = v181;
      ((void (*)(char *, uint64_t))v9)(v83, v82);
      v189 = v190;
      specialized FormContentType.uiTextContentType.getter();
      v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v87 = v86;
      if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v87 == v88)
        break;
      v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v89 & 1) != 0)
        goto LABEL_127;
      swift_unknownObjectRelease();
      ++v76;
      v9 = v182;
      if (v78 == v75)
      {

        swift_bridgeObjectRelease();
        v47 = &selRef_setCanvasWidth_;
        a2 = (unint64_t)v186._rawValue;
        goto LABEL_187;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v90 = 0;
    while (1)
    {
      v91 = v90 + 1;
      if (__OFADD__(v90, 1))
        goto LABEL_200;
      v92 = *(_QWORD **)(v9 + 8 * v90 + 32);
      v93 = (char *)v92 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v92) + 0x380);
      swift_beginAccess();
      v95 = v183;
      v94 = v184;
      v96 = v185;
      v180 = *(void (**)(char *, char *, uint64_t))(v183 + 16);
      v180(v184, v93, v185);
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      a2 = v92;
      Capsule<>.subscript.getter();
      swift_release();
      v9 = *(_QWORD *)(v95 + 8);
      v97 = v96;
      v84 = v181;
      ((void (*)(char *, uint64_t))v9)(v94, v97);
      v189 = v190;
      specialized FormContentType.uiTextContentType.getter();
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v100 = v99;
      if (v98 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v100 == v101)
        break;
      v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = (uint64_t)v188;
      if ((v102 & 1) != 0)
        goto LABEL_127;

      ++v90;
      v9 = v182;
      a2 = (unint64_t)v186._rawValue;
      if (v91 == v75)
      {

        swift_bridgeObjectRelease();
        v47 = &selRef_setCanvasWidth_;
        goto LABEL_187;
      }
    }
    swift_bridgeObjectRelease_n();
    v3 = (uint64_t)v188;
  }
LABEL_127:
  v103 = *(_QWORD *)&v175[v165];
  v47 = &selRef_setCanvasWidth_;
  v172 = *(_QWORD *)(v103 + 16);
  if (v172)
  {
    v174 = v103 + 32;
    v163 = v103;
    swift_bridgeObjectRetain_n();
    v104 = 0;
    while (1)
    {
      v12._rawValue = *(void **)(v174 + 8 * v104);
      v173 = (unint64_t)v12._rawValue >> 62;
      if ((unint64_t)v12._rawValue >> 62)
      {
        swift_bridgeObjectRetain_n();
        v10 = (char *)_CocoaArrayWrapper.endIndex.getter();
        if (!v10)
          goto LABEL_129;
      }
      else
      {
        v10 = *(char **)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v10)
          goto LABEL_129;
      }
      if (((unint64_t)v12._rawValue & 0xC000000000000001) != 0)
        v105 = (id)MEMORY[0x1DF0E4D64](0, v12._rawValue);
      else
        v105 = *((id *)v12._rawValue + 4);
      v106 = v105;
      v3 = (uint64_t)v188;
      type metadata accessor for AnyCanvasElementView();
      v107 = static NSObject.== infix(_:_:)();

      if ((v107 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_151:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v113 = a2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a2) + 0x380);
        swift_beginAccess();
        v114 = v184;
        v115 = v185;
        v180(v184, (char *)v113, v185);
        swift_getKeyPath();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        Capsule<>.subscript.getter();
        swift_release();
        ((void (*)(char *, uint64_t))v9)(v114, v115);
        v189 = v190;
        v116 = (id)specialized FormContentType.uiTextContentType.getter();
        v23 = (unint64_t)v186._rawValue;
        v22 = (unint64_t)v175;
        FormFillingView.populateTextFieldGroup(_:using:textContentType:)(v12, v186, (__C::UITextContentType)v116);

        v47 = &selRef_setCanvasWidth_;
        v117 = v181;
        if (v173)
        {
          swift_bridgeObjectRetain();
          v118 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v118 = *(_QWORD *)(((unint64_t)v12._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v119 = __OFADD__(v168, v118);
        v168 += v118;
        v9 = v182;
        if (v119)
        {
          __break(1u);
LABEL_214:
          __break(1u);
          goto LABEL_215;
        }
        v22 = *(_QWORD *)&v175[v162];
        swift_retain();
        swift_bridgeObjectRelease();

        v120 = *(_QWORD *)(v22 + 56);
        v119 = __OFADD__(v120, v118);
        v121 = v120 + v118;
        if (v119)
          goto LABEL_214;
        *(_QWORD *)(v22 + 56) = v121;
        swift_release();
        v59 = (unint64_t)v187;
        v57 = v177;
        if (v187 == v179)
          goto LABEL_194;
        a2 = v23;
        v167 = 1;
LABEL_96:
        if (v59 >= *(_QWORD *)(v57 + 16))
          goto LABEL_196;
        goto LABEL_97;
      }
      if (v10 != (char *)1)
      {
        if (((unint64_t)v12._rawValue & 0xC000000000000001) != 0)
        {
          v108 = 1;
          while (1)
          {
            MEMORY[0x1DF0E4D64](v108, v12._rawValue);
            v3 = v108 + 1;
            if (__OFADD__(v108, 1))
              goto LABEL_198;
            v109 = static NSObject.== infix(_:_:)();
            swift_unknownObjectRelease();
            if ((v109 & 1) != 0)
              goto LABEL_150;
            ++v108;
            if ((char *)v3 == v10)
              goto LABEL_129;
          }
        }
        v110 = 5;
        do
        {
          v3 = v110 - 3;
          if (__OFADD__(v110 - 4, 1))
            goto LABEL_201;
          v111 = *((id *)v12._rawValue + v110);
          v112 = static NSObject.== infix(_:_:)();

          if ((v112 & 1) != 0)
          {
LABEL_150:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v3 = (uint64_t)v188;
            goto LABEL_151;
          }
          ++v110;
        }
        while ((char *)v3 != v10);
      }
LABEL_129:
      ++v104;
      swift_bridgeObjectRelease_n();
      v3 = (uint64_t)v188;
      v47 = &selRef_setCanvasWidth_;
      if (v104 == v172)
      {
        swift_bridgeObjectRelease_n();
        v84 = v181;
        break;
      }
    }
  }
  v122 = v176;
  v123 = v176;
  ShapeView.addTextBox(canvas:)(v122);

  v124 = direct field offset for ShapeView._textBoxView;
  v125 = *(void **)(a2 + direct field offset for ShapeView._textBoxView);
  if (!v125
    || (v126 = v125,
        specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0),
        v126,
        (v127 = *(char **)(a2 + v124)) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_168:
    swift_bridgeObjectRelease();
LABEL_169:
    v57 = v177;
    v137 = *(void **)(a2 + v124);
    if (!v137)
      goto LABEL_171;
LABEL_170:
    v138 = v137;
    objc_msgSend(v138, sel_resignFirstResponder);

LABEL_171:
    v9 = v182;
    a2 = (unint64_t)v186._rawValue;
    goto LABEL_95;
  }
  v128 = *(void **)&v127[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  v57 = v177;
  if (!v128)
  {
    swift_bridgeObjectRelease();
    goto LABEL_173;
  }
  v129 = v127;
  v130 = v128;
  v131 = objc_msgSend(v130, sel_text);
  if (!v131)
    goto LABEL_227;
  v132 = v131;
  v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v135 = v134;

  swift_bridgeObjectRelease();
  v136 = HIBYTE(v135) & 0xF;
  if ((v135 & 0x2000000000000000) == 0)
    v136 = v133 & 0xFFFFFFFFFFFFLL;
  if (v136)
  {
    swift_bridgeObjectRelease();

    goto LABEL_168;
  }
  v139 = v171;
  v140 = HIBYTE(v171) & 0xF;
  v141 = v164;
  if ((v171 & 0x2000000000000000) == 0)
    v140 = v164 & 0xFFFFFFFFFFFFLL;
  v57 = v177;
  if (!v140)
  {
    swift_bridgeObjectRelease();

LABEL_173:
    swift_bridgeObjectRelease();
    v137 = *(void **)(a2 + v124);
    if (!v137)
      goto LABEL_171;
    goto LABEL_170;
  }
  v142 = v130;
  v143 = (void *)MEMORY[0x1DF0E41AC](v141, v139);
  swift_bridgeObjectRelease();
  objc_msgSend(v142, sel_setText_, v143);

  if (__OFADD__(v168, 1))
    goto LABEL_222;
  ++v168;
  v144 = *(_QWORD *)&v175[v162];
  v145 = *(_QWORD *)(v144 + 56);
  v119 = __OFADD__(v145, 1);
  v146 = v145 + 1;
  if (v119)
    goto LABEL_223;
  *(_QWORD *)(v144 + 56) = v146;
  v147 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  v148 = *(_QWORD *)&v129[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  *(_WORD *)(v148 + 18) = 270;
  *(_BYTE *)(v148 + 64) = 3;
  v149 = *(_QWORD *)&v129[v147];
  swift_retain();
  v150 = objc_msgSend(v142, v47[404]);
  if (!v150)
    goto LABEL_228;
  v151 = *(void **)(v149 + 32);
  *(_QWORD *)(v149 + 32) = v150;
  swift_release();

  v152 = *(_QWORD *)&v129[v147];
  swift_retain();
  v153 = objc_msgSend(v142, sel_text);
  if (v153)
  {
    v154 = v153;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    v155 = String.count.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v152 + 56) = v155;
    swift_release();
    *(_BYTE *)(*(_QWORD *)&v129[v147] + 64) = 3;
    v167 = 1;
    specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);

    v3 = (uint64_t)v188;
    v47 = &selRef_setCanvasWidth_;
    goto LABEL_169;
  }
LABEL_229:
  __break(1u);
}

Swift::Void __swiftcall FormFillingView.populateTextFieldGroup(_:using:textContentType:)(Swift::OpaquePointer _, Swift::OpaquePointer using, __C::UITextContentType textContentType)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t rawValue;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  id v42;
  char *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  unint64_t v57;
  id *v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  void *v62;
  uint64_t v63;

  if (!*((_QWORD *)using._rawValue + 2))
    goto LABEL_38;
  v6 = v4;
  rawValue = (unint64_t)_._rawValue;
  v10 = textContentType._rawValue;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v12 & 1) != 0)
  {
    v13 = *((_QWORD *)using._rawValue + 7) + 16 * v11;
    v7 = *(_QWORD *)v13;
    v5 = *(_QWORD *)(v13 + 8);
    swift_bridgeObjectRetain();

    v4 = String.count.getter();
    v3 = rawValue >> 62;
    if (rawValue >> 62)
      goto LABEL_39;
    v10 = *(id *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v14 = ceil((double)v4 / (double)(uint64_t)v10);
      if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
        break;
      if (v14 <= -9.22337204e18)
        goto LABEL_41;
      if (v14 >= 9.22337204e18)
        goto LABEL_42;
      if (v3)
      {
        swift_bridgeObjectRetain();
        v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        v3 = *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v3)
          goto LABEL_35;
      }
      v63 = v7;
      v58 = (id *)rawValue;
      v59 = v6 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas;
      v15 = 4;
      v60 = rawValue & 0xC000000000000001;
      v57 = v3;
      while (1)
      {
        v17 = v60 ? (id)MEMORY[0x1DF0E4D64](v15 - 4, rawValue) : *(id *)(rawValue + 8 * v15);
        v16 = v17;
        v4 = v15 - 3;
        if (__OFADD__(v15 - 4, 1))
          break;
        type metadata accessor for ShapeView();
        v18 = swift_dynamicCastClass();
        if (v18)
        {
          v19 = v18;
          v62 = v16;
          v61 = v16;
          swift_bridgeObjectRetain();
          v20 = String.count.getter();
          if (v20 >= (uint64_t)v14)
            v20 = (uint64_t)v14;
          v4 = specialized Collection.prefix(_:)(v20);
          v22 = v21;
          v24 = v23;
          v26 = v25;
          swift_bridgeObjectRelease();
          v6 = MEMORY[0x1DF0E423C](v4, v22, v24, v26);
          v7 = v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v3 = String.count.getter();
          swift_bridgeObjectRelease();
          v28 = String.count.getter();
          v29 = __OFSUB__(v3, v28);
          v30 = v3 - v28;
          if (v29)
            goto LABEL_37;
          v31 = specialized BidirectionalCollection.suffix(_:)(v30, v63, v5);
          v33 = v32;
          v35 = v34;
          v37 = v36;
          swift_bridgeObjectRelease();
          v63 = MEMORY[0x1DF0E423C](v31, v33, v35, v37);
          v5 = v38;
          swift_bridgeObjectRelease();
          v39 = (_QWORD *)MEMORY[0x1DF0E666C](v59);
          ShapeView.addTextBox(canvas:)(v39);

          v40 = direct field offset for ShapeView._textBoxView;
          v41 = *(void **)(v19 + direct field offset for ShapeView._textBoxView);
          if (!v41)
            goto LABEL_32;
          v42 = v41;
          specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0);

          v43 = *(char **)(v19 + v40);
          if (!v43)
            goto LABEL_32;
          v44 = *(void **)&v43[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
          if (!v44)
            goto LABEL_32;
          v45 = HIBYTE(v7) & 0xF;
          if ((v7 & 0x2000000000000000) == 0)
            v45 = v6 & 0xFFFFFFFFFFFFLL;
          if (v45)
          {
            v10 = v44;
            v46 = v43;
            v47 = (void *)MEMORY[0x1DF0E41AC](v6, v7);
            v7 = (unint64_t)v10;
            swift_bridgeObjectRelease();
            objc_msgSend(v10, sel_setText_, v47);

            v48 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
            v49 = *(_QWORD *)&v46[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
            *(_WORD *)(v49 + 18) = 270;
            *(_BYTE *)(v49 + 64) = 3;
            v50 = *(_QWORD *)&v46[v48];
            swift_retain();
            v51 = objc_msgSend(v10, sel_textContentType);
            if (!v51)
              goto LABEL_43;
            v10 = *(id *)(v50 + 32);
            *(_QWORD *)(v50 + 32) = v51;
            swift_release();

            v6 = *(_QWORD *)&v46[v48];
            swift_retain();
            v52 = objc_msgSend((id)v7, sel_text);
            if (!v52)
              goto LABEL_44;
            v53 = v52;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            v54 = String.count.getter();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v6 + 56) = v54;
            swift_release();
            specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);

          }
          else
          {
LABEL_32:
            swift_bridgeObjectRelease();
          }
          v55 = *(void **)(v19 + v40);
          v4 = v15 - 3;
          if (v55)
          {
            v56 = v55;
            objc_msgSend(v56, sel_resignFirstResponder);

          }
          v3 = v57;
          rawValue = (unint64_t)v58;
          v16 = v62;
        }

        ++v15;
        if (v4 == v3)
          goto LABEL_35;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
      v10 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }

  __break(1u);
}

void closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v9 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v13 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v13)
  {
    v14 = (void *)v13;
    v15 = (void *)MEMORY[0x1DF0E666C](v13 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas);

    if (v15)
    {
      v16 = AnyCanvas.formFieldElements.getter();
      if (v16 >> 62)
      {
        v17 = _CocoaArrayWrapper.endIndex.getter();
        if (v17)
          goto LABEL_5;
      }
      else
      {
        v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v17)
        {
LABEL_5:
          v37 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
          if (v17 < 0)
          {
            __break(1u);
            return;
          }
          v28 = v15;
          v18 = 0;
          v29 = v16 & 0xC000000000000001;
          v30 = v17;
          v19 = v16;
          do
          {
            if (v29)
              v20 = (_QWORD *)MEMORY[0x1DF0E4D64](v18, v16);
            else
              v20 = *(id *)(v16 + 8 * v18 + 32);
            v21 = v20;
            (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0xE8))();
            SharedTagged_9.tag.getter();
            v33 = v35;
            v34 = v36;
            MEMORY[0x1DF0E3408](v5);
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            WeakTagged_9.init(_:id:)();
            (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v5);

            v22 = v37;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
              v22 = v37;
            }
            v24 = *(_QWORD *)(v22 + 16);
            v23 = *(_QWORD *)(v22 + 24);
            if (v24 >= v23 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
              v22 = v37;
            }
            ++v18;
            *(_QWORD *)(v22 + 16) = v24 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v24, v12, v31);
            v16 = v19;
          }
          while (v30 != v18);
          swift_bridgeObjectRelease();
          v15 = v28;
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      v22 = MEMORY[0x1E0DEE9D8];
LABEL_18:
      v25 = specialized Set.init<A>(_:)(v22);
      swift_bridgeObjectRelease();
      v26 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
      AnyCanvas.selection.setter(v25, v26, 6, 0);

    }
  }
}

unint64_t FormFillingView.calculateCountTextFieldsUsed(with:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics);
  swift_retain();
  result = AnyCanvas.formFieldElements.getter();
  v3 = result;
  v17 = MEMORY[0x1E0DEE9D8];
  if (!(result >> 62))
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
      else
        v7 = *(id *)(v3 + 8 * v5 + 32);
      v8 = v7;
      v9 = (_QWORD *)(*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
      if (!v9)
        goto LABEL_5;
      v10 = v9;
      v11 = (*(uint64_t (**)(void))((*v6 & *v9) + 0xF0))();
      v13 = v12;

      swift_bridgeObjectRelease();
      v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0)
        v14 = v11 & 0xFFFFFFFFFFFFLL;
      if (v14)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_5:

      }
      ++v5;
    }
    while (v4 != v5);
    swift_bridgeObjectRelease();
    v15 = v17;
    if (v17 < 0)
      goto LABEL_22;
LABEL_19:
    if ((v15 & 0x4000000000000000) == 0)
    {
      v16 = *(_QWORD *)(v15 + 16);
LABEL_21:
      swift_release();
      *(_QWORD *)(v1 + 72) = v16;
      return swift_release();
    }
LABEL_22:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

unint64_t FormFillingView.calculateCountTextFieldsWithAutofillUsedExplicitly(with:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  result = AnyCanvas.formFieldElements.getter();
  v3 = result;
  v17 = MEMORY[0x1E0DEE9D8];
  if (result >> 62)
  {
    result = _CocoaArrayWrapper.endIndex.getter();
    v4 = result;
    if (result)
    {
LABEL_3:
      if (v4 < 1)
        goto LABEL_23;
      v5 = 0;
      v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      do
      {
        if ((v3 & 0xC000000000000001) != 0)
          v7 = (_QWORD *)MEMORY[0x1DF0E4D64](v5, v3);
        else
          v7 = *(id *)(v3 + 8 * v5 + 32);
        v8 = v7;
        v9 = (*(uint64_t (**)(void))((*v6 & *v7) + 0x2D0))();
        if (v9
          && (v10 = (void *)v9,
              v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
              swift_retain(),
              v10,
              LODWORD(v10) = *(unsigned __int8 *)(v11 + 64),
              swift_release(),
              (_DWORD)v10 == 2))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v5;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
      v12 = v17;
      if (v17 < 0)
        goto LABEL_21;
      goto LABEL_17;
    }
  }
  else
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v12 = MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_19;
  }
LABEL_17:
  if ((v12 & 0x4000000000000000) != 0)
    goto LABEL_21;
  v13 = *(_QWORD *)(v12 + 16);
LABEL_19:
  result = swift_release();
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned);
  v15 = __OFADD__(v13, v14);
  v16 = v13 + v14;
  if (!v15)
  {
    *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 88) = v16;
    return result;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t FormFillingView.calculateCountTextFieldsWithNoTextEntry(with:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  result = AnyCanvas.formFieldElements.getter();
  v3 = result;
  v4 = MEMORY[0x1E0DEE9D8];
  v33 = MEMORY[0x1E0DEE9D8];
  if (!(result >> 62))
  {
    v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_37;
    goto LABEL_19;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    goto LABEL_18;
LABEL_3:
  if (v5 < 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v8 = (_QWORD *)MEMORY[0x1DF0E4D64](v6, v3);
    else
      v8 = *(id *)(v3 + 8 * v6 + 32);
    v9 = v8;
    v10 = (_QWORD *)(*(uint64_t (**)(void))((*v7 & *v8) + 0x2D0))();
    if (!v10)
      goto LABEL_5;
    v11 = v10;
    v12 = (*(uint64_t (**)(void))((*v7 & *v10) + 0xF0))();
    v14 = v13;

    swift_bridgeObjectRelease();
    v15 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0)
      v15 = v12 & 0xFFFFFFFFFFFFLL;
    if (v15)
    {
LABEL_5:

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v6;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
  v16 = v33;
  v4 = MEMORY[0x1E0DEE9D8];
  if (v33 < 0)
    goto LABEL_37;
LABEL_19:
  if ((v16 & 0x4000000000000000) == 0)
  {
    v17 = *(_QWORD *)(v16 + 16);
    goto LABEL_21;
  }
LABEL_37:
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_21:
  swift_release();
  v18 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets);
  swift_beginAccess();
  v19 = *v18;
  v32 = v4;
  if (!((unint64_t)*v18 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_23;
LABEL_39:
    swift_bridgeObjectRelease();
    v30 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_44;
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v20 = result;
  if (!result)
    goto LABEL_39;
LABEL_23:
  if (v20 >= 1)
  {
    for (i = 0; i != v20; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x1DF0E4D64](i, v19);
      else
        v22 = *(id *)(v19 + 8 * i + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, sel_widgetStringValue);
      if (!v24)
        goto LABEL_25;
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v28 = v27;

      swift_bridgeObjectRelease();
      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v26 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_25:

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v30 = v32;
    if (v32 < 0)
      goto LABEL_44;
LABEL_40:
    if ((v30 & 0x4000000000000000) == 0)
    {
      v31 = *(_QWORD *)(v30 + 16);
LABEL_42:
      result = swift_release();
      if (!__OFADD__(v17, v31))
      {
        *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 112) = v17 + v31;
        return result;
      }
      __break(1u);
      goto LABEL_46;
    }
LABEL_44:
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_42;
  }
LABEL_47:
  __break(1u);
  return result;
}

id FormFillingView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FormFillingView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FormFillingView()
{
  return objc_opt_self();
}

PaperKit::FormContentType_optional key path getter for Shape.textContentType : Shape@<W0>(_BYTE *a1@<X8>)
{
  PaperKit::FormContentType_optional result;
  char v3;

  result.value = Shape.textContentType.getter(&v3).value;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Shape.textContentType : Shape(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = 0;
  type metadata accessor for Shape();
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

void specialized TextBoxView.updateCanvasElement(shouldRegisterUndo:)(int a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  char *v30;
  void *v31;
  id v32;
  uint64_t ObjectType;
  int v34;
  char *v35;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&ObjectType - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v1;
  v10 = &v1[direct field offset for TextBoxView.canvasElementView];
  v11 = MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.canvasElementView], v7);
  if (!v11)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v12 = (void *)v11;
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v14 = (_QWORD *)MEMORY[0x1DF0E666C](v10);
  if (!v14)
  {
LABEL_9:
    objc_msgSend(v2, sel_setNeedsLayout);
    v28 = (_QWORD *)MEMORY[0x1DF0E666C](v10);
    if (!v28)
      goto LABEL_13;
    v29 = v28;
    v30 = (char *)(*(uint64_t (**)(void))((*v13 & *v28) + 0x88))();

    if (!v30)
      goto LABEL_13;
    v31 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    v32 = v31;

    if (v31)
    {
      objc_msgSend(v32, sel_setNeedsLayout);

LABEL_13:
      objc_msgSend(v2, sel_setNeedsDisplay);
      return;
    }
    goto LABEL_15;
  }
  v15 = v14;
  if (((*(uint64_t (**)(void))((*v13 & *v14) + 0x1E0))() & 1) != 0
    || (v16 = (_QWORD *)MEMORY[0x1DF0E666C](v10)) == 0
    || (v17 = v16, v34 = a1, v18 = (_QWORD *)(*(uint64_t (**)(void))((*v13 & *v16) + 0x88))(), v17, !v18))
  {

    goto LABEL_9;
  }
  v19 = (void *)(*(uint64_t (**)(void))((*v13 & *v18) + 0x2F8))();
  v21 = v20;

  v22 = MEMORY[0x1DF0E666C](v10);
  if (v22)
  {
    v23 = (_QWORD *)v22;
    ObjectType = swift_getObjectType();
    v24 = (char *)v23 + *(_QWORD *)((*v13 & *v23) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v24, v4);

    v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v21 + 192);
    v26 = type metadata accessor for Shape();
    v27 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v25(v9, v34 & 1, v26, v27, &protocol witness table for Shape, ObjectType, v21);
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    goto LABEL_9;
  }
LABEL_16:
  __break(1u);
}

uint64_t specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  char *v40;
  void *v41;
  id v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(_BYTE *, _QWORD);
  _BYTE v52[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v49 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v48 = (uint64_t)&v47 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v47 = (char *)&v47 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v50 = (char *)&v47 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v47 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v47 - v26;
  v28 = *(_QWORD *)(a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v29(v27, v28, v12);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v51 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v31 = v30 + *(int *)(type metadata accessor for Shape() + 52);
  CRAttributedString.merge(_:)();
  v32 = *(void (**)(char *, uint64_t))(v13 + 8);
  v32(v27, v12);
  v29(v23, v31, v12);
  v33 = (void *)CRAttributedString.attributedString.getter();
  v34 = objc_msgSend(v33, sel_string);

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  if (v35)
    v38 = 0;
  else
    v38 = v37 == 0xE000000000000000;
  if (v38)
  {
    swift_bridgeObjectRelease();
    v32(v23, v12);
    return v51(v52, 0);
  }
  v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v32(v23, v12);
  if ((v39 & 1) != 0)
    return v51(v52, 0);
  v40 = v50;
  v29(v50, v31, v12);
  v29(v16, v31, v12);
  v41 = (void *)CRAttributedString.attributedString.getter();
  v32(v16, v12);
  v42 = objc_msgSend(v41, sel_length);

  result = (uint64_t)v42 - 1;
  if (!__OFSUB__(v42, 1))
  {
    v44 = (uint64_t)v47;
    CRAttributedString.attributes(at:effectiveRange:)();
    v32(v40, v12);
    v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
    v46 = v48;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v44, v48, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v46, v49, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    return v51(v52, 0);
  }
  __break(1u);
  return result;
}

void specialized TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void (**v43)(char *, char *, uint64_t);
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  void (**v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  id v65;
  char *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  void *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77;
  char *v78;
  char v79;
  _QWORD *v80;
  char *v81;
  void *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  id v90;
  _QWORD *v91;
  void *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  _QWORD *v96;
  void *v97;
  char *v98;
  id v99;
  void *v100;
  char *v101;
  id v102;
  uint64_t v103;
  void *v104;
  char *v105;
  id v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  void (*v118)(char *, uint64_t);
  id v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  void (**v123)(char *, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  char *v128;
  char *v129;
  id v130;
  id v131;
  Class isa;
  void *v133;
  char *v134;
  id v135;
  void *v136;
  id v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  id v144;
  Class v145;
  id v146;
  Class v147;
  double v148;
  id v149;
  id v150;
  _QWORD *v151;
  void *v152;
  id v153;
  id v154;
  id v155;
  id v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  char *v169;
  void (**v170)(char *, char *, uint64_t);
  __int128 v171;
  _QWORD *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  _UNKNOWN **v179;
  char v180;

  v2 = v1;
  LODWORD(v176) = a1;
  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v174 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v175 = (char *)&v159 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v171 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v170 = *(void (***)(char *, char *, uint64_t))(v171 - 8);
  MEMORY[0x1E0C80A78](v171, v14);
  v169 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v173 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v159 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v159 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v159 - v26;
  v30.n128_f64[0] = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)&v159 - v31;
  v33 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
  v34 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  v172 = v23;
  if (v34
    || (v166 = (void (*)(char *, char *, uint64_t))(v2 + direct field offset for TextBoxView.canvasElementView),
        (v165 = (char *)MEMORY[0x1DF0E666C](v30.n128_f64[0])) == 0))
  {
LABEL_2:
    if ((v176 & 1) != 0)
      goto LABEL_3;
    return;
  }
  if (*(_BYTE *)(v2 + direct field offset for TextBoxView.shouldAddTextboxView) != 1)
  {

    goto LABEL_2;
  }
  v168 = v3;
  v167 = v16;
  v161 = v33;
  objc_msgSend((id)v2, sel_bounds);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v62 = v61;
  v63 = *(void **)(v2 + direct field offset for TextBoxView.textContainer);
  v64 = objc_allocWithZone((Class)type metadata accessor for TextBoxTextView());
  v65 = v63;
  v66 = (char *)(id)v2;
  v164 = (char *)TextBoxTextView.init(textBoxView:frame:textContainer:)(v66, v63, v56, v58, v60, v62);
  v163 = v66;
  objc_msgSend(v164, sel_setDelegate_, v66);
  v67 = (_QWORD *)MEMORY[0x1DF0E666C](v166);
  if (v67)
  {
    v68 = v67;
    v69 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v70 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v67) + 0x88))();

    if (v70)
    {
      v71 = (void *)(*(uint64_t (**)(void))((*v69 & *v70) + 0x2F8))();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>);
      v72 = (_QWORD *)swift_dynamicCastClass();
      if (v72)
      {
        v73 = *(void **)((char *)v72 + *(_QWORD *)((*v69 & *v72) + 0x4D0));
        if (v73)
        {
          *((_QWORD *)&v178 + 1) = type metadata accessor for FormFillingView();
          v179 = &protocol witness table for FormFillingView;
          *(_QWORD *)&v177 = v73;
        }
        else
        {
          v179 = 0;
          v177 = 0u;
          v178 = 0u;
        }
        v89 = &v164[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
        swift_beginAccess();
        v90 = v73;
        outlined assign with take of FormAutofillDelegate?((uint64_t)&v177, (uint64_t)v89);
        swift_endAccess();
      }

    }
  }
  v91 = (_QWORD *)MEMORY[0x1DF0E666C](v166);
  if (v91)
  {
    v92 = v91;
    v93 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v94 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v91) + 0x88))();

    if (v94)
    {
      v95 = (void *)(*(uint64_t (**)(void))((*v93 & *v94) + 0x2F8))();

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
      v96 = (_QWORD *)swift_dynamicCastClass();
      if (v96)
      {
        v97 = *(void **)((char *)v96 + *(_QWORD *)((*v93 & *v96) + 0x4D0));
        if (v97)
        {
          *((_QWORD *)&v178 + 1) = type metadata accessor for FormFillingView();
          v179 = &protocol witness table for FormFillingView;
          *(_QWORD *)&v177 = v97;
        }
        else
        {
          v179 = 0;
          v177 = 0u;
          v178 = 0u;
        }
        v98 = &v164[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
        swift_beginAccess();
        v99 = v97;
        outlined assign with take of FormAutofillDelegate?((uint64_t)&v177, (uint64_t)v98);
        swift_endAccess();
      }

    }
  }
  v160 = v4;
  v100 = (void *)objc_opt_self();
  v101 = v164;
  v102 = objc_msgSend(v100, sel_clearColor);
  objc_msgSend(v101, sel_setBackgroundColor_, v102);

  v103 = one-time initialization token for textBoxTextContainerInset;
  v50 = v101;
  if (v103 != -1)
    goto LABEL_65;
  while (1)
  {
    v164 = v19;
    v162 = v2;
    objc_msgSend(v50, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);

    objc_msgSend(v50, sel_setAllowsEditingTextAttributes_, 1);
    objc_msgSend(v50, sel_setScrollEnabled_, 0);
    v104 = *(void **)&v163[direct field offset for TextBoxView.textStorage];
    v105 = v50;
    v106 = objc_msgSend(v104, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v107 = String.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v105, sel_setSelectedRange_, v107, 0);

    objc_msgSend(v105, sel_setClipsToBounds_, 0);
    v108 = (_QWORD *)MEMORY[0x1DF0E666C](v166);
    if (!v108)
      break;
    v109 = v108;
    v110 = (char *)v108 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v108) + 0x380);
    swift_beginAccess();
    v111 = v173;
    v166 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
    v112 = v167;
    v166(v32, v110, v167);
    v113 = v105;

    MEMORY[0x1E0C80A78](v114, v115);
    v159 = type metadata accessor for Shape();
    *(&v159 - 4) = v159;
    v116 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    *(&v159 - 3) = v116;
    *(&v159 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    v117 = v113;
    Capsule<>.subscript.getter();
    swift_release();
    v118 = *(void (**)(char *, uint64_t))(v111 + 8);
    v118(v32, v112);
    v180 = v177;
    v119 = (id)specialized FormContentType.uiTextContentType.getter();
    objc_msgSend(v113, sel_setTextContentType_, v119);

    v120 = &v165[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v165) + 0x380)];
    swift_beginAccess();
    v121 = ((uint64_t (*)(char *, char *, uint64_t))v166)(v27, v120, v112);
    MEMORY[0x1E0C80A78](v121, v122);
    *(&v159 - 4) = v159;
    *(&v159 - 3) = v116;
    *(&v159 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v118(v27, v112);
    v123 = v170;
    v124 = v171;
    if (((unsigned int (*)(char *, uint64_t, _QWORD))v170[6])(v13, 1, v171) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      v125 = v162;
      v126 = v161;
      v19 = v164;
      v127 = v163;
    }
    else
    {
      v128 = v169;
      v123[4](v169, v13, v124);
      v129 = v113;
      v127 = v163;
      v130 = objc_msgSend(v163, sel_traitCollection);
      v131 = objc_msgSend(v130, sel_userInterfaceStyle);

      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v131 == (id)2);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v129, sel_setTypingAttributes_, isa);

      ((void (*)(char *, uint64_t))v123[1])(v128, v124);
      v125 = v162;
      v126 = v161;
      v19 = v164;
    }
    objc_msgSend(v127, sel_addSubview_, v117);
    *((_BYTE *)v127 + direct field offset for TextBoxView.hideText) = 1;
    objc_msgSend(v127, sel_setNeedsDisplay);
    v133 = *(void **)(v125 + v126);
    *(_QWORD *)(v125 + v126) = v117;
    v134 = v117;

    v135 = objc_msgSend(v134, sel_inputAssistantItem);
    v136 = (void *)MEMORY[0x1DF0E41AC](0x6D726F6674786574, 0xEA00000000007461);
    v137 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v136);

    v138 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
    v139 = v127;
    v140 = objc_msgSend(v138, sel_initWithImage_style_target_action_, v137, 0, v139, sel_textFormat_);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v141 = swift_allocObject();
    v171 = xmmword_1DDF35440;
    *(_OWORD *)(v141 + 16) = xmmword_1DDF35440;
    v142 = swift_allocObject();
    *(_OWORD *)(v142 + 16) = v171;
    *(_QWORD *)(v142 + 32) = v140;
    *(_QWORD *)&v177 = v142;
    specialized Array._endMutation()();
    v143 = objc_allocWithZone(MEMORY[0x1E0DC3500]);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v144 = v140;
    v145 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v146 = objc_msgSend(v143, sel_initWithBarButtonItems_representativeItem_, v145, 0);

    *(_QWORD *)(v141 + 32) = v146;
    *(_QWORD *)&v177 = v141;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v147 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v135, sel_setTrailingBarButtonGroups_, v147);

    objc_msgSend(v139, sel_contentScaleFactor);
    specialized TextBoxView._applyScaleToView(scale:view:)(v134, v148);
    if ((v176 & 1) == 0)
    {

      v150 = v165;
      goto LABEL_61;
    }
    v149 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v149, sel_addObserver_selector_name_object_, v139, sel_firstResponderDidChange_, *MEMORY[0x1E0DC5AF8], 0);

    v2 = v162;
    v33 = v161;
    v4 = v160;
    v16 = v167;
    v3 = v168;
LABEL_3:
    v35 = v2 + direct field offset for TextBoxView.canvasElementView;
    v36 = MEMORY[0x1DF0E666C](v2 + direct field offset for TextBoxView.canvasElementView, v30);
    if (!v36)
      return;
    v37 = (_QWORD *)v36;
    v168 = v3;
    v167 = v16;
    v38 = (_QWORD *)MEMORY[0x1DF0E666C](v35);
    v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (!v38)
      goto LABEL_50;
    v40 = v38;
    v41 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v38) + 0x88))();

    if (!v41)
      goto LABEL_50;
    v164 = v19;
    AnyCanvas.selectedCanvasElementIds.getter();
    *(_QWORD *)&v171 = v42;

    v43 = (void (**)(char *, char *, uint64_t))((char *)v37 + *(_QWORD *)((*v39 & *v37) + 0x380));
    swift_beginAccess();
    v44 = v172;
    v45 = v173;
    v46 = *(char **)(v173 + 16);
    v170 = v43;
    v47 = v43;
    v48 = v167;
    v169 = v46;
    ((void (*)(_QWORD *, _QWORD, uint64_t))v46)(v172, v47, v167);
    v166 = (void (*)(char *, char *, uint64_t))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    Capsule<>.rootID.getter();
    v49 = v48;
    v50 = (char *)v171;
    v165 = *(char **)(v45 + 8);
    ((void (*)(_QWORD *, uint64_t))v165)(v44, v49);
    v176 = *((_QWORD *)v50 + 2);
    if (!v176)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v175, v168);
      goto LABEL_26;
    }
    v172 = v37;
    v51 = v4;
    v163 = (char *)((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v52 = v174;
    v53 = v168;
    v173 = *(_QWORD *)(v4 + 16);
    ((void (*)(char *, char *, uint64_t))v173)(v174, &v163[(_QWORD)v50], v168);
    v19 = (char *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
    swift_bridgeObjectRetain();
    v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    v160 = v51;
    v32 = *(char **)(v51 + 8);
    ((void (*)(char *, uint64_t))v32)(v52, v53);
    if ((v54 & 1) != 0)
    {
      swift_bridgeObjectRelease();
LABEL_49:
      v37 = v172;
      v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      ((void (*)(char *, uint64_t))v32)(v175, v168);
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    if (v176 == 1)
    {
      swift_bridgeObjectRelease();
      v74 = v168;
LABEL_25:
      v37 = v172;
      v39 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      ((void (*)(char *, uint64_t))v32)(v175, v74);
LABEL_26:
      swift_bridgeObjectRelease();
      v80 = (_QWORD *)MEMORY[0x1DF0E666C](v35);
      v81 = v164;
      if (v80)
      {
        v82 = v80;
        v83 = (void *)(*(uint64_t (**)(void))((*v39 & *v80) + 0x88))();

        if (v83)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
          v84 = v81;
          v85 = swift_allocObject();
          *(_OWORD *)(v85 + 16) = xmmword_1DDF32CF0;
          v86 = v39;
          v87 = v167;
          ((void (*)(char *, _QWORD, uint64_t))v169)(v84, v170, v167);
          Capsule<>.rootID.getter();
          v88 = v87;
          v39 = v86;
          ((void (*)(char *, uint64_t))v165)(v84, v88);
          AnyCanvas.selectedCanvasElementIds.setter(v85);

        }
      }
LABEL_50:
      v151 = (_QWORD *)MEMORY[0x1DF0E666C](v35);
      if (v151)
      {
        v152 = v151;
        v150 = (id)(*(uint64_t (**)(void))((*v39 & *v151) + 0x88))();

        if (v150)
        {
          v153 = (id)v2;
          v154 = objc_msgSend(v150, sel_window);
          if (v154)
          {
            v135 = v154;
            v155 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v154);
            if (v155)
            {
              v144 = v155;
              v156 = objc_msgSend(v155, sel__visibilityUpdatesEnabled);
              objc_msgSend(v144, sel__setVisibilityUpdatesEnabled_, 0);
              v157 = *(void **)(v2 + v33);
              if (v157)
                objc_msgSend(v157, sel_becomeFirstResponder);
              objc_msgSend(v144, sel__setVisibilityUpdatesEnabled_, v156);

              v150 = v37;
              goto LABEL_61;
            }

          }
          v158 = *(void **)(v2 + v33);
          if (v158)
            objc_msgSend(v158, sel_becomeFirstResponder);
          v135 = v153;
          v144 = v37;
LABEL_61:

          v37 = v144;
        }
      }

      return;
    }
    v161 = v33;
    v162 = v2;
    v27 = *(char **)(v160 + 72);
    v75 = &v50[(unint64_t)&v163[(_QWORD)v27]];
    v2 = 1;
    v74 = v168;
    while (1)
    {
      v13 = v174;
      ((void (*)(char *, char *, uint64_t))v173)(v174, v75, v74);
      v76 = v2 + 1;
      if (__OFADD__(v2, 1))
        break;
      v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      v78 = v13;
      v79 = v77;
      ((void (*)(char *, uint64_t))v32)(v78, v74);
      if ((v79 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v2 = v162;
        v33 = v161;
        goto LABEL_49;
      }
      ++v2;
      v75 = &v27[(_QWORD)v75];
      v74 = v168;
      if (v76 == v176)
      {
        swift_bridgeObjectRelease();
        v2 = v162;
        v33 = v161;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
  }
  __break(1u);
}

void specialized TextBoxView._applyScaleToView(scale:view:)(void *a1, double a2)
{
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;

  objc_msgSend(a1, sel_setContentScaleFactor_);
  v4 = objc_msgSend(a1, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_10;
LABEL_3:
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1DF0E4D64](i, v5);
      else
        v8 = *(id *)(v5 + 8 * i + 32);
      v9 = v8;
      specialized TextBoxView._applyScaleToView(scale:view:)(a2);

    }
    goto LABEL_10;
  }
  __break(1u);
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  void *v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  void *v32;
  id v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(unint64_t, char *, uint64_t);
  uint64_t v68;
  unint64_t v69;
  id v70;

  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v63) = a2;
  v60 = v3;
  v19 = *(int *)(v14 + 48);
  v59 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v20 = a1 + v59;
  v65 = *(_QWORD *)(v15 + 72);
  v62 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v20, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  v61 = v8;
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v66 = v7;
  v67 = v21;
  v21((unint64_t)v11, v17, v7);
  v64 = v19;
  v22 = *(void **)&v17[v19];
  v23 = (_QWORD *)*a3;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
  v26 = v23[2];
  v27 = (v24 & 1) == 0;
  v28 = v26 + v27;
  if (__OFADD__(v26, v27))
    goto LABEL_24;
  v29 = v24;
  if (v23[3] >= v28)
  {
    if ((v63 & 1) != 0)
    {
      if ((v24 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v29 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v36 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    v37 = v36[6];
    v63 = *(_QWORD *)(v61 + 72);
    v38 = v66;
    v67(v37 + v63 * v25, v11, v66);
    *(_QWORD *)(v36[7] + 8 * v25) = v22;
    v39 = v36[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v36[2] = v41;
    v42 = v18 - 1;
    if (v18 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    v43 = v62 + v65 + v59;
    while (1)
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v43, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
      v67((unint64_t)v11, v17, v38);
      v22 = *(void **)&v17[v64];
      v44 = (_QWORD *)*a3;
      v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
      v47 = v44[2];
      v48 = (v45 & 1) == 0;
      v49 = v47 + v48;
      if (__OFADD__(v47, v48))
        break;
      v50 = v45;
      if (v44[3] < v49)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, 1);
        v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
        if ((v50 & 1) != (v52 & 1))
          goto LABEL_26;
        v46 = v51;
      }
      if ((v50 & 1) != 0)
        goto LABEL_10;
      v53 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v46 >> 6) + 64) |= 1 << v46;
      v38 = v66;
      v67(v53[6] + v63 * v46, v11, v66);
      *(_QWORD *)(v53[7] + 8 * v46) = v22;
      v54 = v53[2];
      v40 = __OFADD__(v54, 1);
      v55 = v54 + 1;
      if (v40)
        goto LABEL_25;
      v53[2] = v55;
      v43 += v65;
      if (!--v42)
        goto LABEL_23;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v63 & 1);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
  if ((v29 & 1) == (v31 & 1))
  {
    v25 = v30;
    if ((v29 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v32 = (void *)swift_allocError();
    swift_willThrow();
    v70 = v32;
    v33 = v32;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v34 = swift_dynamicCast();
    v35 = v66;
    if ((v34 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v35);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v56._object = (void *)0x80000001DDF502F0;
  v56._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v56);
  _print_unlocked<A, B>(_:_:)();
  v57._countAndFlagsBits = 39;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized static FormFillingView.fontThatFits(frame:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id v8;
  void *v9;
  double Width;
  double v11;
  double v12;
  CGFloat v13;
  id v14;
  double Height;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  double v35;
  double v36;
  id v37;
  double v38;
  double v39;
  double v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E50]), sel_initWithFrame_, a1, a2, a3, a4);
  if (one-time initialization token for textBoxTextContainerInset != -1)
    swift_once();
  objc_msgSend(v8, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);
  if (one-time initialization token for formFieldFont != -1)
    swift_once();
  objc_msgSend(v8, sel_setFont_, static UIConstants.formFieldFont);
  v9 = (void *)MEMORY[0x1DF0E41AC](32, 0xE100000000000000);
  objc_msgSend(v8, sel_setText_, v9);

  v41.origin.x = a1;
  v41.origin.y = a2;
  v41.size.width = a3;
  v41.size.height = a4;
  Width = CGRectGetWidth(v41);
  objc_msgSend(v8, sel_sizeThatFits_, Width, 1.79769313e308);
  v12 = v11;
  v13 = v11 + v11;
  v42.origin.x = a1;
  v42.origin.y = a2;
  v42.size.width = a3;
  v42.size.height = a4;
  if (CGRectGetHeight(v42) >= v13)
  {
    (id)static UIConstants.formFieldFont;

    return;
  }
  v14 = objc_msgSend(v8, sel_font);
  v43.origin.x = a1;
  v43.origin.y = a2;
  v43.size.width = a3;
  v43.size.height = a4;
  Height = CGRectGetHeight(v43);
  v40 = Width;
  objc_msgSend(v8, sel_sizeThatFits_, Width, 1.79769313e308);
  v17 = v16;
  v44.origin.x = a1;
  v44.origin.y = a2;
  v44.size.width = a3;
  v44.size.height = a4;
  v18 = CGRectGetHeight(v44);
  if (Height >= v12)
  {
    if (v17 < v18)
    {
      v19 = v14;
      while (v19)
      {
        objc_msgSend(v19, sel_pointSize);
        v30 = v29;
        v46.origin.x = a1;
        v46.origin.y = a2;
        v46.size.width = a3;
        v46.size.height = a4;
        if (v30 > CGRectGetHeight(v46))
        {
          v14 = v19;
          goto LABEL_26;
        }
        v14 = objc_msgSend(v8, sel_font);

        v31 = objc_msgSend(v8, sel_font);
        if (!v31)
          goto LABEL_33;
        v32 = v31;
        v33 = objc_msgSend(v8, sel_font);
        if (!v33)
          goto LABEL_34;
        v34 = v33;
        objc_msgSend(v33, sel_pointSize);
        v36 = v35;

        v37 = objc_msgSend(v32, sel_fontWithSize_, v36 + 1.0);
        objc_msgSend(v8, sel_setFont_, v37);

        objc_msgSend(v8, sel_sizeThatFits_, v40, 1.79769313e308);
        v39 = v38;
        v47.origin.x = a1;
        v47.origin.y = a2;
        v47.size.width = a3;
        v47.size.height = a4;
        v19 = v14;
        if (v39 >= CGRectGetHeight(v47))
          goto LABEL_26;
      }
      goto LABEL_30;
    }
LABEL_26:
    objc_msgSend(v8, sel_setFont_, v14);
  }
  else if (v18 < v17)
  {
    v19 = v14;
    while (v19)
    {
      objc_msgSend(v19, sel_pointSize);
      if (v20 <= 4.0)
        goto LABEL_28;
      v21 = objc_msgSend(v8, sel_font);
      if (!v21)
        goto LABEL_31;
      v22 = v21;
      v23 = objc_msgSend(v8, sel_font);
      if (!v23)
        goto LABEL_32;
      v24 = v23;
      objc_msgSend(v23, sel_pointSize);
      v26 = v25;

      v14 = objc_msgSend(v22, sel_fontWithSize_, v26 + -1.0);
      objc_msgSend(v8, sel_setFont_, v14);
      objc_msgSend(v8, sel_sizeThatFits_, v40, 1.79769313e308);
      v28 = v27;
      v45.origin.x = a1;
      v45.origin.y = a2;
      v45.size.width = a3;
      v45.size.height = a4;
      v19 = v14;
      if (CGRectGetHeight(v45) >= v28)
        goto LABEL_27;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:

    __break(1u);
LABEL_32:

    __break(1u);
LABEL_33:

    __break(1u);
LABEL_34:

    __break(1u);
    goto LABEL_35;
  }
LABEL_27:
  if (v14)
  {
LABEL_28:

    return;
  }
LABEL_35:
  __break(1u);
}

void specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(void *a1, uint64_t a2, unint64_t a3, id a4, uint64_t a5, int a6, unsigned __int8 *a7, uint64_t a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16)
{
  Class isa;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  double v61;
  double v62;
  void *v63;
  id v64;
  id v65;
  double v66;
  uint64_t inited;
  void *v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  double v73;
  double v74;
  uint64_t v75;
  id v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  uint64_t v82;
  void *v83;
  id v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  void *v89;
  Class v90;
  id v91;
  char *v92;
  CGColorSpace *v93;
  CGColorSpace *v94;
  CGColorRef v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  id v108;
  _QWORD *v109;
  _BYTE v110[4];
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  id v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  char *v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137[5];
  CGFloat v138[24];

  LODWORD(isa) = a6;
  v128 = a1;
  v27 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v27, v28);
  v123 = &v110[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v126 = *(_QWORD *)(v30 - 8);
  v127 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v124 = &v110[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v33, v34);
  v125 = &v110[-v35];
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v36, v37);
  v121 = &v110[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v39, v40);
  v120 = &v110[-v41];
  MEMORY[0x1E0C80A78](v42, v43);
  v119 = &v110[-v44];
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v45, v46);
  v116 = &v110[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v48, v49);
  v129 = &v110[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v118 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v118, v51);
  v117 = &v110[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v53, v54);
  v122 = &v110[-v55];
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v131 = *(_QWORD *)(v56 - 8);
  v132 = v56;
  MEMORY[0x1E0C80A78](v56, v57);
  v133 = &v110[-((v58 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v130 = *a7;
  if ((unint64_t)(a8 - 1) > 0x7FFFFFFFFFFFFFFDLL)
  {
    v64 = a4;
    v65 = (id)*MEMORY[0x1E0DC1138];
    v66 = 0.0;
  }
  else
  {
    LODWORD(v115) = (_DWORD)isa;
    v114 = a5;
    v59 = a2;
    if (a4)
    {
      v60 = a4;
      objc_msgSend(v60, sel_pointSize);
      v62 = v61;
      v63 = (void *)MEMORY[0x1DF0E41AC](0x6F6C6E654DLL, 0xE500000000000000);
      a4 = objc_msgSend((id)objc_opt_self(), sel_fontWithName_size_, v63, v62);

    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, UIFont?)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    v68 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 40) = a4;
    v69 = a4;
    v65 = v68;
    v70 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v71 = MEMORY[0x1DF0E42D8](32, 0xE100000000000000, a8);
    v72 = (void *)MEMORY[0x1DF0E41AC](v71);
    swift_bridgeObjectRelease();
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v70);
    swift_bridgeObjectRelease();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v72, sel_sizeWithAttributes_, isa);
    v74 = v73;

    v66 = (a11 - v74) / (double)a8;
    a2 = v59;
    a5 = v114;
    LOBYTE(isa) = (_BYTE)v115;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  v75 = swift_initStackObject();
  *(_OWORD *)(v75 + 16) = xmmword_1DDF35B30;
  *(_QWORD *)(v75 + 32) = v65;
  *(_QWORD *)(v75 + 64) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  v76 = v65;
  if (a4)
    v77 = a4;
  else
    specialized static FormFillingView.fontThatFits(frame:)(a9, a10, a11, a12);
  *(_QWORD *)(v75 + 40) = v77;
  v78 = (void *)*MEMORY[0x1E0DC1178];
  *(_QWORD *)(v75 + 72) = *MEMORY[0x1E0DC1178];
  if ((isa & 1) != 0)
    a5 = 0;
  v79 = objc_allocWithZone(MEMORY[0x1E0DC1288]);
  v80 = v78;
  v115 = a4;
  v81 = objc_msgSend(v79, sel_init);
  objc_msgSend(v81, sel_setAlignment_, a5);
  v82 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(_QWORD *)(v75 + 80) = v81;
  v83 = (void *)*MEMORY[0x1E0DC1150];
  *(_QWORD *)(v75 + 104) = v82;
  *(_QWORD *)(v75 + 112) = v83;
  *(_QWORD *)(v75 + 144) = MEMORY[0x1E0DEF040];
  *(double *)(v75 + 120) = v66;
  v84 = v83;
  v85 = specialized Dictionary.init(dictionaryLiteral:)(v75);
  if (a3)
    v86 = a2;
  else
    v86 = 0;
  if (a3)
    v87 = a3;
  else
    v87 = 0xE000000000000000;
  v88 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v89 = (void *)MEMORY[0x1DF0E41AC](v86, v87);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v90 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v91 = objc_msgSend(v88, sel_initWithString_attributes_, v89, v90);

  CRAttributedString<>.init(nsAttributedString:scale:)(v91, (uint64_t)v133, 1.0);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v92 = v129;
  TaggedValue_9.init(_:)();
  memset(v138, 0, 32);
  v93 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v93)
  {
    v94 = v93;
    v95 = CGColorCreate(v93, v138);

    if (v95)
    {
      v112 = a16;
      v111 = a15;
      LODWORD(v114) = a14;
      v113 = a13;
      v134 = (uint64_t)v95;
      v137[0] = 0;
      v96 = v131;
      v97 = v132;
      v98 = (uint64_t)v116;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v131 + 16))(v116, v133, v132);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v96 + 56))(v98, 0, 1, v97);
      v136 = 2;
      v99 = v122;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v92, &v134, v137, v98, &v136, (uint64_t)v122, a9, a10, a11, a12, 5.0);
      v134 = v130;
      v135 = 0;
      ShapeSecondaryProperties.textContentType.setter(&v134);
      v100 = (uint64_t)v119;
      CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v85, 0);
      v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 0, 1, v101);
      v102 = v120;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v100, (uint64_t)v120, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v102, (uint64_t)v121, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v102, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v100, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined init with copy of Shape((uint64_t)v99, (uint64_t)v117);
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      v103 = v125;
      Capsule<>.init(_:id:)();
      v104 = v126;
      v105 = v127;
      v106 = v124;
      (*(void (**)(char *, _BYTE *, uint64_t))(v126 + 16))(v124, v103, v127);
      LOBYTE(v98) = (_DWORD)v130 == 50;
      objc_allocWithZone((Class)type metadata accessor for ShapeView());
      v107 = v128;
      v108 = v128;
      v109 = specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:showsSignaturePopover:analytics_inputSource:analytics_documentType:)(v106, v107, v98, v111, v112);

      (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v103, v105);
      outlined destroy of Shape((uint64_t)v99);
      (*(void (**)(_BYTE *, uint64_t))(v131 + 8))(v133, v132);
      *((_BYTE *)v109 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDetectedFormField) = v113 & 1;
      *((_BYTE *)v109 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_startsNewAutofillContext) = v114 & 1;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v6 = v5;
  result = MEMORY[0x1E0DEE9D8];
  v36 = MEMORY[0x1E0DEE9D8];
  v8 = a4 >> 1;
  if (a4 >> 1 == a3)
    return result;
  v9 = a3;
  v10 = (uint64_t *)(a5 + OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields);
  v33 = a5 + OBJC_IVAR____TtC8PaperKit15FormFillingView_canvas;
  swift_unknownObjectRetain();
  swift_beginAccess();
  v32 = v8;
  while (1)
  {
    if (v9 >= v8)
      goto LABEL_44;
    v11 = *(void **)(a2 + 8 * v9);
    v12 = *v10;
    v13 = (_QWORD *)MEMORY[0x1DF0E666C](v33);
    v14 = v13;
    if (v13)
    {
      v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x2F8))();
      v16 = v11;
      swift_bridgeObjectRetain();

      v14 = objc_msgSend(v15, sel_effectiveUserInterfaceLayoutDirection);
      LOBYTE(v14) = v14 == 0;
      if (v12 < 0)
        goto LABEL_37;
    }
    else
    {
      v17 = v11;
      swift_bridgeObjectRetain();
      if (v12 < 0)
        goto LABEL_37;
    }
    if ((v12 & 0x4000000000000000) == 0)
    {
      v18 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
LABEL_37:
    v31 = swift_bridgeObjectRetain();
    v18 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v31);
    swift_bridgeObjectRelease();
LABEL_12:
    v35 = v18;
    specialized MutableCollection<>.sort(by:)(&v35, (char)v14);
    if (v6)
      goto LABEL_46;
    v6 = 0;
    swift_bridgeObjectRelease();
    v19 = v35;
    if (v35 < 0 || (v35 & 0x4000000000000000) != 0)
      break;
    v20 = *(_QWORD *)(v35 + 16);
    swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_16;
LABEL_3:

    swift_release_n();
LABEL_4:
    if (++v9 == v8)
    {
      swift_unknownObjectRelease();
      return v36;
    }
  }
  swift_bridgeObjectRetain();
  v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20)
    goto LABEL_3;
LABEL_16:
  if ((v19 & 0xC000000000000001) != 0)
    v21 = (id)MEMORY[0x1DF0E4D64](0, v19);
  else
    v21 = *(id *)(v19 + 32);
  v22 = v21;
  type metadata accessor for AnyCanvasElementView();
  v23 = static NSObject.== infix(_:_:)();

  if ((v23 & 1) != 0)
  {
LABEL_19:
    swift_release_n();
    type metadata accessor for ShapeView();
    if (swift_dynamicCastClass())
    {
      MEMORY[0x1DF0E4398]();
      v6 = 0;
      v8 = v32;
      if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_4;
    }

    goto LABEL_36;
  }
  if (v20 == 1)
  {
LABEL_35:

    swift_release_n();
LABEL_36:
    v6 = 0;
    v8 = v32;
    goto LABEL_4;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
    v24 = 1;
    while (1)
    {
      MEMORY[0x1DF0E4D64](v24, v19);
      v25 = v24 + 1;
      if (__OFADD__(v24, 1))
        break;
      v26 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if ((v26 & 1) != 0)
        goto LABEL_19;
      ++v24;
      if (v25 == v20)
        goto LABEL_35;
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v27 = 5;
  while (1)
  {
    v28 = v27 - 3;
    if (__OFADD__(v27 - 4, 1))
      break;
    v29 = *(id *)(v19 + 8 * v27);
    v30 = static NSObject.== infix(_:_:)();

    if ((v30 & 1) != 0)
      goto LABEL_19;
    ++v27;
    if (v28 == v20)
      goto LABEL_35;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, void *a5, char a6)
{
  char *v6;
  char *v8;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  double v37;
  BOOL v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  double MinY;
  double MinX;
  double v74;
  BOOL v75;
  int v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  uint64_t result;
  CGFloat rect;
  CGFloat recta;
  _QWORD v85[3];
  uint64_t v86;
  _BYTE v87[40];
  _BYTE v88[40];
  char *v89;
  char *v90;
  char *v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  v6 = __dst;
  v8 = a2;
  v10 = a2 - __src;
  v11 = (a2 - __src) / 40;
  v12 = a3 - (_QWORD)a2;
  v13 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v91 = __src;
  v90 = __dst;
  if (v11 >= v13)
  {
    if (v12 < -39)
      goto LABEL_58;
    if (__dst != a2 || &a2[40 * v13] <= __dst)
      memmove(__dst, a2, 40 * v13);
    v47 = &v6[40 * v13];
    v89 = v47;
    v91 = v8;
    if (__src >= v8 || v12 < 40)
    {
LABEL_57:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v91, (const void **)&v90, &v89);
      return 1;
    }
    v48 = a3 - 40;
    while (1)
    {
      outlined init with copy of AnyHashable((uint64_t)(v47 - 40), (uint64_t)v88);
      v51 = v8 - 40;
      outlined init with copy of AnyHashable((uint64_t)(v8 - 40), (uint64_t)v87);
      v52 = MEMORY[0x1E0DEC198];
      v86 = MEMORY[0x1E0DEC198];
      v85[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v88, v85[0] + 16);
      FormFillingView.frameForFormElement(element:)((uint64_t)v85);
      v54 = v53;
      v56 = v55;
      v58 = v57;
      v60 = v59;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      v86 = v52;
      v85[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v87, v85[0] + 16);
      FormFillingView.frameForFormElement(element:)((uint64_t)v85);
      v62 = v61;
      v64 = v63;
      v66 = v65;
      v68 = v67;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      recta = v54;
      v98.origin.x = v54;
      v69 = v56;
      v98.origin.y = v56;
      v70 = v58;
      v98.size.width = v58;
      v71 = v60;
      v98.size.height = v60;
      MinY = CGRectGetMinY(v98);
      v99.origin.x = v62;
      v99.origin.y = v64;
      v99.size.width = v66;
      v99.size.height = v68;
      if (MinY == CGRectGetMinY(v99))
      {
        v100.origin.x = recta;
        v100.origin.y = v69;
        v100.size.width = v70;
        v100.size.height = v71;
        MinX = CGRectGetMinX(v100);
        v101.origin.x = v62;
        v101.origin.y = v64;
        v101.size.width = v66;
        v101.size.height = v68;
        v74 = CGRectGetMinX(v101);
        if ((a6 & 1) == 0)
        {
          v75 = v74 < MinX;
          goto LABEL_45;
        }
      }
      else
      {
        v102.origin.x = recta;
        v102.origin.y = v69;
        v102.size.width = v70;
        v102.size.height = v71;
        MinX = CGRectGetMinY(v102);
        v103.origin.x = v62;
        v103.origin.y = v64;
        v103.size.width = v66;
        v103.size.height = v68;
        v74 = CGRectGetMinY(v103);
      }
      v75 = MinX < v74;
LABEL_45:
      v76 = v75;
      v77 = (char *)(v48 + 40);
      outlined destroy of AnyHashable((uint64_t)v87);
      outlined destroy of AnyHashable((uint64_t)v88);
      if (v76)
      {
        if (v77 != v8 || v48 >= (unint64_t)v8)
        {
          v49 = *(_OWORD *)v51;
          v50 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(v48 + 32) = *((_QWORD *)v8 - 1);
          *(_OWORD *)v48 = v49;
          *(_OWORD *)(v48 + 16) = v50;
        }
        v91 -= 40;
        v47 = v89;
        if (v89 <= v6)
          goto LABEL_57;
      }
      else
      {
        v78 = v89;
        v47 = v89 - 40;
        v89 -= 40;
        if (v77 < v78 || v48 >= (unint64_t)v78 || v77 != v78)
        {
          v79 = *(_OWORD *)v47;
          v80 = *(_OWORD *)(v78 - 24);
          *(_QWORD *)(v48 + 32) = *((_QWORD *)v78 - 1);
          *(_OWORD *)v48 = v79;
          *(_OWORD *)(v48 + 16) = v80;
        }
        v51 = v8;
        if (v47 <= v6)
          goto LABEL_57;
      }
      v48 -= 40;
      v8 = v51;
      if (v51 <= __src)
        goto LABEL_57;
    }
  }
  if (v10 >= -39)
  {
    if (__dst != __src || &__src[40 * v11] <= __dst)
      memmove(__dst, __src, 40 * v11);
    v14 = (unint64_t)&v6[40 * v11];
    v89 = (char *)v14;
    if ((unint64_t)v8 < a3 && v10 >= 40)
    {
      v15 = MEMORY[0x1E0DEC198];
      while (1)
      {
        outlined init with copy of AnyHashable((uint64_t)v8, (uint64_t)v88);
        outlined init with copy of AnyHashable((uint64_t)v6, (uint64_t)v87);
        v86 = v15;
        v85[0] = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)v88, v85[0] + 16);
        FormFillingView.frameForFormElement(element:)((uint64_t)v85);
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v23 = v22;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        v86 = v15;
        v85[0] = swift_allocObject();
        outlined init with copy of AnyHashable((uint64_t)v87, v85[0] + 16);
        FormFillingView.frameForFormElement(element:)((uint64_t)v85);
        v25 = v24;
        v27 = v26;
        v29 = v28;
        v31 = v30;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        rect = v17;
        v92.origin.x = v17;
        v32 = v19;
        v92.origin.y = v19;
        v33 = v21;
        v92.size.width = v21;
        v34 = v23;
        v92.size.height = v23;
        v35 = CGRectGetMinY(v92);
        v93.origin.x = v25;
        v93.origin.y = v27;
        v93.size.width = v29;
        v93.size.height = v31;
        if (v35 != CGRectGetMinY(v93))
          break;
        v94.origin.x = rect;
        v94.origin.y = v32;
        v94.size.width = v33;
        v94.size.height = v34;
        v36 = CGRectGetMinX(v94);
        v95.origin.x = v25;
        v95.origin.y = v27;
        v95.size.width = v29;
        v95.size.height = v31;
        v37 = CGRectGetMinX(v95);
        if ((a6 & 1) != 0)
          goto LABEL_13;
        v38 = v37 < v36;
LABEL_14:
        v39 = v38;
        outlined destroy of AnyHashable((uint64_t)v87);
        outlined destroy of AnyHashable((uint64_t)v88);
        v40 = v91;
        if (v39)
        {
          v41 = (unint64_t)(v8 + 40);
          if (v91 >= v8 && (unint64_t)v91 < v41 && v91 == v8)
          {
            v40 = v8;
          }
          else
          {
            v42 = *(_OWORD *)v8;
            v43 = *((_OWORD *)v8 + 1);
            *((_QWORD *)v91 + 4) = *((_QWORD *)v8 + 4);
            *v40 = v42;
            v40[1] = v43;
          }
        }
        else
        {
          v44 = v90 + 40;
          if (v91 != v90 || v91 >= v44)
          {
            v45 = *(_OWORD *)v90;
            v46 = *((_OWORD *)v90 + 1);
            *((_QWORD *)v91 + 4) = *((_QWORD *)v90 + 4);
            *v40 = v45;
            v40[1] = v46;
          }
          v90 = v44;
          v41 = (unint64_t)v8;
        }
        v91 = (char *)v40 + 40;
        v6 = v90;
        if ((unint64_t)v90 < v14)
        {
          v8 = (char *)v41;
          if (v41 < a3)
            continue;
        }
        goto LABEL_57;
      }
      v96.origin.x = rect;
      v96.origin.y = v32;
      v96.size.width = v33;
      v96.size.height = v34;
      v36 = CGRectGetMinY(v96);
      v97.origin.x = v25;
      v97.origin.y = v27;
      v97.size.width = v29;
      v97.size.height = v31;
      v37 = CGRectGetMinY(v97);
LABEL_13:
      v38 = v36 < v37;
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_58:

  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(char *result, char *a2, char *a3, _QWORD *a4, void *a5, char a6)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char **v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  char *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  _QWORD *v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  char *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  id v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  CGFloat v66;
  id v67;
  double v68;
  double v69;
  double v70;
  double v71;
  CGFloat v72;
  CGFloat v73;
  double MinY;
  double MinX;
  double v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  char *v85;
  uint64_t v86;
  char *v88;
  CGFloat rect;
  _BYTE v92[32];
  _QWORD v93[3];
  uint64_t v94;
  _BYTE v95[40];
  _BYTE v96[48];
  id v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;

  v85 = result;
  if (a3 == a2)
    return result;
  v6 = a4;
  v7 = a3;
  v8 = MEMORY[0x1E0DEC198];
  v9 = 40 * (_QWORD)a3;
  v10 = &unk_1EA8472C0;
  v11 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
LABEL_5:
  v12 = v85;
  v86 = v9;
  v88 = v7;
  while (1)
  {
    v13 = *v6 + v9;
    outlined init with copy of AnyHashable(v13, (uint64_t)v96);
    outlined init with copy of AnyHashable(v13 - 40, (uint64_t)v95);
    v94 = v8;
    v93[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v96, v93[0] + 16);
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
    type metadata accessor for CanvasElementPDFAnnotation();
    if (!swift_dynamicCast())
      goto LABEL_12;
    v14 = v10;
    v15 = v97;
    v16 = objc_msgSend(v97, v11[173]);
    if (!v16)
    {

      v10 = v14;
      v6 = a4;
      v7 = v88;
LABEL_12:
      outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        v29 = v97;
        objc_msgSend(v97, sel_frame);
        v31 = v30;
        v33 = v32;
        v35 = v34;
        v37 = v36;

      }
      else
      {
        v35 = 0.0;
        v37 = 0.0;
        v31 = 0.0;
        v33 = 0.0;
      }
      goto LABEL_17;
    }
    v17 = v16;
    v18 = objc_msgSend(v15, v11[173]);
    if (v18)
    {
      v19 = v18;
      result = (char *)objc_msgSend(v18, sel_view);
      if (!result)
        goto LABEL_41;
      v20 = result;
      objc_msgSend(v15, sel_bounds);
      objc_msgSend(v20, sel_convertRect_fromPage_, v19);
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v28 = v27;

      v8 = MEMORY[0x1E0DEC198];
    }
    else
    {
      v22 = 0.0;
      v24 = 0.0;
      v26 = 0.0;
      v28 = 0.0;
    }
    v38 = objc_msgSend(v17, sel_view);
    objc_msgSend(a5, sel_convertRect_fromView_, v38, v22, v24, v26, v28);
    v31 = v39;
    v33 = v40;
    v35 = v41;
    v37 = v42;

    v10 = v14;
    v6 = a4;
    v7 = v88;
    v11 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    v94 = v8;
    v93[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v95, v93[0] + 16);
    outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_23;
    v43 = v6;
    v44 = v7;
    v45 = v97;
    v46 = objc_msgSend(v97, v11[173]);
    if (!v46)
    {

      v6 = v43;
      v10 = &unk_1EA8472C0;
LABEL_23:
      outlined init with copy of Any((uint64_t)v93, (uint64_t)v92);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        v59 = v97;
        objc_msgSend(v97, sel_frame);
        v61 = v60;
        v63 = v62;
        rect = v64;
        v66 = v65;

      }
      else
      {
        rect = 0.0;
        v66 = 0.0;
        v61 = 0.0;
        v63 = 0.0;
      }
      goto LABEL_28;
    }
    v47 = v46;
    v48 = objc_msgSend(v45, v11[173]);
    if (v48)
    {
      v49 = v48;
      result = (char *)objc_msgSend(v48, sel_view);
      if (!result)
        goto LABEL_42;
      v50 = result;
      objc_msgSend(v45, sel_bounds);
      objc_msgSend(v50, sel_convertRect_fromPage_, v49);
      v52 = v51;
      v54 = v53;
      v56 = v55;
      v58 = v57;

      v8 = MEMORY[0x1E0DEC198];
    }
    else
    {
      v52 = 0.0;
      v54 = 0.0;
      v56 = 0.0;
      v58 = 0.0;
    }
    v67 = objc_msgSend(v47, sel_view);
    objc_msgSend(a5, sel_convertRect_fromView_, v67, v52, v54, v56, v58);
    v61 = v68;
    v63 = v69;
    rect = v70;
    v66 = v71;

    v11 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    v7 = v44;
    v6 = v43;
    v10 = &unk_1EA8472C0;
LABEL_28:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
    v98.origin.x = v31;
    v98.origin.y = v33;
    v98.size.width = v35;
    v98.size.height = v37;
    v72 = v37;
    v73 = v35;
    MinY = CGRectGetMinY(v98);
    v99.origin.x = v61;
    v99.origin.y = v63;
    v99.size.width = rect;
    v99.size.height = v66;
    if (MinY == CGRectGetMinY(v99))
    {
      v100.origin.x = v31;
      v100.origin.y = v33;
      v100.size.width = v73;
      v100.size.height = v72;
      MinX = CGRectGetMinX(v100);
      v101.origin.x = v61;
      v101.origin.y = v63;
      v101.size.width = rect;
      v101.size.height = v66;
      v76 = CGRectGetMinX(v101);
      if ((a6 & 1) == 0)
      {
        v77 = v76 < MinX;
        goto LABEL_33;
      }
    }
    else
    {
      v102.origin.x = v31;
      v102.origin.y = v33;
      v102.size.width = v73;
      v102.size.height = v72;
      MinX = CGRectGetMinY(v102);
      v103.origin.x = v61;
      v103.origin.y = v63;
      v103.size.width = rect;
      v103.size.height = v66;
      v76 = CGRectGetMinY(v103);
    }
    v77 = MinX < v76;
LABEL_33:
    v78 = v77;
    outlined destroy of AnyHashable((uint64_t)v95);
    result = (char *)outlined destroy of AnyHashable((uint64_t)v96);
    if (!v78)
    {
LABEL_4:
      ++v7;
      v9 = v86 + 40;
      if (v7 == a2)
        return result;
      goto LABEL_5;
    }
    if (!*v6)
      break;
    v79 = *v6 + v9;
    v80 = *(_QWORD *)(v79 + 32);
    v82 = *(_OWORD *)v79;
    v81 = *(_OWORD *)(v79 + 16);
    v83 = *(_OWORD *)(v79 - 24);
    *(_OWORD *)v79 = *(_OWORD *)(v79 - 40);
    *(_OWORD *)(v79 + 16) = v83;
    *(_QWORD *)(v79 + 32) = *(_QWORD *)(v79 - 8);
    *(_OWORD *)(v79 - 40) = v82;
    *(_OWORD *)(v79 - 24) = v81;
    *(_QWORD *)(v79 - 8) = v80;
    v9 -= 40;
    if (v7 == ++v12)
      goto LABEL_4;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(char **a1, void *a2, char a3)
{
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  char **v14;
  char **v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  Swift::Int v19;
  char *v20;
  Swift::Int v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  double MinY;
  double MinX;
  double v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  char **v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  id v63;
  double v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  id v72;
  double v73;
  double v74;
  double v75;
  double v76;
  id v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  id v82;
  void *v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  id v92;
  double v93;
  CGFloat v94;
  double v95;
  CGFloat v96;
  void *v97;
  double v98;
  CGFloat v99;
  id v100;
  double v101;
  double v102;
  void *v103;
  double v104;
  CGFloat v105;
  CGFloat v106;
  double v107;
  double v108;
  double v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  char *v113;
  Swift::Int v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  Swift::Int v120;
  uint64_t v121;
  Swift::Int v122;
  uint64_t v123;
  id v124;
  id v125;
  void *v126;
  id v127;
  void *v128;
  id v129;
  void *v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  id v139;
  double v140;
  CGFloat v141;
  double v142;
  CGFloat v143;
  double v144;
  CGFloat v145;
  double v146;
  CGFloat v147;
  id v148;
  double v149;
  double v150;
  double v151;
  double v152;
  id v153;
  id v154;
  void *v155;
  id v156;
  void *v157;
  id v158;
  void *v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  id v168;
  double v169;
  CGFloat v170;
  double v171;
  CGFloat v172;
  void *v173;
  double v174;
  CGFloat v175;
  id v176;
  double v177;
  double v178;
  void *v179;
  double v180;
  CGFloat v181;
  CGFloat v182;
  double v183;
  double v184;
  double v185;
  BOOL v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  unint64_t v193;
  unint64_t v194;
  Swift::Int v195;
  char *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  BOOL v209;
  unint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  char v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  unint64_t v245;
  id v246;
  unint64_t v247;
  char *v248;
  char *v249;
  unint64_t v250;
  char *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  unint64_t v255;
  id v256;
  char *v257;
  unint64_t v258;
  uint64_t v259;
  Swift::Int v260;
  CGFloat rect;
  char *rect_16;
  Swift::Int rect_24;
  Swift::Int rect_24a;
  Swift::Int v265;
  char *v266;
  char *__dst;
  Swift::Int v268;
  uint64_t v269;
  Swift::Int v270;
  int v271;
  char *v272;
  char *v273;
  char *v274;
  void *v275;
  uint64_t v276;
  void *__src;
  void *__srca;
  char *__srcc;
  char *__srcb;
  _BYTE v283[32];
  _QWORD v284[3];
  uint64_t v285;
  _BYTE v286[40];
  _BYTE v287[48];
  id v288;
  CGRect v289;
  CGRect v290;
  CGRect v291;
  CGRect v292;
  CGRect v293;
  CGRect v294;
  CGRect v295;
  CGRect v296;
  CGRect v297;
  CGRect v298;
  CGRect v299;
  CGRect v300;
  CGRect v301;
  CGRect v302;
  CGRect v303;
  CGRect v304;
  CGRect v305;
  CGRect v306;

  v4 = (Swift::Int)a1[1];
  v5 = a2;
  v6 = _minimumMergeRunLength(_:)(v4);
  if (v6 >= v4)
  {
    if (v4 < 0)
      goto LABEL_202;
    if (v4)
    {
      v10 = (id)v5;
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, (char *)v4, (char *)1, a1, v10, a3 & 1);

    }
    else
    {

    }
    goto LABEL_180;
  }
  if (v4 >= 0)
    v7 = v4;
  else
    v7 = v4 + 1;
  if (v4 < -1)
    goto LABEL_214;
  v275 = (void *)v5;
  v276 = v3;
  v260 = v6;
  if (v4 < 2)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v259 = MEMORY[0x1E0DEE9D8];
    if (v4 == 1)
      goto LABEL_12;
    v16 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v15 = a1;
LABEL_167:
    if (v16 >= 2)
    {
      v249 = *v15;
      __srcb = *v15;
      do
      {
        v250 = v16 - 2;
        if (v16 < 2)
          goto LABEL_197;
        if (!v249)
          goto LABEL_211;
        v274 = v11;
        v251 = v11 + 32;
        v5 = *(_QWORD *)&v11[16 * v250 + 32];
        v252 = *(_QWORD *)&v11[16 * v16 + 24];
        v253 = &v249[40 * v5];
        v254 = &v249[40 * *(_QWORD *)&v251[16 * v16 - 16]];
        v255 = (unint64_t)&v249[40 * v252];
        v256 = v275;
        specialized _merge<A>(low:mid:high:buffer:by:)(v253, v254, v255, __dst, v256, a3 & 1);
        if (v276)
          goto LABEL_179;

        if (v252 < v5)
          goto LABEL_198;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v274 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v274);
        if (v250 >= *((_QWORD *)v274 + 2))
          goto LABEL_199;
        v257 = &v274[16 * v250 + 32];
        *(_QWORD *)v257 = v5;
        *((_QWORD *)v257 + 1) = v252;
        v258 = *((_QWORD *)v274 + 2);
        if (v16 > v258)
          goto LABEL_200;
        v11 = v274;
        memmove(&v274[16 * v16 + 16], &v274[16 * v16 + 32], 16 * (v258 - v16));
        *((_QWORD *)v274 + 2) = v258 - 1;
        v16 = v258 - 1;
        v249 = __srcb;
      }
      while (v258 > 2);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v259 + 16) = 0;
    v5 = (uint64_t)v275;

    swift_bridgeObjectRelease();
LABEL_180:

    return;
  }
  v8 = v7 >> 1;
  v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(_QWORD *)(v9 + 16) = v8;
  v259 = v9;
  __dst = (char *)(v9 + 32);
LABEL_12:
  v12 = 0;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEC198];
  v14 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  v15 = a1;
LABEL_15:
  v17 = v12;
  v18 = v4;
  v19 = v12 + 1;
  rect_24 = v18;
  v265 = v12;
  if (v12 + 1 >= v18)
    goto LABEL_71;
  v20 = *v15;
  v21 = v12;
  outlined init with copy of AnyHashable((uint64_t)&(*v15)[40 * v19], (uint64_t)v287);
  rect_16 = v20;
  outlined init with copy of AnyHashable((uint64_t)&v20[40 * v21], (uint64_t)v286);
  v285 = v13;
  v284[0] = swift_allocObject();
  outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
  FormFillingView.frameForFormElement(element:)((uint64_t)v284);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
  v285 = v13;
  v284[0] = swift_allocObject();
  outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
  FormFillingView.frameForFormElement(element:)((uint64_t)v284);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
  rect = v23;
  v289.origin.x = v23;
  v38 = v25;
  v289.origin.y = v25;
  v39 = v27;
  v289.size.width = v27;
  v40 = v29;
  v289.size.height = v29;
  MinY = CGRectGetMinY(v289);
  v290.origin.x = v31;
  v290.origin.y = v33;
  v290.size.width = v35;
  v290.size.height = v37;
  if (MinY != CGRectGetMinY(v290))
  {
    v293.origin.x = rect;
    v293.origin.y = v38;
    v293.size.width = v39;
    v293.size.height = v40;
    MinX = CGRectGetMinY(v293);
    v294.origin.x = v31;
    v294.origin.y = v33;
    v294.size.width = v35;
    v294.size.height = v37;
    v43 = CGRectGetMinY(v294);
    goto LABEL_20;
  }
  v291.origin.x = rect;
  v291.origin.y = v38;
  v291.size.width = v39;
  v291.size.height = v40;
  MinX = CGRectGetMinX(v291);
  v292.origin.x = v31;
  v292.origin.y = v33;
  v292.size.width = v35;
  v292.size.height = v37;
  v43 = CGRectGetMinX(v292);
  if ((a3 & 1) != 0)
  {
LABEL_20:
    v44 = MinX < v43;
    goto LABEL_21;
  }
  v44 = v43 < MinX;
LABEL_21:
  v45 = v44;
  v271 = v45;
  v15 = a1;
  outlined destroy of AnyHashable((uint64_t)v286);
  outlined destroy of AnyHashable((uint64_t)v287);
  v17 = v265;
  v19 = v265 + 2;
  if (v265 + 2 >= rect_24)
    goto LABEL_61;
  v268 = v265 + 2;
  v19 = rect_24;
  v46 = (uint64_t)&v20[40 * v265 + 40];
  while (1)
  {
    outlined init with copy of AnyHashable(v46 + 40, (uint64_t)v287);
    outlined init with copy of AnyHashable(v46, (uint64_t)v286);
    v285 = v13;
    v284[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    type metadata accessor for CanvasElementPDFAnnotation();
    if (!swift_dynamicCast())
      goto LABEL_32;
    v47 = v14;
    v48 = v288;
    v49 = objc_msgSend(v288, (SEL)v47 + 72);
    if (!v49)
    {

      v13 = MEMORY[0x1E0DEC198];
      v14 = v47;
LABEL_32:
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        v63 = v288;
        objc_msgSend(v288, sel_frame);
        v65 = v64;
        v67 = v66;
        v69 = v68;
        v71 = v70;

      }
      else
      {
        v69 = 0.0;
        v71 = 0.0;
        v65 = 0.0;
        v67 = 0.0;
      }
      goto LABEL_37;
    }
    v50 = v49;
    v51 = objc_msgSend(v48, (SEL)v47 + 72);
    if (v51)
    {
      v52 = v51;
      v53 = objc_msgSend(v51, sel_view);
      if (!v53)
        goto LABEL_212;
      v54 = v53;
      objc_msgSend(v48, sel_bounds);
      objc_msgSend(v54, sel_convertRect_fromPage_, v52);
      v56 = v55;
      v58 = v57;
      v60 = v59;
      v62 = v61;

      v15 = a1;
    }
    else
    {
      v56 = 0.0;
      v58 = 0.0;
      v60 = 0.0;
      v62 = 0.0;
    }
    v72 = objc_msgSend(v50, sel_view);
    objc_msgSend((id)v5, sel_convertRect_fromView_, v72, v56, v58, v60, v62);
    v65 = v73;
    v67 = v74;
    v69 = v75;
    v71 = v76;

    v13 = MEMORY[0x1E0DEC198];
    v14 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
LABEL_37:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
    v285 = v13;
    v284[0] = swift_allocObject();
    outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_43;
    v77 = v288;
    v78 = objc_msgSend(v288, v14[173]);
    if (!v78)
    {

      v13 = MEMORY[0x1E0DEC198];
LABEL_43:
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCast())
      {
        v92 = v288;
        objc_msgSend(v288, sel_frame);
        v94 = v93;
        v96 = v95;
        __src = v97;
        v99 = v98;

      }
      else
      {
        __src = 0;
        v99 = 0.0;
        v94 = 0.0;
        v96 = 0.0;
      }
      goto LABEL_48;
    }
    v79 = v78;
    v80 = objc_msgSend(v77, v14[173]);
    if (v80)
    {
      v81 = v80;
      v82 = objc_msgSend(v80, sel_view);
      if (!v82)
        goto LABEL_213;
      v83 = v82;
      objc_msgSend(v77, sel_bounds);
      objc_msgSend(v83, sel_convertRect_fromPage_, v81);
      v85 = v84;
      v87 = v86;
      v89 = v88;
      v91 = v90;

      v15 = a1;
    }
    else
    {
      v85 = 0.0;
      v87 = 0.0;
      v89 = 0.0;
      v91 = 0.0;
    }
    v100 = objc_msgSend(v79, sel_view);
    objc_msgSend((id)v5, sel_convertRect_fromView_, v100, v85, v87, v89, v91);
    v94 = v101;
    v96 = v102;
    __src = v103;
    v99 = v104;

    v13 = MEMORY[0x1E0DEC198];
LABEL_48:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
    v295.origin.x = v65;
    v295.origin.y = v67;
    v295.size.width = v69;
    v295.size.height = v71;
    v105 = v71;
    v106 = v69;
    v107 = CGRectGetMinY(v295);
    v296.origin.x = v94;
    v296.origin.y = v96;
    *(_QWORD *)&v296.size.width = __src;
    v296.size.height = v99;
    if (v107 == CGRectGetMinY(v296))
    {
      v297.origin.x = v65;
      v297.origin.y = v67;
      v297.size.width = v106;
      v297.size.height = v105;
      v108 = CGRectGetMinX(v297);
      v298.origin.x = v94;
      v298.origin.y = v96;
      *(_QWORD *)&v298.size.width = __src;
      v298.size.height = v99;
      v109 = CGRectGetMinX(v298);
      if ((a3 & 1) == 0)
      {
        v110 = v109 < v108;
        goto LABEL_53;
      }
    }
    else
    {
      v299.origin.x = v65;
      v299.origin.y = v67;
      v299.size.width = v106;
      v299.size.height = v105;
      v108 = CGRectGetMinY(v299);
      v300.origin.x = v94;
      v300.origin.y = v96;
      *(_QWORD *)&v300.size.width = __src;
      v300.size.height = v99;
      v109 = CGRectGetMinY(v300);
    }
    v110 = v108 < v109;
LABEL_53:
    v111 = v110;
    outlined destroy of AnyHashable((uint64_t)v286);
    outlined destroy of AnyHashable((uint64_t)v287);
    if (v271 != v111)
      break;
    v46 += 40;
    if (rect_24 == ++v268)
      goto LABEL_60;
  }
  v19 = v268;
LABEL_60:
  v17 = v265;
LABEL_61:
  if (v271)
  {
    if (v19 < v17)
      goto LABEL_203;
    if (v17 < v19)
    {
      v112 = (uint64_t)&rect_16[40 * v19 - 40];
      v113 = &rect_16[40 * v17];
      v114 = v19;
      do
      {
        if (v17 != --v114)
        {
          if (!rect_16)
            goto LABEL_210;
          v115 = *(_OWORD *)v113;
          v116 = *((_OWORD *)v113 + 1);
          v117 = *((_QWORD *)v113 + 4);
          v118 = *(_QWORD *)(v112 + 32);
          v119 = *(_OWORD *)(v112 + 16);
          *(_OWORD *)v113 = *(_OWORD *)v112;
          *((_OWORD *)v113 + 1) = v119;
          *((_QWORD *)v113 + 4) = v118;
          *(_QWORD *)(v112 + 32) = v117;
          *(_OWORD *)v112 = v115;
          *(_OWORD *)(v112 + 16) = v116;
        }
        ++v17;
        v112 -= 40;
        v113 += 40;
      }
      while (v17 < v114);
      v17 = v265;
    }
  }
LABEL_71:
  if (v19 >= rect_24)
    goto LABEL_117;
  if (__OFSUB__(v19, v17))
    goto LABEL_201;
  if (v19 - v17 >= v260)
    goto LABEL_117;
  if (__OFADD__(v17, v260))
    goto LABEL_204;
  v120 = rect_24;
  if (v17 + v260 < rect_24)
    v120 = v17 + v260;
  if (v120 >= v17)
  {
    if (v19 == v120)
      goto LABEL_117;
    v272 = v11;
    v121 = 40 * v19;
    rect_24a = v120;
LABEL_81:
    v122 = v17;
    v269 = v121;
    while (2)
    {
      v123 = (uint64_t)&(*v15)[v121];
      outlined init with copy of AnyHashable(v123, (uint64_t)v287);
      outlined init with copy of AnyHashable(v123 - 40, (uint64_t)v286);
      v285 = v13;
      v284[0] = swift_allocObject();
      outlined init with copy of AnyHashable((uint64_t)v287, v284[0] + 16);
      outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
      type metadata accessor for CanvasElementPDFAnnotation();
      if (swift_dynamicCast())
      {
        v124 = v288;
        v125 = objc_msgSend(v288, sel_page);
        if (v125)
        {
          v126 = v125;
          v127 = objc_msgSend(v124, sel_page);
          if (v127)
          {
            v128 = v127;
            v129 = objc_msgSend(v127, sel_view);
            if (!v129)
              goto LABEL_208;
            v130 = v129;
            objc_msgSend(v124, sel_bounds);
            objc_msgSend(v130, sel_convertRect_fromPage_, v128);
            v132 = v131;
            v134 = v133;
            v136 = v135;
            v138 = v137;

            v15 = a1;
          }
          else
          {
            v132 = 0.0;
            v134 = 0.0;
            v136 = 0.0;
            v138 = 0.0;
          }
          v148 = objc_msgSend(v126, sel_view);
          objc_msgSend((id)v5, sel_convertRect_fromView_, v148, v132, v134, v136, v138);
          v141 = v149;
          v143 = v150;
          v145 = v151;
          v147 = v152;

          v13 = MEMORY[0x1E0DEC198];
LABEL_93:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
          v285 = v13;
          v284[0] = swift_allocObject();
          outlined init with copy of AnyHashable((uint64_t)v286, v284[0] + 16);
          outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v153 = v288;
            v154 = objc_msgSend(v288, sel_page);
            if (v154)
            {
              v155 = v154;
              v156 = objc_msgSend(v153, sel_page);
              if (v156)
              {
                v157 = v156;
                v158 = objc_msgSend(v156, sel_view);
                if (!v158)
                  goto LABEL_207;
                v159 = v158;
                objc_msgSend(v153, sel_bounds);
                objc_msgSend(v159, sel_convertRect_fromPage_, v157);
                v161 = v160;
                v163 = v162;
                v165 = v164;
                v167 = v166;

                v15 = a1;
              }
              else
              {
                v161 = 0.0;
                v163 = 0.0;
                v165 = 0.0;
                v167 = 0.0;
              }
              v176 = objc_msgSend(v155, sel_view);
              objc_msgSend((id)v5, sel_convertRect_fromView_, v176, v161, v163, v165, v167);
              v170 = v177;
              v172 = v178;
              __srca = v179;
              v175 = v180;

LABEL_104:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v284);
              v301.origin.x = v141;
              v301.origin.y = v143;
              v301.size.width = v145;
              v301.size.height = v147;
              v181 = v147;
              v182 = v145;
              v183 = CGRectGetMinY(v301);
              v302.origin.x = v170;
              v302.origin.y = v172;
              *(_QWORD *)&v302.size.width = __srca;
              v302.size.height = v175;
              if (v183 != CGRectGetMinY(v302))
              {
                v305.origin.x = v141;
                v305.origin.y = v143;
                v305.size.width = v182;
                v305.size.height = v181;
                v184 = CGRectGetMinY(v305);
                v306.origin.x = v170;
                v306.origin.y = v172;
                *(_QWORD *)&v306.size.width = __srca;
                v306.size.height = v175;
                v185 = CGRectGetMinY(v306);
LABEL_108:
                v186 = v184 < v185;
                goto LABEL_109;
              }
              v303.origin.x = v141;
              v303.origin.y = v143;
              v303.size.width = v182;
              v303.size.height = v181;
              v184 = CGRectGetMinX(v303);
              v304.origin.x = v170;
              v304.origin.y = v172;
              *(_QWORD *)&v304.size.width = __srca;
              v304.size.height = v175;
              v185 = CGRectGetMinX(v304);
              if ((a3 & 1) != 0)
                goto LABEL_108;
              v186 = v185 < v184;
LABEL_109:
              v187 = v186;
              outlined destroy of AnyHashable((uint64_t)v286);
              outlined destroy of AnyHashable((uint64_t)v287);
              if (v187)
              {
                if (!*v15)
                  goto LABEL_206;
                v188 = (uint64_t)&(*v15)[v121];
                v189 = *(_QWORD *)(v188 + 32);
                v191 = *(_OWORD *)v188;
                v190 = *(_OWORD *)(v188 + 16);
                v192 = *(_OWORD *)(v188 - 24);
                *(_OWORD *)v188 = *(_OWORD *)(v188 - 40);
                *(_OWORD *)(v188 + 16) = v192;
                *(_QWORD *)(v188 + 32) = *(_QWORD *)(v188 - 8);
                *(_OWORD *)(v188 - 40) = v191;
                *(_OWORD *)(v188 - 24) = v190;
                *(_QWORD *)(v188 - 8) = v189;
                v121 -= 40;
                if (v19 != ++v122)
                  continue;
              }
              ++v19;
              v121 = v269 + 40;
              v17 = v265;
              if (v19 != rect_24a)
                goto LABEL_81;
              v19 = rect_24a;
              v11 = v272;
              v14 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
LABEL_117:
              if (v19 < v17)
                goto LABEL_196;
              v270 = v19;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
              v194 = *((_QWORD *)v11 + 2);
              v193 = *((_QWORD *)v11 + 3);
              v16 = v194 + 1;
              v195 = v265;
              if (v194 >= v193 >> 1)
              {
                v248 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v193 > 1), v194 + 1, 1, v11);
                v195 = v265;
                v11 = v248;
              }
              *((_QWORD *)v11 + 2) = v16;
              v196 = v11 + 32;
              v197 = &v11[16 * v194 + 32];
              *(_QWORD *)v197 = v195;
              *((_QWORD *)v197 + 1) = v270;
              if (!v194)
              {
                v16 = 1;
LABEL_14:
                v4 = (Swift::Int)v15[1];
                v12 = v270;
                if (v270 >= v4)
                  goto LABEL_167;
                goto LABEL_15;
              }
              v273 = v11;
              v266 = v11 + 32;
              while (2)
              {
                v198 = v16 - 1;
                if (v16 >= 4)
                {
                  v203 = &v196[16 * v16];
                  v204 = *((_QWORD *)v203 - 8);
                  v205 = *((_QWORD *)v203 - 7);
                  v209 = __OFSUB__(v205, v204);
                  v206 = v205 - v204;
                  if (v209)
                    goto LABEL_185;
                  v208 = *((_QWORD *)v203 - 6);
                  v207 = *((_QWORD *)v203 - 5);
                  v209 = __OFSUB__(v207, v208);
                  v201 = v207 - v208;
                  v202 = v209;
                  if (v209)
                    goto LABEL_186;
                  v210 = v16 - 2;
                  v211 = &v196[16 * v16 - 32];
                  v213 = *(_QWORD *)v211;
                  v212 = *((_QWORD *)v211 + 1);
                  v209 = __OFSUB__(v212, v213);
                  v214 = v212 - v213;
                  if (v209)
                    goto LABEL_188;
                  v209 = __OFADD__(v201, v214);
                  v215 = v201 + v214;
                  if (v209)
                    goto LABEL_191;
                  if (v215 >= v206)
                  {
                    v233 = &v196[16 * v198];
                    v235 = *(_QWORD *)v233;
                    v234 = *((_QWORD *)v233 + 1);
                    v209 = __OFSUB__(v234, v235);
                    v236 = v234 - v235;
                    if (v209)
                      goto LABEL_195;
                    v226 = v201 < v236;
                  }
                  else
                  {
LABEL_137:
                    if ((v202 & 1) != 0)
                      goto LABEL_187;
                    v210 = v16 - 2;
                    v216 = &v196[16 * v16 - 32];
                    v218 = *(_QWORD *)v216;
                    v217 = *((_QWORD *)v216 + 1);
                    v219 = __OFSUB__(v217, v218);
                    v220 = v217 - v218;
                    v221 = v219;
                    if (v219)
                      goto LABEL_190;
                    v222 = &v196[16 * v198];
                    v224 = *(_QWORD *)v222;
                    v223 = *((_QWORD *)v222 + 1);
                    v209 = __OFSUB__(v223, v224);
                    v225 = v223 - v224;
                    if (v209)
                      goto LABEL_193;
                    if (__OFADD__(v220, v225))
                      goto LABEL_194;
                    if (v220 + v225 < v201)
                      goto LABEL_149;
                    v226 = v201 < v225;
                  }
                  if (v226)
                    v198 = v210;
                }
                else
                {
                  if (v16 == 3)
                  {
                    v200 = *((_QWORD *)v11 + 4);
                    v199 = *((_QWORD *)v11 + 5);
                    v209 = __OFSUB__(v199, v200);
                    v201 = v199 - v200;
                    v202 = v209;
                    goto LABEL_137;
                  }
                  v227 = *((_QWORD *)v11 + 4);
                  v228 = *((_QWORD *)v11 + 5);
                  v209 = __OFSUB__(v228, v227);
                  v220 = v228 - v227;
                  v221 = v209;
LABEL_149:
                  if ((v221 & 1) != 0)
                    goto LABEL_189;
                  v229 = &v196[16 * v198];
                  v231 = *(_QWORD *)v229;
                  v230 = *((_QWORD *)v229 + 1);
                  v209 = __OFSUB__(v230, v231);
                  v232 = v230 - v231;
                  if (v209)
                    goto LABEL_192;
                  if (v232 < v220)
                    goto LABEL_14;
                }
                v5 = v198 - 1;
                if (v198 - 1 >= v16)
                {
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
LABEL_191:
                  __break(1u);
LABEL_192:
                  __break(1u);
LABEL_193:
                  __break(1u);
LABEL_194:
                  __break(1u);
LABEL_195:
                  __break(1u);
LABEL_196:
                  __break(1u);
LABEL_197:
                  __break(1u);
LABEL_198:
                  __break(1u);
LABEL_199:
                  __break(1u);
LABEL_200:
                  __break(1u);
LABEL_201:
                  __break(1u);
LABEL_202:
                  __break(1u);
LABEL_203:
                  __break(1u);
LABEL_204:
                  __break(1u);
                  goto LABEL_205;
                }
                v237 = *v15;
                if (!*v15)
                  goto LABEL_209;
                v238 = v196;
                v239 = &v196[16 * v5];
                v240 = *(_QWORD *)v239;
                v241 = v198;
                v242 = &v238[16 * v198];
                v243 = *((_QWORD *)v242 + 1);
                __srcc = &v237[40 * *(_QWORD *)v239];
                v244 = &v237[40 * *(_QWORD *)v242];
                v245 = (unint64_t)&v237[40 * v243];
                v246 = v275;
                specialized _merge<A>(low:mid:high:buffer:by:)(__srcc, v244, v245, __dst, v246, a3 & 1);
                if (v276)
                {
LABEL_179:
                  swift_bridgeObjectRelease();
                  v5 = (uint64_t)v275;

                  *(_QWORD *)(v259 + 16) = 0;
                  swift_bridgeObjectRelease();
                  goto LABEL_180;
                }

                v13 = MEMORY[0x1E0DEC198];
                if (v243 < v240)
                  goto LABEL_182;
                if (v241 > *((_QWORD *)v273 + 2))
                  goto LABEL_183;
                *(_QWORD *)v239 = v240;
                v196 = v266;
                *(_QWORD *)&v266[16 * v5 + 8] = v243;
                v247 = *((_QWORD *)v273 + 2);
                if (v241 >= v247)
                  goto LABEL_184;
                v11 = v273;
                v276 = 0;
                v16 = v247 - 1;
                memmove(v242, v242 + 16, 16 * (v247 - 1 - v241));
                *((_QWORD *)v273 + 2) = v247 - 1;
                v5 = (uint64_t)v275;
                v15 = a1;
                v14 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
                if (v247 <= 2)
                  goto LABEL_14;
                continue;
              }
            }

          }
          outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
          type metadata accessor for AnyCanvasElementView();
          if (swift_dynamicCast())
          {
            v168 = v288;
            objc_msgSend(v288, sel_frame);
            v170 = v169;
            v172 = v171;
            __srca = v173;
            v175 = v174;

          }
          else
          {
            __srca = 0;
            v175 = 0.0;
            v170 = 0.0;
            v172 = 0.0;
          }
          goto LABEL_104;
        }

        v13 = MEMORY[0x1E0DEC198];
      }
      break;
    }
    outlined init with copy of Any((uint64_t)v284, (uint64_t)v283);
    type metadata accessor for AnyCanvasElementView();
    if (swift_dynamicCast())
    {
      v139 = v288;
      objc_msgSend(v288, sel_frame);
      v141 = v140;
      v143 = v142;
      v145 = v144;
      v147 = v146;

    }
    else
    {
      v145 = 0.0;
      v147 = 0.0;
      v141 = 0.0;
      v143 = 0.0;
    }
    goto LABEL_93;
  }
LABEL_205:
  __break(1u);
LABEL_206:

  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:

  __break(1u);
LABEL_210:

  __break(1u);
LABEL_211:

  __break(1u);
LABEL_212:
  __break(1u);
LABEL_213:
  __break(1u);
LABEL_214:

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, void *a2, char a3)
{
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  char *v9[2];

  v5 = *a1;
  v6 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  v7 = *(char **)(v5 + 16);
  v9[0] = (char *)(v5 + 32);
  v9[1] = v7;
  v8 = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v9, v8, a3 & 1);

  *a1 = v5;
}

void specialized FormFillingView.init(coder:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = v0;
  swift_unknownObjectWeakInit();
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView__formFields] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_formFieldGroups] = v2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets] = v2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_tapGesture] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_doubleTapGesture] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_editMenuInteraction] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_preferredInsertionOrder);
  type metadata accessor for AFTextContentType(0);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = 0;
    v7 = v2;
    do
    {
      v8 = *(id *)(v4 + 8 * v6 + 32);
      FormContentType.init(_:)((__C::AFTextContentType)v8);
      v9 = (id)specialized FormContentType.uiTextContentType.getter();

      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      ++v6;
      *(_QWORD *)(v7 + 16) = v11 + 1;
      *(_QWORD *)(v7 + 8 * v11 + 32) = v9;
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_preferredTextContentTypes] = v7;
  v12 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  type metadata accessor for FormPageAnalytics();
  swift_allocObject();
  *(_QWORD *)&v1[v12] = FormPageAnalytics.init()();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t specialized BidirectionalCollection.suffix(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_1DDC9104C()
{
  return 24;
}

__n128 sub_1DDC91058(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDC91074()
{
  return 24;
}

__n128 sub_1DDC91080(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with take of FormAutofillDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FormAutofillDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(a1, *(_QWORD *)(v1 + 16));
}

PaperKit::FormContentType_optional sub_1DDC910F4@<W0>(_BYTE *a1@<X8>)
{
  PaperKit::FormContentType_optional result;
  char v3;

  result.value = Shape.textContentType.getter(&v3).value;
  *a1 = v3;
  return result;
}

uint64_t sub_1DDC9112C(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = 0;
  type metadata accessor for Shape();
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

unint64_t lazy protocol witness table accessor for type AnyHashable? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyHashable?);
    v2 = MEMORY[0x1E0DEC1A0];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEE990], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_1DDC911D0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in FormFillingView.focusNextField(from:direction:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_addControl);
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t sub_1DDC9121C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

UIMenu specialized FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)()
{
  Swift::String v0;
  Swift::String_optional v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  UIMenuElementSize preferredElementSize;
  UIImage_optional v8;
  Swift::String swift__string;

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  swift__string._object = (void *)0x80000001DDF53DE0;
  v0._countAndFlagsBits = 0x41207463656C6553;
  v0._object = (void *)0xEA00000000006C6CLL;
  v1.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  swift__string._countAndFlagsBits = 0xD000000000000016;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, swift__string);
  MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF53E00);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v3 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1DDF35440;
  *(_QWORD *)(v4 + 32) = v3;
  preferredElementSize = v4;
  specialized Array._endMutation()();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v8.value.super.isa = 0;
  v8.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, (Swift::String_optional)0, v8, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

uint64_t sub_1DDC91428()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in FormFillingView.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1);
}

char *SignatureStrokeWidthControl.strokeWidthPreview.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_width);
    v6 = objc_allocWithZone((Class)type metadata accessor for SignatureStrokeWidthPreview());
    v7 = SignatureStrokeWidthPreview.init(width:)(v5);
    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

char *SignatureStrokeWidthControl.init(isHorizontal:width:unit:)(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v4;
  objc_class *ObjectType;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t *v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  void *v18;
  char *v19;
  id v20;
  double v21;
  double v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  Class isa;
  uint64_t v38;
  id v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  void *v44;
  uint64_t v45;
  double v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  char *result;
  char *v53;
  id v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  char *v69;
  id v70;
  double v71;
  uint64_t *v72;
  id v73;
  char *v74;
  id v75;
  id v76;
  id v77;
  char *v78;
  id v79;
  id v80;
  id v81;
  char *v82;
  id v83;
  id v84;
  id v85;
  char *v86;
  id v87;
  id v88;
  Class v89;
  id v90;
  char v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  objc_super v95;

  ObjectType = (objc_class *)swift_getObjectType();
  v10 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  v11 = objc_allocWithZone(MEMORY[0x1E0DC3990]);
  v12 = v4;
  *(_QWORD *)&v4[v10] = objc_msgSend(v11, sel_init);
  *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth] = 0x4057800000000000;
  *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth] = 0x4036000000000000;
  *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_width] = a2;
  v13 = (uint64_t *)&v12[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_unit];
  *v13 = a3;
  v13[1] = (uint64_t)a4;
  swift_bridgeObjectRetain();

  v95.receiver = v12;
  v95.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v95, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v15 = objc_allocWithZone(MEMORY[0x1E0DC3F10]);
  v16 = (char *)v14;
  v17 = objc_msgSend(v15, sel_init);
  objc_msgSend(v17, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v17, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v18 = *(void **)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v18)
  {
    v19 = *(char **)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  }
  else
  {
    v19 = v16;
    v18 = 0;
  }
  v20 = v18;
  objc_msgSend(v19, sel_addSubview_, v17);

  if ((a1 & 1) != 0)
    v21 = 18.0;
  else
    v21 = 12.0;
  if ((a1 & 1) != 0)
    v22 = 20.0;
  else
    v22 = 15.0;
  v23 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1DDF329D0;
  v25 = objc_msgSend(v17, sel_topAnchor);
  v91 = a1;
  v26 = objc_msgSend(v16, sel_topAnchor);
  v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v26, 0.0);

  *(_QWORD *)(v24 + 32) = v27;
  v28 = objc_msgSend(v17, sel_leadingAnchor);
  v29 = objc_msgSend(v16, sel_leadingAnchor);
  v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_constant_, v29, v21);

  *(_QWORD *)(v24 + 40) = v30;
  v31 = objc_msgSend(v17, sel_bottomAnchor);
  v32 = objc_msgSend(v16, sel_bottomAnchor);
  v33 = objc_msgSend(v31, sel_constraintEqualToAnchor_constant_, v32, -0.0);

  *(_QWORD *)(v24 + 48) = v33;
  v34 = objc_msgSend(v17, sel_trailingAnchor);
  v35 = objc_msgSend(v16, sel_trailingAnchor);
  v36 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v35, -v22);

  *(_QWORD *)(v24 + 56) = v36;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v92 = v23;
  objc_msgSend(v23, sel_activateConstraints_, isa);

  v38 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  v39 = *(id *)&v16[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel];
  v93 = dispatch thunk of CustomStringConvertible.description.getter();
  v94 = v40;
  v41._countAndFlagsBits = 32;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = a3;
  v42._object = a4;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43 = (void *)MEMORY[0x1DF0E41AC](v93, v94);
  swift_bridgeObjectRelease();
  objc_msgSend(v39, sel_setText_, v43);

  v44 = *(void **)&v16[v38];
  v45 = *MEMORY[0x1E0DC4B10];
  v46 = *MEMORY[0x1E0DC1448];
  v47 = (void *)*MEMORY[0x1E0DC4920];
  v48 = (void *)objc_opt_self();
  v49 = v44;
  v50 = v47;
  v51 = objc_msgSend(v48, sel_traitCollectionWithPreferredContentSizeCategory_, v50);
  result = (char *)objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v45, v46);
  if (result)
  {
    v53 = result;
    v54 = objc_msgSend(result, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v51);

    objc_msgSend(v49, sel_setFont_, v54);
    v55 = *(void **)&v16[v38];
    objc_msgSend(v55, sel_setNumberOfLines_, 1);
    objc_msgSend(v55, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v17, sel_addSubview_, v55);
    v56 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    objc_msgSend(v56, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

    v57 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    objc_msgSend(v17, sel_addSubview_, v57);

    v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_1DDF31350;
    v59 = objc_msgSend(*(id *)&v16[v38], sel_topAnchor);
    v60 = objc_msgSend(v17, sel_topAnchor);
    v61 = objc_msgSend(v59, sel_constraintEqualToAnchor_, v60);

    *(_QWORD *)(v58 + 32) = v61;
    v62 = objc_msgSend(*(id *)&v16[v38], sel_leadingAnchor);
    v63 = objc_msgSend(v17, sel_leadingAnchor);
    v64 = objc_msgSend(v62, (SEL)&selRef_setData_withArchivedModelData_ + 6, v63);

    *(_QWORD *)(v58 + 40) = v64;
    v65 = objc_msgSend(*(id *)&v16[v38], sel_bottomAnchor);
    v66 = objc_msgSend(v17, sel_bottomAnchor);
    v67 = objc_msgSend(v65, (SEL)&selRef_setData_withArchivedModelData_ + 6, v66);

    *(_QWORD *)(v58 + 48) = v67;
    v68 = objc_msgSend(*(id *)&v16[v38], sel_trailingAnchor);
    v69 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    v70 = objc_msgSend(v69, sel_leadingAnchor);

    v71 = 6.0;
    if ((v91 & 1) != 0)
    {
      v71 = 10.0;
      v72 = &OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth;
    }
    else
    {
      v72 = &OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth;
    }
    v73 = objc_msgSend(v68, sel_constraintLessThanOrEqualToAnchor_constant_, v70, v71);

    *(_QWORD *)(v58 + 56) = v73;
    v74 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    v75 = objc_msgSend(v74, sel_topAnchor);

    v76 = objc_msgSend(v17, sel_topAnchor);
    v77 = objc_msgSend(v75, sel_constraintEqualToAnchor_, v76);

    *(_QWORD *)(v58 + 64) = v77;
    v78 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    v79 = objc_msgSend(v78, sel_bottomAnchor);

    v80 = objc_msgSend(v17, sel_bottomAnchor);
    v81 = objc_msgSend(v79, sel_constraintEqualToAnchor_, v80);

    *(_QWORD *)(v58 + 72) = v81;
    v82 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    v83 = objc_msgSend(v82, sel_trailingAnchor);

    v84 = objc_msgSend(v17, sel_trailingAnchor);
    v85 = objc_msgSend(v83, sel_constraintEqualToAnchor_, v84);

    *(_QWORD *)(v58 + 80) = v85;
    v86 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
    v87 = objc_msgSend(v86, sel_widthAnchor);

    v88 = objc_msgSend(v87, sel_constraintEqualToConstant_, *(double *)&v16[*v72]);
    *(_QWORD *)(v58 + 88) = v88;
    specialized Array._endMutation()();
    v89 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v92, sel_activateConstraints_, v89);

    v90 = objc_msgSend(v16, sel_layer);
    objc_msgSend(v90, sel_setCornerCurve_, *MEMORY[0x1E0CD2A68]);

    SignatureStrokeWidthControl.updateUI()();
    return v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void SignatureStrokeWidthControl.updateUI()()
{
  char *v0;
  objc_class *ObjectType;
  objc_class *v2;
  void *v3;
  id v4;
  char **v5;
  id v6;
  void *v7;
  char **v8;
  id v9;
  char *v10;
  char **v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  objc_super v16;
  objc_super v17;
  objc_super v18;
  objc_super v19;
  objc_super v20;
  objc_super v21;
  objc_super v22;
  objc_super v23;
  objc_super v24;
  objc_super v25;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = ObjectType;
  v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v3)
  {
    v25.receiver = v0;
    v25.super_class = ObjectType;
    v4 = v3;
    objc_msgSend(v4, sel_setEnabled_, objc_msgSendSuper2(&v25, sel_isEnabled));

  }
  v24.receiver = v0;
  v24.super_class = v2;
  if (objc_msgSendSuper2(&v24, sel_isEnabled))
  {
    v17.receiver = v0;
    v17.super_class = v2;
    v5 = &selRef_systemBlueColor;
    if ((objc_msgSendSuper2(&v17, sel_isSelected) & 1) == 0)
    {
      v16.receiver = v0;
      v16.super_class = v2;
      if (!objc_msgSendSuper2(&v16, sel_isHighlighted))
        v5 = &selRef_tertiarySystemFillColor;
    }
  }
  else
  {
    v5 = &selRef_quaternarySystemFillColor;
  }
  v6 = objc_msgSend((id)objc_opt_self(), *v5);
  objc_msgSend(v0, sel_setBackgroundColor_, v6);

  v7 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel];
  v23.receiver = v0;
  v23.super_class = v2;
  if (objc_msgSendSuper2(&v23, sel_isEnabled))
  {
    v19.receiver = v0;
    v19.super_class = v2;
    v8 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v19, sel_isSelected) & 1) == 0)
    {
      v18.receiver = v0;
      v18.super_class = v2;
      if (!objc_msgSendSuper2(&v18, sel_isHighlighted))
        v8 = &selRef_secondaryLabelColor;
    }
  }
  else
  {
    v8 = &selRef_tertiaryLabelColor;
  }
  v9 = objc_msgSend((id)objc_opt_self(), *v8);
  objc_msgSend(v7, sel_setTextColor_, v9);

  v10 = SignatureStrokeWidthControl.strokeWidthPreview.getter();
  v22.receiver = v0;
  v22.super_class = v2;
  if (objc_msgSendSuper2(&v22, sel_isEnabled))
  {
    v21.receiver = v0;
    v21.super_class = v2;
    v11 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v21, sel_isSelected) & 1) == 0)
    {
      v20.receiver = v0;
      v20.super_class = v2;
      if (!objc_msgSendSuper2(&v20, sel_isHighlighted))
        v11 = &selRef_labelColor;
    }
  }
  else
  {
    v11 = &selRef_tertiaryLabelColor;
  }
  v12 = objc_msgSend((id)objc_opt_self(), *v11);
  v13 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  v14 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor];
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor] = v12;
  v15 = v12;

  objc_msgSend(*(id *)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview], sel_setBackgroundColor_, *(_QWORD *)&v10[v13]);
}

Swift::Void __swiftcall SignatureStrokeWidthControl.layoutSubviews()()
{
  char *v0;
  double v1;
  id v2;
  void *v3;
  id v4;
  objc_super v5;
  CGRect v6;

  v5.receiver = v0;
  v5.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v5, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  v1 = CGRectGetHeight(v6) * 0.5;
  v2 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v2, sel_setCornerRadius_, v1);

  v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton];
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_layer);
    objc_msgSend(v4, sel_setCornerRadius_, v1);

  }
}

void @objc SignatureStrokeWidthControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  const char *v6;
  id v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  v6 = *a4;
  v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  SignatureStrokeWidthControl.updateUI()();

}

uint64_t type metadata accessor for SignatureStrokeWidthControl()
{
  return objc_opt_self();
}

void specialized SignatureStrokeWidthControl.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_valueLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewLargeWidth] = 0x4057800000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_strokePreviewShortWidth] = 0x4036000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthControl_contentButton] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *SignatureStrokeWidthPreview.init(width:)(uint64_t a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  Class isa;
  objc_super v29;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3F10]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight] = 0x3FF0000000000000;
  v8 = &v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  *(_QWORD *)&v7[v9] = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_width] = a1;

  v29.receiver = v7;
  v29.super_class = ObjectType;
  v10 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v11 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  v12 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview];
  v13 = v10;
  objc_msgSend(v13, sel_addSubview_, v12);
  objc_msgSend(v12, sel_setClipsToBounds_, 1);
  objc_msgSend(v12, sel_setUserInteractionEnabled_, 0);
  objc_msgSend(v12, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v14 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1DDF329D0;
  v16 = objc_msgSend(v12, sel_centerXAnchor);
  v17 = objc_msgSend(v13, sel_centerXAnchor);
  v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(_QWORD *)(v15 + 32) = v18;
  v19 = objc_msgSend(*(id *)&v10[v11], sel_centerYAnchor);
  v20 = objc_msgSend(v13, sel_centerYAnchor);
  v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(_QWORD *)(v15 + 40) = v21;
  v22 = objc_msgSend(*(id *)&v10[v11], sel_widthAnchor);
  v23 = objc_msgSend(v13, sel_widthAnchor);
  v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_, v23);

  *(_QWORD *)(v15 + 48) = v24;
  v25 = objc_msgSend(*(id *)&v10[v11], sel_heightAnchor);
  v26 = objc_msgSend(v25, sel_constraintEqualToConstant_, SignatureStrokeWidthPreview.strokePreviewHeightConstant.getter());

  *(_QWORD *)(v15 + 56) = v26;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  objc_msgSend(*(id *)&v10[v11], sel_setBackgroundColor_, *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor]);
  return v13;
}

double SignatureStrokeWidthPreview.strokePreviewHeightConstant.getter()
{
  uint64_t v0;
  _BYTE *v1;
  double result;

  v1 = (_BYTE *)(v0
               + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant);
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant
                 + 8) & 1) == 0)
    return *(double *)v1;
  result = *(double *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight)
         * (double)*(uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_width);
  *(double *)v1 = result;
  v1[8] = 0;
  return result;
}

uint64_t type metadata accessor for SignatureStrokeWidthPreview()
{
  return objc_opt_self();
}

void specialized SignatureStrokeWidthPreview.init(coder:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeHeight] = 0x3FF0000000000000;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview____lazy_storage___strokePreviewHeightConstant];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  *(_QWORD *)&v0[v3] = objc_msgSend((id)objc_opt_self(), sel_labelColor);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for PDFAnnotationElementLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC92AE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PDFAnnotationElementLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC92B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PDFAnnotationElementLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PDFAnnotationElementLayout;
  if (!type metadata singleton initialization cache for PDFAnnotationElementLayout)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type Shape and conformance Shape()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Shape and conformance Shape;
  if (!lazy protocol witness table cache variable for type Shape and conformance Shape)
  {
    v1 = type metadata accessor for Shape();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shape, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape);
  }
  return result;
}

unint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  type metadata accessor for PasswordManager();
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 24) = result;
  static PasswordManager.shared = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  type metadata accessor for ImageThumbnailManager();
  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncCache<Data, CGImageRef>);
  v1 = swift_allocObject();
  swift_defaultActor_initialize();
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v1 + 112) = result;
  *(_QWORD *)(v1 + 120) = 10;
  *(_QWORD *)(v0 + 112) = v1;
  static ImageThumbnailManager.shared = v0;
  return result;
}

uint64_t closure #1 in PasswordManager.password(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = CRAsset.digest.getter();
  v6 = v5;
  swift_beginAccess();
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6), (v9 & 1) != 0))
  {
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 16 * v8);
    v12 = *v10;
    v11 = v10[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  outlined consume of Data._Representation(v4, v6);
  *a2 = v12;
  a2[1] = v11;
  return swift_endAccess();
}

uint64_t closure #1 in PasswordManager.add(password:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v7 = CRAsset.digest.getter();
  v9 = v8;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a4, v7, v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v7, v9);
  return swift_endAccess();
}

uint64_t closure #1 in PasswordManager.clear(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;

  v7 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  LOBYTE(a3) = v9;
  swift_bridgeObjectRelease();
  v10 = 0;
  v11 = 0;
  if ((a3 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v7;
    v16 = *v7;
    *v7 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v13 = v16;
    }
    outlined consume of Data._Representation(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8), *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v8 + 8));
    v14 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v8);
    v10 = *v14;
    v11 = v14[1];
    specialized _NativeDictionary._delete(at:)(v8, v13);
    *v7 = v13;
    swift_bridgeObjectRelease();
  }
  *a4 = v10;
  a4[1] = v11;
  return swift_endAccess();
}

uint64_t PasswordManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PasswordManager()
{
  return objc_opt_self();
}

uint64_t ValueSlider.currentValue.getter()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue + 8) != 1)
    return *(_QWORD *)v1;
  result = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue);
  *(_QWORD *)v1 = result;
  v1[8] = 0;
  return result;
}

char *ValueSlider.init(minValue:maxValue:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  objc_class *ObjectType;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  Class isa;
  uint64_t v33;
  void *v34;
  double v35;
  double v36;
  id v37;
  void *v38;
  void *v39;
  void *v40;
  double v41;
  objc_super v44;

  v3 = v2;
  ObjectType = (objc_class *)swift_getObjectType();
  v7 = OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC3F10]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);
  v10 = OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView;
  *(_QWORD *)&v9[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  v11 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  *(_QWORD *)&v9[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C80]), sel_init);
  v12 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  *(_QWORD *)&v9[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing] = 0x4020000000000000;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_minimumContentSizeHeight] = 0x4049000000000000;
  v13 = &v9[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue] = a2;

  v44.receiver = v9;
  v44.super_class = ObjectType;
  v14 = (char *)objc_msgSendSuper2(&v44, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v15 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView];
  v17 = v14;
  objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v16, sel_setAxis_, 0);
  objc_msgSend(v16, sel_setAlignment_, 0);
  objc_msgSend(v16, sel_setDistribution_, 0);
  objc_msgSend(v16, sel_setSpacing_, *(double *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing]);
  objc_msgSend(v17, sel_addSubview_, v16);
  v18 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1DDF329D0;
  v20 = objc_msgSend(v16, sel_topAnchor);
  v21 = objc_msgSend(v17, sel_topAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v19 + 32) = v22;
  v23 = objc_msgSend(*(id *)&v14[v15], sel_leadingAnchor);
  v24 = objc_msgSend(v17, sel_leadingAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(_QWORD *)(v19 + 40) = v25;
  v26 = objc_msgSend(*(id *)&v14[v15], sel_bottomAnchor);
  v27 = objc_msgSend(v17, sel_bottomAnchor);
  v28 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v19 + 48) = v28;
  v29 = objc_msgSend(*(id *)&v14[v15], sel_trailingAnchor);
  v30 = objc_msgSend(v17, sel_trailingAnchor);
  v31 = objc_msgSend(v29, sel_constraintEqualToAnchor_, v30);

  *(_QWORD *)(v19 + 56) = v31;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_activateConstraints_, isa);

  objc_msgSend(*(id *)&v14[v15], sel_addArrangedSubview_, *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView]);
  v33 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  v34 = *(void **)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider];
  *(float *)&v35 = (float)a1;
  objc_msgSend(v34, sel_setMinimumValue_, v35);
  *(float *)&v36 = (float)a2;
  objc_msgSend(v34, sel_setMaximumValue_, v36);
  v37 = v34;
  v38 = (void *)MEMORY[0x1DF0E41AC](0x696C5365756C6176, 0xEC00000072656464);
  objc_msgSend(v37, sel_setAccessibilityIdentifier_, v38);

  v39 = *(void **)&v14[v15];
  v40 = *(void **)&v17[v33];
  objc_msgSend(v39, sel_addArrangedSubview_, v40);
  objc_msgSend(v39, sel_addArrangedSubview_, *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView]);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didChangeSlider, 4096);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didStartChangingSlider, 1);
  objc_msgSend(v40, sel_addTarget_action_forControlEvents_, v17, sel_didFinishChangingSlider, 448);
  *(float *)&v41 = (float)ValueSlider.currentValue.getter();
  objc_msgSend(v40, sel_setValue_, v41);

  return v17;
}

id ValueSlider.didChangeSlider()()
{
  char *v0;
  id result;
  float v2;
  float v3;
  uint64_t v4;
  char *v5;

  result = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_slider], sel_value);
  v3 = roundf(v2);
  if ((~LODWORD(v3) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v3 <= -9.2234e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= 9.2234e18)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v4 = (uint64_t)v3;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue] > (uint64_t)v3)
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minValue];
  if (v4 >= *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue])
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_maxValue];
  v5 = &v0[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(_QWORD *)v5 = v4;
  v5[8] = 0;
  return objc_msgSend(v0, sel_sendActionsForControlEvents_, 4096);
}

uint64_t type metadata accessor for ValueSlider()
{
  return objc_opt_self();
}

void specialized ValueSlider.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  v2 = OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  v3 = OBJC_IVAR____TtC8PaperKit11ValueSlider_slider;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3C80]), sel_init);
  v4 = OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackView;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_contentStackViewSpacing] = 0x4020000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit11ValueSlider_minimumContentSizeHeight] = 0x4049000000000000;
  v5 = &v0[OBJC_IVAR____TtC8PaperKit11ValueSlider____lazy_storage___currentValue];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.drawingViewClassForPaper()()
{
  type metadata accessor for PaperTextAttachmentView();
  return swift_getObjCClassFromMetadata();
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.tiledViewClassForPaper()()
{
  type metadata accessor for TiledTextView();
  return swift_getObjCClassFromMetadata();
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.inlineDrawingViewClassForPaper()()
{
  type metadata accessor for InlineDrawingTextAttachmentView();
  return swift_getObjCClassFromMetadata();
}

uint64_t @objc static PKTextAttachmentDrawingViewProvider.inlineDrawingTiledViewClassForPaper()()
{
  type metadata accessor for InlineDrawingTiledTextView();
  return swift_getObjCClassFromMetadata();
}

_QWORD *GraphLayout.createView<A>(in:canvas:parent:)(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v37;
  double v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  id v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void (*v51)(char *, uint64_t);
  _QWORD v53[3];
  id v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v53[2] = a5;
  v53[1] = a4;
  v58 = a3;
  v54 = a1;
  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v56 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v57 = (char *)v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v55 = (char *)v53 - v22;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)v53 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v5, v7, v25);
  v28 = type metadata accessor for GraphElement();
  v29 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<GraphElement> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v59 = v28;
  v60 = v29;
  v61 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  v54 = v58;
  v30 = a2;
  Capsule<>.subscript.getter();
  swift_release();
  x = v62.origin.x;
  y = v62.origin.y;
  width = v62.size.width;
  height = v62.size.height;
  MinX = CGRectGetMinX(v62);
  v63.origin.x = x;
  v63.origin.y = y;
  v63.size.width = width;
  v63.size.height = height;
  MinY = CGRectGetMinY(v63);
  v64.origin.x = x;
  v64.origin.y = y;
  v64.size.width = width;
  v64.size.height = height;
  v37 = CGRectGetWidth(v64);
  v65.origin.x = x;
  v65.origin.y = y;
  v65.size.width = width;
  v65.size.height = height;
  v38 = CGRectGetHeight(v65);
  v40 = v55;
  v39 = v56;
  v41 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  v41(v55, v27, v17);
  v42 = (char *)objc_allocWithZone((Class)type metadata accessor for GraphCanvasElementView(0));
  *(_QWORD *)&v42[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState] = 0;
  *(_QWORD *)&v42[direct field offset for GraphCanvasElementView.graphViewController] = 0;
  v43 = direct field offset for GraphCanvasElementView.expressionIdentifierToId;
  v44 = v42;
  *(_QWORD *)&v42[v43] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  v45 = (uint64_t)v57;
  v41(v57, v40, v17);
  v46 = v30;
  v47 = v54;
  v48 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(v45, a2, v58, MinX, MinY, v37, v38);

  v49 = v48;
  v50 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000026, 0x80000001DDF54190);
  objc_msgSend(v49, sel_setAccessibilityIdentifier_, v50);

  v51 = *(void (**)(char *, uint64_t))(v39 + 8);
  v51(v40, v17);

  v51(v27, v17);
  return v49;
}

uint64_t closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, unint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, void (*a8)(_QWORD), uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v41;
  double v42;
  char *v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[2];
  void (*v51)(_QWORD);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  _OWORD v58[2];
  char v59;

  v54 = a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v55 = *(_QWORD *)(v16 - 8);
  v56 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v53 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for GraphableExpression();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v52 = (uint64_t)v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GraphableExpression?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)v50 - v33;
  v37 = MEMORY[0x1E0C80A78](v35, v36);
  v39 = (char *)v50 - v38;
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v24 + 56);
  v40((char *)v50 - v38, 1, 1, v23, v37);
  if (a2 >> 60 != 15)
  {
    v50[1] = a9;
    v51 = a8;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    outlined copy of Data._Representation(v54, a2);
    JSONDecoder.init()();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for GraphableExpression?);
    swift_release();
    outlined consume of Data?(v54, a2);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v34, 0, 1, v23);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v34, (uint64_t)v39, &demangling cache variable for type metadata for GraphableExpression?);
    a8 = v51;
  }
  outlined init with copy of GraphableExpression?((uint64_t)v39, (uint64_t)v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v30, 1, v23) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for GraphableExpression?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v22, 1, 1, v56);
    a8(v22);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  }
  else
  {
    v41 = v52;
    outlined init with take of GraphableExpression((uint64_t)v30, v52);
    v42 = specialized static GraphElement.defaultVisibleRange.getter();
    memset(v58, 0, sizeof(v58));
    v59 = 1;
    v57 = 9;
    v43 = v53;
    static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(v41, (uint64_t)v58, &v57, 0, 0, 1, v42, v44, v45, v46, a3, a4, a5, a6, 0.0);
    v48 = v55;
    v47 = v56;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v22, v43, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v22, 0, 1, v47);
    a8(v22);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Capsule<GraphElement>?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v47);
    outlined destroy of PKStrokeProperties(v41, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
  }
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for GraphableExpression?);
}

uint64_t outlined init with copy of GraphableExpression?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GraphableExpression?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, char a6, double a7, double a8, double a9, double a10, CGFloat a11, CGFloat a12, CGFloat a13, CGFloat a14, double a15)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  __int128 v38;
  double y;
  double v40;
  double v41;
  double v42;
  double v43;
  double x;
  double v45;
  double width;
  double height;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  uint64_t v57;
  double v58;
  _QWORD v59[4];
  char v60;
  __C::CGRect v61;
  __C::CGRect v62;

  v55 = a13;
  v56 = a14;
  v54 = a12;
  v57 = a1;
  v27 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v27, v28);
  v29 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v54 - v35;
  v37 = *a3;
  if (one-time initialization token for defaultGraphSize != -1)
    swift_once();
  v38 = static UIConstants.defaultGraphSize;
  outlined init with take of (key: Int, value: AnyCRValue)?(a2, (uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  y = 0.0;
  if ((v60 & 1) != 0)
  {
    v40 = *(double *)&v38 * -0.5 + 384.0;
    v42 = *((double *)&v38 + 1);
    v41 = *(double *)&v38;
    v43 = 0.0;
  }
  else
  {
    v40 = *(double *)v59;
    v43 = *(double *)&v59[1];
    v41 = *(double *)&v59[2];
    v42 = *(double *)&v59[3];
  }
  x = 0.0;
  if ((~*(_QWORD *)&v40 & 0x7FF0000000000000) != 0)
  {
    y = (*(_QWORD *)&v43 & 0x7FF0000000000000) == 0x7FF0000000000000 ? 0.0 : v43;
    if ((*(_QWORD *)&v43 & 0x7FF0000000000000) != 0x7FF0000000000000)
      x = v40;
  }
  v45 = v41;
  if ((*(_QWORD *)&v42 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    v41 = *(double *)&v38;
    v42 = *((double *)&v38 + 1);
  }
  if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) != 0)
    width = v41;
  else
    width = *(double *)&v38;
  if ((~*(_QWORD *)&v45 & 0x7FF0000000000000) != 0)
    height = v42;
  else
    height = *((double *)&v38 + 1);
  if (v37 != 9)
  {
    LOBYTE(v58) = v37;
    v61.origin.x = a11;
    v61.origin.y = v54;
    v61.size.width = v55;
    v61.size.height = v56;
    v62 = CGRect.position(in:anchor:)(v61, (PaperKit::LayoutAnchor)&v58);
    x = v62.origin.x;
    y = v62.origin.y;
    width = v62.size.width;
    height = v62.size.height;
  }
  v48 = *(double *)&a4;
  v49 = *(double *)&a5;
  if ((a6 & 1) != 0)
    v49 = -0.0;
  v50 = v49 + y;
  if ((a6 & 1) != 0)
    v48 = -0.0;
  GraphElement.init(frame:visibleRange:rotation:)((uint64_t)v36, v48 + x, v50, width, height, a7, a8, a9, a10, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  if (v58 != a15)
  {
    v58 = a15;
    CRRegister.wrappedValue.setter();
  }
  outlined init with copy of PKStrokeProperties((uint64_t)v36, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v51 = Capsule<>.init(_:id:)();
  MEMORY[0x1E0C80A78](v51, v52);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  Capsule.callAsFunction<A>(_:)();
  return outlined destroy of PKStrokeProperties((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
}

uint64_t closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v19[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
  v16 = type metadata accessor for CRKeyPath();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v17 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v17(v19, 0);
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
}

id protocol witness for static Layout.canHandle(itemProvider:) in conformance GraphLayout(void *a1)
{
  void *v2;
  id v3;

  v2 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF4E930);
  v3 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v2);

  return v3;
}

uint64_t partial apply for closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static GraphLayout.create(_:visibleRange:canvasFrame:frame:rotation:anchor:offset:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t getEnumTagSinglePayload for GraphLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC94694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for GraphLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDC946DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GraphLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GraphLayout;
  if (!type metadata singleton initialization cache for GraphLayout)
    return swift_getSingletonMetadata();
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in GraphLayout()
{
  return &protocol witness table for GraphElement;
}

unint64_t lazy protocol witness table accessor for type Ref<GraphElement> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<GraphElement> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_1DDC947B8()
{
  return 24;
}

__n128 sub_1DDC947C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void ToolPickerController.handleSqueezeInteractionDidChangePaletteViewVisibilityNotification(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, ObjectType, v2);
    swift_unknownObjectRelease();
    if (v4)
    {
      v5 = objc_msgSend((id)objc_opt_self(), sel__existingInteractionForWindowScene_, v4);
      if (v5)
      {
        v9 = v5;
        if (!objc_msgSend(v5, sel__paletteViewVisible))
        {

          v8 = v9;
LABEL_11:

          return;
        }
        if (MEMORY[0x1DF0E666C](v1))
        {
          v6 = *(_QWORD *)(v1 + 8);
          v7 = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v0, v7, v6);

          swift_unknownObjectRelease();
        }
        else
        {

        }
      }
      v8 = v4;
      goto LABEL_11;
    }
  }
}

void ToolPickerController.toolPickerWillShowNotification(_:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  id v6;
  _BYTE v7[24];
  uint64_t v8;

  v1 = v0;
  Notification.object.getter();
  if (v8)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPicker);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = objc_msgSend(v6, sel__annotationDelegate);
      swift_unknownObjectRelease();
      if (v2
        || (v3 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate,
            !MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate)))
      {

      }
      else
      {
        v4 = *(_QWORD *)(v3 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(v4 + 16))(v1, v6, ObjectType, v4);

        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
}

char *ToolPickerController.textToolListViewController.getter()
{
  return ToolPickerController.textToolListViewController.getter(&OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController, (void (*)(_QWORD))type metadata accessor for TextToolListViewController, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate, (uint64_t)&protocol witness table for ToolPickerController);
}

char *ToolPickerController.shapeButtonListViewController.getter()
{
  return ToolPickerController.textToolListViewController.getter(&OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController, (void (*)(_QWORD))type metadata accessor for ShapeListViewController, &OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate, (uint64_t)&protocol witness table for ToolPickerController);
}

char *ToolPickerController.textToolListViewController.getter(uint64_t *a1, void (*a2)(_QWORD), _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  char *v10;
  void *v11;
  id v12;

  v5 = *a1;
  v6 = *(void **)(v4 + *a1);
  if (v6)
  {
    v7 = *(char **)(v4 + *a1);
  }
  else
  {
    a2(0);
    v10 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    *(_QWORD *)&v10[*a3 + 8] = a4;
    swift_unknownObjectWeakAssign();
    v11 = *(void **)(v4 + v5);
    *(_QWORD *)(v4 + v5) = v10;
    v7 = v10;

    v6 = 0;
  }
  v12 = v6;
  return v7;
}

void closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
    v7 = MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
    v8 = *(_QWORD *)(v6 + 8);

    if (v7)
    {
      ObjectType = swift_getObjectType();
      ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1, ObjectType, v8);
      swift_unknownObjectRelease();
    }
  }
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;

  v13 = a1 + 16;
  swift_beginAccess();
  v14 = MEMORY[0x1DF0E666C](v13);
  if (v14)
  {
    v15 = (char *)v14;
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC4420]), sel_init);
    v17 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC];
    *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = v16;
    v18 = v16;

    objc_msgSend(v18, sel_setDelegate_, v15);
    v19 = objc_msgSend(v18, sel_view);
    if (v19)
    {
      v20 = v19;
      objc_msgSend(v19, sel_setUserInteractionEnabled_, 0);

      objc_msgSend(v18, sel_setSourceView_, a2);
      objc_msgSend(v18, sel_setSourceRect_, a4, a5, a6, a7);
      objc_msgSend(a3, sel_presentViewController_animated_completion_, v18, 1, 0);

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1, void *a2, uint64_t a3, uint64_t a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v16;

  if (one-time initialization token for shared != -1)
    swift_once();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = a4;
  swift_unknownObjectRetain();
  specialized SignatureManager.showSignatures(_:_:_:_:)(a1, a2, (uint64_t)partial apply for closure #1 in closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:), v16, a5, a6, a7, a8);
  return swift_release();
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectDescriptionWithEvent:)()
{
  ToolPickerController.showImageDescriptionViewController()();
}

Swift::Void __swiftcall ToolPickerController.showImageDescriptionViewController()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  uint64_t countAndFlagsBits;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  Swift::String v21;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 40))(v0, ObjectType, v2);
    if (v4)
    {
      v19 = (id)v4;
      v5 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
      if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC))
      {
        swift_unknownObjectRelease();
        v6 = v19;
      }
      else
      {
        v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF4930]), sel_initWithContentSnapshot_, 0);
        v8 = *(void **)(v0 + v5);
        *(_QWORD *)(v0 + v5) = v7;
        v9 = v7;

        v10 = one-time initialization token for paperKitBundle;
        v20 = v9;
        if (v10 != -1)
          swift_once();
        v21._countAndFlagsBits = 0xD00000000000002CLL;
        v21._object = (void *)0x80000001DDF54290;
        v11._object = (void *)0x80000001DDF4F620;
        v11._countAndFlagsBits = 0xD000000000000011;
        v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v12.value._object = (void *)0xEB00000000656C62;
        v13._countAndFlagsBits = 0;
        v13._object = (void *)0xE000000000000000;
        countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v21)._countAndFlagsBits;
        v15 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v20, sel_setTitle_, v15);

        objc_msgSend(v20, sel_setModalPresentationStyle_, 2);
        objc_msgSend(v20, sel_setModalInPresentation_, 0);
        objc_msgSend(v20, sel_setDelegate_, v0);
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(ObjectType, v2);
        if (v17)
        {
          v18 = (void *)MEMORY[0x1DF0E41AC](v16);
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = 0;
        }
        objc_msgSend(v20, sel_setImageDescription_, v18);

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8))(v0, 1, ObjectType, v2);
        objc_msgSend(v19, sel_presentViewController_animated_completion_, v20, 1, 0);
        swift_unknownObjectRelease();

        v6 = v20;
      }

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  result = MEMORY[0x1DF0E666C](a1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
  if (result)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(11, ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(uint64_t a1, uint64_t a2, Class isa, uint64_t a4, char a5, void *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  char *v28;
  char *v29;
  id v30;
  char *v31;
  id v32;
  char *v33;
  id v34;
  char *v35;
  id v36;
  char *v37;
  id v38;
  char *v39;
  id v40;
  char *v41;
  unsigned __int8 v42;
  char *v43;
  unsigned __int8 v44;
  char *v45;

  v28 = ToolPickerController.shapeButtonListViewController.getter();
  objc_msgSend(v28, sel_setModalPresentationStyle_, 7);

  v29 = ToolPickerController.shapeButtonListViewController.getter();
  v30 = objc_msgSend(v29, sel_popoverPresentationController);

  if (v30)
  {
    objc_msgSend(v30, sel_setDelegate_, a1);

  }
  v31 = ToolPickerController.shapeButtonListViewController.getter();
  v32 = objc_msgSend(v31, sel_popoverPresentationController);

  objc_msgSend(v32, sel_setSourceView_, a2);
  v33 = ToolPickerController.shapeButtonListViewController.getter();
  v34 = objc_msgSend(v33, sel_popoverPresentationController);

  objc_msgSend(v34, sel_setSourceRect_, a7, a8, a9, a10);
  v35 = ToolPickerController.shapeButtonListViewController.getter();
  v36 = objc_msgSend(v35, sel_popoverPresentationController);

  if (v36)
  {
    if (isa)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      isa = Array._bridgeToObjectiveC()().super.isa;
    }
    objc_msgSend(v36, sel_setPassthroughViews_, isa);

  }
  v37 = ToolPickerController.shapeButtonListViewController.getter();
  v38 = objc_msgSend(v37, sel_popoverPresentationController);

  objc_msgSend(v38, sel_setPopoverLayoutMargins_, a11, a12, a13, a14);
  if ((a5 & 1) == 0)
  {
    v39 = ToolPickerController.shapeButtonListViewController.getter();
    v40 = objc_msgSend(v39, sel_popoverPresentationController);

    objc_msgSend(v40, sel_setPermittedArrowDirections_, a4);
  }
  v41 = ToolPickerController.shapeButtonListViewController.getter();
  v42 = objc_msgSend(v41, sel_isBeingPresented);

  if ((v42 & 1) == 0)
  {
    v43 = ToolPickerController.shapeButtonListViewController.getter();
    v44 = objc_msgSend(v43, sel_isBeingDismissed);

    if ((v44 & 1) == 0)
    {
      v45 = ToolPickerController.shapeButtonListViewController.getter();
      objc_msgSend(a6, sel_presentViewController_animated_completion_, v45, 1, 0);

    }
  }
}

Swift::Void __swiftcall ToolPickerController.stickerPickerViewControllerDidDismiss()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  id v5;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC) = 0;

  v2 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v5 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v0, ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      objc_msgSend(v5, sel_becomeFirstResponder);

    }
  }
}

id ToolPickerController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ToolPickerController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ToolPickerController()
{
  return objc_opt_self();
}

void ToolPickerController.imageDescriptionViewControllerDidSave(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;

  v2 = v1;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v3)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    v5 = a1;
    v6 = v3;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
    {
      v7 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        v8 = *(_QWORD *)(v7 + 8);
        v9 = objc_msgSend(v5, sel_imageDescription);
        if (v9)
        {
          v10 = v9;
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v13 = v12;

        }
        else
        {
          v11 = 0;
          v13 = 0;
        }
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 128))(v11, v13, ObjectType, v8);
        swift_unknownObjectRelease();
      }
      ToolPickerController._dissmissImageDescriptionViewController()();
    }
  }
}

Swift::Void __swiftcall ToolPickerController._dissmissImageDescriptionViewController()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  _QWORD v11[6];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x1DF0E666C](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v1, ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = v5;
      v11[4] = closure #1 in ToolPickerController._dissmissImageDescriptionViewController()partial apply;
      v11[5] = v7;
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 1107296256;
      v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v11[3] = &block_descriptor_40;
      v8 = _Block_copy(v11);
      v9 = v5;
      swift_release();
      objc_msgSend(v9, sel_dismissViewControllerAnimated_completion_, 1, v8);
      _Block_release(v8);
      v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC) = 0;

    }
  }
}

void ToolPickerController.imageDescriptionViewControllerDidCancel(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v17[6];

  v2 = v1;
  v3 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v4)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    v6 = a1;
    v7 = v4;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
    {
      v8 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        v9 = *(_QWORD *)(v8 + 8);
        ObjectType = swift_getObjectType();
        v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 40))(v2, ObjectType, v9);
        swift_unknownObjectRelease();
        if (v11)
        {
          v12 = swift_allocObject();
          swift_unknownObjectWeakInit();
          v13 = swift_allocObject();
          *(_QWORD *)(v13 + 16) = v12;
          *(_QWORD *)(v13 + 24) = v11;
          v17[4] = partial apply for closure #1 in ToolPickerController._dissmissImageDescriptionViewController();
          v17[5] = v13;
          v17[0] = MEMORY[0x1E0C809B0];
          v17[1] = 1107296256;
          v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v17[3] = &block_descriptor_32_2;
          v14 = _Block_copy(v17);
          v15 = v11;
          swift_release();
          objc_msgSend(v15, sel_dismissViewControllerAnimated_completion_, 1, v14);
          _Block_release(v14);
          v16 = *(void **)(v2 + v3);
          *(_QWORD *)(v2 + v3) = 0;

        }
      }
    }
  }
}

void ToolPickerController.imageDescriptionViewControllerDidDismiss(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v2 = v1;
  v3 = OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC;
  v4 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC);
  if (v4)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for AXSSImageDescriptionViewController);
    v6 = a1;
    v7 = v4;
    LOBYTE(a1) = static NSObject.== infix(_:_:)();

    if ((a1 & 1) != 0)
    {
      v8 = *(void **)(v2 + v3);
      *(_QWORD *)(v2 + v3) = 0;

      v9 = v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
      if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
      {
        v10 = *(_QWORD *)(v9 + 8);
        ObjectType = swift_getObjectType();
        v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v2, ObjectType, v10);
        swift_unknownObjectRelease();
        if (v14)
        {
          if (MEMORY[0x1DF0E666C](v9))
          {
            v12 = *(_QWORD *)(v9 + 8);
            v13 = swift_getObjectType();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 8))(v2, 0, v13, v12);
            swift_unknownObjectRelease();
          }
          objc_msgSend(v14, sel_becomeFirstResponder);

        }
      }
    }
  }
}

void closure #1 in ToolPickerController._dissmissImageDescriptionViewController()(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
    if (MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate))
    {
      v7 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 8))(v5, 0, ObjectType, v7);
      swift_unknownObjectRelease();
    }
    objc_msgSend(a2, sel_becomeFirstResponder);

  }
}

void specialized ToolPickerController.toolPickerDidHideNotification(_:)()
{
  id v0;
  id v1;
  _BYTE v2[24];
  uint64_t v3;

  Notification.object.getter();
  if (v3)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPicker);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v0 = objc_msgSend(v1, sel__annotationDelegate);
      swift_unknownObjectRelease();

    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v2);
  }
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[6];

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  if (MEMORY[0x1DF0E666C](v4))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v2, ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC), sel_dismissCard);
      v8 = objc_msgSend(a1, sel_popoverPresentationController);
      v9 = objc_msgSend(v8, sel_sourceView);

      v10 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_sourceRect);
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0;
        v13 = 0;
        v15 = 0;
      }
      v20 = objc_msgSend(a1, sel_presentingViewController);
      if (!v20)
        v20 = v7;
      v21 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = v21;
      v22[3] = v9;
      v22[4] = v13;
      v22[5] = v15;
      v22[6] = v17;
      v22[7] = v19;
      v22[8] = v20;
      v26[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:);
      v26[5] = v22;
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 1107296256;
      v26[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v26[3] = &block_descriptor_33;
      v23 = _Block_copy(v26);
      v24 = v9;
      v25 = v20;
      swift_release();
      objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v23);
      _Block_release(v23);

    }
  }
}

uint64_t sub_1DDC961EC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDC96210()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)()
{
  uint64_t v0;

  closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddStickerWithEvent:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 64), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56));
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[6];

  v3 = v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate;
  v4 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, ObjectType, v6);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = objc_msgSend(a1, sel_popoverPresentationController);
      v11 = objc_msgSend(v10, sel_sourceView);

      v12 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, sel_sourceRect);
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v21 = v20;

        if (v11)
        {
LABEL_5:
          v22 = (_QWORD *)swift_allocObject();
          v22[2] = v9;
          v22[3] = v11;
          v22[4] = v15;
          v22[5] = v17;
          v22[6] = v19;
          v22[7] = v21;
          v22[8] = v5;
          v22[9] = v6;
          v26[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:);
          v26[5] = v22;
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 1107296256;
          v26[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v26[3] = &block_descriptor_22_0;
          v23 = _Block_copy(v26);
          v24 = v9;
          v25 = v11;
          swift_unknownObjectRetain();
          swift_release();
          objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 0, v23);
          _Block_release(v23);
          swift_unknownObjectRelease();

          return;
        }
      }
      else
      {
        v19 = 0;
        v21 = 0;
        v15 = 0;
        v17 = 0;
        if (v11)
          goto LABEL_5;
      }

    }
    swift_unknownObjectRelease();
  }
}

uint64_t specialized ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  _QWORD v10[6];

  v3 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
  result = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]);
  if (result)
  {
    v5 = result;
    v6 = *((_QWORD *)v3 + 1);
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v1;
    v10[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:);
    v10[5] = v7;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v10[3] = &block_descriptor_10_1;
    v8 = _Block_copy(v10);
    swift_unknownObjectRetain();
    v9 = v1;
    swift_release();
    objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v8);
    _Block_release(v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1DDC96568()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectOpacityWithEvent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 112))(v2, ObjectType, v1);
}

void specialized ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(void *a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  void *v37;
  char *v38;
  id v39;
  id v40;
  _QWORD v41[6];

  v3 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
  if (MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]))
  {
    v4 = *((_QWORD *)v3 + 1);
    ObjectType = swift_getObjectType();
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 40))(v1, ObjectType, v4);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = objc_msgSend(a1, sel_popoverPresentationController);
      v9 = objc_msgSend(v8, sel_sourceView);

      v10 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_sourceRect);
        v13 = v12;
        v15 = v14;
        v17 = v16;
        v19 = v18;

      }
      else
      {
        v17 = 0;
        v19 = 0;
        v13 = 0;
        v15 = 0;
      }
      v20 = objc_msgSend(a1, sel_popoverPresentationController);
      v21 = v20;
      if (v20)
      {
        v22 = objc_msgSend(v20, sel_passthroughViews);

        if (v22)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          v21 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

        }
        else
        {
          v21 = 0;
        }
      }
      v23 = objc_msgSend(a1, sel_popoverPresentationController);
      if (v23)
      {
        v24 = v23;
        objc_msgSend(v23, sel_popoverLayoutMargins);
        v26 = v25;
        v28 = v27;
        v30 = v29;
        v32 = v31;

      }
      else
      {
        v26 = *MEMORY[0x1E0DC49E8];
        v28 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 8);
        v30 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 16);
        v32 = *(_QWORD *)(MEMORY[0x1E0DC49E8] + 24);
      }
      v33 = objc_msgSend(a1, sel_popoverPresentationController);
      v34 = v33;
      if (v33)
      {
        v35 = objc_msgSend(v33, sel_permittedArrowDirections);

      }
      else
      {
        v35 = 0;
      }
      v36 = swift_allocObject();
      *(_QWORD *)(v36 + 16) = v1;
      *(_QWORD *)(v36 + 24) = v9;
      *(_QWORD *)(v36 + 32) = v13;
      *(_QWORD *)(v36 + 40) = v15;
      *(_QWORD *)(v36 + 48) = v17;
      *(_QWORD *)(v36 + 56) = v19;
      *(_QWORD *)(v36 + 64) = v21;
      *(_QWORD *)(v36 + 72) = v26;
      *(_QWORD *)(v36 + 80) = v28;
      *(_QWORD *)(v36 + 88) = v30;
      *(_QWORD *)(v36 + 96) = v32;
      *(_QWORD *)(v36 + 104) = v35;
      *(_BYTE *)(v36 + 112) = v34 == 0;
      *(_QWORD *)(v36 + 120) = v7;
      v41[4] = partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:);
      v41[5] = v36;
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 1107296256;
      v41[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v41[3] = &block_descriptor_16_0;
      v37 = _Block_copy(v41);
      v38 = v1;
      v39 = v9;
      v40 = v7;
      swift_release();
      objc_msgSend(a1, sel_dismissViewControllerAnimated_completion_, 1, v37);
      _Block_release(v37);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1DDC96908()
{
  id *v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)()
{
  uint64_t v0;

  closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddShapeWithEvent:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(Class *)(v0 + 64), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112), *(void **)(v0 + 120), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
}

uint64_t sub_1DDC9696C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)()
{
  uint64_t v0;

  return closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48), *(CGFloat *)(v0 + 56));
}

uint64_t sub_1DDC969B4()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddSignatureWithEvent:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType();
  ToolPickerControllerDelegate.addNewSignatureItem(_:)(a1, ObjectType, v3);
}

void partial apply for closure #1 in ToolPickerController._dissmissImageDescriptionViewController()()
{
  uint64_t v0;

  closure #1 in ToolPickerController._dissmissImageDescriptionViewController()(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1DDC96A58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t CRTextStorage.merge(string:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char *v72;
  id v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  NSDictionary v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char *v88;
  id v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  NSDictionary v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t result;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  void (*v132)(char *, char *, uint64_t);
  char *v133;
  void (*v134)(char *, uint64_t);
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v137 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v140 = *(_QWORD *)(v2 - 8);
  v141 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v142 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v10, v11);
  v116 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v115 = (char *)&v113 - v15;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v16);
  v119 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v128 = *(_QWORD *)(v143 - 8);
  MEMORY[0x1E0C80A78](v143, v18);
  v139 = (char *)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v118 = (char *)&v113 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v138 = (char *)&v113 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
  MEMORY[0x1E0C80A78](v26, v27);
  v136 = (char *)&v113 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v114 = (uint64_t)&v113 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v131 = (char *)&v113 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v129 = (char *)&v113 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v122 = (char *)&v113 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v113 - v44;
  MEMORY[0x1E0C80A78](v46, v47);
  v49 = (char *)&v113 - v48;
  v123 = v1;
  v50 = &v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  v51 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v51(v49, v50, v32);
  swift_beginAccess();
  CRAttributedString.merge(_:)();
  swift_endAccess();
  v132 = v51;
  v133 = v50;
  v51(v45, v50, v32);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>();
  v52 = v114;
  v113 = v49;
  v53 = (uint64_t)v136;
  CRType.observableDifference(from:)();
  v54 = *(void (**)(char *, uint64_t))(v33 + 8);
  v130 = v32;
  v134 = v54;
  v54(v45, v32);
  outlined init with copy of CRAttributedString<TextAttributeScope>.ObservableDifference?(v52, v53);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v53, 1, v55) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
    v57 = 0;
    v58 = v130;
    goto LABEL_44;
  }
  v59 = CRAttributedString.ObservableDifference.edits.getter();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v55);
  v58 = v130;
  if (!*(_QWORD *)(v59 + 16))
  {
    swift_bridgeObjectRelease();
    v57 = 0;
    goto LABEL_44;
  }
  v60 = v123;
  objc_msgSend(v123, sel_beginEditing);
  v61 = *(_QWORD *)(v59 + 16);
  if (v61)
  {
    v126 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
    v117 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
    v127 = (uint64_t *)(v59 + 32);
    swift_bridgeObjectRetain();
    v62 = 0;
    v136 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
    v63 = v131;
    v125 = v59;
    v124 = v61;
    while (1)
    {
      if (v62 >= *(_QWORD *)(v59 + 16))
        goto LABEL_47;
      v135 = v62;
      v67 = &v127[4 * v62];
      v68 = *v67;
      v69 = v67[1];
      if ((v67[3] & 1) != 0)
      {
        objc_msgSend(v60, sel_edited_range_changeInLength_, 1, v68, v69, 0);
        v132(v63, v133, v58);
        v70 = v68 + v69;
        if (__OFADD__(v68, v69))
          goto LABEL_48;
        if (v70 < v68)
          goto LABEL_50;
        v65 = v63;
        if (v68 == v70)
          goto LABEL_9;
        v71 = *(void **)&v60[v126];
        LODWORD(v137) = v60[v117];
        v72 = v63;
        v73 = v71;
        v74 = v119;
        CRAttributedString.subscript.getter();
        v75 = v118;
        v76 = v121;
        CRAttributedString.Substring.runs.getter();
        (*(void (**)(char *, uint64_t))(v120 + 8))(v74, v76);
        v77 = v139;
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v139, v75, v143);
        v78 = v116;
        CRAttributedString.Runs.next()();
        v79 = v142;
        v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48);
        if (v80(v78, 1, v6) != 1)
        {
          v60 = *(char **)(v79 + 32);
          while (1)
          {
            ((void (*)(char *, char *, uint64_t))v60)(v9, v78, v6);
            CRAttributedString.Runs.Run.attributes.getter();
            CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v137);
            (*(void (**)(char *, uint64_t))(v140 + 8))(v5, v141);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            v81.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v82 = CRAttributedString.Runs.Run.range.getter();
            v83 = CRAttributedString.Runs.Run.range.getter();
            if (__OFSUB__(v84, v83))
              break;
            objc_msgSend(v73, sel_setAttributes_range_, v81.super.isa, v82, v84 - v83);

            (*(void (**)(char *, uint64_t))(v142 + 8))(v9, v6);
            CRAttributedString.Runs.next()();
            if (v80(v78, 1, v6) == 1)
            {
              v64 = v139;
              v65 = v131;
              goto LABEL_7;
            }
          }
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        v64 = v77;
        v65 = v72;
LABEL_7:
        v60 = v123;
      }
      else
      {
        v85 = v67[2];
        objc_msgSend(v60, sel_edited_range_changeInLength_, 2, v68, v69, v85);
        v86 = v69 + v85;
        if (__OFADD__(v69, v85))
          goto LABEL_49;
        v87 = *(void **)&v60[v126];
        v88 = v122;
        v132(v122, v133, v58);
        v89 = v87;
        v60 = (char *)CRAttributedString.attributedString.getter();
        v134(v88, v58);
        v90 = objc_msgSend(v60, sel_string);

        if (!v90)
          goto LABEL_58;
        v91 = objc_msgSend(v90, sel_substringWithRange_, v68, v86);

        if (!v91)
        {
          v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v91 = (id)MEMORY[0x1DF0E41AC](v92);
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v89, sel_replaceCharactersInRange_withString_, v68, v69, v91);

        v65 = v129;
        v58 = v130;
        v132(v129, v133, v130);
        v93 = v68 + v86;
        v60 = v123;
        if (__OFADD__(v68, v86))
          goto LABEL_51;
        if (v93 < v68)
          goto LABEL_52;
        v63 = v131;
        if (v68 == v93)
          goto LABEL_9;
        v94 = *(void **)&v123[v126];
        LODWORD(v137) = v123[v117];
        v73 = v94;
        v95 = v119;
        CRAttributedString.subscript.getter();
        v96 = v118;
        v97 = v121;
        CRAttributedString.Substring.runs.getter();
        (*(void (**)(char *, uint64_t))(v120 + 8))(v95, v97);
        v98 = v138;
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v138, v96, v143);
        v99 = v115;
        CRAttributedString.Runs.next()();
        v100 = v142;
        v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v142 + 48);
        if (v101(v99, 1, v6) != 1)
        {
          v60 = *(char **)(v100 + 32);
          while (1)
          {
            ((void (*)(char *, char *, uint64_t))v60)(v9, v99, v6);
            CRAttributedString.Runs.Run.attributes.getter();
            CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v137);
            (*(void (**)(char *, uint64_t))(v140 + 8))(v5, v141);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            v102.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v103 = CRAttributedString.Runs.Run.range.getter();
            v104 = CRAttributedString.Runs.Run.range.getter();
            if (__OFSUB__(v105, v104))
              goto LABEL_46;
            objc_msgSend(v73, sel_setAttributes_range_, v102.super.isa, v103, v105 - v104);

            (*(void (**)(char *, uint64_t))(v142 + 8))(v9, v6);
            CRAttributedString.Runs.next()();
            if (v101(v99, 1, v6) == 1)
            {
              v64 = v138;
              v65 = v129;
              goto LABEL_7;
            }
          }
        }
        v64 = v98;
        v65 = v129;
      }
      (*(void (**)(char *, uint64_t))(v128 + 8))(v64, v143);

      v58 = v130;
      v63 = v131;
LABEL_9:
      v62 = v135 + 1;
      v134(v65, v58);
      v66 = v124;
      v59 = v125;
      if (v62 == v124)
      {
        swift_bridgeObjectRelease();
        objc_msgSend(v60, sel_endEditing);
        v106 = *(_QWORD *)(v59 + 16);
        if (!v106)
          goto LABEL_53;
        if (v66 > v106)
        {
LABEL_54:
          __break(1u);
        }
        else
        {
          v57 = *v127;
          v107 = *(_QWORD *)(v59 + 40);
          v108 = (uint64_t *)(v59 + 32 * v66);
          v109 = *v108;
          v110 = v108[1];
          swift_bridgeObjectRelease();
          v111 = v57 + v107;
          if (!__OFADD__(v57, v107))
          {
            if (!__OFADD__(v109, v110))
            {
              if (v111 <= v109 + v110)
                v111 = v109 + v110;
              if (v57 >= v109)
                v57 = v109;
              if (!__OFSUB__(v111, v57))
              {
LABEL_44:
                outlined destroy of StocksKitCurrencyCache.Provider?(v114, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
                v134(v113, v58);
                return v57;
              }
LABEL_57:
              __break(1u);
LABEL_58:
              swift_bridgeObjectRelease();
              __break(1u);
              break;
            }
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
        }
        __break(1u);
        goto LABEL_56;
      }
    }
  }
  objc_msgSend(v60, sel_endEditing);
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id CRTextStorage.init(_:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  objc_class *ObjectType;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  objc_super v13;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = 0;
  v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] = 0;
  v5 = &v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  v8 = v2;
  v9 = specialized static CRTextStorage.viewAttributedString(from:darkMode:)(a1, 0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString] = v9;
  v10 = v9;
  objc_msgSend(v10, sel_fixAttributesInRange_, 0, objc_msgSend(v10, sel_length));

  v13.receiver = v8;
  v13.super_class = ObjectType;
  v11 = objc_msgSendSuper2(&v13, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v11;
}

id CRTextStorage.init()()
{
  _BYTE *v0;
  _BYTE *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  id v10;
  uint64_t v12;
  objc_super v13;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = 0;
  v1[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] = 0;
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  v8 = v1;
  CRAttributedString.init()();
  v9 = &v8[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v8[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString], v7, v3);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  v10 = specialized static CRTextStorage.viewAttributedString(from:darkMode:)((uint64_t)v7, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  *(_QWORD *)&v8[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString] = v10;

  v13.receiver = v8;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

Swift::Void __swiftcall CRTextStorage.replaceCharacters(in:with:)(__C::_NSRange in, Swift::String with)
{
  _BYTE *v2;
  unint64_t object;
  uint64_t countAndFlagsBits;
  Swift::Int length;
  Swift::Int location;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  Swift::Int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  id v29;
  char *v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;

  object = (unint64_t)with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  length = in.length;
  location = in.location;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  MEMORY[0x1E0C80A78](v12, v13);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (__OFADD__(location, length))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (location + length < location)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v35 = v17;
  v36 = v11;
  v37 = v15;
  v38 = v8;
  v39 = v14;
  v18 = v2;
  v19 = &v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  CRAttributedString.replaceSubrange(_:with:)();
  swift_endAccess();
  v20 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
  v21 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
  v22 = MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
  v23 = length;
  v24 = (void *)v22;
  v40 = v23;
  objc_msgSend(v21, sel_replaceCharactersInRange_withString_, location);

  v25 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v25 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    v26 = *(void **)&v2[v20];
    v27 = v38;
    v28 = v36;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v36, v19, v7);
    v29 = v26;
    v30 = v35;
    CRAttributedString.attributes(at:effectiveRange:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v7);
    CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v18[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode]);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v39);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_setAttributes_range_, isa, location, v32);

  }
  swift_bridgeObjectRetain();
  v33 = String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  if (!__OFSUB__(v33, v40))
  {
    objc_msgSend(v18, sel_edited_range_changeInLength_, 2, location, v40, v33 - v40);
    return;
  }
LABEL_11:
  __break(1u);
}

Swift::Void __swiftcall CRTextStorage.setAttributes(_:range:)(Swift::OpaquePointer_optional _, __C::_NSRange range)
{
  _BYTE *v2;
  _BYTE *v3;
  Swift::Int location;
  uint64_t v5;
  void *rawValue;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  NSDictionary v13;
  id v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  location = range.location;
  v5 = *(_QWORD *)&_.is_nil;
  rawValue = _.value._rawValue;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
  if (rawValue)
  {
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    v12 = v11;
    v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v14 = v11;
    v13.super.isa = 0;
  }
  objc_msgSend(v11, sel_setAttributes_range_, v13.super.isa, v5, location);

  if ((v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_isFixingAttributes] & 1) == 0)
  {
    if (rawValue)
      v15 = (unint64_t)rawValue;
    else
      v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v16 = v3[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode];
    swift_bridgeObjectRetain();
    CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v15, v16);
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v10, 0, 1, v17);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    CRAttributedString.setAttributes(_:range:)();
    swift_endAccess();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  }
  objc_msgSend(v3, sel_edited_range_changeInLength_, 1, v5, location, 0);
}

id CRTextStorage.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  char *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  id result;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  void *v49;
  id v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  NSDictionary v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;

  v81 = a6;
  v78 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v79 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v82 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v23);
  v64 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v74 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v25);
  v63 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v83 = (char *)&v59 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v68 = *(_QWORD *)(v30 - 8);
  v69 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v67 = (char *)&v59 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = v6;
  v33 = &v6[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
  swift_beginAccess();
  v34 = a2;
  v35 = v33;
  v36 = CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(a1, v34, a3, a4, v78, v81);
  result = (id)swift_endAccess();
  v73 = v36[2];
  if (!v73)
    return (id)swift_bridgeObjectRelease();
  v38 = 0;
  v62 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString;
  v61 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
  v72 = v36 + 4;
  v78 = (_QWORD *)(MEMORY[0x1E0DEE9B8] + 8);
  v40 = v68;
  v39 = v69;
  v41 = v67;
  v60 = v33;
  v71 = v36;
  while (v38 < v36[2])
  {
    v77 = v38;
    v45 = &v72[2 * v38];
    v42 = *v45;
    v46 = v45[1];
    result = (id)(*(uint64_t (**)(char *, char *, uint64_t))(v40 + 16))(v41, v35, v39);
    v76 = v46;
    v47 = __OFADD__(v42, v46);
    v48 = v42 + v46;
    if (v47)
      goto LABEL_17;
    if (v48 < v42)
      goto LABEL_18;
    if (v42 != v48)
    {
      v49 = *(void **)&v75[v62];
      LODWORD(v81) = v75[v61];
      v50 = v49;
      v51 = v64;
      v70 = v42;
      CRAttributedString.subscript.getter();
      v52 = v63;
      v53 = v66;
      CRAttributedString.Substring.runs.getter();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v53);
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v83, v52, v84);
      CRAttributedString.Runs.next()();
      v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48);
      if (v54(v22, 1, v15) != 1)
      {
        v55 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
        while (1)
        {
          v55(v18, v22, v15);
          CRAttributedString.Runs.Run.attributes.getter();
          CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v81);
          (*(void (**)(char *, uint64_t))(v79 + 8))(v14, v80);
          type metadata accessor for NSAttributedStringKey(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
          v56.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v57 = CRAttributedString.Runs.Run.range.getter();
          result = (id)CRAttributedString.Runs.Run.range.getter();
          if (__OFSUB__(v58, result))
            break;
          objc_msgSend(v50, sel_setAttributes_range_, v56.super.isa, v57, v58 - (_QWORD)result);

          (*(void (**)(char *, uint64_t))(v82 + 8))(v18, v15);
          CRAttributedString.Runs.next()();
          if (v54(v22, 1, v15) == 1)
            goto LABEL_3;
        }
        __break(1u);
        break;
      }
LABEL_3:
      (*(void (**)(char *, uint64_t))(v74 + 8))(v83, v84);

      v40 = v68;
      v39 = v69;
      v41 = v67;
      v35 = v60;
      v42 = v70;
    }
    v43 = v77 + 1;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v39);
    result = objc_msgSend(v75, sel_edited_range_changeInLength_, 1, v42, v76, 0);
    v38 = v43;
    v44 = v43 == v73;
    v36 = v71;
    if (v44)
      return (id)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void @objc CRTextStorage.init(fileURL:options:documentAttributes:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v0, v1);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ObjC metadata update function for CRTextStorage()
{
  return type metadata accessor for CRTextStorage();
}

uint64_t type metadata accessor for CRTextStorage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CRTextStorage;
  if (!type metadata singleton initialization cache for CRTextStorage)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for CRTextStorage()
{
  unint64_t v0;

  type metadata accessor for CRAttributedString<TextAttributeScope>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void type metadata accessor for CRAttributedString<TextAttributeScope>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>)
  {
    lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
    v0 = type metadata accessor for CRAttributedString();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  }
}

id specialized static CRTextStorage.viewAttributedString(from:darkMode:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t);
  char v21;
  NSDictionary v22;
  uint64_t v23;
  id result;
  uint64_t v25;
  _BYTE v26[12];
  int v27;
  uint64_t v28;
  unsigned int (*v29)(_BYTE *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _BYTE *v34;
  uint64_t v35;

  v27 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v30 = *(_QWORD *)(v2 - 8);
  v31 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v26[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v28 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v26[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v19 = (void *)CRAttributedString.attributedString.getter();
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3778]), sel_initWithAttributedString_, v19);

  CRAttributedString.runs.getter();
  v34 = v18;
  v35 = v15;
  CRAttributedString.Runs.next()();
  v32 = v7;
  v29 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  if (v29(v14, 1, v6) == 1)
  {
LABEL_5:
    (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v34, v35);
    return v33;
  }
  else
  {
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32);
    v21 = v27 & 1;
    while (1)
    {
      v20(v10, v14, v6);
      CRAttributedString.Runs.Run.attributes.getter();
      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v21);
      (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v5, v31);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
      v22.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v23 = CRAttributedString.Runs.Run.range.getter();
      result = (id)CRAttributedString.Runs.Run.range.getter();
      if (__OFSUB__(v25, result))
        break;
      objc_msgSend(v33, sel_setAttributes_range_, v22.super.isa, v23, v25 - (_QWORD)result);

      (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v10, v6);
      CRAttributedString.Runs.next()();
      if (v29(v14, 1, v6) == 1)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

void specialized static CRTextStorage.setAttributes(from:into:range:darkMode:)(unsigned int (*a1)(_BYTE *, uint64_t, uint64_t), void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD, _QWORD, _QWORD);
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  NSDictionary v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v45)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;

  v41 = a5;
  v47 = a2;
  v45 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v40[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = &v40[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v43 = *(_QWORD *)(v20 - 8);
  v44 = (void (*)(_QWORD, _QWORD, _QWORD))v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = &v40[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = &v40[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v28, v29);
  if (a3 != a4)
  {
    v46 = &v40[-v30];
    v42 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    CRAttributedString.subscript.getter();
    v32 = v44;
    CRAttributedString.Substring.runs.getter();
    (*(void (**)(_BYTE *, void (*)(_QWORD, _QWORD, _QWORD)))(v43 + 8))(v23, v32);
    v33 = v46;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v42 + 32))(v46, v27, v24);
    CRAttributedString.Runs.next()();
    v45 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
    if (v45(v19, 1, v11) == 1)
    {
LABEL_6:
      (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v33, v24);
    }
    else
    {
      v44 = *(void (**)(_QWORD, _QWORD, _QWORD))(v12 + 32);
      LODWORD(v43) = v41 & 1;
      while (1)
      {
        v34 = v24;
        v35 = v12;
        v44(v15, v19, v11);
        CRAttributedString.Runs.Run.attributes.getter();
        CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v43);
        (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v10, v49);
        type metadata accessor for NSAttributedStringKey(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
        v36.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v37 = CRAttributedString.Runs.Run.range.getter();
        v38 = CRAttributedString.Runs.Run.range.getter();
        if (__OFSUB__(v39, v38))
          break;
        objc_msgSend(v47, sel_setAttributes_range_, v36.super.isa, v37, v39 - v38);

        v12 = v35;
        (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v15, v11);
        v24 = v34;
        v33 = v46;
        CRAttributedString.Runs.next()();
        if (v45(v19, 1, v11) == 1)
          goto LABEL_6;
      }
      __break(1u);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>;
  if (!lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12598], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope> and conformance CRAttributedString<A>);
  }
  return result;
}

uint64_t outlined init with copy of CRAttributedString<TextAttributeScope>.ObservableDifference?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.ObservableDifference?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of LinkItem.delegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LinkItem.delegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of LinkItem.delegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LinkItem.targetURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LinkItem.title.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of LinkItem.subtitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of LinkItem.icon.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of LinkItem.dataRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of LinkItem.loadPreviewIfNeeded()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of LinkItemDelegate.linkItemDidUpdatePreview(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit17FormAnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit17fgh4OSo8i36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5j100OIegnrzr_TR03_s8a5Kit13cd35C13sendEventLazy3key7payloadyAA0cD4e10O_SDyAHSo8f31CGyXAtFSDySSAJGSgycfU_Q24_AJtAH_X5XEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  id result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return (id)v2;
  v30 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v30;
  result = (id)specialized Dictionary.startIndex.getter(a1);
  v6 = (uint64_t)result;
  v7 = 0;
  v8 = a1 + 64;
  v24 = v1;
  v25 = v5;
  v26 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v27 = v7;
    v12 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v13 = FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v6));
    v28 = v14;
    v29 = v13;
    v16 = *(_QWORD *)(v30 + 16);
    v15 = *(_QWORD *)(v30 + 24);
    result = v12;
    v17 = result;
    if (v16 >= v15 >> 1)
      result = (id)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
    *(_QWORD *)(v30 + 16) = v16 + 1;
    v18 = (_QWORD *)(v30 + 24 * v16);
    v18[4] = v29;
    v18[5] = v28;
    v18[6] = v17;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v19 = *(_QWORD *)(v26 + 8 * v11);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v25;
    if (*(_DWORD *)(a1 + 36) != v25)
      goto LABEL_27;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v9 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v24;
    }
    else
    {
      v21 = v11 + 1;
      v22 = (unint64_t)(v9 + 63) >> 6;
      v10 = v24;
      if (v11 + 1 < v22)
      {
        v23 = *(_QWORD *)(v26 + 8 * v21);
        if (v23)
        {
LABEL_20:
          v9 = __clz(__rbit64(v23)) + (v21 << 6);
        }
        else
        {
          while (v22 - 2 != v11)
          {
            v23 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v23)
            {
              v21 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v27 + 1;
    v6 = v9;
    if (v27 + 1 == v10)
      return (id)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t FormAnalyticsKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DDC994F0 + 4 * word_1DDF3AFB0[a1]))(0xD000000000000036, 0x80000001DDF4B0B0);
}

uint64_t sub_1DDC994F0()
{
  return 0x746E656D75636F64;
}

uint64_t sub_1DDC9981C()
{
  return 0x657079546D726F66;
}

uint64_t sub_1DDC99850()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_1DDC99860()
{
  uint64_t v0;

  return v0 - 4;
}

unint64_t sub_1DDC99870()
{
  return 0xD000000000000017;
}

uint64_t sub_1DDC9987C()
{
  uint64_t v0;

  return v0 + 11;
}

uint64_t sub_1DDC9988C()
{
  uint64_t v0;

  return v0 + 11;
}

uint64_t sub_1DDC9989C()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1DDC998AC()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_1DDC998BC()
{
  uint64_t v0;

  return v0 + 11;
}

uint64_t sub_1DDC998CC()
{
  uint64_t v0;

  return v0 + 14;
}

uint64_t sub_1DDC998DC()
{
  uint64_t v0;

  return v0 + 14;
}

uint64_t sub_1DDC998EC()
{
  uint64_t v0;

  return v0 + 11;
}

uint64_t sub_1DDC998FC()
{
  uint64_t v0;

  return v0 - 7;
}

uint64_t sub_1DDC9990C()
{
  return 0x4674696445646964;
}

uint64_t sub_1DDC9992C()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_1DDC99958()
{
  uint64_t v0;

  return v0 + 19;
}

uint64_t sub_1DDC99968()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_1DDC99978()
{
  uint64_t v0;

  return v0 + 17;
}

uint64_t sub_1DDC99988()
{
  uint64_t v0;

  return v0 + 18;
}

uint64_t sub_1DDC99998()
{
  uint64_t v0;

  return v0 + 19;
}

uint64_t sub_1DDC999A8()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t sub_1DDC999B8()
{
  uint64_t v0;

  return v0 - 4;
}

uint64_t sub_1DDC999C8()
{
  uint64_t v0;

  return v0 + 8;
}

uint64_t sub_1DDC999D8()
{
  uint64_t v0;

  return v0 + 18;
}

uint64_t sub_1DDC999E8()
{
  uint64_t v0;

  return v0 + 21;
}

uint64_t sub_1DDC999F8()
{
  uint64_t v0;

  return v0 + 7;
}

void sub_1DDC99A08()
{
  JUMPOUT(0x1DDC99A14);
}

uint64_t sub_1DDC99A20()
{
  return 0x746553746F6ELL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FormAnalyticsKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = FormAnalyticsKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == FormAnalyticsKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FormAnalyticsKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  FormAnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FormAnalyticsKeys()
{
  unsigned __int8 *v0;

  FormAnalyticsKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FormAnalyticsKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  FormAnalyticsKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FormAnalyticsKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized FormAnalyticsKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FormAnalyticsKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = FormAnalyticsKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Void __swiftcall FormTextFieldAnalytics.recordEvent()()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[6];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF3B350;
  *(_BYTE *)(inited + 32) = 1;
  if (one-time initialization token for manager != -1)
    swift_once();
  *(_QWORD *)(inited + 40) = specialized FormAnalytics.documentType(from:)(*(_BYTE *)(v0 + 16));
  *(_BYTE *)(inited + 48) = 8;
  *(_QWORD *)(inited + 56) = specialized FormAnalytics.textFieldManuallyCreatedValue(from:)(*(_BYTE *)(v0 + 17));
  *(_BYTE *)(inited + 64) = 13;
  v2 = FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(v0 + 18));
  v3 = MEMORY[0x1DF0E41AC](v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 72) = v3;
  *(_BYTE *)(inited + 80) = 18;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 88) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v0 + 19));
  *(_BYTE *)(inited + 96) = 19;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = MEMORY[0x1DF0E41AC](v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 104) = v5;
  *(_BYTE *)(inited + 112) = 20;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = MEMORY[0x1DF0E41AC](v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 120) = v7;
  *(_BYTE *)(inited + 128) = 21;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = MEMORY[0x1DF0E41AC](v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 136) = v9;
  *(_BYTE *)(inited + 144) = 22;
  v10 = *(unsigned __int8 *)(v0 + 64);
  if (v10 == 2)
    v11 = 24;
  else
    v11 = 25;
  if (v10 == 3)
    v12 = 23;
  else
    v12 = v11;
  v13 = FormAnalyticsKeys.rawValue.getter(v12);
  v14 = MEMORY[0x1DF0E41AC](v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 152) = v14;
  *(_BYTE *)(inited + 160) = 26;
  *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v0 + 40));
  *(_BYTE *)(inited + 176) = 27;
  *(NSNumber *)(inited + 184) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v0 + 48));
  *(_BYTE *)(inited + 192) = 28;
  *(NSNumber *)(inited + 200) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v0 + 49));
  *(_BYTE *)(inited + 208) = 29;
  *(NSNumber *)(inited + 216) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v0 + 50));
  *(_BYTE *)(inited + 224) = 30;
  *(NSNumber *)(inited + 232) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v0 + 51));
  *(_BYTE *)(inited + 240) = 31;
  *(_QWORD *)(inited + 248) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, *(_QWORD *)(v0 + 56));
  v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v15;
  v17 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000036, 0x80000001DDF4B0B0);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #1 in FormTextFieldAnalytics.recordEvent();
  *(_QWORD *)(v18 + 24) = v16;
  v20[4] = closure #1 in FormAnalytics.sendEventLazy(key:payload:)partial apply;
  v20[5] = v18;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 1107296256;
  v20[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v20[3] = &block_descriptor_13_1;
  v19 = _Block_copy(v20);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v19);
  swift_release();

}

uint64_t FormTextFieldAnalytics.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormTextFieldAnalytics()
{
  return objc_opt_self();
}

uint64_t FormTextFieldAnalytics.init()()
{
  uint64_t v0;
  void *v1;
  id v2;

  *(_DWORD *)(v0 + 16) = 1066052;
  v1 = (void *)*MEMORY[0x1E0DC5458];
  *(_QWORD *)(v0 + 24) = *MEMORY[0x1E0DC5458];
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  v2 = v1;
  return v0;
}

uint64_t FormPageAnalytics.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak AnyContainerCanvasElementView?(v0 + 120);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormPageAnalytics()
{
  return objc_opt_self();
}

uint64_t FormPageAnalytics.init()()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 16) = 1140850756;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t Dictionary<>.pageAnalytics()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
  v3 = MEMORY[0x1E0C80A78](v50, v2);
  v49 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v48 = (uint64_t)&v41 - v7;
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v47 = (char *)&v41 - v10;
  MEMORY[0x1E0C80A78](v9, v11);
  v46 = (char *)&v41 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v54 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    result = specialized Dictionary.startIndex.getter(a1);
    v16 = result;
    v17 = 0;
    v18 = a1 + 64;
    v19 = *(_BYTE *)(a1 + 32);
    v42 = a1 + 80;
    v43 = v13;
    v53 = a1;
    v44 = v15;
    v45 = a1 + 64;
    while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << v19)
    {
      v21 = (unint64_t)v16 >> 6;
      if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
        goto LABEL_23;
      v51 = v17;
      v52 = 1 << v16;
      v22 = v50;
      v23 = *(int *)(v50 + 48);
      v24 = *(_QWORD *)(a1 + 48);
      v25 = type metadata accessor for CRKeyPath();
      v26 = *(_QWORD **)(v25 - 8);
      v27 = (void (*)(char *, uint64_t, uint64_t))v26[2];
      v28 = (uint64_t)v46;
      v27(v46, v24 + v26[9] * v16, v25);
      v29 = *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v16);
      *(_QWORD *)(v28 + v23) = v29;
      v30 = v47;
      v27(v47, v28, v25);
      *(_QWORD *)&v30[*(int *)(v22 + 48)] = v29;
      v31 = (uint64_t)v30;
      v32 = v48;
      outlined init with take of (key: CRKeyPath, value: FormPageAnalytics)(v31, v48);
      swift_retain_n();
      outlined destroy of StocksKitCurrencyCache.Provider?(v28, &demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
      v33 = *(int *)(v22 + 48);
      v34 = v49;
      v27(v49, v32, v25);
      *(_QWORD *)&v34[v33] = *(_QWORD *)(v32 + v33);
      v35 = (void (*)(char *, uint64_t))v26[1];
      swift_retain();
      v35(v34, v25);
      a1 = v53;
      outlined destroy of StocksKitCurrencyCache.Provider?(v32, &demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      v19 = *(_BYTE *)(a1 + 32);
      v20 = 1 << v19;
      if (v16 >= 1 << v19)
        goto LABEL_24;
      v18 = v45;
      v36 = *(_QWORD *)(v45 + 8 * v21);
      if ((v36 & v52) == 0)
        goto LABEL_25;
      LODWORD(v15) = v44;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v44)
        goto LABEL_26;
      v37 = v36 & (-2 << (v16 & 0x3F));
      if (v37)
      {
        v20 = __clz(__rbit64(v37)) | v16 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v38 = v21 + 1;
        v39 = (v20 + 63) >> 6;
        if (v21 + 1 < v39)
        {
          v40 = *(_QWORD *)(v45 + 8 * v38);
          if (v40)
          {
LABEL_18:
            v20 = __clz(__rbit64(v40)) + (v38 << 6);
          }
          else
          {
            while (v39 - 2 != v21)
            {
              v40 = *(_QWORD *)(v42 + 8 * v21++);
              if (v40)
              {
                v38 = v21 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v17 = v51 + 1;
      v16 = v20;
      if (v51 + 1 == v43)
        return v54;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

unint64_t one-time initialization function for manager()
{
  uint64_t v0;
  unint64_t result;

  type metadata accessor for FormAnalytics();
  v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 791357252;
  *(_WORD *)(v0 + 20) = 0;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 24) = result;
  static FormAnalytics.manager = v0;
  return result;
}

unint64_t FormAnalytics.merge(_:for:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t j;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1DF0E666C](a1 + 120);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v11)
  {
    v13 = v11;
    v49 = v10;
    FormFillingView.calculateCountTextFieldsUsed(with:)();
    FormFillingView.calculateCountTextFieldsWithAutofillUsedExplicitly(with:)();
    result = AnyCanvas.formFieldElements.getter();
    v15 = result;
    v56 = MEMORY[0x1E0DEE9D8];
    v51 = v2;
    v52 = v6;
    v50 = v7;
    if (result >> 62)
    {
      result = _CocoaArrayWrapper.endIndex.getter();
      v16 = result;
    }
    else
    {
      v16 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v53 = a2;
    v54 = v13;
    if (v16)
    {
      if (v16 < 1)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      for (i = 0; i != v16; ++i)
      {
        if ((v15 & 0xC000000000000001) != 0)
          v18 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v15);
        else
          v18 = *(id *)(v15 + 8 * i + 32);
        v19 = v18;
        v20 = (*(uint64_t (**)(void))((*v12 & *v18) + 0x2D0))();
        if (v20
          && (v21 = (void *)v20,
              v22 = *(_QWORD *)(v20 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
              swift_retain(),
              v21,
              LODWORD(v21) = *(unsigned __int8 *)(v22 + 64),
              swift_release(),
              (_DWORD)v21 == 3))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v23 = v56;
      a2 = v53;
      if (v56 < 0)
        goto LABEL_34;
    }
    else
    {
      swift_bridgeObjectRelease();
      v23 = MEMORY[0x1E0DEE9D8];
      if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
        goto LABEL_34;
    }
    if ((v23 & 0x4000000000000000) == 0)
    {
      v24 = *(_QWORD *)(v23 + 16);
      goto LABEL_20;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
LABEL_20:
    swift_release();
    v25 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
    *(_QWORD *)(*(_QWORD *)(v54 + OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics) + 96) = v24;
    result = AnyCanvas.formFieldElements.getter();
    v26 = result;
    v56 = MEMORY[0x1E0DEE9D8];
    if (result >> 62)
    {
      result = _CocoaArrayWrapper.endIndex.getter();
      v27 = result;
      v48 = v25;
      if (result)
        goto LABEL_22;
    }
    else
    {
      v27 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
      v48 = v25;
      if (v27)
      {
LABEL_22:
        if (v27 < 1)
        {
LABEL_62:
          __break(1u);
          return result;
        }
        for (j = 0; j != v27; ++j)
        {
          if ((v26 & 0xC000000000000001) != 0)
            v29 = (_QWORD *)MEMORY[0x1DF0E4D64](j, v26);
          else
            v29 = *(id *)(v26 + 8 * j + 32);
          v30 = v29;
          v31 = (*(uint64_t (**)(void))((*v12 & *v29) + 0x2D0))();
          if (v31
            && (v32 = (void *)v31,
                v33 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics),
                swift_retain(),
                v32,
                LODWORD(v32) = *(unsigned __int8 *)(v33 + 64),
                swift_release(),
                (_DWORD)v32 == 1))
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v34 = v56;
        a2 = v53;
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1E0DEE9D8];
LABEL_37:
    v3 = v51;
    v6 = v52;
    v10 = v49;
    v7 = v50;
    if (v34 < 0 || (v34 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 16);
    }
    swift_release();
    *(_QWORD *)(*(_QWORD *)(v54 + v48) + 104) = v35;
    FormFillingView.calculateCountTextFieldsWithNoTextEntry(with:)();
    result = swift_unknownObjectRelease();
    v36 = *(_QWORD *)(a1 + 88);
    v37 = *(_QWORD *)(a1 + 96);
    v38 = __OFADD__(v36, v37);
    v39 = v36 + v37;
    if (!v38)
    {
      *(_QWORD *)(a1 + 80) = v39;
      goto LABEL_42;
    }
    __break(1u);
    goto LABEL_61;
  }
LABEL_42:
  if (FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(a1 + 16)) == 0x746553746F6ELL && v40 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
      *(_BYTE *)(v3 + 16) = *(_BYTE *)(a1 + 16);
  }
  if (*(_BYTE *)(a1 + 17) == 1)
    *(_BYTE *)(v3 + 20) = 1;
  if (*(_BYTE *)(a1 + 18) == 1)
    *(_BYTE *)(v3 + 21) = 1;
  if (FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(a1 + 19)) == 0xD000000000000020 && v43 == 0x80000001DDF4B4D0)
  {
    v44 = swift_bridgeObjectRelease();
  }
  else
  {
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v44 = swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
      *(_BYTE *)(v3 + 19) = *(_BYTE *)(a1 + 19);
  }
  (*(void (**)(uint64_t))((*v12 & *a2) + 0x300))(v44);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v55 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 24) = v55;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_endAccess();
}

uint64_t closure #1 in FormAnalytics.sendEventLazy(key:payload:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;

  v1 = a1();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDy8PaperKit17FormAnalyticsKeysOSo8NSObjectCG_SS_AJts5NeverOTg503_s8d5Kit17fgh4OSo8i36CSSAEIgygoo_AC3key_AE5valuetSS_AEts5j100OIegnrzr_TR03_s8a5Kit13cd35C13sendEventLazy3key7payloadyAA0cD4e10O_SDyAHSo8f31CGyXAtFSDySSAJGSgycfU_Q24_AJtAH_X5XEfU_Tf3nnnpf_nTf1cn_n(v1);
  swift_bridgeObjectRelease();
  if (v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v6 = v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Void __swiftcall FormAnalytics.recordSessionEvent()()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  _QWORD aBlock[6];

  v4 = v0;
  v5 = v0 + 24;
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16))
  {
    v6 = swift_bridgeObjectRetain();
    v7 = Dictionary<>.pageAnalytics()(v6);
    inited = v7;
    if (v7 >> 62)
      goto LABEL_14;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter())
    {
      if (v8 < 1)
        goto LABEL_29;
      v2 = 0;
      v3 = 0;
      while (1)
      {
        v9 = (inited & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v2, inited) : swift_retain();
        v10 = *(_QWORD *)(v9 + 40);
        swift_release();
        v11 = __OFADD__(v3, v10);
        v3 += v10;
        if (v11)
          break;
        if (v8 == ++v2)
          goto LABEL_16;
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
    }
    v3 = 0;
LABEL_16:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v13 = swift_bridgeObjectRetain();
      v14 = Dictionary<>.pageAnalytics()(v13);
      inited = v14;
      if (v14 >> 62)
        goto LABEL_30;
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
        while (v15 >= 1)
        {
          v2 = 0;
          v12 = 0;
          while (1)
          {
            v16 = (inited & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v2, inited) : swift_retain();
            v17 = *(_QWORD *)(v16 + 48);
            swift_release();
            v11 = __OFADD__(v12, v17);
            v12 += v17;
            if (v11)
              break;
            if (v15 == ++v2)
              goto LABEL_32;
          }
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          swift_bridgeObjectRetain();
          v15 = _CocoaArrayWrapper.endIndex.getter();
          if (!v15)
            goto LABEL_31;
        }
        goto LABEL_263;
      }
LABEL_31:
      v12 = 0;
LABEL_32:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v3 = 0;
    v12 = 0;
  }
  if (__OFADD__(v3, v12))
    goto LABEL_53;
  v130 = v3 + v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF3B360;
  *(_BYTE *)(inited + 32) = 37;
  *(_QWORD *)(inited + 40) = specialized FormAnalytics.documentType(from:)(*(_BYTE *)(v0 + 16));
  *(_BYTE *)(inited + 48) = 38;
  v18 = *(unsigned __int8 *)(v0 + 17);
  if (v18 == 41)
    v19 = 2;
  else
    v19 = v18 == 40;
  *(_QWORD *)(inited + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v19);
  *(_BYTE *)(inited + 64) = 42;
  v20 = *(unsigned __int8 *)(v4 + 18);
  if (v20 == 45)
    v21 = 2;
  else
    v21 = v20 == 44;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v21);
  *(_BYTE *)(inited + 80) = 46;
  *(_QWORD *)(inited + 88) = specialized FormAnalytics.formFillingModeEntryModality(from:)(*(_BYTE *)(v4 + 19));
  *(_BYTE *)(inited + 96) = 52;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 104) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v4 + 20));
  *(_BYTE *)(inited + 112) = 53;
  *(NSNumber *)(inited + 120) = NSNumber.init(BOOLeanLiteral:)(*(_BYTE *)(v4 + 21));
  *(_BYTE *)(inited + 128) = 54;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 24) + 16))
  {
    v22 = swift_bridgeObjectRetain();
    v23 = Dictionary<>.pageAnalytics()(v22);
    v2 = v23;
    if (v23 >> 62)
      goto LABEL_54;
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24)
    {
      while (v24 >= 1)
      {
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = (v2 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v25, v2) : swift_retain();
          v28 = *(_QWORD *)(v27 + 80);
          swift_release();
          v11 = __OFADD__(v26, v28);
          v26 += v28;
          if (v11)
            break;
          if (v24 == ++v25)
            goto LABEL_56;
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_bridgeObjectRetain();
        v24 = _CocoaArrayWrapper.endIndex.getter();
        if (!v24)
          goto LABEL_55;
      }
      __break(1u);
      goto LABEL_251;
    }
LABEL_55:
    v26 = 0;
LABEL_56:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0;
  }
  *(NSNumber *)(inited + 136) = NSNumber.init(BOOLeanLiteral:)(v26 > 0);
  *(_BYTE *)(inited + 144) = 55;
  if (!*(_QWORD *)(*(_QWORD *)v5 + 16))
  {
    v34 = 0;
    goto LABEL_73;
  }
  v29 = swift_bridgeObjectRetain();
  v30 = Dictionary<>.pageAnalytics()(v29);
  v31 = v30;
  if (v30 >> 62)
    goto LABEL_70;
  v32 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v32)
  {
LABEL_71:
    v34 = 0;
LABEL_72:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_73:
    *(_QWORD *)(inited + 152) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v34);
    *(_BYTE *)(inited + 160) = 62;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v37 = swift_bridgeObjectRetain();
      v38 = Dictionary<>.pageAnalytics()(v37);
      v39 = v38;
      if (v38 >> 62)
        goto LABEL_86;
      v40 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v40)
      {
        while (v40 >= 1)
        {
          v41 = 0;
          v42 = 0;
          while (1)
          {
            v43 = (v39 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v41, v39) : swift_retain();
            v44 = *(_QWORD *)(v43 + 72);
            swift_release();
            v11 = __OFADD__(v42, v44);
            v42 += v44;
            if (v11)
              break;
            if (v40 == ++v41)
              goto LABEL_88;
          }
          __break(1u);
LABEL_86:
          swift_bridgeObjectRetain();
          v40 = _CocoaArrayWrapper.endIndex.getter();
          if (!v40)
            goto LABEL_87;
        }
        goto LABEL_252;
      }
LABEL_87:
      v42 = 0;
LABEL_88:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v42 = 0;
    }
    *(_QWORD *)(inited + 168) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v42);
    *(_BYTE *)(inited + 176) = 57;
    *(_QWORD *)(inited + 184) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v130);
    *(_BYTE *)(inited + 192) = 58;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v45 = swift_bridgeObjectRetain();
      v46 = Dictionary<>.pageAnalytics()(v45);
      v47 = v46;
      if (v46 >> 62)
        goto LABEL_102;
      v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v48)
      {
        while (v48 >= 1)
        {
          v49 = 0;
          v50 = 0;
          while (1)
          {
            v51 = (v47 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v49, v47) : swift_retain();
            v52 = *(_QWORD *)(v51 + 40);
            swift_release();
            v11 = __OFADD__(v50, v52);
            v50 += v52;
            if (v11)
              break;
            if (v48 == ++v49)
              goto LABEL_104;
          }
          __break(1u);
LABEL_102:
          swift_bridgeObjectRetain();
          v48 = _CocoaArrayWrapper.endIndex.getter();
          if (!v48)
            goto LABEL_103;
        }
        goto LABEL_253;
      }
LABEL_103:
      v50 = 0;
LABEL_104:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v50 = 0;
    }
    *(_QWORD *)(inited + 200) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v50);
    *(_BYTE *)(inited + 208) = 59;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v53 = swift_bridgeObjectRetain();
      v54 = Dictionary<>.pageAnalytics()(v53);
      v55 = v54;
      if (v54 >> 62)
        goto LABEL_118;
      v56 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v56)
      {
        while (v56 >= 1)
        {
          v57 = 0;
          v58 = 0;
          while (1)
          {
            v59 = (v55 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v57, v55) : swift_retain();
            v60 = *(_QWORD *)(v59 + 48);
            swift_release();
            v11 = __OFADD__(v58, v60);
            v58 += v60;
            if (v11)
              break;
            if (v56 == ++v57)
              goto LABEL_120;
          }
          __break(1u);
LABEL_118:
          swift_bridgeObjectRetain();
          v56 = _CocoaArrayWrapper.endIndex.getter();
          if (!v56)
            goto LABEL_119;
        }
        goto LABEL_254;
      }
LABEL_119:
      v58 = 0;
LABEL_120:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = 0;
    }
    *(_QWORD *)(inited + 216) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v58);
    *(_BYTE *)(inited + 224) = 26;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v61 = swift_bridgeObjectRetain();
      v62 = Dictionary<>.pageAnalytics()(v61);
      v63 = v62;
      if (v62 >> 62)
        goto LABEL_134;
      v64 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v64)
      {
        while (v64 >= 1)
        {
          v65 = 0;
          v66 = 0;
          while (1)
          {
            v67 = (v63 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v65, v63) : swift_retain();
            v68 = *(_QWORD *)(v67 + 56);
            swift_release();
            v11 = __OFADD__(v66, v68);
            v66 += v68;
            if (v11)
              break;
            if (v64 == ++v65)
              goto LABEL_136;
          }
          __break(1u);
LABEL_134:
          swift_bridgeObjectRetain();
          v64 = _CocoaArrayWrapper.endIndex.getter();
          if (!v64)
            goto LABEL_135;
        }
        goto LABEL_255;
      }
LABEL_135:
      v66 = 0;
LABEL_136:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v66 = 0;
    }
    *(_QWORD *)(inited + 232) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v66);
    *(_BYTE *)(inited + 240) = 61;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v69 = swift_bridgeObjectRetain();
      v70 = Dictionary<>.pageAnalytics()(v69);
      v71 = v70;
      if (v70 >> 62)
        goto LABEL_150;
      v72 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v72)
      {
        while (v72 >= 1)
        {
          v73 = 0;
          v74 = 0;
          while (1)
          {
            v75 = (v71 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v73, v71) : swift_retain();
            v76 = *(_QWORD *)(v75 + 64);
            swift_release();
            v11 = __OFADD__(v74, v76);
            v74 += v76;
            if (v11)
              break;
            if (v72 == ++v73)
              goto LABEL_152;
          }
          __break(1u);
LABEL_150:
          swift_bridgeObjectRetain();
          v72 = _CocoaArrayWrapper.endIndex.getter();
          if (!v72)
            goto LABEL_151;
        }
        goto LABEL_256;
      }
LABEL_151:
      v74 = 0;
LABEL_152:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)(inited + 248) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v74);
    *(_BYTE *)(inited + 256) = 56;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v77 = swift_bridgeObjectRetain();
      v78 = Dictionary<>.pageAnalytics()(v77);
      v79 = v78;
      if (v78 >> 62)
        goto LABEL_166;
      v80 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v80)
      {
        while (v80 >= 1)
        {
          v81 = 0;
          v82 = 0;
          while (1)
          {
            v83 = (v79 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v81, v79) : swift_retain();
            v84 = *(_QWORD *)(v83 + 32);
            swift_release();
            v11 = __OFADD__(v82, v84);
            v82 += v84;
            if (v11)
              break;
            if (v80 == ++v81)
              goto LABEL_168;
          }
          __break(1u);
LABEL_166:
          swift_bridgeObjectRetain();
          v80 = _CocoaArrayWrapper.endIndex.getter();
          if (!v80)
            goto LABEL_167;
        }
        goto LABEL_257;
      }
LABEL_167:
      v82 = 0;
LABEL_168:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v82 = 0;
    }
    *(_QWORD *)(inited + 264) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v82);
    *(_BYTE *)(inited + 272) = 63;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v85 = swift_bridgeObjectRetain();
      v86 = Dictionary<>.pageAnalytics()(v85);
      v87 = v86;
      if (v86 >> 62)
        goto LABEL_182;
      v88 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v88)
      {
        while (v88 >= 1)
        {
          v89 = 0;
          v90 = 0;
          while (1)
          {
            v91 = (v87 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v89, v87) : swift_retain();
            v92 = *(_QWORD *)(v91 + 80);
            swift_release();
            v11 = __OFADD__(v90, v92);
            v90 += v92;
            if (v11)
              break;
            if (v88 == ++v89)
              goto LABEL_184;
          }
          __break(1u);
LABEL_182:
          swift_bridgeObjectRetain();
          v88 = _CocoaArrayWrapper.endIndex.getter();
          if (!v88)
            goto LABEL_183;
        }
        goto LABEL_258;
      }
LABEL_183:
      v90 = 0;
LABEL_184:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v90 = 0;
    }
    *(_QWORD *)(inited + 280) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v90);
    *(_BYTE *)(inited + 288) = 64;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v93 = swift_bridgeObjectRetain();
      v94 = Dictionary<>.pageAnalytics()(v93);
      v95 = v94;
      if (v94 >> 62)
        goto LABEL_198;
      v96 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v96)
      {
        while (v96 >= 1)
        {
          v97 = 0;
          v98 = 0;
          while (1)
          {
            v99 = (v95 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v97, v95) : swift_retain();
            v100 = *(_QWORD *)(v99 + 88);
            swift_release();
            v11 = __OFADD__(v98, v100);
            v98 += v100;
            if (v11)
              break;
            if (v96 == ++v97)
              goto LABEL_200;
          }
          __break(1u);
LABEL_198:
          swift_bridgeObjectRetain();
          v96 = _CocoaArrayWrapper.endIndex.getter();
          if (!v96)
            goto LABEL_199;
        }
        goto LABEL_259;
      }
LABEL_199:
      v98 = 0;
LABEL_200:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v98 = 0;
    }
    *(_QWORD *)(inited + 296) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v98);
    *(_BYTE *)(inited + 304) = 65;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v101 = swift_bridgeObjectRetain();
      v102 = Dictionary<>.pageAnalytics()(v101);
      v103 = v102;
      if (v102 >> 62)
        goto LABEL_214;
      v104 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v104)
      {
        while (v104 >= 1)
        {
          v105 = 0;
          v106 = 0;
          while (1)
          {
            v107 = (v103 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v105, v103) : swift_retain();
            v108 = *(_QWORD *)(v107 + 96);
            swift_release();
            v11 = __OFADD__(v106, v108);
            v106 += v108;
            if (v11)
              break;
            if (v104 == ++v105)
              goto LABEL_216;
          }
          __break(1u);
LABEL_214:
          swift_bridgeObjectRetain();
          v104 = _CocoaArrayWrapper.endIndex.getter();
          if (!v104)
            goto LABEL_215;
        }
        goto LABEL_260;
      }
LABEL_215:
      v106 = 0;
LABEL_216:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v106 = 0;
    }
    *(_QWORD *)(inited + 312) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v106);
    *(_BYTE *)(inited + 320) = 66;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v109 = swift_bridgeObjectRetain();
      v110 = Dictionary<>.pageAnalytics()(v109);
      v111 = v110;
      if (v110 >> 62)
        goto LABEL_230;
      v112 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v112)
      {
        while (v112 >= 1)
        {
          v113 = 0;
          v114 = 0;
          while (1)
          {
            v115 = (v111 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v113, v111) : swift_retain();
            v116 = *(_QWORD *)(v115 + 104);
            swift_release();
            v11 = __OFADD__(v114, v116);
            v114 += v116;
            if (v11)
              break;
            if (v112 == ++v113)
              goto LABEL_232;
          }
          __break(1u);
LABEL_230:
          swift_bridgeObjectRetain();
          v112 = _CocoaArrayWrapper.endIndex.getter();
          if (!v112)
            goto LABEL_231;
        }
        goto LABEL_261;
      }
LABEL_231:
      v114 = 0;
LABEL_232:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v114 = 0;
    }
    *(_QWORD *)(inited + 328) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v114);
    *(_BYTE *)(inited + 336) = 67;
    if (*(_QWORD *)(*(_QWORD *)v5 + 16))
    {
      v117 = swift_bridgeObjectRetain();
      v118 = Dictionary<>.pageAnalytics()(v117);
      v119 = v118;
      if (v118 >> 62)
        goto LABEL_246;
      v120 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v120)
      {
        while (v120 >= 1)
        {
          v121 = 0;
          v122 = 0;
          while (1)
          {
            v123 = (v119 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v121, v119) : swift_retain();
            v124 = *(_QWORD *)(v123 + 112);
            swift_release();
            v11 = __OFADD__(v122, v124);
            v122 += v124;
            if (v11)
              break;
            if (v120 == ++v121)
              goto LABEL_248;
          }
          __break(1u);
LABEL_246:
          swift_bridgeObjectRetain();
          v120 = _CocoaArrayWrapper.endIndex.getter();
          if (!v120)
            goto LABEL_247;
        }
        goto LABEL_262;
      }
LABEL_247:
      v122 = 0;
LABEL_248:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    else
    {
      v122 = 0;
    }
    *(_QWORD *)(inited + 344) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v122);
    v125 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v126 = swift_allocObject();
    *(_QWORD *)(v126 + 16) = v125;
    v127 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000031, 0x80000001DDF4B380);
    v128 = swift_allocObject();
    *(_QWORD *)(v128 + 16) = partial apply for implicit closure #1 in FormTextFieldAnalytics.recordEvent();
    *(_QWORD *)(v128 + 24) = v126;
    aBlock[4] = closure #1 in FormAnalytics.sendEventLazy(key:payload:)partial apply;
    aBlock[5] = v128;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    aBlock[3] = &block_descriptor_23_1;
    v129 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v129);
    swift_release();

    return;
  }
  while (v32 >= 1)
  {
    v33 = 0;
    v34 = 0;
    while (1)
    {
      v35 = (v31 & 0xC000000000000001) != 0 ? MEMORY[0x1DF0E4D64](v33, v31) : swift_retain();
      v36 = *(_QWORD *)(v35 + 24);
      swift_release();
      v11 = __OFADD__(v34, v36);
      v34 += v36;
      if (v11)
        break;
      if (v32 == ++v33)
        goto LABEL_72;
    }
    __break(1u);
LABEL_70:
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    if (!v32)
      goto LABEL_71;
  }
LABEL_251:
  __break(1u);
LABEL_252:
  __break(1u);
LABEL_253:
  __break(1u);
LABEL_254:
  __break(1u);
LABEL_255:
  __break(1u);
LABEL_256:
  __break(1u);
LABEL_257:
  __break(1u);
LABEL_258:
  __break(1u);
LABEL_259:
  __break(1u);
LABEL_260:
  __break(1u);
LABEL_261:
  __break(1u);
LABEL_262:
  __break(1u);
LABEL_263:
  __break(1u);
}

uint64_t FormAnalytics.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FormAnalytics()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FormTextBoxEntryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDC9BBB8 + 4 * byte_1DDF3B03F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDC9BBEC + 4 * byte_1DDF3B03A[v4]))();
}

uint64_t sub_1DDC9BBEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC9BBF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC9BBFCLL);
  return result;
}

uint64_t sub_1DDC9BC08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC9BC10);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDC9BC14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC9BC1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormTextBoxEntryType()
{
  return &type metadata for FormTextBoxEntryType;
}

uint64_t getEnumTagSinglePayload for FormAnalyticsKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBC)
    goto LABEL_17;
  if (a2 + 68 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 68) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 68;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 68;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 68;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x45;
  v8 = v6 - 69;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FormAnalyticsKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 68 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 68) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBB)
    return ((uint64_t (*)(void))((char *)&loc_1DDC9BD14 + 4 * byte_1DDF3B049[v4]))();
  *a1 = a2 + 68;
  return ((uint64_t (*)(void))((char *)sub_1DDC9BD48 + 4 * byte_1DDF3B044[v4]))();
}

uint64_t sub_1DDC9BD48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC9BD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDC9BD58);
  return result;
}

uint64_t sub_1DDC9BD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDC9BD6CLL);
  *(_BYTE *)result = a2 + 68;
  return result;
}

uint64_t sub_1DDC9BD70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDC9BD78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FormAnalyticsKeys()
{
  return &type metadata for FormAnalyticsKeys;
}

unint64_t lazy protocol witness table accessor for type FormAnalyticsKeys and conformance FormAnalyticsKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys;
  if (!lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormAnalyticsKeys, &type metadata for FormAnalyticsKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormAnalyticsKeys and conformance FormAnalyticsKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FormTextBoxEntryType and conformance FormTextBoxEntryType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType;
  if (!lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for FormTextBoxEntryType, &type metadata for FormTextBoxEntryType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormTextBoxEntryType and conformance FormTextBoxEntryType);
  }
  return result;
}

id specialized FormAnalytics.documentType(from:)(char a1)
{
  uint64_t v1;

  if ((a1 - 2) < 6u)
    v1 = (a1 - 2) + 1;
  else
    v1 = 0;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v1);
}

id specialized FormAnalytics.textFieldManuallyCreatedValue(from:)(char a1)
{
  uint64_t v1;

  if ((a1 - 10) < 3u)
    v1 = (a1 - 10) + 1;
  else
    v1 = 0;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v1);
}

id specialized FormAnalytics.formFillingModeEntryModality(from:)(char a1)
{
  uint64_t v1;

  if ((a1 - 48) > 3u)
    v1 = 0;
  else
    v1 = qword_1DDF3B330[(char)(a1 - 48)];
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v1);
}

void specialized FormAnalytics.addFielde2eEvent(canvas:)(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  double v17;
  double v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v23[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char **)&v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v23[-v13];
  if (!a1)
    return;
  v15 = &a1[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined init with copy of Date?((uint64_t)v15, (uint64_t)v5);
  if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Date?);
    return;
  }
  (*(void (**)(_BYTE *, char **, uint64_t))(v7 + 32))(v14, v5, v6);
  v16 = a1;
  Date.init()();
  Date.timeIntervalSince(_:)();
  v18 = v17 * 1000.0;
  if ((~COERCE__INT64(v17 * 1000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v18 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v18 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = (char **)&v16[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields];
  swift_beginAccess();
  v15 = *v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_15:
    v15 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    *v5 = v15;
  }
  v21 = *((_QWORD *)v15 + 2);
  v20 = *((_QWORD *)v15 + 3);
  if (v21 >= v20 >> 1)
  {
    v15 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v15);
    *v5 = v15;
  }
  *((_QWORD *)v15 + 2) = v21 + 1;
  *(_QWORD *)&v15[8 * v21 + 32] = (uint64_t)v18;
  swift_endAccess();

  v22 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v22(v10, v6);
  v22(v14, v6);
}

void specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(uint64_t a1, char a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64x2_t v6;
  int64x2_t *v7;
  unint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  _QWORD v30[6];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = v2 - 1;
  if (v2 != 1)
  {
    if ((unint64_t)v2 >= 5)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v6 = vdupq_n_s64(v3);
      v7 = (int64x2_t *)(a1 + 56);
      v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v6;
      do
      {
        v6 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v6, v7[-1]), (int8x16_t)v6, (int8x16_t)v7[-1]);
        v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v9, *v7), (int8x16_t)v9, *(int8x16_t *)v7);
        v7 += 2;
        v8 -= 4;
      }
      while (v8);
      v10 = vbslq_s8((int8x16_t)vcgtq_s64(v6, v9), (int8x16_t)v6, (int8x16_t)v9);
      v11 = vextq_s8(v10, v10, 8uLL).u64[0];
      v3 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v10.i64[0], v11), *(int8x8_t *)v10.i8, (int8x8_t)v11);
      if (v4 == (v4 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_12;
    }
    else
    {
      v5 = 1;
    }
    v12 = v2 - v5;
    v13 = (int64_t *)(a1 + 8 * v5 + 32);
    do
    {
      v15 = *v13++;
      v14 = v15;
      if (v3 <= v15)
        v3 = v14;
      --v12;
    }
    while (v12);
  }
LABEL_12:
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = *(_QWORD *)(a1 + 32 + 8 * v16);
    v19 = __OFADD__(v17, v18);
    v17 += v18;
    if (v19)
    {
      __break(1u);
      return;
    }
    ++v16;
  }
  while (v2 != v16);
  if ((a2 & 1) != 0)
    v20 = 6632037;
  else
    v20 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v21 = 0xE300000000000000;
  else
    v21 = 0x80000001DDF546E0;
  v22 = v17 / v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(FormAnalyticsKeys, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35B30;
  *(_BYTE *)(inited + 32) = 35;
  v24 = MEMORY[0x1DF0E41AC](v20, v21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 40) = v24;
  *(_BYTE *)(inited + 48) = 34;
  *(_QWORD *)(inited + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v3);
  *(_BYTE *)(inited + 64) = 33;
  *(_QWORD *)(inited + 72) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithInteger_, v22);
  v25 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v25;
  v27 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002CLL, 0x80000001DDF4B330);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = partial apply for implicit closure #3 in FormAnalytics.recordLatencyEvent(timestamps:endToEnd:);
  *(_QWORD *)(v28 + 24) = v26;
  v30[4] = partial apply for closure #1 in FormAnalytics.sendEventLazy(key:payload:);
  v30[5] = v28;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 1107296256;
  v30[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v30[3] = &block_descriptor_34;
  v29 = _Block_copy(v30);
  swift_retain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v29);
  swift_release();

}

uint64_t specialized FormAnalyticsKeys.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x45)
    return 69;
  else
    return v0;
}

uint64_t sub_1DDC9C468()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #1 in FormAnalytics.sendEventLazy(key:payload:)()
{
  uint64_t v0;

  return closure #1 in FormAnalytics.sendEventLazy(key:payload:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t sub_1DDC9C4B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of (key: CRKeyPath, value: FormPageAnalytics)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: CRKeyPath, value: FormPageAnalytics));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall ShapeListViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  char *v28;
  id v29;
  id v30;
  id v31;
  Class isa;
  unint64_t v33;
  char **v34;
  char **v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  Class v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  id v61;
  void *v62;
  uint64_t v63;
  double v64;
  double v65;
  id v66;
  void *v67;
  uint64_t v68;
  id v69;
  id v70;
  id v71;
  Class v72;
  id v73;
  void *v74;
  unint64_t v75;
  void *v76;
  char *v77;
  id v78;
  objc_super v79;

  v1 = v0;
  v79.receiver = v0;
  v79.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v79, sel_viewDidLoad);
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
    goto LABEL_33;
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329D0;
  v6 = objc_msgSend(v2, sel_topAnchor);
  v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  v10 = objc_msgSend(v9, sel_topAnchor);
  v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin];
  v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(_QWORD *)(v5 + 32) = v12;
  v13 = objc_msgSend(v2, sel_bottomAnchor);
  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  v17 = objc_msgSend(v16, sel_bottomAnchor);
  v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, -v11);

  *(_QWORD *)(v5 + 40) = v18;
  v19 = objc_msgSend(v2, sel_leadingAnchor);
  v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  v23 = objc_msgSend(v22, sel_leadingAnchor);
  v24 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v11);

  *(_QWORD *)(v5 + 48) = v24;
  v25 = objc_msgSend(v2, sel_trailingAnchor);
  v26 = objc_msgSend(v1, sel_view);
  if (v26)
  {
    v27 = v26;
    v28 = v1;
    v78 = (id)objc_opt_self();
    v29 = objc_msgSend(v27, sel_safeAreaLayoutGuide);

    v30 = objc_msgSend(v29, sel_trailingAnchor);
    v31 = objc_msgSend(v25, sel_constraintEqualToAnchor_constant_, v30, -v11);

    *(_QWORD *)(v5 + 56) = v31;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v78, sel_activateConstraints_, isa);

    v33 = *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView];
    objc_msgSend((id)v33, sel_setAxis_, 1);
    objc_msgSend((id)v33, sel_setDistribution_, 0);
    v34 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    objc_msgSend((id)v33, sel_setAlignment_, 3);
    v35 = &selRef_setImage_;
    objc_msgSend((id)v33, sel_setSpacing_, *(double *)&v28[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing]);
    objc_msgSend((id)v33, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    objc_msgSend(v2, sel_addSubview_, v33);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1DDF39360;
    v77 = v28;
    v37 = v2;
    v38 = objc_msgSend((id)v33, sel_centerXAnchor);
    v39 = objc_msgSend(v2, sel_centerXAnchor);
    v40 = objc_msgSend(v38, sel_constraintEqualToAnchor_, v39);

    *(_QWORD *)(v36 + 32) = v40;
    v41 = objc_msgSend((id)v33, sel_centerYAnchor);
    v42 = objc_msgSend(v37, sel_centerYAnchor);
    v43 = objc_msgSend(v41, sel_constraintEqualToAnchor_, v42);

    *(_QWORD *)(v36 + 40) = v43;
    v44 = objc_msgSend((id)v33, sel_topAnchor);
    v45 = objc_msgSend(v37, sel_topAnchor);
    v46 = objc_msgSend(v44, sel_constraintGreaterThanOrEqualToAnchor_, v45);

    *(_QWORD *)(v36 + 48) = v46;
    v47 = objc_msgSend((id)v33, sel_leadingAnchor);
    v48 = objc_msgSend(v37, sel_leadingAnchor);
    v49 = objc_msgSend(v47, sel_constraintGreaterThanOrEqualToAnchor_, v48);

    *(_QWORD *)(v36 + 56) = v49;
    v50 = objc_msgSend((id)v33, sel_bottomAnchor);
    v51 = objc_msgSend(v37, sel_bottomAnchor);
    v52 = objc_msgSend(v50, sel_constraintLessThanOrEqualToAnchor_, v51);

    *(_QWORD *)(v36 + 64) = v52;
    v53 = objc_msgSend((id)v33, sel_trailingAnchor);
    v76 = v37;
    v54 = objc_msgSend(v37, sel_trailingAnchor);
    v55 = objc_msgSend(v53, sel_constraintLessThanOrEqualToAnchor_, v54);

    *(_QWORD *)(v36 + 72) = v55;
    specialized Array._endMutation()();
    v56 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v78, sel_activateConstraints_, v56);

    v57 = *(_QWORD *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews];
    if (v57 >> 62)
      goto LABEL_28;
    v58 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_8:
    if (v58)
    {
      if (v58 < 1)
      {
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      v59 = 0;
      v60 = *(double *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing];
      do
      {
        if ((v57 & 0xC000000000000001) != 0)
          v61 = (id)MEMORY[0x1DF0E4D64](v59, v57);
        else
          v61 = *(id *)(v57 + 8 * v59 + 32);
        v62 = v61;
        ++v59;
        objc_msgSend(v61, v35[55], v60);
        objc_msgSend(v62, sel_setAxis_, 0);
        objc_msgSend(v62, sel_setDistribution_, 0);
        objc_msgSend(v62, v34[199], 0);
        objc_msgSend((id)v33, sel_addArrangedSubview_, v62);

      }
      while (v58 != v59);
    }
    swift_bridgeObjectRelease();
    v33 = ShapeListViewController.configuredListItemViews()();
    if (v33 >> 62)
    {
      v63 = _CocoaArrayWrapper.endIndex.getter();
      if (v63)
      {
LABEL_17:
        if (v63 >= 1)
        {
          v35 = 0;
          v64 = *(double *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize];
          v65 = *(double *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize + 8];
          while (1)
          {
            if ((v33 & 0xC000000000000001) != 0)
              v73 = (id)MEMORY[0x1DF0E4D64](v35, v33);
            else
              v73 = *(id *)(v33 + 8 * (_QWORD)v35 + 32);
            v74 = v73;
            v75 = (unint64_t)v35 / 3;
            if ((v57 & 0xC000000000000001) != 0)
            {
              v66 = (id)MEMORY[0x1DF0E4D64](v75, v57);
            }
            else
            {
              if (v75 >= *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_28:
                swift_bridgeObjectRetain();
                v58 = _CocoaArrayWrapper.endIndex.getter();
                goto LABEL_8;
              }
              v66 = *(id *)(v57 + 32 + 8 * v75);
            }
            v67 = v66;
            v35 = (char **)((char *)v35 + 1);
            objc_msgSend(v66, sel_addArrangedSubview_, v74);

            v68 = swift_allocObject();
            *(_OWORD *)(v68 + 16) = xmmword_1DDF329E0;
            v69 = objc_msgSend(v74, sel_widthAnchor);
            v70 = objc_msgSend(v69, sel_constraintEqualToConstant_, v64);

            *(_QWORD *)(v68 + 32) = v70;
            v71 = objc_msgSend(v74, sel_heightAnchor);
            v34 = (char **)objc_msgSend(v71, sel_constraintEqualToConstant_, v65);

            *(_QWORD *)(v68 + 40) = v34;
            specialized Array._endMutation()();
            v72 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v78, sel_activateConstraints_, v72);

            if ((char **)v63 == v35)
              goto LABEL_30;
          }
        }
        goto LABEL_32;
      }
    }
    else
    {
      v63 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v63)
        goto LABEL_17;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    objc_msgSend(v77, sel_setPreferredContentSize_, *(double *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize], *(double *)&v77[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize + 8]);

    return;
  }
LABEL_37:
  __break(1u);
}

uint64_t ShapeListViewController.configuredListItemViews()()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];
  uint64_t v33;

  v1 = v0;
  ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1DDF3B380;
  v33 = ObjectType;
  v32[0] = v1;
  v4 = v1;
  specialized static ShapeListItemView.newAddRectangleListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddRectangle_withEvent_);
  v6 = v5;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 32) = v6;
  v33 = ObjectType;
  v32[0] = v4;
  v7 = v4;
  specialized static ShapeListItemView.newAddRoundedRectListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddRoundedRect_withEvent_);
  v9 = v8;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 40) = v9;
  v33 = ObjectType;
  v32[0] = v7;
  v10 = v7;
  specialized static ShapeListItemView.newAddOvalListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddOval_withEvent_);
  v12 = v11;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 48) = v12;
  v33 = ObjectType;
  v32[0] = v10;
  v13 = v10;
  specialized static ShapeListItemView.newAddTriangleListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddTriangle_withEvent_);
  v15 = v14;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 56) = v15;
  v33 = ObjectType;
  v32[0] = v13;
  v16 = v13;
  specialized static ShapeListItemView.newAddPolygonListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddPolygon_withEvent_);
  v18 = v17;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 64) = v18;
  v33 = ObjectType;
  v32[0] = v16;
  v19 = v16;
  specialized static ShapeListItemView.newAddArrowShapeListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddArrowShape_withEvent_);
  v21 = v20;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 72) = v21;
  v33 = ObjectType;
  v32[0] = v19;
  v22 = v19;
  specialized static ShapeListItemView.newAddStarListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddStar_withEvent_);
  v24 = v23;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 80) = v24;
  v33 = ObjectType;
  v32[0] = v22;
  v25 = v22;
  specialized static ShapeListItemView.newAddChatListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddChatBubble_withEvent_);
  v27 = v26;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 88) = v27;
  v33 = ObjectType;
  v32[0] = v25;
  v28 = v25;
  specialized static ShapeListItemView.newAddArrowListItemView(_:action:)((uint64_t)v32, (uint64_t)sel_didSelectAddArrow_withEvent_);
  v30 = v29;
  outlined destroy of Any?((uint64_t)v32);
  *(_QWORD *)(v3 + 96) = v30;
  v32[0] = v3;
  specialized Array._endMutation()();
  return v32[0];
}

id ShapeListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  objc_super v16;
  uint64_t v17;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  v10 = v3;
  *(_QWORD *)&v3[v8] = objc_msgSend(v9, sel_init);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackViewCols] = 3;
  v11 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1DDF354A0;
  *(_QWORD *)(v12 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)(v12 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)(v12 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  v17 = v12;
  specialized Array._endMutation()();
  *(_QWORD *)&v10[v11] = v12;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize] = vdupq_n_s64(0x406DC00000000000uLL);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin] = 0x4030000000000000;
  *(int64x2_t *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize] = vdupq_n_s64(0x404F000000000000uLL);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  if (a2)
  {
    v13 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  v16.receiver = v10;
  v16.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v16, sel_initWithNibName_bundle_, v13, a3);

  return v14;
}

id ShapeListViewController.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;
  uint64_t v12;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackView;
  v5 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, sel_init);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_stackViewCols] = 3;
  v7 = OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalStackViews;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1DDF354A0;
  *(_QWORD *)(v8 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)(v8 + 40) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)(v8 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  v12 = v8;
  specialized Array._endMutation()();
  *(_QWORD *)&v6[v7] = v8;
  *(int64x2_t *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_preferredPopoverSize] = vdupq_n_s64(0x406DC00000000000uLL);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_contentViewMargin] = 0x4030000000000000;
  *(int64x2_t *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_itemSize] = vdupq_n_s64(0x404F000000000000uLL);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_horizontalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_verticalInterItemSpacing] = 0x4024000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit23ShapeListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();

  v11.receiver = v6;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);

  return v9;
}

uint64_t type metadata accessor for ShapeListViewController()
{
  return objc_opt_self();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1DDC9E0C0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1DDC9E178()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  double *v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  double v54;
  id v55;
  char *v56;
  char *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  int64_t v75;
  char *v76;
  char *v77;
  char *v78;
  _BOOL4 v79;
  unint64_t v80;
  void *v81;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v77 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v76 = (char *)&v68 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v78 = (char *)&v68 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21.n128_f64[0] = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v68 - v20;
  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v74 = v5;
  v75 = 0;
  v72 = a1;
  v73 = (char *)&v68 - v20;
  v25 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v23 = v25;
  v26 = 1 << *(_BYTE *)(v24 - 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v23;
  v70 = v24;
  v71 = (unint64_t)(v26 + 63) >> 6;
  v69 = v71 - 1;
  while (1)
  {
    if (v28)
    {
      v29 = __clz(__rbit64(v28));
      v30 = (v28 - 1) & v28;
      v31 = v29 | (v75 << 6);
LABEL_8:
      v32 = v72;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v17, *(_QWORD *)(v72 + 48) + *(_QWORD *)(v5 + 72) * v31, v4, v21);
      v33 = *(_QWORD *)(v32 + 56) + 24 * v31;
      v35 = *(void **)v33;
      v34 = *(_QWORD *)(v33 + 8);
      v36 = *(_QWORD *)(v33 + 16);
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
      v38 = &v17[*(int *)(v37 + 48)];
      *(_QWORD *)v38 = v35;
      *((_QWORD *)v38 + 1) = v34;
      *((_QWORD *)v38 + 2) = v36;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 0, 1, v37);
      v39 = v35;
      swift_retain();
      goto LABEL_27;
    }
    v40 = v75 + 1;
    if (__OFADD__(v75, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v40 < v71)
    {
      v41 = *(_QWORD *)(v70 + 8 * v40);
      if (v41)
        goto LABEL_12;
      v42 = v75 + 2;
      ++v75;
      if (v40 + 1 < v71)
      {
        v41 = *(_QWORD *)(v70 + 8 * v42);
        if (v41)
          goto LABEL_15;
        v75 = v40 + 1;
        if (v40 + 2 < v71)
        {
          v41 = *(_QWORD *)(v70 + 8 * (v40 + 2));
          if (v41)
          {
            v40 += 2;
            goto LABEL_12;
          }
          v42 = v40 + 3;
          v75 = v40 + 2;
          if (v40 + 3 < v71)
            break;
        }
      }
    }
LABEL_26:
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v17, 1, 1, v43);
    v30 = 0;
LABEL_27:
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v17, (uint64_t)v22, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression)?);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    v45 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v22, 1, v44) == 1;
    if (v45)
      return;
    v79 = v45;
    v80 = v30;
    v46 = (double *)&v22[*(int *)(v44 + 48)];
    v47 = (uint64_t)v78;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v78, v22, v4);
    v81 = *(void **)v46;
    v48 = v46[2];
    v49 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
    LOBYTE(v46) = v50;
    v51 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v51(v47, v4);
    if ((v46 & 1) == 0)
    {
      swift_release();
LABEL_41:
      v64 = v81;
      goto LABEL_42;
    }
    v52 = v17;
    v53 = *(_QWORD *)(a2 + 56) + 24 * v49;
    v54 = *(double *)(v53 + 16);
    v55 = *(id *)v53;
    swift_retain();
    v56 = v76;
    CalculateExpression.id.getter();
    v57 = v77;
    CalculateExpression.id.getter();
    v58 = static UUID.== infix(_:_:)();
    v51((uint64_t)v57, v4);
    v51((uint64_t)v56, v4);
    if ((v58 & 1) == 0)
    {
      swift_release();
      swift_release();

      goto LABEL_41;
    }
    v59 = v4;
    v60 = CalculateExpression.expression.getter();
    v62 = v61;
    if (v60 == CalculateExpression.expression.getter() && v62 == v63)
    {
      swift_bridgeObjectRelease_n();
      v64 = v81;
    }
    else
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = v81;
      if ((v65 & 1) == 0)
        goto LABEL_38;
    }
    if (v54 != v48)
    {
LABEL_38:
      swift_release();
      swift_release();

LABEL_42:
      return;
    }
    v66 = CalculateExpression.format.getter();
    v67 = CalculateExpression.format.getter();
    swift_release();
    swift_release();

    v45 = v66 == v67;
    v4 = v59;
    v22 = v73;
    v5 = v74;
    v17 = v52;
    v28 = v80;
    if (!v45)
      return;
  }
  v41 = *(_QWORD *)(v70 + 8 * v42);
  if (v41)
  {
LABEL_15:
    v40 = v42;
LABEL_12:
    v30 = (v41 - 1) & v41;
    v31 = __clz(__rbit64(v41)) + (v40 << 6);
    v75 = v40;
    goto LABEL_8;
  }
  while (1)
  {
    v40 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v40 >= v71)
    {
      v75 = v69;
      goto LABEL_26;
    }
    v41 = *(_QWORD *)(v70 + 8 * v40);
    ++v42;
    if (v41)
      goto LABEL_12;
  }
LABEL_45:
  __break(1u);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL8 v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  void (*v46)(char *, uint64_t);
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v4 = type metadata accessor for AnyCRValue();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v47 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v15, v18);
  v21 = (int64_t *)((char *)&v47 - v20);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v51 = a2;
  v52 = 0;
  v50 = a1;
  v24 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v22 = v24;
  v25 = 1 << *(_BYTE *)(v23 - 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v22;
  v48 = v23;
  v49 = (unint64_t)(v25 + 63) >> 6;
  v47 = v49 - 1;
  while (1)
  {
    if (v27)
    {
      v28 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v29 = v51;
      v30 = v28 | (v52 << 6);
LABEL_8:
      v31 = *(_QWORD *)(v50 + 56);
      *(_QWORD *)v17 = *(_QWORD *)(*(_QWORD *)(v50 + 48) + 8 * v30);
      v32 = v31 + *(_QWORD *)(v5 + 72) * v30;
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(&v17[*(int *)(v33 + 48)], v32, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v17, 0, 1, v33);
      goto LABEL_30;
    }
    v29 = v51;
    v34 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v34 < v49)
    {
      v35 = *(_QWORD *)(v48 + 8 * v34);
      if (v35)
        goto LABEL_12;
      v36 = v52 + 2;
      ++v52;
      if (v34 + 1 < v49)
      {
        v35 = *(_QWORD *)(v48 + 8 * v36);
        if (v35)
          goto LABEL_15;
        v52 = v34 + 1;
        if (v34 + 2 < v49)
        {
          v35 = *(_QWORD *)(v48 + 8 * (v34 + 2));
          if (v35)
          {
            v34 += 2;
            goto LABEL_12;
          }
          v52 = v34 + 2;
          if (v34 + 3 < v49)
          {
            v35 = *(_QWORD *)(v48 + 8 * (v34 + 3));
            if (v35)
            {
              v34 += 3;
              goto LABEL_12;
            }
            v36 = v34 + 4;
            v52 = v34 + 3;
            if (v34 + 4 < v49)
              break;
          }
        }
      }
    }
LABEL_29:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v17, 1, 1, v37);
    v27 = 0;
LABEL_30:
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v17, (uint64_t)v21, &demangling cache variable for type metadata for (key: Int, value: AnyCRValue)?);
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Int, value: AnyCRValue));
    v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v21, 1, v38);
    v40 = v39 == 1;
    if (v39 == 1)
      return v40;
    v41 = (char *)v21 + *(int *)(v38 + 48);
    v42 = *v21;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v41, v4);
    v43 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
    if ((v44 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      return 0;
    }
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v9, *(_QWORD *)(v29 + 56) + *(_QWORD *)(v5 + 72) * v43, v4);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyCRValue and conformance AnyCRValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D116F0], MEMORY[0x1E0D11710]);
    v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    v46 = *(void (**)(char *, uint64_t))(v5 + 8);
    v46(v9, v4);
    result = ((uint64_t (*)(char *, uint64_t))v46)(v12, v4);
    if ((v45 & 1) == 0)
      return v40;
  }
  v35 = *(_QWORD *)(v48 + 8 * v36);
  if (v35)
  {
LABEL_15:
    v34 = v36;
LABEL_12:
    v27 = (v35 - 1) & v35;
    v30 = __clz(__rbit64(v35)) + (v34 << 6);
    v52 = v34;
    goto LABEL_8;
  }
  while (1)
  {
    v34 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v34 >= v49)
    {
      v52 = v47;
      goto LABEL_29;
    }
    v35 = *(_QWORD *)(v48 + 8 * v34);
    ++v36;
    if (v35)
      goto LABEL_12;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SortableCalculateExpression.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance SortableCalculateExpression.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance SortableCalculateExpression.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1DDC9ECBC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SortableCalculateExpression.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SortableCalculateExpression.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortableCalculateExpression.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1DDC9ED78 + 4 * byte_1DDF3B3DC[*v0]))();
}

void sub_1DDC9ED78(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001DDF4B810;
}

void sub_1DDC9ED98(_QWORD *a1@<X8>)
{
  *a1 = 0x65646E4974726F73;
  a1[1] = 0xE900000000000078;
}

void sub_1DDC9EDB8(_QWORD *a1@<X8>)
{
  *a1 = 0x74616D726F66;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortableCalculateExpression.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDC9EDF8 + 4 * byte_1DDF3B3E0[*v0]))(1684632949, 0xE400000000000000);
}

unint64_t sub_1DDC9EDF8()
{
  return 0xD000000000000010;
}

uint64_t sub_1DDC9EE14()
{
  return 0x65646E4974726F73;
}

uint64_t sub_1DDC9EE30()
{
  return 0x74616D726F66;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortableCalculateExpression.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortableCalculateExpression.CodingKeys()
{
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortableCalculateExpression.CodingKeys()
{
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CalculateMathItem.expressionString.getter in conformance SortableCalculateExpression()
{
  return CalculateExpression.expression.getter();
}

double protocol witness for CalculateMathItem.sortIndex.getter in conformance SortableCalculateExpression()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t protocol witness for CalculateMathItem.uuid.getter in conformance SortableCalculateExpression()
{
  return CalculateExpression.id.getter();
}

id protocol witness for CalculateMathItem.strokeGroupIdentifier.getter in conformance SortableCalculateExpression()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  return specialized static SortableCalculateExpression.== infix(_:_:)(*(double *)(a1 + 16), *(double *)(a2 + 16));
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortableCalculateExpression(_QWORD *a1)
{
  uint64_t v1;

  return specialized SortableCalculateExpression.encode(to:)(a1, *(_QWORD *)(v1 + 8), *(double *)(v1 + 16));
}

unint64_t protocol witness for Decodable.init(from:) in conformance SortableCalculateExpression@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = specialized SortableCalculateExpression.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x6973736572707865;
  a1[1] = 0xEB00000000736E6FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  return 0x6973736572707865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance CanvasCalculateDocumentProxy.CodingKeys, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  return CodingKey.debugDescription.getter();
}

unint64_t CanvasCalculateDocumentProxy.calculateDocumentProvider.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;

  v0 = MEMORY[0x1E0DEE9D8];
  v29 = MEMORY[0x1E0DEE9D8];
  v28 = MEMORY[0x1E0DEE9E8];
  if (!specialized CanvasCalculateDocumentProxy.document.getter())
    goto LABEL_37;
  swift_retain();
  v1 = dispatch thunk of CalculateDocument.declaredSymbols.getter();
  v2 = v1;
  v3 = 0;
  v4 = v1 + 56;
  v5 = 1 << *(_BYTE *)(v1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_6;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v14 >= v8)
      goto LABEL_22;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_22;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_22;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
          break;
      }
    }
LABEL_21:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_6:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v27, v12, v13);
    swift_bridgeObjectRelease();
  }
  v16 = v14 + 3;
  if (v16 < v8)
  {
    v15 = *(_QWORD *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        v3 = v16 + 1;
        if (__OFADD__(v16, 1))
          break;
        if (v3 >= v8)
          goto LABEL_22;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        ++v16;
        if (v15)
          goto LABEL_21;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      result = _CocoaArrayWrapper.endIndex.getter();
      v18 = result;
      if (!result)
        goto LABEL_36;
      goto LABEL_24;
    }
    v3 = v16;
    goto LABEL_21;
  }
LABEL_22:
  swift_release();
  result = dispatch thunk of CalculateDocument.expressions.getter();
  v2 = result;
  if (result >> 62)
    goto LABEL_35;
  v18 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v18)
  {
LABEL_36:
    swift_release();
    swift_bridgeObjectRelease();
    v0 = MEMORY[0x1E0DEE9D8];
    goto LABEL_37;
  }
LABEL_24:
  if (v18 < 1)
  {
    __break(1u);
  }
  else
  {
    v19 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        MEMORY[0x1DF0E4D64](v19, v2);
      else
        swift_retain();
      v20 = CalculateExpression.expression.getter();
      v22 = v21;
      v23 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MathExpression()), sel_init);
      v24 = (uint64_t *)&v23[OBJC_IVAR____TtC8PaperKit14MathExpression_expression];
      *v24 = v20;
      v24[1] = v22;
      swift_bridgeObjectRelease();
      v25 = v23;
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v19;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
    }
    while (v18 != v19);
    swift_release();
    swift_bridgeObjectRelease();
    v0 = v29;
LABEL_37:
    v26 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentProvider()), sel_init);
    *(_QWORD *)&v26[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_declaredVariables] = v28;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26[OBJC_IVAR____TtC8PaperKit25CalculateDocumentProvider_expressions] = v0;
    swift_bridgeObjectRelease();
    return (unint64_t)v26;
  }
  return result;
}

uint64_t CanvasCalculateDocumentProxy.insert(_:sortIndex:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v12;

  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalculateExpression.id.getter();
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(0, a1, (uint64_t)v9, isUniquelyReferenced_nonNull_native, a2);
  *(_QWORD *)(v2 + 24) = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = swift_endAccess();
  *(_BYTE *)(v2 + 16) = 1;
  return result;
}

uint64_t CanvasCalculateDocumentProxy.expression(withId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  specialized CanvasCalculateDocumentProxy.document.getter();
  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v3 + 56) + 24 * v4;
    v8 = *(void **)v6;
    v7 = *(_QWORD *)(v6 + 8);
    swift_endAccess();
    v9 = v8;
    swift_retain_n();
    outlined consume of SortableCalculateExpression?(v8, v7);
  }
  else
  {
    swift_endAccess();
    return 0;
  }
  return v7;
}

uint64_t CanvasCalculateDocumentProxy.expression(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GraphableExpression();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    v9 = CanvasCalculateDocumentProxy.expression(withId:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return v9;
}

uint64_t CanvasCalculateDocumentProxy.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CanvasCalculateDocumentProxy()
{
  return objc_opt_self();
}

uint64_t destroy for SortableCalculateExpression(id *a1)
{

  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for SortableCalculateExpression(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SortableCalculateExpression(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for SortableCalculateExpression(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SortableCalculateExpression(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SortableCalculateExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SortableCalculateExpression()
{
  return &type metadata for SortableCalculateExpression;
}

uint64_t protocol witness for CanvasCalculateDocument.document.getter in conformance CanvasCalculateDocumentProxy()
{
  specialized CanvasCalculateDocumentProxy.document.getter();
  return swift_retain();
}

uint64_t protocol witness for CanvasCalculateDocument.move(_:toIndex:) in conformance CanvasCalculateDocumentProxy(uint64_t a1, double *a2)
{
  return CanvasCalculateDocumentProxy.insert(_:sortIndex:)(a1, *a2);
}

void protocol witness for CanvasCalculateDocument.remove(_:) in conformance CanvasCalculateDocumentProxy()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalculateExpression.id.getter();
  swift_beginAccess();
  v7 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v6);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_endAccess();
  outlined consume of SortableCalculateExpression?(v7, v9);
  *(_BYTE *)(v1 + 16) = 1;
}

uint64_t protocol witness for CanvasCalculateDocument.graphableExpression(for:) in conformance CanvasCalculateDocumentProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  CalculateExpression.expression.getter();
  CalculateExpression.id.getter();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v9[1] = 0;
  GraphableExpression.init(expression:identifier:color:)(a1);
  v7 = type metadata accessor for GraphableExpression();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CanvasCalculateDocumentProxy@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized CanvasCalculateDocumentProxy.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t CanvasCalculateDocumentProxy.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CanvasCalculateDocumentProxy.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_beginAccess();
  v10 = *(_QWORD *)(v2 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SortableCalculateExpression]);
  lazy protocol witness table accessor for type [UUID : SortableCalculateExpression] and conformance <> [A : B]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CanvasCalculateDocumentProxy(_QWORD *a1)
{
  return CanvasCalculateDocumentProxy.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasCalculateDocumentProxy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  v4 = *(_QWORD *)(v2 + 24);
  swift_beginAccess();
  v5 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized static Dictionary<>.== infix(_:_:)(v4, v5);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SortableCalculateExpression>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CGFloat>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(pageIndex: Int, queryResult: SearchQueryResult)>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, SearchQueryResult)>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocumentFindResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: CGPoint)>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ReflowTextLine>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 160);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[160 * v8])
      memmove(v12, v13, 160 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[160 * v8] || v12 >= &v13[160 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(CGPoint, CGPoint)>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SearchQueryResult>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Color>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakObserver>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 < a4 || v13 >= v14 + 16 * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CalculateMathItem>, &demangling cache variable for type metadata for CalculateMathItem);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyCanvas, CGFloat)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyCanvas, CGFloat));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRKeyPath, AnyCanvasElementView)>, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD10B8]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UITextContentType>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for UITextContentType(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<FindResult>, &demangling cache variable for type metadata for FindResult);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<PDFAnnotationElement>>, &demangling cache variable for type metadata for WeakRef<PDFAnnotationElement>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStrokePoint>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD1000]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Set<ResizeHandleType>>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<ResizeHandleType>);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkItem>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LinkItem);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9])
      memmove(v13, v14, 40 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v9] || v13 >= &v14[40 * v9])
  {
    memcpy(v13, v14, 40 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9])
      memmove(v14, v15, 32 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v9] || v14 >= &v15[32 * v9])
  {
    memcpy(v14, v15, 32 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size_0(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v15 = (unint64_t)(v13 + 4);
  v16 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11)
      memmove(v13 + 4, a4 + 4, 40 * v11);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size_0(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 24 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v13 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
    v7 = v13;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7, v10, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v13 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
    v7 = v13;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for CRKeyPath();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70];
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7, v10, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v13 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>);
    v7 = v13;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for CRAsset();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958];
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7, v10, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v11;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for CRKeyPath();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }

  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v14;
    }
    v12 = *(_QWORD *)(v11 + 48);
    v13 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * v6, v13);
    outlined init with take of WeakCalculateExpression(*(_QWORD *)(v11 + 56) + 8 * v6, a2);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v3;
    v18 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v18;
    }

    v12 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 40 * v6);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *v3 = v11;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v17;
  *(_BYTE *)(a2 + 40) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v11 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(Swift::UInt *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for PDFPageID();
  outlined destroy of PDFPageID(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(unint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  Swift::Int v17;

  v2 = v1;
  v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v9 = *v2;
      v17 = *v2;
      *v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0)
    v5 = v4;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v6 = (id)a1;
  v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  v8 = __CocoaSet.count.getter();
  v9 = specialized _NativeDictionary.init(_:capacity:)(v5, v8);
  swift_retain();
  a1 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
  v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * a1);
  specialized _NativeDictionary._delete(at:)(a1, v9);
  *v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  outlined consume of Data._Representation(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v6), *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v6 + 8));
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 24 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v34(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v35)
        {
          if (v20 >= v35 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = v23 + 24 * a1;
            v25 = (__int128 *)(v23 + 24 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= (unint64_t)v25 + 24))
            {
              v26 = *v25;
              *(_QWORD *)(v24 + 16) = *((_QWORD *)v25 + 2);
              *(_OWORD *)v24 = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v35 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v32 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v31(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v32)
        {
          if (v20 >= v32 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            if (a1 < (uint64_t)v10 || *(_QWORD *)(a2 + 56) + 8 * a1 >= *(_QWORD *)(a2 + 56) + 8 * v10 + 8)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v16;
              v14 = v18;
            }
            else
            {
              v23 = a1 == v10;
              a1 = v10;
              v13 = v16;
              v14 = v18;
              if (!v23)
              {
                swift_arrayInitWithTakeBackToFront();
                v14 = v18;
                v13 = v16;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v32 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v24;
    v26 = (-1 << a1) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
}

{
  specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v31 = type metadata accessor for PDFPageID();
  v4 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v5);
  v7 = (Swift::UInt *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v30 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v4 + 72);
      v14 = v11;
      do
      {
        v15 = v13;
        v16 = v13 * v10;
        v17 = v14;
        outlined init with copy of PDFPageID(*(_QWORD *)(a2 + 48) + v13 * v10, (uint64_t)v7);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*v7);
        type metadata accessor for CRAsset();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
        dispatch thunk of Hashable.hash(into:)();
        v18 = Hasher._finalize()();
        outlined destroy of PDFPageID((uint64_t)v7);
        v14 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v30)
        {
          if (v19 < v30)
          {
            v13 = v15;
          }
          else
          {
            v13 = v15;
            if (a1 >= v19)
              goto LABEL_12;
          }
        }
        else
        {
          v13 = v15;
          if (v19 >= v30 || a1 >= v19)
          {
LABEL_12:
            if (v13 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v13 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v13))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_17:
              v14 = v17;
            }
            else if (v13 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_17;
            }
            v20 = *(_QWORD *)(a2 + 56);
            v21 = (_QWORD *)(v20 + 8 * a1);
            v22 = (_QWORD *)(v20 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v21 >= v22 + 1))
            {
              *v21 = *v22;
              a1 = v10;
            }
          }
        }
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v23 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v24 = *v23;
    v25 = (-1 << a1) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v25 = *v23;
    v24 = (-1 << a1) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for CRKeyPath();
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v33(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v34)
        {
          if (v20 >= v34 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v34 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v38 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v39 + 72);
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v37(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v38)
        {
          if (v20 >= v38 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>)
                                        - 8)
                            + 72);
            v25 = v24 * a1;
            v26 = v23 + v24 * a1;
            v27 = v24 * v10;
            v28 = v23 + v24 * v10 + v24;
            if (v25 < v27 || v26 >= v28)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v14 = v18;
            }
            else
            {
              a1 = v10;
              v14 = v18;
              if (v25 != v27)
              {
                swift_arrayInitWithTakeBackToFront();
                v14 = v18;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v38 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
LABEL_5:
        v10 = (v10 + 1) & v14;
        v13 = v16;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v12 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (v12 + 1) & v11;
      v13 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v14 = v11;
      do
      {
        v15 = v8;
        v16 = v13;
        v17 = v13 * v10;
        v18 = v14;
        v34(v7, *(_QWORD *)(a2 + 48) + v13 * v10, v4);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v14 = v18;
        v20 = v19 & v18;
        if (a1 >= (uint64_t)v35)
        {
          if (v20 >= v35 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            v8 = v15;
            if (v16 * a1 < v17
              || (v13 = v16, *(_QWORD *)(a2 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v17 + v16)))
            {
              swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v14 = v18;
              v13 = v16;
            }
            else if (v16 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v35 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        v8 = v15;
        v13 = v16;
LABEL_5:
        v10 = (v10 + 1) & v14;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a4;
  v40 = a5;
  v38 = a3;
  v7 = a3(0);
  v41 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - v9;
  v11 = a2 + 64;
  v12 = -1 << *(_BYTE *)(a2 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(a2 + 64 + 8 * (v13 >> 6))) != 0)
  {
    v14 = ~v12;
    v15 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v37 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v41 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      v17 = v14;
      do
      {
        v18 = v11;
        v19 = v16;
        v20 = v16 * v13;
        v21 = v17;
        v36(v10, *(_QWORD *)(a2 + 48) + v16 * v13, v7);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v39, v38, v40);
        v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v7);
        v17 = v21;
        v23 = v22 & v21;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            v16 = v19;
            if (v19 * a1 < v20
              || *(_QWORD *)(a2 + 48) + v19 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v20 + v19))
            {
              swift_arrayInitWithTakeFrontToBack();
              v17 = v21;
              v11 = v18;
            }
            else
            {
              v26 = v19 * a1 == v20;
              v11 = v18;
              if (!v26)
              {
                swift_arrayInitWithTakeBackToFront();
                v17 = v21;
              }
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = (_QWORD *)(v27 + 8 * a1);
            v29 = (_QWORD *)(v27 + 8 * v13);
            if (a1 != v13 || (a1 = v13, v28 >= v29 + 1))
            {
              *v28 = *v29;
              a1 = v13;
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }
        v11 = v18;
        v16 = v19;
LABEL_5:
        v13 = (v13 + 1) & v17;
      }
      while (((*(_QWORD *)(v11 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    v30 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v30;
    v32 = (-1 << a1) - 1;
  }
  else
  {
    v30 = (uint64_t *)(v11 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v30;
    v31 = (-1 << a1) - 1;
  }
  *v30 = v32 & v31;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = __OFSUB__(v33, 1);
  v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        v11 = v10;
        String.hash(into:)();
        v12 = Hasher._finalize()();

        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 2))
          {
            v9 = v19[1];
            *v18 = *v19;
            v18[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for UUID() - 8) + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v11, v12);
        Data.hash(into:)();
        v13 = Hasher._finalize()();
        result = outlined consume of Data._Representation(v11, v12);
        v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8)
            goto LABEL_5;
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(a2 + 48);
          v16 = (_OWORD *)(v15 + 16 * v3);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1)
            *v16 = *v17;
          v18 = *(_QWORD *)(a2 + 56);
          v19 = v18 + 24 * v3;
          v20 = (__int128 *)(v18 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v19 >= (unint64_t)v20 + 24 || (v21 = v3 == v6, v3 = v6, !v21))
          {
            v9 = *v20;
            *(_QWORD *)(v19 + 16) = *((_QWORD *)v20 + 2);
            *(_OWORD *)v19 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)();
        outlined copy of Data._Representation(v10, v11);
        Data.hash(into:)();
        v12 = Hasher._finalize()();
        result = outlined consume of Data._Representation(v10, v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  Swift::Int v12;
  id v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v12 = *(_QWORD *)(a2 + 40);
        v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v14 = NSObject._rawHashValue(seed:)(v12);

        v15 = v14 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v15 >= v9 && v3 >= v15)
          {
LABEL_16:
            v18 = *(_QWORD *)(a2 + 48);
            v19 = (_QWORD *)(v18 + 8 * v3);
            v20 = (_QWORD *)(v18 + 8 * v6);
            if (v3 != v6 || v19 >= v20 + 1)
              *v19 = *v20;
            v21 = *(_QWORD *)(a2 + 56);
            v22 = v21 + 40 * v3;
            v23 = (__int128 *)(v21 + 40 * v6);
            if (v3 != v6 || (v3 = v6, v22 >= (unint64_t)v23 + 40))
            {
              v10 = *v23;
              v11 = v23[1];
              *(_QWORD *)(v22 + 32) = *((_QWORD *)v23 + 4);
              *(_OWORD *)v22 = v10;
              *(_OWORD *)(v22 + 16) = v11;
              v3 = v6;
            }
          }
        }
        else if (v15 >= v9 || v3 >= v15)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 32);
    v21 = *(_OWORD *)v19;
    v22 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v23 = v21;
    *(_OWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 32) = v20;
    result = v17;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 32);
    v21 = *(_OWORD *)v19;
    v22 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v23 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v23 = v21;
    *(_OWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 32) = v20;
    result = v17;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v23;
    v19 = v17;
    result = (id)v23;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  const void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v39 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v2);
  v38 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  v35 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)();
  v6 = *(_QWORD *)(v4 + 16);
  v41 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v33 = v41;
    v32 = v35;
LABEL_28:
    *v32 = v33;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v37 = (const void *)(v4 + 64);
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, v37, 8 * v9);
    v7 = v41;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v40 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v36 = (unint64_t)(v12 + 63) >> 6;
  v16 = v38;
  v15 = v39;
  v17 = v41;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v40;
      goto LABEL_12;
    }
    v29 = v11 + 1;
    v20 = v40;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v36)
      goto LABEL_26;
    v30 = *((_QWORD *)v37 + v29);
    ++v11;
    if (!v30)
    {
      v11 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_26;
      v30 = *((_QWORD *)v37 + v11);
      if (!v30)
        break;
    }
LABEL_25:
    v14 = (v30 - 1) & v30;
    v19 = __clz(__rbit64(v30)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = 24 * v19;
    v23 = *(_QWORD *)(v20 + 56) + 24 * v19;
    v24 = *(void **)v23;
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_QWORD *)(v23 + 16);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v27 = (_QWORD *)(*(_QWORD *)(v17 + 56) + v22);
    *v27 = v24;
    v27[1] = v25;
    v27[2] = v26;
    v28 = v24;
    result = (void *)swift_retain();
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_26:
    result = (void *)swift_release();
    v32 = v35;
    v33 = v41;
    goto LABEL_28;
  }
  v30 = *((_QWORD *)v37 + v31);
  if (v30)
  {
    v11 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v11 >= v36)
      goto LABEL_26;
    v30 = *((_QWORD *)v37 + v11);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27[8];

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v25 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v26 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_25:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    outlined init with copy of WeakCalculateExpression();
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    result = (void *)outlined init with take of WeakCalculateExpression((uint64_t)v27, *(_QWORD *)(v9 + 56) + 8 * v19);
  }
  v23 = v21 + 2;
  if (v23 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28[2];

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateMathItem>);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 40 * v19;
    outlined init with copy of FindResult(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v28);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    result = (void *)outlined init with take of FindResult(v28, *(_QWORD *)(v9 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = type metadata accessor for UUID();
  v1 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v32 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = *(_QWORD *)(v5 + 16);
  v36 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v30 = v36;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v36;
  }
  v33 = v5 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v13 + 63) >> 6;
  v16 = v35;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v26 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v12;
    if (!v27)
    {
      v12 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v12);
      if (!v27)
        break;
    }
LABEL_25:
    v15 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v4, *(_QWORD *)(v5 + 56) + v23, v16);
    v24 = v36;
    v25 = (_QWORD *)(*(_QWORD *)(v36 + 48) + v19);
    *v25 = v22;
    v25[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v24 + 56) + v23, v4, v16);
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v36;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v12 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v12 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v12);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  unint64_t v22;
  uint64_t (*v23)(unint64_t, char *, uint64_t);
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v9;
    return result;
  }
  v30 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v31 = v7 + 64;
  v12 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v13 = 1 << *(_BYTE *)(v7 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v7 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v16)
      goto LABEL_23;
    v28 = *(_QWORD *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      v12 = v27 + 1;
      if (v27 + 1 >= v16)
        goto LABEL_23;
      v28 = *(_QWORD *)(v31 + 8 * v12);
      if (!v28)
        break;
    }
LABEL_22:
    v15 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v2);
    v20 = 48 * v18;
    v21 = (__int128 *)(*(_QWORD *)(v7 + 56) + v20);
    v22 = *(_QWORD *)(v9 + 48) + v19;
    v23 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v24 = *v21;
    v33 = v21[1];
    v34 = v24;
    v32 = v21[2];
    result = (void *)v23(v22, v6, v2);
    v25 = (_OWORD *)(*(_QWORD *)(v9 + 56) + v20);
    v26 = v33;
    *v25 = v34;
    v25[1] = v26;
    v25[2] = v32;
  }
  v29 = v27 + 2;
  if (v29 >= v16)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v30;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v31 + 8 * v29);
  if (v28)
  {
    v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v12 >= v16)
      goto LABEL_23;
    v28 = *(_QWORD *)(v31 + 8 * v12);
    ++v29;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for CRKeyPath();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v25 = v8;
    return result;
  }
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v26 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = (void *)swift_retain();
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for PDFPageID();
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = v6 + 64;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v17)
        goto LABEL_26;
      v24 = *(_QWORD *)(v10 + 8 * v13);
      if (!v24)
        break;
    }
LABEL_25:
    v16 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v27 + 72) * v19;
    outlined init with copy of PDFPageID(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v21);
    result = (void *)outlined init with take of PDFPageID((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v10 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v24 = *(_QWORD *)(v10 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_unknownObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_unknownObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = 24 * v15;
    v18 = *(_QWORD *)(v2 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(void **)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    v22 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v22;
    v23 = *(_QWORD *)(v4 + 56) + v17;
    *(_QWORD *)v23 = v19;
    *(_QWORD *)(v23 + 8) = v20;
    *(_BYTE *)(v23 + 16) = v21;
    outlined copy of Data._Representation(v22, *((unint64_t *)&v22 + 1));
    result = outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v19, v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v20;
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v21 = v18;
    v21[1] = v19;
    outlined copy of Data._Representation(v20, *((unint64_t *)&v20 + 1));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  __int128 v25;
  _OWORD *v26;
  __int128 v27;
  id v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v9;
    return result;
  }
  v32 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v33 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v29 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v17)
      goto LABEL_26;
    v30 = *(_QWORD *)(v33 + 8 * v29);
    ++v13;
    if (!v30)
    {
      v13 = v29 + 1;
      if (v29 + 1 >= v17)
        goto LABEL_26;
      v30 = *(_QWORD *)(v33 + 8 * v13);
      if (!v30)
        break;
    }
LABEL_25:
    v16 = (v30 - 1) & v30;
    v19 = __clz(__rbit64(v30)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 32 * v19;
    v22 = (__int128 *)(*(_QWORD *)(v7 + 56) + v21);
    v23 = *(_QWORD *)(v9 + 48) + v20;
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v25 = v22[1];
    v34 = *v22;
    v35 = v25;
    v24(v23, v6, v2);
    v26 = (_OWORD *)(*(_QWORD *)(v9 + 56) + v21);
    v27 = v35;
    *v26 = v34;
    v26[1] = v27;
    swift_bridgeObjectRetain();
    v28 = *((id *)&v34 + 1);
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v31 = v29 + 2;
  if (v31 >= v17)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v32;
    goto LABEL_28;
  }
  v30 = *(_QWORD *)(v33 + 8 * v31);
  if (v30)
  {
    v13 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v30 = *(_QWORD *)(v33 + 8 * v13);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>, (uint64_t (*)(_QWORD, double))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v14)
      goto LABEL_26;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v14)
        goto LABEL_26;
      v23 = *(_QWORD *)(v7 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_25:
    v13 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
    v21 = v18;
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v14)
    goto LABEL_26;
  v23 = *(_QWORD *)(v7 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v23 = *(_QWORD *)(v7 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v28 = v2;
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v28 = v11;
    return result;
  }
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v29 = v9 + 64;
  v30 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v21, v4);
    v22 = 8 * v20;
    v23 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + v22);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v21, v8, v4);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v22) = v23;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
    goto LABEL_26;
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v28 = v2;
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v28 = v11;
    return result;
  }
  result = (id)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v29 = v9 + 64;
  v30 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v30)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v21, v4);
    v22 = 8 * v20;
    v23 = *(void **)(*(_QWORD *)(v9 + 56) + v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v21, v8, v4);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v22) = v23;
    result = v23;
  }
  v26 = v24 + 2;
  if (v26 >= v30)
    goto LABEL_26;
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v30)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t (*a2)(_QWORD, double), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *result;
  char *v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;

  v49 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v45 = *(_QWORD *)(v49 - 8);
  v7 = MEMORY[0x1E0C80A78](v49, v6);
  v48 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a2(0, v7);
  v44 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v9);
  v46 = (char *)&v41 - v10;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v41 = v3;
  v11 = *v3;
  v12 = static _DictionaryStorage.copy(original:)();
  v13 = *(_QWORD *)(v11 + 16);
  v51 = v12;
  if (!v13)
  {
    result = (char *)swift_release();
    v40 = v51;
    v39 = v41;
LABEL_25:
    *v39 = v40;
    return result;
  }
  v14 = v12;
  result = (char *)(v12 + 64);
  v16 = (char *)(v11 + 64);
  v17 = (unint64_t)((1 << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  v42 = v11 + 64;
  if (v14 != v11 || result >= &v16[8 * v17])
  {
    result = (char *)memmove(result, v16, 8 * v17);
    v14 = v51;
  }
  v18 = 0;
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v11 + 16);
  v19 = 1 << *(_BYTE *)(v11 + 32);
  v50 = v11;
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & *(_QWORD *)(v11 + 64);
  v43 = (unint64_t)(v19 + 63) >> 6;
  v22 = v44;
  v23 = v45;
  v25 = v46;
  v24 = v47;
  v26 = v49;
  v27 = v51;
  while (1)
  {
    if (v21)
    {
      v28 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v52 = v18;
      v29 = v28 | (v18 << 6);
      v30 = v50;
      goto LABEL_9;
    }
    v35 = v18 + 1;
    v30 = v50;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v35 >= v43)
      goto LABEL_23;
    v36 = *(_QWORD *)(v42 + 8 * v35);
    v37 = v18 + 1;
    if (!v36)
    {
      v37 = v35 + 1;
      if (v35 + 1 >= v43)
        goto LABEL_23;
      v36 = *(_QWORD *)(v42 + 8 * v37);
      if (!v36)
        break;
    }
LABEL_22:
    v21 = (v36 - 1) & v36;
    v52 = v37;
    v29 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_9:
    v31 = *(_QWORD *)(v22 + 72) * v29;
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v25, *(_QWORD *)(v30 + 48) + v31, v24);
    v32 = *(_QWORD *)(v23 + 72) * v29;
    v33 = *(_QWORD *)(v30 + 56) + v32;
    v34 = v48;
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v48, v33, v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(*(_QWORD *)(v27 + 48) + v31, v25, v24);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))(*(_QWORD *)(v27 + 56) + v32, v34, v26);
    v18 = v52;
  }
  v38 = v35 + 2;
  if (v38 >= v43)
  {
LABEL_23:
    result = (char *)swift_release();
    v39 = v41;
    v40 = v51;
    goto LABEL_25;
  }
  v36 = *(_QWORD *)(v42 + 8 * v38);
  if (v36)
  {
    v37 = v38;
    goto LABEL_22;
  }
  while (1)
  {
    v37 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v37 >= v43)
      goto LABEL_23;
    v36 = *(_QWORD *)(v42 + 8 * v37);
    ++v38;
    if (v36)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  double *v31;
  double v32;
  Swift::Int v33;
  double *v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  Swift::Int v109;
  Swift::Int v110;
  uint64_t v111;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v88 = *a1;
      v89 = *a1 + 16;
      v90 = -1;
      for (i = 1; i != v3; ++i)
      {
        v92 = *(double *)(v88 + 24 * i + 16);
        v93 = v90;
        v94 = v89;
        do
        {
          if (v92 >= *(double *)v94)
            break;
          if (!v88)
            goto LABEL_141;
          v95 = *(_QWORD *)(v94 + 8);
          v96 = *(_QWORD *)(v94 + 16);
          *(_OWORD *)(v94 + 8) = *(_OWORD *)(v94 - 16);
          *(_QWORD *)(v94 + 24) = *(_QWORD *)v94;
          *(_QWORD *)(v94 - 16) = v95;
          *(_QWORD *)(v94 - 8) = v96;
          *(double *)v94 = v92;
          v94 -= 24;
        }
        while (!__CFADD__(v93++, 1));
        v89 += 24;
        --v90;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v106 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v98 = v12;
      v108 = v9;
      if (v13 >= 2)
      {
        v99 = *v106;
        do
        {
          v100 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v99)
            goto LABEL_145;
          v101 = v98;
          v102 = *(_QWORD *)&v98[16 * v100 + 32];
          v103 = *(_QWORD *)&v98[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v99 + 24 * v102), (double *)(v99 + 24 * *(_QWORD *)&v98[16 * v13 + 16]), v99 + 24 * v103, __dst);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v101 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_134;
          v104 = &v101[16 * v100 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v101 + 2);
          if (v13 > v105)
            goto LABEL_135;
          memmove(&v101[16 * v13 + 16], &v101[16 * v13 + 32], 16 * (v105 - v13));
          v98 = v101;
          *((_QWORD *)v101 + 2) = v105 - 1;
          v13 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v108 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v108 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v107 = *a1 + 64;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v109 = v6;
  v110 = v3;
  v111 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 24 * v10 + 16);
      v16 = *(double *)(v11 + 24 * v14 + 16);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v107 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 3;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = 24 * v10;
          v21 = 24 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_144;
              v24 = v11 + v21;
              v25 = v11 + v20;
              v26 = *(_QWORD *)(v11 + v21);
              v27 = *(_QWORD *)(v11 + v21 + 8);
              v28 = *(_QWORD *)(v11 + v21 + 16);
              v29 = *(_QWORD *)(v11 + v20 - 8);
              *(_OWORD *)v24 = *(_OWORD *)(v11 + v20 - 24);
              *(_QWORD *)(v24 + 16) = v29;
              *(_QWORD *)(v25 - 24) = v26;
              *(_QWORD *)(v25 - 16) = v27;
              *(_QWORD *)(v25 - 8) = v28;
            }
            ++v23;
            v20 -= 24;
            v21 += 24;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v30 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v30 >= v3)
      v30 = v3;
    if (v30 < v14)
      break;
    if (v10 != v30)
    {
      v31 = (double *)(v11 + 24 * v10);
      do
      {
        v32 = *(double *)(v11 + 24 * v10 + 16);
        v33 = v14;
        v34 = v31;
        do
        {
          if (v32 >= *(v34 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v35 = *v34;
          v36 = *((_QWORD *)v34 + 1);
          *(_OWORD *)v34 = *(_OWORD *)(v34 - 3);
          v34[2] = *(v34 - 1);
          *((_QWORD *)v34 - 2) = v36;
          *(v34 - 1) = v32;
          *(v34 - 3) = v35;
          v34 -= 3;
          ++v33;
        }
        while (v10 != v33);
        ++v10;
        v31 += 3;
      }
      while (v10 != v30);
      v10 = v30;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v38 = *((_QWORD *)v12 + 2);
    v37 = *((_QWORD *)v12 + 3);
    v13 = v38 + 1;
    v11 = v111;
    if (v38 >= v37 >> 1)
    {
      v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v12);
      v11 = v111;
      v12 = v87;
    }
    *((_QWORD *)v12 + 2) = v13;
    v39 = v12 + 32;
    v40 = &v12[16 * v38 + 32];
    *(_QWORD *)v40 = v14;
    *((_QWORD *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        v41 = v13 - 1;
        if (v13 >= 4)
        {
          v46 = &v39[16 * v13];
          v47 = *((_QWORD *)v46 - 8);
          v48 = *((_QWORD *)v46 - 7);
          v52 = __OFSUB__(v48, v47);
          v49 = v48 - v47;
          if (v52)
            goto LABEL_120;
          v51 = *((_QWORD *)v46 - 6);
          v50 = *((_QWORD *)v46 - 5);
          v52 = __OFSUB__(v50, v51);
          v44 = v50 - v51;
          v45 = v52;
          if (v52)
            goto LABEL_121;
          v53 = v13 - 2;
          v54 = &v39[16 * v13 - 32];
          v56 = *(_QWORD *)v54;
          v55 = *((_QWORD *)v54 + 1);
          v52 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          if (v52)
            goto LABEL_123;
          v52 = __OFADD__(v44, v57);
          v58 = v44 + v57;
          if (v52)
            goto LABEL_126;
          if (v58 >= v49)
          {
            v76 = &v39[16 * v41];
            v78 = *(_QWORD *)v76;
            v77 = *((_QWORD *)v76 + 1);
            v52 = __OFSUB__(v77, v78);
            v79 = v77 - v78;
            if (v52)
              goto LABEL_130;
            v69 = v44 < v79;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v70 = *((_QWORD *)v12 + 4);
            v71 = *((_QWORD *)v12 + 5);
            v52 = __OFSUB__(v71, v70);
            v63 = v71 - v70;
            v64 = v52;
            goto LABEL_77;
          }
          v43 = *((_QWORD *)v12 + 4);
          v42 = *((_QWORD *)v12 + 5);
          v52 = __OFSUB__(v42, v43);
          v44 = v42 - v43;
          v45 = v52;
        }
        if ((v45 & 1) != 0)
          goto LABEL_122;
        v53 = v13 - 2;
        v59 = &v39[16 * v13 - 32];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v62 = __OFSUB__(v60, v61);
        v63 = v60 - v61;
        v64 = v62;
        if (v62)
          goto LABEL_125;
        v65 = &v39[16 * v41];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v52 = __OFSUB__(v66, v67);
        v68 = v66 - v67;
        if (v52)
          goto LABEL_128;
        if (__OFADD__(v63, v68))
          goto LABEL_129;
        if (v63 + v68 >= v44)
        {
          v69 = v44 < v68;
LABEL_83:
          if (v69)
            v41 = v53;
          goto LABEL_85;
        }
LABEL_77:
        if ((v64 & 1) != 0)
          goto LABEL_124;
        v72 = &v39[16 * v41];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v52 = __OFSUB__(v73, v74);
        v75 = v73 - v74;
        if (v52)
          goto LABEL_127;
        if (v75 < v63)
          goto LABEL_15;
LABEL_85:
        v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v81 = v12;
        v82 = &v39[16 * v80];
        v83 = *(_QWORD *)v82;
        v84 = &v39[16 * v41];
        v85 = *((_QWORD *)v84 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 24 * *(_QWORD *)v82), (double *)(v11 + 24 * *(_QWORD *)v84), v11 + 24 * v85, __dst);
        if (v1)
          goto LABEL_93;
        if (v85 < v83)
          goto LABEL_117;
        if (v41 > *((_QWORD *)v81 + 2))
          goto LABEL_118;
        *(_QWORD *)v82 = v83;
        *(_QWORD *)&v39[16 * v80 + 8] = v85;
        v86 = *((_QWORD *)v81 + 2);
        if (v41 >= v86)
          goto LABEL_119;
        v12 = v81;
        v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((_QWORD *)v81 + 2) = v86 - 1;
        v11 = v111;
        if (v86 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v109;
    v3 = v110;
    if (v10 >= v110)
    {
      v9 = v108;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  _BOOL4 v18;
  Swift::Int v19;
  double *v20;
  double v21;
  double v22;
  __int128 *v23;
  Swift::Int v24;
  Swift::Int v25;
  __int128 *v26;
  __int128 v27;
  Swift::Int v28;
  uint64_t v29;
  double v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  Swift::Int v98;
  Swift::Int v99;
  uint64_t v100;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_151;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_159;
  v98 = result;
  v99 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_117:
      v97 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_146;
          if (!v86)
            goto LABEL_158;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v86 + 16 * v90), (double *)(v86 + 16 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 16 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_147;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_148;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_149;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v97 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v97 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    type metadata accessor for CGPoint(0);
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v99;
    v97 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 + 8;
  v96 = *v2 - 16;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v100 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (double *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (double *)(v10 + 16 * v13);
    if (v15 >= *v17)
    {
      if (v15 == *v17)
      {
        v18 = v16 < v17[1];
        v9 = v13 + 2;
        if (v13 + 2 >= v3)
        {
LABEL_38:
          if (!v18)
            goto LABEL_46;
LABEL_39:
          if (v9 < v13)
            goto LABEL_152;
          goto LABEL_40;
        }
      }
      else
      {
        v9 = v13 + 2;
        if (v13 + 2 >= v3)
          goto LABEL_46;
        v18 = 0;
      }
LABEL_25:
      if (v3 <= v9 + 1)
        v19 = v9 + 1;
      else
        v19 = v3;
      v20 = (double *)(v95 + 16 * v9);
      do
      {
        v21 = v15;
        v22 = v16;
        v15 = *(v20 - 1);
        v16 = *v20;
        if (v15 < v21)
        {
          if (!v18)
            goto LABEL_46;
        }
        else if (v15 == v21)
        {
          if (((v18 ^ (v16 >= v22)) & 1) == 0)
            goto LABEL_38;
        }
        else if (v18)
        {
          goto LABEL_39;
        }
        ++v9;
        v20 += 2;
      }
      while (v9 < v3);
      v9 = v19;
      goto LABEL_38;
    }
    v9 = v13 + 2;
    if (v13 + 2 < v3)
    {
      v18 = 1;
      goto LABEL_25;
    }
LABEL_40:
    if (v13 < v9)
    {
      v23 = (__int128 *)(v96 + 16 * v9);
      v24 = v9;
      v25 = v13;
      v26 = (__int128 *)(v10 + 16 * v13);
      do
      {
        if (v25 != --v24)
        {
          if (!v10)
            goto LABEL_157;
          v27 = *v26;
          *v26 = *v23;
          *v23 = v27;
        }
        ++v25;
        --v23;
        ++v26;
      }
      while (v25 < v24);
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_150;
      if (v9 - v13 < v98)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_145;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v36 = *((_QWORD *)v11 + 2);
    v35 = *((_QWORD *)v11 + 3);
    v12 = v36 + 1;
    v10 = v100;
    if (v36 >= v35 >> 1)
    {
      v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v11);
      v10 = v100;
      v11 = v85;
    }
    *((_QWORD *)v11 + 2) = v12;
    v37 = v11 + 32;
    v38 = &v11[16 * v36 + 32];
    *(_QWORD *)v38 = v13;
    *((_QWORD *)v38 + 1) = v9;
    if (v36)
    {
      while (1)
      {
        v39 = v12 - 1;
        if (v12 >= 4)
        {
          v44 = &v37[16 * v12];
          v45 = *((_QWORD *)v44 - 8);
          v46 = *((_QWORD *)v44 - 7);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_134;
          v49 = *((_QWORD *)v44 - 6);
          v48 = *((_QWORD *)v44 - 5);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_135;
          v51 = v12 - 2;
          v52 = &v37[16 * v12 - 32];
          v54 = *(_QWORD *)v52;
          v53 = *((_QWORD *)v52 + 1);
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_137;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_140;
          if (v56 >= v47)
          {
            v74 = &v37[16 * v39];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_144;
            v67 = v42 < v77;
            goto LABEL_104;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v68 = *((_QWORD *)v11 + 4);
            v69 = *((_QWORD *)v11 + 5);
            v50 = __OFSUB__(v69, v68);
            v61 = v69 - v68;
            v62 = v50;
            goto LABEL_98;
          }
          v41 = *((_QWORD *)v11 + 4);
          v40 = *((_QWORD *)v11 + 5);
          v50 = __OFSUB__(v40, v41);
          v42 = v40 - v41;
          v43 = v50;
        }
        if ((v43 & 1) != 0)
          goto LABEL_136;
        v51 = v12 - 2;
        v57 = &v37[16 * v12 - 32];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v60 = __OFSUB__(v58, v59);
        v61 = v58 - v59;
        v62 = v60;
        if (v60)
          goto LABEL_139;
        v63 = &v37[16 * v39];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v50 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v50)
          goto LABEL_142;
        if (__OFADD__(v61, v66))
          goto LABEL_143;
        if (v61 + v66 >= v42)
        {
          v67 = v42 < v66;
LABEL_104:
          if (v67)
            v39 = v51;
          goto LABEL_106;
        }
LABEL_98:
        if ((v62 & 1) != 0)
          goto LABEL_138;
        v70 = &v37[16 * v39];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v50 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v50)
          goto LABEL_141;
        if (v73 < v61)
          goto LABEL_15;
LABEL_106:
        v78 = v39 - 1;
        if (v39 - 1 >= v12)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v10)
          goto LABEL_156;
        v79 = &v37[16 * v78];
        v80 = *(_QWORD *)v79;
        v81 = v37;
        v82 = &v37[16 * v39];
        v83 = *((_QWORD *)v82 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v10 + 16 * *(_QWORD *)v79), (double *)(v10 + 16 * *(_QWORD *)v82), v10 + 16 * v83, __dst);
        if (v1)
          goto LABEL_128;
        if (v83 < v80)
          goto LABEL_131;
        if (v39 > *((_QWORD *)v11 + 2))
          goto LABEL_132;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v81[16 * v78 + 8] = v83;
        v84 = *((_QWORD *)v11 + 2);
        if (v39 >= v84)
          goto LABEL_133;
        v12 = v84 - 1;
        memmove(v82, v82 + 16, 16 * (v84 - 1 - v39));
        v37 = v81;
        *((_QWORD *)v11 + 2) = v84 - 1;
        v10 = v100;
        if (v84 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v99;
    if (v9 >= v99)
    {
      v8 = v97;
      v2 = v94;
      goto LABEL_117;
    }
  }
  v28 = v13 + v98;
  if (__OFADD__(v13, v98))
    goto LABEL_153;
  if (v28 >= v3)
    v28 = v3;
  if (v28 >= v13)
  {
    if (v9 != v28)
    {
      v29 = v96 + 16 * v9;
      do
      {
        v30 = *(double *)(v10 + 16 * v9);
        v31 = v13;
        v32 = v29;
        do
        {
          if (v30 >= *(double *)v32 && (v30 != *(double *)v32 || *(double *)(v32 + 24) >= *(double *)(v32 + 8)))
            break;
          if (!v10)
            goto LABEL_155;
          v34 = *(_QWORD *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *(_OWORD *)v32;
          *(double *)v32 = v30;
          *(_QWORD *)(v32 + 8) = v34;
          v32 -= 16;
          ++v31;
        }
        while (v9 != v31);
        ++v9;
        v29 += 16;
      }
      while (v9 != v28);
      v9 = v28;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  Swift::Int v20;
  _QWORD *v21;
  Swift::Int v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  Swift::Int v106;
  Swift::Int v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ _stringCompareWithSmolCheck(_:_:expecting:)()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  double *v17;
  unint64_t v18;
  double *v19;
  double *v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  double *v25;
  double *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[3 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[3 * v11];
      v24 = (char *)v17;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        do
        {
          v19 = (double *)(v18 + 24);
          if (*(v17 - 1) >= *(v6 - 1))
          {
            v24 = (char *)(v17 - 3);
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v22 = *(_OWORD *)(v17 - 3);
              *(double *)(v18 + 16) = *(v17 - 1);
              *(_OWORD *)v18 = v22;
            }
            v20 = v6;
            v17 -= 3;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 3;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v20;
              *(double *)(v18 + 16) = *(v6 - 1);
              *(_OWORD *)v18 = v21;
            }
            v26 = v6 - 3;
            if (v20 <= v7)
              break;
          }
          v18 -= 24;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v26, (const void **)&v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[3 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[3 * v9];
    v24 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        if (v6[2] >= v13[2])
        {
          v4 = v13 + 3;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 3;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 3;
          }
        }
        else
        {
          v14 = v6 + 3;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        v7[2] = v15[2];
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 3;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v25 = v4;
        v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  BOOL v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  BOOL v23;
  BOOL v24;
  uint64_t result;
  double *v26;
  double *v27;
  double *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v28 = __src;
  v27 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[2 * v13];
      v26 = v17;
      v28 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (double *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 2;
          v21 = *(v17 - 2);
          v22 = *(v19 - 2);
          v19 -= 2;
          v23 = v21 == v22;
          if (v21 < v22 || (v23 ? (v24 = *(v17 - 1) < *(v6 - 1)) : (v24 = 0), v24))
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v28 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          else
          {
            v26 = v17 - 2;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 2;
            if (v6 <= v7)
              goto LABEL_50;
          }
          v18 -= 2;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v26 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        if (*v6 < *v4 || (*v6 == *v4 ? (v15 = v6[1] < v4[1]) : (v15 = 0), v15))
        {
          v16 = v6 + 2;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 2;
          v27 = v4;
          v16 = v6;
        }
        v7 += 2;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v28 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Int16>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size_0(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 48 * (v4 / 48);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for UUID();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x1DF0E5070);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized CanvasCalculateDocumentProxy.document.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  id v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v75 = (uint64_t)&v65 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v65 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v65 - v15;
  if (*(_BYTE *)(v0 + 16) != 1)
    return *(_QWORD *)(v1 + 32);
  *(_BYTE *)(v0 + 16) = 0;
  swift_beginAccess();
  v17 = *(_QWORD *)(v0 + 24);
  v18 = *(_QWORD *)(v17 + 16);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v18)
  {
LABEL_29:
    v81 = v19;
    specialized MutableCollection<>.sort(by:)(&v81);
    v63 = v81[2];
    if (v63)
    {
      v80 = MEMORY[0x1E0DEE9D8];
      swift_retain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      v64 = 40;
      do
      {
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v64 += 24;
        --v63;
      }
      while (v63);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
    }
    dispatch thunk of CalculateDocument.expressions.setter();
    swift_release();
    return *(_QWORD *)(v1 + 32);
  }
  v74 = v5;
  v66 = v1;
  v81 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
  result = specialized Dictionary.startIndex.getter(v17);
  if (result < 0)
    goto LABEL_41;
  v22 = result;
  if (result >= 1 << *(_BYTE *)(v17 + 32))
    goto LABEL_41;
  v23 = 0;
  v24 = v17 + 64;
  v76 = v17 + 80;
  v72 = v12;
  v73 = v2;
  v67 = v18;
  v68 = v16;
  v70 = v17 + 64;
  v71 = v17;
  v69 = v21;
  while (1)
  {
    v25 = v22 >> 6;
    if ((*(_QWORD *)(v24 + 8 * (v22 >> 6)) & (1 << v22)) == 0)
      break;
    if (*(_DWORD *)(v17 + 36) != (_DWORD)v21)
      goto LABEL_37;
    v77 = v23;
    v78 = 1 << v22;
    v26 = &v16[*(int *)(v2 + 48)];
    v27 = *(_QWORD *)(v17 + 48);
    v28 = type metadata accessor for UUID();
    v29 = *(_QWORD **)(v28 - 8);
    v30 = v27 + v29[9] * v22;
    v31 = v22;
    v32 = (void (*)(char *, uint64_t, uint64_t))v29[2];
    v32(v16, v30, v28);
    v33 = *(_QWORD *)(v17 + 56);
    v79 = v31;
    v34 = v33 + 24 * v31;
    v36 = *(void **)v34;
    v35 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 16);
    *(_QWORD *)v26 = *(_QWORD *)v34;
    *((_QWORD *)v26 + 1) = v35;
    *((_QWORD *)v26 + 2) = v37;
    v32(v12, (uint64_t)v16, v28);
    v38 = &v12[*(int *)(v2 + 48)];
    *(_QWORD *)v38 = v36;
    *((_QWORD *)v38 + 1) = v35;
    *((_QWORD *)v38 + 2) = v37;
    v39 = (uint64_t)v12;
    v40 = v75;
    outlined init with take of (key: Int, value: AnyCRValue)?(v39, v75, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    v41 = v36;
    swift_retain_n();
    v42 = v41;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    v43 = *(int *)(v2 + 48);
    v44 = v74;
    v45 = &v74[v43];
    v46 = v40 + v43;
    v32(v74, v40, v28);
    v48 = *(void **)v46;
    v47 = *(_QWORD *)(v46 + 8);
    v49 = *(_QWORD *)(v46 + 16);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    *((_QWORD *)v45 + 2) = v49;
    v50 = (void (*)(char *, uint64_t))v29[1];
    v51 = v48;
    swift_retain();
    v50(v44, v28);
    outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for (key: UUID, value: SortableCalculateExpression));
    v19 = v81;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1);
      v19 = v81;
    }
    v53 = v19[2];
    v52 = v19[3];
    v12 = v72;
    v2 = v73;
    v54 = v79;
    if (v53 >= v52 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
      v19 = v81;
    }
    v19[2] = v53 + 1;
    v55 = &v19[3 * v53];
    v55[4] = v48;
    v55[5] = v47;
    v55[6] = v49;
    v17 = v71;
    v56 = 1 << *(_BYTE *)(v71 + 32);
    if (v54 >= v56)
      goto LABEL_38;
    v24 = v70;
    v57 = *(_QWORD *)(v70 + 8 * v25);
    if ((v57 & v78) == 0)
      goto LABEL_39;
    LODWORD(v21) = v69;
    if (*(_DWORD *)(v71 + 36) != (_DWORD)v69)
      goto LABEL_40;
    v58 = v57 & (-2 << (v54 & 0x3F));
    if (v58)
    {
      v22 = __clz(__rbit64(v58)) | v54 & 0xFFFFFFFFFFFFFFC0;
      v59 = v67;
      v16 = v68;
      goto LABEL_24;
    }
    v60 = v25 + 1;
    v61 = (unint64_t)(v56 + 63) >> 6;
    v59 = v67;
    v16 = v68;
    if (v25 + 1 < v61)
    {
      v62 = *(_QWORD *)(v70 + 8 * v60);
      if (v62)
      {
LABEL_22:
        v22 = __clz(__rbit64(v62)) + (v60 << 6);
        goto LABEL_24;
      }
      while (v61 - 2 != v25)
      {
        v62 = *(_QWORD *)(v76 + 8 * v25++);
        if (v62)
        {
          v60 = v25 + 1;
          goto LABEL_22;
        }
      }
    }
    v22 = 1 << *(_BYTE *)(v71 + 32);
LABEL_24:
    v23 = v77 + 1;
    if (v77 + 1 == v59)
    {
      swift_bridgeObjectRelease();
      v1 = v66;
      goto LABEL_29;
    }
    if ((v22 & 0x8000000000000000) != 0 || (uint64_t)v22 >= v56)
      goto LABEL_41;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void outlined consume of SortableCalculateExpression?(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();

  }
}

BOOL specialized static SortableCalculateExpression.== infix(_:_:)(double a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - v11;
  CalculateExpression.id.getter();
  CalculateExpression.id.getter();
  v13 = static UUID.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v12, v4);
  if ((v13 & 1) == 0)
    return 0;
  v15 = CalculateExpression.expression.getter();
  v17 = v16;
  if (v15 == CalculateExpression.expression.getter() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    if (a1 != a2)
      return 0;
    goto LABEL_8;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v20 & 1) != 0 && a1 == a2)
  {
LABEL_8:
    v21 = CalculateExpression.format.getter();
    return v21 == CalculateExpression.format.getter();
  }
  return result;
}

unint64_t specialized SortableCalculateExpression.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SortableCalculateExpression.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t specialized SortableCalculateExpression.encode(to:)(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[3];
  char v18;
  char v19;
  double v20;
  char v21;
  char v22;

  v17[1] = a2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SortableCalculateExpression.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  CalculateExpression.id.getter();
  v22 = 0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  v15 = v17[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (!v15)
  {
    CalculateExpression.expression.getter();
    v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    v20 = a3;
    v19 = 2;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    CalculateExpression.format.getter();
    v18 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

unint64_t lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression.CodingKeys, &unk_1EA847B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression.CodingKeys, &unk_1EA847B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression.CodingKeys, &unk_1EA847B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression.CodingKeys, &unk_1EA847B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys);
  }
  return result;
}

unint64_t specialized SortableCalculateExpression.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t result;
  uint64_t inited;
  Swift::Int v27;
  void *v28;
  unint64_t v29;
  id v30;
  NSNumber v31;
  NSNumber *v32;
  uint64_t v33;
  NSNumber *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;

  v2 = type metadata accessor for CalculateExpression.Base();
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v42 = (char *)&v33 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SortableCalculateExpression.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SortableCalculateExpression.CodingKeys and conformance SortableCalculateExpression.CodingKeys();
  v17 = (uint64_t)v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v38 = v8;
  v44 = a1;
  v18 = v13;
  LOBYTE(v46) = 0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v19 = v42;
  v20 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v16;
  LOBYTE(v46) = 1;
  v36 = KeyedDecodingContainer.decode(_:forKey:)();
  v37 = v22;
  v23 = v19;
  LOBYTE(v46) = 3;
  v24 = KeyedDecodingContainer.decode(_:forKey:)();
  v45 = 2;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v35 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v27 = v24;
  v28 = (void *)*MEMORY[0x1E0D09E80];
  v34 = (NSNumber *)inited;
  *(_QWORD *)(inited + 32) = v28;
  result = type metadata accessor for NSNumber();
  if (v27 < 0)
  {
    __break(1u);
  }
  else
  {
    v29 = result;
    v30 = v28;
    v31.super.super.isa = NSNumber.init(integerLiteral:)(v27).super.super.isa;
    v32 = v34;
    v34[8].super.super.isa = (Class)v29;
    v32[5].super.super.isa = v31.super.super.isa;
    specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v32);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v38, v23, v20);
    (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v41, *MEMORY[0x1E0D09CA0], v40);
    type metadata accessor for CalculateExpression();
    swift_allocObject();
    CalculateExpression.init(_:options:base:id:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v23, v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v35);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    return 0;
  }
  return result;
}

uint64_t specialized CanvasCalculateDocumentProxy.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[0] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CanvasCalculateDocumentProxy.CodingKeys>);
  v3 = *(_QWORD *)(v11[0] - 8);
  MEMORY[0x1E0C80A78](v11[0], v4);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CanvasCalculateDocumentProxy();
  v7 = swift_allocObject();
  *(_BYTE *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for CalculateDocument();
  swift_allocObject();
  *(_QWORD *)(v7 + 32) = CalculateDocument.init()();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : SortableCalculateExpression]);
    lazy protocol witness table accessor for type [UUID : SortableCalculateExpression] and conformance <> [A : B]();
    v8 = v11[0];
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v8);
    v9 = v11[5];
    swift_beginAccess();
    *(_QWORD *)(v7 + 24) = v9;
    swift_bridgeObjectRelease();
    *(_BYTE *)(v7 + 16) = 1;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v7;
}

unint64_t lazy protocol witness table accessor for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasCalculateDocumentProxy.CodingKeys, &type metadata for CanvasCalculateDocumentProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasCalculateDocumentProxy.CodingKeys, &type metadata for CanvasCalculateDocumentProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasCalculateDocumentProxy.CodingKeys, &type metadata for CanvasCalculateDocumentProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasCalculateDocumentProxy.CodingKeys, &type metadata for CanvasCalculateDocumentProxy.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasCalculateDocumentProxy.CodingKeys and conformance CanvasCalculateDocumentProxy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SortableCalculateExpression and conformance SortableCalculateExpression()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression, &type metadata for SortableCalculateExpression);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression;
  if (!lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for SortableCalculateExpression, &type metadata for SortableCalculateExpression);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SortableCalculateExpression and conformance SortableCalculateExpression);
  }
  return result;
}

uint64_t outlined destroy of PDFPageID(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for CanvasCalculateDocumentProxy.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1DDCAA93C + 4 * byte_1DDF3B3E4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1DDCAA95C + 4 * byte_1DDF3B3E9[v4]))();
}

_BYTE *sub_1DDCAA93C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1DDCAA95C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDCAA964(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDCAA96C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDCAA974(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDCAA97C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CanvasCalculateDocumentProxy.CodingKeys()
{
  return &type metadata for CanvasCalculateDocumentProxy.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SortableCalculateExpression.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDCAA9E4 + 4 * byte_1DDF3B3F3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDCAAA18 + 4 * byte_1DDF3B3EE[v4]))();
}

uint64_t sub_1DDCAAA18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCAAA20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCAAA28);
  return result;
}

uint64_t sub_1DDCAAA34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCAAA3CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDCAAA40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCAAA48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SortableCalculateExpression.CodingKeys()
{
  return &unk_1EA847B38;
}

void Capsule<>.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CGImageSource *v14;
  CGImageSource *v15;
  CGImageMetadataRef v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _QWORD v25[2];
  const CGImageMetadata *v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v25 - v12;
  v14 = CGImageSource(from:)(a1);
  if (v2)
  {
    outlined destroy of PKStrokeProperties(a1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    return;
  }
  v15 = v14;
  if (!CGImageSourceHasNormalOrientation(_:)(v14))
    goto LABEL_7;
  v16 = CGImageSourceCopyMetadataAtIndex(v15, 0, 0);
  if (!v16)
    goto LABEL_7;
  v26 = v16;
  v17 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, v26);
  if (v18 >> 60 == 15)
  {

LABEL_7:
    v19 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v19, sel_nativeBounds);
    v21 = v20;
    v23 = v22;

    if (one-time initialization token for imageMarkupOldMaxArea != -1)
      swift_once();
    v24 = *(double *)&static UIConstants.imageMarkupOldMaxArea;
    if (*(double *)&static UIConstants.imageMarkupOldMaxArea <= v21 * v23)
      v24 = v21 * v23;
    Capsule<>.init(burnedIn:maxArea:)(v15, (uint64_t)v9, v24);
    outlined destroy of PKStrokeProperties(a1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    goto LABEL_12;
  }
  v25[1] = v17;
  type metadata accessor for Image();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  outlined destroy of PKStrokeProperties(a1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);

  v9 = v13;
LABEL_12:
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v9, v5);
}

uint64_t Capsule<>.init(from:with:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  type metadata accessor for DataOrURL();
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(from:with:priority:)()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[5];
  v2 = v0[6];
  if (v1 >> 60 == 15)
  {
    v3 = v0[8];
    outlined init with copy of PKStrokeProperties(v0[3], v0[10], (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, v3, &demangling cache variable for type metadata for TaskPriority?);
    v4 = (_QWORD *)swift_task_alloc();
    v0[15] = (uint64_t)v4;
    *v4 = v0;
    v4[1] = Capsule<>.init(from:with:priority:);
    return Capsule<>.init(_:priority:)(v0[14], v0[10], v0[8]);
  }
  else
  {
    v6 = v0[7];
    v7 = v0[4];
    outlined init with copy of PKStrokeProperties(v0[3], v0[9], (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, v6, &demangling cache variable for type metadata for TaskPriority?);
    outlined copy of Data._Representation(v7, v1);
    v8 = (_QWORD *)swift_task_alloc();
    v0[17] = (uint64_t)v8;
    *v8 = v0;
    v8[1] = Capsule<>.init(from:with:priority:);
    return Capsule<>.init(baseImage:with:priority:)(v0[13], v0[9], v0[4], v0[5], v0[7]);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 48), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 48), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  outlined consume of Data?(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 48), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 48), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

CGImageSourceRef CGImageSource(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t (*v11)(_QWORD);
  NSURL *v12;
  const __CFURL *v13;
  const __CFURL *v14;
  CGImageSourceRef v15;
  uint64_t v16;
  unint64_t v17;
  const __CFData *isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  _QWORD v25[2];

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_QWORD *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v10, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v6, v10, v2);
    URL._bridgeToObjectiveC()(v12);
    v14 = v13;
    v15 = CGImageSourceCreateWithURL(v13, 0);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (!v15)
      goto LABEL_5;
  }
  else
  {
    v16 = *v10;
    v17 = v10[1];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v15 = CGImageSourceCreateWithData(isa, 0);
    outlined consume of Data._Representation(v16, v17);

    if (!v15)
    {
LABEL_5:
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;
      v22 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
      v23 = (void *)MEMORY[0x1DF0E41AC](v19, v21);
      swift_bridgeObjectRelease();
      objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 256, 0);

      swift_willThrow();
    }
  }
  return v15;
}

BOOL CGImageSourceHasNormalOrientation(_:)(CGImageSource *a1)
{
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  char v8;
  unsigned int v10;

  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  if (!v1)
    return 1;
  v2 = v1;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NSObject, MEMORY[0x1E0DEFCF8]);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = (void *)*MEMORY[0x1E0CBCFF0];
  if ((v3 & 0xC000000000000001) != 0)
  {
    v5 = v4;
    v6 = __CocoaDictionary.lookup(_:)();

    swift_bridgeObjectRelease();
    if (!v6)
      return 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 1;
  }
  v7 = v4;
  specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
  if ((v8 & 1) == 0)
  {

    goto LABEL_11;
  }
  swift_unknownObjectRetain();

  swift_bridgeObjectRelease();
LABEL_8:
  if ((swift_dynamicCast() & 1) != 0)
    return v10 < 2;
  return 1;
}

uint64_t Data.init(with:path:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  const CGImageMetadata *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  Class isa;
  id v22;
  uint64_t v23;

  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 0x5F636E653ALL;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a3;
  v13._object = a4;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14 = a5;
  v15 = Data.init(at:in:)(a1, a2, v14);
  if (v16 >> 60 == 15)
    return Data.init(at:in:)(a1, a2, v14);
  v18 = v15;
  v19 = v16;
  objc_opt_self();
  v20 = +[PPKPayloadEncryption sharedInstance]();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v22 = -[PPKPayloadEncryption decryptData:](v20, isa);

  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  outlined consume of Data?(v18, v19);
  swift_bridgeObjectRelease();

  return v23;
}

void Capsule<>.init(burnedIn:maxArea:)(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD v31[2];
  id v32;

  v31[1] = a2;
  v6 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v31 - v14;
  v32 = a1;
  v16 = specialized static Capsule<>.imageData(from:downsampled:with:)((CGImageSource *)a1, 1, a3);
  if (v17 >> 60 == 15)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;
    v23 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v24 = (void *)MEMORY[0x1DF0E41AC](v20, v22);
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_initWithDomain_code_userInfo_, v24, 256, 0);

    swift_willThrow();
  }
  else
  {
    v25 = v16;
    v26 = v17;
    specialized static ImageLayout.canvasSize(from:)(v18, v19);
    v28 = v27;
    v30 = v29;
    outlined copy of Data._Representation(v25, v26);
    Image.init(from:size:)(v25, v26, (uint64_t)v15, v28, v30);
    v31[0] = v3;
    outlined init with copy of PKStrokeProperties((uint64_t)v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.init(_:id:)();

    outlined consume of Data?(v25, v26);
    outlined destroy of PKStrokeProperties((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  }
}

uint64_t Capsule<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v3[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for DataOrURL();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[12];
  v2 = (uint64_t *)v0[13];
  v3 = v0[10];
  v4 = v0[9];
  v6 = v0[3];
  v5 = v0[4];
  *v2 = v6;
  v2[1] = v5;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(v6, v5);
  static TaskPriority.userInitiated.getter();
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 0, 1, v7);
  outlined init with copy of PKStrokeProperties((uint64_t)v2, v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, v4, &demangling cache variable for type metadata for TaskPriority?);
  v8 = (_QWORD *)swift_task_alloc();
  v0[14] = v8;
  *v8 = v0;
  v8[1] = Capsule<>.init(from:);
  return Capsule<>.init(_:priority:)(v0[7], v0[12], v0[9]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 16);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v9(v2, v3, v5);
  v9(v8, v2, v5);
  outlined consume of Data._Representation(v7, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  outlined consume of Data._Representation(v3, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule<>.init(baseImage:with:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5[9] = a4;
  v5[10] = a5;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v6 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v5[11] = v6;
  v5[12] = *(_QWORD *)(v6 + 64);
  v5[13] = swift_task_alloc();
  v7 = (_QWORD *)swift_task_alloc();
  v5[14] = v7;
  *v7 = v5;
  v7[1] = Capsule<>.init(baseImage:with:priority:);
  return swift_task_switch();
}

uint64_t Capsule<>.init(baseImage:with:priority:)(double a1)
{
  uint64_t v1;

  *(double *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(baseImage:with:priority:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[15];
  v3 = v0[12];
  v2 = v0[13];
  v4 = v0[10];
  v5 = v0[11];
  outlined init with copy of PKStrokeProperties(v0[7], v2, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + v3;
  v8 = (v6 + v3) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  outlined init with take of DataOrURL(v2, v9 + v6);
  *(_BYTE *)(v9 + v7) = 1;
  *(_QWORD *)(v8 + v9 + 8) = v1;
  v0[16] = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v4, (uint64_t)&closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)partial apply, v9);
  v10 = (_QWORD *)swift_task_alloc();
  v0[17] = (uint64_t)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *v10 = v0;
  v10[1] = Capsule<>.init(baseImage:with:priority:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 144) = v1;
  *(_QWORD *)(v0 + 152) = v2;
  v3 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 168) = v3;
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  if (v2 >> 60 == 15)
  {
    v6 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    strcpy(v7, "Malformed data");
    v7[15] = -18;
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, *MEMORY[0x1E0D11EF8], v6);
    swift_willThrow();
    outlined consume of Data._Representation(v4, v5);
    v8 = *(_QWORD *)(v0 + 56);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for TaskPriority?);
    outlined destroy of PKStrokeProperties(v8, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    type metadata accessor for MainActor();
    outlined copy of Data?(v1, v2);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  double *v0;
  double v1;
  double v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[20];
  v1 = v0[21];
  v3 = *((_QWORD *)v0 + 18);
  v4 = *((_QWORD *)v0 + 19);
  v6 = *((_QWORD *)v0 + 8);
  v5 = *((_QWORD *)v0 + 9);
  v7 = *((_QWORD *)v0 + 6);
  swift_release();
  Capsule<>.init(downsampledBaseImageData:imageSize:with:)(v3, v4, v6, v5, v7, v2, v1);
  v0[23] = 0.0;
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  outlined consume of Data?(v2, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 144);
  v1 = *(_QWORD *)(v0 + 152);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  outlined consume of Data?(v2, v1);
  v3 = *(_QWORD *)(v0 + 56);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 80), &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule<>.init(_:priority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(_:priority:)()
{
  uint64_t v0;
  CGImageSource *v1;
  CGImageSource *v2;
  CGImageMetadataRef v3;
  const CGImageMetadata *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;

  v1 = CGImageSource(from:)(*(_QWORD *)(v0 + 64));
  *(_QWORD *)(v0 + 152) = v1;
  v2 = v1;
  if (!CGImageSourceHasNormalOrientation(_:)(v1))
    goto LABEL_8;
  v3 = CGImageSourceCopyMetadataAtIndex(v2, 0, 0);
  *(_QWORD *)(v0 + 160) = v3;
  if (!v3)
    goto LABEL_8;
  v4 = v3;
  v5 = Data.init(with:path:in:)(0x6B615F656C707061, 0xE800000000000000, 0x616D695F65736162, (void *)0xEA00000000006567, v4);
  *(_QWORD *)(v0 + 168) = v5;
  *(_QWORD *)(v0 + 176) = v6;
  if (v6 >> 60 != 15)
  {
    v7 = v5;
    v8 = v6;
    v9 = Data.init(with:path:in:)(0x6B615F656C707061, 0xE800000000000000, 0x6C65646F6DLL, (void *)0xE500000000000000, v4);
    *(_QWORD *)(v0 + 184) = v9;
    *(_QWORD *)(v0 + 192) = v10;
    if (v10 >> 60 != 15)
    {
      v22 = v9;
      v23 = v10;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for TaskPriority?);
      outlined copy of Data?(v7, v8);
      outlined copy of Data?(v22, v23);
      v24 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 200) = v24;
      *v24 = v0;
      v24[1] = Capsule<>.init(_:priority:);
      return Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(*(_QWORD *)(v0 + 144), v7, v8, v22, v23, *(_QWORD *)(v0 + 136));
    }
    outlined consume of Data?(v7, v8);
  }
  v11 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, *(id *)(v0 + 160));
  *(_QWORD *)(v0 + 216) = v11;
  *(_QWORD *)(v0 + 224) = v12;
  if (v12 >> 60 == 15)
  {

LABEL_8:
    v13 = *(void **)(v0 + 152);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
    v14 = v13;
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v15;
    *v15 = v0;
    v15[1] = Capsule<>.init(_:priority:);
    return Capsule<>.init(burnedIn:priority:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  }
  v17 = v11;
  v18 = v12;
  v19 = *(_QWORD *)(v0 + 128);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), v19, &demangling cache variable for type metadata for TaskPriority?);
  outlined copy of Data._Representation(v17, v18);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v17;
  v20[5] = v18;
  outlined copy of Data._Representation(v17, v18);
  *(_QWORD *)(v0 + 232) = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(v19, (uint64_t)&async function pointer to partial apply for closure #1 in Capsule<>.init(serializedData:priority:), (uint64_t)v20);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v21;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v21 = v0;
  v21[1] = Capsule<>.init(_:priority:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  id v9;
  _QWORD *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  outlined consume of Data?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  outlined consume of Data?(v1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 144), &demangling cache variable for type metadata for Capsule<Image>?);
    v6 = Data.init(with:path:in:)(0x70705F656C707061, 0xE90000000000006BLL, 0x6C65646F6DLL, (void *)0xE500000000000000, *(id *)(v0 + 160));
    *(_QWORD *)(v0 + 216) = v6;
    *(_QWORD *)(v0 + 224) = v7;
    if (v7 >> 60 == 15)
    {

      v8 = *(void **)(v0 + 152);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
      v9 = v8;
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 256) = v10;
      *v10 = v0;
      v10[1] = Capsule<>.init(_:priority:);
      return Capsule<>.init(burnedIn:priority:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    }
    else
    {
      v19 = v6;
      v20 = v7;
      v21 = *(_QWORD *)(v0 + 128);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), v21, &demangling cache variable for type metadata for TaskPriority?);
      outlined copy of Data._Representation(v19, v20);
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = 0;
      v22[3] = 0;
      v22[4] = v19;
      v22[5] = v20;
      outlined copy of Data._Representation(v19, v20);
      *(_QWORD *)(v0 + 232) = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(v21, (uint64_t)&async function pointer to partial apply for closure #1 in Capsule<>.init(serializedData:priority:), (uint64_t)v22);
      v23 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 240) = v23;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *v23 = v0;
      v23[1] = Capsule<>.init(_:priority:);
      return Task.value.getter();
    }
  }
  else
  {
    v12 = *(void **)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 56);

    outlined destroy of StocksKitCurrencyCache.Provider?(v16, &demangling cache variable for type metadata for TaskPriority?);
    outlined destroy of PKStrokeProperties(v17, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v18, v13, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(void **)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 72);
  v12 = *(void **)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 56);
  outlined consume of Data?(v1, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  v10(v5, v6, v7);
  outlined consume of Data?(v1, v2);

  outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v13, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v10(v14, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;
  uint64_t v19;

  v1 = v0[27];
  v2 = v0[28];
  v3 = (void *)v0[20];
  v4 = v0[16];
  outlined consume of Data?(v1, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);

  outlined consume of Data?(v1, v2);
  v5 = (void *)v0[31];
  if (one-time initialization token for logger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  v7 = v5;
  v8 = v5;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v19 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_getErrorValue();
    v13 = Error.localizedDescription.getter();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v9, v10, "Unable to read or decrypt archived model data: %s.\nFalling back to a burned-in image.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v12, -1, -1);
    MEMORY[0x1DF0E6558](v11, -1, -1);

  }
  else
  {

  }
  v15 = (void *)v0[19];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0[9], v0[15], &demangling cache variable for type metadata for TaskPriority?);
  v16 = v15;
  v17 = (_QWORD *)swift_task_alloc();
  v0[32] = v17;
  *v17 = v0;
  v17[1] = Capsule<>.init(_:priority:);
  return Capsule<>.init(burnedIn:priority:)(v0[12], v0[19], v0[15]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);

  outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v5, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);

  outlined consume of Data?(v4, v3);
  outlined consume of Data?(v1, v2);
  v5 = *(void **)(v0 + 208);
  if (one-time initialization token for logger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)logger);
  v7 = v5;
  v8 = v5;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v19 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_getErrorValue();
    v13 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1DDB0F000, v9, v10, "Unable to read or decrypt archived model data: %s.\nFalling back to a burned-in image.", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v12, -1, -1);
    MEMORY[0x1DF0E6558](v11, -1, -1);

  }
  else
  {

  }
  v15 = *(void **)(v0 + 152);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for TaskPriority?);
  v16 = v15;
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v17;
  *v17 = v0;
  v17[1] = Capsule<>.init(_:priority:);
  return Capsule<>.init(burnedIn:priority:)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);

  outlined destroy of StocksKitCurrencyCache.Provider?(v2, &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(double *)(v6 + 32) = a2;
  *(_BYTE *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a5;
  return swift_task_switch();
}

{
  uint64_t v6;

  *(double *)(v6 + 32) = a2;
  *(_BYTE *)(v6 + 40) = a6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = specialized static Capsule<>.imageData(from:downsampled:with:)(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 40), *(double *)(v0 + 32));
  v1[1] = v2;
  v1[2] = v3;
  v1[3] = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(uint64_t **)(v0 + 16);
  *v1 = specialized static Capsule<>.imageData(from:downsampled:with:)(*(CGImageSource **)(v0 + 24), *(_BYTE *)(v0 + 40), *(double *)(v0 + 32));
  v1[1] = v2;
  v1[2] = v3;
  v1[3] = v4;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Image.init(from:size:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (__int128 *)((char *)&v21 - v16);
  Image.init()(a3);
  v21 = 0uLL;
  *(double *)&v22 = a4;
  *((double *)&v22 + 1) = a5;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  CRRegister.wrappedValue.getter();
  CRRegister.wrappedValue.setter();
  outlined copy of Data._Representation(a1, a2);
  CRDataAsset.init(_:)(a1, a2);
  v18 = v22;
  *v17 = v21;
  v17[1] = v18;
  v19 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 0, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v13, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for CRAssetOrData?);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t Capsule<>.init(downsampledBaseImageData:imageSize:with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  double v55;
  char v56;

  v49 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v46 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v45 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v16, v17);
  v18 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v45 - v24;
  specialized static ImageLayout.canvasSize(from:)(a6, a7);
  v27 = v26;
  v29 = v28;
  outlined copy of Data._Representation(a1, a2);
  v52 = a2;
  Image.init(from:size:)(a1, a2, (uint64_t)v25, v27, v29);
  v51 = v25;
  outlined init with copy of PKStrokeProperties((uint64_t)v25, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.init(_:id:)();
  v30 = v27 / a6;
  if (v27 / a6 > 1.0)
    v30 = 1.0;
  v31 = a3;
  v53 = a3;
  v32 = v50;
  v33 = v49;
  v54 = v49;
  v55 = v30;
  v47 = v13;
  v48 = a5;
  Capsule.callAsFunction<A>(_:)();
  if ((v56 & 1) != 0)
  {
    outlined consume of Data._Representation(v31, v33);
    outlined consume of Data._Representation(a1, v52);
    v34 = (uint64_t)v51;
LABEL_8:
    v38 = v34;
    return outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  }
  v35 = v31;
  v36 = v33;
  outlined copy of Data._Representation(v31, v33);
  v37 = v45;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (!v32)
  {
    v39 = v46;
    v40 = v47;
    v41 = v48;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    v42 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v41, v37, v40);
    MEMORY[0x1E0C80A78](v42, v43);
    v34 = (uint64_t)v51;
    *(&v45 - 2) = v51;
    Capsule.mutate<A>(_:)();
    outlined consume of Data._Representation(v35, v36);
    outlined consume of Data._Representation(a1, v52);
    goto LABEL_8;
  }
  outlined consume of Data._Representation(v31, v33);
  outlined consume of Data._Representation(a1, v52);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
  v38 = (uint64_t)v51;
  return outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Image);
}

uint64_t closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v0, v1);
  swift_getKeyPath();
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t Capsule<>.init(burnedIn:priority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  type metadata accessor for CRKeyPath();
  v3[9] = swift_task_alloc();
  v3[10] = type metadata accessor for Image();
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v4 = (_QWORD *)swift_task_alloc();
  v3[13] = v4;
  *v4 = v3;
  v4[1] = Capsule<>.init(burnedIn:priority:);
  return swift_task_switch();
}

uint64_t Capsule<>.init(burnedIn:priority:)(double a1)
{
  uint64_t v1;

  *(double *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(burnedIn:priority:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v1 = v0[14];
  v3 = (void *)v0[7];
  v2 = v0[8];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 40) = 1;
  *(_QWORD *)(v4 + 48) = v1;
  v5 = v3;
  v0[15] = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), v4);
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *v6 = v0;
  v6[1] = Capsule<>.init(burnedIn:priority:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  void *v17;
  uint64_t v18;

  swift_release();
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 == 15)
  {
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(void **)(v0 + 56);
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    v9 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v10 = (void *)MEMORY[0x1DF0E41AC](v6, v8);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, 256, 0);

    swift_willThrow();
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 16);
    v18 = *(_QWORD *)(v0 + 64);
    v17 = *(void **)(v0 + 56);
    specialized static ImageLayout.canvasSize(from:)(*(double *)(v0 + 32), *(double *)(v0 + 40));
    v13 = v12;
    v15 = v14;
    outlined copy of Data._Representation(v11, v1);
    Image.init(from:size:)(v11, v1, v2, v13, v15);
    outlined init with copy of PKStrokeProperties(v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.init(_:id:)();

    outlined consume of Data?(v11, v1);
    outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for TaskPriority?);
    outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a3;
  v6[13] = a4;
  v6[10] = a1;
  v6[11] = a2;
  type metadata accessor for CRKeyPath();
  v6[16] = swift_task_alloc();
  v6[17] = type metadata accessor for Image();
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  v7 = type metadata accessor for DataOrURL();
  v6[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[21] = v8;
  v6[22] = *(_QWORD *)(v8 + 64);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6[25] = v9;
  v6[26] = *(_QWORD *)(v9 - 8);
  v6[27] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)v0[24];
  v2 = v0[11];
  v3 = v0[12];
  *v1 = v2;
  v1[1] = v3;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(v2, v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[28] = v4;
  *v4 = v0;
  v4[1] = Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[29];
  v2 = v0[23];
  v4 = v0[21];
  v3 = v0[22];
  v5 = v0[15];
  outlined init with copy of PKStrokeProperties(v0[24], v2, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = v6 + v3;
  v8 = (v6 + v3) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  outlined init with take of DataOrURL(v2, v9 + v6);
  *(_BYTE *)(v9 + v7) = 1;
  *(_QWORD *)(v8 + v9 + 8) = v1;
  v0[30] = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZ10Foundation4DataV_So6CGSizeVtSg_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:), v9);
  v10 = (_QWORD *)swift_task_alloc();
  v0[31] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Data, CGSize)?);
  *v10 = v0;
  v10[1] = Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 256) = v2;
  *(_QWORD *)(v0 + 264) = v3;
  v4 = *(double *)(v0 + 32);
  v5 = *(double *)(v0 + 40);
  *(double *)(v0 + 272) = v4;
  *(double *)(v0 + 280) = v5;
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for DataOrURL);
  if (v3 >> 60 == 15)
  {
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;
    v14 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v15 = (void *)MEMORY[0x1DF0E41AC](v11, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_initWithDomain_code_userInfo_, v15, 256, 0);

    swift_willThrow();
    outlined consume of Data._Representation(v8, v7);
    outlined consume of Data._Representation(v10, v9);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, &demangling cache variable for type metadata for TaskPriority?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v17 = v5;
    v18 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 152);
    specialized static ImageLayout.canvasSize(from:)(v4, v17);
    v21 = v20;
    v23 = v22;
    outlined copy of Data._Representation(v2, v3);
    Image.init(from:size:)(v2, v3, v19, v21, v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    *(CGFloat *)(v0 + 288) = CGRectGetWidth(*(CGRect *)(v0 + 48));
    outlined init with copy of PKStrokeProperties(v19, v18, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    static CRKeyPath.unique.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.init(_:id:)();
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 296) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v1 = *(double *)(v0 + 288);
  v2 = *(double *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  swift_release();
  if (v1 / v2 <= 1.0)
    v5 = v1 / v2;
  else
    v5 = 1.0;
  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v3;
  *(double *)(v6 + 32) = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  *(_BYTE *)(v0 + 305) = *(_BYTE *)(v0 + 304);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(v0 + 305);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 88);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  outlined consume of Data._Representation(v7, v6);
  outlined consume of Data?(v3, v2);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for TaskPriority?);
  outlined destroy of PKStrokeProperties(v4, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v8 = *(_QWORD *)(v0 + 208);
  if (v1 == 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    v9 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v8 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    v9 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 56))(*(_QWORD *)(v0 + 80), v9, 1, *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Capsule<>.init(baseImageData:annotationKitArchivedModelData:priority:)(double a1)
{
  uint64_t v1;

  *(double *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in Capsule<>.init(serializedData:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in Capsule<>.init(serializedData:priority:)()
{
  uint64_t v0;

  outlined copy of Data._Representation(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  type metadata accessor for Image();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DDCAE7FC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Capsule<>.init(serializedData:priority:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  v6[3] = v5;
  v6[4] = v4;
  v6[2] = a1;
  return swift_task_switch();
}

uint64_t Data.init(at:in:)(uint64_t a1, uint64_t a2, const CGImageMetadata *a3)
{
  __CFString *v4;
  CGImageMetadataTag *v5;
  CFTypeRef v6;
  CFTypeID v7;
  id v8;
  void *v9;
  id v10;

  v4 = (__CFString *)MEMORY[0x1DF0E41AC]();
  swift_bridgeObjectRelease();
  v5 = CGImageMetadataCopyTagWithPath(a3, 0, v4);

  if (!v5)
    goto LABEL_11;
  v6 = CGImageMetadataTagCopyValue(v5);
  if (!v6)
    goto LABEL_10;
  v7 = CFGetTypeID(v6);
  if (v7 != CFStringGetTypeID())
  {

    swift_unknownObjectRelease();
LABEL_11:

    return 0;
  }
  swift_unknownObjectRetain();
  if ((swift_dynamicCast() & 1) == 0)
  {

    swift_unknownObjectRelease();
    return 0;
  }
  v8 = objc_allocWithZone(MEMORY[0x1E0C99D50]);
  v9 = (void *)MEMORY[0x1DF0E41AC]();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, sel_initWithBase64EncodedString_options_, v9, 0);

  if (!v10)
  {
    swift_unknownObjectRelease();
LABEL_10:

    goto LABEL_11;
  }
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  swift_unknownObjectRelease();
  return 0;
}

uint64_t specialized static Capsule<>.isJPEGConversionRequired(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  CFArrayRef v24;
  uint64_t result;
  _QWORD *v26;
  char v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;

  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - v11;
  static UTType.heic.getter();
  v13 = UTType.identifier.getter();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v12, v4);
  if (v13 == a1 && v15 == a2)
    goto LABEL_13;
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_14:
    v28 = 1;
    return v28 & 1;
  }
  static UTType.heif.getter();
  v19 = UTType.identifier.getter();
  v21 = v20;
  v16(v8, v4);
  if (v19 == a1 && v21 == a2)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
    goto LABEL_14;
  v24 = CGImageDestinationCopyTypeIdentifiers();
  v30 = 0;
  result = static Array._forceBridgeFromObjectiveC(_:result:)();
  v26 = v30;
  if (v30)
  {

    v27 = specialized Sequence<>.contains(_:)(a1, a2, v26);
    swift_bridgeObjectRelease();
    v28 = v27 ^ 1;
    return v28 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static Capsule<>.imageData(from:downsampled:with:)(CGImageSource *a1, char a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  CGImageRef ImageAtIndex;
  CGImage *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  char v24;
  __CFString *v25;
  int64_t Width;
  int64_t Height;
  CFDictionaryRef v28;
  CFDictionaryRef v29;
  unint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  double v33;
  double v34;
  void *v35;
  void **v36;
  void **v37;
  unint64_t v38;
  __CFString *v39;
  void **v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  id v47;
  unint64_t v48;
  char v49;
  double v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  char v55;
  uint64_t v56;
  id v57;
  id v58;
  char isUniquelyReferenced_nonNull_native;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  char v71;
  Swift::Int v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  char v78;
  Swift::Int v79;
  void *v80;
  id v81;
  id v82;
  id v83;
  id v84;
  char v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  void *v91;
  double v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  char v97;
  char v98;
  void *v99;
  uint64_t v100;
  id v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  id v106;
  id v107;
  char v108;
  id v109;
  void *v110;
  uint64_t v111;
  id v112;
  id v113;
  char v114;
  __CFData *v115;
  CGImageDestinationRef v116;
  CGImageDestination *v117;
  const __CFDictionary *isa;
  __CFData *v119;
  uint64_t v120;
  __CFString *v121;
  CGImageSource *v122;
  uint64_t v123;
  __CFString *v124;
  void *v125;
  unint64_t v126;
  unsigned int v127;
  _QWORD v128[5];
  uint64_t v129;

  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImageAtIndex = CGImageSourceCreateImageAtIndex(a1, 0, 0);
  if (!ImageAtIndex)
    return 0;
  v12 = ImageAtIndex;
  v13 = (id)CGImageSourceGetType(a1);
  static UTType.jpeg.getter();
  v14 = UTType.identifier.getter();
  v16 = v15;
  v17 = v6;
  v18 = (__CFString *)v13;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v17);
  v19 = (__CFString *)MEMORY[0x1DF0E41AC](v14, v16);
  swift_bridgeObjectRelease();
  if (v18)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;
    v23 = v18;
    v24 = specialized static Capsule<>.isJPEGConversionRequired(for:)(v20, v22);
    swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
      v25 = v23;
    else
      v25 = v19;
    if ((v24 & 1) == 0)
      v19 = v23;

  }
  Width = CGImageGetWidth(v12);
  Height = CGImageGetHeight(v12);
  v28 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  if (!v28
    || (v29 = v28,
        v128[0] = 0,
        v30 = type metadata accessor for NSObject(),
        v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NSObject, MEMORY[0x1E0DEFCF8]), static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(), v29, (v32 = v128[0]) == 0))
  {

    return 0;
  }
  v123 = v31;
  v126 = v30;
  v33 = (double)Width;
  v34 = (double)Height;
  v129 = v128[0];
  v35 = (void *)*MEMORY[0x1E0CBCFF0];
  v36 = (void **)MEMORY[0x1E0CBD240];
  v37 = (void **)MEMORY[0x1E0C9AE40];
  v38 = v128[0] & 0xC000000000000001;
  v124 = v18;
  if ((v128[0] & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v128[0] + 16))
    {
      v47 = v35;
      swift_bridgeObjectRetain();
      v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47);
      if ((v49 & 1) != 0)
      {
        v122 = a1;
        v39 = v19;
        v40 = v37;
        v44 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v48);
        swift_unknownObjectRetain();

        goto LABEL_20;
      }

    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v51 = (void *)MEMORY[0x1DF0E41AC](0x704172656B614D7BLL, 0xEC0000007D656C70);
    if (!*(_QWORD *)(v32 + 16))
      goto LABEL_43;
    goto LABEL_40;
  }
  v122 = a1;
  v39 = v19;
  v40 = (void **)MEMORY[0x1E0C9AE40];
  v41 = a2;
  v42 = v128[0] & 0xFFFFFFFFFFFFFF8;
  v43 = v35;
  swift_bridgeObjectRetain();
  v44 = __CocoaDictionary.lookup(_:)();

  if (v44)
  {
    a2 = v41;
LABEL_20:
    v128[0] = v44;
    if ((swift_dynamicCast() & 1) != 0 && v127 >= 2)
    {
      if (v127 <= 4)
        v50 = v34;
      else
        v50 = v33;
      if (v127 > 4)
        v33 = v34;
      v34 = v50;
    }
    v37 = v40;
    v51 = (void *)MEMORY[0x1DF0E41AC](0x704172656B614D7BLL, 0xEC0000007D656C70);
    v19 = v39;
    if (v38)
    {
      v41 = a2;
      v42 = v32 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_31;
    }
    a1 = v122;
    v36 = (void **)MEMORY[0x1E0CBD240];
    if (!*(_QWORD *)(v32 + 16))
    {
LABEL_43:

      swift_bridgeObjectRelease();
      v56 = 0;
LABEL_44:
      v53 = *v36;
      v54 = *v37;
      v125 = (void *)v56;
      if (v54)
      {
        if (!v38)
        {
          v57 = v53;
          v58 = v54;
LABEL_53:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v128[0] = v32;
          v129 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v58, v57, isUniquelyReferenced_nonNull_native);
          v129 = v128[0];

          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
        v121 = v19;
        v41 = a2;
        v42 = v32 & 0xFFFFFFFFFFFFFF8;
LABEL_47:
        if (v32 >= 0)
          v32 = v42;
        v57 = v53;
        v58 = v54;
        result = __CocoaSet.count.getter();
        if (__OFADD__(result, 1))
        {
          __break(1u);
          goto LABEL_119;
        }
        v32 = specialized _NativeDictionary.init(_:capacity:)(v32, result + 1);
        a2 = v41;
        v19 = v121;
        goto LABEL_53;
      }
      goto LABEL_55;
    }
LABEL_40:
    specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v51);
    if ((v55 & 1) != 0)
    {
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  v51 = (void *)MEMORY[0x1DF0E41AC](0x704172656B614D7BLL, 0xEC0000007D656C70);
  v37 = v40;
  v19 = v39;
LABEL_31:
  v52 = __CocoaDictionary.lookup(_:)();

  swift_bridgeObjectRelease();
  if (v52)
  {
    a2 = v41;
    a1 = v122;
LABEL_42:
    type metadata accessor for CFDictionaryRef(0);
    v56 = swift_dynamicCastUnknownClassUnconditional();
    v36 = (void **)MEMORY[0x1E0CBD240];
    goto LABEL_44;
  }
  v53 = (void *)*MEMORY[0x1E0CBD240];
  v54 = *v37;
  if (v54)
  {
    v121 = v19;
    v125 = 0;
    a1 = v122;
    goto LABEL_47;
  }
  v125 = 0;
  a2 = v41;
  a1 = v122;
LABEL_55:
  v60 = v53;
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v60);

  swift_unknownObjectRelease();
LABEL_56:
  v61 = (void *)*MEMORY[0x1E0CBD178];
  v62 = (void *)*MEMORY[0x1E0C9AE50];
  if (*MEMORY[0x1E0C9AE50])
  {
    v63 = v129;
    if ((v129 & 0xC000000000000001) == 0)
    {
      v69 = v61;
      v70 = v62;
      goto LABEL_65;
    }
    if (v129 >= 0)
      v63 = v129 & 0xFFFFFFFFFFFFFF8;
    v64 = v61;
    v65 = v62;
    result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      v63 = specialized _NativeDictionary.init(_:capacity:)(v63, result + 1);
LABEL_65:
      v71 = swift_isUniquelyReferenced_nonNull_native();
      v128[0] = v63;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v62, v61, v71);
      v72 = v128[0];

      swift_bridgeObjectRelease();
      v73 = (void *)*MEMORY[0x1E0CBD238];
      if ((v72 & 0xC000000000000001) == 0)
      {
        v76 = v73;
        v77 = v62;
        goto LABEL_71;
      }
      if (v72 >= 0)
        v72 &= 0xFFFFFFFFFFFFFF8uLL;
      v74 = v73;
      v75 = v62;
      result = __CocoaSet.count.getter();
      if (!__OFADD__(result, 1))
      {
        v72 = specialized _NativeDictionary.init(_:capacity:)(v72, result + 1);
        v129 = v72;
LABEL_71:
        v78 = swift_isUniquelyReferenced_nonNull_native();
        v128[0] = v72;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v62, v73, v78);
        v79 = v128[0];

        swift_bridgeObjectRelease();
        v80 = (void *)*MEMORY[0x1E0CBD2B8];
        if ((v79 & 0xC000000000000001) == 0)
        {
          v83 = v80;
          v84 = v62;
LABEL_77:
          v85 = swift_isUniquelyReferenced_nonNull_native();
          v128[0] = v79;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v62, v80, v85);
          v129 = v128[0];

          swift_bridgeObjectRelease();
          if ((a2 & 1) == 0)
            goto LABEL_94;
          goto LABEL_78;
        }
        if (v79 >= 0)
          v79 &= 0xFFFFFFFFFFFFFF8uLL;
        v81 = v80;
        v82 = v62;
        result = __CocoaSet.count.getter();
        if (!__OFADD__(result, 1))
        {
          v79 = specialized _NativeDictionary.init(_:capacity:)(v79, result + 1);
          goto LABEL_77;
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  v66 = v61;
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v66);

  swift_unknownObjectRelease();
  v67 = (id)*MEMORY[0x1E0CBD238];
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v67);

  swift_unknownObjectRelease();
  v68 = (id)*MEMORY[0x1E0CBD2B8];
  specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v68);

  swift_unknownObjectRelease();
  if ((a2 & 1) != 0)
  {
LABEL_78:
    if (v34 * v33 <= a3)
      goto LABEL_94;
    v86 = sqrt(a3 / (v33 / v34));
    v87 = round(a3 / v86);
    v88 = round(v86);
    if (v87 > 1.0)
      v89 = v87;
    else
      v89 = 1.0;
    if (v88 > 1.0)
      v90 = v88;
    else
      v90 = 1.0;
    v91 = (void *)*MEMORY[0x1E0CBC778];
    if (v89 > v90)
      v92 = v89;
    else
      v92 = v90;
    v93 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    v94 = v91;
    v95 = objc_msgSend(v93, sel_initWithDouble_, v92);
    v96 = v129;
    if ((v129 & 0xC000000000000001) == 0)
      goto LABEL_93;
    if (v129 >= 0)
      v96 = v129 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      v96 = specialized _NativeDictionary.init(_:capacity:)(v96, result + 1);
LABEL_93:
      v97 = swift_isUniquelyReferenced_nonNull_native();
      v128[0] = v96;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v95, v94, v97);
      v129 = v128[0];

      swift_bridgeObjectRelease();
      goto LABEL_94;
    }
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
LABEL_94:
  v128[3] = &type metadata for MobileQuickLookFeatureFlags;
  v128[4] = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  LOBYTE(v128[0]) = 1;
  v98 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v128);
  if ((v98 & 1) == 0)
  {
    v103 = (void *)MEMORY[0x1DF0E41AC](0x704172656B614D7BLL, 0xEC0000007D656C70);
    specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v103);

    swift_unknownObjectRelease();
    v104 = v125;
    goto LABEL_113;
  }
  v99 = (void *)*MEMORY[0x1E0CBC7B0];
  if (!v62)
  {
    v105 = v99;
    specialized Dictionary._Variant.removeValue(forKey:)((unint64_t)v105);

    swift_unknownObjectRelease();
    v104 = v125;
    if (!v125)
    {
LABEL_113:
      v115 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
      v116 = CGImageDestinationCreateWithData(v115, v19, 1uLL, 0);
      if (v116)
      {
        v117 = v116;
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        CGImageDestinationAddImageFromSource(v117, a1, 0, isa);

        if (CGImageDestinationFinalize(v117))
        {
          v119 = v115;
          v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

          return v45;
        }

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      return 0;
    }
    goto LABEL_106;
  }
  v100 = v129;
  if ((v129 & 0xC000000000000001) != 0)
  {
    if (v129 >= 0)
      v100 = v129 & 0xFFFFFFFFFFFFFF8;
    v101 = v99;
    v102 = v62;
    result = __CocoaSet.count.getter();
    if (!__OFADD__(result, 1))
    {
      v100 = specialized _NativeDictionary.init(_:capacity:)(v100, result + 1);
      goto LABEL_105;
    }
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  v106 = v99;
  v107 = v62;
LABEL_105:
  v108 = swift_isUniquelyReferenced_nonNull_native();
  v128[0] = v100;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v62, v99, v108);
  v129 = v128[0];

  swift_bridgeObjectRelease();
  v104 = v125;
  if (!v125)
    goto LABEL_113;
LABEL_106:
  v109 = v104;
  v110 = (void *)MEMORY[0x1DF0E41AC](0x704172656B614D7BLL, 0xEC0000007D656C70);
  v111 = v129;
  if ((v129 & 0xC000000000000001) == 0)
  {
    v113 = v109;
    goto LABEL_112;
  }
  if (v129 >= 0)
    v111 = v129 & 0xFFFFFFFFFFFFFF8;
  v112 = v109;
  result = __CocoaSet.count.getter();
  if (!__OFADD__(result, 1))
  {
    v111 = specialized _NativeDictionary.init(_:capacity:)(v111, result + 1);
LABEL_112:
    v114 = swift_isUniquelyReferenced_nonNull_native();
    v128[0] = v111;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v109, v110, v114);
    v129 = v128[0];

    swift_bridgeObjectRelease();
    goto LABEL_113;
  }
LABEL_124:
  __break(1u);
  return result;
}

uint64_t specialized static Capsule<>.maxSafeImageAreaAsync()()
{
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[6] = objc_opt_self();
  v0[7] = type metadata accessor for MainActor();
  v0[8] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  swift_release();
  *(_QWORD *)(v0 + 72) = objc_msgSend(v1, sel_mainScreen);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)v0[9];
  swift_release();
  objc_msgSend(v1, sel_nativeBounds);
  v0[2] = v2;
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;

  return swift_task_switch();
}

uint64_t specialized static Capsule<>.maxSafeImageAreaAsync()(__n128 a1)
{
  uint64_t v1;

  if (one-time initialization token for imageMarkupOldMaxArea != -1)
    swift_once();
  a1.n128_f64[0] = *(double *)(v1 + 32) * *(double *)(v1 + 40);
  if (*(double *)&static UIConstants.imageMarkupOldMaxArea > a1.n128_f64[0])
    a1.n128_f64[0] = *(double *)&static UIConstants.imageMarkupOldMaxArea;
  return (*(uint64_t (**)(__n128))(v1 + 8))(a1);
}

uint64_t partial apply for closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 & 0xFFFFFFFFFFFFF8) + v1;
  v8 = v1 + v5;
  v9 = *(_BYTE *)(v1 + v6);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *(_QWORD *)v11 = v2;
  *(_QWORD *)(v11 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_QWORD *)(v11 + 32) = v10;
  *(_BYTE *)(v11 + 40) = v9;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v8;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  *(_QWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = v4;
  return swift_task_switch();
}

uint64_t specialized static Capsule<>.imageData(from:downsampled:with:)(uint64_t a1, char a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(_QWORD);
  NSURL *v16;
  const __CFURL *v17;
  const __CFURL *v18;
  CGImageSourceRef v19;
  CGImageSource *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const __CFData *isa;
  uint64_t v26;

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DataOrURL();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (uint64_t *)((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v14, v15);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v22 = *v14;
    v23 = v14[1];
    isa = Data._bridgeToObjectiveC()().super.isa;
    v19 = CGImageSourceCreateWithData(isa, 0);
    outlined consume of Data._Representation(v22, v23);

    if (v19)
      goto LABEL_3;
    return 0;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v10, v14, v6);
  URL._bridgeToObjectiveC()(v16);
  v18 = v17;
  v19 = CGImageSourceCreateWithURL(v17, 0);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (!v19)
    return 0;
LABEL_3:
  v20 = v19;
  v21 = specialized static Capsule<>.imageData(from:downsampled:with:)(v20, a2 & 1, a3);

  return v21;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_1DDCAFBE8()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DataOrURL() - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  swift_unknownObjectRelease();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
  }
  else
  {
    outlined consume of Data._Representation(*(_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v2 + 8));
  }
  return swift_deallocObject();
}

uint64_t closure #1 in static Capsule<>.imageDataAsync(from:downsampled:priority:)partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(type metadata accessor for DataOrURL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 & 0xFFFFFFFFFFFFF8) + v1;
  v8 = v1 + v5;
  v9 = *(_BYTE *)(v1 + v6);
  v10 = *(_QWORD *)(v7 + 8);
  v11 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *(_QWORD *)v11 = v2;
  *(_QWORD *)(v11 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_QWORD *)(v11 + 32) = v10;
  *(_BYTE *)(v11 + 40) = v9;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v8;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)()
{
  return closure #1 in Capsule<>.init(downsampledBaseImageData:imageSize:with:)();
}

uint64_t closure #1 in Capsule<>.importAnnotations(from:scale:)partial apply@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return partial apply for closure #1 in Capsule<>.importAnnotations(from:scale:)(a1, a2);
}

_QWORD *PaperLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  _QWORD *v26;
  _QWORD v28[4];

  v28[1] = a4;
  v28[2] = a5;
  v28[3] = a1;
  v8 = type metadata accessor for CRKeyPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<Paper>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v5, v8, v20);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<Paper> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<Paper>, MEMORY[0x1E0D12878]);
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v23 = objc_allocWithZone((Class)type metadata accessor for PaperView());
  v24 = a3;
  v25 = a2;
  v26 = specialized PaperView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v22, a2, a3);

  return v26;
}

uint64_t closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7, void (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  _QWORD *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  double *v72;
  void *v73;
  id v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, _QWORD, uint64_t, uint64_t);
  char *v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(uint64_t);
  uint64_t v98;
  uint64_t aBlock;
  uint64_t v100;
  uint64_t (*v101)(uint64_t);
  void *v102;
  uint64_t (*v103)();
  uint64_t v104;

  v96 = a9;
  v97 = a8;
  v86 = a7;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v95 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchWorkItemFlags();
  v91 = *(_QWORD *)(v17 - 8);
  v92 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v90 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  v88 = *(_QWORD *)(v20 - 8);
  v89 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v87 = (char *)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for URL();
  v24 = *(_QWORD **)(v23 - 8);
  v25 = v24[8];
  MEMORY[0x1E0C80A78](v23, v26);
  v85 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v94 = (char *)&v82 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v83 = (char *)&v82 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v82 - v39;
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v82 - v43;
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v82 - v47;
  MEMORY[0x1E0C80A78](v49, v50);
  v52 = (char *)&v82 - v51;
  if (a1)
  {
    aBlock = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
    v53 = swift_dynamicCast();
    v54 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v24[7];
    v55 = v53 ^ 1u;
    v56 = v52;
  }
  else
  {
    v54 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v24[7];
    v56 = (char *)&v82 - v51;
    v55 = 1;
  }
  v84 = v54;
  v54(v56, v55, 1, v23);
  outlined init with copy of URL?((uint64_t)v52, (uint64_t)v48);
  v93 = v24;
  v57 = (uint64_t (*)(char *, uint64_t, uint64_t))v24[6];
  v58 = v57(v48, 1, v23);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v48, &demangling cache variable for type metadata for URL?);
  if (v58 == 1)
  {
    if (a1)
    {
      v98 = a1;
      swift_unknownObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v59 = aBlock;
        v60 = v100;
        v61 = v84;
        v84(v40, 1, 1, v23);
        URL.init(dataRepresentation:relativeTo:isAbsolute:)();
        outlined consume of Data._Representation(v59, v60);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for URL?);
        if (v57(v44, 1, v23) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v44, &demangling cache variable for type metadata for URL?);
        }
        else
        {
          v62 = (void (*)(char *, char *, uint64_t))v93[4];
          v63 = v83;
          v62(v83, v44, v23);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v52, &demangling cache variable for type metadata for URL?);
          v62(v52, v63, v23);
          v61(v52, 0, 1, v23);
        }
      }
    }
  }
  outlined init with copy of URL?((uint64_t)v52, (uint64_t)v36);
  if (v57(v36, 1, v23) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for URL?);
  }
  else
  {
    v65 = v93;
    v64 = v94;
    v66 = (void (*)(char *, char *, uint64_t))v93[4];
    v66(v94, v36, v23);
    type metadata accessor for OS_dispatch_queue();
    v84 = (void (*)(char *, _QWORD, uint64_t, uint64_t))static OS_dispatch_queue.main.getter();
    v67 = v85;
    ((void (*)(char *, char *, uint64_t))v65[2])(v85, v64, v23);
    v68 = (*((unsigned __int8 *)v65 + 80) + 24) & ~(unint64_t)*((unsigned __int8 *)v65 + 80);
    v69 = (v25 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
    v70 = swift_allocObject();
    v71 = v86;
    *(_QWORD *)(v70 + 16) = v86;
    v66((char *)(v70 + v68), v67, v23);
    v72 = (double *)(v70 + v69);
    *v72 = a2;
    v72[1] = a3;
    v72[2] = a4;
    v72[3] = a5;
    v103 = partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:);
    v104 = v70;
    aBlock = MEMORY[0x1E0C809B0];
    v100 = 1107296256;
    v101 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v102 = &block_descriptor_6_4;
    v73 = _Block_copy(&aBlock);
    v74 = v71;
    swift_release();
    v75 = v87;
    static DispatchQoS.unspecified.getter();
    aBlock = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v76 = v90;
    v77 = v92;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v78 = v84;
    MEMORY[0x1DF0E48C0](0, v75, v76, v73);
    _Block_release(v73);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v76, v77);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v75, v89);
    ((void (*)(char *, uint64_t))v65[1])(v94, v23);
  }
  v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v80 = (uint64_t)v95;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v95, 1, 1, v79);
  v97(v80);
  outlined destroy of StocksKitCurrencyCache.Provider?(v80, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v52, &demangling cache variable for type metadata for URL?);
}

uint64_t closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(_QWORD *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x2F8))();
  v15 = v14;
  ObjectType = swift_getObjectType();
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v15 + 112))(a2, 0, 0, 0, 1, ObjectType, v15);
  v19 = v18;
  v21 = v20;
  v23 = v22;

  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, double, double, double, double))((*v12 & *a1) + 0x408))(v17, v19, v21, v23 & 1, a3, a4, a5, a6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, uint64_t a2, void (*a3)(char *), void (*a4)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  int v31;
  void (*v32)(char *, char *, uint64_t);
  unint64_t v33;
  uint64_t v34;
  void (**v35)(char *);
  void (*v36)(char *);
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *);
  void (*v49)(char *);
  _QWORD aBlock[6];

  v48 = a3;
  v49 = a4;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v44 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  MEMORY[0x1E0C80A78](v21, v24);
  v25 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v42 - v29;
  if (a1)
  {
    aBlock[0] = a1;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSecureCoding);
    v31 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, v31 ^ 1u, 1, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v32(v30, v20, v21);
      type metadata accessor for OS_dispatch_queue();
      v43 = static OS_dispatch_queue.main.getter();
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v25, v30, v21);
      v33 = (*(unsigned __int8 *)(v22 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
      v34 = swift_allocObject();
      v32((char *)(v34 + v33), v25, v21);
      v35 = (void (**)(char *))(v34 + ((v23 + v33 + 7) & 0xFFFFFFFFFFFFFFF8));
      v36 = v49;
      *v35 = v48;
      v35[1] = v36;
      aBlock[4] = partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
      aBlock[5] = v34;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_35;
      v37 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v38 = v47;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v39 = (void *)v43;
      MEMORY[0x1DF0E48C0](0, v12, v8, v37);
      _Block_release(v37);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v38);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v45);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v30, v21);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v22 + 56))(v20, 1, 1, v21, v28);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for URL?);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v16, 1, 1, v41);
  v48(v16);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

uint64_t closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(unint64_t, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t FileVersionPolicy;
  uint64_t v24;
  void (*v25)(char *);
  _OWORD v26[2];
  uint64_t v27;

  v24 = a3;
  v25 = a2;
  v22[1] = a1;
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v3 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRContext();
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v11 = (void *)MEMORY[0x1DF0E3C90](0, v26);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v12 = type metadata accessor for CRCodableVersion();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
  v17 = v16 + v15;
  v18 = *(void (**)(unint64_t, _QWORD, uint64_t))(v13 + 104);
  v18(v17, *MEMORY[0x1E0D12370], v12);
  v18(v17 + v14, *MEMORY[0x1E0D12378], v12);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  v19 = FileVersionPolicy;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0D127E0], FileVersionPolicy);
  static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v19);
  swift_bridgeObjectRelease();
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 0, 1, v20);
  v25(v10);

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

uint64_t sub_1DDCB0E28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)(v0 + v2, *(void (**)(char *))v3, *(_QWORD *)(v3 + 8));
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for PaperLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDCB0F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PaperLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDCB0F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PaperLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperLayout;
  if (!type metadata singleton initialization cache for PaperLayout)
    return swift_getSingletonMetadata();
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in PaperLayout()
{
  return &protocol witness table for Paper;
}

uint64_t protocol witness for static Layout.canHandle(itemProvider:) in conformance PaperLayout(void *a1)
{
  void *v2;
  unsigned __int8 v3;
  id v4;
  void *v5;

  v2 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v3 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v2);

  if ((v3 & 1) != 0)
    return 1;
  v5 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF4B920);
  v4 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v5);

  return (uint64_t)v4;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDCB10D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  double *v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (double *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in static PaperLayout.loadItemProvider(_:frame:canvas:dragItem:typeIdentifier:completion:)(*(_QWORD **)(v0 + 16), v0 + v2, *v3, v3[1], v3[2], v3[3]);
}

id ReflowCursor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReflowCursor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ReflowCursor()
{
  return objc_opt_self();
}

uint64_t static ViewBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t closure #1 in miniButton(systemName:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v27 = a3;
  v28 = a4;
  v33 = a5;
  v32 = type metadata accessor for LiftHoverEffect();
  v34 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PlainButtonStyle();
  v30 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>>);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v31 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  v35 = v27;
  v36 = v28;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  v23 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>>, MEMORY[0x1E0CDFA58]);
  v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v14);
  static CustomHoverEffect<>.lift.getter();
  v37 = v14;
  v38 = v10;
  v39 = v23;
  v40 = v24;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
  v25 = v32;
  View.hoverEffect<A>(_:isEnabled:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v18);
}

uint64_t sub_1DDCB174C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #2 in closure #1 in miniButton(systemName:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v6 = Image.init(systemName:)();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v5);
  result = swift_getKeyPath();
  *a1 = v6;
  a1[1] = result;
  a1[2] = v8;
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in miniButton(systemName:_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in closure #1 in miniButton(systemName:_:)(a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (uint64_t *)&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, MEMORY[0x1E0CDCF80]);
    v3[0] = MEMORY[0x1E0CDF820];
    v3[1] = v2;
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t MiniButton.body.getter@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  char *v25;
  _QWORD v26[2];

  v25 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ModifiedContent();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v24 - v19;
  a1(v18);
  if (one-time initialization token for buttonSize != -1)
    swift_once();
  static Alignment.center.getter();
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  v26[0] = a4;
  v26[1] = MEMORY[0x1E0CD8D70];
  MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v11, v26);
  v21 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v21(v20, v15, v11);
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v15, v11);
  v21(v25, v20, v11);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v11);
}

uint64_t protocol witness for View.body.getter in conformance MiniButton<A>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;

  return MiniButton.body.getter(*(void (**)(double))v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

_QWORD *initializeBufferWithCopyOfBuffer for MiniButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for MiniButton()
{
  return swift_release();
}

_QWORD *assignWithCopy for MiniButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MiniButton(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MiniButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MiniButton);
}

uint64_t associated type witness table accessor for View.Body : View in MiniButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1DDCB1BB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = type metadata accessor for ModifiedContent();
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0CD8D70];
  return MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v2, v4);
}

uint64_t Image.image.getter()
{
  return Image.image.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t type metadata accessor for Image()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Image;
  if (!type metadata singleton initialization cache for Image)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t key path getter for Image.image : Image()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Image.image : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for CRAssetOrData?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAssetOrData?);
}

uint64_t Image.image.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAssetOrData?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAssetOrData?);
}

uint64_t Image.description.getter()
{
  uint64_t v1;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.description.setter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.wrappedValue.setter();
}

void Image.pdfContentsBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char v28;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.getter();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
LABEL_4:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    return;
  }
  TaggedValue_2.tagged2.getter();
  v6 = v20;
  v7 = v21;
  v8 = v22;
  v9 = v23;
  v10 = v24;
  v11 = v25;
  v13 = v26;
  v12 = v27;
  v14 = v28;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  if ((v14 & 1) != 0)
    goto LABEL_4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v15 = v23;
  v16 = v10 * v22;
  v17 = v11 * v23;
  v18 = v13 * v22;
  v20 = v6 * v22;
  v21 = v7 * v23;
  v22 = v8 * v22;
  v23 = v9 * v23;
  v24 = v16;
  v25 = v17;
  v26 = v18;
  v27 = v12 * v15;
  Quad.perspectiveCorrectedSize.getter();
}

double Image.rotation.getter()
{
  double v1;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.$rotation.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t Image.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double Image.bounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.bounds.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

double Image.frame.getter()
{
  double v1;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Image.$frame.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Image.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.contentsBounds.getter()
{
  return Image.contentsBounds.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t Image.$contentsBounds.getter()
{
  return Image.contentsBounds.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Image.contentsBounds.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Image();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a1(v2);
}

uint64_t Image.$contentsBounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.filter.getter()
{
  return Image.filter.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t Image.$filter.getter()
{
  return Image.filter.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Image.filter.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Image();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  return a1(v2);
}

uint64_t Image.$filter.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t Image.$image.getter()
{
  return Image.image.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Image.image.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Image();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  return a1(v2);
}

uint64_t Image.$image.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double key path getter for Image.frame : Image@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Image.frame : Image()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.frame.setter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

void specialized PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v1 >= 0.0)
    v2 = v1;
  else
    v2 = v1 + 6.28318531;
  type metadata accessor for PaperDocumentPage();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v3 = fmod(v4 - v2, 6.28318531);
  if (v3 > 3.14159265)
    v3 = v3 + -6.28318531;
  if (v3 < -3.14159265)
    v3 = v3 + 6.28318531;
  if (fabs(v3) > 0.01)
    CRRegister.wrappedValue.setter();
}

{
  specialized PaperPage.axisAlignedRotationInDegrees.setter(a1, (void (*)(_QWORD))type metadata accessor for Paper);
}

void specialized PaperPage.axisAlignedRotationInDegrees.setter(uint64_t a1, void (*a2)(_QWORD))
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = round((double)a1 / 90.0) * 3.14159265 * 0.5;
  if (v2 >= 0.0)
    v3 = v2;
  else
    v3 = v2 + 6.28318531;
  a2(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v4 = fmod(v5 - v3, 6.28318531);
  if (v4 > 3.14159265)
    v4 = v4 + -6.28318531;
  if (v4 < -3.14159265)
    v4 = v4 + 6.28318531;
  if (fabs(v4) > 0.01)
    CRRegister.wrappedValue.setter();
}

uint64_t Image.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v40, v2);
  v39 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v38 = (char *)&v35 - v6;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v37, v7);
  v36 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - v11;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v35, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v35 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v35 - v26;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v41 = 0u;
  v42 = 0u;
  CRRegister.init(wrappedValue:)();
  v28 = type metadata accessor for Image();
  v41 = 0u;
  v42 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v41 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 1, 1, v29);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, (uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v19, 1, 1, v30);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v19, (uint64_t)v15, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v31 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v12, 1, 1, v31);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, v36, &demangling cache variable for type metadata for CRAssetOrData?);
  lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for CRAssetOrData?);
  v41 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?, MEMORY[0x1E0D12CF8]);
  CRRegister.init(wrappedValue:)();
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v33 = (uint64_t)v38;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v38, 1, 1, v32);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v33, v39, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v33, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v41 = xmmword_1DDF33630;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?, &demangling cache variable for type metadata for Data?, MEMORY[0x1E0D116A8]);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  result = CROrderedSet.init()();
  *(_QWORD *)(a1 + *(int *)(v28 + 56)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t one-time initialization function for defaultFilterQueue()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v0, v2);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8, v9);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0DEF8D8], v3);
  v11[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v1, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  defaultFilterQueue = result;
  return result;
}

uint64_t (*Image.bounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Image.$bounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Image.$bounds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Image.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$frame : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Image.$frame.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for Image.rotation : Image@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.rotation : Image()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.rotation.setter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Image.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$rotation : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Image.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for Image.contentsBounds : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t Image.contentsBounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
}

uint64_t (*Image.contentsBounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$contentsBounds : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Image.$contentsBounds.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path setter for Image.filter : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
}

uint64_t Image.filter.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
}

uint64_t (*Image.filter.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$filter : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Image.$filter.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Image.image.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Image.$image : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Image.$image.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Image.description.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$description.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Image.$description : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Image.$description.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$description.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.drawing.getter()
{
  return Image.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for Image.drawing : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t Image.drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*Image.drawing.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$drawing.getter()
{
  return Image.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Image.drawing.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Image();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for Image.$drawing : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Image.$drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$drawing.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 44);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.imageGenerationRecipe.getter()
{
  uint64_t v1;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Image.imageGenerationRecipe : Image@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Image.imageGenerationRecipe : Image(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  type metadata accessor for Image();
  outlined copy of Data?(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Image.imageGenerationRecipe.setter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Image.imageGenerationRecipe.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Image.$imageGenerationRecipe.getter()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Image.$imageGenerationRecipe : Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Image.$imageGenerationRecipe.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Image();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Image.$imageGenerationRecipe.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Image() + 48);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Image.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Image() + 52);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Image.subelements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Image() + 52);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*Image.subelements.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Image();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Image.additionalFields.getter()
{
  type metadata accessor for Image();
  return swift_bridgeObjectRetain();
}

uint64_t Image.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Image() + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*Image.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Image();
  return UnknownCanvasElementView.flags.modify;
}

double static Image.fields.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[32];
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)v31 = *(_OWORD *)&qword_1EDB712C0;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_1EDB712D0;
  v32 = xmmword_1EDB712E0;
  v28 = xmmword_1EDB71280;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1EDB71290;
  *(_OWORD *)&v29[16] = xmmword_1EDB712A0;
  v30 = *(_OWORD *)&qword_1EDB712B0;
  *(_OWORD *)&v25[16] = xmmword_1EDB71240;
  v26 = *(_OWORD *)&qword_1EDB71250;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1EDB71260;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_1EDB71270;
  *(_OWORD *)v23 = static Image.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB71210;
  v24 = xmmword_1EDB71220;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB71230;
  v2 = static Image.fields;
  v3 = unk_1EDB71218;
  v4 = qword_1EDB71230;
  v5 = *((_QWORD *)&xmmword_1EDB71240 + 1);
  v6 = qword_1EDB71260;
  v7 = unk_1EDB71278;
  v8 = qword_1EDB71290;
  v9 = *((_QWORD *)&xmmword_1EDB712A0 + 1);
  v10 = qword_1EDB712C0;
  v22 = unk_1EDB712D8;
  v12 = *(_OWORD *)&v23[8];
  v13 = xmmword_1EDB71220;
  v14 = *(_OWORD *)&v25[8];
  v15 = *(_OWORD *)&qword_1EDB71250;
  v16 = *(_OWORD *)&v27[8];
  v17 = xmmword_1EDB71280;
  v18 = *(_OWORD *)&v29[8];
  v19 = *(_OWORD *)&qword_1EDB712B0;
  v20 = *(_OWORD *)&v31[8];
  v21 = xmmword_1EDB712E0;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 216) = v22;
  result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t Image.init(url:imageWidth:assetManager:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v33 = a4;
  v34 = a5;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v31 - v18;
  v20 = type metadata accessor for Image();
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a1, v7, v23);
  if ((a3 & 1) != 0)
  {
    Image.init(url:targetPageSize:assetManager:)((uint64_t)v11, 0.0, 0.0, 1, v33, (uint64_t)v19);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    v15 = v19;
    v27 = v34;
    if (v29)
      goto LABEL_3;
LABEL_5:
    outlined init with take of Image((uint64_t)v15, (uint64_t)v25);
    outlined init with take of Image((uint64_t)v25, v27);
    v28 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v27, v28, 1, v20);
  }
  Image.init(url:targetPageSize:assetManager:)((uint64_t)v11, v32, v32, 0, v33, (uint64_t)v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20);
  v27 = v34;
  if (!v26)
    goto LABEL_5;
LABEL_3:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Image?);
  v28 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v27, v28, 1, v20);
}

uint64_t Image.init(url:targetPageSize:assetManager:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, double a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSURL *v46;
  const __CFURL *v47;
  const __CFURL *v48;
  CGImageSource *v49;
  CFDictionaryRef v50;
  CFDictionaryRef v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  void *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v105;
  char *v106;
  double v107;
  double v108;
  int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;

  v113 = a5;
  v109 = a4;
  v108 = a3;
  v107 = a2;
  v119 = a1;
  v114 = a6;
  v122 = type metadata accessor for URL();
  v112 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122, v6);
  v110 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v121, v8);
  v118 = (unint64_t)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v117 = (char *)&v105 - v12;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v116, v13);
  v123 = (uint64_t)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v105 - v17;
  v115 = (void (*)(char *, uint64_t, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v115, v19);
  v21 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v105 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (char *)&v105 - v32;
  v34 = (int *)type metadata accessor for Image();
  v120 = *((_QWORD *)v34 - 1);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v105 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v125 = 0u;
  v126 = 0u;
  CRRegister.init(wrappedValue:)();
  v38 = &v37[v34[5]];
  v125 = 0u;
  v126 = 0u;
  v111 = v38;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v125 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v33, 1, 1, v39);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v33, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v25, 1, 1, v40);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, (uint64_t)v21, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  v41 = &v37[v34[9]];
  v42 = type metadata accessor for CRAssetOrData();
  v115 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v115(v18, 1, 1, v42);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, v123, &demangling cache variable for type metadata for CRAssetOrData?);
  lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v116 = (uint64_t)v18;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CRAssetOrData?);
  v125 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?, MEMORY[0x1E0D12CF8]);
  CRRegister.init(wrappedValue:)();
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v44 = (uint64_t)v117;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v117, 1, 1, v43);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v44, v118, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v44, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v125 = xmmword_1DDF33630;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type String? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?, &demangling cache variable for type metadata for Data?, MEMORY[0x1E0D116A8]);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  v45 = v119;
  CROrderedSet.init()();
  v121 = (uint64_t)v34;
  v46 = (NSURL *)v34[14];
  *(Class *)((char *)&v46->super.isa + (_QWORD)v37) = (Class)MEMORY[0x1E0DEE9E0];
  URL._bridgeToObjectiveC()(v46);
  v48 = v47;
  v49 = CGImageSourceCreateWithURL(v47, 0);

  if (v49)
  {
    v50 = CGImageSourceCopyPropertiesAtIndex(v49, 0, 0);
    v106 = v37;
    v105 = v41;
    if (!v50)
    {
      v57 = 768;
      v60 = 768;
      v59 = v114;
      v61 = v122;
      v62 = v112;
      v63 = v110;
      if ((v109 & 1) == 0)
        goto LABEL_50;
      goto LABEL_46;
    }
    v51 = v50;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    v52 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v53 = (void *)*MEMORY[0x1E0CBD048];
    if ((v52 & 0xC000000000000001) != 0)
    {
      v118 = v52 & 0xC000000000000001;
      v54 = v45;
      v55 = v53;
      swift_bridgeObjectRetain();
      v56 = __CocoaDictionary.lookup(_:)();

      swift_bridgeObjectRelease();
      if (v56 && (*(_QWORD *)&v125 = v56, (swift_dynamicCast() & 1) != 0))
        v57 = v124;
      else
        v57 = 768;
      v61 = v122;
      v64 = v109;
      v65 = (void *)*MEMORY[0x1E0CBD040];
      swift_bridgeObjectRetain();
      v66 = v65;
      v67 = __CocoaDictionary.lookup(_:)();
      if (!v67)
      {

        swift_bridgeObjectRelease();
        v69 = (void *)*MEMORY[0x1E0CBCFF0];
        v60 = 768;
        v45 = v54;
        goto LABEL_22;
      }
      v68 = v67;
LABEL_13:
      swift_bridgeObjectRelease();

      *(_QWORD *)&v125 = v68;
      if (!swift_dynamicCast())
      {
        v76 = (id)*MEMORY[0x1E0CBCFF0];
        v60 = 768;
        v45 = v54;
        if (!v118)
          goto LABEL_35;
LABEL_24:
        v77 = v45;
        v78 = __CocoaDictionary.lookup(_:)();
        if (v78)
        {
          v79 = v78;
          swift_bridgeObjectRelease();
          v59 = v114;
          goto LABEL_38;
        }

        swift_bridgeObjectRelease();
        v59 = v114;
        v61 = v122;
        goto LABEL_49;
      }
      v60 = v124;
      v69 = (void *)*MEMORY[0x1E0CBCFF0];
      v45 = v54;
      if (!v118)
        goto LABEL_34;
LABEL_22:
      v76 = v69;
      goto LABEL_24;
    }
    if (*(_QWORD *)(v52 + 16))
    {
      v70 = v53;
      swift_bridgeObjectRetain();
      v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v70);
      if ((v72 & 1) != 0)
      {
        v73 = v45;
        v74 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v71);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        *(_QWORD *)&v125 = v74;
        v45 = v73;
        v75 = swift_dynamicCast();
        v61 = v122;
        v64 = v109;
        if (v75)
        {
          v57 = v124;
          if (!*(_QWORD *)(v52 + 16))
            goto LABEL_33;
LABEL_29:
          v118 = 0;
          v54 = v45;
          v80 = (void *)*MEMORY[0x1E0CBD040];
          swift_bridgeObjectRetain();
          v66 = v80;
          v81 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v66);
          if ((v82 & 1) != 0)
          {
            v68 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v81);
            swift_unknownObjectRetain();
            goto LABEL_13;
          }

          swift_bridgeObjectRelease();
          v69 = (void *)*MEMORY[0x1E0CBCFF0];
          v60 = 768;
          v45 = v54;
LABEL_34:
          v76 = v69;
LABEL_35:
          if (*(_QWORD *)(v52 + 16))
          {
            v83 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v76);
            v59 = v114;
            if ((v84 & 1) != 0)
            {
              v77 = v45;
              v79 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v83);
              swift_unknownObjectRetain();
              swift_bridgeObjectRelease();
LABEL_38:
              v63 = v110;

              *(_QWORD *)&v125 = v79;
              if ((swift_dynamicCast() & 1) != 0)
              {
                if (v124 <= 4)
                  v85 = v57;
                else
                  v85 = v60;
                if (v124 > 4)
                  v60 = v57;
                v57 = v85;
              }
              v45 = v77;
              v61 = v122;
              v62 = v112;
              if ((v64 & 1) != 0)
                goto LABEL_46;
LABEL_50:
              v88 = v108 / (double)v60;
              v89 = v107 / (double)v57;
              v90 = v88 * 0.25;
              v91 = v88 * 1.4;
              if (v91 >= v89)
                v91 = v107 / (double)v57;
              if (v89 >= v90)
                v92 = v91;
              else
                v92 = v90;
              v93 = v92 * (double)v57;
              v94 = v92 * (double)v60;
              v95 = floor(v93);
              v96 = v93 - v95;
              v97 = ceil(v93);
              if (v96 < 0.49)
                v86 = v95;
              else
                v86 = v97;
              v98 = floor(v94);
              v99 = v94 - v98;
              v100 = ceil(v94);
              if (v99 < 0.49)
                v87 = v98;
              else
                v87 = v100;
              goto LABEL_61;
            }

            swift_bridgeObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease();
            v59 = v114;
          }
LABEL_49:
          v62 = v112;
          v63 = v110;
          if ((v64 & 1) == 0)
            goto LABEL_50;
LABEL_46:
          v86 = (double)v57;
          v87 = (double)v60;
LABEL_61:
          v101 = v62;
          (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v63, v45, v61);
          swift_retain();
          v102 = v116;
          CRAsset.init(url:coordinated:assetManager:)();
          swift_storeEnumTagMultiPayload();
          v115((char *)v102, 0, 1, v42);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v102, v123, &demangling cache variable for type metadata for CRAssetOrData?);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v102, &demangling cache variable for type metadata for CRAssetOrData?);
          v125 = 0uLL;
          *(double *)&v126 = v86;
          *((double *)&v126 + 1) = v87;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
          CRRegister.wrappedValue.setter();
          v125 = 0uLL;
          *(double *)&v126 = v86;
          *((double *)&v126 + 1) = v87;
          v103 = (uint64_t)v106;
          CRRegister.wrappedValue.setter();
          swift_release();

          (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v45, v61);
          outlined init with take of Image(v103, v59);
          v58 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v59, v58, 1, v121);
        }
        v57 = 768;
        if (*(_QWORD *)(v52 + 16))
          goto LABEL_29;
      }
      else
      {

        swift_bridgeObjectRelease();
        v57 = 768;
        v61 = v122;
        v64 = v109;
        if (*(_QWORD *)(v52 + 16))
          goto LABEL_29;
      }
    }
    else
    {
      v57 = 768;
      v61 = v122;
      v64 = v109;
    }
LABEL_33:
    v69 = (void *)*MEMORY[0x1E0CBCFF0];
    v60 = 768;
    goto LABEL_34;
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v45, v122);
  outlined destroy of PKStrokeProperties((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v58 = 1;
  v59 = v114;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v59, v58, 1, v121);
}

id Image.init(docCamInfo:inScan:targetPageSize:assetManager:)@<X0>(void *a1@<X0>, void *a2@<X1>, double a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  id result;
  void *v48;
  id v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  unsigned int (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  __int16 v64;
  uint64_t v65;
  void *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  __int128 v90;
  __int128 v91;
  double v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  char *v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  double v114;
  double v115;
  float64x2_t v116;
  double v117;
  double v118;
  double v119;
  double v120;

  v112 = a6;
  v102 = a5;
  v98 = a4;
  v97 = a3;
  v110 = a7;
  v101 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v101, v9);
  v100 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v99 = (char *)&v97 - v13;
  v106 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?));
  MEMORY[0x1E0C80A78](*(_QWORD *)&v106, v14);
  v105 = (uint64_t)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  *(_QWORD *)&v104 = (char *)&v97 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v111 = (uint64_t)&v97 - v25;
  v26 = type metadata accessor for URL();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v97 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v97 - v37;
  v39 = type metadata accessor for Image();
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  *(_QWORD *)&v103 = (char *)&v97 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43, v44);
  v107 = (uint64_t)&v97 - v46;
  v113 = a1;
  result = objc_msgSend(a1, sel_fullImageUUID, v45);
  if (result)
  {
    v48 = result;
    v109 = a2;
    v49 = objc_msgSend(a2, sel_getImageURL_, result);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v108 = v38;
    v50(v34, v38, v26);
    v50(v30, v34, v26);
    v51 = v112;
    swift_retain();
    Image.init(url:targetPageSize:assetManager:)((uint64_t)v30, 0.0, 0.0, 1, v51, (uint64_t)v22);
    v52 = *(void (**)(char *, uint64_t))(v27 + 8);
    v52(v34, v26);
    v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v54 = v39;
    if (v53(v22, 1, v39))
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Image?);
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v56 = v111;
      v55(v111, 1, 1, v39);
    }
    else
    {
      v57 = (uint64_t)v22;
      v58 = v103;
      outlined init with take of Image(v57, v103);
      v59 = v58;
      v56 = v111;
      outlined init with take of Image(v59, v111);
      v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v55(v56, 0, 1, v39);
    }
    if (v53((char *)v56, 1, v39))
    {

      swift_release();
      v52(v108, v26);
      outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for Image?);
      v60 = 1;
      v61 = v110;
      return (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55)(v61, v60, 1, v54);
    }
    v111 = v26;
    v62 = v107;
    outlined init with take of Image(v56, v107);
    v63 = v113;
    v64 = (unsigned __int16)objc_msgSend(v113, sel_currentFilter);
    v65 = v104;
    TaggedValue_1<>.init(docCameraFilter:)(v64, v104);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v65, v105, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
    CRRegister.init(wrappedValue:)();
    outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    result = objc_msgSend(v63, sel_imageQuad);
    if (result)
    {
      v66 = result;
      objc_msgSend(result, sel_topLeft);
      v68 = v67;
      v70 = v69;
      objc_msgSend(v66, sel_topRight);
      v72 = v71;
      v74 = v73;
      objc_msgSend(v66, sel_bottomLeft);
      v76 = v75;
      v78 = v77;
      objc_msgSend(v66, sel_bottomRight);
      v80 = v79;
      v82 = v81;

      v114 = v68;
      v115 = v70;
      v116.f64[0] = v72;
      v116.f64[1] = v74;
      v117 = v76;
      v118 = v78;
      v119 = v80;
      v120 = v82;
      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      lazy protocol witness table accessor for type Quad and conformance Quad();
      v83 = (uint64_t)v99;
      TaggedValue_2.init(_:)();
      v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v83, v100, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      if ((v102 & 1) != 0)
      {
        v85 = v54;
      }
      else
      {
        v106 = v97;
        v105 = v98;
        v85 = v54;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.getter();
        v86 = v116.f64[1];
        v87 = v76 * v116.f64[0];
        v88 = v78 * v116.f64[1];
        v89 = v80 * v116.f64[0];
        v114 = v68 * v116.f64[0];
        v115 = v70 * v116.f64[1];
        v116.f64[0] = v72 * v116.f64[0];
        v116.f64[1] = v74 * v116.f64[1];
        v117 = v87;
        v118 = v88;
        v119 = v89;
        v120 = v82 * v86;
        *(double *)&v90 = Quad.perspectiveCorrectedSize.getter();
        v104 = v90;
        v103 = v91;
        CRRegister.wrappedValue.getter();
        v92 = *(double *)&v105 / *(double *)&v103 * 1.4;
        if (v92 >= v106 / *(double *)&v104)
          v92 = v106 / *(double *)&v104;
        if (v106 / *(double *)&v104 < *(double *)&v105 / *(double *)&v103 * 0.25)
          v92 = *(double *)&v105 / *(double *)&v103 * 0.25;
        *(_QWORD *)&v93.f64[0] = v104;
        *(_QWORD *)&v93.f64[1] = v103;
        v94 = vmulq_n_f64(v93, v92);
        v95 = v93;
        v96 = vrndmq_f64(v94);
        v114 = 0.0;
        v115 = 0.0;
        v116 = vdivq_f64(vmulq_f64(v116, (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v94, v96), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v94), (int8x16_t)v96)), v95);
        CRRegister.init(wrappedValue:)();
      }

      swift_release();
      v61 = v110;
      v52(v108, v111);
      outlined init with take of Image(v62, v61);
      v60 = 0;
      v54 = v85;
      return (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v55)(v61, v60, 1, v54);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.minEncodingVersion.getter();
}

double protocol witness for static CRStruct_Base_10.fields.getter in conformance Image@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  _BYTE v27[32];
  __int128 v28;
  _BYTE v29[32];
  __int128 v30;
  _BYTE v31[32];
  __int128 v32;

  if (one-time initialization token for fields != -1)
    swift_once();
  *(_OWORD *)v31 = *(_OWORD *)&qword_1EDB712C0;
  *(_OWORD *)&v31[16] = *(_OWORD *)&qword_1EDB712D0;
  v32 = xmmword_1EDB712E0;
  v28 = xmmword_1EDB71280;
  *(_OWORD *)v29 = *(_OWORD *)&qword_1EDB71290;
  *(_OWORD *)&v29[16] = xmmword_1EDB712A0;
  v30 = *(_OWORD *)&qword_1EDB712B0;
  *(_OWORD *)&v25[16] = xmmword_1EDB71240;
  v26 = *(_OWORD *)&qword_1EDB71250;
  *(_OWORD *)v27 = *(_OWORD *)&qword_1EDB71260;
  *(_OWORD *)&v27[16] = *(_OWORD *)&qword_1EDB71270;
  *(_OWORD *)v23 = static Image.fields;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB71210;
  v24 = xmmword_1EDB71220;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB71230;
  v2 = static Image.fields;
  v3 = unk_1EDB71218;
  v4 = qword_1EDB71230;
  v5 = *((_QWORD *)&xmmword_1EDB71240 + 1);
  v6 = qword_1EDB71260;
  v7 = unk_1EDB71278;
  v8 = qword_1EDB71290;
  v9 = *((_QWORD *)&xmmword_1EDB712A0 + 1);
  v10 = qword_1EDB712C0;
  v22 = unk_1EDB712D8;
  v12 = *(_OWORD *)&v23[8];
  v13 = xmmword_1EDB71220;
  v14 = *(_OWORD *)&v25[8];
  v15 = *(_OWORD *)&qword_1EDB71250;
  v16 = *(_OWORD *)&v27[8];
  v17 = xmmword_1EDB71280;
  v18 = *(_OWORD *)&v29[8];
  v19 = *(_OWORD *)&qword_1EDB712B0;
  v20 = *(_OWORD *)&v31[8];
  v21 = xmmword_1EDB712E0;
  outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))((uint64_t)v23);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v18;
  *(_QWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 176) = v19;
  *(_QWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 216) = v22;
  result = *(double *)&v21;
  *(_OWORD *)(a1 + 224) = v21;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return static CRStruct_10_Final.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance Image()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 56);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*protocol witness for CRStruct_Base.additionalFields.modify in conformance Image())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for CRDT.context.getter in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRStruct_10_Final.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Image()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return CRDT.init(serializedData:)();
}

uint64_t Image.shared(_:)(uint64_t a1)
{
  return Image.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

{
  return Image.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t Image.name.getter()
{
  return 0;
}

uint64_t Image.name.setter()
{
  return swift_bridgeObjectRelease();
}

uint64_t (*Image.name.modify(_QWORD *a1))()
{
  *a1 = 0;
  a1[1] = 0;
  return destroy for ImageFileSync.ImageFileSyncError;
}

uint64_t Image.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for CRAssetOrData();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAssetOrData?);
    v11 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    outlined init with copy of PKStrokeProperties((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v13 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
    }
    else
    {
      v14 = type metadata accessor for CRAsset();
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a1, v6, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
    }
    return outlined destroy of PKStrokeProperties((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  }
}

uint64_t Image.renderedImage(in:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v8;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  v8 = (char *)&async function pointer to specialized Image.renderedImage(in:)
     + async function pointer to specialized Image.renderedImage(in:);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

unint64_t lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v2 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>> and conformance TaggedValue_1<A>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>, MEMORY[0x1E0D11FD8]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAssetOrData?);
    v2 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (uint64_t (*)(uint64_t))type metadata accessor for CRAssetOrData, (uint64_t)&protocol conformance descriptor for CRAssetOrData);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRAssetOrData? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGRect>>), (String, WritableKeyPath<Image, CRRegister<CGFloat>>), (String, WritableKeyPath<Image, CRRegister<CRAssetOrData?>>), (String, WritableKeyPath<Image, CRRegister<String?>>), (String, WritableKeyPath<Image, CRRegister<Ref<PKDrawingStruct>?>>), (String, WritableKeyPath<Image, CRRegister<Data?>>), (String, WritableKeyPath<Image, CROrderedSet<SharedTagged_9<TaggedCanvasElement>>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_2<CGRect, Quad>?>>), (String, WritableKeyPath<Image, CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>>))(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined init with take of Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Image();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

CGImageRef closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)@<X0>(CGImage *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CGImageRef *a4@<X8>)
{
  CGImageRef result;

  result = specialized static Image._filterAndCrop(_:filter:crop:)(a1, a2, a3);
  *a4 = result;
  return result;
}

Swift::Int __swiftcall Image.quadImageMaxDimension(in:context:quad:)(__C::CGRect in, CGContextRef context, PaperKit::Quad *quad)
{
  CGFloat x;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double width;
  double height;
  double v11;
  double v12;
  Swift::Int result;
  double v14;
  CGFloat y;
  CGFloat v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  x = quad->topRight.x;
  y = quad->topLeft.y;
  v16 = quad->topLeft.x;
  v4 = quad->topRight.y;
  v5 = quad->bottomLeft.x;
  v7 = quad->bottomLeft.y;
  v6 = quad->bottomRight.x;
  v8 = quad->bottomRight.y;
  v17 = CGContextConvertRectToDeviceSpace(context, (CGRect)in);
  width = v17.size.width;
  height = v17.size.height;
  v17.size.width = 0.0;
  v17.size.height = 0.0;
  v21.size.width = 0.0;
  v21.size.height = 0.0;
  v17.origin.x = v5;
  v17.origin.y = v7;
  v21.origin.x = v6;
  v21.origin.y = v8;
  v18 = CGRectUnion(v17, v21);
  v22.size.width = 0.0;
  v22.size.height = 0.0;
  v22.origin.x = x;
  v22.origin.y = v4;
  v19 = CGRectUnion(v18, v22);
  v23.size.width = 0.0;
  v23.size.height = 0.0;
  v23.origin.y = y;
  v23.origin.x = v16;
  v20 = CGRectUnion(v19, v23);
  v11 = v20.size.width;
  v12 = v20.size.height;
  result = CGRectIsEmpty(v20);
  if ((result & 1) == 0)
  {
    width = width / v11;
    height = height / v12;
  }
  if (width > height)
    v14 = width;
  else
    v14 = height;
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v14 < 9.22337204e18)
    return (uint64_t)v14;
LABEL_12:
  __break(1u);
  return result;
}

uint64_t Image.renderImage(in:isTopLevel:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v3 + 81) = a2;
  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  v4 = type metadata accessor for CRAssetOrData();
  *(_QWORD *)(v3 + 208) = v4;
  *(_QWORD *)(v3 + 216) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 224) = swift_task_alloc();
  *(_QWORD *)(v3 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(_QWORD *)(v3 + 240) = swift_task_alloc();
  *(_QWORD *)(v3 + 248) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  v5 = type metadata accessor for CRAsset();
  *(_QWORD *)(v3 + 264) = v5;
  *(_QWORD *)(v3 + 272) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Image.renderImage(in:isTopLevel:)()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int v11;
  int Type;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  char v22;
  CGContext *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t inited;
  void *v48;
  id v49;
  const __CFDictionary *isa;
  const __CFData *v51;
  CGImageSourceRef v52;
  CGImageRef v53;
  CGImage *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  id v59;
  void *v60;
  CGImage *v61;
  int v62;
  CGImageRef v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  const __CFData *v68;
  CGDataProvider *v69;
  _QWORD *v70;
  uint64_t v72;
  char v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  PaperKit::Quad quad;
  __C::CGRect v79;

  if (*(_BYTE *)(v0 + 81) == 1)
  {
    Image.pdfContentsBounds.getter();
    v2 = v1;
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v9 = 0;
  }
  else
  {
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v2 = *(double *)(v0 + 136);
    v4 = *(double *)(v0 + 144);
    v6 = *(double *)(v0 + 152);
    v8 = *(double *)(v0 + 160);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v9 = *(_QWORD *)(v0 + 168);
  }
  *(double *)(v0 + 328) = v6;
  *(double *)(v0 + 336) = v8;
  *(double *)(v0 + 312) = v2;
  *(double *)(v0 + 320) = v4;
  *(_QWORD *)(v0 + 304) = v9;
  specialized CanvasElement.maxDimensionInPixels(_:in:)(*(CGContext **)(v0 + 184), v2, v4, v6, v8);
  v11 = v10;
  Type = CGContextGetType();
  if (Type != 1 && Type != 6)
  {
    v13 = *(_QWORD *)(v0 + 296);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
    v17 = *(_QWORD *)(v0 + 296);
    if (v16 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 296), (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    }
    else
    {
      TaggedValue_2.tagged2.getter();
      v18 = *(double *)(v0 + 16);
      v19 = *(double *)(v0 + 24);
      v20 = *(double *)(v0 + 32);
      v21 = *(double *)(v0 + 40);
      v76 = *(double *)(v0 + 56);
      v77 = *(double *)(v0 + 48);
      v74 = *(double *)(v0 + 72);
      v75 = *(double *)(v0 + 64);
      v22 = *(_BYTE *)(v0 + 80);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
      if ((v22 & 1) == 0)
      {
        v23 = *(CGContext **)(v0 + 184);
        quad.topLeft.x = v18;
        quad.topLeft.y = v19;
        quad.topRight.x = v20;
        quad.topRight.y = v21;
        quad.bottomLeft.x = v77;
        quad.bottomLeft.y = v76;
        quad.bottomRight.x = v75;
        quad.bottomRight.y = v74;
        v79.origin.x = v2;
        v79.origin.y = v4;
        v79.size.width = v6;
        v79.size.height = v8;
        v11 = Image.quadImageMaxDimension(in:context:quad:)(v79, v23, &quad);
      }
    }
  }
  v24 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 208);
  v26 = *(_QWORD *)(v0 + 216);
  *(_QWORD *)(v0 + 344) = type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v27(v24, 1, v25) == 1)
  {
    v28 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 272);
    v30 = *(_QWORD *)(v0 + 256);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 248), &demangling cache variable for type metadata for CRAssetOrData?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v30, 1, 1, v28);
  }
  else
  {
    outlined init with copy of PKStrokeProperties(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v31 = 1;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 264));
      v31 = 0;
    }
    v32 = *(_QWORD *)(v0 + 264);
    v33 = *(_QWORD *)(v0 + 272);
    v35 = *(_QWORD *)(v0 + 248);
    v34 = *(_QWORD *)(v0 + 256);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v34, v31, 1, v32);
    outlined destroy of PKStrokeProperties(v35, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 32))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
      v70 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 352) = v70;
      *v70 = v0;
      v70[1] = Image.renderImage(in:isTopLevel:);
      return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v11, 0, 0);
    }
  }
  v36 = *(_QWORD *)(v0 + 240);
  v37 = *(_QWORD *)(v0 + 208);
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 256), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  CRRegister.wrappedValue.getter();
  v38 = v27(v36, 1, v37);
  v39 = *(_QWORD *)(v0 + 240);
  if (v38 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, &demangling cache variable for type metadata for CRAssetOrData?);
    goto LABEL_38;
  }
  outlined init with copy of PKStrokeProperties(v39, *(_QWORD *)(v0 + 224), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v41 = *(_QWORD *)(v0 + 240);
  v42 = *(uint64_t **)(v0 + 224);
  if (EnumCaseMultiPayload != 1)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    outlined destroy of PKStrokeProperties(v41, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    goto LABEL_38;
  }
  v43 = *v42;
  v44 = v42[1];
  v45 = v42[2];
  v46 = v42[3];
  outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 240), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v48 = (void *)*MEMORY[0x1E0CBD240];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBD240];
  *(_BYTE *)(inited + 40) = 0;
  v49 = v48;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v51 = Data._bridgeToObjectiveC()().super.isa;
  v52 = CGImageSourceCreateWithData(v51, isa);

  v53 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v52, v43, v44, v11, 0);
  outlined consume of Data._Representation(v43, v44);
  outlined consume of Data._Representation(v45, v46);
  if (v53)
  {
    v54 = v53;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    if (one-time initialization token for defaultFilterQueue != -1)
      swift_once();
    v55 = *(_QWORD *)(v0 + 288);
    v56 = *(_QWORD *)(v0 + 200);
    v57 = (void *)defaultFilterQueue;
    v58 = (_QWORD *)swift_task_alloc();
    v58[2] = v54;
    v58[3] = v56;
    v58[4] = v55;
    type metadata accessor for CGImageRef(0);
    v59 = v57;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    v60 = *(void **)(v0 + 176);
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v56, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v61 = v60;
    v62 = CGContextGetType();
    if (v62 == 6 || (v63 = v61, v62 == 1))
    {
      v64 = CGImageRef.jpegData(compressionQuality:)(0.9);
      v63 = v61;
      if (v65 >> 60 != 15)
      {
        v66 = v64;
        v67 = v65;
        v68 = Data._bridgeToObjectiveC()().super.isa;
        v69 = CGDataProviderCreateWithCFData(v68);

        if (v69)
        {
          v63 = CGImageCreateWithJPEGDataProvider(v69, 0, 0, kCGRenderingIntentDefault);
          outlined consume of Data?(v66, v67);

          if (!v63)
            goto LABEL_32;
        }
        else
        {
          outlined consume of Data?(v66, v67);
          v63 = v61;
        }
      }
    }

    v61 = v63;
LABEL_32:
    if ((*(_BYTE *)(v0 + 81) & 1) != 0)
    {
      v72 = 0;
      v73 = 1;
    }
    else
    {
      if (one-time initialization token for imageCornerRadius == -1)
      {
        v73 = 0;
      }
      else
      {
        swift_once();
        v73 = *(_BYTE *)(v0 + 81);
      }
      v72 = static UIConstants.imageCornerRadius;
    }
    specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v61, v72, v73, *(CGContext **)(v0 + 184), *(CGFloat *)(v0 + 312), *(CGFloat *)(v0 + 320), *(CGFloat *)(v0 + 328), *(CGFloat *)(v0 + 336), *(double *)(v0 + 304));

  }
LABEL_38:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  id v7;
  void *v8;
  CGImage *v9;
  int Type;
  CGImageRef v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const __CFData *isa;
  CGDataProvider *v17;
  uint64_t v18;
  char v19;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 264));
  v1 = *(void **)(v0 + 360);
  if (v1)
  {
    v2 = v1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    CRRegister.wrappedValue.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    CRRegister.wrappedValue.getter();
    if (one-time initialization token for defaultFilterQueue != -1)
      swift_once();
    v3 = *(_QWORD *)(v0 + 288);
    v4 = *(_QWORD *)(v0 + 200);
    v5 = (void *)defaultFilterQueue;
    v6 = (_QWORD *)swift_task_alloc();
    v6[2] = v2;
    v6[3] = v4;
    v6[4] = v3;
    type metadata accessor for CGImageRef(0);
    v7 = v5;
    OS_dispatch_queue.sync<A>(execute:)();

    swift_task_dealloc();
    v8 = *(void **)(v0 + 176);
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v4, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    v9 = v8;
    Type = CGContextGetType();
    if (Type == 6 || (v11 = v9, Type == 1))
    {
      v12 = CGImageRef.jpegData(compressionQuality:)(0.9);
      v11 = v9;
      if (v13 >> 60 != 15)
      {
        v14 = v12;
        v15 = v13;
        isa = Data._bridgeToObjectiveC()().super.isa;
        v17 = CGDataProviderCreateWithCFData(isa);

        if (v17)
        {
          v11 = CGImageCreateWithJPEGDataProvider(v17, 0, 0, kCGRenderingIntentDefault);
          outlined consume of Data?(v14, v15);

          if (!v11)
          {
            if ((*(_BYTE *)(v0 + 81) & 1) != 0)
            {
LABEL_10:
              v18 = 0;
              v19 = 1;
LABEL_16:
              specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(v9, v18, v19, *(CGContext **)(v0 + 184), *(CGFloat *)(v0 + 312), *(CGFloat *)(v0 + 320), *(CGFloat *)(v0 + 328), *(CGFloat *)(v0 + 336), *(double *)(v0 + 304));

              goto LABEL_17;
            }
LABEL_13:
            if (one-time initialization token for imageCornerRadius == -1)
            {
              v19 = 0;
            }
            else
            {
              swift_once();
              v19 = *(_BYTE *)(v0 + 81);
            }
            v18 = static UIConstants.imageCornerRadius;
            goto LABEL_16;
          }
        }
        else
        {
          outlined consume of Data?(v14, v15);
          v11 = v9;
        }
      }
    }

    v9 = v11;
    if ((*(_BYTE *)(v0 + 81) & 1) != 0)
      goto LABEL_10;
    goto LABEL_13;
  }
LABEL_17:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Image.renderImage(in:isTopLevel:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void specialized CanvasElement.maxDimensionInPixels(_:in:)(CGContext *a1, double a2, double a3, double a4, double a5)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int Type;
  double v10;
  double v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;

  v12 = CGContextConvertRectToDeviceSpace(a1, *(CGRect *)&a2);
  x = v12.origin.x;
  y = v12.origin.y;
  width = v12.size.width;
  height = v12.size.height;
  Type = CGContextGetType();
  if (Type != 6 && Type != 1)
  {
    v13.origin.x = x;
    v13.origin.y = y;
    v13.size.width = width;
    v13.size.height = height;
    v10 = CGRectGetWidth(v13);
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    v11 = CGRectGetHeight(v14);
    if (v10 > v11)
      v11 = v10;
    if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0)
    {
      if (v11 > -9.22337204e18)
      {
        if (v11 < 9.22337204e18)
          return;
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

void specialized CanvasElement.renderImage(_:frame:rotation:cornerRadius:in:)(CGImage *a1, uint64_t a2, char a3, CGContext *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t Width;
  double Height;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double MidX;
  CGFloat MidY;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  double MinY;
  CGFloat MaxY;
  CGFloat x;
  CGFloat y;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  const CGPath *v53;
  uint64_t v54;
  CGRect v55;
  CGFloat tx;
  __int128 v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  __int128 v61;
  CGAffineTransform v62;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  __C::CGRect v77;

  *(double *)&v61 = a9;
  v17 = type metadata accessor for CGPathFillRule();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGContextSaveGState(a4);
  Width = CGImageGetWidth(a1);
  Height = (double)(uint64_t)CGImageGetHeight(a1);
  v65.origin.x = a5;
  v65.origin.y = a6;
  v65.size.width = a7;
  v65.size.height = a8;
  v24 = CGRectGetWidth(v65);
  v66.origin.x = 0.0;
  v66.origin.y = 0.0;
  v66.size.width = (double)Width;
  v60 = (double)Width;
  v66.size.height = Height;
  v25 = v24 / CGRectGetWidth(v66);
  v67.origin.x = a5;
  v67.origin.y = a6;
  v67.size.width = a7;
  v67.size.height = a8;
  v26 = CGRectGetHeight(v67);
  v68.origin.x = 0.0;
  v68.origin.y = 0.0;
  v68.size.width = (double)Width;
  v68.size.height = Height;
  v27 = v26 / CGRectGetHeight(v68);
  if (v27 >= v25)
    v28 = v25;
  else
    v28 = v27;
  v69.origin.x = a5;
  v69.origin.y = a6;
  v69.size.width = a7;
  v69.size.height = a8;
  MidX = CGRectGetMidX(v69);
  v55.origin.x = a5;
  v70.origin.x = a5;
  v55.origin.y = a6;
  v70.origin.y = a6;
  v55.size.width = a7;
  v70.size.width = a7;
  v55.size.height = a8;
  v70.size.height = a8;
  MidY = CGRectGetMidY(v70);
  v31 = v28 * v60;
  v32 = v28 * Height;
  v33 = MidX - v31 * 0.5;
  v34 = MidY - v32 * 0.5;
  v58 = v32;
  v60 = v33 - v31 * 0.0;
  v59 = v34 - v32 * 0.0;
  v71.origin.x = v33;
  v71.origin.y = v34;
  v71.size.width = v31;
  v71.size.height = v32;
  v35 = CGRectGetMidX(v71);
  v72.origin.x = v33;
  v72.origin.y = v34;
  v72.size.width = v31;
  v72.size.height = v32;
  v36 = CGRectGetMidY(v72);
  CGAffineTransformMakeRotation(&t1, *(CGFloat *)&v61);
  v61 = *(_OWORD *)&t1.a;
  v57 = *(_OWORD *)&t1.c;
  ty = t1.ty;
  tx = t1.tx;
  CGAffineTransformMakeTranslation(&t1, -v35, -v36);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v43 = t1.tx;
  v42 = t1.ty;
  *(_OWORD *)&t2.a = v61;
  *(_OWORD *)&t2.c = v57;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v62, &t1, &t2);
  v61 = *(_OWORD *)&v62.a;
  v57 = *(_OWORD *)&v62.c;
  v44 = v62.tx;
  tx = v62.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v43;
  t1.ty = v42;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v61;
  *(_OWORD *)&t1.c = v57;
  t1.tx = v44;
  t1.ty = tx;
  CGAffineTransformConcat(&v62, &t1, &t2);
  t1.a = v31;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = v58;
  t1.tx = v60;
  t1.ty = v59;
  t2 = v62;
  CGAffineTransformConcat(&v62, &t1, &t2);
  t1 = v62;
  CGContextConcatCTM(a4, &t1);
  v73.origin.x = 0.0;
  v73.origin.y = 0.0;
  v73.size.width = 1.0;
  v73.size.height = 1.0;
  MinY = CGRectGetMinY(v73);
  v74.origin.x = 0.0;
  v74.origin.y = 0.0;
  v74.size.width = 1.0;
  v74.size.height = 1.0;
  MaxY = CGRectGetMaxY(v74);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  t2.b = 0.0;
  t2.c = 0.0;
  t2.a = 1.0;
  *(_OWORD *)&t2.d = xmmword_1DDF325E0;
  t2.ty = MinY + MaxY;
  CGAffineTransformConcat(&v62, &t1, &t2);
  t1 = v62;
  CGContextConcatCTM(a4, &t1);
  if ((a3 & 1) == 0)
  {
    x = v55.origin.x;
    y = v55.origin.y;
    v49 = v55.size.width;
    v50 = v55.size.height;
    v51 = *(double *)&a2 / CGRectGetWidth(v55);
    v75.origin.x = x;
    v75.origin.y = y;
    v75.size.width = v49;
    v75.size.height = v50;
    v52 = *(double *)&a2 / CGRectGetHeight(v75);
    v76.origin.x = 0.0;
    v76.origin.y = 0.0;
    v76.size.width = 1.0;
    v76.size.height = 1.0;
    v53 = CGPathCreateWithRoundedRect(v76, v51, v52, 0);
    CGContextAddPath(a4, v53);

    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E0C9B8A0], v17);
    CGContextRef.clip(using:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }
  v77.origin.x = 0.0;
  v77.origin.y = 0.0;
  v77.size.width = 1.0;
  v77.size.height = 1.0;
  CGContextRef.draw(_:in:byTiling:)(a1, v77, 0);
  CGContextRestoreGState(a4);
}

uint64_t Image.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)(v7 + 312) = a5;
  *(_QWORD *)(v7 + 320) = a6;
  *(_QWORD *)(v7 + 296) = a1;
  *(_QWORD *)(v7 + 304) = a3;
  *(_BYTE *)(v7 + 91) = *(_BYTE *)a4;
  *(_BYTE *)(v7 + 92) = *(_BYTE *)(a4 + 1);
  *(_BYTE *)(v7 + 93) = *(_BYTE *)(a4 + 2);
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v7 + 328) = v6;
  *(_QWORD *)(v7 + 336) = v8;
  *(_BYTE *)(v7 + 94) = *(_BYTE *)(a4 + 16);
  v9 = *(_OWORD *)(a4 + 40);
  *(_OWORD *)(v7 + 344) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v7 + 360) = v9;
  *(_BYTE *)(v7 + 95) = *(_BYTE *)(a4 + 56);
  *(_QWORD *)(v7 + 376) = *(_QWORD *)(a4 + 64);
  *(_BYTE *)(v7 + 400) = *(_BYTE *)(a4 + 72);
  *(_BYTE *)(v7 + 401) = *(_BYTE *)(a4 + 73);
  *(_BYTE *)(v7 + 402) = *(_BYTE *)(a4 + 74);
  return swift_task_switch();
}

uint64_t Image.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  int v1;
  CGContext *v2;
  CGFloat v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  CGFloat v22;
  CGFloat v23;
  CGAffineTransform v24;
  CGRect v25;
  CGRect v26;

  v1 = *(unsigned __int8 *)(v0 + 94);
  CGContextSaveGState(*(CGContextRef *)(v0 + 296));
  if (v1 == 1)
  {
    v2 = *(CGContext **)(v0 + 296);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v3 = *(double *)(v0 + 288);
    Image.pdfContentsBounds.getter();
    v5 = v4;
    v7 = v6;
    v22 = v9;
    v23 = v8;
    CGAffineTransformMakeRotation(&v24, v3);
    a = v24.a;
    b = v24.b;
    c = v24.c;
    d = v24.d;
    *(CGFloat *)(v0 + 96) = v24.a;
    tx = v24.tx;
    ty = v24.ty;
    *(CGFloat *)(v0 + 104) = b;
    *(CGFloat *)(v0 + 112) = c;
    *(CGFloat *)(v0 + 120) = d;
    *(CGFloat *)(v0 + 128) = tx;
    *(CGFloat *)(v0 + 136) = ty;
    v25.origin.x = v5;
    v25.origin.y = v7;
    v25.size.height = v22;
    v25.size.width = v23;
    v26 = CGRectApplyAffineTransform(v25, (CGAffineTransform *)(v0 + 96));
    CGAffineTransformMakeTranslation(&v24, v5 - v26.origin.x, v7 - v26.origin.y);
    v16 = *(_OWORD *)&v24.c;
    v17 = *(_OWORD *)&v24.tx;
    *(_OWORD *)(v0 + 192) = *(_OWORD *)&v24.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 208) = v16;
    *(_OWORD *)(v0 + 224) = v17;
    CGAffineTransformConcat(&v24, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 192));
    v18 = *(_OWORD *)&v24.c;
    v19 = *(_OWORD *)&v24.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v24.a;
    *(_OWORD *)(v0 + 256) = v18;
    *(_OWORD *)(v0 + 272) = v19;
    CGContextConcatCTM(v2, (CGAffineTransform *)(v0 + 240));
  }
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v20;
  *v20 = v0;
  v20[1] = Image.render<A>(in:id:capsule:options:);
  return Image.renderImage(in:isTopLevel:)(*(_QWORD *)(v0 + 296), *(_BYTE *)(v0 + 94));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v15 = *(_BYTE *)(v0 + 401);
  v16 = *(_BYTE *)(v0 + 402);
  v14 = *(_BYTE *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v2 = *(_BYTE *)(v0 + 95);
  v3 = *(_QWORD *)(v0 + 360);
  v12 = *(_OWORD *)(v0 + 344);
  v4 = *(_BYTE *)(v0 + 94);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_BYTE *)(v0 + 93);
  v7 = *(_BYTE *)(v0 + 92);
  v8 = *(_BYTE *)(v0 + 91);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 296));
  *(_BYTE *)(v0 + 16) = v8;
  *(_BYTE *)(v0 + 17) = v7;
  *(_BYTE *)(v0 + 18) = v6;
  *(_QWORD *)(v0 + 24) = v5;
  *(_BYTE *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 40) = v12;
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v0 + 64) = v1;
  *(_BYTE *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 80) = v13;
  *(_BYTE *)(v0 + 88) = v14;
  *(_BYTE *)(v0 + 89) = v15;
  *(_BYTE *)(v0 + 90) = v16;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v9;
  v10 = type metadata accessor for Image();
  *v9 = v0;
  v9[1] = Image.render<A>(in:id:capsule:options:);
  return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304), (_OWORD *)(v0 + 16), v10, *(_QWORD *)(v0 + 312), (uint64_t)&protocol witness table for Image, *(_QWORD *)(v0 + 320));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  id v66;
  void *v67;
  char *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  CGFloat MinX;
  double v74;
  CGFloat v75;
  id v76;
  id v77;
  Class isa;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void (**v124)(void *);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  void *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  id v135;
  void *v136;
  id v137;
  Class v138;
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  CGAffineTransform v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __int16 v187;
  char v188;
  CGAffineTransform v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;

  v179 = a8;
  v180 = a7;
  v178 = a5;
  v173 = a4;
  v177 = (void *)a2;
  v174 = type metadata accessor for CRAssetOrData();
  v12 = *(_QWORD *)(v174 - 8);
  MEMORY[0x1E0C80A78](v174, v13);
  v155 = (uint64_t *)((char *)&v141 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v15, v16);
  v175 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  v147 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v150 = (uint64_t)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v151 = (char *)&v141 - v23;
  v24 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v24, v25);
  v144 = (char *)&v141 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x1E0C80A78](v161, v27);
  v159 = (char *)&v141 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  v149 = *(_QWORD *)(v158 - 8);
  MEMORY[0x1E0C80A78](v158, v29);
  v157 = (char *)&v141 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v145 = *(_QWORD *)(v31 - 8);
  v32 = *(_QWORD *)(v145 + 64);
  MEMORY[0x1E0C80A78](v31, v33);
  v146 = (uint64_t)&v141 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v156 = (uint64_t)&v141 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v141 - v39;
  v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v181 = *(_QWORD *)(v182 - 8);
  MEMORY[0x1E0C80A78](v182, v41);
  v143 = (char *)&v141 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v162 = (char *)&v141 - v45;
  v176 = type metadata accessor for Date();
  v46 = *(_QWORD *)(v176 - 8);
  MEMORY[0x1E0C80A78](v176, v47);
  v49 = (char *)&v141 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = *a1;
  v172 = *(double *)a6;
  v171 = *(double *)(a6 + 8);
  v170 = *(double *)(a6 + 16);
  v169 = *(double *)(a6 + 24);
  v168 = *(double *)(a6 + 32);
  v167 = *(double *)(a6 + 40);
  v166 = *(_QWORD *)(a6 + 48);
  v165 = *(_QWORD *)(a6 + 56);
  v164 = *(_QWORD *)(a6 + 64);
  v50 = *(unsigned __int8 *)(a6 + 74);
  v51 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v52 = swift_dynamicCastClass();
  if (v52)
  {
    v53 = (char *)v52;
    v153 = v12;
    v152 = v51 | (v50 << 16);
    *(_BYTE *)(v52 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v163 = v8;
    v55 = v54;
    v57 = v56;
    v58 = a3;
    v59 = v55;
    v60 = v163;
    v61 = (void *)MEMORY[0x1DF0E41AC](v59, v57);
    swift_bridgeObjectRelease();
    objc_msgSend(v53, sel_setType_, v61);

    specialized CanvasElement.coordinateSpace.getter(&v189);
    v183 = v189;
    v190.origin.x = 0.0;
    v190.origin.y = 0.0;
    v190.size.width = 1.0;
    v190.size.height = 1.0;
    v191 = CGRectApplyAffineTransform(v190, &v183);
    x = v191.origin.x;
    y = v191.origin.y;
    width = v191.size.width;
    height = v191.size.height;
    v66 = objc_msgSend(v53, sel_page);
    if (v66)
    {
      v67 = v66;
      v68 = v53;
      objc_msgSend(v66, sel_boundsForBox_, 0);
      v70 = v69;
      v72 = v71;

      v192.origin.x = x;
      v192.origin.y = y;
      v192.size.width = width;
      v192.size.height = height;
      MinX = CGRectGetMinX(v192);
      v193.origin.x = x;
      v193.origin.y = y;
      v193.size.width = width;
      v193.size.height = height;
      v74 = v72 + v70 + v70 - CGRectGetMaxY(v193);
      v194.origin.x = x;
      v194.origin.y = y;
      v194.size.width = width;
      v194.size.height = height;
      v75 = CGRectGetWidth(v194);
      v195.origin.x = x;
      v195.origin.y = y;
      v195.size.width = width;
      v195.size.height = height;
      height = CGRectGetHeight(v195);
      width = v75;
      x = MinX;
      y = v74;
    }
    else
    {
      v68 = v53;
    }
    v76 = v58;
    v196.origin.x = x;
    v196.origin.y = y;
    v196.size.width = width;
    v196.size.height = height;
    v197 = CGRectIntegral(v196);
    objc_msgSend(v68, sel_setBounds_, v197.origin.x, v197.origin.y, v197.size.width, v197.size.height);

    v77 = v76;
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v176);
    v79 = v68;
    objc_msgSend(v68, sel_setModificationDate_, isa);

    v80 = v77;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v177, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v81 = v181;
    v82 = v182;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v40, 1, v182) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v83 = (uint64_t)v175;
      v84 = v174;
      v85 = v179;
      v86 = v178;
      v87 = v173;
      v88 = v172;
      v89 = v171;
      v90 = v170;
      v91 = v169;
      v92 = v168;
      v93 = v167;
      v94 = v166;
      v95 = v165;
      v96 = v164;
      v97 = v152;
      v98 = v180;
      goto LABEL_13;
    }
    v99 = v162;
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v162, v40, v82);
    v100 = v154;
    v101 = v154;
    v98 = v180;
    if (v154 >> 62)
    {
      if (v154 >> 62 != 1)
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v99, v82);
        v60 = v163;
        v83 = (uint64_t)v175;
        v84 = v174;
        v85 = v179;
        v86 = v178;
        goto LABEL_12;
      }
      v101 = v154 & 0x3FFFFFFFFFFFFFFFLL;
    }
    v142 = v101;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v143, v99, v82);
    outlined copy of PaperDocument.PDFDocumentUse(v100);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
    v102 = v157;
    CRRegister.init(_:)();
    v103 = static CRKeyPath.unique.getter();
    v104 = v81;
    MEMORY[0x1E0C80A78](v103, v105);
    v176 = (uint64_t)v79;
    v106 = v82;
    v107 = v179;
    *(&v141 - 6) = v98;
    *(&v141 - 5) = v107;
    v108 = v178;
    *(&v141 - 4) = (uint64_t)v99;
    *(&v141 - 3) = v108;
    *(&v141 - 2) = (uint64_t)v102;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D117A8]);
    v109 = v159;
    Capsule<>.init(id:initClosure:)();
    v110 = v160;
    v111 = (uint64_t)v151;
    v112 = v161;
    (*(void (**)(char *, char *, uint64_t))(v160 + 16))(v151, v109, v161);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v112);
    v113 = v156;
    v114 = v106;
    v79 = (char *)v176;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v156, 1, 1, v114);
    v177 = v80;
    v115 = v150;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v111, v150, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    v116 = v146;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v113, v146, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v117 = (*(unsigned __int8 *)(v147 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
    v118 = (v148 + v117 + 7) & 0xFFFFFFFFFFFFFFF8;
    v119 = (*(unsigned __int8 *)(v145 + 80) + v118 + 8) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
    v120 = v119 + v32;
    v121 = swift_allocObject();
    v122 = (v120 & 0xFFFFFFFFFFFFFFF8) + v121;
    v123 = v115;
    v80 = v177;
    outlined init with take of (key: Int, value: AnyCRValue)?(v123, v121 + v117, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    *(_QWORD *)(v121 + v118) = v142;
    outlined init with take of (key: Int, value: AnyCRValue)?(v116, v121 + v119, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    *(_BYTE *)(v121 + v120) = 1;
    v86 = v178;
    *(_QWORD *)(v122 + 8) = 0;
    *(_QWORD *)(v122 + 16) = 0;
    v124 = (void (**)(void *))&v79[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    v125 = *(_QWORD *)&v79[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    *v124 = partial apply for specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:);
    v124[1] = (void (*)(void *))v121;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v125);
    outlined destroy of StocksKitCurrencyCache.Provider?(v156, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    v126 = v111;
    v85 = v179;
    v98 = v180;
    outlined destroy of StocksKitCurrencyCache.Provider?(v126, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v159, v161);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v157, v158);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v162, v182);
    v60 = v163;
    v83 = (uint64_t)v175;
    v84 = v174;
LABEL_12:
    v87 = v173;
    v88 = v172;
    v89 = v171;
    v90 = v170;
    v91 = v169;
    v92 = v168;
    v93 = v167;
    v94 = v166;
    v95 = v165;
    v96 = v164;
    v97 = v152;
LABEL_13:
    v183.a = v88;
    v183.b = v89;
    v183.c = v90;
    v183.d = v91;
    v183.tx = v92;
    v183.ty = v93;
    v184 = v94;
    v185 = v95;
    v186 = v96;
    v187 = v97;
    v188 = BYTE2(v97);
    v127 = type metadata accessor for Image();
    CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v87, v60, v86, (uint64_t)&v183, v98, v127, v85, (uint64_t)&protocol witness table for Image);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v83, 1, v84) == 1)
    {

      outlined destroy of StocksKitCurrencyCache.Provider?(v83, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      v128 = v155;
      outlined init with copy of PKStrokeProperties(v83, (uint64_t)v155, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v129 = v80;
        v130 = v128;
        v131 = *v128;
        v133 = v130[1];
        v132 = v130[2];
        v134 = v130[3];
        outlined destroy of PKStrokeProperties(v83, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
        outlined copy of Data._Representation(v132, v134);
        outlined consume of Data._Representation(v131, v133);
        outlined consume of Data._Representation(v132, v134);
        v135 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF7968]), sel_init);
        if (v135)
        {
          v136 = v135;
          v137 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
          outlined copy of Data._Representation(v132, v134);
          v138 = Data._bridgeToObjectiveC()().super.isa;
          v139 = objc_msgSend(v137, sel_initWithData_, v138);
          outlined consume of Data._Representation(v132, v134);

          objc_msgSend(v136, sel_setImage_, v139);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
          CRRegister.wrappedValue.getter();
          objc_msgSend(v136, sel_setRectangle_, v183.a, v183.b, v183.c, v183.d);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
          CRRegister.wrappedValue.getter();
          objc_msgSend(v136, sel_setRotationAngle_, v183.a);
          v140 = *(void **)&v79[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
          *(_QWORD *)&v79[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = v136;

          outlined consume of Data._Representation(v132, v134);
        }
        else
        {

          outlined consume of Data._Representation(v132, v134);
        }
      }
      else
      {
        outlined destroy of PKStrokeProperties((uint64_t)v128, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
        outlined destroy of PKStrokeProperties(v83, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);

      }
    }
  }
}

uint64_t closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _QWORD);
  uint64_t v27;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v29[0] = a4;
  v29[1] = a5;
  v33 = a6;
  v34 = a3;
  v29[2] = a2;
  v31 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v6, v7);
  v32 = (uint64_t)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v29 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v18, v19);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v30 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x1DF0E3408](v24);
  type metadata accessor for Image();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<Image> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<Image>, MEMORY[0x1E0D12878]);
  Capsule.encapsulate<A>(_:)();
  Capsule.Ref.import<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v25 = type metadata accessor for CRAssetOrData();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
  v26 = (void (*)(_BYTE *, _QWORD))Capsule.Ref.subscript.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, v32, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for CRAssetOrData?);
  v26(v35, 0);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v20);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v33, v34, v27);
}

uint64_t Image.image(from:)()
{
  uint64_t NumberOfEntries;
  uint64_t NumberOfEntriesOfType;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  uint64_t v11;

  v11 = 0;
  NumberOfEntries = CGDisplayListGetNumberOfEntries();
  NumberOfEntriesOfType = CGDisplayListGetNumberOfEntriesOfType();
  v2 = 0;
  if (NumberOfEntries != 1)
  {
    v4 = 0;
    goto LABEL_6;
  }
  v3 = NumberOfEntriesOfType;
  v4 = 0;
  if (v3 != 1)
  {
LABEL_6:
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
    return v2;
  }
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = &v11;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = partial apply for closure #1 in Image.image(from:);
  *(_QWORD *)(v6 + 24) = v5;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[3] = &block_descriptor_36;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v4 = partial apply for closure #1 in Image.image(from:);
    v2 = v11;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void closure #1 in Image.image(from:)(uint64_t a1, uint64_t a2, void **a3)
{
  void *Image;
  void *v5;
  id v6;
  void *v7;

  Image = (void *)CGDisplayListEntryImageGetImage();
  v5 = Image;
  if (Image)
    v6 = Image;
  v7 = *a3;
  *a3 = v5;

}

void Image.takeImage(from:assetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (_OWORD *)((char *)&v19 - v9);
  v11 = (void *)Image.image(from:)();
  if (v11)
  {
    v20 = v11;
    v12 = CGImageRef.imageData(compressionQuality:asPng:)(0, 1.0);
    if (v13 >> 60 == 15)
    {

    }
    else
    {
      v14 = v12;
      v15 = v13;
      if (a2)
      {
        swift_retain_n();
        outlined copy of Data?(v14, v15);
        CRAsset.init(data:assetManager:)();
        v16 = type metadata accessor for CRAssetOrData();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 0, 1, v16);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v6, &demangling cache variable for type metadata for CRAssetOrData?);
        type metadata accessor for Image();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAssetOrData?);

        outlined consume of Data?(v14, v15);
        swift_release();
      }
      else
      {
        outlined copy of Data._Representation(v12, v13);
        CRDataAsset.init(_:)(v14, v15);
        v17 = v22;
        *v10 = v21;
        v10[1] = v17;
        v18 = type metadata accessor for CRAssetOrData();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v10, 0, 1, v18);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v6, &demangling cache variable for type metadata for CRAssetOrData?);
        type metadata accessor for Image();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for CRAssetOrData?);

        outlined consume of Data?(v14, v15);
      }
    }
  }
}

void Image.finishDecode(from:assetManager:)(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  id v12;

  objc_msgSend(a1, sel_cacheAppearances);
  v4 = objc_retainAutorelease(a1);
  v5 = objc_msgSend(v4, sel_cachedAppearance_, 0);
  if (v5)
  {
    v12 = v5;
    Image.takeImage(from:assetManager:)((uint64_t)v12, a2);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)logger);
    v12 = v4;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412290;
      v11 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v10 = v12;

      _os_log_impl(&dword_1DDB0F000, v7, v8, "Error decoding image from PDF Annotation: %@", v9, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v10, -1, -1);
      MEMORY[0x1DF0E6558](v9, -1, -1);

      return;
    }

  }
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance Image()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance Image(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance Image(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for ContainerCanvasElement.subelements.getter in conformance Image@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for ContainerCanvasElement.subelements.setter in conformance Image(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 52);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*protocol witness for CanvasElement.rotation.modify in conformance Image(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Image(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return Image.render<A>(in:id:capsule:options:)(a1, v13, a3, a4, a5, a6);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Image(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v8;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_1(a1, v3);
  v8 = (char *)&async function pointer to specialized Image.renderedImage(in:)
     + async function pointer to specialized Image.renderedImage(in:);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v8)(v5, v1, v3, v4);
}

uint64_t Image.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for PDFPageID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Image.shared(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;

  v8 = type metadata accessor for CRKeyPath();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 1;
  v14 = (*(uint64_t (**)(char *, uint64_t, double))(v13 + 16))(v12, a1, v10);
  v15 = a2(v14);
  return a4(&v18, v12, a3, v15);
}

uint64_t closure #1 in Image.renderPage(pdfPage:box:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in Image.renderPage(pdfPage:box:context:)()
{
  uint64_t v0;
  void *v1;
  CGContext *v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinY;
  CGFloat MaxY;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  CGAffineTransform v13;
  CGRect v14;
  CGRect v15;

  v2 = *(CGContext **)(v0 + 160);
  v1 = *(void **)(v0 + 168);
  CGContextSaveGState(v2);
  objc_msgSend(v1, sel_boundsForBox_, 0);
  x = v14.origin.x;
  y = v14.origin.y;
  width = v14.size.width;
  height = v14.size.height;
  MinY = CGRectGetMinY(v14);
  v15.origin.x = x;
  v15.origin.y = y;
  v15.size.width = width;
  v15.size.height = height;
  MaxY = CGRectGetMaxY(v15);
  *(_QWORD *)(v0 + 16) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 64) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_OWORD *)(v0 + 88) = xmmword_1DDF325E0;
  *(double *)(v0 + 104) = MinY + MaxY;
  CGAffineTransformConcat(&v13, (CGAffineTransform *)(v0 + 16), (CGAffineTransform *)(v0 + 64));
  v9 = *(_OWORD *)&v13.c;
  v10 = *(_OWORD *)&v13.tx;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)&v13.a;
  *(_OWORD *)(v0 + 128) = v9;
  *(_OWORD *)(v0 + 144) = v10;
  CGContextConcatCTM(v2, (CGAffineTransform *)(v0 + 112));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v11;
  *v11 = v0;
  v11[1] = closure #1 in Image.renderPage(pdfPage:box:context:);
  return Image.renderImage(in:isTopLevel:)(*(_QWORD *)(v0 + 160), 1);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 160));
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Image.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, id *a3, uint64_t a4, __int128 *a5, uint64_t a6, char *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (**v52)(uint64_t, void *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  id v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  id v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  id v106;

  v97 = a7;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v86 = (char *)v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v16);
  v84 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v18, v19);
  v82 = (char *)v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v21);
  v80 = (char *)v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v79, v23);
  v77 = (char *)v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v25);
  v75 = (char *)v73 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Image();
  v93 = *(_QWORD *)(v27 - 8);
  v28 = *(_QWORD *)(v93 + 64);
  MEMORY[0x1E0C80A78](v27, v29);
  v94 = (char *)v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v95 = (uint64_t)v73 - v32;
  v98 = *a3;
  type metadata accessor for PaperKitPDFPage(0);
  v33 = swift_dynamicCastClass();
  if (v33)
  {
    v73[0] = v18;
    v73[1] = v13;
    v74 = a2;
    v34 = *((_WORD *)a5 + 36);
    v35 = a4;
    v36 = a6;
    v37 = *((_BYTE *)a5 + 74);
    v38 = *((_QWORD *)a5 + 8);
    v91 = a5[3];
    v90 = a5[2];
    v89 = a5[1];
    v88 = *a5;
    v39 = (char *)v33;
    v92 = a1;
    v40 = v96;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v39, 1);
    v41 = (unint64_t)v98;
    v106 = v98;
    v99 = v88;
    v100 = v89;
    v101 = v90;
    v102 = v91;
    v103 = v38;
    v105 = v37;
    v42 = v36;
    v43 = v35;
    v104 = v34;
    *(_QWORD *)&v91 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(v39, (unint64_t *)&v106, v35, (uint64_t)&v99, v27, v42, v91, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for Image, v97);
    v44 = v41 >> 62;
    v45 = v40;
    if ((v41 >> 62) >= 2 && v41 == 0x8000000000000000)
    {
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);

    }
    else
    {
      *(_QWORD *)&v89 = v43;
      *(_QWORD *)&v90 = v42;
      *(_QWORD *)&v88 = v27;
      outlined copy of PaperDocument.PDFDocumentUse(v41);
      outlined consume of PaperDocument.PDFDocumentUse(v41);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      v46 = v95;
      outlined init with copy of PKStrokeProperties(v40, v95, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      v47 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v48 = (uint64_t)v94;
      outlined init with copy of PKStrokeProperties(v46, (uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      v49 = (*(unsigned __int8 *)(v93 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
      v50 = (v28 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      v51 = swift_allocObject();
      outlined init with take of Image(v48, v51 + v49);
      *(_QWORD *)(v51 + v50) = v47;
      v94 = v39;
      v52 = (void (**)(uint64_t, void *))&v39[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
      v53 = *(_QWORD *)&v39[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
      *v52 = partial apply for closure #1 in Image.update<A>(pdfPage:id:use:in:options:);
      v52[1] = (void (*)(uint64_t, void *))v51;
      swift_retain();
      v54 = v53;
      v55 = v46;
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v54);
      outlined destroy of PKStrokeProperties(v46, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      swift_release();
      if ((_DWORD)v44)
      {

      }
      else
      {
        outlined init with copy of PKStrokeProperties(v45, v46, (uint64_t (*)(_QWORD))type metadata accessor for Image);
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v77, 1, 1, v56);
        lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
        v57 = (unint64_t)v98;
        v58 = v98;
        v59 = v75;
        CRRegister.init(_:)();
        v60 = v88;
        (*(void (**)(uint64_t, char *, uint64_t))(v76 + 40))(v55 + *(int *)(v88 + 28), v59, v78);
        v61 = type metadata accessor for CRAssetOrData();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v82, 1, 1, v61);
        lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?();
        v62 = v80;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v81 + 40))(v55 + *(int *)(v60 + 36), v62, v83);
        v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v86, 1, 1, v63);
        lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?();
        v64 = v84;
        CRRegister.init(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v85 + 40))(v55 + *(int *)(v60 + 32), v64, v87);
        Image.pdfContentsBounds.getter();
        *(_QWORD *)&v99 = v65;
        *((_QWORD *)&v99 + 1) = v66;
        *(_QWORD *)&v100 = v67;
        *((_QWORD *)&v100 + 1) = v68;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.setter();
        Image.pdfContentsBounds.getter();
        *(_QWORD *)&v99 = v69;
        *((_QWORD *)&v99 + 1) = v70;
        *(_QWORD *)&v100 = v71;
        *((_QWORD *)&v100 + 1) = v72;
        CRRegister.wrappedValue.setter();
        PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)v58, v55, v74, v89, v60, v90, v91, (uint64_t)&protocol witness table for Image, (uint64_t)&protocol witness table for Image, (uint64_t)v97);
        outlined consume of PaperDocument.PDFDocumentUse(v57);

        outlined destroy of PKStrokeProperties(v55, (uint64_t (*)(_QWORD))type metadata accessor for Image);
      }
    }
  }
}

void closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  dispatch_semaphore_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  NSObject *v25;
  uint64_t v26;

  v7 = type metadata accessor for Image();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v16 = (void *)MEMORY[0x1DF0E666C](a4 + 16);
  if (v16)
  {
    v17 = v16;
    v18 = dispatch_semaphore_create(0);
    v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v15, 1, 1, v19);
    outlined init with copy of PKStrokeProperties(a3, (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for Image);
    v20 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = a2;
    v22[5] = v17;
    outlined init with take of Image((uint64_t)v11, (uint64_t)v22 + v20);
    *(_QWORD *)((char *)v22 + v21) = v18;
    v23 = v17;
    v24 = a2;
    v25 = v18;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in Image.renderPage(pdfPage:box:context:), (uint64_t)v22);
    swift_release();
    OS_dispatch_semaphore.wait()();

  }
}

BOOL Image.finishDecode(from:pageID:assetManager:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  _BOOL8 result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  BOOL v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;

  v67 = a3;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v66 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v59 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v59 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v59 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, sel_boundsForBox_, 1, v26);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v71.origin.x = v37;
  v71.origin.y = v38;
  v71.size.width = v39;
  v71.size.height = v40;
  v70.origin.x = v30;
  v70.origin.y = v32;
  v70.size.width = v34;
  v70.size.height = v36;
  result = CGRectEqualToRect(v70, v71);
  if (result)
  {
    v59 = v23;
    v60 = v19;
    v61 = v16;
    v62 = v14;
    v63 = v10;
    v64 = v6;
    v65 = a1;
    v42 = v67;
    v43 = v68;
    CRRegister.wrappedValue.getter();
    if (CGRect.almostEqual(_:threshold:)(v69.origin.x, v69.origin.y, v69.size.width, v69.size.height, 1.0, v30, v32, v34, v36))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      v45 = (uint64_t)v28;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v28, 1, 1, v44);
      type metadata accessor for Image();
      v46 = v59;
      CRRegister.projectedValue.getter();
      specialized CRRegister<>.setIfDifferent(_:)(v45);
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v47 = v61;
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v60, v46, v15);
      CRRegister.projectedValue.setter();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v15);
      v48 = v62;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      v72.origin.x = v30;
      v72.origin.y = v32;
      v72.size.width = v34;
      v72.size.height = v36;
      if (!CGRectEqualToRect(v69, v72))
      {
        v69.origin.x = v30;
        v69.origin.y = v32;
        v69.size.width = v34;
        v69.size.height = v36;
        CRRegister.value.setter();
      }
      v49 = v66;
      v50 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
      v51 = v63;
      v50(v63, v48, v43);
      CRRegister.projectedValue.setter();
      v52 = *(void (**)(char *, uint64_t))(v49 + 8);
      v52(v48, v43);
      v53 = v64;
      CRRegister.projectedValue.getter();
      CRRegister.value.getter();
      v73.origin.x = v30;
      v73.origin.y = v32;
      v73.size.width = v34;
      v73.size.height = v36;
      v54 = CGRectEqualToRect(v69, v73);
      v55 = v65;
      if (!v54)
      {
        v69.origin.x = v30;
        v69.origin.y = v32;
        v69.size.width = v34;
        v69.size.height = v36;
        CRRegister.value.setter();
      }
      v50(v51, v53, v43);
      CRRegister.projectedValue.setter();
      v52(v53, v43);
      specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v55, sel_rotation), (void (*)(_QWORD))type metadata accessor for Image);
      v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
      v57 = (void *)CGDisplayListCreateWithRect();
      v58 = (void *)CGDisplayListContextCreate();
      objc_msgSend(v55, sel_drawWithBox_inContext_withOptions_, 0, v58, 0);

      Image.takeImage(from:assetManager:)((uint64_t)v57, v42);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double protocol witness for CanvasElement.rotation.getter in conformance Image()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for CanvasElement.rotation.setter in conformance Image()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance Image@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for PDFPageID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Image(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;

  v10 = type metadata accessor for CRKeyPath();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 1;
  v16 = (*(uint64_t (**)(char *, uint64_t, double))(v15 + 16))(v14, a1, v12);
  v17 = a4(v16);
  return a6(&v20, v14, a5, v17);
}

void specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t *)&demangling cache variable for type metadata for Capsule<PDFAnnotationElement>?, &demangling cache variable for type metadata for Capsule<PDFAnnotationElement>, (uint64_t)&lazy protocol witness table cache variable for type PDFAnnotationElement and conformance PDFAnnotationElement, (uint64_t)type metadata accessor for PDFAnnotationElement, (uint64_t)&protocol conformance descriptor for PDFAnnotationElement, (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey);
}

{
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D117A8], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>);
}

{
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>?, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>, (uint64_t)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, (uint64_t)&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x1E0D117A8], (void (*)(uint64_t, uint64_t, uint64_t))lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>);
}

void specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  Swift::String v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  Swift::String v61;
  void *v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  Swift::String v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  id v101;
  void *v102;
  _OWORD v103[2];
  _QWORD v104[5];

  v96 = a4;
  v97 = a7;
  v93 = a6;
  v94 = a3;
  v95 = a5;
  v100 = a2;
  v89 = type metadata accessor for SHA256Digest();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v15);
  v87 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for SHA256();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v17);
  v90 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for CRKeyPath();
  v85 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v23);
  v83 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v84 = (char *)&v82 - v27;
  v28 = type metadata accessor for CRCodableVersion();
  v98 = *(_QWORD *)(v28 - 8);
  v99 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(a8);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(a9);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v40 = (char *)&v82 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v103, "/AAPL:AKExtras");
  HIBYTE(v103[0]) = -18;
  v41 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  v101 = a1;
  v42 = objc_msgSend(a1, sel___swift_objectForKeyedSubscript_, v41);
  swift_unknownObjectRelease();
  if (v42)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v103, 0, sizeof(v103));
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v103, (uint64_t)v104, &demangling cache variable for type metadata for Any?);
  if (v104[3])
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v43 = v102;
      goto LABEL_9;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v104, &demangling cache variable for type metadata for Any?);
  }
  v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_init);
  strcpy((char *)v104, "/AAPL:AKExtras");
  HIBYTE(v104[1]) = -18;
  v43 = v44;
  objc_msgSend(v101, sel___swift_setObject_forKeyedSubscript_, v43, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
LABEL_9:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v100, (uint64_t)v35, a8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, a8);
  }
  else
  {
    v100 = v43;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v40, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v31, *MEMORY[0x1E0D12378], v99);
    if (one-time initialization token for allReadableFileFormatVersions != -1)
      swift_once();
    a13(a10, a11, a12);
    v45 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
    v47 = v46;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v31, v99);
    v48 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v45, v47);
    v49 = (void *)MEMORY[0x1DF0E41AC](v48._countAndFlagsBits, v48._object);
    swift_bridgeObjectRelease();
    v50 = (void *)MEMORY[0x1DF0E41AC](1263554607, 0xE400000000000000);
    v43 = v100;
    objc_msgSend(v100, sel_setObject_forKey_, v49, v50);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v36);
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v96, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v22, 1, v51) != 1)
  {
    v53 = v83;
    MEMORY[0x1DF0E3408](v51);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v22, v51);
    v54 = v85;
    v55 = v84;
    v56 = v86;
    v57 = (*(uint64_t (**)(char *, char *, uint64_t))(v85 + 32))(v84, v53, v86);
    v58 = MEMORY[0x1DF0E3D44](v57);
    v60 = v59;
    v61 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v58, v60);
    v62 = (void *)MEMORY[0x1DF0E41AC](v61._countAndFlagsBits, v61._object);
    swift_bridgeObjectRelease();
    v63 = (void *)MEMORY[0x1DF0E41AC](0x44494B50502FLL, 0xE600000000000000);
    objc_msgSend(v43, sel_setObject_forKey_, v62, v63);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    if ((v95 & 1) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  if ((v95 & 1) != 0)
  {
LABEL_18:
    v64 = (uint64_t)v90;
    SHA256.init()();
    v104[0] = MEMORY[0x1E0DEE9E8];
    NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(v64, 3u, 0, (uint64_t)v104);
    swift_bridgeObjectRelease();
    v65 = v87;
    SHA256.finalize()();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92F0]);
    v66 = v89;
    v67 = Digest.makeIterator()();
    v69 = v68;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v65, v66);
    v70 = specialized _copySequenceToContiguousArray<A>(_:)(v67, v69);
    swift_bridgeObjectRelease();
    v71 = specialized Data.init<A>(_:)(v70);
    v73 = v72;
    swift_release();
    v74 = specialized Data.init(paperKitHash:version:)(v71, v73, 3);
    v76 = v75;
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v64, v92);
    v77 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v74, v76);
    v78 = (void *)MEMORY[0x1DF0E41AC](v77._countAndFlagsBits, v77._object);
    swift_bridgeObjectRelease();
    v79 = (void *)MEMORY[0x1DF0E41AC](0x687361484B50502FLL, 0xE800000000000000);
    objc_msgSend(v43, sel_setObject_forKey_, v78, v79);

  }
LABEL_19:
  if (v97)
  {
    v80 = (void *)MEMORY[0x1DF0E41AC](v93);
    v81 = (void *)MEMORY[0x1DF0E41AC](0x657079544B50502FLL, 0xE800000000000000);
    objc_msgSend(v43, sel_setObject_forKey_, v80, v81);

  }
  else
  {
    v81 = v43;
  }

}

uint64_t specialized Image.renderedImage(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v4[5] = swift_task_alloc();
  v6 = *(_QWORD *)(a3 - 8);
  v4[6] = v6;
  v4[7] = swift_task_alloc();
  (*(void (**)(void))(v6 + 16))();
  return swift_task_switch();
}

CGImageRef partial apply for closure #1 in static Image.filterAndCrop(_:filter:crop:queue:)@<X0>(CGImageRef *a1@<X8>)
{
  uint64_t v1;
  CGImageRef result;

  result = specialized static Image._filterAndCrop(_:filter:crop:)(*(CGImage **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #1 in Image.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(a1, v2[5], v2[6], v2[2], v2[3], a2);
}

uint64_t sub_1DDCBC440()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v5, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v5, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1DDCBC664()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDCBC688()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (int *)type metadata accessor for Image();
  v2 = *(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v3 + v1[5], v4);
  v6 = v3 + v1[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v3 + v1[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v3 + v1[8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v3 + v1[9];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v3 + v1[10];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v3 + v1[11];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v3 + v1[12];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = v3 + v1[13];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for Image() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in Image.update<A>(pdfPage:id:use:in:options:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t base witness table accessor for CRStruct_Base_10 in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t base witness table accessor for CRStruct_Base in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_10 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_4 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<CRAssetOrData?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRAssetOrData?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_6 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_7 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Data?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Data?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_8 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DB0]);
}

uint64_t associated type witness table accessor for CRStruct_Base_10.Type_9 : CRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<CGRect, Quad>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t base witness table accessor for CRMergeable in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t base witness table accessor for CRType in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Image()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_10<Image> and conformance CRStructMergeableDelta_10<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_10<Image>, MEMORY[0x1E0D127A8]);
}

uint64_t base witness table accessor for CRCodable in Image()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
}

uint64_t sub_1DDCBCB28()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDCBCB68()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDCBCBC0()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDCBCC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDCBCC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_21Tm_0(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_21Tm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for Image();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  return a4(v5);
}

uint64_t sub_1DDCBCC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_25Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDCBCC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_25Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_25Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for Image();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  return a4(v5);
}

uint64_t sub_1DDCBCCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_29Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDCBCD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_29Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_29Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for Image();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  return a4(v5);
}

uint64_t sub_1DDCBCD68()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDCBCDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDCBCDC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_37Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_37Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for Image();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a4(v5);
}

uint64_t sub_1DDCBCE30()
{
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.projectedValue.getter();
}

void sub_1DDCBCE80(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for Image(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[10];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[12];
    v34 = (char *)a1 + v33;
    v35 = (char *)a2 + v33;
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v34, v35, v36);
    v37 = a3[13];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Image(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[9];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = a1 + a2[10];
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[11];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = a1 + a2[12];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = a1 + a2[13];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  v36 = a3[13];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v37, v38, v39);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = a3[13];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  v36 = a3[13];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t assignWithTake for Image(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  v36 = a3[13];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40))(v37, v38, v39);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Image()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDCBDA88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_19:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_19;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_19;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[9];
    goto LABEL_19;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[10];
    goto LABEL_19;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[11];
    goto LABEL_19;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v12 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v19;
    v13 = a3[12];
    goto LABEL_19;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v12 = *(_QWORD *)(v20 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v20;
    v13 = a3[13];
    goto LABEL_19;
  }
  v22 = *(_QWORD *)(a1 + a3[14]);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  return (v22 + 1);
}

uint64_t storeEnumTagSinglePayload for Image()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDCBDC5C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_19:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_19;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[8];
    goto LABEL_19;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[9];
    goto LABEL_19;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  v14 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v19;
    v15 = a4[10];
    goto LABEL_19;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v14 = *(_QWORD *)(v20 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v20;
    v15 = a4[11];
    goto LABEL_19;
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v14 = *(_QWORD *)(v21 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v21;
    v15 = a4[12];
    goto LABEL_19;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[13];
    goto LABEL_19;
  }
  *(_QWORD *)(a1 + a4[14]) = (a2 - 1);
  return result;
}

void type metadata completion function for Image()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_1<CRExtensible<BasicImageFilter>>? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<CRAssetOrData?>, &demangling cache variable for type metadata for CRAssetOrData?, (void (*)(void))lazy protocol witness table accessor for type CRAssetOrData? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<String?>(319, &lazy cache variable for type metadata for CRRegister<String?>, &demangling cache variable for type metadata for String?, &lazy protocol witness table cache variable for type String? and conformance <A> A?, MEMORY[0x1E0D12CF8]);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
              if (v6 <= 0x3F)
              {
                type metadata accessor for CRRegister<String?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Data?>, &demangling cache variable for type metadata for Data?, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?, MEMORY[0x1E0D116A8]);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
                  if (v8 <= 0x3F)
                    swift_initStructMetadata();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1DDCBE014()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for Image();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  v5 = v0 + v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v5 + v1[5], v6);
  v8 = v5 + v1[6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v5 + v1[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v5 + v1[8];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v5 + v1[9];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v5 + v1[10];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v5 + v1[11];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = v5 + v1[12];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v5 + v1[13];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Image.renderPage(pdfPage:box:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(type metadata accessor for Image() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_QWORD *)(v6 + 176) = v4;
  *(_QWORD *)(v6 + 184) = v5;
  *(_OWORD *)(v6 + 160) = v7;
  return swift_task_switch();
}

uint64_t sub_1DDCBE2C4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Image.image(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in Image.image(from:)(a1, a2, *(void ***)(v2 + 16));
}

uint64_t sub_1DDCBE2DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

CGImageRef specialized static Image._filterAndCrop(_:filter:crop:)(CGImage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  CGImageRef result;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  CGImage *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char v44;
  uint64_t v45;
  void *v46;
  int64_t Width;
  int64_t Height;
  CGImageRef v49;
  CGImageRef v50;
  void *v51;
  id v52;
  CGImage *v53;
  CGImage *v54;
  id v55;
  void *v56;
  CGImage *v57;
  unsigned __int8 v58;
  char v59;
  uint64_t v60;
  void *v61;
  id v62;
  CGImageRef v63;
  id v64;
  void *v65;
  CGImageRef v66;
  CGImage *v67;
  CGImage *v68;
  uint64_t v69;
  uint64_t v70;
  CGImageRef v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  char v80;
  CGRect v81;

  v71 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v68 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v68 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
  v69 = *(_QWORD *)(v21 - 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
  v23 = v22(a2, 1, v21);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  if (v23 == 1)
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v20, 1, v24) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      return v71;
    }
  }
  v70 = a2;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v16, 1, v26) == 1)
  {
    v29 = v71;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    goto LABEL_7;
  }
  v68 = v71;
  TaggedValue_2.tagged2.getter();
  v30 = v72;
  v31 = v73;
  v32 = v74;
  v33 = v75;
  v34 = v76;
  v35 = v77;
  v36 = v78;
  v37 = v79;
  v38 = v80;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
  if ((v38 & 1) != 0)
  {
LABEL_7:
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
    if (v28(v12, 1, v26) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      v39 = v70;
    }
    else
    {
      TaggedValue_2.tagged1.getter();
      v40 = v72;
      v41 = v73;
      v42 = v74;
      v43 = v75;
      v44 = LOBYTE(v76);
      v45 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v26);
      v39 = v70;
      if ((v44 & 1) == 0)
      {
        v46 = (void *)MEMORY[0x1DF0E5C10](v45);
        v71 = v71;
        Width = CGImageGetWidth(v71);
        Height = CGImageGetHeight(v71);
        v81.origin.x = v40 * (double)Width;
        v81.origin.y = v41 * (double)Height;
        v81.size.width = v42 * (double)Width;
        v81.size.height = v43 * (double)Height;
        v49 = CGImageCreateWithImageInRect(v71, v81);

        if (v49)
        {

          v71 = v49;
        }
        objc_autoreleasePoolPop(v46);
      }
    }
LABEL_20:
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v39, (uint64_t)v8, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
    if (v22((uint64_t)v8, 1, v21) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>?);
      return v71;
    }
    TaggedValue_1.tagged1.getter();
    v58 = LOBYTE(v72);
    v59 = LOBYTE(v73);
    v60 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v8, v21);
    if ((v59 & 1) != 0)
      return v71;
    v61 = (void *)MEMORY[0x1DF0E5C10](v60);
    v62 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
    v63 = (CGImageRef)objc_msgSend(v62, sel_initWithCGImage_, v71);
    v64 = objc_msgSend((id)objc_opt_self(), sel_filteredImage_imageFilterType_, v63, v58 + 1);
    if (v64)
    {
      v65 = v64;
      v66 = (CGImageRef)objc_msgSend(v64, sel_CGImage);

      v67 = v71;
      v63 = v71;
      if (!v66)
        goto LABEL_28;
    }
    else
    {
      v66 = v71;
    }

    v67 = v66;
LABEL_28:
    v71 = v67;
    objc_autoreleasePoolPop(v61);
    return v71;
  }
  result = (CGImageRef)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D1D820]), sel_initWithBottomLeft_bottomRight_topLeft_topRight_, v34, v35, v36, v37, v30, v31, v32, v33);
  if (result)
  {
    v50 = result;
    v51 = (void *)MEMORY[0x1DF0E5C10]();
    v52 = objc_allocWithZone(MEMORY[0x1E0DC3870]);
    v53 = v68;
    v54 = (CGImage *)objc_msgSend(v52, sel_initWithCGImage_, v68);
    v55 = objc_msgSend((id)objc_opt_self(), sel_perspectiveCorrectedImageFromImage_normalizedImageQuad_, v54, v50);
    v39 = v70;
    if (v55)
    {
      v56 = v55;
      v57 = (CGImage *)objc_msgSend(v55, sel_CGImage);

      v54 = v53;
      if (!v57)
        goto LABEL_19;
    }
    else
    {
      v57 = v53;
    }

    v53 = v57;
LABEL_19:
    objc_autoreleasePoolPop(v51);

    v71 = v53;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

uint64_t type metadata completion function for AsyncCache()
{
  return swift_initClassMetadata2();
}

uint64_t AsyncCache.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t TupleTypeMetadata2;
  uint64_t v74;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v3, v3);
  v5 = (char *)&v57 - v4;
  v6 = type metadata accessor for CheckedContinuation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v57 - v9;
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 96);
  v74 = v2;
  v13 = type metadata accessor for AsyncCache.CacheState(0, v11, v2, v12);
  v70 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v57 - v15);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v17 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v66 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v69 = (char *)&v57 - v22;
  swift_beginAccess();
  v23 = v0[14];
  v24 = *(_QWORD *)(v23 + 64);
  v59 = v0;
  v60 = v23 + 64;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v27 = v26 & v24;
  v64 = (unint64_t)(v25 + 63) >> 6;
  v65 = v23;
  v58 = v64 - 1;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v62 = v13;
  v63 = v11;
  v61 = v16;
  while (1)
  {
    if (v27)
    {
      v71 = (v27 - 1) & v27;
      v72 = v29;
      v30 = __clz(__rbit64(v27)) | (v29 << 6);
LABEL_9:
      v32 = v65;
      v31 = v66;
      (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v66, *(_QWORD *)(v65 + 48) + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v30, v11);
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(&v31[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v32 + 56) + *(_QWORD *)(v70 + 72) * v30, v13);
      v33 = 0;
      goto LABEL_17;
    }
    v34 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_57;
    if (v34 >= v64)
    {
      v72 = v29;
    }
    else
    {
      v35 = *(_QWORD *)(v60 + 8 * v34);
      if (v35)
        goto LABEL_13;
      v54 = v29 + 2;
      if (v29 + 2 >= v64)
      {
        v71 = 0;
        v33 = 1;
LABEL_44:
        v72 = v34;
        goto LABEL_16;
      }
      v35 = *(_QWORD *)(v60 + 8 * v54);
      if (v35)
      {
        v34 = v29 + 2;
LABEL_13:
        v71 = (v35 - 1) & v35;
        v72 = v34;
        v30 = __clz(__rbit64(v35)) + (v34 << 6);
        goto LABEL_9;
      }
      v55 = v29 + 3;
      if (v55 < v64)
      {
        v35 = *(_QWORD *)(v60 + 8 * v55);
        if (v35)
        {
          v34 = v55;
          goto LABEL_13;
        }
        while (1)
        {
          v34 = v55 + 1;
          if (__OFADD__(v55, 1))
            goto LABEL_58;
          if (v34 >= v64)
            break;
          v35 = *(_QWORD *)(v60 + 8 * v34);
          ++v55;
          if (v35)
            goto LABEL_13;
        }
        v71 = 0;
        v33 = 1;
        v34 = v58;
        goto LABEL_44;
      }
      v72 = v54;
    }
    v71 = 0;
    v33 = 1;
LABEL_16:
    v31 = v66;
LABEL_17:
    v36 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v31, v33, 1, TupleTypeMetadata2);
    v37 = v69;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v69, v31, v68);
    v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    v39 = TupleTypeMetadata2;
    if (v38(v37, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      v56 = v59;
      swift_bridgeObjectRelease();
      swift_defaultActor_destroy();
      return (uint64_t)v56;
    }
    v40 = &v37[*(int *)(v39 + 48)];
    v41 = v70;
    (*(void (**)(_QWORD *, char *, uint64_t))(v70 + 32))(v16, v40, v13);
    if (swift_getEnumCaseMultiPayload() != 1)
      break;
    (*(void (**)(_QWORD *, uint64_t))(v41 + 8))(v16, v13);
LABEL_6:
    v27 = v71;
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v37, v11);
    v29 = v72;
  }
  v42 = *v16;
  type metadata accessor for UUID();
  result = lazy protocol witness table accessor for type UUID and conformance UUID();
  v43 = 0;
  v44 = v42 + 64;
  v45 = 1 << *(_BYTE *)(v42 + 32);
  if (v45 < 64)
    v46 = ~(-1 << v45);
  else
    v46 = -1;
  v47 = v46 & *(_QWORD *)(v42 + 64);
  v48 = (unint64_t)(v45 + 63) >> 6;
  while (2)
  {
    if (v47)
    {
      v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v50 = v49 | (v43 << 6);
LABEL_24:
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(_QWORD *)(v42 + 56) + *(_QWORD *)(v7 + 72) * v50, v6);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56))(v5, 1, 1);
      CheckedContinuation.resume(returning:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      continue;
    }
    break;
  }
  v51 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
    __break(1u);
    goto LABEL_56;
  }
  if (v51 >= v48)
    goto LABEL_39;
  v52 = *(_QWORD *)(v44 + 8 * v51);
  ++v43;
  if (v52)
    goto LABEL_38;
  v43 = v51 + 1;
  if (v51 + 1 >= v48)
    goto LABEL_39;
  v52 = *(_QWORD *)(v44 + 8 * v43);
  if (v52)
    goto LABEL_38;
  v43 = v51 + 2;
  if (v51 + 2 >= v48)
    goto LABEL_39;
  v52 = *(_QWORD *)(v44 + 8 * v43);
  if (v52)
    goto LABEL_38;
  v53 = v51 + 3;
  if (v53 >= v48)
  {
LABEL_39:
    swift_release();
    v13 = v62;
    v11 = v63;
    v16 = v61;
    v37 = v69;
    goto LABEL_6;
  }
  v52 = *(_QWORD *)(v44 + 8 * v53);
  v43 = v53;
  if (v52)
  {
LABEL_38:
    v47 = (v52 - 1) & v52;
    v50 = __clz(__rbit64(v52)) + (v43 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    v43 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v43 >= v48)
      goto LABEL_39;
    v52 = *(_QWORD *)(v44 + 8 * v43);
    ++v53;
    if (v52)
      goto LABEL_38;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t AsyncCache.__deallocating_deinit()
{
  AsyncCache.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for AsyncCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCache);
}

uint64_t type metadata instantiation function for AsyncCache.CacheState()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AsyncCache.CacheState()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = MEMORY[0x1E0DE9D18] + 64;
  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCache.CacheState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = v5;
  if (((v6 + 8) & (unint64_t)~v6) + *(_QWORD *)(v4 + 64) <= 8)
    v7 = 8;
  else
    v7 = ((v5 + 8) & ~(unint64_t)v5) + *(_QWORD *)(v4 + 64);
  v8 = v5 & 0x100000;
  if (v6 > 7 || v8 != 0 || v7 + 1 > 0x18)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = *((unsigned __int8 *)a2 + v7);
    if (v12 >= 2)
    {
      if (v7 <= 3)
        v13 = v7;
      else
        v13 = 4;
      __asm { BR              X14 }
    }
    *a1 = *a2;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v6 + 8) & ~v6, ((unint64_t)a2 + v6 + 8) & ~v6);
      *((_BYTE *)v3 + v7) = 1;
    }
    else
    {
      *((_BYTE *)a1 + v7) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

uint64_t destroy for AsyncCache.CacheState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = ((v3 + 8) & ~v3) + *(_QWORD *)(v2 + 64);
  if (v4 <= 8)
    v4 = 8;
  v5 = *(unsigned __int8 *)(a1 + v4);
  if (v5 < 2)
  {
    if (v5 == 1)
      return (*(uint64_t (**)(uint64_t))(v2 + 8))((a1 + v3 + 8) & ~v3);
    else
      return swift_bridgeObjectRelease();
  }
  else
  {
    if (v4 <= 3)
      v6 = v4;
    else
      v6 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1DDCBF11C + 4 * byte_1DDF3BD6D[v6]))();
  }
}

_QWORD *initializeWithCopy for AsyncCache.CacheState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) <= 8)
    v6 = 8;
  else
    v6 = ((v5 + 8) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  *a1 = *a2;
  if (v7 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
    v9 = 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *assignWithCopy for AsyncCache.CacheState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 1)
      (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v11, *(_QWORD *)(a3 + 24));
    else
      swift_bridgeObjectRelease();
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 2)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    *a1 = *a2;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, v5);
      *((_BYTE *)a1 + v8) = 1;
    }
    else
    {
      *((_BYTE *)a1 + v8) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for AsyncCache.CacheState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  if (((v5 + 8) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) <= 8)
    v6 = 8;
  else
    v6 = ((v5 + 8) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *((unsigned __int8 *)a2 + v6);
  if (v7 >= 2)
  {
    if (v6 <= 3)
      v8 = v6;
    else
      v8 = 4;
    __asm { BR              X14 }
  }
  *a1 = *a2;
  if (v7 == 1)
  {
    (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  *((_BYTE *)a1 + v6) = v9;
  return a1;
}

_QWORD *assignWithTake for AsyncCache.CacheState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char v14;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 24);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned __int8 *)(v6 + 80);
    if (((v7 + 8) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) <= 8)
      v8 = 8;
    else
      v8 = ((v7 + 8) & ~v7) + *(_QWORD *)(v6 + 64);
    v9 = *((unsigned __int8 *)a1 + v8);
    if (v9 >= 2)
    {
      if (v8 <= 3)
        v10 = v8;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    v11 = ~v7;
    if (v9 == 1)
      (*(void (**)(unint64_t, _QWORD))(v6 + 8))(((unint64_t)a1 + v7 + 8) & v11, *(_QWORD *)(a3 + 24));
    else
      swift_bridgeObjectRelease();
    v12 = *((unsigned __int8 *)a2 + v8);
    if (v12 >= 2)
    {
      if (v8 <= 3)
        v13 = v8;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    *a1 = *a2;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)a1 + v7 + 8) & v11, ((unint64_t)a2 + v7 + 8) & v11, v5);
      v14 = 1;
    }
    else
    {
      v14 = 0;
    }
    *((_BYTE *)a1 + v8) = v14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCache.CacheState(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) > 8)
    v3 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1DDCBF7E8 + 4 * byte_1DDF3BD90[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncCache.CacheState(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for AsyncCache.CacheState(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64) > 8)
    v2 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1DDCBFA44 + 4 * byte_1DDF3BD9E[v3]))();
}

void destructiveInjectEnumTag for AsyncCache.CacheState(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v4 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (a2 > 1)
  {
    if (v4 <= 8)
      v5 = 8;
    else
      v5 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 80))
         + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    if (v4 <= 8)
      v4 = 8;
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for AsyncCache.CacheState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncCache.CacheState);
}

uint64_t AsyncCache.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance AsyncCache<A, B>()
{
  return AsyncCache.unownedExecutor.getter();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

void specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  objc_class *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  objc_super v47;
  uint64_t v48;
  CGRect v49;
  CGRect v50;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = direct field offset for ShapeView.appearanceStreamView;
  if (!*(_QWORD *)((char *)v0 + direct field offset for ShapeView.appearanceStreamView))
  {
    v13 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v10);
    if (v13)
    {
      v14 = v13;
      v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x710))();

      if (v16)
      {
        v17 = (char *)v1 + *(_QWORD *)((*v15 & *v1) + 0x380);
        swift_beginAccess();
        v42 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
        v43 = v17;
        v42(v6, v17, v2);
        v44 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        Capsule<>.rootID.getter();
        v45 = *(void (**)(char *, uint64_t))(v3 + 8);
        v45(v6, v2);
        v18 = objc_msgSend(v16, sel_annotations);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x1E0C80A78](v20, v21);
        *(&v42 - 2) = (void (*)(char *, char *, uint64_t))v12;
        v22 = specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:), (uint64_t)(&v42 - 4), v19);

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
        if (v22)
        {
          type metadata accessor for CanvasElementPDFAnnotation();
          v23 = (void *)swift_dynamicCastClass();
          if (v23)
          {
            v24 = v23;
            if (objc_msgSend(v23, sel_hasAppearanceStream))
            {
              v25 = ((uint64_t (*)(char *, char *, uint64_t))v42)(v6, v43, v2);
              MEMORY[0x1E0C80A78](v25, v26);
              v27 = type metadata accessor for Shape();
              v28 = (void (*)(char *, char *, uint64_t))v44;
              *(&v42 - 4) = (void (*)(char *, char *, uint64_t))v27;
              *(&v42 - 3) = v28;
              *(&v42 - 2) = (void (*)(char *, char *, uint64_t))&protocol witness table for Shape;
              swift_getKeyPath();
              Capsule<>.subscript.getter();
              swift_release();
              v45(v6, v2);
              if ((~v48 & 0xA8) == 0)
              {
                v29 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
                v30 = objc_allocWithZone(v29);
                swift_unknownObjectWeakInit();
                v31 = v22;
                objc_msgSend(v24, sel_bounds);
                v50 = CGRectIntegral(v49);
                v47.receiver = v30;
                v47.super_class = v29;
                v32 = objc_msgSendSuper2(&v47, sel_initWithFrame_, v50.origin.x, v50.origin.y, v50.size.width, v50.size.height);
                swift_unknownObjectWeakAssign();
                v33 = v32;
                v34 = objc_msgSend(v33, sel_layer);
                objc_msgSend(v34, sel_setGeometryFlipped_, 1);

                v35 = (void *)objc_opt_self();
                v36 = v33;
                v37 = objc_msgSend(v35, sel_clearColor);
                objc_msgSend(v36, sel_setBackgroundColor_, v37);

                objc_msgSend(v1, sel_addSubview_, v36);
                v38 = v46;
                v39 = *(void **)((char *)v1 + v46);
                *(_QWORD *)((char *)v1 + v46) = v36;
                v22 = v36;

                v40 = ShapeView.groupLayer.getter();
                objc_msgSend(v40, sel_setHidden_, *(_QWORD *)((char *)v1 + v38) != 0);

                v41 = *(void **)((char *)v1 + direct field offset for ShapeView._textBoxView);
                if (v41)
                  objc_msgSend(v41, sel_setHidden_, *(_QWORD *)((char *)v1 + v38) != 0);

              }
            }
          }

        }
      }
    }
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  objc_class *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;
  CGRect v39;
  CGRect v40;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = direct field offset for UnknownCanvasElementView.appearanceStreamView;
  if (!*(_QWORD *)((char *)v0 + direct field offset for UnknownCanvasElementView.appearanceStreamView))
  {
    v13 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v10);
    if (v13)
    {
      v14 = v13;
      v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v16 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v13) + 0x710))();

      if (v16)
      {
        v17 = (char *)v1 + *(_QWORD *)((*v15 & *v1) + 0x380);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v17, v2);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
        Capsule<>.rootID.getter();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        v18 = objc_msgSend(v16, sel_annotations);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        MEMORY[0x1E0C80A78](v20, v21);
        *(&v36 - 2) = (uint64_t)v12;
        v22 = specialized Sequence.first(where:)((uint64_t (*)(id *))closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply, (uint64_t)(&v36 - 4), v19);

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
        if (v22)
        {
          type metadata accessor for CanvasElementPDFAnnotation();
          v23 = (void *)swift_dynamicCastClass();
          if (v23)
          {
            v24 = v23;
            if (objc_msgSend(v23, sel_hasAppearanceStream))
            {
              v25 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotationAppearanceStreamView();
              v26 = objc_allocWithZone(v25);
              swift_unknownObjectWeakInit();
              v27 = v22;
              objc_msgSend(v24, sel_bounds);
              v40 = CGRectIntegral(v39);
              v38.receiver = v26;
              v38.super_class = v25;
              v28 = objc_msgSendSuper2(&v38, sel_initWithFrame_, v40.origin.x, v40.origin.y, v40.size.width, v40.size.height);
              swift_unknownObjectWeakAssign();
              v29 = v28;
              v30 = objc_msgSend(v29, sel_layer);
              objc_msgSend(v30, sel_setGeometryFlipped_, 1);

              v31 = (void *)objc_opt_self();
              v32 = v29;
              v33 = objc_msgSend(v31, sel_clearColor);
              objc_msgSend(v32, sel_setBackgroundColor_, v33);

              objc_msgSend(v1, sel_addSubview_, v32);
              v34 = v37;
              v35 = *(void **)((char *)v1 + v37);
              *(_QWORD *)((char *)v1 + v37) = v32;
              v22 = v32;

              objc_msgSend(*(id *)((char *)v1 + direct field offset for UnknownCanvasElementView.thumbnailView), sel_setHidden_, *(_QWORD *)((char *)v1 + v34) != 0);
              objc_msgSend(*(id *)((char *)v1 + direct field offset for UnknownCanvasElementView.blurEffectView), sel_setHidden_, *(_QWORD *)((char *)v1 + v34) != 0);

            }
          }

        }
      }
    }
  }
}

void specialized AppearanceStreamViewSupport.updateAppearanceStreamView()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double width;
  double height;
  id v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  v1 = *(_QWORD *)&v0[direct field offset for UnknownCanvasElementView.appearanceStreamView];
  if (v1)
  {
    v15 = *(id *)&v0[direct field offset for UnknownCanvasElementView.appearanceStreamView];
    v2 = (void *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation);
    v3 = v15;
    v4 = v3;
    if (v2)
    {
      objc_msgSend(v2, sel_bounds);
      v6 = v5;
      v8 = v7;
      v10 = v9;
      v12 = v11;

      v16.origin.x = v6;
      v16.origin.y = v8;
      v16.size.width = v10;
      v16.size.height = v12;
      v17 = CGRectIntegral(v16);
    }
    else
    {
      objc_msgSend(v3, sel_frame);
    }
    width = v17.size.width;
    height = v17.size.height;
    objc_msgSend(v0, sel_bounds, v17.origin.x, v17.origin.y);
    objc_msgSend(v4, sel_setFrame_, 0.0, CGRectGetMaxY(v18) - height, width, height);

  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double width;
  double height;
  uint64_t v36;
  char *v37;
  double v38;
  double v39;
  uint64_t (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;

  v1 = v0;
  v2 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v40 - v12;
  v14 = direct field offset for ShapeView.appearanceStreamView;
  v15 = *(void **)((char *)v1 + direct field offset for ShapeView.appearanceStreamView);
  if (v15)
  {
    v42 = v11;
    v43 = v2;
    v44 = v5;
    v16 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v40 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    v41 = v16;
    v17 = v40(v13, v16, v6);
    MEMORY[0x1E0C80A78](v17, v18);
    *(&v40 - 4) = (uint64_t (*)(char *, char *, uint64_t))type metadata accessor for Shape();
    *(&v40 - 3) = (uint64_t (*)(char *, char *, uint64_t))lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    *(&v40 - 2) = (uint64_t (*)(char *, char *, uint64_t))&protocol witness table for Shape;
    swift_getKeyPath();
    v19 = v15;
    Capsule<>.subscript.getter();
    swift_release();
    v20 = *(void (**)(char *, uint64_t))(v7 + 8);
    v20(v13, v6);
    if ((v45 & 0x20) != 0)
    {
      v24 = (void *)MEMORY[0x1DF0E666C](&v19[OBJC_IVAR____TtC8PaperKit46CanvasElementPDFAnnotationAppearanceStreamView_annotation]);
      if (v24)
      {
        v25 = v24;
        objc_msgSend(v24, sel_bounds);
        v27 = v26;
        v29 = v28;
        v31 = v30;
        v33 = v32;

        v49.origin.x = v27;
        v49.origin.y = v29;
        v49.size.width = v31;
        v49.size.height = v33;
        v50 = CGRectIntegral(v49);
      }
      else
      {
        objc_msgSend(v19, sel_frame);
      }
      width = v50.size.width;
      height = v50.size.height;
      v36 = (uint64_t)v44;
      v37 = v42;
      ((void (*)(char *, char *, uint64_t, __n128, __n128))v40)(v42, v41, v6, (__n128)v50.origin, *(__n128 *)&v50.origin.y);
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v20(v37, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
      CRRegister.wrappedValue.getter();
      if (v48)
      {
        v38 = v46;
        v39 = v47;
        swift_bridgeObjectRelease();
      }
      else
      {
        v39 = 0.0;
        v38 = 0.0;
      }
      outlined destroy of PKStrokeProperties(v36, (uint64_t (*)(_QWORD))type metadata accessor for ShapeSecondaryProperties);
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v19, sel_setFrame_, v38, CGRectGetMaxY(v51) - height - v39, width, height);
    }
    else
    {
      objc_msgSend(v19, sel_removeFromSuperview);
      v21 = *(void **)((char *)v1 + v14);
      *(_QWORD *)((char *)v1 + v14) = 0;

      v22 = ShapeView.groupLayer.getter();
      objc_msgSend(v22, sel_setHidden_, *(_QWORD *)((char *)v1 + v14) != 0);

      v23 = *(void **)((char *)v1 + direct field offset for ShapeView._textBoxView);
      if (v23)
        objc_msgSend(v23, sel_setHidden_, *(_QWORD *)((char *)v1 + v14) != 0);
    }

  }
}

id specialized CanvasElementView.modelCoordinateSpace.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for Image();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for TextBox();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for GraphElement();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for Link();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for Signature();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for Paper();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for PaperDocumentPage();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for UnknownCanvasElement();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  _BYTE v20[24];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = a1;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v11 = swift_endAccess();
  v12 = (*(uint64_t (**)(uint64_t))((*v9 & *v2) + 0x88))(v11);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
    v20[0] = 4;
    v14 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v9 & *v13) + 0x538);
    v15 = type metadata accessor for Shape();
    v16 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v14(v8, v20, v15, v16);
    v20[0] = 4;
    (*(void (**)(_BYTE *))((*v9 & *v13) + 0x518))(v20);

    v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  (*(void (**)(uint64_t))((*v9 & *v2) + 0x288))(v12);
  return objc_msgSend(v2, sel_setNeedsLayout);
}

void specialized CanvasElementView.setupAccessibility()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_318;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_325;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_332;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_339;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_343;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  void *v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for closure #3 in CanvasElementView.setupAccessibility();
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_37;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for closure #4 in CanvasElementView.setupAccessibility();
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_17;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for closure #5 in CanvasElementView.setupAccessibility();
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_23_2;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for closure #6 in CanvasElementView.setupAccessibility();
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_29_0;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_33;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_246;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_253;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_260;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_267;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_271;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_282;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_289;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_296;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_303;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_307;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_210;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_217;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_224;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_231;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_235;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_174;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_181;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_188;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_195;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_199;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_354;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_361;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_368;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_375;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_379;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_138;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_145;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_152;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_159;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_163;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  Swift::String v37;
  Swift::String_optional v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  Class isa;
  id v53;
  id v54;
  id v55;
  void *v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, void *);
  void *v60;
  BOOL (*v61)(uint64_t);
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  Swift::String v67;

  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v2 = swift_allocObject();
  v56 = v0;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v63._countAndFlagsBits = 0xD000000000000037;
  v63._object = (void *)0x80000001DDF54AE0;
  v3._object = (void *)0x80000001DDF54AC0;
  v3._countAndFlagsBits = 0xD000000000000010;
  v4.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v4.value._object = (void *)0xEB00000000656C62;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, paperKitBundle, v5, v63);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v7 + 24) = v1;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v9 = (void *)MEMORY[0x1DF0E41AC](v6._countAndFlagsBits, v6._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #3 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v7;
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_102;
  v10 = _Block_copy(&aBlock);
  v55 = objc_msgSend(v8, sel_initWithName_actionHandler_, v9, v10);

  _Block_release(v10);
  swift_release();
  v11._countAndFlagsBits = 0xD000000000000017;
  v64._countAndFlagsBits = 0xD00000000000003ELL;
  v64._object = (void *)0x80000001DDF54B70;
  v11._object = (void *)0x80000001DDF54B50;
  v12.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v12.value._object = (void *)0xEB00000000656C62;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, paperKitBundle, v13, v64);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = partial apply for specialized closure #1 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v15 + 24) = v1;
  v16 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v17 = (void *)MEMORY[0x1DF0E41AC](v14._countAndFlagsBits, v14._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #4 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v15;
  v18 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_109;
  v19 = _Block_copy(&aBlock);
  v54 = objc_msgSend(v16, (SEL)&selRef_pageModelControllerForPage_ + 6, v17, v19);

  _Block_release(v19);
  swift_release();
  v65._object = (void *)0x80000001DDF54BB0;
  v20._countAndFlagsBits = 0x705520656C616353;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v21.value._object = (void *)0xEB00000000656C62;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002FLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, paperKitBundle, v22, v65);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v24 + 24) = v2;
  v25 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v26 = (void *)MEMORY[0x1DF0E41AC](v23._countAndFlagsBits, v23._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #5 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v24;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_116;
  v27 = _Block_copy(&aBlock);
  v53 = objc_msgSend(v25, sel_initWithName_actionHandler_, v26, v27);

  _Block_release(v27);
  swift_release();
  v66._countAndFlagsBits = 0xD000000000000031;
  v66._object = (void *)0x80000001DDF54BE0;
  v28._countAndFlagsBits = 0x6F4420656C616353;
  v28._object = (void *)0xEA00000000006E77;
  v29.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v29.value._object = (void *)0xEB00000000656C62;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, paperKitBundle, v30, v66);
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = partial apply for specialized closure #2 in CanvasElementView.setupAccessibility();
  *(_QWORD *)(v32 + 24) = v2;
  v33 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v34 = (void *)MEMORY[0x1DF0E41AC](v31._countAndFlagsBits, v31._object);
  swift_bridgeObjectRelease();
  v61 = (BOOL (*)(uint64_t))closure #6 in CanvasElementView.setupAccessibility()partial apply;
  v62 = v32;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_123;
  v35 = _Block_copy(&aBlock);
  v36 = objc_msgSend(v33, sel_initWithName_actionHandler_, v34, v35);

  _Block_release(v35);
  swift_release();
  v67._object = (void *)0x80000001DDF54C40;
  v37._object = (void *)0x80000001DDF54C20;
  v37._countAndFlagsBits = 0xD000000000000010;
  v38.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v38.value._object = (void *)0xEB00000000656C62;
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  v67._countAndFlagsBits = 0xD00000000000002FLL;
  v40 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, v38, paperKitBundle, v39, v67);
  v41 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v42 = objc_allocWithZone(MEMORY[0x1E0DC33F0]);
  swift_retain();
  v43 = (void *)MEMORY[0x1DF0E41AC](v40._countAndFlagsBits, v40._object);
  swift_bridgeObjectRelease();
  v61 = partial apply for specialized closure #7 in CanvasElementView.setupAccessibility();
  v62 = v41;
  aBlock = v18;
  v58 = 1107296256;
  v59 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
  v60 = &block_descriptor_127;
  v44 = _Block_copy(&aBlock);
  v45 = objc_msgSend(v42, sel_initWithName_actionHandler_, v43, v44);

  _Block_release(v44);
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1DDF3BE50;
  *(_QWORD *)(v46 + 32) = v45;
  *(_QWORD *)(v46 + 40) = v55;
  *(_QWORD *)(v46 + 48) = v54;
  *(_QWORD *)(v46 + 56) = v53;
  *(_QWORD *)(v46 + 64) = v36;
  aBlock = v46;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityCustomAction);
  v47 = v45;
  v48 = v55;
  v49 = v54;
  v50 = v53;
  v51 = v36;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAccessibilityCustomActions_, isa);
  swift_release();
  swift_release();

}

