uint64_t specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for Image();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v50._object = &protocol witness table for Image;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for Image();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      v50._object = &protocol witness table for Image;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for Image();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v50._object = &protocol witness table for Image;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  CGFloat Width;
  uint64_t v11;
  unint64_t v12;
  CGFloat Height;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  double v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  _QWORD v34[6];
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  CGRect v38;
  CGRect v39;

  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v2._countAndFlagsBits = 0xD000000000000012;
      v35._countAndFlagsBits = 0xD00000000000003CLL;
      v35._object = (void *)0x80000001DDF54D00;
      v2._object = (void *)0x80000001DDF54CE0;
      v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v3.value._object = (void *)0xEB00000000656C62;
      v4._countAndFlagsBits = 0;
      v4._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v35);
      (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8))(v34);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v29, 0.0);
      v5 = v29;
      v6 = v30;
      v7 = v31;
      v8 = v32;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1DDF33AB0;
      v38.origin.x = v5;
      v38.origin.y = v6;
      v38.size.width = v7;
      v38.size.height = v8;
      Width = CGRectGetWidth(v38);
      v11 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEF040];
      v12 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v9 + 64) = v12;
      *(CGFloat *)(v9 + 32) = Width;
      v39.origin.x = v5;
      v39.origin.y = v6;
      v39.size.width = v7;
      v39.size.height = v8;
      Height = CGRectGetHeight(v39);
      *(_QWORD *)(v9 + 96) = v11;
      *(_QWORD *)(v9 + 104) = v12;
      *(CGFloat *)(v9 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v37._countAndFlagsBits = 0xD000000000000040;
      v37._object = (void *)0x80000001DDF54C90;
      v19._object = (void *)0x80000001DDF54C70;
      v19._countAndFlagsBits = 0xD000000000000016;
      v20.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v20.value._object = (void *)0xEB00000000656C62;
      v21._countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, paperKitBundle, v21, v37);
      (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8))(v34);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v29, 0.0);
      v22 = v29;
      v23 = v30;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1DDF33AB0;
      v25 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEF040];
      v26 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v24 + 64) = v26;
      *(double *)(v24 + 32) = v22;
      *(_QWORD *)(v24 + 96) = v25;
      *(_QWORD *)(v24 + 104) = v26;
      *(double *)(v24 + 72) = v23;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v36._countAndFlagsBits = 0xD000000000000040;
    v36._object = (void *)0x80000001DDF54D60;
    v14._object = (void *)0x80000001DDF54D40;
    v14._countAndFlagsBits = 0xD000000000000016;
    v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v15.value._object = (void *)0xEB00000000656C62;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, paperKitBundle, v16, v36);
    (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1A8))(v34);
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v29, 0.0);
    v17 = v33 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v18 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v18 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v18 + 32) = v17;
  }
  v27 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v27;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for TextBox();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      v50._object = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for TextBox();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      v50._object = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for TextBox();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    v50._object = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for GraphElement();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      v50._object = &protocol witness table for GraphElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for GraphElement();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      v50._object = &protocol witness table for GraphElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for GraphElement();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    v50._object = &protocol witness table for GraphElement;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for Link();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
      v50._object = &protocol witness table for Link;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for Link();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
      v50._object = &protocol witness table for Link;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for Link();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    v50._object = &protocol witness table for Link;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for Signature();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
      v50._object = &protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for Signature();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
      v50._object = &protocol witness table for Signature;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for Signature();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
    v50._object = &protocol witness table for Signature;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for Paper();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v50._object = &protocol witness table for Paper;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for Paper();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      v50._object = &protocol witness table for Paper;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for Paper();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v50._object = &protocol witness table for Paper;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for PaperDocumentPage();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
      v50._object = &protocol witness table for PaperDocumentPage;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for PaperDocumentPage();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
      v50._object = &protocol witness table for PaperDocumentPage;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for PaperDocumentPage();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
    v50._object = &protocol witness table for PaperDocumentPage;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String_optional v9;
  Swift::String v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  CGPoint v14;
  CGSize v15;
  uint64_t v16;
  CGFloat Width;
  uint64_t v18;
  unint64_t v19;
  CGFloat Height;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  CGPoint v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  CGPoint v42;
  CGSize v43;
  __int128 v44;
  CGPoint v45;
  CGSize v46;
  __int128 v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  CGRect v51;
  CGRect v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (a1 == 1)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v8._countAndFlagsBits = 0xD000000000000012;
      v48._countAndFlagsBits = 0xD00000000000003CLL;
      v50._object = (void *)0x80000001DDF54D00;
      v8._object = (void *)0x80000001DDF54CE0;
      v9.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v9.value._object = (void *)0xEB00000000656C62;
      v10._countAndFlagsBits = 0;
      v10._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v8, v9, paperKitBundle, v10, v48);
      v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v11, v3);
      MEMORY[0x1E0C80A78](v12, v13);
      *(&v41 - 4) = type metadata accessor for UnknownCanvasElement();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
      v50._object = &protocol witness table for UnknownCanvasElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v14 = v42;
      v15 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1DDF33AB0;
      v51.origin = v14;
      v51.size = v15;
      Width = CGRectGetWidth(v51);
      v18 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
      v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v16 + 64) = v19;
      *(CGFloat *)(v16 + 32) = Width;
      v52.origin = v14;
      v52.size = v15;
      Height = CGRectGetHeight(v52);
      *(_QWORD *)(v16 + 96) = v18;
      *(_QWORD *)(v16 + 104) = v19;
      *(CGFloat *)(v16 + 72) = Height;
    }
    else
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v50._countAndFlagsBits = 0xD000000000000040;
      v50._object = (void *)0x80000001DDF54C90;
      v29._object = (void *)0x80000001DDF54C70;
      v29._countAndFlagsBits = 0xD000000000000016;
      v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v30.value._object = (void *)0xEB00000000656C62;
      v31._countAndFlagsBits = 0;
      v31._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v50);
      v32 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v32, v3);
      MEMORY[0x1E0C80A78](v33, v34);
      *(&v41 - 4) = type metadata accessor for UnknownCanvasElement();
      *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
      v50._object = &protocol witness table for UnknownCanvasElement;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v45 = v42;
      v46 = v43;
      v47 = v44;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
      v35 = v42;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_1DDF33AB0;
      v37 = MEMORY[0x1E0DEF040];
      *(_QWORD *)(v36 + 56) = MEMORY[0x1E0DEF040];
      v38 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      *(_QWORD *)(v36 + 64) = v38;
      *(CGFloat *)(v36 + 32) = v35.x;
      *(_QWORD *)(v36 + 96) = v37;
      *(_QWORD *)(v36 + 104) = v38;
      *(CGFloat *)(v36 + 72) = v35.y;
    }
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v49._countAndFlagsBits = 0xD000000000000040;
    v50._object = (void *)0x80000001DDF54D60;
    v21._object = (void *)0x80000001DDF54D40;
    v21._countAndFlagsBits = 0xD000000000000016;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v49);
    v24 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v24, v3);
    MEMORY[0x1E0C80A78](v25, v26);
    *(&v41 - 4) = type metadata accessor for UnknownCanvasElement();
    *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
    v50._object = &protocol witness table for UnknownCanvasElement;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v45 = v42;
    v46 = v43;
    v47 = v44;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v42, 0.0);
    v27 = *(double *)&v44 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v28 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v28 + 32) = v27;
  }
  v39 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t specialized CanvasElementView.accessibilityDescription()()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  void (*v4)(_QWORD *__return_ptr);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[6];
  _QWORD v32[7];
  Swift::String v33;
  Swift::String v34;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v33._object = (void *)0x80000001DDF54C90;
  v1._object = (void *)0x80000001DDF54C70;
  v1._countAndFlagsBits = 0xD000000000000016;
  v2.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v2.value._object = (void *)0xEB00000000656C62;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0xD000000000000040;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, paperKitBundle, v3, v33);
  v4 = *(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8);
  v4(v31);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)v32, 0.0);
  v5 = v32[0];
  v6 = v32[1];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1DDF33AB0;
  v8 = MEMORY[0x1E0DEF040];
  *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEF040];
  v9 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  *(_QWORD *)(v7 + 64) = v9;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = v9;
  *(_QWORD *)(v7 + 72) = v6;
  v10 = static String.localizedStringWithFormat(_:_:)();
  v28 = v11;
  v29 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(1);
  v14 = v13;
  v34._object = (void *)0x80000001DDF54D60;
  v15._object = (void *)0x80000001DDF54D40;
  v15._countAndFlagsBits = 0xD000000000000016;
  v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v16.value._object = (void *)0xEB00000000656C62;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v34._countAndFlagsBits = 0xD000000000000040;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v34);
  v4(v32);
  CGAffineTransform.decompose(initialRotation:)((uint64_t)v30, 0.0);
  v18 = *(double *)&v30[4] * 180.0 / 3.14159265;
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v19 + 56) = v8;
  *(_QWORD *)(v19 + 64) = v9;
  *(double *)(v19 + 32) = v18;
  v20 = static String.localizedStringWithFormat(_:_:)();
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30[0] = v29;
  v30[1] = v28;
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v12;
  v24._object = v14;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 8236;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v20;
  v26._object = v22;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  return v30[0];
}

id ShapeView.shapeLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_shapeLayer);
}

id ShapeView.endLineEndLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer);
}

id ShapeView.startLineEndLayer.getter()
{
  return ShapeView.shapeLayer.getter(&direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer);
}

id ShapeView.shapeLayer.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2840]), sel_init);
    v6 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v7 = v3;
  return v4;
}

id ShapeView.groupLayer.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = direct field offset for ShapeView.$__lazy_storage_$_groupLayer;
  v2 = *(void **)(v0 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer);
  if (v2)
  {
    v3 = *(id *)(v0 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer);
  }
  else
  {
    v4 = closure #1 in ShapeView.groupLayer.getter();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id closure #1 in ShapeView.groupLayer.getter()
{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v0 = ShapeView.startLineEndLayer.getter();
  v1 = *MEMORY[0x1E0CD2B70];
  objc_msgSend(v0, sel_setFillRule_, *MEMORY[0x1E0CD2B70]);

  v2 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v2, sel_setFillRule_, v1);

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD27A8]), sel_init);
  v4 = ShapeView.shapeLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v4);

  v5 = ShapeView.startLineEndLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v5);

  v6 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v3, sel_addSublayer_, v6);

  return v3;
}

void *ShapeView.controlPoints.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v12 = TaggedValue_9<>.controlPoints.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v12;
}

double ShapeView.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 v15;
  char *v16;
  double v17;
  double v18;
  _BYTE v20[7];
  unsigned __int8 v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *a1;
  v16 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  v21 = v15;
  specialized TaggedValue_9<>.subscript.getter(&v21, a2);
  v18 = v17;
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  return v18;
}

uint64_t ShapeView.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned __int8 v21;
  char *v22;
  _BYTE v24[12];
  int v25;
  CGFloat *v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int8 v29[24];

  v7 = v6;
  v26 = a2;
  v27 = a3;
  v25 = a4 & 1;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = &v24[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = *a1;
  v22 = (char *)v7 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v7) + 0x380);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v12 + 16))(v15, v22, v11);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
  v29[0] = v21;
  TaggedValue_9<>.subscript.setter(v29, v26, v27, v25, a5, a6);
  v28 = v20;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  specialized CanvasElementView.commit()();
  objc_msgSend(v7, sel_setNeedsLayout);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v20, v16);
}

uint64_t closure #1 in ShapeView.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a2, v3);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ShapeView.shapeOpacity.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #1 in ShapeView.shapeStrokeWidth.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

uint64_t closure #1 in ShapeView.lineEnds.setter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

void @objc ShapeView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized ShapeView.init(coder:)();
}

uint64_t ShapeView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = 13;
  if ((v10 & 0x80) == 0)
    v7 = 15;
  v8 = 5;
  if ((v10 & 0x80) == 0)
    v8 = 7;
  if ((v10 & 0x10) != 0)
    v7 = v8;
  if ((v10 & 4) != 0)
    return 0;
  else
    return v7;
}

double ShapeView.modelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  double result;
  __int128 v10;
  __int128 v11;
  _QWORD v12[4];
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v8, v3);
  v12[0] = type metadata accessor for Shape();
  v12[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v12[2] = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  result = *(double *)&v13;
  v10 = v14;
  v11 = v15;
  *a1 = v13;
  a1[1] = v10;
  a1[2] = v11;
  return result;
}

void ShapeView.modelCoordinateSpace.setter(uint64_t a1)
{
  specialized CanvasElementView.modelCoordinateSpace.setter(a1);
  ShapeView.updateShapeLayer()();
}

void (*ShapeView.modelCoordinateSpace.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  __int128 v8;

  v3 = malloc(0xE8uLL);
  *a1 = v3;
  v3[27] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = malloc(*(_QWORD *)(v5 + 64));
  v3[28] = v6;
  v7 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(void *, char *, uint64_t))(v5 + 16))(v6, v7, v4);
  type metadata accessor for Shape();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v6, v4);
  *((_OWORD *)v3 + 6) = *((_OWORD *)v3 + 9);
  v3 += 12;
  v8 = *((_OWORD *)v3 + 5);
  *((_OWORD *)v3 + 1) = *((_OWORD *)v3 + 4);
  *((_OWORD *)v3 + 2) = v8;
  return ShapeView.modelCoordinateSpace.modify;
}

void ShapeView.modelCoordinateSpace.modify(uint64_t a1, char a2)
{
  _OWORD *v2;
  void *v3;
  _OWORD *v4;
  __int128 v5;

  v2 = *(_OWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 224);
  if ((a2 & 1) != 0)
    v4 = *(_OWORD **)a1;
  else
    v4 = (_OWORD *)(*(_QWORD *)a1 + 48);
  v5 = v2[7];
  *v4 = v2[6];
  v4[1] = v5;
  v4[2] = v2[8];
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)v4);
  ShapeView.updateShapeLayer()();
  free(v3);
  free(v2);
}

CGPathRef ShapeView.modelHitTestPath.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  void *v32;
  double b;
  double a;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  double v40;
  char v41;
  void *v42;
  id v43;
  const CGPath *v44;
  char *v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat c;
  double ty;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  const CGPath *v59;
  BOOL v60;
  char *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, _QWORD, uint64_t);
  char *v71;
  void (*v72)(char *, uint64_t);
  CGPathRef result;
  CGPathRef v74;
  char a_low;
  uint64_t v76;
  const CGPath *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  const CGPath *v84;
  char v85;
  uint64_t v86;
  const CGPath *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t);
  const CGPath *v95;
  CGFloat tx;
  CGFloat d;
  char *v98;
  char *v99;
  id v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  CGAffineTransform v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  CGAffineTransform v119;
  CGAffineTransform transform;
  double v121;
  double v122;
  double v123;
  uint64_t v124;
  CGRect v125;

  v1 = v0;
  v124 = *MEMORY[0x1E0C80C00];
  v109 = type metadata accessor for CGPathFillRule();
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109, v2);
  v98 = (char *)&tx - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v99 = (char *)&tx - v6;
  MEMORY[0x1E0C80A78](v7, v8);
  v106 = (char *)&tx - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v105 = (char *)&tx - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v103 = *(_QWORD *)(v13 - 8);
  v104 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v102 = (char *)&tx - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = (id)type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v100, v16);
  v101 = (char *)&tx - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&tx - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&tx - v25;
  v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v28 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v29 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v110 = v26;
  v29(v26, v28, v18);
  v30 = (char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement;
  v31 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v31)
  {
    v32 = (void *)v31;
    AnyCanvasElementView.paperBoundsTransform()(&v112);

    a = v112.a;
    b = v112.b;
  }
  else
  {
    b = 0.0;
    a = 1.0;
  }
  v35 = (_QWORD *)MEMORY[0x1DF0E666C](v30);
  if (v35)
  {
    v36 = v35;
    v37 = (_QWORD *)(*(uint64_t (**)(void))((*v27 & *v35) + 0x88))();

    if (v37)
    {
      v38 = (void *)(*(uint64_t (**)(void))((*v27 & *v37) + 0x308))();

      if (v38)
      {
        objc_msgSend(v38, sel_zoomScale);

      }
    }
  }
  swift_getKeyPath();
  v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  v40 = transform.a;
  v29(v22, v28, v18);
  v41 = specialized Capsule<>.isTextBox.getter();
  v108 = *(void (**)(char *, uint64_t))(v19 + 8);
  v108(v22, v18);
  if ((v41 & 1) != 0)
  {
    v42 = *(void **)((char *)v1 + direct field offset for ShapeView._textBoxView);
    if (v42)
    {
      v43 = v42;
      specialized TextBoxView.selectionCoordinateSpace.getter((__int128 *)&transform);
      v125.origin.x = 0.0;
      v125.origin.y = 0.0;
      v125.size.width = 1.0;
      v125.size.height = 1.0;
      v44 = CGPathCreateWithRect(v125, &transform);

      v45 = v110;
LABEL_31:
      v108(v45, v18);
      return v44;
    }
  }
  v46 = sqrt(b * b + a * a);
  v47 = round(v46 * v40);
  v48 = (uint64_t)v101;
  v45 = v110;
  Capsule<>.root.getter();
  v49 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v22, v28, v18);
  MEMORY[0x1E0C80A78](v49, v50);
  *((_QWORD *)&tx - 4) = v100;
  *((_QWORD *)&tx - 3) = v39;
  *((_QWORD *)&tx - 2) = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v108(v22, v18);
  v119 = transform;
  Shape.pathAndLineEnds(in:scale:)(&v119, (uint64_t)&transform, v46);
  v51 = transform.a;
  v52 = transform.b;
  c = transform.c;
  ty = transform.ty;
  tx = transform.tx;
  d = transform.d;
  v55 = v121;
  v56 = v122;
  v57 = v123;
  outlined destroy of PKStrokeProperties(v48, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v58 = one-time initialization token for defaultMiterLimit;
  v59 = (const CGPath *)*(id *)&v51;
  v60 = v58 == -1;
  v61 = (char *)v39;
  if (!v60)
    swift_once();
  v113 = 0x3FF0000000000000;
  v114 = 0;
  v115 = 0;
  v116 = 0x3FF0000000000000;
  v117 = 0;
  v118 = 0;
  v62 = (void *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
  swift_getKeyPath();
  v63 = v102;
  v101 = v61;
  Capsule<>.subscript.getter();
  swift_release();
  v64 = v104;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v63, v64);
  v65 = (unsigned int *)MEMORY[0x1E0C9B8A0];
  v66 = (unsigned int *)MEMORY[0x1E0C9B898];
  v67 = v109;
  v68 = v105;
  v100 = v62;
  if ((LOBYTE(v121) & 1) != 0)
  {
    v69 = v107;
    v70 = *(void (**)(char *, _QWORD, uint64_t))(v107 + 104);
    v70(v105, *MEMORY[0x1E0C9B8A0], v109);
    v71 = v106;
    v70(v106, *v66, v67);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0C9B8A8], MEMORY[0x1E0C9B8B0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    LOBYTE(v70) = *(_QWORD *)&transform.a == v111;
    v72 = *(void (**)(char *, uint64_t))(v69 + 8);
    v72(v71, v67);
    result = CGPathCreateCopyByUnioningPath(v59, (CGPathRef)v62, (BOOL)v70);
    if (!result)
    {
      __break(1u);
      goto LABEL_33;
    }
    v74 = result;

    v72(v68, v67);
    v45 = v110;
    v65 = (unsigned int *)MEMORY[0x1E0C9B8A0];
  }
  else
  {

    v74 = v62;
  }
  swift_getKeyPath();
  v44 = v74;
  Capsule<>.subscript.getter();
  swift_release();
  if ((LOBYTE(transform.b) & 1) != 0)
  {
    a_low = 1;
  }
  else
  {
    a_low = LOBYTE(transform.a);
    if (!LOBYTE(transform.a))
      goto LABEL_23;
  }
  LOBYTE(v111) = a_low;
  v76 = LineEnd.path(from:to:strokeWidth:)(v52, c, ty, v55, v47);
  if (v76)
  {
    v77 = (const CGPath *)v76;
    v78 = *v65;
    v79 = v107;
    v80 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 104);
    v81 = v99;
    v80(v99, v78, v67);
    v82 = v106;
    v80(v106, *MEMORY[0x1E0C9B898], v67);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0C9B8A8], MEMORY[0x1E0C9B8B0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    v67 = v109;
    dispatch thunk of RawRepresentable.rawValue.getter();
    LOBYTE(v80) = *(_QWORD *)&transform.a == v111;
    v83 = *(void (**)(char *, uint64_t))(v79 + 8);
    v83(v82, v67);
    result = CGPathCreateCopyByUnioningPath(v44, v77, (BOOL)v80);
    if (result)
    {
      v84 = result;

      v83(v81, v67);
      v44 = v84;
      v45 = v110;
      v65 = (unsigned int *)MEMORY[0x1E0C9B8A0];
      goto LABEL_24;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_23:

LABEL_24:
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  if ((LOBYTE(transform.b) & 1) != 0)
  {
    v85 = 1;
  }
  else
  {
    v85 = LOBYTE(transform.a);
    if (!LOBYTE(transform.a))
    {
LABEL_30:

      goto LABEL_31;
    }
  }
  LOBYTE(v111) = v85;
  v86 = LineEnd.path(from:to:strokeWidth:)(d, tx, v56, v57, v47);
  if (!v86)
    goto LABEL_30;
  v87 = (const CGPath *)v86;
  v88 = *v65;
  v89 = v107;
  v90 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 104);
  v91 = v98;
  v90(v98, v88, v67);
  v92 = v106;
  v90(v106, *MEMORY[0x1E0C9B898], v67);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0C9B8A8], MEMORY[0x1E0C9B8B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  v93 = v109;
  dispatch thunk of RawRepresentable.rawValue.getter();
  LOBYTE(v90) = *(_QWORD *)&transform.a == v111;
  v94 = *(void (**)(char *, uint64_t))(v89 + 8);
  v94(v92, v93);
  result = CGPathCreateCopyByUnioningPath(v44, v87, (BOOL)v90);
  if (result)
  {
    v95 = result;

    v94(v91, v93);
    v44 = v95;
    v45 = v110;
    goto LABEL_31;
  }
LABEL_34:
  __break(1u);
  return result;
}

Swift::Void __swiftcall ShapeView.updateShapeLayer()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  double b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  char *v58;
  uint64_t (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  CGFloat v65;
  CGFloat v66;
  double v67;
  double v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  double v75;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  double v82;
  double v83;
  char *v84;
  CGFloat v85;
  id v86;
  id v87;
  void *v88;
  id v89;
  id v90;
  char *v91;
  double v92;
  id v93;
  id v94;
  id v95;
  void (*v96)(char *, char *, uint64_t);
  double v97;
  void (*v98)(char *, uint64_t);
  id v99;
  void (*v100)(char *, char *, uint64_t);
  id v101;
  char *v102;
  id v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t);
  int v110;
  id v111;
  char *v112;
  void (*v113)(char *, char *, uint64_t);
  char *v114;
  void (*v115)(char *, uint64_t);
  double v116;
  char *v117;
  CGFloat v118;
  id v119;
  id v120;
  void *v121;
  CGColor *v122;
  CGColorRef CopyWithAlpha;
  id v124;
  id v125;
  char **KeyPath;
  id v127;
  id v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  double v132;
  double v133;
  id v134;
  char *v135;
  char a_low;
  char *v137;
  CGFloat v138;
  id v139;
  id v140;
  void *v141;
  id v142;
  id v143;
  void *v144;
  id v145;
  char *v146;
  char v147;
  char *v148;
  char *v149;
  uint64_t v150;
  void (*v151)(char *, uint64_t);
  id v152;
  double v153;
  CGFloat v154;
  id v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Class isa;
  char *v161;
  uint64_t v162;
  CGFloat v163;
  double v164;
  double v165;
  double v166;
  id v167;
  id v168;
  id v169;
  void *v170;
  double v171;
  double v172;
  id v173;
  id v174;
  uint64_t v175;
  double v176;
  double v177;
  id v178;
  id v179;
  id v180;
  void *v181;
  char *v182;
  id v183;
  char v184;
  id v185;
  id v186;
  void (*v187)(char *, char *, uint64_t);
  CGFloat v188;
  CGFloat v189;
  uint64_t v190;
  id v191;
  double v192;
  void *v193;
  CGFloat v194;
  id v195;
  id v196;
  double v197;
  double v198;
  double v199;
  CGFloat v200;
  char *v201;
  char *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  CGFloat v206;
  void *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  __int128 v214;
  char *v215;
  char *v216;
  void (**v217)(_QWORD, _QWORD);
  double v218;
  __int128 v219;
  char *v220;
  char *v221;
  char *v222;
  void (*v223)(char *, char *, uint64_t);
  id v224;
  uint64_t v225;
  char v226;
  CGAffineTransform v227;
  double v228;
  double v229;
  double v230;
  CGAffineTransform v231;
  CGAffineTransform v232;
  CGAffineTransform t2;

  v1 = v0;
  v2 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v198 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v6 = COERCE_DOUBLE(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>));
  v217 = *(void (***)(_QWORD, _QWORD))(v6 - 8);
  v218 = *(double *)&v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v216 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v213 = (char *)&v198 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v215 = (char *)&v198 - v14;
  *(_QWORD *)&v219 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v219, v15);
  v223 = (void (*)(char *, char *, uint64_t))((char *)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v198 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v198 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v205 = (char *)&v198 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v198 - v31;
  MEMORY[0x1E0C80A78](v33, v34);
  v201 = (char *)&v198 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v204 = (char *)&v198 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v221 = (char *)&v198 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v222 = (char *)&v198 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v220 = (char *)&v198 - v47;
  v48 = (void *)objc_opt_self();
  objc_msgSend(v48, sel_begin);
  v207 = v48;
  objc_msgSend(v48, sel_setDisableActions_, 1);
  v49 = ShapeView.groupLayer.getter();
  objc_msgSend(v49, sel_setAllowsGroupOpacity_, 1);

  v50 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v211 = v2;
  v212 = v5;
  v209 = v25;
  v210 = v21;
  v202 = v32;
  if (v50)
  {
    v51 = (void *)v50;
    AnyCanvasElementView.paperBoundsTransform()(&v232);

    a = v232.a;
    b = v232.b;
    c = v232.c;
    d = v232.d;
    tx = v232.tx;
    ty = v232.ty;
  }
  else
  {
    d = 1.0;
    ty = 0.0;
    tx = 0.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v58 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v59 = *(uint64_t (**)(char *, char *, uint64_t))(v18 + 16);
  v60 = v220;
  v61 = v59(v220, v58, v17);
  v224 = v1;
  MEMORY[0x1E0C80A78](v61, v62);
  *((_QWORD *)&v198 - 4) = v219;
  v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  *((_QWORD *)&v198 - 3) = v63;
  *((_QWORD *)&v198 - 2) = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v64 = *(void (**)(char *, uint64_t))(v18 + 8);
  v64(v60, v17);
  t2.a = a;
  t2.b = b;
  t2.c = c;
  t2.d = d;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v231, &v227, &t2);
  v219 = *(_OWORD *)&v231.a;
  v214 = *(_OWORD *)&v231.c;
  v65 = v231.tx;
  v66 = v231.ty;
  objc_msgSend(v224, sel_frame);
  CGAffineTransformMakeTranslation(&v227, -v67, -v68);
  v69 = *(_OWORD *)&v227.a;
  v70 = *(_OWORD *)&v227.c;
  v71 = *(_OWORD *)&v227.tx;
  *(_OWORD *)&v227.a = v219;
  *(_OWORD *)&v227.c = v214;
  v227.tx = v65;
  v227.ty = v66;
  *(_OWORD *)&t2.a = v69;
  *(_OWORD *)&t2.c = v70;
  *(_OWORD *)&t2.tx = v71;
  CGAffineTransformConcat(&v231, &v227, &t2);
  t2 = v231;
  v59(v60, v58, v17);
  v72 = (uint64_t)v223;
  Capsule<>.root.getter();
  v73 = v60;
  v74 = v64;
  v64(v73, v17);
  v75 = sqrt(b * b + a * a);
  Shape.pathAndLineEnds(in:scale:)(&t2, (uint64_t)&v227, v75);
  v76 = v227.a;
  v78 = v227.b;
  v77 = v227.c;
  v79 = v227.d;
  v80 = v227.tx;
  v81 = v227.ty;
  v198 = v228;
  v82 = v229;
  v83 = v230;
  outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v84 = v222;
  v223 = (void (*)(char *, char *, uint64_t))v59;
  v59(v222, v58, v17);
  swift_getKeyPath();
  *(_QWORD *)&v219 = v63;
  Capsule<>.subscript.getter();
  swift_release();
  v74(v84, v17);
  v85 = v227.a;
  v222 = v58;
  v206 = v76;
  v199 = v81;
  v200 = v77;
  if (*(_QWORD *)&v227.a)
  {
    v86 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v227.a);
    v87 = objc_msgSend(v224, sel_traitCollection);
    objc_msgSend(v87, sel_userInterfaceStyle);

    v88 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    v89 = ShapeView.shapeLayer.getter();
    v90 = objc_msgSend(v88, (SEL)0x1F2734BC8);
    objc_msgSend(v89, sel_setFillColor_, v90);

    v58 = v222;
  }
  else
  {
    v90 = ShapeView.shapeLayer.getter();
    objc_msgSend(v90, sel_setFillColor_, 0);
  }

  v91 = v220;
  v223(v220, v58, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v74(v91, v17);
  v92 = v75 * v227.a;
  v93 = ShapeView.shapeLayer.getter();
  objc_msgSend(v93, sel_setLineWidth_, v92);

  v94 = ShapeView.startLineEndLayer.getter();
  objc_msgSend(v94, sel_setLineWidth_, v92);

  v95 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v95, sel_setLineWidth_, v92);

  v96 = v223;
  v223(v91, v58, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v74(v91, v17);
  v97 = v227.a;
  v98 = v74;
  v99 = ShapeView.startLineEndLayer.getter();
  v96(v91, v58, v17);
  v100 = v96;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v98(v91, v17);
  v231.a = v227.a;
  LOBYTE(v231.b) = LOBYTE(v227.b);
  v225 = 0;
  v226 = 0;
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  objc_msgSend(v99, sel_setHidden_, static CRExtensible.== infix(_:_:)() & 1);

  v101 = ShapeView.endLineEndLayer.getter();
  v96(v91, v222, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v98(v91, v17);
  v231.a = v227.a;
  LOBYTE(v231.b) = LOBYTE(v227.b);
  v225 = 0;
  v226 = 0;
  v102 = v222;
  objc_msgSend(v101, sel_setHidden_, static CRExtensible.== infix(_:_:)() & 1);

  v103 = ShapeView.shapeLayer.getter();
  v104 = v221;
  v105 = v102;
  v100(v221, v102, v17);
  swift_getKeyPath();
  v106 = (uint64_t)v215;
  Capsule<>.subscript.getter();
  swift_release();
  v221 = (char *)v98;
  v98(v104, v17);
  v107 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  v108 = *(_QWORD *)(v107 - 8);
  v109 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
  v110 = v109(v106, 1, v107);
  v203 = v108;
  *(_QWORD *)&v214 = v109;
  v208 = v107;
  if (v110 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v106, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v111 = (id)*MEMORY[0x1E0CD3008];
  }
  else
  {
    v111 = TaggedValue_2<>.caLineCap.getter();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v106, v107);
  }
  objc_msgSend(v103, sel_setLineCap_, v111);

  v112 = v220;
  v113 = v223;
  v223(v220, v105, v17);
  swift_getKeyPath();
  v114 = v216;
  Capsule<>.subscript.getter();
  swift_release();
  v115 = (void (*)(char *, uint64_t))v221;
  ((void (*)(char *, uint64_t))v221)(v112, v17);
  v116 = v218;
  TaggedValue_9.tagged3.getter();
  ((void (**)(char *, _QWORD))v217)[1](v114, *(_QWORD *)&v116);
  if ((LOBYTE(v228) & 1) != 0)
    goto LABEL_17;
  v117 = v204;
  v113(v204, v105, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v115(v117, v17);
  v118 = v227.a;
  if (!*(_QWORD *)&v227.a)
  {
    v113 = v223;
    v115 = (void (*)(char *, uint64_t))v221;
LABEL_17:
    v137 = v205;
    v113(v205, v105, v17);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v115(v137, v17);
    v138 = v227.a;
    if (*(_QWORD *)&v227.a)
    {
      v139 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v227.a);
      v140 = objc_msgSend(v224, sel_traitCollection);
      objc_msgSend(v140, sel_userInterfaceStyle);

      v141 = (void *)static PKInkingTool.convertColor(_:from:to:)();
      v142 = ShapeView.shapeLayer.getter();
      v143 = objc_msgSend(v141, sel_CGColor);
      objc_msgSend(v142, sel_setStrokeColor_, v143);

      v130 = v222;
      v131 = (uint64_t)v213;
    }
    else
    {
      v143 = ShapeView.shapeLayer.getter();
      objc_msgSend(v143, sel_setStrokeColor_, 0);
      v131 = (uint64_t)v213;
      v130 = v105;
    }
    goto LABEL_27;
  }
  v119 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v227.a);
  v120 = objc_msgSend(v224, sel_traitCollection);
  objc_msgSend(v120, sel_userInterfaceStyle);

  v121 = (void *)static PKInkingTool.convertColor(_:from:to:)();
  v122 = (CGColor *)objc_msgSend(v121, sel_CGColor);
  CopyWithAlpha = CGColorCreateCopyWithAlpha(v122, 1.0);

  v124 = ShapeView.shapeLayer.getter();
  objc_msgSend(v124, sel_setStrokeColor_, CopyWithAlpha);

  v125 = ShapeView.startLineEndLayer.getter();
  KeyPath = &selRef_setCanvasWidth_;
  objc_msgSend(v125, sel_setFillColor_, CopyWithAlpha);

  v127 = ShapeView.endLineEndLayer.getter();
  objc_msgSend(v127, sel_setFillColor_, CopyWithAlpha);

  v128 = *(id *)&v118;
  v129 = CGColorRef.components.getter();
  if (!v129)
    goto LABEL_67;
  v130 = v222;
  v131 = (uint64_t)v213;
  if (*(_QWORD *)(v129 + 16) < 4uLL)
    goto LABEL_64;
  v217 = (void (**)(_QWORD, _QWORD))CopyWithAlpha;
  v218 = v75;
  v132 = v97;
  v133 = *(double *)(v129 + 56);

  swift_bridgeObjectRelease();
  v134 = ShapeView.startLineEndLayer.getter();
  v135 = v201;
  v223(v201, v130, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  ((void (*)(char *, uint64_t))v221)(v135, v17);
  if ((LOBYTE(v227.b) & 1) != 0)
  {
    a_low = 1;
LABEL_21:
    LOBYTE(v231.a) = a_low;
    v144 = (void *)LineEnd.path(from:to:strokeWidth:)(v78, v200, v199, v198, v92);
    goto LABEL_22;
  }
  a_low = LOBYTE(v227.a);
  if (LOBYTE(v227.a))
    goto LABEL_21;
  v144 = 0;
LABEL_22:
  objc_msgSend(v134, sel_setPath_, v144);

  v145 = ShapeView.endLineEndLayer.getter();
  v146 = v202;
  v223(v202, v130, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  ((void (*)(char *, uint64_t))v221)(v146, v17);
  if ((LOBYTE(v227.b) & 1) != 0)
  {
    v147 = 1;
  }
  else
  {
    v147 = LOBYTE(v227.a);
    if (!LOBYTE(v227.a))
    {
      v143 = 0;
      goto LABEL_26;
    }
  }
  LOBYTE(v231.a) = v147;
  v143 = (id)LineEnd.path(from:to:strokeWidth:)(v79, v80, v82, v83, v92);
LABEL_26:
  v97 = v132 * v133;
  objc_msgSend(v145, sel_setPath_, v143);

  v112 = v220;
  v75 = v218;
LABEL_27:

  v148 = v209;
  v149 = v130;
  v223(v209, v130, v17);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  ((void (*)(char *, uint64_t))v221)(v148, v17);
  v150 = v208;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v214)(v131, 1, v208) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v131, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
    v151 = (void (*)(char *, uint64_t))v221;
    v152 = v224;
  }
  else
  {
    TaggedValue_2.tagged1.getter();
    v153 = v227.a;
    v154 = v227.b;
    (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v131, v150);
    v151 = (void (*)(char *, uint64_t))v221;
    v152 = v224;
    if (v154 != 0.0)
    {
      if (*(_QWORD *)(*(_QWORD *)&v154 + 16))
      {
        v155 = ShapeView.shapeLayer.getter();
        objc_msgSend(v155, sel_setLineDashPhase_, v92 * v153);

        v156 = ShapeView.shapeLayer.getter();
        v157 = *(_QWORD *)(*(_QWORD *)&v154 + 16);
        if (v157)
        {
          *(_QWORD *)&v227.a = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray.reserveCapacity(_:)();
          v158 = 0;
          do
          {
            v159 = v158 + 1;
            CGFloat._bridgeToObjectiveC()();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v158 = v159;
          }
          while (v157 != v159);
          swift_bridgeObjectRelease();
          v152 = v224;
          v151 = (void (*)(char *, uint64_t))v221;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v156, sel_setLineDashPattern_, isa);

        v149 = v222;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  v161 = v210;
  v223(v210, v149, v17);
  KeyPath = (char **)swift_getKeyPath();
  v162 = (uint64_t)v212;
  Capsule<>.subscript.getter();
  swift_release();
  v151(v161, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties(v162, (uint64_t (*)(_QWORD))type metadata accessor for ShapeSecondaryProperties);
  v163 = v227.d;
  if (!*(_QWORD *)&v227.d)
  {
LABEL_45:
    v178 = ShapeView.groupLayer.getter();
    v179 = objc_msgSend(v178, sel_superlayer);

    v180 = objc_msgSend(v152, sel_layer);
    v181 = v180;
    v182 = v222;
    if (v179)
    {
      if (v180)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for CALayer);
        v183 = v179;
        v184 = static NSObject.== infix(_:_:)();

        v182 = v222;
        if ((v184 & 1) != 0)
          goto LABEL_54;
        goto LABEL_53;
      }
      v181 = v179;
    }
    else if (!v180)
    {
      goto LABEL_54;
    }

LABEL_53:
    v185 = objc_msgSend(v152, sel_layer);
    v186 = ShapeView.groupLayer.getter();
    objc_msgSend(v185, sel_addSublayer_, v186);

LABEL_54:
    v187 = v223;
    v223(v112, v182, v17);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v151(v112, v17);
    v188 = v227.a;

    if (v188 != 0.0)
      goto LABEL_57;
    v187(v112, v182, v17);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v151(v112, v17);
    v189 = v227.a;

    if (v189 != 0.0
      || (v187(v112, v182, v17),
          v190 = specialized Capsule<>.isTextBox.getter(),
          v151(v112, v17),
          (v190 & 1) != 0))
    {
LABEL_57:
      v191 = ShapeView.groupLayer.getter();
      *(float *)&v192 = v97;
      objc_msgSend(v191, sel_setOpacity_, v192);
LABEL_58:
      v194 = v206;
      v193 = v207;

      v195 = ShapeView.shapeLayer.getter();
      objc_msgSend(v195, sel_setPath_, *(_QWORD *)&v194);

      objc_msgSend(v193, sel_commit);
      return;
    }
    KeyPath = (char **)ShapeView.shapeLayer.getter();
    if (one-time initialization token for resizeInvisibleShapeBorderColor == -1)
    {
LABEL_60:
      objc_msgSend(KeyPath, sel_setStrokeColor_, static UIConstants.resizeInvisibleShapeBorderColor);

      v196 = ShapeView.shapeLayer.getter();
      objc_msgSend(v196, sel_setLineWidth_, 1.0);

      v191 = ShapeView.groupLayer.getter();
      LODWORD(v197) = 1.0;
      objc_msgSend(v191, sel_setOpacity_, v197);
      goto LABEL_58;
    }
LABEL_65:
    swift_once();
    goto LABEL_60;
  }
  v164 = v227.b;
  v165 = v227.c;
  v166 = v227.a;
  v167 = ShapeView.groupLayer.getter();
  objc_msgSend(v167, sel_setShadowOffset_, v166, v164);

  v168 = ShapeView.groupLayer.getter();
  v169 = objc_msgSend(v152, sel_window);
  if (v169)
  {
    v170 = v169;
    KeyPath = (char **)objc_msgSend(v169, sel_screen);

    objc_msgSend(KeyPath, sel_scale);
    v172 = v171;

  }
  else
  {
    v172 = 1.0;
  }
  objc_msgSend(v168, sel_setShadowRadius_, v75 * v165 / v172);

  v173 = ShapeView.groupLayer.getter();
  v174 = *(id *)&v163;
  v175 = CGColorRef.components.getter();
  if (v175)
  {
    if (*(_QWORD *)(v175 + 16) >= 4uLL)
    {
      v176 = *(double *)(v175 + 56);

      swift_bridgeObjectRelease();
      *(float *)&v177 = v176;
      objc_msgSend(v173, sel_setShadowOpacity_, v177);

      goto LABEL_45;
    }
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  __break(1u);
LABEL_67:
  __break(1u);
}

uint64_t key path getter for Shape.strokeStyle : Shape()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for Shape.strokeStyle : Shape(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v15 - v12;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v15 - v12, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for Shape();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

void @objc ShapeView.layoutSubviews()(void *a1)
{
  char *v1;
  void *v2;
  objc_super v3;

  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for ShapeView();
  v1 = (char *)v3.receiver;
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  ShapeView.updateShapeLayer()();
  v2 = *(void **)&v1[direct field offset for ShapeView._textBoxView];
  if (v2)
    objc_msgSend(v2, sel_layoutSubviews, v3.receiver, v3.super_class);
  specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();

}

void @objc ShapeView.setNeedsDisplay()(char *a1)
{
  void *v2;
  char *v3;
  objc_super v4;

  v2 = *(void **)&a1[direct field offset for ShapeView._textBoxView];
  v3 = a1;
  if (v2)
    objc_msgSend(v2, sel_setNeedsDisplay);
  v4.receiver = a1;
  v4.super_class = (Class)type metadata accessor for ShapeView();
  objc_msgSendSuper2(&v4, sel_setNeedsDisplay);

}

void __swiftcall ShapeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  _QWORD *v3;
  double y;
  double x;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  objc_class *v32;
  void (*v33)(char *, Class, uint64_t);
  void (*v34)(char *, uint64_t);
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  id v44;
  char v45;
  id v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  id v52;
  void (*v53)(char *, Class, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  Class isa;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  CGPoint v70;
  CGRect v71;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v6 = type metadata accessor for CGPathFillRule();
  v60 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v59 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v55 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v56, v12);
  v58 = (uint64_t)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v53 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v53 - v25;
  v27 = ShapeView.shapeLayer.getter();
  v28 = objc_msgSend(v27, sel_path);

  v62 = v28;
  if (v28)
  {
    v54 = v6;
    v29 = *(void **)((char *)v3 + direct field offset for ShapeView._textBoxView);
    if (v29)
    {
      v30 = v29;
      objc_msgSend(v3, sel_convertPoint_toView_, v30, x, y);
      v31 = objc_msgSend(v30, sel_hitTest_withEvent_, isa);

      if (v31)
      {

        return;
      }
    }
    v32 = (objc_class *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x380));
    swift_beginAccess();
    v33 = *(void (**)(char *, Class, uint64_t))(v19 + 16);
    isa = v32;
    v53 = v33;
    v33(v26, v32, v18);
    LOBYTE(v32) = specialized Capsule<>.isTextBox.getter();
    v34 = *(void (**)(char *, uint64_t))(v19 + 8);
    v34(v26, v18);
    if ((v32 & 1) != 0)
    {
      objc_msgSend(v3, sel_bounds);
      v70.x = x;
      v70.y = y;
      if (CGRectContainsPoint(v71, v70))
      {

        v35 = v3;
        return;
      }
    }
    v36 = v3;
    v53(v22, isa, v18);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    Capsule<>.root.getter();
    v34(v22, v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
    CRRegister.wrappedValue.getter();
    v37 = v57;
    TaggedValue_9.tagged3.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v37);
    v38 = v69;
    v39 = v58;
    outlined init with copy of Shape((uint64_t)v17, v58);
    if (v38 == 1)
    {
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      v40 = v63;
      outlined destroy of PKStrokeProperties(v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of PKStrokeProperties((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      if (!v40)
      {
        v53(v26, isa, v18);
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        v34(v26, v18);
        v42 = v59;
        v41 = v60;
        v43 = v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v59, *MEMORY[0x1E0C9B8A0], v54);
        v63 = 0x3FF0000000000000;
        v64 = 0;
        v65 = 0;
        v66 = 0x3FF0000000000000;
        v67 = 0;
        v68 = 0;
        v44 = v62;
        v45 = CGPathRef.contains(_:using:transform:)();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);

        if ((v45 & 1) == 0)
          return;
LABEL_17:
        v52 = v36;
        return;
      }
    }
    else
    {
      outlined destroy of PKStrokeProperties(v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of PKStrokeProperties((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    }
    if (one-time initialization token for defaultMiterLimit != -1)
      swift_once();
    v63 = 0x3FF0000000000000;
    v64 = 0;
    v65 = 0;
    v66 = 0x3FF0000000000000;
    v67 = 0;
    v68 = 0;
    v46 = v62;
    v47 = (void *)CGPathRef.copy(strokingWithWidth:lineCap:lineJoin:miterLimit:transform:)();
    v49 = v59;
    v48 = v60;
    v50 = v54;
    (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v59, *MEMORY[0x1E0C9B8A0], v54);
    v51 = CGPathRef.contains(_:using:transform:)();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
    if ((v51 & 1) != 0)
      goto LABEL_17;
  }
}

id @objc ShapeView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  ShapeView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

Swift::Bool __swiftcall ShapeView.intersects(_:canvasBounds:)(__C::CGRect _, __C::CGRect canvasBounds)
{
  char *v2;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  double v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  id v25;
  const CGPath *v26;
  const CGPath *v27;
  void (*v28)(char *, _QWORD, uint64_t);
  void (*v29)(char *, uint64_t);
  Swift::Bool v30;
  void *v31;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v36;
  CGFloat v37;
  double v38;
  double v39;
  CGFloat ty;
  CGFloat tx;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGAffineTransform v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  height = _.size.height;
  width = _.size.width;
  y = _.origin.y;
  x = _.origin.x;
  v7 = type metadata accessor for CGPathFillRule();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&ty - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&ty - v15;
  v17 = &v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement];
  v18 = (void *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement], v14);
  if (!v18)
  {
    v31 = (void *)MEMORY[0x1DF0E666C](v17);
    if (v31)
    {

      ShapeView.selectionCoordinateSpace.getter(&v45.a);
      a = v45.a;
      b = v45.b;
      c = v45.c;
      d = v45.d;
      v44 = v45;
      tx = v45.tx;
      ty = v45.ty;
      v49.origin.x = 0.0;
      v49.origin.y = 0.0;
      v49.size.width = 1.0;
      v49.size.height = 1.0;
      v50 = CGRectApplyAffineTransform(v49, &v44);
      v53.origin.x = x;
      v53.origin.y = y;
      v53.size.width = width;
      v53.size.height = height;
      if (!CGRectIntersectsRect(v50, v53))
        return 0;
      v44.a = a;
      v44.b = b;
      v44.c = c;
      v44.d = d;
      v44.tx = tx;
      v44.ty = ty;
      CGAffineTransformInvert(&v43, &v44);
      v44 = v43;
      v51.origin.x = x;
      v51.origin.y = y;
      v51.size.width = width;
      v51.size.height = height;
      v52 = CGRectApplyAffineTransform(v51, &v44);
      v36 = 0.0;
      v37 = 0.0;
      v38 = 1.0;
      v39 = 1.0;
    }
    else
    {
      objc_msgSend(v2, sel_bounds);
      v36 = x;
      v37 = y;
      v38 = width;
      v39 = height;
    }
    return CGRectIntersectsRect(v52, *(CGRect *)&v36);
  }

  objc_msgSend(v2, sel_frame);
  CGAffineTransformMakeTranslation(&v45, -v19, -v20);
  v46.origin.x = x;
  v46.origin.y = y;
  v46.size.width = width;
  v46.size.height = height;
  v47 = CGRectApplyAffineTransform(v46, &v45);
  v21 = v47.origin.x;
  v22 = v47.origin.y;
  v23 = v47.size.width;
  v24 = v47.size.height;
  v25 = ShapeView.shapeLayer.getter();
  v26 = (const CGPath *)objc_msgSend(v25, sel_path);

  if (!v26)
    return 0;
  v48.origin.x = v21;
  v48.origin.y = v22;
  v48.size.width = v23;
  v48.size.height = v24;
  v27 = CGPathCreateWithRect(v48, 0);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v28(v16, *MEMORY[0x1E0C9B8A0], v7);
  v28(v11, *MEMORY[0x1E0C9B898], v7);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0C9B8A8], MEMORY[0x1E0C9B8B0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  LOBYTE(v28) = *(_QWORD *)&v45.a == *(_QWORD *)&v44.a;
  v29 = *(void (**)(char *, uint64_t))(v8 + 8);
  v29(v11, v7);
  v30 = CGPathIntersectsPath(v26, v27, (BOOL)v28);

  v29(v16, v7);
  return v30;
}

Swift::Void __swiftcall ShapeView.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v1)
  {
    v2 = (_QWORD *)v1;
    ShapeView.updateShapeLayer()();
    v5 = v2;
    ShapeView.setupTextBoxIfNeeded(canvas:)(v2);

    v3 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
    if (v3)
    {
      v4 = v3;
      specialized TextBoxView.updateUI()();

    }
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    specialized CanvasElementView.updateUI()();

  }
}

void ShapeView.isSelected.didset()
{
  char *v0;
  char *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (v2)
  {
    v3 = (_QWORD *)v2;
    ShapeView.updateShapeLayer()();
    v4 = v3;
    ShapeView.setupTextBoxIfNeeded(canvas:)(v3);

    v5 = *(void **)&v0[direct field offset for ShapeView._textBoxView];
    if (v5)
    {
      v6 = v5;
      specialized TextBoxView.updateUI()();

    }
    specialized AppearanceStreamViewSupport.updateAppearanceStreamView()();
    specialized CanvasElementView.updateUI()();

  }
  v7 = *(void **)&v1[direct field offset for ShapeView._textBoxView];
  if (v7)
  {
    v8 = v7;
    specialized TextBoxView.updateSelected()();

  }
  if (v1[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected] == 1
    && v1[direct field offset for ShapeView.showsSignaturePopover] == 1)
  {
    objc_msgSend(v1, sel_becomeFirstResponder);
  }
}

void ShapeView.isSelected.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  ShapeView.isSelected.didset();
}

uint64_t ShapeView.uneditedModelCoordinateSpace.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v33 - v15;
  v17 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
  swift_beginAccess();
  v18 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v18(v16, v17, v8);
  v19 = specialized Capsule<>.isTextBox.getter();
  v34 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  result = v34(v16, v8);
  if ((v19 & 1) != 0
    && (v21 = *(_QWORD *)((char *)v2 + direct field offset for ShapeView._textBoxView)) != 0
    && (v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace),
        (v22[6] & 1) == 0))
  {
    v32 = v22[4];
    v31 = v22[5];
    v30 = v22[2];
    v29 = v22[3];
    v28 = *v22;
    v27 = v22[1];
  }
  else
  {
    v23 = (uint64_t)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x388);
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v23, (uint64_t)v7, &demangling cache variable for type metadata for Capsule<Shape>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      v18(v12, v17, v8);
      v24 = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Shape>?);
    }
    else
    {
      v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    }
    v26 = v34;
    MEMORY[0x1E0C80A78](v24, v25);
    *(&v33 - 4) = type metadata accessor for Shape();
    *(&v33 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    *(&v33 - 2) = (uint64_t)&protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    result = v26(v12, v8);
    v28 = v35;
    v27 = v36;
    v30 = v37;
    v29 = v38;
    v32 = v39;
    v31 = v40;
  }
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v30;
  a1[3] = v29;
  a1[4] = v32;
  a1[5] = v31;
  return result;
}

void ShapeView.selectionCoordinateSpace.getter(CGFloat *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  void *v20;
  CGMutablePathRef Mutable;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGFloat v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGFloat v41;
  double v42;
  unint64_t v43;
  unint64_t v44;
  CGFloat x;
  CGFloat y;
  CGFloat height;
  CGFloat width;
  double MidX;
  double MidY;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat *v62;
  __int128 v63;
  __int128 v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat *v69;
  CGAffineTransform v70;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform transform;
  char v74;
  CGRect PathBoundingBox;
  CGRect v76;

  v2 = v1;
  v69 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v68 = *(double *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v63 - v14;
  v16 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v17(v15, v16, v7);
  v18 = specialized Capsule<>.isTextBox.getter();
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v15, v7);
  if ((v18 & 1) != 0)
  {
    v20 = *(void **)((char *)v2 + direct field offset for ShapeView._textBoxView);
    if (v20)
    {
      Mutable = v20;
      specialized TextBoxView.selectionCoordinateSpace.getter((__int128 *)&transform);
      a = transform.a;
      b = transform.b;
      c = transform.c;
      d = transform.d;
      tx = transform.tx;
      ty = transform.ty;
LABEL_7:

      goto LABEL_8;
    }
  }
  v17(v11, v16, v7);
  swift_getKeyPath();
  v67 = COERCE_DOUBLE(lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape));
  Capsule<>.subscript.getter();
  swift_release();
  v19(v11, v7);
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)&v68 + 8))(v6, v3);
  if ((v74 & 1) == 0)
  {
    v33 = transform.tx;
    v32 = transform.ty;
    v35 = transform.c;
    v34 = transform.d;
    v37 = transform.a;
    v36 = transform.b;
    v38 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v15, v16, v7);
    MEMORY[0x1E0C80A78](v38, v39);
    v40 = type metadata accessor for Shape();
    v41 = v67;
    *((_QWORD *)&v63 - 4) = v40;
    *((CGFloat *)&v63 - 3) = v41;
    *((_QWORD *)&v63 - 2) = &protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v19(v15, v7);
    transform = t1;
    v42 = v34 - v36 * 0.25 - v32 * 0.25;
    *(double *)&v43 = v35 - v37 * 0.25 - v33 * 0.25 + v35 - v37 * 0.25 - v33 * 0.25;
    *(double *)&v44 = v42 + v42;
    Mutable = CGPathCreateMutable();
    CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v36, *(unint64_t *)&v37), &transform);
    CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v32, *(unint64_t *)&v33), (CGPoint)__PAIR128__(v44, v43), &transform);
    PathBoundingBox = CGPathGetPathBoundingBox(Mutable);
    x = PathBoundingBox.origin.x;
    y = PathBoundingBox.origin.y;
    height = PathBoundingBox.size.height;
    v66 = PathBoundingBox.size.height;
    v68 = PathBoundingBox.origin.x - PathBoundingBox.size.width * 0.0;
    v67 = PathBoundingBox.origin.y - PathBoundingBox.size.height * 0.0;
    width = PathBoundingBox.size.width;
    v65 = PathBoundingBox.size.width;
    MidX = CGRectGetMidX(PathBoundingBox);
    v76.origin.x = x;
    v76.origin.y = y;
    v76.size.width = width;
    v76.size.height = height;
    MidY = CGRectGetMidY(v76);
    CGAffineTransformMakeRotation(&t1, 0.0);
    v64 = *(_OWORD *)&t1.a;
    v63 = *(_OWORD *)&t1.c;
    v51 = -MidY;
    v52 = t1.tx;
    v53 = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -MidX, v51);
    v54 = t1.a;
    v55 = t1.b;
    v56 = t1.c;
    v57 = t1.d;
    v58 = t1.tx;
    v59 = t1.ty;
    *(_OWORD *)&t2.a = v64;
    *(_OWORD *)&t2.c = v63;
    t2.tx = v52;
    t2.ty = v53;
    CGAffineTransformConcat(&v70, &t1, &t2);
    v64 = *(_OWORD *)&v70.a;
    v63 = *(_OWORD *)&v70.c;
    v60 = v70.tx;
    v61 = v70.ty;
    t1.a = v54;
    t1.b = v55;
    t1.c = v56;
    t1.d = v57;
    t1.tx = v58;
    t1.ty = v59;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.a = v64;
    *(_OWORD *)&t1.c = v63;
    t1.tx = v60;
    t1.ty = v61;
    CGAffineTransformConcat(&v70, &t1, &t2);
    t1.a = v65;
    t1.c = 0.0;
    t1.b = 0.0;
    t1.d = v66;
    t1.tx = v68;
    t1.ty = v67;
    t2 = v70;
    CGAffineTransformConcat(&v70, &t1, &t2);
    a = v70.a;
    b = v70.b;
    c = v70.c;
    d = v70.d;
    tx = v70.tx;
    ty = v70.ty;
    goto LABEL_7;
  }
  v28 = ((uint64_t (*)(char *, char *, uint64_t))v17)(v15, v16, v7);
  MEMORY[0x1E0C80A78](v28, v29);
  v30 = type metadata accessor for Shape();
  v31 = v67;
  *((_QWORD *)&v63 - 4) = v30;
  *((CGFloat *)&v63 - 3) = v31;
  *((_QWORD *)&v63 - 2) = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v19(v15, v7);
  a = transform.a;
  b = transform.b;
  c = transform.c;
  d = transform.d;
  tx = transform.tx;
  ty = transform.ty;
LABEL_8:
  v62 = v69;
  *v69 = a;
  v62[1] = b;
  v62[2] = c;
  v62[3] = d;
  v62[4] = tx;
  v62[5] = ty;
}

uint64_t ShapeView.wantsRectangularSelection.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE v13[56];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  TaggedValue_9.tagged3.getter();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  return v13[48];
}

void *ShapeView.canvasElementImage.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, uint64_t);
  CGFloat v17;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  CGFloat v24;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  char *v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  CGFloat *v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  __int128 v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  CGAffineTransform v65;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v68;
  double v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1, v2);
  v62 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  v64 = *(_QWORD *)(v5 + 64);
  v6 = v5;
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v60 - v12;
  v14 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v15 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v63 = v6;
  v15(v13, v14, v4);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v13, v4);
  v17 = v69;
  v15(v9, v14, v4);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v16(v9, v4);
  x = v68.origin.x;
  y = v68.origin.y;
  width = v68.size.width;
  height = v68.size.height;
  MidX = CGRectGetMidX(v68);
  v70.origin.x = x;
  v70.origin.y = y;
  v70.size.width = width;
  v70.size.height = height;
  MidY = CGRectGetMidY(v70);
  CGAffineTransformMakeRotation(&t1, v17);
  v61 = *(_OWORD *)&t1.a;
  v60 = *(_OWORD *)&t1.c;
  v24 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v24);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v31 = t1.tx;
  v32 = t1.ty;
  *(_OWORD *)&t2.a = v61;
  *(_OWORD *)&t2.c = v60;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v65, &t1, &t2);
  v61 = *(_OWORD *)&v65.a;
  v60 = *(_OWORD *)&v65.c;
  v33 = v65.tx;
  v34 = v65.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v61;
  *(_OWORD *)&t1.c = v60;
  t1.tx = v33;
  t1.ty = v34;
  CGAffineTransformConcat(&v65, &t1, &t2);
  v61 = *(_OWORD *)&v65.a;
  v60 = *(_OWORD *)&v65.c;
  v35 = v65.tx;
  v36 = v65.ty;
  v37 = v13;
  v15(v13, v14, v4);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v16(v13, v4);
  v71.origin.x = t2.a;
  v71.origin.y = t2.b;
  v71.size.width = t2.c;
  v71.size.height = t2.d;
  *(_OWORD *)&t1.a = v61;
  *(_OWORD *)&t1.c = v60;
  t1.tx = v35;
  t1.ty = v36;
  v72 = CGRectApplyAffineTransform(v71, &t1);
  v38 = v72.origin.x;
  v39 = v72.origin.y;
  v40 = v72.size.width;
  v41 = v72.size.height;
  v42 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v42, sel_scale);
  v44 = v43;

  type metadata accessor for ImageRenderer();
  v45 = (CGFloat *)swift_allocObject();
  v45[2] = v40;
  v45[3] = v41;
  *((_QWORD *)v45 + 4) = v44;
  v46 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v45);
  *(_QWORD *)&v61 = dispatch_semaphore_create(0);
  type metadata accessor for SendableImage #1 in ShapeView.canvasElementImage.getter();
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 0;
  v48 = (uint64_t)v62;
  static TaskPriority.userInitiated.getter();
  v49 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
  v15(v13, v14, v4);
  v50 = v63;
  v51 = (*(unsigned __int8 *)(v63 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v52 = (v64 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = (char *)swift_allocObject();
  *((_QWORD *)v53 + 2) = 0;
  *((_QWORD *)v53 + 3) = 0;
  *((_QWORD *)v53 + 4) = v47;
  *((_QWORD *)v53 + 5) = v46;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v53[v51], v37, v4);
  v54 = (CGFloat *)&v53[v52];
  *v54 = v38;
  v54[1] = v39;
  v54[2] = v40;
  v54[3] = v41;
  v55 = (void *)v61;
  *(_QWORD *)&v53[(v52 + 39) & 0xFFFFFFFFFFFFFFF8] = v61;
  swift_retain();
  swift_retain();
  v56 = v55;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in ShapeView.canvasElementImage.getter, (uint64_t)v53);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for TaskPriority?);
  OS_dispatch_semaphore.wait()();

  swift_release();
  v57 = *(void **)(v47 + 16);
  v58 = v57;
  swift_release();
  return v57;
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 + 112) = a11;
  *(double *)(v11 + 96) = a3;
  *(double *)(v11 + 104) = a4;
  *(double *)(v11 + 80) = a1;
  *(double *)(v11 + 88) = a2;
  *(_QWORD *)(v11 + 64) = a9;
  *(_QWORD *)(v11 + 72) = a10;
  *(_QWORD *)(v11 + 56) = a8;
  type metadata accessor for Shape();
  *(_QWORD *)(v11 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v5 = *(_OWORD *)(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.root.getter();
  *(_OWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v1;
  *(_BYTE *)(v0 + 48) = 0;
  *(_QWORD *)&v5 = (char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                 + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v3;
  *v3 = v0;
  v3[1] = closure #1 in ShapeView.canvasElementImage.getter;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))v5)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), v0 + 16, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 136);

  OS_dispatch_semaphore.signal()();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ShapeView.canvasElementImage.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  return swift_task_switch();
}

Swift::OpaquePointer_optional __swiftcall ShapeView.pasteboardRepresentation()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::Bool v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::OpaquePointer_optional result;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v38 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v37 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for UTType();
  v4 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v14 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v14(v12, v13, v8);
  v15 = specialized Capsule<>.isTextBox.getter();
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v12, v8);
  if ((v15 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    static UTType.plainText.getter();
    v18 = UTType.identifier.getter();
    v36 = v1;
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v39);
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 40) = v20;
    v14(v12, v13, v8);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v21 = v37;
    Capsule<>.subscript.getter();
    swift_release();
    v16(v12, v8);
    v22 = v36;
    v23 = (void *)CRAttributedString.attributedString.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v22);
    v24 = objc_msgSend(v23, sel_string);

    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = v25;
    *(_QWORD *)(inited + 56) = v27;
LABEL_5:
    v30 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
    goto LABEL_6;
  }
  v28 = v4;
  v29 = v39;
  v30 = ShapeView.canvasElementImage.getter();
  if (v30)
  {
    v32 = v30;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    static UTType.png.getter();
    v33 = UTType.identifier.getter();
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v29);
    *(_QWORD *)(inited + 32) = v33;
    *(_QWORD *)(inited + 40) = v35;
    *(_QWORD *)(inited + 72) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    *(_QWORD *)(inited + 48) = v32;
    goto LABEL_5;
  }
LABEL_6:
  result.value._rawValue = v30;
  result.is_nil = v31;
  return result;
}

uint64_t key path getter for Shape.text : Shape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for Shape.text : Shape(uint64_t a1)
{
  void (*v2)(uint64_t *, char);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v2 = Shape.text.modify(v7);
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v4, a1, v5);
  return ((uint64_t (*)(_QWORD *, _QWORD))v2)(v7, 0);
}

id @objc ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  v9 = specialized ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)();

  return v9;
}

id ShapeView.dragInteractionPreviewForLifting(item:session:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  CGFloat v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  CGFloat v15;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  id v36;
  __int128 v38;
  __int128 v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  double v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v7, v2);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v8 = v43;
  objc_msgSend(v1, sel_bounds);
  x = v44.origin.x;
  y = v44.origin.y;
  width = v44.size.width;
  height = v44.size.height;
  MidX = CGRectGetMidX(v44);
  v45.origin.x = x;
  v45.origin.y = y;
  v45.size.width = width;
  v45.size.height = height;
  MidY = CGRectGetMidY(v45);
  CGAffineTransformMakeRotation(&t1, v8);
  v39 = *(_OWORD *)&t1.a;
  v38 = *(_OWORD *)&t1.c;
  v15 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v15);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v22 = t1.tx;
  v23 = t1.ty;
  *(_OWORD *)&t2.a = v39;
  *(_OWORD *)&t2.c = v38;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  v39 = *(_OWORD *)&v40.a;
  v38 = *(_OWORD *)&v40.c;
  v24 = v40.tx;
  v25 = v40.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v22;
  t1.ty = v23;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v39;
  *(_OWORD *)&t1.c = v38;
  t1.tx = v24;
  t1.ty = v25;
  CGAffineTransformConcat(&v40, &t1, &t2);
  v39 = *(_OWORD *)&v40.a;
  v38 = *(_OWORD *)&v40.c;
  v26 = v40.tx;
  v27 = v40.ty;
  objc_msgSend(v1, sel_bounds);
  *(_OWORD *)&t1.a = v39;
  *(_OWORD *)&t1.c = v38;
  t1.tx = v26;
  t1.ty = v27;
  v47 = CGRectApplyAffineTransform(v46, &t1);
  v28 = v47.origin.x;
  v29 = v47.origin.y;
  v30 = v47.size.width;
  v31 = v47.size.height;
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
  if (one-time initialization token for shapePreviewCornerRadius != -1)
    swift_once();
  v33 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_cornerRadius_, v28, v29, v30, v31, *(double *)&static UIConstants.shapePreviewCornerRadius);
  objc_msgSend(v32, sel_setVisiblePath_, v33);

  v34 = objc_allocWithZone(MEMORY[0x1E0DC3D88]);
  v35 = v1;
  v36 = objc_msgSend(v34, sel_initWithView_parameters_, v35, v32);

  return v36;
}

Swift::String_optional __swiftcall ShapeView.accessibilityDescription()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  unint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  double v28;
  void *v29;
  void *v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  char *v34;
  double v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *object;
  Swift::String v41;
  Swift::String_optional v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String_optional result;
  char *v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  Swift::String v59;
  char *v60;
  uint64_t countAndFlagsBits;
  void *v62;
  double v63;
  __int128 v64;
  double v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v55 - v8;
  v10 = specialized CanvasElementView.accessibilityDescription()();
  if (v11)
  {
    v60 = v5;
    v62 = v11;
    v63 = *(double *)&v10;
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v67._countAndFlagsBits = 0xD00000000000004CLL;
    v67._object = (void *)0x80000001DDF54DB0;
    v12._countAndFlagsBits = 0x3A7974696361704FLL;
    v12._object = (void *)0xEE002566302E2520;
    v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v13.value._object = (void *)0xEB00000000656C62;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v67)._countAndFlagsBits;
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v16 = swift_allocObject();
    v64 = xmmword_1DDF32CF0;
    *(_OWORD *)(v16 + 16) = xmmword_1DDF32CF0;
    v17 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
    swift_beginAccess();
    v57 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    v55 = v17;
    v57(v9, v17, v1);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    Capsule<>.subscript.getter();
    swift_release();
    v56 = *(void (**)(char *, uint64_t))(v2 + 8);
    v56(v9, v1);
    v18 = v65 * 100.0;
    *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
    v19 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(_QWORD *)(v16 + 64) = v19;
    *(double *)(v16 + 32) = v18;
    v59._countAndFlagsBits = static String.localizedStringWithFormat(_:_:)();
    v59._object = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0xD000000000000012;
    v68._object = (void *)0x80000001DDF54E20;
    v21._object = (void *)0x80000001DDF54E00;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0xD000000000000044;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v68);
    countAndFlagsBits = v15;
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = v64;
    v25 = v17;
    v26 = v57;
    v57(v9, v25, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v27 = v56;
    v56(v9, v1);
    v28 = v65;
    *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v24 + 64) = v19;
    *(double *)(v24 + 32) = v28;
    v58 = static String.localizedStringWithFormat(_:_:)();
    v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0xD000000000000010;
    v69._object = (void *)0x80000001DDF54E90;
    v31._object = (void *)0x80000001DDF54E70;
    v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v32.value._object = (void *)0xEB00000000656C62;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v69._countAndFlagsBits = 0xD000000000000044;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v69);
    v34 = v60;
    v26(v60, v55, v1);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v27(v34, v1);
    v35 = v65;
    if (v65 == 0.0)
    {
      v70._countAndFlagsBits = 0xD000000000000020;
      v70._object = (void *)0x80000001DDF54EE0;
      v41._countAndFlagsBits = 0x726F6C6F63206F4ELL;
      v41._object = (void *)0xE800000000000000;
      v42.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v42.value._object = (void *)0xEB00000000656C62;
      v43._countAndFlagsBits = 0;
      v43._object = (void *)0xE000000000000000;
      v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, paperKitBundle, v43, v70);
      v38 = v44._countAndFlagsBits;
      object = v44._object;
    }
    else
    {
      v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, *(_QWORD *)&v65);

      v37 = objc_msgSend(v36, sel_accessibilityName);
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      object = v39;

    }
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = v64;
    *(_QWORD *)(v45 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v45 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v45 + 32) = v38;
    *(_QWORD *)(v45 + 40) = object;
    v46 = static String.localizedStringWithFormat(_:_:)();
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v65 = v63;
    v66 = v62;
    v49._countAndFlagsBits = 8236;
    v49._object = (void *)0xE200000000000000;
    String.append(_:)(v49);
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 8236;
    v50._object = (void *)0xE200000000000000;
    String.append(_:)(v50);
    v51._countAndFlagsBits = v58;
    v51._object = v30;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 8236;
    v52._object = (void *)0xE200000000000000;
    String.append(_:)(v52);
    v53._countAndFlagsBits = v46;
    v53._object = v48;
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)&v65;
    v11 = v66;
  }
  result.value._object = v11;
  result.value._countAndFlagsBits = v10;
  return result;
}

void *ShapeView.textBoxView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
  v2 = v1;
  return v1;
}

id ShapeView.isElementFirstResponder.getter()
{
  char *v0;
  uint64_t v1;

  v1 = *(_QWORD *)&v0[direct field offset for ShapeView._textBoxView];
  if (v1 && (v0 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView)) == 0)
    return 0;
  else
    return objc_msgSend(v0, sel_isFirstResponder);
}

uint64_t ShapeView.resizeHandles.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v21;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v21 - v9;
  v11 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v12(v10, v11, v2);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v10, v2);
  if ((v21 & 4) != 0 || (v21 & 0x80) != 0)
    v14 = MEMORY[0x1E0DEE9E8];
  else
    v14 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of ShapeView.resizeHandles.getter);
  v15 = *(char **)((char *)v1 + direct field offset for ShapeView._textBoxView);
  if (v15)
  {
    v16 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v16)
    {
      v17 = v15;
      if ((objc_msgSend(v16, sel_isFirstResponder) & 1) != 0)
      {

        swift_bridgeObjectRelease();
        return MEMORY[0x1E0DEE9E8];
      }
    }
    else
    {
      v18 = v15;
    }
    v12(v6, v11, v2);
    v19 = specialized Capsule<>.isTextBox.getter();
    v13(v6, v2);
    if ((v19 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v14 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of ShapeView.resizeHandles.getter);
    }

  }
  return v14;
}

Swift::Void __swiftcall ShapeView.updateFrame()()
{
  uint64_t v0;
  void *v1;

  specialized CanvasElementView.updateFrame()();
  v1 = *(void **)(v0 + direct field offset for ShapeView._textBoxView);
  if (v1)
    objc_msgSend(v1, sel_setNeedsLayout);
}

id ShapeView.didZoom(in:)()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + direct field offset for ShapeView._textBoxView);
  if (result)
    return objc_msgSend(result, sel_setNeedsLayout);
  return result;
}

Swift::Void __swiftcall ShapeView.beginLiveEdit()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  void *v19;
  CGPathRef v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - v8;
  v10 = *(void **)((char *)v0 + direct field offset for ShapeView._textBoxView);
  if (v10)
  {
    v11 = v10;
    specialized TextBoxView.beginLiveEdit()();

  }
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<Shape>?);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<Shape>?);
  if (v16 == 1)
  {
    v17 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v5, v17, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v5, 0, 1, v14);
    swift_beginAccess();
    outlined assign with copy of Capsule<Shape>?((uint64_t)v5, v13);
    swift_endAccess();
    v18 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v18)
    {
      v19 = (void *)v18;
      specialized LiveEditable.didChangeLiveEditing()();

    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<Shape>?);
    v20 = ShapeView.modelHitTestPath.getter();
    v21 = *(_QWORD *)((*v12 & *v1) + 0x3A8);
    v22 = *(void **)((char *)v1 + v21);
    *(_QWORD *)((char *)v1 + v21) = v20;

  }
}

Swift::Void __swiftcall ShapeView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  uint64_t v2;
  char *v5;
  _QWORD *v6;
  void *v7;
  uint64_t (*v8)(void);
  char *v9;
  char *v10;

  v5 = *(char **)(v2 + direct field offset for ShapeView._textBoxView);
  if (v5)
  {
    v6 = (_QWORD *)MEMORY[0x1DF0E666C](&v5[direct field offset for TextBoxView.canvasElementView]);
    if (v6)
    {
      v7 = v6;
      v8 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x1E0);
      v9 = v5;
      LOBYTE(v8) = v8();

      if ((v8 & 1) != 0)
      {
        v10 = &v9[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace];
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)v10 = 0u;
        v10[48] = 1;
      }

    }
  }
  specialized CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
}

void ShapeView.__ivar_destroyer()
{
  uint64_t v0;

}

id ShapeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShapeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc ShapeView.__ivar_destroyer(uint64_t a1)
{

}

uint64_t type metadata accessor for ShapeView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ShapeView;
  if (!type metadata singleton initialization cache for ShapeView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ShapeView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ShapeView()
{
  return type metadata accessor for ShapeView();
}

uint64_t type metadata accessor for SendableImage #1 in ShapeView.canvasElementImage.getter()
{
  return objc_opt_self();
}

uint64_t specialized Capsule<>.isTextBox.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v0 = type metadata accessor for CRKeyPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v20 - v7;
  v21 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v21, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v20 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v24[0]) = 5;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v8, v0);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v22, (uint64_t)v24);
    v16 = v25;
    v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 80))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ShapeTextBox?);
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  a3(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a4, a3, a5);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

BOOL specialized closure #1 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  _QWORD *v8;
  double v9;
  _QWORD *v10;
  UIAccessibilityNotifications v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[32];
  double v23;
  _QWORD v24[6];
  Swift::String v25;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x88))();
  v7 = v5 != 0;
  if (v5)
  {
    v8 = (_QWORD *)v5;
    v9 = MEMORY[0x1E0C80A78](v5, v6);
    (*(void (**)(_QWORD, _QWORD, uint64_t (*)(), double))((*v4 & *v10) + 0x468))(0, 0, partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), v9);
    v11 = *MEMORY[0x1E0DC44C8];
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v25._countAndFlagsBits = 0xD000000000000040;
    v25._object = (void *)0x80000001DDF54D60;
    v12._object = (void *)0x80000001DDF54D40;
    v12._countAndFlagsBits = 0xD000000000000016;
    v13.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v13.value._object = (void *)0xEB00000000656C62;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, paperKitBundle, v14, v25);
    (*(void (**)(_QWORD *__return_ptr))((*v4 & *v3) + 0x1A8))(v24);
    CGAffineTransform.decompose(initialRotation:)((uint64_t)v22, 0.0);
    v15 = v23 * 180.0 / 3.14159265;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1DDF32CF0;
    *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEF040];
    *(_QWORD *)(v16 + 64) = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(double *)(v16 + 32) = v15;
    v17 = static String.localizedStringWithFormat(_:_:)();
    v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = (void *)MEMORY[0x1DF0E41AC](v17, v19);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v11, v20);

    v3 = v8;
  }

  return v7;
}

BOOL specialized closure #1 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  void *v12;
  UIAccessibilityNotifications v13;
  uint64_t v14;
  void *v15;
  _QWORD *v17;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = (_QWORD *)MEMORY[0x1DF0E666C](v5);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x88))();
  v11 = v9 != 0;
  if (v9)
  {
    v12 = (void *)v9;
    v17 = (_QWORD *)MEMORY[0x1E0C80A78](v9, v10);
    (*(void (**)(_QWORD, _QWORD, uint64_t))((*v8 & *v17) + 0x468))(0, 0, a2);
    v13 = *MEMORY[0x1E0DC44C8];
    v14 = a3(0);
    v15 = (void *)MEMORY[0x1DF0E41AC](v14);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v13, v15);

    v7 = v12;
  }

  return v11;
}

uint64_t specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(_QWORD *a1, _QWORD *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Image();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v46 = v14;
  v47 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v21;
  CGFloat tx;
  CGFloat ty;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  _QWORD *v34;
  void (*v35)(_BYTE *, _QWORD);
  _OWORD *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void (*v42)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v43;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  _BYTE v50[32];
  CGAffineTransform v51;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v54;
  CGRect v55;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Shape();
  v47 = v13;
  v48 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v49 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v54.origin.x = t1.a;
  v54.origin.y = t1.b;
  v54.size.width = t1.c;
  v54.size.height = t1.d;
  MidX = CGRectGetMidX(v54);
  v55.origin.x = a;
  v55.origin.y = b;
  v55.size.width = c;
  v55.size.height = d;
  MidY = CGRectGetMidY(v55);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v46 = *(_OWORD *)&t1.a;
  v45 = *(_OWORD *)&t1.c;
  v21 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v21);
  v24 = t1.a;
  v25 = t1.b;
  v26 = t1.c;
  v27 = t1.d;
  v28 = t1.tx;
  v29 = t1.ty;
  *(_OWORD *)&t2.a = v46;
  *(_OWORD *)&t2.c = v45;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v51, &t1, &t2);
  v46 = *(_OWORD *)&v51.a;
  v45 = *(_OWORD *)&v51.c;
  v30 = v51.tx;
  v31 = v51.ty;
  t1.a = v24;
  t1.b = v25;
  t1.c = v26;
  t1.d = v27;
  t1.tx = v28;
  t1.ty = v29;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v46;
  *(_OWORD *)&t1.c = v45;
  t1.tx = v30;
  t1.ty = v31;
  CGAffineTransformConcat(&v51, &t1, &t2);
  v46 = *(_OWORD *)&v51.a;
  v45 = *(_OWORD *)&v51.c;
  v32 = v51.tx;
  v33 = v51.ty;
  v34 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v35 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1B8))(v50);
  v37 = v36;
  v38 = v36[1];
  v39 = v36[2];
  *(_OWORD *)&t1.a = *v36;
  *(_OWORD *)&t1.c = v38;
  *(_OWORD *)&t1.tx = v39;
  *(_OWORD *)&t2.a = v46;
  *(_OWORD *)&t2.c = v45;
  t2.tx = v32;
  t2.ty = v33;
  CGAffineTransformConcat(&v51, &t1, &t2);
  v40 = *(_OWORD *)&v51.c;
  v41 = *(_OWORD *)&v51.tx;
  *v37 = *(_OWORD *)&v51.a;
  v37[1] = v40;
  v37[2] = v41;
  v35(v50, 0);
  v12(v10, v11, v6);
  LOBYTE(t1.a) = 3;
  v42 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*v34 & *a2) + 0x538);
  v43 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v42(v10, &t1, v13, v43);
  LOBYTE(t1.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v34 & *a2) + 0x518))(&t1);
  return ((uint64_t (*)(char *, uint64_t))v14)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for TextBox();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v46 = v14;
  v47 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for GraphElement();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v46 = v14;
  v47 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Link();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v46 = v14;
  v47 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Signature();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v46 = v14;
  v47 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Paper();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v46 = v14;
  v47 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for PaperDocumentPage();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  v46 = v14;
  v47 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat v22;
  CGFloat tx;
  CGFloat ty;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  _QWORD *v35;
  void (*v36)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v37;
  __int128 v39;
  __int128 v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _UNKNOWN **v44;
  uint64_t v45;
  uint64_t v46;
  _UNKNOWN **v47;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v51;
  CGRect v52;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for UnknownCanvasElement();
  v45 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  v46 = v14;
  v47 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v51.origin.x = t1.a;
  v51.origin.y = t1.b;
  v51.size.width = t1.c;
  v51.size.height = t1.d;
  MidX = CGRectGetMidX(v51);
  v52.origin.x = a;
  v52.origin.y = b;
  v52.size.width = c;
  v52.size.height = d;
  MidY = CGRectGetMidY(v52);
  CGAffineTransformMakeRotation(&t1, a3 * 3.14159265 / 180.0);
  v40 = *(_OWORD *)&t1.a;
  v39 = *(_OWORD *)&t1.c;
  v22 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v22);
  v25 = t1.a;
  v26 = t1.b;
  v27 = t1.c;
  v28 = t1.d;
  v29 = t1.tx;
  v30 = t1.ty;
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v31 = v48.tx;
  v32 = v48.ty;
  t1.a = v25;
  t1.b = v26;
  t1.c = v27;
  t1.d = v28;
  t1.tx = v29;
  t1.ty = v30;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v39;
  t1.tx = v31;
  t1.ty = v32;
  CGAffineTransformConcat(&v48, &t1, &t2);
  v40 = *(_OWORD *)&v48.a;
  v39 = *(_OWORD *)&v48.c;
  v33 = v48.tx;
  v34 = v48.ty;
  v12(v10, v11, v6);
  v42 = v13;
  v43 = v14;
  v44 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v40;
  *(_OWORD *)&t2.c = v39;
  t2.tx = v33;
  t2.ty = v34;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v36 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  v36(v10, &t2, v13, v37);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v35 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

BOOL specialized closure #2 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  void *v12;
  UIAccessibilityNotifications v13;
  uint64_t v14;
  void *v15;
  _QWORD *v17;

  v5 = a1 + 16;
  swift_beginAccess();
  v6 = (_QWORD *)MEMORY[0x1DF0E666C](v5);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x88))();
  v11 = v9 != 0;
  if (v9)
  {
    v12 = (void *)v9;
    v17 = (_QWORD *)MEMORY[0x1E0C80A78](v9, v10);
    (*(void (**)(_QWORD, _QWORD, uint64_t))((*v8 & *v17) + 0x468))(0, 0, a2);
    v13 = *MEMORY[0x1E0DC44C8];
    v14 = a3(1);
    v15 = (void *)MEMORY[0x1DF0E41AC](v14);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v13, v15);

    v7 = v12;
  }

  return v11;
}

uint64_t specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(_QWORD *a1, _QWORD *a2, CGFloat a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Image();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v35 = v14;
  v36 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v23;
  void (*v24)(_BYTE *, _QWORD);
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void (*v31)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _UNKNOWN **v38;
  CGAffineTransform v39;
  _BYTE v40[32];
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v43;
  CGRect v44;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Shape();
  v36 = v13;
  v37 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v38 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v43.origin.x = t1.a;
  v43.origin.y = t1.b;
  v43.size.width = t1.c;
  v43.size.height = t1.d;
  MidX = CGRectGetMidX(v43);
  v44.origin.x = a;
  v44.origin.y = b;
  v44.size.width = c;
  v44.size.height = d;
  MidY = CGRectGetMidY(v44);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v35 = *(_OWORD *)&t2.a;
  v34 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v23 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v24 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x1B8))(v40);
  v26 = v25;
  v27 = v25[1];
  v28 = v25[2];
  *(_OWORD *)&t1.a = *v25;
  *(_OWORD *)&t1.c = v27;
  *(_OWORD *)&t1.tx = v28;
  *(_OWORD *)&t2.a = v35;
  *(_OWORD *)&t2.c = v34;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  v29 = *(_OWORD *)&v39.c;
  v30 = *(_OWORD *)&v39.tx;
  *v26 = *(_OWORD *)&v39.a;
  v26[1] = v29;
  v26[2] = v30;
  v24(v40, 0);
  v12(v10, v11, v6);
  LOBYTE(t1.a) = 3;
  v31 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*v23 & *a2) + 0x538);
  v32 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v31(v10, &t1, v13, v32);
  LOBYTE(t1.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v23 & *a2) + 0x518))(&t1);
  return ((uint64_t (*)(char *, uint64_t))v14)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for TextBox();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v35 = v14;
  v36 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for GraphElement();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v35 = v14;
  v36 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Link();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v35 = v14;
  v36 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Signature();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v35 = v14;
  v36 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Paper();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v35 = v14;
  v36 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for PaperDocumentPage();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  v35 = v14;
  v36 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double MidX;
  double MidY;
  CGFloat tx;
  CGFloat ty;
  _QWORD *v24;
  void (*v25)(char *, CGAffineTransform *, uint64_t, uint64_t);
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN **v36;
  CGAffineTransform v37;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v40;
  CGRect v41;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1;
  v11 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for UnknownCanvasElement();
  v34 = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  v35 = v14;
  v36 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v40.origin.x = t1.a;
  v40.origin.y = t1.b;
  v40.size.width = t1.c;
  v40.size.height = t1.d;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a;
  v41.origin.y = b;
  v41.size.width = c;
  v41.size.height = d;
  MidY = CGRectGetMidY(v41);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  CGAffineTransformScale(&t2, &t1, a3, a3);
  t1 = t2;
  CGAffineTransformTranslate(&t2, &t1, -(MidX * (a3 + -1.0)), -(MidY * (a3 + -1.0)));
  v29 = *(_OWORD *)&t2.a;
  v28 = *(_OWORD *)&t2.c;
  tx = t2.tx;
  ty = t2.ty;
  v12(v10, v11, v6);
  v31 = v13;
  v32 = v14;
  v33 = &protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15(v10, v6);
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v28;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v37, &t1, &t2);
  t1 = v37;
  specialized CanvasElementView.modelCoordinateSpace.setter((uint64_t)&t1);
  v12(v10, v11, v6);
  LOBYTE(t2.a) = 3;
  v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v25 = *(void (**)(char *, CGAffineTransform *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x538);
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  v25(v10, &t2, v13, v26);
  LOBYTE(t2.a) = 3;
  (*(void (**)(CGAffineTransform *))((*v24 & *a2) + 0x518))(&t2);
  return ((uint64_t (*)(char *, uint64_t))v15)(v10, v6);
}

BOOL specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  UIAccessibilityNotifications v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v2);
  v4 = v3;
  if (v3)
  {
    v5 = *MEMORY[0x1E0DC44C8];
    v6 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4A0))();
    if (v7)
    {
      v8 = (void *)MEMORY[0x1DF0E41AC](v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = 0;
    }
    UIAccessibilityPostNotification(v5, v8);
    swift_unknownObjectRelease();

  }
  return v4 != 0;
}

BOOL specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  void *v5;
  UIAccessibilityNotifications v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = (void *)MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = *MEMORY[0x1E0DC44C8];
    v7 = a3(2);
    v9 = v8;
    v10 = a3(1);
    v12 = v11;
    v13 = a3(0);
    v15 = v14;
    v16._countAndFlagsBits = 8236;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = v10;
    v17._object = v12;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 8236;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = v13;
    v19._object = v15;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20 = (void *)MEMORY[0x1DF0E41AC](v7, v9);
    swift_bridgeObjectRelease();
    UIAccessibilityPostNotification(v6, v20);

  }
  return v5 != 0;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

_QWORD *specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Signature>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<TextBox>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Link>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<PaperDocumentPage>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

{
  return specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(a1, a2, a3, &demangling cache variable for type metadata for Capsule<UnknownCanvasElement>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
}

_QWORD *specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:)(char *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  _QWORD *v26;
  char *v27;
  _QWORD *v28;
  void (*v29)(char *, uint64_t);
  Swift::String v30;
  Swift::String_optional v31;
  Swift::String v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t countAndFlagsBits;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;

  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v44 = *(_QWORD *)(v15 - 8);
  v45 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&countAndFlagsBits - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = MEMORY[0x1E0C80A78](v19, v21);
  v24 = (char *)&countAndFlagsBits - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_shapeLayer) = 0;
  *(_QWORD *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer) = 0;
  *(_QWORD *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer) = 0;
  *(_QWORD *)(v7 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer) = 0;
  *(_BYTE *)(v7 + direct field offset for ShapeView.showsSignaturePopover) = 0;
  *(_BYTE *)(v7 + direct field offset for ShapeView.analytics_inputSource) = 68;
  *(_BYTE *)(v7 + direct field offset for ShapeView.analytics_documentType) = 68;
  *(_QWORD *)(v7 + direct field offset for ShapeView._textBoxView) = 0;
  *(_QWORD *)(v7 + direct field offset for ShapeView.appearanceStreamView) = 0;
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  v25(v24, (uint64_t)a1, v19, v22);
  v26 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v24, a2, a3, (uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), a4, a5, a6, a7);
  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  v27 = (char *)v26 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v26) + 0x380);
  swift_beginAccess();
  ((void (*)(char *, char *, uint64_t))v25)(v24, v27, v19);
  v28 = v26;
  LOBYTE(v26) = specialized Capsule<>.isTextBox.getter();
  v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v24, v19);

  if ((v26 & 1) == 0)
  {
    objc_msgSend(v28, sel_setIsAccessibilityElement_, 1);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v46._object = (void *)0x80000001DDF54A60;
    v30._countAndFlagsBits = 0x4025206570616853;
    v30._object = (void *)0xE800000000000000;
    v31.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v31.value._object = (void *)0xEB00000000656C62;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v46._countAndFlagsBits = 0xD00000000000005FLL;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, paperKitBundle, v32, v46)._countAndFlagsBits;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_1DDF32CF0;
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v34 = v28;
    Capsule<>.subscript.getter();
    swift_release();
    v35 = TaggedValue_9<>.localizedName.getter();
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v45);
    *(_QWORD *)(v33 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v33 + 32) = v35;
    *(_QWORD *)(v33 + 40) = v37;
    v38 = static String.localizedStringWithFormat(_:_:)();
    v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = (void *)MEMORY[0x1DF0E41AC](v38, v40);
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setAccessibilityLabel_, v41);

  }
  v29(a1, v19);
  return v28;
}

_QWORD *specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t (*a5)(void), double a6, double a7, double a8, double a9)
{
  char *v9;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;

  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v19 = &v9[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x388)];
  v20 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
  *(_QWORD *)&v9[*(_QWORD *)((*v18 & *(_QWORD *)v9) + 0x390)] = 0;
  *(_QWORD *)&v9[*(_QWORD *)((*v18 & *(_QWORD *)v9) + 0x398)] = 0;
  *(_QWORD *)&v9[*(_QWORD *)((*v18 & *(_QWORD *)v9) + 0x3A0)] = 0;
  *(_QWORD *)&v9[*(_QWORD *)((*v18 & *(_QWORD *)v9) + 0x3A8)] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v9[*(_QWORD *)((*v18 & *(_QWORD *)v9) + 0x380)], a1, v20);
  v22 = a3;
  v23 = a2;
  v24 = AnyCanvasElementView.init(frame:canvas:parentCanvasElement:)(a2, a3, a6, a7, a8, a9);
  v25 = a5();
  (*(void (**)(uint64_t))((*v18 & *v24) + 0x488))(v25);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v20);
  return v24;
}

_QWORD *specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:showsSignaturePopover:analytics_inputSource:analytics_documentType:)(char *a1, void *a2, char a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  _QWORD *v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD v43[2];
  char *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v44 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_shapeLayer) = 0;
  *(_QWORD *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer) = 0;
  *(_QWORD *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer) = 0;
  *(_QWORD *)(v5 + direct field offset for ShapeView.$__lazy_storage_$_groupLayer) = 0;
  v20 = direct field offset for ShapeView.showsSignaturePopover;
  *(_BYTE *)(v5 + direct field offset for ShapeView.showsSignaturePopover) = 0;
  v21 = direct field offset for ShapeView.analytics_inputSource;
  *(_BYTE *)(v5 + direct field offset for ShapeView.analytics_inputSource) = 68;
  v22 = direct field offset for ShapeView.analytics_documentType;
  *(_BYTE *)(v5 + direct field offset for ShapeView.analytics_documentType) = 68;
  *(_QWORD *)(v5 + direct field offset for ShapeView._textBoxView) = 0;
  *(_QWORD *)(v5 + direct field offset for ShapeView.appearanceStreamView) = 0;
  *(_BYTE *)(v5 + v20) = a3;
  *(_BYTE *)(v5 + v21) = a4;
  *(_BYTE *)(v5 + v22) = a5;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16);
  v23(v19, (uint64_t)a1, v14, v17);
  v24 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v19, a2, 0, (uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>, (uint64_t (*)(void))specialized CanvasElementView.setupAccessibility(), 0.0, 0.0, 0.0, 0.0);
  specialized AppearanceStreamViewSupport.setupAppearanceStreamIfNeeded()();
  v25 = (char *)v24 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v24) + 0x380);
  swift_beginAccess();
  ((void (*)(char *, char *, uint64_t))v23)(v19, v25, v14);
  v26 = v24;
  LOBYTE(v24) = specialized Capsule<>.isTextBox.getter();
  v27 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28 = a1;
  v27(v19, v14);

  if ((v24 & 1) == 0)
  {
    objc_msgSend(v26, sel_setIsAccessibilityElement_, 1);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v47._object = (void *)0x80000001DDF54A60;
    v29._countAndFlagsBits = 0x4025206570616853;
    v29._object = (void *)0xE800000000000000;
    v30.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v30.value._object = (void *)0xEB00000000656C62;
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v47._countAndFlagsBits = 0xD00000000000005FLL;
    v43[1] = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, paperKitBundle, v31, v47)._countAndFlagsBits;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_1DDF32CF0;
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v33 = v26;
    v34 = v44;
    Capsule<>.subscript.getter();
    swift_release();
    v35 = TaggedValue_9<>.localizedName.getter();
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v46);
    *(_QWORD *)(v32 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v32 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v32 + 32) = v35;
    *(_QWORD *)(v32 + 40) = v37;
    v38 = static String.localizedStringWithFormat(_:_:)();
    v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v41 = (void *)MEMORY[0x1DF0E41AC](v38, v40);
    swift_bridgeObjectRelease();
    objc_msgSend(v33, sel_setAccessibilityLabel_, v41);

  }
  v27(v28, v14);
  return v26;
}

uint64_t sub_1DDCD5BDC()
{
  return 24;
}

__n128 sub_1DDCD5BE8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDCD5BFC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

BOOL partial apply for specialized closure #1 in CanvasElementView.setupAccessibility()()
{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #1 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility(), (uint64_t (*)(_QWORD))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

BOOL partial apply for specialized closure #2 in CanvasElementView.setupAccessibility()()
{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v0;

  return specialized closure #2 in CanvasElementView.setupAccessibility()(v0, (uint64_t)partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility(), (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

uint64_t sub_1DDCD5C54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t partial apply for closure #4 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t partial apply for closure #5 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;

  return closure #5 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

uint64_t partial apply for closure #6 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;

  return closure #6 in CanvasElementView.setupAccessibility()(a1, *(uint64_t (**)(double))(v1 + 16));
}

BOOL partial apply for specialized closure #7 in CanvasElementView.setupAccessibility()(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1);
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

{
  uint64_t v1;

  return specialized closure #7 in CanvasElementView.setupAccessibility()(a1, v1, (uint64_t (*)(uint64_t))specialized CanvasElementView.accessibilityDescriptionForAttribute(_:));
}

uint64_t partial apply for specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()()
{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #2 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 16), *(_QWORD **)(v0 + 32), *(CGFloat *)(v0 + 24));
}

uint64_t sub_1DDCD5D14()
{
  return 24;
}

__n128 sub_1DDCD5D20(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()()
{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

{
  uint64_t v0;

  return specialized closure #1 in closure #1 in CanvasElementView.setupAccessibility()(*(_QWORD **)(v0 + 24), *(_QWORD **)(v0 + 32), *(double *)(v0 + 16));
}

uint64_t outlined assign with copy of Capsule<Shape>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDCD5DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + *(int *)(type metadata accessor for Shape() + 52);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1DDCD5E04()
{
  return 24;
}

__n128 sub_1DDCD5E10(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for Shape, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, &lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t)&protocol conformance descriptor for Signature);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for Link, &lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t)&protocol conformance descriptor for Link);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for TextBox, &lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, &lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t)&protocol conformance descriptor for Image);
}

{
  uint64_t v1;

  return specialized closure #1 in CanvasElementView.modelCoordinateSpace.setter(a1, *(_QWORD *)(v1 + 16), (uint64_t (*)(uint64_t))type metadata accessor for Paper, (unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t partial apply for closure #1 in ShapeView.subscript.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ShapeView.subscript.setter(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDCD5E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ShapeView.canvasElementImage.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFF8;
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = v1[5];
  v12 = (uint64_t)v1 + v5;
  v13 = (double *)((char *)v1 + v6);
  v14 = *v13;
  v15 = v13[1];
  v16 = v13[2];
  v17 = v13[3];
  v18 = *(_QWORD *)((char *)v1 + v7);
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in ShapeView.canvasElementImage.getter(v14, v15, v16, v17, a1, v8, v9, v10, v11, v12, v18);
}

unint64_t lazy protocol witness table accessor for type LineEnd and conformance LineEnd()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LineEnd, &type metadata for LineEnd);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LineEnd, &type metadata for LineEnd);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LineEnd, &type metadata for LineEnd);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LineEnd, &type metadata for LineEnd);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LineEnd and conformance LineEnd;
  if (!lazy protocol witness table cache variable for type LineEnd and conformance LineEnd)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LineEnd, &type metadata for LineEnd);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LineEnd and conformance LineEnd);
  }
  return result;
}

void specialized ShapeView.init(coder:)()
{
  _BYTE *v0;

  *(_QWORD *)&v0[direct field offset for ShapeView.$__lazy_storage_$_shapeLayer] = 0;
  *(_QWORD *)&v0[direct field offset for ShapeView.$__lazy_storage_$_endLineEndLayer] = 0;
  *(_QWORD *)&v0[direct field offset for ShapeView.$__lazy_storage_$_startLineEndLayer] = 0;
  *(_QWORD *)&v0[direct field offset for ShapeView.$__lazy_storage_$_groupLayer] = 0;
  v0[direct field offset for ShapeView.showsSignaturePopover] = 0;
  v0[direct field offset for ShapeView.analytics_inputSource] = 68;
  v0[direct field offset for ShapeView.analytics_documentType] = 68;
  *(_QWORD *)&v0[direct field offset for ShapeView._textBoxView] = 0;
  *(_QWORD *)&v0[direct field offset for ShapeView.appearanceStreamView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized ShapeView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  CGFloat v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  CGFloat v15;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  double v30;
  double v31;
  id v32;
  id v33;
  id v34;
  _QWORD *v35;
  id v36;
  __int128 v38;
  __int128 v39;
  CGAffineTransform v40;
  CGAffineTransform t2;
  CGAffineTransform t1;
  double v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v7, v2);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v8 = v43;
  objc_msgSend(v1, sel_bounds);
  x = v44.origin.x;
  y = v44.origin.y;
  width = v44.size.width;
  height = v44.size.height;
  MidX = CGRectGetMidX(v44);
  v45.origin.x = x;
  v45.origin.y = y;
  v45.size.width = width;
  v45.size.height = height;
  MidY = CGRectGetMidY(v45);
  CGAffineTransformMakeRotation(&t1, v8);
  v39 = *(_OWORD *)&t1.a;
  v38 = *(_OWORD *)&t1.c;
  v15 = -MidY;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -MidX, v15);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v22 = t1.tx;
  v23 = t1.ty;
  *(_OWORD *)&t2.a = v39;
  *(_OWORD *)&t2.c = v38;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v40, &t1, &t2);
  v39 = *(_OWORD *)&v40.a;
  v38 = *(_OWORD *)&v40.c;
  v24 = v40.tx;
  v25 = v40.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v22;
  t1.ty = v23;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v39;
  *(_OWORD *)&t1.c = v38;
  t1.tx = v24;
  t1.ty = v25;
  CGAffineTransformConcat(&v40, &t1, &t2);
  v39 = *(_OWORD *)&v40.a;
  v38 = *(_OWORD *)&v40.c;
  v26 = v40.tx;
  v27 = v40.ty;
  objc_msgSend(v1, sel_bounds);
  *(_OWORD *)&t1.a = v39;
  *(_OWORD *)&t1.c = v38;
  t1.tx = v26;
  t1.ty = v27;
  v47 = CGRectApplyAffineTransform(v46, &t1);
  v28 = v47.origin.x;
  v29 = v47.origin.y;
  v30 = v47.size.width;
  v31 = v47.size.height;
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
  if (one-time initialization token for shapePreviewCornerRadius != -1)
    swift_once();
  v33 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_cornerRadius_, v28, v29, v30, v31, *(double *)&static UIConstants.shapePreviewCornerRadius);
  objc_msgSend(v32, sel_setVisiblePath_, v33);

  v34 = objc_allocWithZone(MEMORY[0x1E0DC3D90]);
  v35 = v1;
  v36 = objc_msgSend(v34, sel_initWithView_parameters_, v35, v32);

  return v36;
}

uint64_t closure #1 in PaperKitPDFPage.annotationFor(id:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PaperKitPDFPage.annotationFor(id:)(a1) & 1;
}

Swift::Void __swiftcall InlineDrawingTextAttachmentView.didMoveToWindow()()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for InlineDrawingTextAttachmentView();
  objc_msgSendSuper2(&v7, sel_didMoveToWindow);
  v1 = objc_msgSend(v0, sel_window);

  v2 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction];
  if (v1)
  {
    if (!v3)
    {
      v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3780]), sel_initWithDelegate_, v0);
      v5 = *(void **)&v0[v2];
      *(_QWORD *)&v0[v2] = v4;

      if (*(_QWORD *)&v0[v2])
        objc_msgSend(v0, sel_addInteraction_);
      else
        __break(1u);
    }
  }
  else if (v3)
  {
    objc_msgSend(v0, sel_removeInteraction_);
    v6 = *(void **)&v0[v2];
    *(_QWORD *)&v0[v2] = 0;

  }
}

uint64_t InlineDrawingTextAttachmentView.acceptedDropLayouts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Layout.Type>);
    v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1DDF33640;
    *(_QWORD *)(v2 + 32) = type metadata accessor for PaperLayout();
    *(_QWORD *)(v2 + 40) = &protocol witness table for PaperLayout;
    *(_QWORD *)(v2 + 48) = type metadata accessor for ImageLayout();
    *(_QWORD *)(v2 + 56) = &protocol witness table for ImageLayout;
    *(_QWORD *)(v2 + 64) = type metadata accessor for LinkLayout();
    *(_QWORD *)(v2 + 72) = &protocol witness table for LinkLayout;
    *(_QWORD *)(v2 + 80) = type metadata accessor for TextBoxLayout();
    *(_QWORD *)(v2 + 88) = &protocol witness table for TextBoxLayout;
    *(_QWORD *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

id InlineDrawingTextAttachmentView.init(frame:drawing:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  PKDrawing *v18;
  void *v19;
  void *v20;
  objc_class *v21;
  id v22;
  objc_super v24;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropInteraction] = 0;
  v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType] = 3;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView____lazy_storage___acceptedDropLayouts] = 0;
  outlined init with copy of PKDrawing?(a1, (uint64_t)v15);
  v16 = type metadata accessor for PKDrawing();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    PKDrawing._bridgeToObjectiveC()(v18);
    v19 = v20;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  v21 = (objc_class *)type metadata accessor for InlineDrawingTextAttachmentView();
  v24.receiver = v6;
  v24.super_class = v21;
  v22 = objc_msgSendSuper2(&v24, sel_initWithFrame_drawing_, v19, a2, a3, a4, a5);

  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for PKDrawing?);
  return v22;
}

id InlineDrawingTextAttachmentView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InlineDrawingTextAttachmentView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InlineDrawingTextAttachmentView()
{
  return objc_opt_self();
}

void specialized InlineDrawingTextAttachmentView.selectionInteractionDidPaste(_:at:in:)(double a1, double a2)
{
  void *v2;
  id v5;
  objc_class *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  Class isa;

  v5 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  v6 = (objc_class *)objc_msgSend(v5, sel_itemProviders);

  isa = v6;
  if (!v6)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (v7 >> 62)
    v8 = _CocoaArrayWrapper.endIndex.getter();
  else
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (v8)
  {
    v9 = objc_msgSend(v2, sel_superview);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      do
      {
        if (v11)
        {

          goto LABEL_14;
        }
        objc_opt_self();
        v11 = (void *)swift_dynamicCastObjCClass();
        if (v11)
          v13 = v10;
        v12 = objc_msgSend(v10, sel_superview);

        v10 = v12;
      }
      while (v12);
      if (!v11)
        goto LABEL_15;
LABEL_14:
      objc_msgSend(v11, sel__upgradeDrawingAtCharacterIndex_itemProviders_insertionLocationInDrawing_, objc_msgSend(v2, sel__characterIndex), isa, a1, a2);

    }
  }
LABEL_15:

}

uint64_t specialized InlineDrawingTextAttachmentView.dropInteraction(_:canHandle:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t result;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;

  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v3 + 40) = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v3) = objc_msgSend(a1, sel_hasItemsConformingToTypeIdentifiers_, isa);

  if ((v3 & 1) != 0)
    return 0;
  result = (uint64_t)objc_msgSend(v1, sel_superview);
  if (!result)
    return result;
  v7 = (void *)result;
  v8 = 0;
  do
  {
    if (v8)
    {

      goto LABEL_10;
    }
    objc_opt_self();
    v8 = (void *)swift_dynamicCastObjCClass();
    if (v8)
      v10 = v7;
    v9 = objc_msgSend(v7, sel_superview);

    v7 = v9;
  }
  while (v9);
  if (!v8)
    return 0;
LABEL_10:
  if (!objc_msgSend(v8, sel__canSelectDrawing))
  {
LABEL_26:

    return 0;
  }
  v11 = objc_msgSend(a1, sel_localDragSession);
  if (!v11)
  {
    v18 = 0u;
    v19 = 0u;
LABEL_20:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_21;
  }
  v12 = objc_msgSend(v11, sel_localContext);
  swift_unknownObjectRelease();
  if (v12)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  outlined init with take of Any?((uint64_t)v17, (uint64_t)&v18);
  if (!*((_QWORD *)&v19 + 1))
    goto LABEL_20;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v13 = *(void **)&v17[0];

    if (v13 == v1)
      goto LABEL_26;
  }
LABEL_21:
  v14 = InlineDrawingTextAttachmentView.acceptedDropLayouts.getter();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v16 = v14 + 40;
  while (((*(uint64_t (**)(void *))(*(_QWORD *)v16 + 24))(a1) & 1) == 0)
  {
    v16 += 16;
    if (!--v15)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();

  return 1;
}

id specialized InlineDrawingTextAttachmentView.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  void *v1;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  CGPoint v23;
  CGRect v24;

  objc_msgSend(v1, sel_bounds);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  objc_msgSend(a1, sel_locationInView_, v1);
  v23.x = v11;
  v23.y = v12;
  v24.origin.x = v4;
  v24.origin.y = v6;
  v24.size.width = v8;
  v24.size.height = v10;
  if (!CGRectContainsPoint(v24, v23))
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, 0);
  v13 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType;
  *((_BYTE *)v1 + OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType) = 0;
  v14 = objc_msgSend(a1, sel_localDragSession);
  if (v14)
  {
    v15 = objc_msgSend(v14, sel_localContext);
    swift_unknownObjectRelease();
    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    outlined init with take of Any?((uint64_t)v20, (uint64_t)&v21);
    if (*((_QWORD *)&v22 + 1))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v17 = *(void **)&v20[0];
        v18 = objc_msgSend(v1, sel_isDescendantOfView_, *(_QWORD *)&v20[0]);

        if (v18)
          *((_BYTE *)v1 + v13) = 2;
      }
      goto LABEL_13;
    }
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
LABEL_13:
  if (*((_BYTE *)v1 + v13))
    v19 = 3;
  else
    v19 = 2;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, v19);
}

void specialized InlineDrawingTextAttachmentView.dropInteraction(_:performDrop:)(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  CGPoint v12;
  id v13;
  unint64_t v14;
  unsigned __int8 *v15;
  id v16;
  Class isa;
  uint64_t inited;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  CGAffineTransform v26;
  CGAffineTransform aBlock;
  CGPoint v28;

  v3 = objc_msgSend(v1, sel_superview);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    do
    {
      if (v5)
      {

        goto LABEL_9;
      }
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (v5)
        v7 = v4;
      v6 = objc_msgSend(v4, sel_superview);

      v4 = v6;
    }
    while (v6);
    if (!v5)
      return;
LABEL_9:
    objc_msgSend(a1, sel_locationInView_, v1);
    v9 = v8;
    v11 = v10;
    objc_msgSend(v1, sel_drawingTransform);
    CGAffineTransformInvert(&v26, &aBlock);
    aBlock = v26;
    v28.x = v9;
    v28.y = v11;
    v12 = CGPointApplyAffineTransform(v28, &aBlock);
    v13 = objc_msgSend(a1, sel_items);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = v1;
    specialized Sequence.compactMap<A>(_:)(v14);
    swift_bridgeObjectRelease();

    v16 = objc_msgSend(v15, sel__characterIndex);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel__upgradeDrawingAtCharacterIndex_itemProviders_insertionLocationInDrawing_, v16, isa, v12.x, v12.y);

    type metadata accessor for Analytics();
    inited = swift_initStaticObject();
    v19 = OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType;
    v20 = v15[OBJC_IVAR____TtC8PaperKit31InlineDrawingTextAttachmentView_dropSessionType];
    if (v20 == 3)
    {
      __break(1u);
    }
    else
    {
      v21 = inited;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = v21;
      *(_BYTE *)(v22 + 24) = v20;
      v23 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ELL, 0x80000001DDF4AEC0);
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:);
      *(_QWORD *)(v24 + 24) = v22;
      *(_QWORD *)&aBlock.tx = partial apply for closure #1 in Analytics.sendEventLazy(key:payload:);
      *(_QWORD *)&aBlock.ty = v24;
      *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
      *(_QWORD *)&aBlock.b = 1107296256;
      *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
      *(_QWORD *)&aBlock.d = &block_descriptor_38;
      v25 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      AnalyticsSendEventLazy();
      _Block_release(v25);

      swift_release();
      v15[v19] = 3;
    }
  }
}

uint64_t sub_1DDCD8008()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:)()
{
  uint64_t v0;

  return implicit closure #1 in Analytics.recordDragAndDropEvent(type:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1DDCD8038()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t destroy for CanvasMembers()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasMembers(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasMembers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CanvasMembers(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasMembers(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasMembers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CanvasMembers()
{
  return &type metadata for CanvasMembers;
}

void PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  id v33;
  void (*v34)(char *, uint64_t, uint64_t);
  unint64_t *v35;
  id v36;

  v35 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKStroke();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)v32 - v16;
  MEMORY[0x1E0C80A78](v15, v18);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v34((char *)v32 - v19, v2, v8);
  type metadata accessor for PKStrokeCoherenceSubstrokes(0);
  if (swift_dynamicCast())
  {
    v20 = v36;
    v21 = objc_msgSend(v36, sel__substrokesInDrawing_, a1);
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v32[1] = v22;
      v33 = v20;
      v24 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v25 = *(_QWORD *)(v9 + 72);
      while (1)
      {
        v34(v7, v24, v8);
        v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v26(v7, 0, 1, v8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
        PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(a1, v35);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
        v24 += v25;
        if (!--v23)
        {
          v20 = v33;
          goto LABEL_14;
        }
      }

    }
    else
    {
      v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
LABEL_14:
      v26(v7, 1, 1, v8);

    }
    swift_bridgeObjectRelease();
  }
  else
  {
    isa = PKStroke._bridgeToObjectiveC()().super.isa;
    v28 = -[objc_class _isHidden](isa, sel__isHidden);

    if ((v28 & 1) == 0)
    {
      v34(v13, v2, v8);
      v29 = *v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
      v31 = *(_QWORD *)(v29 + 16);
      v30 = *(_QWORD *)(v29 + 24);
      if (v31 >= v30 >> 1)
        v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v29);
      *(_QWORD *)(v29 + 16) = v31 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v29+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v31, v13, v8);
      *v35 = v29;
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasSelectionType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0)
    return (*(_QWORD *)a1 == *(_QWORD *)a2) & ~(_DWORD)result;
  return result;
}

uint64_t CanvasMembers.insert(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v20 - v17;
  (*(void (**)(double))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))(v16);
  SharedTagged_9.tag.getter();
  v20 = v22;
  v21 = v23;
  MEMORY[0x1DF0E3408](v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  specialized Set._Variant.insert(_:)((uint64_t)v18, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v18, v9);
}

uint64_t CanvasMembers.remove(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[3];
  char v21;
  uint64_t v22;
  char v23;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))(v16);
  SharedTagged_9.tag.getter();
  v20[2] = v22;
  v21 = v23;
  MEMORY[0x1DF0E3408](v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  specialized Set._Variant.remove(_:)((uint64_t)v13, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
}

uint64_t CanvasMembers.singleImageSelected()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) == 1 && !*(_QWORD *)(a2 + 16))
  {
    specialized Collection.first.getter(a1, (uint64_t)v9);
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
    }
    else
    {
      WeakTagged_9.tagged2.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v9, v12);
    }
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
  }
}

uint64_t closure #1 in CanvasMembers.strokeArray(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v31 = *(_QWORD *)(v5 - 8);
  v32 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v30 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v27 - v19;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v29 = a1;
  v28(v17, a1, v12);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B70]);
  WeakRef.init<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  v33 = a2;
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
  LODWORD(v20) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v11, 1, v21);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if ((_DWORD)v20 == 1)
  {
    v22 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v34, 1, 1, v22);
  }
  else
  {
    v28(v17, v29, v12);
    v24 = (uint64_t)v30;
    Ref.init<A>(_:)();
    v25 = v34;
    specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v24, v33, v34);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v24, v32);
    v26 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 0, 1, v26);
  }
}

uint64_t specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t result;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  char *v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  objc_class *v85;
  id v86;
  void (*v87)(char *, uint64_t);
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  _QWORD v91[2];
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  objc_super v117;

  v112 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5, v6);
  v103 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRKeyPath();
  v101 = *(_QWORD *)(v8 - 8);
  v102 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v100 = (char *)v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for UUID();
  v109 = *(_QWORD *)(v104 - 8);
  v12 = MEMORY[0x1E0C80A78](v104, v11);
  v94 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v111 = (char *)v91 - v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v110 = (char *)v91 - v18;
  v97 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v96 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97, v19);
  v95 = (char *)v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v21, v22);
  v99 = (char *)v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v107 = *(_QWORD *)(v24 - 8);
  v108 = v24;
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v105 = (char *)v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v26, v28);
  v98 = (char *)v91 - v30;
  MEMORY[0x1E0C80A78](v29, v31);
  v106 = (char *)v91 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v113 = *(_QWORD *)(v33 - 8);
  v114 = v33;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v91 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v39);
  v41 = (char *)v91 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v115 = *(_QWORD *)(v42 - 8);
  v116 = v42;
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v93 = (char *)v91 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v44, v46);
  v49 = (char *)v91 - v48;
  MEMORY[0x1E0C80A78](v47, v50);
  v52 = (char *)v91 - v51;
  v53 = type metadata accessor for PKDrawingStruct();
  v54 = lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v41, a1, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v36, a2, v114);
  v55 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)((uint64_t)v41, (uint64_t)v36);
  if (v55)
  {
    v56 = (void *)v55;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

    return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v52, v116);
  }
  v91[0] = v54;
  v91[1] = v53;
  v113 = v37;
  v92 = v49;
  v114 = a1;
  v58 = v106;
  v59 = v107;
  v60 = v95;
  CRRegister.value.getter();
  v61 = (uint64_t)v99;
  v62 = v97;
  SharedTagged_2.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v60, v62);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v64 = *(_QWORD *)(v63 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v61, 1, v63) == 1)
    goto LABEL_8;
  v65 = v98;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v61, v63);
  v66 = v58;
  v67 = v108;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v65, v108);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  v68 = v100;
  Reference.identity.getter();
  v61 = (uint64_t)v103;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v68, v102);
  v69 = v109;
  v70 = v104;
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v61, 1, v104);
  v72 = v110;
  v73 = v111;
  v74 = v92;
  if (v71 == 1)
  {
    __break(1u);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v61, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v110, v61, v70);
  v75 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
  v75(v73, v72, v70);
  v76 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v77 = v105;
  v76(v105, v66, v67);
  v78 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v79 = v74;
  v80 = v116;
  v78(v79, v52, v116);
  v81 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  v76(&v81[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v77, v67);
  v82 = v94;
  v75(v94, v73, v70);
  v83 = v93;
  v84 = v92;
  v78(v93, v92, v80);
  v75(&v81[OBJC_IVAR___PKStrokeCoherenceBase_identity], v82, v70);
  v78(&v81[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v83, v80);
  v85 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v117.receiver = v81;
  v117.super_class = v85;
  v86 = objc_msgSendSuper2(&v117, sel_init);
  v87 = *(void (**)(char *, uint64_t))(v115 + 8);
  v87(v83, v80);
  v88 = *(void (**)(char *, uint64_t))(v109 + 8);
  v88(v82, v70);
  v87(v84, v80);
  v89 = v108;
  v90 = *(void (**)(char *, uint64_t))(v107 + 8);
  v90(v105, v108);
  v88(v111, v70);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v88(v110, v70);
  v90(v106, v89);
  return ((uint64_t (*)(char *, uint64_t))v87)(v52, v80);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CanvasMembers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned __int8 *)(a2 + 24);
  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && (specialized static Set.== infix(_:_:)(v2, v5) & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      if (v7)
        return 1;
    }
    else
    {
      if (v3 == v6)
        v9 = v7;
      else
        v9 = 1;
      if ((v9 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t specialized CanvasMembers.leafStrokes(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v26[2];
  char v27[16];
  char *v28;
  uint64_t v29;

  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v18, v13);
  v28 = v17;
  swift_bridgeObjectRetain();
  v19 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in CanvasMembers.strokeArray(in:), (uint64_t)v27, a2);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16), 0, MEMORY[0x1E0DEE9D8]);
  v20 = *(_QWORD *)(v19 + 16);
  v26[1] = v19;
  if (v20)
  {
    v21 = v19 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v22 = *(_QWORD *)(v5 + 72);
    v23 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v23(v12, v21, v4);
      v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v24(v12, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
      PKStroke.collectVisibleLeafStrokes(in:leafStrokes:)(a1, (unint64_t *)&v29);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v21 += v22;
      if (!--v20)
        goto LABEL_7;
    }
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_7:
    v24(v12, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t specialized CanvasMembers.init(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1DDF32CF0;
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8))();
  SharedTagged_9.tag.getter();
  v12 = v14;
  v13 = v15;
  MEMORY[0x1DF0E3408](v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (*(_QWORD *)(v9 + 16))
    v10 = specialized Set.init(_nonEmptyArrayLiteral:)(v9);
  else
    v10 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct;
  if (!lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct)
  {
    v1 = type metadata accessor for PKDrawingStruct();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKDrawingStruct, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct;
  if (!lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct)
  {
    v1 = type metadata accessor for PKDrawingStruct();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PKDrawingStruct, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct);
  }
  return result;
}

uint64_t partial apply for closure #1 in CanvasMembers.strokeArray(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in CanvasMembers.strokeArray(in:)(a1, *(_QWORD *)(v2 + 16), a2);
}

ValueMetadata *type metadata accessor for CanvasSelectionType()
{
  return &type metadata for CanvasSelectionType;
}

uint64_t Capsule<>.isTextBox.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14[2];
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v9);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v14, (uint64_t)v16);
    v10 = v17;
    v11 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 80))(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ShapeTextBox?((uint64_t)v14);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t Capsule<>.isFormField.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14[2];
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v9);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v14, (uint64_t)v16);
    v10 = v17;
    v11 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 72))(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ShapeTextBox?((uint64_t)v14);
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t outlined destroy of ShapeTextBox?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Capsule<>.isFixedWidth.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14[2];
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Capsule<>.sharedCanvasElement.getter(a1, a3, (uint64_t)v9);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v14, (uint64_t)v16);
    v10 = v17;
    v11 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(v10, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of ShapeTextBox?((uint64_t)v14);
    v12 = 0;
  }
  return v12 & 1;
}

__C::CGRect __swiftcall CGRect.position(in:anchor:)(__C::CGRect in, PaperKit::LayoutAnchor anchor)
{
  __C::CGRect result;

  __asm { BR              X10 }
  return result;
}

double sub_1DDCD9DA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, CGFloat a16, uint64_t a17, uint64_t rect, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double MidX;
  double v36;
  double v37;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v40.origin.x = v28;
  v40.origin.y = v34;
  v40.size.width = v33;
  v40.size.height = v32;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = v31;
  v41.origin.y = v30;
  v41.size.width = v29;
  v41.size.height = a16;
  v36 = MidX - CGRectGetWidth(v41) * 0.5;
  if (v36 > 0.0)
    v37 = v36;
  else
    v37 = 0.0;
  v42.origin.x = v28;
  v42.origin.y = v34;
  v42.size.width = v33;
  v42.size.height = v32;
  CGRectGetMidY(v42);
  v43.origin.x = v31;
  v43.origin.y = v30;
  v43.size.width = v29;
  v43.size.height = a16;
  CGRectGetHeight(v43);
  return v37;
}

BOOL CGRect.isFinite.getter(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  v4 = (~*(_QWORD *)&a3 & 0x7FF0000000000000) != 0 && (~*(_QWORD *)&a4 & 0x7FF0000000000000) != 0;
  v5 = (~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0 && v4;
  return (~*(_QWORD *)&a1 & 0x7FF0000000000000) != 0 && v5;
}

double CGAffineTransform.decompose(initialRotation:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  double *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  double v20;
  CGFloat v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  CGPoint v25;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat d;
  CGFloat c;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  double result;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  double v47;
  double v48;
  double v49;
  CGAffineTransform v50;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGPoint v53;

  v5 = *v2;
  v6 = v2[1];
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = v2[5];
  v45 = v10;
  v46 = v9;
  v11 = sqrt(v5 * v5 + v6 * v6);
  v12 = sqrt(v7 * v7 + v8 * v8);
  v13 = v7;
  v43 = v8;
  v44 = v7;
  v14 = *v2 * v8 - v6 * v7;
  v15 = v8;
  v16 = -v12;
  v17 = -v11;
  if (*v2 >= v8)
    v17 = v11;
  else
    v16 = v12;
  v18 = v14 < 0.0;
  if (v14 < 0.0)
    v19 = v16;
  else
    v19 = v12;
  if (v18)
    v20 = v17;
  else
    v20 = v11;
  v48 = v20;
  v49 = v19;
  v21 = v2[1];
  v41 = *v2;
  v42 = v21;
  v22 = *v2;
  v23 = atan2(v6 / v20, v5 / v20);
  t1.a = v22;
  t1.b = v21;
  if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
    v23 = a2;
  v47 = v23;
  v24 = -v23;
  t1.c = v13;
  t1.d = v15;
  t1.tx = v9;
  t1.ty = v10;
  v53.x = 0.5;
  v53.y = 0.5;
  v25 = CGPointApplyAffineTransform(v53, &t1);
  CGAffineTransformMakeRotation(&t1, v24);
  v37 = *(_OWORD *)&t1.c;
  v39 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v25.x, -v25.y);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v33 = t1.tx;
  v32 = t1.ty;
  *(_OWORD *)&t2.a = v39;
  *(_OWORD *)&t2.c = v37;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v50, &t1, &t2);
  v38 = *(_OWORD *)&v50.c;
  v40 = *(_OWORD *)&v50.a;
  v34 = v50.tx;
  v35 = v50.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v33;
  t1.ty = v32;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v40;
  *(_OWORD *)&t1.c = v38;
  t1.tx = v34;
  t1.ty = v35;
  CGAffineTransformConcat(&v50, &t1, &t2);
  t1.a = v41;
  t1.b = v42;
  t1.c = v44;
  t1.d = v43;
  t1.tx = v46;
  t1.ty = v45;
  t2 = v50;
  CGAffineTransformConcat(&v50, &t1, &t2);
  *(_OWORD *)a1 = *(_OWORD *)&v50.tx;
  *(double *)(a1 + 16) = v48;
  *(double *)(a1 + 24) = v49;
  result = v47;
  *(double *)(a1 + 32) = v47;
  return result;
}

BOOL CGRect.almostEqual(_:threshold:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  int IsNull;
  int v25;
  CGRect v28;
  CGRect v29;

  v28.origin.x = a6;
  v28.origin.y = a7;
  v28.size.width = a8;
  v28.size.height = a9;
  IsNull = CGRectIsNull(v28);
  v29.origin.x = a1;
  v29.origin.y = a2;
  v29.size.width = a3;
  v29.size.height = a4;
  v25 = CGRectIsNull(v29);
  if (IsNull && (v25 & 1) != 0)
    return 1;
  if (IsNull == v25 && vabdd_f64(a6, a1) < a5 && vabdd_f64(a7, a2) < a5 && vabdd_f64(a8, a3) < a5)
    return vabdd_f64(a9, a4) < a5;
  return 0;
}

uint64_t Array<A>.removeProximityDuplicates(threshold:)(_QWORD *a1, double a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v2 = a1;
  v4 = a1[2];
  swift_bridgeObjectRetain();
  if (v4 < 2)
    return (uint64_t)v2;
  v5 = 0;
  v6 = 1;
  while (1)
  {
    v7 = v2[2];
    if (v5 >= v7)
      break;
    if (v6 >= v7)
      goto LABEL_15;
    v8 = vsubq_f64(*(float64x2_t *)&v2[2 * v5 + 4], *(float64x2_t *)&v2[2 * v6 + 4]);
    if (sqrt(vaddvq_f64(vmulq_f64(v8, v8))) >= a2)
    {
      v5 = v6;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      v9 = v2[2];
      if (v6 >= v9)
        goto LABEL_16;
      v10 = v9 - 1;
      v11 = v9 - 1 - v6;
      if (v11 < 0)
        goto LABEL_17;
      memmove(&v2[2 * v6 + 4], &v2[2 * v6 + 6], 16 * v11);
      v2[2] = v10;
      --v4;
    }
    v6 = v5 + 1;
    if ((uint64_t)(v5 + 1) >= (uint64_t)v4)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id Array<A>.smoothCGPath()(double *a1)
{
  unint64_t v1;
  id v2;
  double v4;
  double v5;
  id v6;
  double *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_QWORD *)a1 + 2);
  if (v1 < 2)
    return 0;
  v4 = a1[4];
  v5 = a1[5];
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3508]), sel_init);
  objc_msgSend(v6, sel_moveToPoint_, v4, v5);
  v7 = a1 + 7;
  v8 = v1 - 1;
  v9 = v5;
  v10 = v4;
  do
  {
    v11 = *(v7 - 1);
    v12 = *v7;
    objc_msgSend(v6, sel_addQuadCurveToPoint_controlPoint_, (v10 + v11) * 0.5, (v9 + *v7) * 0.5);
    v7 += 2;
    v9 = v12;
    v10 = v11;
    --v8;
  }
  while (v8);
  objc_msgSend(v6, sel_addLineToPoint_, v4, v5, v11, v12);
  v2 = objc_msgSend(v6, sel_CGPath);

  return v2;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

void __swiftcall Quad.init(topLeft:topRight:bottomLeft:bottomRight:)(PaperKit::Quad *__return_ptr retstr, CGPoint topLeft, CGPoint topRight, CGPoint bottomLeft, CGPoint bottomRight)
{
  retstr->topLeft.x = topLeft.x;
  retstr->topLeft.y = topLeft.y;
  retstr->topRight.x = topRight.x;
  retstr->topRight.y = topRight.y;
  retstr->bottomLeft.x = bottomLeft.x;
  retstr->bottomLeft.y = bottomLeft.y;
  retstr->bottomRight.x = bottomRight.x;
  retstr->bottomRight.y = bottomRight.y;
}

double static Quad.zero.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double CGRect.rounded(scale:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v5;
  double v7;
  double v8;
  CGRect v10;

  v5 = a2;
  if (a1 != 0.0)
  {
    v10.origin.x = a2;
    v10.origin.y = a3;
    v10.size.width = a4;
    v10.size.height = a5;
    if (!CGRectIsNull(v10))
    {
      v7 = floor(a1 * v5);
      v8 = ceil(a1 * v5);
      if (a1 * v5 - v7 < 0.49)
        v8 = v7;
      return v8 / a1;
    }
  }
  return v5;
}

BOOL CGAffineTransform.almostEqual(_:scaleThreshold:translationThreshold:)(double *a1, double a2, double a3)
{
  double *v3;

  return vabdd_f64(*v3, *a1) < a2
      && vabdd_f64(v3[1], a1[1]) < a2
      && vabdd_f64(v3[2], a1[2]) < a2
      && vabdd_f64(v3[3], a1[3]) < a2
      && vabdd_f64(v3[4], a1[4]) < a3
      && vabdd_f64(v3[5], a1[5]) < a3;
}

double Quad.perspectiveCorrectedSize.getter()
{
  uint64_t v0;
  float64x2_t v1;
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  int8x16_t v10;
  float64x2_t v11;
  float64x2_t v17;
  double v18;
  double result;

  v1.f64[0] = *(float64_t *)(v0 + 32);
  v2.f64[0] = *(float64_t *)(v0 + 40);
  v3.f64[0] = *(float64_t *)(v0 + 16);
  v3.f64[1] = v1.f64[0];
  v4 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(_QWORD *)v0, 0), v3);
  v3.f64[0] = *(float64_t *)(v0 + 24);
  v3.f64[1] = v2.f64[0];
  v5 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(_QWORD *)(v0 + 8), 0), v3);
  v6 = vsqrtq_f64(vaddq_f64(vmulq_f64(v4, v4), vmulq_f64(v5, v5)));
  v1.f64[1] = *(float64_t *)(v0 + 16);
  v7 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(_QWORD *)(v0 + 48), 0), v1);
  v2.f64[1] = v3.f64[0];
  v8 = vsubq_f64((float64x2_t)vdupq_lane_s64(*(_QWORD *)(v0 + 56), 0), v2);
  v9 = vsqrtq_f64(vaddq_f64(vmulq_f64(v7, v7), vmulq_f64(v8, v8)));
  v10 = (int8x16_t)vdivq_f64(v6, v9);
  v11 = (float64x2_t)vextq_s8(v10, v10, 8uLL);
  __asm { FMOV            V3.2D, #1.0 }
  v17 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v11, _Q3), (int8x16_t)v11, (int8x16_t)vdivq_f64(_Q3, v11));
  v18 = v17.f64[1];
  if (v17.f64[0] > v17.f64[1])
    v18 = v17.f64[0];
  if (v18 > 2.0)
    v17 = vmulq_n_f64(v17, 2.0 / v18);
  *(_QWORD *)&result = *(_OWORD *)&vmulq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v9, v6), (int8x16_t)v9, (int8x16_t)v6), v17);
  return result;
}

BOOL static LayoutAnchor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LayoutAnchor.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int LayoutAnchor.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGPoint __swiftcall CGPoint.closestPointOnLineSegment(from:to:)(CGPoint from, CGPoint to)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  CGPoint result;

  v4 = to.x - from.x;
  v5 = to.y - from.y;
  v6 = (v4 * (v2 - from.x) + v5 * (v3 - from.y)) / (v4 * v4 + v5 * v5);
  v7 = 1.0;
  if (v6 <= 1.0)
    v7 = v6;
  v8 = v6 < 0.0;
  v9 = 0.0;
  if (!v8)
    v9 = v7;
  v10 = v4 * v9 + from.x;
  v11 = v5 * v9 + from.y;
  result.y = v11;
  result.x = v10;
  return result;
}

__C::CGRect __swiftcall CGRect.withSafeArea(insets:in:)(UIEdgeInsets insets, __C::CGRect in)
{
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double right;
  double left;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double MaxX;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  double MaxY;
  double v33;
  double v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  double v39;
  double v40;
  double MidY;
  BOOL v42;
  double v43;
  double v44;
  double v45;
  double v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  double MinY;
  CGFloat v51;
  double MinX;
  double v53;
  double top;
  double v55;
  double MidX;
  double bottom;
  double v58;
  double v59;
  CGFloat v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  __C::CGRect result;

  height = in.size.height;
  width = in.size.width;
  y = in.origin.y;
  x = in.origin.x;
  right = insets.right;
  top = insets.top;
  bottom = insets.bottom;
  left = insets.left;
  MinX = CGRectGetMinX((CGRect)in);
  v64.origin.x = x;
  v64.origin.y = y;
  v64.size.width = width;
  v64.size.height = height;
  MinY = CGRectGetMinY(v64);
  v65.origin.x = x;
  v65.origin.y = y;
  v65.size.width = width;
  v65.size.height = height;
  v8 = CGRectGetWidth(v65) - (left + right);
  if (v8 > 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  v48 = height;
  v49 = x;
  v66.origin.x = x;
  v47 = width;
  v66.origin.y = y;
  v66.size.width = width;
  v66.size.height = height;
  v10 = CGRectGetHeight(v66) - (top + bottom);
  if (v10 > 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  v12 = MinX + left;
  v13 = MinY + bottom;
  v67.origin.x = v60;
  v67.origin.y = v61;
  v67.size.width = v62;
  v67.size.height = v63;
  v55 = CGRectGetWidth(v67);
  v68.origin.x = v12;
  v68.origin.y = MinY + bottom;
  v68.size.width = v9;
  v68.size.height = v11;
  v53 = CGRectGetWidth(v68);
  v69.origin.x = v60;
  v69.origin.y = v61;
  v69.size.width = v62;
  v69.size.height = v63;
  v14 = CGRectGetHeight(v69);
  v70.origin.x = v12;
  v70.origin.y = MinY + bottom;
  v58 = v11;
  v59 = v9;
  v70.size.width = v9;
  v70.size.height = v11;
  v15 = CGRectGetHeight(v70);
  if (v55 >= v53)
  {
    v39 = v48;
    v79.origin.x = x;
    v40 = v47;
    v79.origin.y = y;
    v79.size.width = v47;
    v79.size.height = v48;
    MidX = CGRectGetMidX(v79);
    v80.origin.x = v49;
    v80.origin.y = y;
    v80.size.width = v47;
    v80.size.height = v48;
    CGRectGetMidY(v80);
    v42 = v14 < v15;
    v36 = v61;
    v35 = v62;
    v37 = v60;
    v16 = v63;
    v38 = v63;
    if (v42)
      goto LABEL_24;
    goto LABEL_23;
  }
  v51 = v13;
  v42 = v14 < v15;
  v16 = v63;
  v17 = v62;
  if (!v42)
  {
    v81.origin.x = v60;
    v81.origin.y = v61;
    v81.size.width = v62;
    v81.size.height = v63;
    MidX = CGRectGetMidX(v81);
    v82.origin.x = v60;
    v82.origin.y = v61;
    v82.size.width = v62;
    v82.size.height = v63;
    CGRectGetMidY(v82);
    v39 = v48;
    v40 = v47;
LABEL_23:
    v37 = v49;
    v36 = y;
    v35 = v40;
    v38 = v39;
LABEL_24:
    v83.origin.x = v37;
    v83.origin.y = v36;
    v83.size.width = v35;
    v83.size.height = v38;
    CGRectGetMidX(v83);
    v84.origin.x = v37;
    v84.origin.y = v36;
    v84.size.width = v35;
    v84.size.height = v38;
    MidY = CGRectGetMidY(v84);
    v17 = v62;
    v42 = v59 < v62 || v58 < v16;
    if (v42)
    {
      v43 = v59 / v62;
      if (v58 / v16 < v59 / v62)
        v43 = v58 / v16;
      v17 = v43 * v62;
      v16 = v43 * v16;
    }
    v25 = MidX - v17 * 0.5;
    v34 = MidY - v16 * 0.5;
    goto LABEL_33;
  }
  v71.origin.x = v60;
  v71.origin.y = v61;
  v71.size.width = v62;
  v71.size.height = v63;
  v18 = CGRectGetMinX(v71);
  v72.origin.x = v12;
  v72.origin.y = v51;
  v72.size.width = v59;
  v72.size.height = v11;
  v19 = CGRectGetMinX(v72);
  if (v18 > v19)
    v19 = v18;
  v20 = v61;
  v21 = v62;
  v22 = v63;
  MaxX = CGRectGetMaxX(*(CGRect *)&v19);
  v73.origin.x = v12;
  v73.origin.y = v51;
  v73.size.width = v59;
  v73.size.height = v11;
  v24 = CGRectGetMaxX(v73);
  if (v24 < MaxX)
    MaxX = v24;
  v74.origin.x = v60;
  v74.origin.y = v61;
  v74.size.width = v62;
  v74.size.height = v63;
  v25 = MaxX - CGRectGetWidth(v74);
  v75.origin.x = v25;
  v75.origin.y = v61;
  v75.size.width = v62;
  v75.size.height = v63;
  v26 = CGRectGetMinY(v75);
  v76.origin.x = v12;
  v76.origin.y = v51;
  v76.size.width = v59;
  v76.size.height = v58;
  v27 = CGRectGetMinY(v76);
  if (v26 > v27)
    v28 = v26;
  else
    v28 = v27;
  v29 = v25;
  v30 = v62;
  v31 = v63;
  MaxY = CGRectGetMaxY(*(CGRect *)(&v28 - 1));
  v77.origin.x = v12;
  v77.origin.y = v51;
  v77.size.width = v59;
  v77.size.height = v58;
  v33 = CGRectGetMaxY(v77);
  if (v33 < MaxY)
    MaxY = v33;
  v78.origin.x = v60;
  v78.origin.y = v61;
  v78.size.width = v62;
  v78.size.height = v63;
  v34 = MaxY - CGRectGetHeight(v78);
LABEL_33:
  v44 = v25;
  v45 = v17;
  v46 = v16;
  result.size.height = v46;
  result.size.width = v45;
  result.origin.y = v34;
  result.origin.x = v44;
  return result;
}

__C::CGRect __swiftcall CGRect.closestRect(in:)(__C::CGRect in)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  double x;
  CGFloat v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  double MidX;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  double MinX;
  double MaxX;
  double v21;
  double v22;
  double MidY;
  double v24;
  double MinY;
  CGFloat v26;
  double MaxY;
  CGFloat v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat rect;
  CGFloat rect_8;
  CGFloat rect_16;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  __C::CGRect result;

  height = in.size.height;
  width = in.size.width;
  y = in.origin.y;
  x = in.origin.x;
  v34 = v4;
  rect = v1;
  v38.origin.x = v1;
  v9 = v2;
  v38.origin.y = v2;
  v10 = v3;
  v38.size.width = v3;
  v38.size.height = v4;
  v11 = CGRectGetWidth(v38);
  rect_8 = x;
  rect_16 = y;
  v39.origin.x = x;
  v33 = y;
  v39.origin.y = y;
  v12 = width;
  v39.size.width = width;
  v13 = height;
  v39.size.height = height;
  if (CGRectGetWidth(v39) >= v11)
  {
    v15 = v9;
    v42.origin.y = v9;
    v42.size.width = v10;
    v17 = v34;
    v42.origin.x = rect;
    v42.size.height = v34;
    MinX = CGRectGetMinX(v42);
    v43.origin.x = x;
    v43.origin.y = rect_16;
    v16 = v12;
    v18 = v10;
    v43.size.width = v16;
    v43.size.height = v13;
    if (MinX >= CGRectGetMinX(v43))
    {
      x = rect;
      v44.origin.x = rect;
      v44.origin.y = v15;
      v44.size.width = v10;
      v44.size.height = v34;
      MaxX = CGRectGetMaxX(v44);
      v45.origin.x = rect_8;
      v45.origin.y = rect_16;
      v45.size.width = v16;
      v45.size.height = v13;
      if (CGRectGetMaxX(v45) < MaxX)
      {
        v46.origin.x = rect_8;
        v46.origin.y = rect_16;
        v46.size.width = v16;
        v46.size.height = v13;
        v21 = CGRectGetMaxX(v46);
        v47.origin.x = rect;
        v47.origin.y = v15;
        v47.size.width = v10;
        v47.size.height = v34;
        x = v21 - CGRectGetWidth(v47);
      }
    }
  }
  else
  {
    v40.origin.x = x;
    v40.origin.y = y;
    v40.size.width = v12;
    v40.size.height = height;
    MidX = CGRectGetMidX(v40);
    v15 = v9;
    v41.origin.y = v9;
    v16 = v12;
    v41.size.width = v10;
    v17 = v34;
    v41.origin.x = rect;
    v18 = v10;
    v41.size.height = v34;
    x = MidX + CGRectGetWidth(v41) * -0.5;
  }
  v48.origin.x = x;
  v48.origin.y = v15;
  v48.size.width = v18;
  v48.size.height = v17;
  v22 = CGRectGetHeight(v48);
  v49.origin.x = rect_8;
  v49.origin.y = rect_16;
  v49.size.width = v16;
  v49.size.height = v13;
  if (CGRectGetHeight(v49) >= v22)
  {
    v52.origin.x = x;
    v52.origin.y = v15;
    v52.size.width = v18;
    v52.size.height = v17;
    MinY = CGRectGetMinY(v52);
    v53.origin.x = rect_8;
    v53.origin.y = rect_16;
    v53.size.width = v16;
    v53.size.height = v13;
    v26 = CGRectGetMinY(v53);
    v24 = v33;
    if (MinY >= v26)
    {
      v54.origin.x = x;
      v54.origin.y = v15;
      v54.size.width = v18;
      v54.size.height = v17;
      MaxY = CGRectGetMaxY(v54);
      v55.origin.x = rect_8;
      v55.origin.y = rect_16;
      v55.size.width = v16;
      v55.size.height = v13;
      v28 = CGRectGetMaxY(v55);
      v24 = v15;
      if (v28 < MaxY)
      {
        v56.origin.x = rect_8;
        v56.origin.y = rect_16;
        v56.size.width = v16;
        v56.size.height = v13;
        v29 = CGRectGetMaxY(v56);
        v57.origin.x = x;
        v57.origin.y = v15;
        v57.size.width = v18;
        v57.size.height = v17;
        v24 = v29 - CGRectGetHeight(v57);
      }
    }
  }
  else
  {
    v50.origin.x = rect_8;
    v50.origin.y = rect_16;
    v50.size.width = v16;
    v50.size.height = v13;
    MidY = CGRectGetMidY(v50);
    v51.origin.x = x;
    v51.origin.y = v15;
    v51.size.width = v18;
    v51.size.height = v17;
    v24 = MidY + CGRectGetHeight(v51) * -0.5;
  }
  v30 = x;
  v31 = v18;
  v32 = v17;
  result.size.height = v32;
  result.size.width = v31;
  result.origin.y = v24;
  result.origin.x = v30;
  return result;
}

double Quad.topLeft.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void Quad.topLeft.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*Quad.topLeft.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.topRight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void Quad.topRight.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*Quad.topRight.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.bottomLeft.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void Quad.bottomLeft.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

uint64_t (*Quad.bottomLeft.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

double Quad.bottomRight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void Quad.bottomRight.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

uint64_t (*Quad.bottomRight.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

unint64_t lazy protocol witness table accessor for type LayoutAnchor and conformance LayoutAnchor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor;
  if (!lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for LayoutAnchor, &type metadata for LayoutAnchor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutAnchor and conformance LayoutAnchor);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Quad()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = Quad.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Quad()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = Quad.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Quad()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = Quad.rawValue.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Quad()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = Quad.rawValue.getter();
  v2 = v1;
  v3 = Quad.rawValue.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

uint64_t storeEnumTagSinglePayload for LayoutAnchor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1DDCDB36C + 4 * byte_1DDF3C2A2[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1DDCDB3A0 + 4 * byte_1DDF3C29D[v4]))();
}

uint64_t sub_1DDCDB3A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCDB3A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCDB3B0);
  return result;
}

uint64_t sub_1DDCDB3BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCDB3C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1DDCDB3C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCDB3D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutAnchor()
{
  return &type metadata for LayoutAnchor;
}

uint64_t getEnumTagSinglePayload for Quad(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Quad(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Quad()
{
  return &type metadata for Quad;
}

uint64_t Array<A>.convexHull()(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t *v9;
  int8x16_t v10;
  float64x2_t v11;
  unint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  float64x2_t v16;
  unint64_t v17;
  float64x2_t *v18;
  int8x16_t v19;
  float64x2_t v20;
  unint64_t v21;
  _QWORD *v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;

  if (*(_QWORD *)(a1 + 16) < 4uLL)
    return swift_bridgeObjectRetain();
  v25 = a1;
  swift_bridgeObjectRetain();
  v2 = 0;
  specialized MutableCollection<>.sort(by:)(&v25);
  v3 = v25;
  v4 = *(_QWORD *)(v25 + 16);
  if (!v4)
    goto LABEL_24;
  swift_retain();
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v6 = 0;
  v7 = v3 + 32;
  do
  {
    if (v6 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_29:
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v5);
      goto LABEL_14;
    }
    v8 = *(float64x2_t *)(v7 + 16 * v6);
    v1 = v5[2];
    if (v1 >= 2)
    {
      do
      {
        v9 = (float64x2_t *)&v5[2 * v1];
        v10 = (int8x16_t)vsubq_f64(v8, *v9);
        v11 = vmulq_f64((float64x2_t)vextq_s8(v10, v10, 8uLL), vsubq_f64(v9[1], *v9));
        if (vsubq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0] > 0.0)
          break;
        v5[2] = --v1;
      }
      while (v1 + 1 > 2);
    }
    v12 = v5[3];
    v2 = v1 + 1;
    if (v1 >= v12 >> 1)
    {
      v23 = v8;
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v1 + 1, 1, v5);
      v8 = v23;
      v5 = v13;
    }
    ++v6;
    v5[2] = v2;
    *(float64x2_t *)&v5[2 * v1 + 4] = v8;
  }
  while (v6 != v4);
  swift_release();
  v1 = v5[2];
  v2 = v1 + 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_29;
  while (1)
  {
LABEL_14:
    if (--v4 >= *(_QWORD *)(v3 + 16))
    {
      __break(1u);
LABEL_27:
      swift_release();
      return specialized Sequence.dropLast(_:)(1, (uint64_t)v5);
    }
    v16 = *(float64x2_t *)(v7 + 16 * v4);
    v17 = v5[2];
    if (v17 > v1)
      break;
LABEL_19:
    v21 = v5[3];
    if (v17 >= v21 >> 1)
    {
      v24 = v16;
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v17 + 1, 1, v5);
      v16 = v24;
      v5 = v22;
    }
    v5[2] = v17 + 1;
    *(float64x2_t *)&v5[2 * v17 + 4] = v16;
    if (!v4)
      goto LABEL_27;
  }
  while (v17 >= 2)
  {
    v18 = (float64x2_t *)&v5[2 * v17];
    v19 = (int8x16_t)vsubq_f64(v16, *v18);
    v20 = vmulq_f64((float64x2_t)vextq_s8(v19, v19, 8uLL), vsubq_f64(v18[1], *v18));
    if (vsubq_f64(v20, (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1)).f64[0] <= 0.0)
    {
      v5[2] = --v17;
      if (v17 + 1 > v2)
        continue;
    }
    goto LABEL_19;
  }
  __break(1u);
LABEL_24:
  swift_release();
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  return specialized Sequence.dropLast(_:)(1, (uint64_t)v5);
}

double Array<A>.stdDev()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t *v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  double *v22;
  double v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0.0;
  if (v1 == 1)
  {
    v2 = 0;
    v3 = 0.0;
LABEL_8:
    v7 = v1 - v2;
    v8 = (double *)(a1 + 8 * v2 + 32);
    do
    {
      v9 = *v8++;
      v3 = v3 + v9;
      --v7;
    }
    while (v7);
    goto LABEL_10;
  }
  v2 = v1 & 0x7FFFFFFFFFFFFFFELL;
  v5 = (double *)(a1 + 40);
  v3 = 0.0;
  v6 = v1 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v3 = v3 + *(v5 - 1) + *v5;
    v5 += 2;
    v6 -= 2;
  }
  while (v6);
  if (v1 != v2)
    goto LABEL_8;
LABEL_10:
  v10 = (double)v1;
  v11 = v3 / (double)v1;
  if ((unint64_t)v1 >= 4)
  {
    v12 = v1 & 0x7FFFFFFFFFFFFFFCLL;
    v14 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0);
    v15 = (float64x2_t *)(a1 + 48);
    v13 = 0.0;
    v16 = v1 & 0x7FFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vsubq_f64(v15[-1], v14);
      v18 = vsubq_f64(*v15, v14);
      v19 = vmulq_f64(v17, v17);
      v20 = vmulq_f64(v18, v18);
      v13 = v13 + v19.f64[0] + v19.f64[1] + v20.f64[0] + v20.f64[1];
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v1 == v12)
      return sqrt(v13 / v10);
  }
  else
  {
    v12 = 0;
    v13 = 0.0;
  }
  v21 = v1 - v12;
  v22 = (double *)(a1 + 8 * v12 + 32);
  do
  {
    v23 = *v22++;
    v13 = v13 + (v23 - v11) * (v23 - v11);
    --v21;
  }
  while (v21);
  return sqrt(v13 / v10);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3 - 16;
LABEL_5:
    v6 = *(double *)(v4 + 16 * a3);
    v7 = result;
    v8 = v5;
    while (1)
    {
      if (v6 >= *(double *)v8 && (v6 != *(double *)v8 || *(double *)(v8 + 24) >= *(double *)(v8 + 8)))
      {
LABEL_4:
        ++a3;
        v5 += 16;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v10 = *(_QWORD *)(v8 + 24);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
      *(double *)v8 = v6;
      *(_QWORD *)(v8 + 8) = v10;
      v8 -= 16;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

CGAffineTransform *specialized CGAffineTransform.init(transformMovingPoints:to:)@<X0>(_OWORD *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGFloat v20;
  double v21;
  long double v22;
  CGFloat tx;
  CGFloat ty;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CGFloat v28;
  CGFloat v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGFloat v33;
  CGFloat v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CGFloat v38;
  CGFloat v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CGAffineTransform *result;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CGAffineTransform v55;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v14 = a2 - a4;
  v15 = a3 - a5;
  v16 = sqrt(v14 * v14 + v15 * v15);
  if (v16 < 0.0001 || (v17 = a6 - a8, v18 = a7 - a9, v19 = sqrt(v17 * v17 + v18 * v18), v19 < 0.0001))
  {
    result = CGAffineTransformMakeTranslation(&t1, a6 - a2, a7 - a3);
    v44 = *(_OWORD *)&t1.a;
    v45 = *(_OWORD *)&t1.c;
    v46 = *(_OWORD *)&t1.tx;
  }
  else
  {
    v20 = v19 / v16;
    v21 = atan2(v15, v14);
    v22 = atan2(v18, v17);
    CGAffineTransformMakeTranslation(&t1, -a2, -a3);
    v47 = *(_OWORD *)&t1.c;
    v51 = *(_OWORD *)&t1.a;
    tx = t1.tx;
    ty = t1.ty;
    CGAffineTransformMakeRotation(&t1, -v21);
    v25 = *(_OWORD *)&t1.a;
    v26 = *(_OWORD *)&t1.c;
    v27 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v51;
    *(_OWORD *)&t1.c = v47;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v25;
    *(_OWORD *)&t2.c = v26;
    *(_OWORD *)&t2.tx = v27;
    CGAffineTransformConcat(&v55, &t1, &t2);
    v48 = *(_OWORD *)&v55.c;
    v52 = *(_OWORD *)&v55.a;
    v28 = v55.tx;
    v29 = v55.ty;
    CGAffineTransformMakeScale(&t1, v20, v20);
    v30 = *(_OWORD *)&t1.a;
    v31 = *(_OWORD *)&t1.c;
    v32 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v52;
    *(_OWORD *)&t1.c = v48;
    t1.tx = v28;
    t1.ty = v29;
    *(_OWORD *)&t2.a = v30;
    *(_OWORD *)&t2.c = v31;
    *(_OWORD *)&t2.tx = v32;
    CGAffineTransformConcat(&v55, &t1, &t2);
    v49 = *(_OWORD *)&v55.c;
    v53 = *(_OWORD *)&v55.a;
    v33 = v55.tx;
    v34 = v55.ty;
    CGAffineTransformMakeRotation(&t1, v22);
    v35 = *(_OWORD *)&t1.a;
    v36 = *(_OWORD *)&t1.c;
    v37 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v53;
    *(_OWORD *)&t1.c = v49;
    t1.tx = v33;
    t1.ty = v34;
    *(_OWORD *)&t2.a = v35;
    *(_OWORD *)&t2.c = v36;
    *(_OWORD *)&t2.tx = v37;
    CGAffineTransformConcat(&v55, &t1, &t2);
    v50 = *(_OWORD *)&v55.c;
    v54 = *(_OWORD *)&v55.a;
    v38 = v55.tx;
    v39 = v55.ty;
    CGAffineTransformMakeTranslation(&t1, a6, a7);
    v40 = *(_OWORD *)&t1.a;
    v41 = *(_OWORD *)&t1.c;
    v42 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = v54;
    *(_OWORD *)&t1.c = v50;
    t1.tx = v38;
    t1.ty = v39;
    *(_OWORD *)&t2.a = v40;
    *(_OWORD *)&t2.c = v41;
    *(_OWORD *)&t2.tx = v42;
    result = CGAffineTransformConcat(&v55, &t1, &t2);
    v44 = *(_OWORD *)&v55.a;
    v45 = *(_OWORD *)&v55.c;
    v46 = *(_OWORD *)&v55.tx;
  }
  *a1 = v44;
  a1[1] = v45;
  a1[2] = v46;
  return result;
}

uint64_t CanvasElementViewControllerDelegate.canvasElementViewControllerOverrideDefaultToolPicker(_:)()
{
  return 0;
}

uint64_t CanvasElementViewControllerDelegate.canvasElementViewControllerActiveToolPicker(_:)()
{
  return 0;
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerCanvasViewDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerOverrideDefaultToolPicker(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CanvasElementViewControllerDelegate.canvasElementViewControllerActiveToolPicker(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata accessor for TypesetViewController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TypesetViewController;
  if (!type metadata singleton initialization cache for TypesetViewController)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TypesetViewController()
{
  return swift_initClassMetadata2();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v30 = (char *)&v29 - v14;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v35 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  v38 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
  v31 = a1;
  if (v19)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v32 = *(_QWORD *)(v16 + 72);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain();
    v33 = v7;
    while (1)
    {
      v21(v11, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v15);
      if ((_DWORD)result == 1)
        break;
      v23 = v21;
      v21(v35, (uint64_t)v11, v15);
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>();
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
      v24 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1);
        v24 = v38;
      }
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v24 = v38;
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v24+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(_QWORD *)(v34 + 72) * v26, v33, v36);
      v20 += v32;
      --v19;
      v21 = v23;
      if (!v19)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    v27 = (uint64_t)v30;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v30, 1, 1, v15);
    swift_bridgeObjectRelease();
    v28 = v38;
    outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for UUID?);
    return v28;
  }
  return result;
}

uint64_t @objc TypesetViewController._canShowWhileLocked()()
{
  return 1;
}

id @objc TypesetViewController.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for TypesetViewController();
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id TypesetViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TypesetViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t vtable thunk for UIHostingController.__allocating_init(rootView:) dispatching to TypesetViewController.__allocating_init(rootView:)()
{
  id v0;

  v0 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  return UIHostingController.init(rootView:)();
}

uint64_t vtable thunk for UIHostingController.__allocating_init(coder:rootView:) dispatching to TypesetViewController.__allocating_init(coder:rootView:)()
{
  id v0;

  v0 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  return UIHostingController.init(coder:rootView:)();
}

uint64_t ObjC metadata update function for TypesetViewController()
{
  return type metadata accessor for TypesetViewController();
}

char *MathRecognitionViewControllerDelegate.init(canvas:view:recognitionController:)(void *a1, void *a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  char *v9;
  id v10;
  char *v11;
  void *v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  void *v17;
  objc_super v19;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController] = 0;
  v9 = v4;
  v10 = objc_msgSend(a3, sel_mathRecognitionController);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_controller] = v10;

  v19.receiver = v9;
  v19.super_class = ObjectType;
  v11 = (char *)objc_msgSendSuper2(&v19, sel_init);
  swift_unknownObjectWeakAssign();
  v12 = *(void **)&v11[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_controller];
  v13 = objc_allocWithZone(MEMORY[0x1E0CD11F0]);
  v14 = v11;
  v15 = v12;
  v16 = objc_msgSend(v13, sel_initWithController_view_delegate_, v15, a2, v14);

  v17 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController];
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController] = v16;

  return v14;
}

uint64_t MathRecognitionViewControllerDelegate.mathViewControllerDrawing(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v3
    && (v4 = v3,
        v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))(),
        v7 = v6,
        v4,
        ObjectType = swift_getObjectType(),
        v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7),
        v5,
        v9))
  {
    v10 = objc_msgSend(v9, sel_drawing);

    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = type metadata accessor for PKDrawing();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 0;
  }
  else
  {
    v11 = type metadata accessor for PKDrawing();
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 1;
  }
  return v12(v13, v14, 1, v11);
}

uint64_t type metadata accessor for MathRecognitionViewControllerDelegate()
{
  return objc_opt_self();
}

void specialized MathRecognitionViewControllerDelegate.mathViewControllerDrawingTransform(_:)(__int128 *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  v4 = xmmword_1DDF33A30;
  v5 = xmmword_1DDF33970;
  v6 = 0uLL;
  if (v3)
  {
    v7 = v3;
    v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
    v10 = v9;

    ObjectType = swift_getObjectType();
    v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

    v6 = 0uLL;
    v5 = xmmword_1DDF33970;
    v4 = xmmword_1DDF33A30;
    if (v12)
    {
      objc_msgSend(v12, sel_drawingTransform, 0.0, 1.0, 0.0);
      v14 = v16;
      v15 = v17;
      v13 = v18;

      v6 = v13;
      v5 = v14;
      v4 = v15;
    }
  }
  *a1 = v5;
  a1[1] = v4;
  a1[2] = v6;
}

double specialized MathRecognitionViewControllerDelegate.mathViewControllerLatestEnd(ofStrokeTimestamp:)()
{
  uint64_t v0;
  _QWORD *v1;
  double v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char *v8;

  v1 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  v2 = 0.0;
  if (v1)
  {
    v3 = v1;
    v4 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8))();
    v6 = v5;

    ObjectType = swift_getObjectType();
    v8 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(ObjectType, v6);

    if (v8)
    {
      v2 = *(double *)&v8[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_latestEndOfStrokeTimestamp];

    }
  }
  return v2;
}

void specialized MathRecognitionViewControllerDelegate.mathViewControllerUpdateFrame(forContainer:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  id v7;

  v1 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v1)
  {
    v2 = v1;
    v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8))();
    v5 = v4;

    ObjectType = swift_getObjectType();
    v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);

    objc_msgSend(v7, sel_updateFrameForTextContainer);
  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:didUpdateExpressions:newExpressions:removedExpressions:mathItems:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;

  v5 = v4;
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)mathLogger);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1DDB0F000, v11, v12, "MathRecognitionViewControllerDelegate didUpdateExpressions", v13, 2u);
    MEMORY[0x1DF0E6558](v13, -1, -1);
  }

  v14 = MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v14)
  {
    v15 = (id)v14;
    AnyCanvas.mathDidUpdateExpressions(_:newExpressions:removedExpressions:mathItems:)(a1, a2, a3, a4);

  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:replace:with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void *v22;
  id v23;
  id v24;
  void *v25;
  Class isa;
  Class v27;
  id v28;
  uint64_t v29;
  id v30;
  Class v31;
  _QWORD v32[2];
  id v33;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas;
  v12 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v8);
  if (v12)
  {
    v13 = v12;
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v15 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x320))();

    if (v15)
    {
      v16 = (_QWORD *)MEMORY[0x1DF0E666C](v11);
      if (v16
        && (v17 = v16,
            v18 = (void *)(*(uint64_t (**)(void))((*v14 & *v16) + 0x2F8))(),
            v20 = v19,
            v17,
            ObjectType = swift_getObjectType(),
            v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(ObjectType, v20),
            v18,
            v22))
      {
        v23 = objc_msgSend(v22, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v10, v5, v1);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v10, 0, 1, v1);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) != 1)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
          swift_dynamicCast();
          v24 = v33;
          objc_msgSend(v33, sel_copy);
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          if (swift_dynamicCast())
          {
            v25 = (void *)v32[1];
            type metadata accessor for PKStroke();
            isa = Array._bridgeToObjectiveC()().super.isa;
            v27 = Array._bridgeToObjectiveC()().super.isa;
            v28 = objc_msgSend(v25, sel_undoableAddNewStrokes_replacingOldStrokes_, isa, v27);

            if (v28)
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
              v29 = swift_allocObject();
              *(_OWORD *)(v29 + 16) = xmmword_1DDF35440;
              *(_QWORD *)(v29 + 32) = v28;
              v33 = (id)v29;
              specialized Array._endMutation()();
              type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKUndoCommand);
              v30 = v28;
              v31 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v15, sel_registerUndoCommands_andChangeToDrawing_, v31, v25);

            }
            else
            {

            }
          }
          else
          {

          }
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, 1, 1, v1);
      }

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
    }
  }
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetViewControllerForExpression:latex:fontSize:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t inited;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for CalculateExpression.Base();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, a4 & 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v15 = (void *)*MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(inited + 40) = v13;
  swift_bridgeObjectRetain();
  v16 = v15;
  v17 = v13;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D09CA0], v8);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  v18 = MEMORY[0x1DF0E14F4](a1);
  v19 = objc_allocWithZone((Class)type metadata accessor for TypesetViewController());
  v22 = v18;
  v20 = UIHostingController.init(rootView:)();
  swift_release();

  return v20;
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetImageForExpression:latex:fontSize:)(double a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t inited;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  _QWORD v24[3];

  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v8 = type metadata accessor for CalculateExpression.Base();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, a4 & 1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v15 = (void *)*MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0D09E80];
  *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(_QWORD *)(inited + 40) = v13;
  swift_bridgeObjectRetain();
  v16 = v15;
  v17 = v13;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D09CA0], v8);
  UUID.init()();
  type metadata accessor for CalculateExpression();
  swift_allocObject();
  CalculateExpression.init(_:options:base:id:)();
  v24[2] = MEMORY[0x1DF0E14F4](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<Image>);
  swift_allocObject();
  swift_retain();
  ImageRenderer.init(content:)();
  v18 = (void *)MEMORY[0x1DF0E666C](v24[1] + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas);
  if (v18)
  {
    v19 = v18;
    v20 = objc_msgSend(v18, sel_window);

    if (v20)
    {
      v21 = objc_msgSend(v20, sel_screen);

      objc_msgSend(v21, sel_scale);
    }
  }
  ImageRenderer.scale.setter();
  v22 = ImageRenderer.uiImage.getter();

  swift_release();
  swift_release();
  swift_release();
  return v22;
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:createTypesetImageForItemUUID:showResult:fontSize:)(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  void *v27;
  id v28;
  void (*v29)(char *, char *, uint64_t);
  PKDrawing *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PKDrawing();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v55 - v19;
  v21 = (_QWORD *)MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v18);
  if (!v21)
    return 0;
  v22 = v21;
  LODWORD(v56) = a2;
  v23 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x2F8))();
  v25 = v24;
  ObjectType = swift_getObjectType();
  v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(ObjectType, v25);

  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_18;
  }
  v28 = objc_msgSend(v27, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  v29 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v29(v10, v15, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_18:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
    return 0;
  }
  v29(v20, v10, v11);
  PKDrawing._bridgeToObjectiveC()(v30);
  v32 = v31;
  v33 = objc_msgSend(v31, sel_uuid);

  v58 = &unk_1F046F2B8;
  v34 = swift_dynamicCastObjCProtocolConditional();
  if (!v34)
    goto LABEL_22;
  v35 = v34;
  swift_getObjectType();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v36 = swift_dynamicCastMetatype() ? (void *)v35 : 0;
  if (!v36)
    goto LABEL_22;
  v37 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v37 != -1)
    swift_once();
  swift_beginAccess();
  v38 = static CalculateDocumentController.controllers;
  if (!*((_QWORD *)static CalculateDocumentController.controllers + 2))
    goto LABEL_20;
  swift_unknownObjectRetain();
  v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
  if ((v40 & 1) == 0)
  {
    swift_unknownObjectRelease();
LABEL_20:
    swift_endAccess();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    swift_unknownObjectRelease();

    return 0;
  }
  v41 = *(void **)(v38[7] + 8 * v39);
  swift_endAccess();
  v42 = v41;
  swift_unknownObjectRelease_n();
  v43 = &v42[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  if (!MEMORY[0x1DF0E666C](&v42[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document])
    || (v44 = *((_QWORD *)v43 + 1),
        v45 = swift_getObjectType(),
        v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(a1, v45, v44),
        swift_unknownObjectRelease(),
        !v46))
  {

LABEL_22:
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    return 0;
  }
  if ((v56 & 1) != 0)
    v47 = 1;
  else
    v47 = CalculateExpression.isGraphable.getter();
  v50 = MEMORY[0x1DF0E14F4](v46, 0, 0, v47 & 1, a3);
  v57 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<Image>);
  swift_allocObject();
  swift_retain();
  ImageRenderer.init(content:)();
  v51 = objc_msgSend(v22, sel_window);
  if (v51)
  {
    v52 = v51;
    v53 = objc_msgSend(v51, sel_screen);
    v56 = v50;
    v54 = v53;

    objc_msgSend(v54, sel_scale);
  }
  ImageRenderer.scale.setter();
  v48 = ImageRenderer.uiImage.getter();
  swift_release();

  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
  return v48;
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:select:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  id v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for PKStroke();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v30 - 8);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v30, v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v26 = v1;
    v31 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v15 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v16 = *(_QWORD *)(v4 + 72);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v28 = v16;
    v29 = v4;
    do
    {
      v27(v7, v15, v3);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v18 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v14 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v31;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = v31;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20, v12, v30);
      v31 = v14;
      v4 = v29;
      v15 += v28;
      --v13;
    }
    while (v13);
    v1 = v26;
  }
  v21 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v10);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
    v24 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(v14);
    v25 = specialized Set.init<A>(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    AnyCanvas.selection.setter(v23, v25, 6, 0);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void specialized MathRecognitionViewControllerDelegate.mathViewController(_:updatedResult:strokes:expressionUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  void *v31;
  id v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  PKDrawing *v36;
  void *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;
  PKDrawing *v49;
  void *v50;
  void *v51;
  void *v52;
  char *v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  char *v57;
  unsigned int (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;

  v60 = a1;
  v61 = a2;
  v3 = type metadata accessor for UUID();
  v62 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v56 - v13;
  v15 = type metadata accessor for PKDrawing();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v56 - v23;
  v25 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v22);
  if (v25)
  {
    v26 = v25;
    v59 = v3;
    v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x2F8))();
    v29 = v28;
    ObjectType = swift_getObjectType();
    v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(ObjectType, v29);

    if (v31)
    {
      v32 = objc_msgSend(v31, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      v33 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v33(v14, v19, v15);
      v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v34(v14, 0, 1, v15);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (v35(v14, 1, v15) != 1)
      {
        v58 = v35;
        v33(v24, v14, v15);
        PKDrawing._bridgeToObjectiveC()(v36);
        v38 = v37;
        v39 = objc_msgSend(v37, sel_uuid);

        v65 = &unk_1F046F2B8;
        v40 = swift_dynamicCastObjCProtocolConditional();
        if (!v40)
          goto LABEL_21;
        v41 = v40;
        swift_getObjectType();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v42 = swift_dynamicCastMetatype() ? (void *)v41 : 0;
        if (!v42)
          goto LABEL_21;
        v43 = one-time initialization token for controllers;
        swift_unknownObjectRetain();
        if (v43 != -1)
          swift_once();
        swift_beginAccess();
        v44 = static CalculateDocumentController.controllers;
        if (*((_QWORD *)static CalculateDocumentController.controllers + 2))
        {
          swift_unknownObjectRetain();
          v45 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
          if ((v46 & 1) != 0)
          {
            v47 = *(void **)(v44[7] + 8 * v45);
            swift_endAccess();
            v57 = v47;
            swift_unknownObjectRelease_n();
            v34(v10, 1, 1, v15);
            v64 = v60;
            swift_bridgeObjectRetain_n();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
            v48 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
            if (v58(v10, 1, v15) == 1)
            {
              v50 = 0;
            }
            else
            {
              PKDrawing._bridgeToObjectiveC()(v49);
              v50 = v51;
              (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
            }
            v58 = (unsigned int (*)(char *, uint64_t, uint64_t))objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0)), sel_initWithStrokes_fromDrawing_, v48, v50);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();

            (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v6, v61, v59);
            v52 = v57;
            v53 = &v57[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_resultDrawings];
            swift_beginAccess();
            v54 = v58;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v63 = *(_QWORD *)v53;
            *(_QWORD *)v53 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v54, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)v53 = v63;
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v59);
            swift_endAccess();
            objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v52, sel_sendExpressionsChanged, 0);
            objc_msgSend(v52, sel_performSelector_withObject_afterDelay_, sel_sendExpressionsChanged, 0, 0.1);

LABEL_21:
            swift_unknownObjectRelease();

            (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
            return;
          }
          swift_unknownObjectRelease();
        }
        swift_endAccess();
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
        swift_unknownObjectRelease();

        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    }

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for PKDrawing?);
  }
}

uint64_t specialized MathRecognitionViewControllerDelegate.mathViewController(_:resultFor:itemUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void *v25;
  id v26;
  void (*v27)(char *, char *, uint64_t);
  PKDrawing *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void *v46;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PKDrawing();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v44 - v17;
  v19 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_canvas, v16);
  if (!v19)
    return 0;
  v20 = v19;
  v45 = a2;
  v21 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x2F8))();
  v23 = v22;
  ObjectType = swift_getObjectType();
  v25 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);

  if (!v25)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_15;
  }
  v26 = objc_msgSend(v25, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v27(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_15:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for PKDrawing?);
    return 0;
  }
  v27(v18, v8, v9);
  PKDrawing._bridgeToObjectiveC()(v28);
  v30 = v29;
  v31 = objc_msgSend(v29, sel_uuid);

  v46 = &unk_1F046F2B8;
  v32 = swift_dynamicCastObjCProtocolConditional();
  if (!v32
    || ((v33 = (void *)v32,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (v34 = v33): (v34 = 0), !v34))
  {
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    return 0;
  }
  v35 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v35 != -1)
    swift_once();
  swift_beginAccess();
  v36 = static CalculateDocumentController.controllers;
  v37 = v45;
  if (!*((_QWORD *)static CalculateDocumentController.controllers + 2))
    goto LABEL_18;
  swift_unknownObjectRetain();
  v38 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
  if ((v39 & 1) == 0)
  {
    swift_unknownObjectRelease();
LABEL_18:
    swift_endAccess();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    swift_unknownObjectRelease();

    return 0;
  }
  v40 = *(void **)(v36[7] + 8 * v38);
  swift_endAccess();
  v41 = v40;
  swift_unknownObjectRelease_n();
  v42 = CalculateDocumentController.resultForExpressionWithUUID(_:locale:)(v37, a1);

  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  return v42;
}

unint64_t lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>;
  if (!lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D117A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>);
  }
  return result;
}

uint64_t CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void (**v26)(void *);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[80];

  v34 = a5;
  v35 = a7;
  v36 = a8;
  v31 = a2;
  v32 = a3;
  v30 = a1;
  v29 = type metadata accessor for Capsule();
  v12 = *(_QWORD *)(v29 - 8);
  v14 = MEMORY[0x1E0C80A78](v29, v13);
  v16 = (char *)&v29 - v15;
  v17 = *(_QWORD *)(a6 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](v14, v19);
  v20 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of (key: Int, value: AnyCRValue)?(a4, (uint64_t)v37, &demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of (key: Int, value: AnyCRValue)?(a1, v8 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v31, a6);
  v21 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v16, v32, v29);
  v22 = (*(unsigned __int8 *)(v17 + 80) + 161) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v23 = (v18 + *(unsigned __int8 *)(v12 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v24 = (char *)swift_allocObject();
  *((_QWORD *)v24 + 2) = v34;
  *((_QWORD *)v24 + 3) = a6;
  v25 = v36;
  *((_QWORD *)v24 + 4) = v35;
  *((_QWORD *)v24 + 5) = v25;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v37, (uint64_t)(v24 + 48), &demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of (key: Int, value: AnyCRValue)?(v30, (uint64_t)(v24 + 128), (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v24[v22], v20, a6);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v24[v23], v16, v21);
  v26 = (void (**)(void *))(v33 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render);
  v27 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render);
  *v26 = partial apply for closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:);
  v26[1] = (void (*)(void *))v24;
  outlined retain of PaperRenderableOptions?((uint64_t)v37);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
}

void closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  dispatch_semaphore_t v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  dispatch_semaphore_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;

  v41 = a4;
  v42 = a5;
  v47 = a2;
  v48 = a3;
  v49 = a1;
  v45 = a6;
  v46 = a9;
  v11 = type metadata accessor for Capsule();
  v12 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v17 = (char *)&v38 - v16;
  v40 = (char *)&v38 - v16;
  v18 = *(_QWORD *)(a7 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v15, v20);
  v21 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v25;
  v43 = dispatch_semaphore_create(0);
  v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v41, a7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v42, v11);
  v27 = (*(unsigned __int8 *)(v18 + 80) + 177) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v28 = (v19 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (*(unsigned __int8 *)(v12 + 80) + v28 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject();
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = 0;
  *((_QWORD *)v31 + 4) = v45;
  *((_QWORD *)v31 + 5) = a7;
  v32 = v46;
  *((_QWORD *)v31 + 6) = a8;
  *((_QWORD *)v31 + 7) = v32;
  v33 = v47;
  outlined init with take of (key: Int, value: AnyCRValue)?(v47, (uint64_t)(v31 + 64), &demangling cache variable for type metadata for PaperRenderableOptions?);
  outlined init with take of (key: Int, value: AnyCRValue)?(v48, (uint64_t)(v31 + 144), (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v31[v27], v21, a7);
  v34 = v49;
  *(_QWORD *)&v31[v28] = v49;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v31[v29], v40, v39);
  v35 = v43;
  *(_QWORD *)&v31[v30] = v43;
  outlined retain of PaperRenderableOptions?(v33);
  v36 = v34;
  v37 = v35;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v44, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:), (uint64_t)v31);
  swift_release();
  OS_dispatch_semaphore.wait()();

}

uint64_t closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 448) = v17;
  *(_OWORD *)(v8 + 416) = v15;
  *(_OWORD *)(v8 + 432) = v16;
  *(_QWORD *)(v8 + 400) = a7;
  *(_QWORD *)(v8 + 408) = a8;
  *(_QWORD *)(v8 + 384) = a5;
  *(_QWORD *)(v8 + 392) = a6;
  *(_QWORD *)(v8 + 376) = a4;
  outlined init with take of (key: Int, value: AnyCRValue)?(a5, v8 + 336, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  v10 = *(_OWORD *)(v8 + 352);
  *(_OWORD *)(v8 + 456) = *(_OWORD *)(v8 + 336);
  *(_OWORD *)(v8 + 472) = v10;
  *(_BYTE *)(v8 + 91) = *(_BYTE *)(v8 + 368);
  outlined init with take of (key: Int, value: AnyCRValue)?(a4, v8 + 96, &demangling cache variable for type metadata for PaperRenderableOptions?);
  *(_OWORD *)(v8 + 488) = *(_OWORD *)(v8 + 96);
  v11 = *(_QWORD *)(v8 + 160);
  *(_QWORD *)(v8 + 504) = *(_QWORD *)(v8 + 112);
  *(_QWORD *)(v8 + 512) = v11;
  v12 = *(_WORD *)(v8 + 168);
  *(_BYTE *)(v8 + 94) = *(_BYTE *)(v8 + 170);
  *(_WORD *)(v8 + 92) = v12;
  v13 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v8 + 520) = v13;
  *(_QWORD *)(v8 + 528) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 536) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int v4;
  void *v5;
  __int16 v6;
  unsigned int v7;
  char v8;
  char v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t (*v26)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t);

  outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 376), v0 + 16, &demangling cache variable for type metadata for PaperRenderableOptions?);
  if (*(_QWORD *)(v0 + 24) == 1)
  {
    LOBYTE(v1) = 0;
    LOBYTE(v2) = 0;
    v3 = 0;
    LOBYTE(v4) = 0;
    v5 = 0;
    LOBYTE(v6) = 0;
    LOBYTE(v7) = 0;
    v8 = 0;
    v24 = 0;
    v25 = 0;
    v9 = 1;
  }
  else
  {
    v10 = *(unsigned __int8 *)(v0 + 94);
    v11 = *(_QWORD *)(v0 + 488);
    v3 = *(void **)(v0 + 496);
    v9 = v11 & 1;
    v1 = (v11 >> 8) & 1;
    v2 = (v11 >> 16) & 1;
    v4 = *(_DWORD *)(v0 + 504) & 1;
    v6 = *(_WORD *)(v0 + 92) & 1;
    v7 = ((*(unsigned __int16 *)(v0 + 92) | (v10 << 16)) >> 8) & 1;
    v8 = v10 & 1;
    v5 = *(void **)(v0 + 512);
    v24 = v1;
    v25 = v2;
  }
  *(_BYTE *)(v0 + 176) = v9;
  *(_BYTE *)(v0 + 177) = v1;
  *(_BYTE *)(v0 + 178) = v2;
  *(_QWORD *)(v0 + 184) = v3;
  *(_QWORD *)(v0 + 552) = v3;
  *(_QWORD *)(v0 + 544) = v5;
  v23 = *(_BYTE *)(v0 + 91);
  v20 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 480);
  v19 = *(_OWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 384);
  *(_BYTE *)(v0 + 192) = v4;
  *(_QWORD *)(v0 + 240) = v5;
  *(_BYTE *)(v0 + 248) = v6;
  *(_BYTE *)(v0 + 249) = v7;
  *(_BYTE *)(v0 + 250) = v8;
  outlined init with take of (key: Int, value: AnyCRValue)?(v12, v0 + 200, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  outlined retain of PaperRenderableOptions?(v13);
  static CRKeyPath.unique.getter();
  *(_BYTE *)(v0 + 256) = v9;
  *(_BYTE *)(v0 + 257) = v24;
  *(_BYTE *)(v0 + 258) = v25;
  *(_QWORD *)(v0 + 264) = v3;
  *(_BYTE *)(v0 + 272) = v4;
  *(_OWORD *)(v0 + 280) = v19;
  *(_QWORD *)(v0 + 296) = v20;
  *(_QWORD *)(v0 + 304) = v21;
  *(_BYTE *)(v0 + 312) = v23;
  *(_QWORD *)(v0 + 320) = v5;
  *(_BYTE *)(v0 + 328) = v6;
  *(_BYTE *)(v0 + 329) = v7;
  *(_BYTE *)(v0 + 330) = v8;
  v14 = *(_QWORD *)(v22 + 8);
  v26 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(**(int **)(v14 + 16)
                                                                                                 + *(_QWORD *)(v14 + 16));
  v15 = v3;
  v16 = v5;
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v17;
  *v17 = v0;
  v17[1] = closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:);
  return v26(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 408), v0 + 256, *(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 432), v14);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 552);
  v2 = *(void **)(*(_QWORD *)v0 + 544);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 536);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 520);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  OS_dispatch_semaphore.signal()();
  v1 = *(void **)(v0 + 240);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id CanvasElementPDFAnnotation.init(bounds:forType:withProperties:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  NSDictionary v18;
  id v19;
  objc_super v21;

  v13 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v13 = 0;
  v13[1] = 0;
  v14 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  v14[32] = 1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v15 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v15 = 0;
  v15[1] = 0;
  v16 = &v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v17 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (a2)
  {
    v18.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.isa = 0;
  }
  v21.receiver = v6;
  v21.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  v19 = objc_msgSendSuper2(&v21, sel_initWithBounds_forType_withProperties_, a1, v18.super.isa, a3, a4, a5, a6);

  return v19;
}

id CanvasElementPDFAnnotation.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v1 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v2[32] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v3 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v3 = 0;
  v3[1] = 0;
  v4 = &v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v5 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  v6 = *MEMORY[0x1E0CD0E58];
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v8, sel_initWithBounds_forType_withProperties_, v6, 0, 0.0, 0.0, 0.0, 0.0);
}

id CanvasElementPDFAnnotation.init(coder:)(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v3 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v3 = 0;
  v3[1] = 0;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v5 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v7 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

id CanvasElementPDFAnnotation.init(commonWithBounds:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  id result;
  objc_super v15;

  v9 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v9 = 0;
  v9[1] = 0;
  v10 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v11 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v11 = 0;
  v11[1] = 0;
  v12 = &v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v13 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  v15.receiver = v4;
  v15.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  result = objc_msgSendSuper2(&v15, sel_initCommonWithBounds_, a1, a2, a3, a4);
  if (!result)
    __break(1u);
  return result;
}

id CanvasElementPDFAnnotation.init(annotationDictionary:for:)(uint64_t a1, void *a2)
{
  _BYTE *v2;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  objc_super v15;

  v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v8 = 0;
  v8[1] = 0;
  v9 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v10 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  v11 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (!a1)
  {

    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*v5);

    outlined consume of (@escaping @callee_guaranteed () -> ())?(*v8);
    outlined destroy of CRKeyPath?(v9);

    type metadata accessor for CanvasElementPDFAnnotation();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  v12 = a2;
  v13 = objc_msgSendSuper2(&v15, sel_initWithAnnotationDictionary_forPage_, a1, v12);

  if (v13)
  return v13;
}

id CanvasElementPDFAnnotation.init(cgpdfAnnotation:for:)(void *a1, void *a2)
{
  _BYTE *v2;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  v5 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  v7 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v8 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v8 = 0;
  v8[1] = 0;
  v9 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v10 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  v11 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  if (!a1)
  {
    a1 = a2;
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:

    outlined consume of (@escaping @callee_guaranteed () -> ())?(*v5);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*v8);
    outlined destroy of CRKeyPath?(v9);

    type metadata accessor for CanvasElementPDFAnnotation();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  v12 = a1;
  v13 = a2;
  v14 = objc_msgSendSuper2(&v16, sel_initWithCGPDFAnnotation_forPage_, v12, v13);

  if (v14)
  return v14;
}

void CanvasElementPDFAnnotation.copy(with:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char v30[32];
  objc_super v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (objc_class *)type metadata accessor for CanvasElementPDFAnnotation();
  v31.receiver = v2;
  v31.super_class = v9;
  objc_msgSendSuper2(&v31, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any(a2, (uint64_t)v30);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v10 = v29;
    v11 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render + 8];
    v13 = (uint64_t *)&v29[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    v14 = *(_QWORD *)&v29[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
    *v13 = v11;
    v13[1] = v12;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
    v15 = v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds + 32];
    v16 = &v10[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
    v17 = *(_OWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds + 16];
    *(_OWORD *)v16 = *(_OWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
    *((_OWORD *)v16 + 1) = v17;
    v16[32] = v15;
    v18 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
    v19 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation];
    if (v19)
    {
      objc_msgSend(v19, sel_copyWithZone_, a1);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for AKAnnotation();
      if (swift_dynamicCast())
        v20 = v29;
      else
        v20 = 0;
      v18 = OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation;
    }
    else
    {
      v20 = 0;
    }
    v21 = *(void **)&v10[v18];
    *(_QWORD *)&v10[v18] = v20;

    v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    v23 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation + 8];
    v24 = (uint64_t *)&v10[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    v25 = *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    *v24 = v22;
    v24[1] = v23;
    outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v22);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
    v26 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
    swift_beginAccess();
    outlined init with copy of CRKeyPath?(v26, (uint64_t)v8);
    v27 = (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
    swift_beginAccess();
    outlined assign with take of CRKeyPath?((uint64_t)v8, v27);
    swift_endAccess();
    v10[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation];

  }
}

uint64_t type metadata accessor for CanvasElementPDFAnnotation()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CanvasElementPDFAnnotation;
  if (!type metadata singleton initialization cache for CanvasElementPDFAnnotation)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t type metadata accessor for AKAnnotation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AKAnnotation;
  if (!lazy cache variable for type metadata for AKAnnotation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AKAnnotation);
  }
  return result;
}

id CanvasElementPDFAnnotation.draw(with:in:)(uint64_t a1, CGContext *a2)
{
  char *v2;
  void (*v4)(CGContext *);
  id v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double MinY;
  CGAffineTransform v18;
  CGAffineTransform t2;
  CGAffineTransform t1;
  objc_super v21;
  CGRect v22;
  CGRect v23;

  v4 = *(void (**)(CGContext *))&v2[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  if (v4)
  {
    swift_retain();
    CGContextSaveGState(a2);
    v5 = objc_msgSend(v2, sel_page);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, sel_boundsForBox_, 0);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;

      v22.origin.x = v8;
      v22.origin.y = v10;
      v22.size.width = v12;
      v22.size.height = v14;
      MinY = CGRectGetMinY(v22);
      v23.origin.x = v8;
      v23.origin.y = v10;
      v23.size.width = v12;
      v23.size.height = v14;
      t1.a = 1.0;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = 1.0;
      t1.tx = 0.0;
      t1.ty = 0.0;
      t2.b = 0.0;
      t2.c = 0.0;
      t2.a = 1.0;
      *(_OWORD *)&t2.d = xmmword_1DDF325E0;
      t2.ty = MinY + CGRectGetMaxY(v23);
      CGAffineTransformConcat(&v18, &t1, &t2);
      t1 = v18;
      CGContextConcatCTM(a2, &t1);
    }
    v4(a2);
    CGContextRestoreGState(a2);
    return (id)outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
  }
  else
  {
    v21.receiver = v2;
    v21.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
    return objc_msgSendSuper2(&v21, sel_drawWithBox_inContext_, a1, a2);
  }
}

Swift::Void __swiftcall CanvasElementPDFAnnotation._addAKAnnotation(to:)(CFMutableDictionaryRef_optional to)
{
  char *v1;
  CGPDFDictionary *v3;
  void (*v4)(__CFDictionary *);
  __CFDictionary *v5;
  objc_super v6;
  char key[16];
  CGPDFDictionaryRef value[2];

  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x1E0C80C00];
  if (v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation])
  {
    if (v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] != 1
      || (v3 = (CGPDFDictionary *)objc_msgSend(v1, sel_sourceDictionary)) != 0
      && (value[0] = 0, *(_OWORD *)key = xmmword_1DDF3C460, CGPDFDictionaryGetDictionary(v3, key, value), value[0])
      && (*(_QWORD *)key = 0,
          CGPDFDictionaryGetString(value[0], "AAPL:AKAnnotationObject", (CGPDFStringRef *)key),
          *(_QWORD *)key))
    {
      v6.receiver = v1;
      v6.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
      objc_msgSendSuper2(&v6, sel__addAKAnnotationToDictionary_, to.value);
    }
  }
  if (to.value)
  {
    v4 = *(void (**)(__CFDictionary *))&v1[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
    if (v4)
    {
      v5 = to.value;
      outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?((uint64_t)v4);
      v4(v5);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);

    }
  }
}

id CanvasElementPDFAnnotation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for CanvasElementPDFAnnotation()
{
  return type metadata accessor for CanvasElementPDFAnnotation();
}

void type metadata completion function for CanvasElementPDFAnnotation()
{
  unint64_t v0;

  type metadata accessor for CRKeyPath?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for CanvasElementPDFAnnotation()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for CRKeyPath?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRKeyPath?)
  {
    type metadata accessor for CRKeyPath();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRKeyPath?);
  }
}

uint64_t storeEnumTagSinglePayload for CanvasElementPDFAnnotation.AKWritingBehavior(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDCE1130 + 4 * byte_1DDF3C475[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDCE1164 + 4 * byte_1DDF3C470[v4]))();
}

uint64_t sub_1DDCE1164(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE116C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCE1174);
  return result;
}

uint64_t sub_1DDCE1180(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCE1188);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDCE118C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE1194(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasElementPDFAnnotation.AKWritingBehavior()
{
  return &type metadata for CanvasElementPDFAnnotation.AKWritingBehavior;
}

unint64_t lazy protocol witness table accessor for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior;
  if (!lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasElementPDFAnnotation.AKWritingBehavior, &type metadata for CanvasElementPDFAnnotation.AKWritingBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasElementPDFAnnotation.AKWritingBehavior and conformance CanvasElementPDFAnnotation.AKWritingBehavior);
  }
  return result;
}

uint64_t outlined destroy of CRKeyPath?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id specialized CanvasElementPDFAnnotation.init(bounds:forType:containerBounds:mediaBox:render:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, double Height)
{
  _BYTE *v9;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  double v25;
  double v26;
  _BYTE *v27;
  double MinX;
  CGFloat v29;
  double Width;
  uint64_t v31;
  objc_super v33;
  char v34[8];
  double v35;
  double v36;
  char v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v19 = (uint64_t *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_render];
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_containerBounds];
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_BYTE *)(v20 + 32) = 1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation] = 0;
  v21 = &v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation];
  *v21 = 0;
  v21[1] = 0;
  v22 = &v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId];
  v23 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation] = 2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__interactiveBackgroundColor] = 0;
  outlined init with take of (key: Int, value: AnyCRValue)?(a3, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if (v37 == 1)
  {
    v24 = v9;
  }
  else
  {
    v25 = v35;
    v26 = v36;
    v27 = v9;
    v38.origin.x = a6;
    v38.origin.y = a7;
    v38.size.width = a8;
    v38.size.height = Height;
    MinX = CGRectGetMinX(v38);
    v39.origin.x = a6;
    v39.origin.y = a7;
    v39.size.width = a8;
    v39.size.height = Height;
    v29 = v26 + v25 + v25 - CGRectGetMaxY(v39);
    v40.origin.x = a6;
    v40.origin.y = a7;
    v40.size.width = a8;
    v40.size.height = Height;
    Width = CGRectGetWidth(v40);
    v41.origin.x = a6;
    v41.origin.y = a7;
    v41.size.width = a8;
    v41.size.height = Height;
    Height = CGRectGetHeight(v41);
    a8 = Width;
    a6 = MinX;
    a7 = v29;
  }
  v31 = *v19;
  *v19 = a4;
  v19[1] = a5;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v31);
  outlined init with take of (key: Int, value: AnyCRValue)?(a2, v20, (uint64_t *)&demangling cache variable for type metadata for CGRect?);

  v33.receiver = v9;
  v33.super_class = (Class)type metadata accessor for CanvasElementPDFAnnotation();
  return objc_msgSendSuper2(&v33, sel_initWithBounds_forType_withProperties_, a1, 0, a6, a7, a8, Height);
}

uint64_t sub_1DDCE1460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Capsule();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(void **)(v0 + 56);
  if (v8 != (void *)1)
  {

  }
  v9 = (v3 + 161) & ~v3;
  v10 = (v9 + v4 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v9, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v10, v5);
  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = *(_QWORD *)(v4 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 161) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Capsule() - 8) + 80);
  closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a1, (uint64_t)(v1 + 6), (uint64_t)(v1 + 16), (uint64_t)v1 + v8, (uint64_t)v1 + ((v8 + v9 + v10) & ~v10), v3, v4, v5, v6);
}

uint64_t outlined retain of PaperRenderableOptions?(uint64_t a1)
{
  outlined copy of PaperRenderableOptions?(*(_QWORD *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64));
  return a1;
}

id outlined copy of PaperRenderableOptions?(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v9;
  id result;

  if (a2 != (void *)1)
  {
    v9 = a9;
    return a2;
  }
  return result;
}

uint64_t sub_1DDCE1654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v13 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  swift_unknownObjectRelease();
  v8 = *(void **)(v0 + 72);
  if (v8 != (void *)1)
  {

  }
  v9 = (v2 + 177) & ~v2;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v9, v13);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v11, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v3 = *(_QWORD *)(v1[5] - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 177) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1[2];
  v9 = v1[3];
  v10 = *(_QWORD *)((char *)v1 + v5);
  v13 = (uint64_t)v1 + v7;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in closure #1 in CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(a1, v8, v9, (uint64_t)(v1 + 8), (uint64_t)(v1 + 18), (uint64_t)v1 + v4, v10, v13);
}

void RoundedRect.init(radius:)(double *a1@<X8>, double a2@<D0>)
{
  if (a2 > 0.5)
    a2 = 0.5;
  if (a2 < 0.0)
    a2 = 0.0;
  *a1 = a2;
}

PaperKit::RegularPolygon __swiftcall RegularPolygon.init(sides:)(PaperKit::RegularPolygon sides)
{
  unint64_t *v1;
  unint64_t v2;

  v2 = 3;
  if (sides.sides > 3)
    v2 = sides.sides;
  if (v2 >= 0xC)
    v2 = 12;
  *v1 = v2;
  return sides;
}

uint64_t Star.init(points:)@<X0>(uint64_t result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = result;
  if (one-time initialization token for defaultInnerRadius != -1)
    result = swift_once();
  v4 = 3;
  if (v2 > 3)
    v4 = v2;
  v5 = static Star.defaultInnerRadius;
  if (v4 >= 0xA)
    v4 = 10;
  *a2 = v4;
  a2[1] = v5;
  return result;
}

void CalloutBubble.init(tailPosition:halfTailAngle:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

PaperKit::ArrowShape __swiftcall ArrowShape.init(cornerControl:)(PaperKit::ArrowShape cornerControl)
{
  CGFloat *v1;

  *v1 = cornerControl.cornerControl.x;
  v1[1] = cornerControl.cornerControl.y;
  return cornerControl;
}

void __swiftcall Line.init(start:control:end:)(PaperKit::Line *__return_ptr retstr, CGPoint start, CGPoint control, CGPoint end)
{
  retstr->start.x = start.x;
  retstr->start.y = start.y;
  retstr->control.x = control.x;
  retstr->control.y = control.y;
  retstr->end.x = end.x;
  retstr->end.y = end.y;
}

uint64_t ControlPointType.isControlHandle.getter()
{
  _BYTE *v0;

  return (*v0 < 0xAuLL) & (0x3FAu >> *v0);
}

uint64_t ControlPointType.accessibilityIdentifier.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1DDCE19A4 + 4 * byte_1DDF3C590[*v0]))(0xD000000000000015, 0x80000001DDF4FBD0);
}

unint64_t sub_1DDCE19A4()
{
  return 0xD000000000000016;
}

void *TaggedValue_9<>.controlPoints.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  v5 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == *MEMORY[0x1E0D12038])
    return &outlined read-only object #0 of TaggedValue_9<>.controlPoints.getter;
  if (v5 == *MEMORY[0x1E0D12048])
    return &outlined read-only object #1 of TaggedValue_9<>.controlPoints.getter;
  if (v5 == *MEMORY[0x1E0D12050])
    return &outlined read-only object #2 of TaggedValue_9<>.controlPoints.getter;
  if (v5 == *MEMORY[0x1E0D12058])
    return &outlined read-only object #3 of TaggedValue_9<>.controlPoints.getter;
  if (v5 == *MEMORY[0x1E0D12060])
    return &outlined read-only object #4 of TaggedValue_9<>.controlPoints.getter;
  if (v5 == *MEMORY[0x1E0D12068])
    return &outlined read-only object #5 of TaggedValue_9<>.controlPoints.getter;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (void *)MEMORY[0x1E0DEE9D8];
}

uint64_t TaggedValue_9<>.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void (*v33)(char *);
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CGFloat v38;
  CGFloat c;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  double v46;
  CGPoint v47;
  CGFloat v48;
  CGFloat d;
  double Width;
  double v51;
  double Height;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  double v59;
  CGPoint v60;
  double v61;
  void (*v62)(char *);
  char v63;
  CGFloat v64;
  CGFloat b;
  uint64_t v66;
  int v67;
  uint64_t v68;
  CGPoint v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  CGAffineTransform v74;
  CGAffineTransform v75;
  CGPoint v76;
  CGPoint v77;
  CGPoint v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;

  v73 = a3;
  v12 = *a2;
  v11 = a2[1];
  v14 = a2[2];
  v13 = a2[3];
  v16 = a2[4];
  v15 = a2[5];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v72 - v24;
  v26 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  v27 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v25, v17);
  if ((_DWORD)v27 == *MEMORY[0x1E0D12038])
  {
    v28 = v26;
    v29 = v27;
    (*(void (**)(char *, uint64_t))(v18 + 96))(v25, v17);
    v30 = *((_OWORD *)v25 + 1);
    *(_OWORD *)&v75.a = *(_OWORD *)v25;
    *(_OWORD *)&v75.c = v30;
    *(_OWORD *)&v75.tx = *((_OWORD *)v25 + 2);
    LOBYTE(v74.a) = v28;
    Line.subscript.setter((unsigned __int8 *)&v74, a2, v73, a4 & 1, a5, a6);
    v31 = *(_OWORD *)&v75.c;
    *(_OWORD *)v21 = *(_OWORD *)&v75.a;
    *((_OWORD *)v21 + 1) = v31;
    *((_OWORD *)v21 + 2) = *(_OWORD *)&v75.tx;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v21, v29, v17);
    return TaggedValue_9.taggedEnum.setter();
  }
  v32 = v17;
  if ((_DWORD)v27 == *MEMORY[0x1E0D12048])
  {
    v33 = *(void (**)(char *))(v18 + 96);
    v34 = v26;
    v35 = v17;
    v36 = v18;
    v37 = v27;
    v33(v25);
    v38 = *((double *)v25 + 2);
    *(_OWORD *)&v75.a = *(_OWORD *)v25;
    v75.c = v38;
    LOBYTE(v74.a) = v34;
    specialized CalloutBubble.subscript.setter((unsigned __int8 *)&v74, a2, a5, a6);
    c = v75.c;
    *(_OWORD *)v21 = *(_OWORD *)&v75.a;
    *((CGFloat *)v21 + 2) = c;
LABEL_5:
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v21, v37, v35);
    return TaggedValue_9.taggedEnum.setter();
  }
  if ((_DWORD)v27 == *MEMORY[0x1E0D12050])
  {
    v41 = v18;
    v42 = v27;
    v43 = v41;
    v44 = v26;
    v45 = v32;
    (*(void (**)(char *))(v41 + 96))(v25);
    if (v44 == 5)
    {
      v75.a = v12;
      v75.b = v11;
      v75.c = v14;
      v75.d = v13;
      v75.tx = v16;
      v75.ty = v15;
      CGAffineTransformInvert(&v74, &v75);
      v75 = v74;
      v76.x = a5;
      v76.y = a6;
      *(_QWORD *)&v46 = *(_OWORD *)&CGPointApplyAffineTransform(v76, &v75);
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&v75, 0.0);
      v47 = *(CGPoint *)&v75.a;
      v48 = v75.c;
      d = v75.d;
      v79.origin = *(CGPoint *)&v75.a;
      v79.size.width = v75.c;
      v79.size.height = v75.d;
      Width = CGRectGetWidth(v79);
      v80.origin = v47;
      v80.size.width = v48;
      v80.size.height = d;
      v51 = CGRectGetWidth(v80);
      v81.origin = v47;
      v81.size.width = v48;
      v81.size.height = d;
      Height = CGRectGetHeight(v81);
      if (Height >= v51)
        Height = v51;
      v53 = v46 * Width / Height;
      if (v53 < 0.0)
        v53 = 0.0;
      if (v53 > 0.5)
        v53 = 0.5;
    }
    else
    {
      v53 = *(double *)v25;
    }
    *(double *)v21 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 104))(v21, v42, v45);
    return TaggedValue_9.taggedEnum.setter();
  }
  if ((_DWORD)v27 == *MEMORY[0x1E0D12058])
  {
    v54 = v18;
    v55 = v27;
    v56 = v54;
    v57 = v26;
    v58 = v32;
    (*(void (**)(char *))(v54 + 96))(v25);
    v59 = *(double *)v25;
    v75.a = v12;
    v75.b = v11;
    v75.c = v14;
    v75.d = v13;
    v75.tx = v16;
    v75.ty = v15;
    CGAffineTransformInvert(&v74, &v75);
    v75 = v74;
    v77.x = a5;
    v77.y = a6;
    v60 = CGPointApplyAffineTransform(v77, &v75);
    if (v57 == 6)
    {
      specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(3, 12, v60.x, v60.y);
      v59 = v61;
    }
    *(double *)v21 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 104))(v21, v55, v58);
    return TaggedValue_9.taggedEnum.setter();
  }
  if ((_DWORD)v27 == *MEMORY[0x1E0D12060])
  {
    v62 = *(void (**)(char *))(v18 + 96);
    v63 = v26;
    v35 = v17;
    v36 = v18;
    v37 = v27;
    v62(v25);
    v64 = *((double *)v25 + 1);
    v75.a = *(CGFloat *)v25;
    v75.b = v64;
    LOBYTE(v74.a) = v63;
    specialized Star.subscript.setter((unsigned __int8 *)&v74, a2, a5, a6);
    b = v75.b;
    *(CGFloat *)v21 = v75.a;
    *((CGFloat *)v21 + 1) = b;
    goto LABEL_5;
  }
  if ((_DWORD)v27 == *MEMORY[0x1E0D12068])
  {
    v66 = v27;
    v67 = v26;
    v68 = v32;
    (*(void (**)(char *))(v18 + 96))(v25);
    if (v67 == 9)
    {
      v75.a = v12;
      v75.b = v11;
      v75.c = v14;
      v75.d = v13;
      v75.tx = v16;
      v75.ty = v15;
      CGAffineTransformInvert(&v74, &v75);
      v75 = v74;
      v78.x = a5;
      v78.y = a6;
      v69 = CGPointApplyAffineTransform(v78, &v75);
      v70 = fmin(v69.x, 1.0);
      if (v70 < 0.0)
        v70 = 0.0;
      v71 = fmin(v69.y, 0.5);
      if (v71 < 0.0)
        v71 = 0.0;
    }
    else
    {
      v70 = *(double *)v25;
      v71 = *((double *)v25 + 1);
    }
    *(double *)v21 = v70;
    *((double *)v21 + 1) = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v21, v66, v68);
    return TaggedValue_9.taggedEnum.setter();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, v17);
}

uint64_t TaggedValue_9<>.localizedName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  int v5;
  Class isa;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t countAndFlagsBits;
  Swift::String v16;
  Swift::String_optional v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (id *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  v5 = (*(uint64_t (**)(id *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == *MEMORY[0x1E0D12028])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD00000000000002ALL;
    v19 = 0x80000001DDF55560;
    v8 = 0x6C676E6174636552;
    v9 = 0xE900000000000065;
LABEL_38:
    v10 = 0x617A696C61636F4CLL;
    v11 = 0xEB00000000656C62;
    v12 = 0;
    v13 = 0xE000000000000000;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, *(Swift::String_optional *)&v10, (NSBundle)isa, *(Swift::String *)&v12, *(Swift::String *)&v7)._countAndFlagsBits;
  }
  if (v5 == *MEMORY[0x1E0D12030])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD000000000000029;
    v19 = 0x80000001DDF55530;
    v8 = 0x657370696C6C45;
    v9 = 0xE700000000000000;
    goto LABEL_38;
  }
  if (v5 == *MEMORY[0x1E0D12038])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v19 = 0x80000001DDF55500;
    v8 = 1701734732;
LABEL_13:
    v9 = 0xE400000000000000;
    v10 = 0x617A696C61636F4CLL;
    v11 = 0xEB00000000656C62;
    v12 = 0;
    v13 = 0xE000000000000000;
    v7 = 0xD000000000000025;
    return NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, *(Swift::String_optional *)&v10, (NSBundle)isa, *(Swift::String *)&v12, *(Swift::String *)&v7)._countAndFlagsBits;
  }
  if (v5 == *MEMORY[0x1E0D12040])
  {
    (*(void (**)(id *, uint64_t))(v1 + 96))(v4, v0);

    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD00000000000002CLL;
    v19 = 0x80000001DDF554D0;
    v8 = 0x50207265697A6542;
    v9 = 0xEB00000000687461;
    goto LABEL_38;
  }
  if (v5 == *MEMORY[0x1E0D12048])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD00000000000002ELL;
    v19 = 0x80000001DDF554A0;
    v8 = 0x4220686365657053;
    v9 = 0xED0000656C626275;
    goto LABEL_38;
  }
  if (v5 == *MEMORY[0x1E0D12050])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v8 = 0xD000000000000011;
    v7 = 0xD000000000000032;
    v19 = 0x80000001DDF55460;
    v9 = 0x80000001DDF50520;
    goto LABEL_38;
  }
  if (v5 == *MEMORY[0x1E0D12058])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD000000000000030;
    v19 = 0x80000001DDF55420;
    v8 = 0x2072616C75676552;
    v9 = 0xEF6E6F67796C6F50;
    goto LABEL_38;
  }
  if (v5 == *MEMORY[0x1E0D12060])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v19 = 0x80000001DDF553F0;
    v8 = 1918989395;
    goto LABEL_13;
  }
  if (v5 == *MEMORY[0x1E0D12068])
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v7 = 0xD000000000000027;
    v19 = 0x80000001DDF553C0;
    v8 = 0x776F727241;
    v9 = 0xE500000000000000;
    goto LABEL_38;
  }
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v21._countAndFlagsBits = 0xD000000000000029;
  v21._object = (void *)0x80000001DDF55390;
  v16._countAndFlagsBits = 0x6E776F6E6B6E55;
  v16._object = (void *)0xE700000000000000;
  v17.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v17.value._object = (void *)0xEB00000000656C62;
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, v17, paperKitBundle, v18, v21)._countAndFlagsBits;
  (*(void (**)(id *, uint64_t))(v1 + 8))(v4, v0);
  return countAndFlagsBits;
}

PaperKit::ControlPointType_optional __swiftcall ControlPointType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 10;
  if ((unint64_t)rawValue < 0xA)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::ControlPointType_optional)rawValue;
}

uint64_t ControlPointType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PaperKit::ControlPointType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ControlPointType(Swift::Int *a1)
{
  return ControlPointType.init(rawValue:)(*a1);
}

uint64_t static Rectangle.CodingKeys.allCases.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t Rectangle.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Rectangle.CodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Rectangle.CodingKeys()
{
  return 0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Rectangle.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Rectangle.CodingKeys()
{
  lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Rectangle.CodingKeys()
{
  lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t static Rectangle.== infix(_:_:)()
{
  return 1;
}

uint64_t Rectangle.encode(to:)(_QWORD *a1)
{
  return Rectangle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t Rectangle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Rectangle(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Rectangle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Rectangle.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, (void (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Rectangle()
{
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Rectangle()
{
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Rectangle()
{
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t RoundedRect.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void *static RoundedRect.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static RoundedRect.CodingKeys.allCases.getter;
}

uint64_t RoundedRect.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RoundedRect.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t RoundedRect.CodingKeys.stringValue.getter()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RoundedRect.CodingKeys()
{
  return 0x737569646172;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RoundedRect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RoundedRect.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance RoundedRect.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance RoundedRect.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RoundedRect.CodingKeys()
{
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RoundedRect.CodingKeys()
{
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void RoundedRect.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

BOOL static RoundedRect.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t RoundedRect.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RoundedRect.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = v8;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Int RoundedRect.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t RoundedRect.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RoundedRect.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RoundedRect@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return RoundedRect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RoundedRect(_QWORD *a1)
{
  return RoundedRect.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance RoundedRect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect, (void (*)(void))lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance RoundedRect()
{
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance RoundedRect()
{
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance RoundedRect()
{
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t Ellipse.CodingKeys.init(stringValue:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void Ellipse.CodingKeys.init(intValue:)(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static Ellipse.CodingKeys.allCases.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t Ellipse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Ellipse.CodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Ellipse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Ellipse.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Ellipse.CodingKeys()
{
  lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Ellipse.CodingKeys()
{
  lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t static Ellipse.== infix(_:_:)()
{
  return 1;
}

uint64_t Ellipse.encode(to:)(_QWORD *a1)
{
  return Rectangle.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Ellipse.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t Rectangle.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

Swift::Int Ellipse.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t Ellipse.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Ellipse()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Ellipse()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Ellipse(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance Rectangle(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<Ellipse.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Rectangle(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Ellipse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Ellipse and conformance Ellipse, (void (*)(void))lazy protocol witness table accessor for type Ellipse and conformance Ellipse);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  a5();
  a6();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Ellipse()
{
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Ellipse()
{
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Ellipse()
{
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  return CRValueStruct.minEncodingVersion.getter();
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::Line::CodingKeys_optional)rawValue;
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::Line::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x7472617473 && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x6C6F72746E6F63 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 6581861 && object == (void *)0xE300000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 2;
    else
      v7 = 3;
  }
  *v2 = v7;
  return result;
}

PaperKit::Line::CodingKeys_optional __swiftcall Line.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)intValue < 3)
    v2 = intValue;
  *v1 = v2;
  return (PaperKit::Line::CodingKeys_optional)intValue;
}

void *static Line.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Line.CodingKeys.allCases.getter;
}

uint64_t Line.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Line.CodingKeys.stringValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6F72746E6F63;
  if (*v0 != 1)
    v1 = 6581861;
  if (*v0)
    return v1;
  else
    return 0x7472617473;
}

PaperKit::Line::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Line.CodingKeys(Swift::Int *a1)
{
  return Line.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Line.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6F72746E6F63;
  if (*v0 != 1)
    v1 = 6581861;
  if (*v0)
    return v1;
  else
    return 0x7472617473;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Line.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Line.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Line.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Line.CodingKeys()
{
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Line.CodingKeys()
{
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Line.subscript.setter(unsigned __int8 *a1, CGFloat *a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6)
{
  CGPoint *v6;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  int v17;
  CGPoint v18;
  double x;
  double y;
  double v21;
  double v22;
  CGPoint v23;
  CGPoint v24;
  CGPoint v25;
  double v26;
  CGPoint v27;
  double sinval;
  CGPoint v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double cosval;
  __double2 v35;
  double v36;
  double v37;
  double v38;
  double v39;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v46;
  CGPoint v47;
  double v48;
  double v49;
  double v50;
  double v51;
  CGPoint v52;
  CGPoint v53;
  CGPoint v54;
  CGPoint v55;
  CGFloat v56;
  CGFloat v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  double v65;
  double v66;
  CGFloat v67;
  CGFloat v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  __int128 v72;
  double v73;
  CGFloat v74;
  __int128 v75;
  double v76;
  CGPoint v77;
  double v78;
  double v79;
  CGPoint v80;
  CGAffineTransform v81;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v84;
  CGPoint v85;
  CGPoint v86;
  CGPoint v87;
  CGPoint v88;
  CGPoint v89;
  CGPoint v90;
  CGPoint v91;
  CGPoint v92;
  CGPoint v93;
  CGPoint v94;

  v12 = *a2;
  v11 = a2[1];
  v14 = a2[2];
  v13 = a2[3];
  v16 = a2[4];
  v15 = a2[5];
  v17 = *a1;
  v84.a = *a2;
  v84.b = v11;
  v84.c = v14;
  v84.d = v13;
  v84.tx = v16;
  v84.ty = v15;
  CGAffineTransformInvert(&t1, &v84);
  v84 = t1;
  v85.x = a5;
  v85.y = a6;
  v18 = CGPointApplyAffineTransform(v85, &v84);
  x = v18.x;
  y = v18.y;
  if (v17 == 2)
  {
LABEL_4:
    if (v17)
    {
      v22 = v6->x;
      v21 = v6->y;
    }
    else
    {
      v21 = v18.y;
      v22 = v18.x;
      x = v6[2].x;
      y = v6[2].y;
    }
    v77.x = x;
    v77.y = y;
    v80.x = v22;
    v80.y = v21;
    if ((a4 & 1) == 0
      && fabs(v6[1].x + (v6->x + v6[2].x) * -0.5) < 0.001
      && fabs(v6[1].y + (v6->y + v6[2].y) * -0.5) < 0.001)
    {
      v88.x = x - v22;
      v88.y = y - v21;
      v84.a = v12;
      v84.b = v11;
      v84.c = v14;
      v84.d = v13;
      v84.tx = v16;
      v84.ty = v15;
      v65 = y - v21;
      v66 = x - v22;
      v27 = CGPointApplyAffineTransform(v88, &v84);
      v67 = v12;
      v68 = v11;
      v84.a = v12;
      v84.b = v11;
      v84.c = v14;
      v84.d = v13;
      v71 = v16;
      v84.tx = v16;
      v84.ty = v15;
      v74 = v15;
      sinval = 0.0;
      v89.x = 0.0;
      v89.y = 0.0;
      v29 = CGPointApplyAffineTransform(v89, &v84);
      v30 = v27.x - v29.x;
      v31 = v27.y - v29.y;
      v32 = atan2(v27.y - v29.y, v27.x - v29.x);
      if (one-time initialization token for resizeLineSnapToAngleStep != -1)
        swift_once();
      v69 = v14;
      v70 = v13;
      v33 = *(double *)&static UIConstants.resizeLineSnapToAngleStep
          * rint(v32 / *(double *)&static UIConstants.resizeLineSnapToAngleStep);
      cosval = 1.0;
      if (v33 != 0.0)
      {
        v35 = __sincos_stret(v33);
        cosval = v35.__cosval;
        sinval = v35.__sinval;
      }
      v36 = sqrt(v30 * v30 + v31 * v31);
      v37 = v36 * cosval;
      v38 = v36 * sinval;
      v39 = sqrt((v30 - v36 * cosval) * (v30 - v36 * cosval) + (v31 - v38) * (v31 - v38));
      v15 = v74;
      if (one-time initialization token for resizeLineSnapToAngleThreshold != -1)
      {
        v61 = v36 * cosval;
        v62 = v36 * sinval;
        swift_once();
        v38 = v62;
        v37 = v61;
      }
      v16 = v71;
      v12 = v67;
      v11 = v68;
      if (v39 >= *(double *)&static UIConstants.resizeLineSnapToAngleThreshold / *(double *)&a3)
      {
        v14 = v69;
      }
      else
      {
        v84.a = v67;
        v84.b = v68;
        v84.c = v69;
        v84.d = v13;
        v84.tx = v71;
        v84.ty = v74;
        v63 = v38;
        v64 = v37;
        CGAffineTransformInvert(&t1, &v84);
        a = t1.a;
        b = t1.b;
        c = t1.c;
        d = t1.d;
        tx = t1.tx;
        ty = t1.ty;
        v84 = t1;
        v90.y = v63;
        v90.x = v64;
        v46 = CGPointApplyAffineTransform(v90, &v84);
        v84.a = a;
        v84.b = b;
        v84.c = c;
        v84.d = d;
        v84.tx = tx;
        v84.ty = ty;
        v91.x = 0.0;
        v91.y = 0.0;
        v47 = CGPointApplyAffineTransform(v91, &v84);
        v48 = sqrt((v46.x - v47.x) * (v46.x - v47.x) + (v46.y - v47.y) * (v46.y - v47.y));
        v49 = sqrt(v66 * v66 + v65 * v65);
        v50 = v49 * ((v46.x - v47.x) / v48);
        v51 = v49 * ((v46.y - v47.y) / v48);
        if (v17)
        {
          v77.x = v80.x + v50;
          v77.y = v80.y + v51;
        }
        else
        {
          v80.x = x - v50;
          v80.y = y - v51;
        }
        v15 = v74;
        v13 = v70;
        v16 = v71;
        v11 = v68;
        v14 = v69;
        v12 = v67;
      }
    }
    v92 = *v6;
    v84.a = v12;
    v84.b = v11;
    v84.c = v14;
    v84.d = v13;
    v84.tx = v16;
    v84.ty = v15;
    v52 = CGPointApplyAffineTransform(v92, &v84);
    v93 = v6[2];
    v84.a = v12;
    v84.b = v11;
    v84.c = v14;
    v84.d = v13;
    v84.tx = v16;
    v84.ty = v15;
    v53 = CGPointApplyAffineTransform(v93, &v84);
    v84.a = v12;
    v84.b = v11;
    v84.c = v14;
    v84.d = v13;
    v84.tx = v16;
    v84.ty = v15;
    v54 = CGPointApplyAffineTransform(v80, &v84);
    v84.a = v12;
    v84.b = v11;
    v84.c = v14;
    v84.d = v13;
    v84.tx = v16;
    v84.ty = v15;
    v55 = CGPointApplyAffineTransform(v77, &v84);
    specialized CGAffineTransform.init(transformMovingPoints:to:)(&v84, v52.x, v52.y, v53.x, v53.y, v54.x, v54.y, v55.x, v55.y);
    t1.a = v12;
    t1.b = v11;
    t1.c = v14;
    t1.d = v13;
    t1.tx = v16;
    t1.ty = v15;
    t2 = v84;
    CGAffineTransformConcat(&v81, &t1, &t2);
    v75 = *(_OWORD *)&v81.a;
    v72 = *(_OWORD *)&v81.c;
    v56 = v81.tx;
    v57 = v81.ty;
    t1.a = v12;
    t1.b = v11;
    t1.c = v14;
    t1.d = v13;
    t1.tx = v16;
    t1.ty = v15;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.a = v75;
    *(_OWORD *)&t1.c = v72;
    t1.tx = v56;
    t1.ty = v57;
    CGAffineTransformConcat(&v81, &t1, &t2);
    v58 = *(_OWORD *)&v81.a;
    v59 = *(_OWORD *)&v81.c;
    v60 = *(_OWORD *)&v81.tx;
    *v6 = v80;
    v94 = v6[1];
    *(_OWORD *)&t1.a = v58;
    *(_OWORD *)&t1.c = v59;
    *(_OWORD *)&t1.tx = v60;
    v6[1] = CGPointApplyAffineTransform(v94, &t1);
    v6[2] = v77;
    return;
  }
  if (v17 != 1)
  {
    if (v17)
      return;
    goto LABEL_4;
  }
  if ((a4 & 1) != 0)
    goto LABEL_24;
  v78 = v6->y;
  v79 = v6->x;
  v76 = v6[2].x;
  v73 = v6[2].y;
  v23 = CGPoint.closestPointOnLineSegment(from:to:)(*v6, v6[2]);
  v86.x = v18.x - v23.x;
  v84.a = v12;
  v84.b = v11;
  v86.y = v18.y - v23.y;
  v84.c = v14;
  v84.d = v13;
  v84.tx = v16;
  v84.ty = v15;
  v24 = CGPointApplyAffineTransform(v86, &v84);
  v84.a = v12;
  v84.b = v11;
  v84.c = v14;
  v84.d = v13;
  v84.tx = v16;
  v84.ty = v15;
  v87.x = 0.0;
  v87.y = 0.0;
  v25 = CGPointApplyAffineTransform(v87, &v84);
  v26 = sqrt((v24.x - v25.x) * (v24.x - v25.x) + (v24.y - v25.y) * (v24.y - v25.y));
  if (one-time initialization token for resizeLineSnapToStraightThreshold != -1)
    swift_once();
  if (v26 >= *(double *)&static UIConstants.resizeLineSnapToStraightThreshold / *(double *)&a3)
  {
LABEL_24:
    v6[1] = v18;
  }
  else
  {
    v6[1].x = (v79 + v76) * 0.5;
    v6[1].y = (v78 + v73) * 0.5;
  }
}

void Line.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *v0;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v5;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
}

uint64_t Line.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Line.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[4];
  v14 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = v9;
  v19 = v10;
  v17 = 0;
  type metadata accessor for CGPoint(0);
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA20]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v18 = v11;
    v19 = v12;
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = v13;
    v19 = v14;
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int Line.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v1;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v3;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v4;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v5;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v6;
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t Line.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Line.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    v15 = 0;
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA30]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v14;
    v15 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v14;
    v15 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v14;
    *a2 = v10;
    a2[1] = v12;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Line()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  CGPoint.hash(into:)(v3, v4);
  CGPoint.hash(into:)(v5, v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Line()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = v0[5];
  CGPoint.hash(into:)(*v0, v0[1]);
  CGPoint.hash(into:)(v1, v2);
  CGPoint.hash(into:)(v3, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Line()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  CGPoint.hash(into:)(v3, v4);
  CGPoint.hash(into:)(v5, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Line@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Line.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Line(_QWORD *a1)
{
  return Line.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Line()
{
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type Line and conformance Line();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Line()
{
  lazy protocol witness table accessor for type Line and conformance Line();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Line()
{
  lazy protocol witness table accessor for type Line and conformance Line();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Line()
{
  lazy protocol witness table accessor for type Line and conformance Line();
  return CRValueStruct.minEncodingVersion.getter();
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (PaperKit::CalloutBubble::CodingKeys_optional)rawValue;
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::CalloutBubble::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x69736F506C696174 && stringValue._object == (void *)0xEC0000006E6F6974;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x6C696154666C6168 && object == (void *)0xED0000656C676E41)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *v2 = v7;
  return result;
}

PaperKit::CalloutBubble::CodingKeys_optional __swiftcall CalloutBubble.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  if (intValue)
  {
    if (intValue == 1)
      *v1 = 1;
    else
      *v1 = 2;
  }
  else
  {
    *v1 = 0;
  }
  return (PaperKit::CalloutBubble::CodingKeys_optional)intValue;
}

void *static CalloutBubble.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static CalloutBubble.CodingKeys.allCases.getter;
}

uint64_t CalloutBubble.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CalloutBubble.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t CalloutBubble.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C696154666C6168;
  else
    return 0x69736F506C696174;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CalloutBubble.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C696154666C6168;
  else
    return 0x69736F506C696174;
}

void protocol witness for static CaseIterable.allCases.getter in conformance CalloutBubble.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance CalloutBubble.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance CalloutBubble.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CalloutBubble.CodingKeys()
{
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CalloutBubble.CodingKeys()
{
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  return CodingKey.debugDescription.getter();
}

CGPathRef __swiftcall CalloutBubble.path(in:)(CGAffineTransform *in)
{
  double *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  __int128 v7;
  uint64_t v8;
  double v9;
  double v10;
  CGPath *Mutable;
  double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  CGAffineTransform v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *v1;
  v4 = v1[1];
  v5 = *v1 + -0.5;
  v6 = v4 + -0.5;
  if (v5 * v5 + v6 * v6 >= 0.25)
  {
    v12 = v1[2];
    v13 = atan2(v6, v5) - v12;
    Mutable = CGPathCreateMutable();
    v14 = 0.5;
    CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v4, *(unint64_t *)&v3), in);
    v15 = 1.0;
    if (v13 != 0.0)
    {
      v16 = __sincos_stret(v13);
      v15 = v16.__cosval * 0.5 + 0.5;
      v14 = v16.__sinval * 0.5 + 0.5;
    }
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v14, *(unint64_t *)&v15), in);
    CGPathCloseSubpath(Mutable);
  }
  else
  {
    v7 = *(_OWORD *)&in->c;
    *(_OWORD *)&v18.a = *(_OWORD *)&in->a;
    *(_OWORD *)&v18.c = v7;
    *(_OWORD *)&v18.tx = *(_OWORD *)&in->tx;
    v8 = 0;
    *(_QWORD *)&v7 = 0;
    v9 = 1.0;
    v10 = 1.0;
    return CGPathCreateWithEllipseInRect(*(CGRect *)((char *)&v7 - 8), &v18);
  }
  return Mutable;
}

void CalloutBubble.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;

  v1 = v0[1];
  v2 = v0[2];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *v0;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

BOOL static CalloutBubble.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t CalloutBubble.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CalloutBubble.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[0] = v9;
  v13[1] = v10;
  v14 = 0;
  type metadata accessor for CGPoint(0);
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA20]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v13[0] = v11;
    v14 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int CalloutBubble.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v3;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t CalloutBubble.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CalloutBubble.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    v15 = 0;
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA30]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v14[0];
    v11 = v14[1];
    v15 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v14[0];
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance CalloutBubble()
{
  double *v0;
  double v1;
  double v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 2);
  CGPoint.hash(into:)(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v3;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CalloutBubble()
{
  double *v0;
  double v1;
  double v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v3;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CalloutBubble(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t protocol witness for Decodable.init(from:) in conformance CalloutBubble@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CalloutBubble.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CalloutBubble(_QWORD *a1)
{
  return CalloutBubble.encode(to:)(a1);
}

double protocol witness for CRType.copy(renamingReferences:) in conformance CalloutBubble@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CalloutBubble()
{
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CalloutBubble()
{
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CalloutBubble()
{
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CalloutBubble()
{
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t RegularPolygon.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7365646973 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void *static RegularPolygon.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static RegularPolygon.CodingKeys.allCases.getter;
}

uint64_t RegularPolygon.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RegularPolygon.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t RegularPolygon.CodingKeys.stringValue.getter()
{
  return 0x7365646973;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegularPolygon.CodingKeys()
{
  return 0x7365646973;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegularPolygon.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7365646973 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RegularPolygon.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance RegularPolygon.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance RegularPolygon.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegularPolygon.CodingKeys()
{
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegularPolygon.CodingKeys()
{
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  return CodingKey.debugDescription.getter();
}

CGPathRef __swiftcall RegularPolygon.path(in:)(CGAffineTransform *in)
{
  uint64_t *v1;
  CGFloat tx;
  CGFloat ty;
  uint64_t v4;
  CGPath *Mutable;
  CGPathRef result;
  uint64_t v7;
  double v8;
  double sinval;
  double cosval;
  __double2 v11;
  id v13;
  id v14;
  const CGPath *v15;
  __int128 v16;
  __int128 v17;
  CGAffineTransform v18;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v16 = *(_OWORD *)&in->c;
  v17 = *(_OWORD *)&in->a;
  tx = in->tx;
  ty = in->ty;
  v4 = *v1;
  Mutable = CGPathCreateMutable();
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  *(_OWORD *)&t2.a = v17;
  *(_OWORD *)&t2.c = v16;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v18, &t1, &t2);
  t1 = v18;
  CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = (double)v7 * 6.28318531 / (double)v4 + -1.57079633;
      if (v8 == 0.0)
      {
        sinval = 0.0;
        cosval = 1.0;
      }
      else
      {
        v11 = __sincos_stret(v8);
        cosval = v11.__cosval;
        sinval = v11.__sinval;
      }
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(sinval * 0.5, cosval * 0.5), &t1);
      if (v4 == v7)
        break;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        break;
      }
    }
    CGPathCloseSubpath(Mutable);
    v13 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, Mutable);
    v14 = objc_msgSend(v13, sel_bezierPathByReversingPath);

    v15 = (const CGPath *)objc_msgSend(v14, sel_CGPath);
    return v15;
  }
  return result;
}

void RegularPolygon.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static RegularPolygon.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t RegularPolygon.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegularPolygon.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Int RegularPolygon.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t RegularPolygon.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegularPolygon.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RegularPolygon@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return RegularPolygon.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RegularPolygon(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegularPolygon.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance RegularPolygon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon, (void (*)(void))lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance RegularPolygon()
{
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance RegularPolygon()
{
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance RegularPolygon()
{
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  return CRValueStruct.minEncodingVersion.getter();
}

void one-time initialization function for defaultInnerRadius()
{
  static Star.defaultInnerRadius = 0x3FD8722191A02D60;
}

unint64_t lazy protocol witness table accessor for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Rectangle.CodingKeys, &type metadata for Rectangle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle.CodingKeys and conformance Rectangle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys;
  if (!lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedRect.CodingKeys, &type metadata for RoundedRect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedRect.CodingKeys and conformance RoundedRect.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys;
  if (!lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Ellipse.CodingKeys, &type metadata for Ellipse.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ellipse.CodingKeys and conformance Ellipse.CodingKeys);
  }
  return result;
}

PaperKit::Star::CodingKeys_optional __swiftcall Star.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::Star::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x73746E696F70 && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x64615272656E6E69 && object == (void *)0xEB00000000737569)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *v2 = v7;
  return result;
}

void *static Star.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Star.CodingKeys.allCases.getter;
}

uint64_t Star.CodingKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x64615272656E6E69;
  else
    return 0x73746E696F70;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Star.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x64615272656E6E69;
  else
    return 0x73746E696F70;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Star.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Star.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Star.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Star.CodingKeys()
{
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Star.CodingKeys()
{
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  return CodingKey.debugDescription.getter();
}

CGPathRef __swiftcall Star.path(in:)(CGAffineTransform *in)
{
  uint64_t v1;
  CGFloat tx;
  CGFloat ty;
  uint64_t v4;
  double v5;
  CGPath *Mutable;
  CGPathRef result;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double cosval;
  double sinval;
  __double2 v16;
  __double2 v17;
  id v18;
  id v19;
  const CGPath *v20;
  __int128 v21;
  CGPoint to;
  CGAffineTransform v23;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v21 = *(_OWORD *)&in->c;
  to = *(CGPoint *)&in->a;
  tx = in->tx;
  ty = in->ty;
  v4 = *(_QWORD *)v1;
  v5 = *(double *)(v1 + 8);
  Mutable = CGPathCreateMutable();
  CGAffineTransformMakeTranslation(&t1, 0.5, 0.5);
  *(CGPoint *)&t2.a = to;
  *(_OWORD *)&t2.c = v21;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v23, &t1, &t2);
  t1 = v23;
  CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
  if (v4 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v4)
    {
      v8 = 0;
      v9 = 6.28318531 / (double)v4;
      v10 = v9 * 0.5;
      do
      {
        v11 = v9 * (double)v8 + -1.57079633;
        v12 = 0.0;
        v13 = 1.0;
        cosval = 1.0;
        sinval = 0.0;
        if (v11 != 0.0)
        {
          v16 = __sincos_stret(v9 * (double)v8 + -1.57079633);
          cosval = v16.__cosval;
          sinval = v16.__sinval;
        }
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(sinval * 0.5, cosval * 0.5), &t1);
        if (v10 + v11 != 0.0)
        {
          v17 = __sincos_stret(v10 + v11);
          v12 = v17.__sinval;
          v13 = v17.__cosval;
        }
        ++v8;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v5 * 0.5 * v12, v5 * 0.5 * v13), &t1);
      }
      while (v4 != v8);
    }
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(-0.5, 0x3C81A62633145C07), &t1);
    CGPathCloseSubpath(Mutable);
    v18 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, Mutable);
    v19 = objc_msgSend(v18, sel_bezierPathByReversingPath);

    v20 = (const CGPath *)objc_msgSend(v19, sel_CGPath);
    return v20;
  }
  return result;
}

void Star.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

BOOL static Star.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t Star.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Star.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12 = v9;
    v11[15] = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int Star.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t Star.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Star.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v15 = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v11 = v13[1];
    *a2 = v10;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for Hashable.hash(into:) in conformance Star()
{
  Swift::UInt *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Star()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v2;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Star(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Star@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Star.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Star(_QWORD *a1)
{
  return Star.encode(to:)(a1);
}

double protocol witness for CRType.copy(renamingReferences:) in conformance Star@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Star(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Star and conformance Star, (void (*)(void))lazy protocol witness table accessor for type Star and conformance Star);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Star()
{
  lazy protocol witness table accessor for type Star and conformance Star();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Star()
{
  lazy protocol witness table accessor for type Star and conformance Star();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Star()
{
  lazy protocol witness table accessor for type Star and conformance Star();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t ArrowShape.CodingKeys.init(rawValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t ArrowShape.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F4372656E726F63 && a2 == 0xED00006C6F72746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t ArrowShape.CodingKeys.init(intValue:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

void *static ArrowShape.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static ArrowShape.CodingKeys.allCases.getter;
}

uint64_t ArrowShape.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ArrowShape.CodingKeys.rawValue.getter()
{
  return 0;
}

uint64_t ArrowShape.CodingKeys.stringValue.getter()
{
  return 0x6F4372656E726F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArrowShape.CodingKeys()
{
  return 0x6F4372656E726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArrowShape.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F4372656E726F63 && a2 == 0xED00006C6F72746ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ArrowShape.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ArrowShape.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance ArrowShape.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  a3();
  a4();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArrowShape.CodingKeys()
{
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArrowShape.CodingKeys()
{
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void ArrowShape.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

BOOL static ArrowShape.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t ArrowShape.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ArrowShape.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = v8;
  v11[1] = v9;
  type metadata accessor for CGPoint(0);
  lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA20]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Int ArrowShape.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t ArrowShape.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ArrowShape.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for CGPoint(0);
    lazy protocol witness table accessor for type CGPoint and conformance CGPoint(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, MEMORY[0x1E0C9BA30]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ArrowShape()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ArrowShape()
{
  double *v0;

  CGPoint.hash(into:)(*v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ArrowShape()
{
  double *v0;
  double v1;
  double v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ArrowShape(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArrowShape@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ArrowShape.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArrowShape(_QWORD *a1)
{
  return ArrowShape.encode(to:)(a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ArrowShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape, (void (*)(void))lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ArrowShape()
{
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ArrowShape()
{
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ArrowShape()
{
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  return CRValueStruct.minEncodingVersion.getter();
}

CGPathRef TaggedValue_9<>.path(in:)(CGAffineTransform *a1)
{
  CGFloat a;
  CGFloat b;
  CGFloat d;
  CGFloat c;
  CGFloat tx;
  CGFloat ty;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  double v16;
  double v17;
  CGPathRef v18;
  id v19;
  id v20;
  id v21;
  __int128 v22;
  uint64_t v23;
  double v24;
  double v25;
  id v26;
  id v27;
  CGPathRef result;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  CGMutablePathRef Mutable;
  CGPath *v38;
  __int128 v39;
  CGFloat v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double Height;
  CGPath *v45;
  CGFloat v46;
  CGFloat v47;
  double v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  double v52;
  double v53;
  CGPathRef v54;
  id v55;
  id v56;
  CGFloat v57;
  CGFloat Width;
  double v59;
  CGFloat v60;
  CGAffineTransform v61;
  CGAffineTransform t2;
  CGAffineTransform transform;
  uint64_t v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;

  v64 = *MEMORY[0x1E0C80C00];
  a = a1->a;
  b = a1->b;
  c = a1->c;
  d = a1->d;
  tx = a1->tx;
  ty = a1->ty;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  v13 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v12, v8);
  if (v13 == *MEMORY[0x1E0D12028])
  {
    v14 = *(_OWORD *)&a1->c;
    *(_OWORD *)&transform.a = *(_OWORD *)&a1->a;
    *(_OWORD *)&transform.c = v14;
    *(_OWORD *)&transform.tx = *(_OWORD *)&a1->tx;
    v15 = 0;
    *(_QWORD *)&v14 = 0;
    v16 = 1.0;
    v17 = 1.0;
    v18 = CGPathCreateWithRect(*(CGRect *)((char *)&v14 - 8), &transform);
    v19 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v18);
    v20 = objc_msgSend(v19, sel_bezierPathByReversingPath);

    v21 = objc_msgSend(v20, sel_CGPath);
LABEL_5:
    v27 = v21;

    return (CGPathRef)v27;
  }
  if (v13 == *MEMORY[0x1E0D12030])
  {
    v22 = *(_OWORD *)&a1->c;
    *(_OWORD *)&transform.a = *(_OWORD *)&a1->a;
    *(_OWORD *)&transform.c = v22;
    *(_OWORD *)&transform.tx = *(_OWORD *)&a1->tx;
    v23 = 0;
    *(_QWORD *)&v22 = 0;
    v24 = 1.0;
    v25 = 1.0;
    v18 = CGPathCreateWithEllipseInRect(*(CGRect *)((char *)&v22 - 8), &transform);
    v26 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v18);
    v20 = objc_msgSend(v26, sel_bezierPathByReversingPath);

    v21 = objc_msgSend(v20, sel_CGPath);
    goto LABEL_5;
  }
  if (v13 == *MEMORY[0x1E0D12038])
  {
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    v29 = *(double *)v12;
    v30 = *((double *)v12 + 1);
    v31 = *((double *)v12 + 4);
    v32 = *((double *)v12 + 5);
    v33 = *((double *)v12 + 2) - *(double *)v12 * 0.25 - v31 * 0.25;
    v34 = *((double *)v12 + 3) - v30 * 0.25 - v32 * 0.25;
    *(double *)&v35 = v33 + v33;
    *(double *)&v36 = v34 + v34;
    Mutable = CGPathCreateMutable();
    CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v30, *(unint64_t *)&v29), a1);
    CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v32, *(unint64_t *)&v31), (CGPoint)__PAIR128__(v36, v35), a1);
    return Mutable;
  }
  if (v13 != *MEMORY[0x1E0D12040])
  {
    if (v13 == *MEMORY[0x1E0D12048])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      v40 = *((double *)v12 + 2);
      *(_OWORD *)&transform.a = *(_OWORD *)v12;
      transform.c = v40;
      return CalloutBubble.path(in:)(a1);
    }
    if (v13 == *MEMORY[0x1E0D12050])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      v59 = *(double *)v12;
      CGAffineTransform.decompose(initialRotation:)((uint64_t)&transform, 0.0);
      v41 = transform.a;
      v65.origin.y = transform.b;
      v57 = transform.b;
      v65.size.width = transform.c;
      v42 = transform.d;
      v60 = transform.c;
      v65.origin.x = transform.a;
      v65.size.height = transform.d;
      Width = CGRectGetWidth(v65);
      v66.origin.x = v41;
      v66.origin.y = v57;
      v43 = v60;
      v66.size.width = v60;
      v66.size.height = v42;
      Height = CGRectGetHeight(v66);
      if (Height >= Width)
        Height = Width;
      v45 = ppk_bezierPathWithContinuousCornerRoundedRect(0.0, 0.0, v43, v42, v59 * Height);
      CGAffineTransformMakeScale(&transform, 1.0 / v43, 1.0 / v42);
      t2.a = a;
      t2.b = b;
      t2.c = c;
      t2.d = d;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v61, &transform, &t2);
      transform = v61;
      Mutable = (CGMutablePathRef)MEMORY[0x1DF0E5880](v45, &transform);
      if (!Mutable)
      {
        v67.origin.x = 0.0;
        v67.origin.y = 0.0;
        v67.size.width = v60;
        v67.size.height = v42;
        Mutable = CGPathCreateWithRect(v67, &transform);
      }

      return Mutable;
    }
    if (v13 == *MEMORY[0x1E0D12058])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      transform.a = *(CGFloat *)v12;
      return RegularPolygon.path(in:)(a1);
    }
    if (v13 == *MEMORY[0x1E0D12060])
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
      v46 = *((double *)v12 + 1);
      transform.a = *(CGFloat *)v12;
      transform.b = v46;
      return Star.path(in:)(a1);
    }
    if (v13 != *MEMORY[0x1E0D12068])
    {
      v50 = *(_OWORD *)&a1->c;
      *(_OWORD *)&transform.a = *(_OWORD *)&a1->a;
      *(_OWORD *)&transform.c = v50;
      *(_OWORD *)&transform.tx = *(_OWORD *)&a1->tx;
      v51 = 0;
      *(_QWORD *)&v50 = 0;
      v52 = 1.0;
      v53 = 1.0;
      v54 = CGPathCreateWithRect(*(CGRect *)((char *)&v50 - 8), &transform);
      v55 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithCGPath_, v54);
      v56 = objc_msgSend(v55, sel_bezierPathByReversingPath);

      v27 = objc_msgSend(v56, sel_CGPath);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      return (CGPathRef)v27;
    }
    (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
    v47 = *(CGFloat *)v12;
    v48 = *((double *)v12 + 1);
    v49 = *(_OWORD *)&a1->c;
    *(_OWORD *)&t2.a = *(_OWORD *)&a1->a;
    *(_OWORD *)&t2.c = v49;
    *(_OWORD *)&t2.tx = *(_OWORD *)&a1->tx;
    v38 = CGPathCreateMutable();
    transform.a = 1.0;
    transform.b = 0.0;
    transform.c = 0.0;
    transform.d = 1.0;
    transform.tx = 0.0;
    transform.ty = 0.0;
    CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(1.0 - v48, *(unint64_t *)&v47), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(1.0, *(unint64_t *)&v47), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(0.5, 1.0), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)*(unint64_t *)&v47, &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v48, *(unint64_t *)&v47), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v48, 0), &transform);
    CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(1.0 - v48, 0), &transform);
    CGPathCloseSubpath(v38);
    Mutable = (CGMutablePathRef)MEMORY[0x1DF0E5880](v38, &t2);
    if (Mutable)
      goto LABEL_12;
    v68.origin.x = 0.0;
    v68.origin.y = 0.0;
    v68.size.width = 1.0;
    v68.size.height = 1.0;
    result = CGPathCreateWithRect(v68, &t2);
LABEL_11:
    Mutable = result;
LABEL_12:

    return Mutable;
  }
  (*(void (**)(char *, uint64_t))(v9 + 96))(v12, v8);
  v38 = *(CGPath **)v12;
  v39 = *(_OWORD *)&a1->c;
  *(_OWORD *)&transform.a = *(_OWORD *)&a1->a;
  *(_OWORD *)&transform.c = v39;
  *(_OWORD *)&transform.tx = *(_OWORD *)&a1->tx;
  result = (CGPathRef)MEMORY[0x1DF0E5880](v38, &transform);
  if (result)
    goto LABEL_11;
  __break(1u);
  return result;
}

void CGPoint.hash(into:)(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

BOOL specialized static Line.== infix(_:_:)(float64x2_t *a1, float64x2_t *a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) == 0)return 0;
  if (a1[2].f64[1] == a2[2].f64[1])
    return a1[2].f64[0] == a2[2].f64[0];
  return 0;
}

unint64_t lazy protocol witness table accessor for type Line.CodingKeys and conformance Line.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys;
  if (!lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Line.CodingKeys, &type metadata for Line.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Line.CodingKeys and conformance Line.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CGPoint and conformance CGPoint(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGPoint(255);
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys;
  if (!lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CalloutBubble.CodingKeys, &type metadata for CalloutBubble.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CalloutBubble.CodingKeys and conformance CalloutBubble.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RegularPolygon.CodingKeys, &type metadata for RegularPolygon.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegularPolygon.CodingKeys and conformance RegularPolygon.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Star.CodingKeys and conformance Star.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys;
  if (!lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Star.CodingKeys, &type metadata for Star.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Star.CodingKeys and conformance Star.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ArrowShape.CodingKeys, &type metadata for ArrowShape.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArrowShape.CodingKeys and conformance ArrowShape.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ControlPointType and conformance ControlPointType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType;
  if (!lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ControlPointType, &type metadata for ControlPointType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlPointType and conformance ControlPointType);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Rectangle.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Rectangle.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Rectangle.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RoundedRect.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [RoundedRect.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [RoundedRect.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Ellipse.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Ellipse.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Ellipse.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Line.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Line.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Line.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in CalloutBubble.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [CalloutBubble.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [CalloutBubble.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RegularPolygon.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [RegularPolygon.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [RegularPolygon.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Star.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [Star.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Star.CodingKeys]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ArrowShape.CodingKeys()
{
  return lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](&lazy protocol witness table cache variable for type [ArrowShape.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [ArrowShape.CodingKeys]);
}

uint64_t lazy protocol witness table accessor for type [Rectangle.CodingKeys] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ControlPointType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ControlPointType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1DDCE8B60 + 4 * byte_1DDF3C59F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1DDCE8B94 + 4 * byte_1DDF3C59A[v4]))();
}

uint64_t sub_1DDCE8B94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8B9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCE8BA4);
  return result;
}

uint64_t sub_1DDCE8BB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCE8BB8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1DDCE8BBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8BC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ControlPointType()
{
  return &type metadata for ControlPointType;
}

ValueMetadata *type metadata accessor for Rectangle()
{
  return &type metadata for Rectangle;
}

ValueMetadata *type metadata accessor for Rectangle.CodingKeys()
{
  return &type metadata for Rectangle.CodingKeys;
}

ValueMetadata *type metadata accessor for RoundedRect()
{
  return &type metadata for RoundedRect;
}

ValueMetadata *type metadata accessor for RoundedRect.CodingKeys()
{
  return &type metadata for RoundedRect.CodingKeys;
}

ValueMetadata *type metadata accessor for Ellipse()
{
  return &type metadata for Ellipse;
}

ValueMetadata *type metadata accessor for Ellipse.CodingKeys()
{
  return &type metadata for Ellipse.CodingKeys;
}

ValueMetadata *type metadata accessor for Line()
{
  return &type metadata for Line;
}

uint64_t storeEnumTagSinglePayload for Line.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDCE8CA4 + 4 * byte_1DDF3C5A9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDCE8CD8 + 4 * byte_1DDF3C5A4[v4]))();
}

uint64_t sub_1DDCE8CD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8CE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCE8CE8);
  return result;
}

uint64_t sub_1DDCE8CF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCE8CFCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDCE8D00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8D08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Line.CodingKeys()
{
  return &type metadata for Line.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CalloutBubble(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CalloutBubble(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CalloutBubble()
{
  return &type metadata for CalloutBubble;
}

ValueMetadata *type metadata accessor for CalloutBubble.CodingKeys()
{
  return &type metadata for CalloutBubble.CodingKeys;
}

ValueMetadata *type metadata accessor for RegularPolygon()
{
  return &type metadata for RegularPolygon;
}

ValueMetadata *type metadata accessor for RegularPolygon.CodingKeys()
{
  return &type metadata for RegularPolygon.CodingKeys;
}

ValueMetadata *type metadata accessor for Star()
{
  return &type metadata for Star;
}

uint64_t storeEnumTagSinglePayload for CalloutBubble.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDCE8E10 + 4 * byte_1DDF3C5B3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDCE8E44 + 4 * byte_1DDF3C5AE[v4]))();
}

uint64_t sub_1DDCE8E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCE8E54);
  return result;
}

uint64_t sub_1DDCE8E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCE8E68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDCE8E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCE8E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Star.CodingKeys()
{
  return &type metadata for Star.CodingKeys;
}

ValueMetadata *type metadata accessor for ArrowShape()
{
  return &type metadata for ArrowShape;
}

uint64_t storeEnumTagSinglePayload for RoundedRect.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1DDCE8EE0 + 4 * byte_1DDF3C5B8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1DDCE8F00 + 4 * byte_1DDF3C5BD[v4]))();
}

_BYTE *sub_1DDCE8EE0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1DDCE8F00(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDCE8F08(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDCE8F10(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDCE8F18(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDCE8F20(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ArrowShape.CodingKeys()
{
  return &type metadata for ArrowShape.CodingKeys;
}

double specialized CalloutBubble.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  double *v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __double2 v15;
  CGAffineTransform v17;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v8 = a2[4];
  v7 = a2[5];
  v9 = *a1;
  v10 = *v2;
  v11 = v2[1];
  if (v9 == 4)
  {
    v13 = v2[2];
    v14 = atan2(v11 + -0.5, v10 + -0.5) - v13;
    if (v14 == 0.0)
    {
      v11 = 0.5;
      v10 = 1.0;
    }
    else
    {
      v15 = __sincos_stret(v14);
      v10 = v15.__cosval * 0.5 + 0.5;
      v11 = v15.__sinval * 0.5 + 0.5;
    }
  }
  else
  {
    v12 = 0.0;
    if (v9 != 3)
      return v12;
  }
  v17.a = v4;
  v17.b = v3;
  v17.c = v6;
  v17.d = v5;
  v17.tx = v8;
  v17.ty = v7;
  *(_QWORD *)&v12 = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&v10, &v17);
  return v12;
}

void specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double v6;

  v3 = a3 - a2;
  if (__OFSUB__(a3, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = __OFADD__(v3, 1);
  v5 = v3 + 1;
  if (v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a1, a2))
  {
LABEL_8:
    __break(1u);
    return;
  }
  v6 = (double)(a1 - a2) * 6.28318531 / (double)v5 + -1.57079633;
  if (v6 != 0.0)
    __sincos_stret(v6);
}

void specialized Star.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  uint64_t v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  int v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double sinval;
  double cosval;
  __double2 v17;
  double v18;
  CGAffineTransform v19;

  v4 = *a2;
  v3 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v8 = a2[4];
  v7 = a2[5];
  v9 = *a1;
  v10 = *(_QWORD *)v2;
  if (v9 == 8)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
      __break(1u);
      return;
    }
    v13 = *(double *)(v2 + 8);
    v14 = 6.28318531 / (double)(2 * v10) + -1.57079633;
    if (v14 == 0.0)
    {
      sinval = 0.0;
      cosval = 1.0;
    }
    else
    {
      v17 = __sincos_stret(v14);
      cosval = v17.__cosval;
      sinval = v17.__sinval;
    }
    v18 = v13 * sinval * 0.5;
    v11 = v13 * cosval * 0.5 + 0.5;
    v19.a = v4;
    v19.b = v3;
    v19.c = v6;
    v19.d = v5;
    v12 = v18 + 0.5;
  }
  else
  {
    if (v9 != 7)
      return;
    specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(v10, 3, 10);
    v19.a = v4;
    v19.b = v3;
    v19.c = v6;
    v19.d = v5;
  }
  v19.tx = v8;
  v19.ty = v7;
  CGPointApplyAffineTransform(*(CGPoint *)&v11, &v19);
}

void specialized TaggedValue_9<>.subscript.getter(unsigned __int8 *a1, CGFloat *a2)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  double v17;
  uint64_t v18;
  CGFloat v19;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  uint64_t v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  double v37;
  double Width;
  unsigned __int8 v39;
  CGAffineTransform v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v5 = *a2;
  v4 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>.TaggedEnum);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  TaggedValue_9.taggedEnum.getter();
  v16 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v16 == *MEMORY[0x1E0D12038])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    if (v15 == 2)
    {
      v17 = *((double *)v14 + 4);
      v18 = *((_QWORD *)v14 + 5);
      goto LABEL_17;
    }
    if (v15 == 1)
    {
      v17 = *((double *)v14 + 2);
      v18 = *((_QWORD *)v14 + 3);
      goto LABEL_17;
    }
    if (v15)
      return;
LABEL_5:
    v17 = *(double *)v14;
    v18 = *((_QWORD *)v14 + 1);
LABEL_17:
    v40.a = v5;
    v40.b = v4;
    v40.c = v7;
    v40.d = v6;
    v40.tx = v9;
    v40.ty = v8;
LABEL_18:
    CGPointApplyAffineTransform(*(CGPoint *)&v17, &v40);
    return;
  }
  if (v16 == *MEMORY[0x1E0D12048])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    v19 = *((double *)v14 + 2);
    *(_OWORD *)&v40.a = *(_OWORD *)v14;
    v40.c = v19;
    v39 = v15;
    specialized CalloutBubble.subscript.getter(&v39, a2);
    return;
  }
  if (v16 == *MEMORY[0x1E0D12050])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    if (v15 != 5)
      return;
    v35 = v9;
    v36 = v8;
    v37 = *(double *)v14;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v40, 0.0);
    a = v40.a;
    b = v40.b;
    c = v40.c;
    d = v40.d;
    v41.origin.x = v40.a;
    v41.origin.y = v40.b;
    v41.size.width = v40.c;
    v41.size.height = v40.d;
    Width = CGRectGetWidth(v41);
    v33 = b;
    v34 = a;
    v42.origin.x = a;
    v42.origin.y = b;
    v31 = d;
    v32 = c;
    v42.size.width = c;
    v42.size.height = d;
    if (Width >= CGRectGetHeight(v42))
    {
      v26 = v33;
      v25 = v34;
      v43.origin.x = v34;
      v43.origin.y = v33;
      v28 = v31;
      v27 = v32;
      v43.size.width = v32;
      v43.size.height = v31;
      Width = v37 * CGRectGetHeight(v43);
      v44.origin.x = v25;
      v44.origin.y = v26;
      v44.size.width = v27;
      v44.size.height = v28;
      v29 = CGRectGetWidth(v44);
      v40.a = v5;
      v40.b = v4;
      v40.c = v7;
      v40.d = v6;
      v40.tx = v35;
      v40.ty = v36;
      v17 = Width / v29;
      v18 = 0;
    }
    else
    {
      v40.a = v5;
      v40.b = v4;
      v40.c = v7;
      v40.d = v6;
      v40.tx = v35;
      v40.ty = v36;
      v18 = 0;
      v17 = v37;
    }
    goto LABEL_18;
  }
  if (v16 == *MEMORY[0x1E0D12058])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    if (v15 != 6)
      return;
    specialized static RegularPolygon.numberOfSidesToPosition(_:minSides:maxSides:)(*(_QWORD *)v14, 3, 12);
    goto LABEL_17;
  }
  if (v16 == *MEMORY[0x1E0D12060])
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    v24 = *((double *)v14 + 1);
    v40.a = *(CGFloat *)v14;
    v40.b = v24;
    v39 = v15;
    specialized Star.subscript.getter(&v39, a2);
    return;
  }
  if (v16 != *MEMORY[0x1E0D12068])
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return;
  }
  (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
  if (v15 == 9)
    goto LABEL_5;
}

void specialized CalloutBubble.subscript.setter(unsigned __int8 *a1, _OWORD *a2, CGFloat a3, CGFloat a4)
{
  double *v4;
  int v7;
  __int128 v8;
  CGPoint v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  CGAffineTransform v14;
  CGAffineTransform v15;
  CGPoint v16;

  v7 = *a1;
  v8 = a2[1];
  *(_OWORD *)&v15.a = *a2;
  *(_OWORD *)&v15.c = v8;
  *(_OWORD *)&v15.tx = a2[2];
  CGAffineTransformInvert(&v14, &v15);
  v15 = v14;
  v16.x = a3;
  v16.y = a4;
  v9 = CGPointApplyAffineTransform(v16, &v15);
  if (v7 == 4)
  {
    v10 = atan2(v4[1] + -0.5, *v4 + -0.5);
    v11 = atan2(v9.y + -0.5, v9.x + -0.5);
    v12 = fmod(v11 - v10, 6.28318531);
    if (v12 > 3.14159265)
      v12 = v12 + -6.28318531;
    if (v12 < -3.14159265)
      v12 = v12 + 6.28318531;
    v13 = fabs(v12);
    if (v13 <= 0.025)
      v13 = 0.025;
    if (v13 > 0.4)
      v13 = 0.4;
    v4[2] = v13;
  }
  else if (v7 == 3)
  {
    *(CGPoint *)v4 = v9;
  }
}

void specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v7 = (atan2(a4 + -0.5, a3 + -0.5) + 1.57079633) / 6.28318531;
  if (v7 < 0.0)
    v7 = v7 + 1.0;
  v8 = round(v7 * (double)v5);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    goto LABEL_12;
  if (v8 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFADD__(a1, (uint64_t)v8))
LABEL_15:
    __break(1u);
}

void specialized Star.subscript.setter(unsigned __int8 *a1, _OWORD *a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  int v7;
  __int128 v8;
  CGPoint v9;
  uint64_t v10;
  double sinval;
  double cosval;
  __double2 v13;
  CGFloat v14;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGPoint v17;

  v7 = *a1;
  v8 = a2[1];
  *(_OWORD *)&v16.a = *a2;
  *(_OWORD *)&v16.c = v8;
  *(_OWORD *)&v16.tx = a2[2];
  CGAffineTransformInvert(&v15, &v16);
  v16 = v15;
  v17.x = a3;
  v17.y = a4;
  v9 = CGPointApplyAffineTransform(v17, &v16);
  if (v7 == 8)
  {
    if (*(_QWORD *)v4 + 0x4000000000000000 < 0)
    {
      __break(1u);
    }
    else
    {
      sinval = 0.0;
      cosval = 1.0;
      if (6.28318531 / (double)(2 * *(_QWORD *)v4) + -1.57079633 != 0.0)
      {
        v13 = __sincos_stret(6.28318531 / (double)(2 * *(_QWORD *)v4) + -1.57079633);
        cosval = v13.__cosval;
        sinval = v13.__sinval;
      }
      v14 = (v9.x + -0.5) * cosval + (v9.y + -0.5) * sinval;
      *(double *)(v4 + 8) = fmax(fmin(v14 + v14, 1.0), 0.1);
    }
  }
  else if (v7 == 7)
  {
    specialized static RegularPolygon.numberOfSidesFromPosition(_:minSides:maxSides:)(3, 10, v9.x, v9.y);
    *(_QWORD *)v4 = v10;
  }
}

id TaggedValue_2<>.caLineCap.getter()
{
  id *v0;
  id *v1;
  id v2;
  uint64_t v4;
  int v5;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  TaggedValue_2.tagged1.getter();
  if (!v4)
    return (id)*MEMORY[0x1E0CD3008];
  v0 = (id *)MEMORY[0x1E0CD3018];
  v1 = (id *)MEMORY[0x1E0CD3010];
  if (v5 != 1)
    v1 = (id *)MEMORY[0x1E0CD3008];
  if (v5 != 2)
    v0 = v1;
  v2 = *v0;
  swift_bridgeObjectRelease();
  return v2;
}

void PlainStrokeStyle.init()(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v1;
  *(_DWORD *)(a1 + 16) = 2;
}

uint64_t PlainStrokeStyle.init(_:phase:lineCap:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = a2;
  return result;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::PlainStrokeStyle::CodingKeys_optional)rawValue;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::PlainStrokeStyle::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x6573616870 && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x6E726574746170 && object == (void *)0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x706143656E696CLL && object == (void *)0xE700000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 2;
    else
      v7 = 3;
  }
  *v2 = v7;
  return result;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional __swiftcall PlainStrokeStyle.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)intValue < 3)
    v2 = intValue;
  *v1 = v2;
  return (PaperKit::PlainStrokeStyle::CodingKeys_optional)intValue;
}

void *static PlainStrokeStyle.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static PlainStrokeStyle.CodingKeys.allCases.getter;
}

uint64_t PlainStrokeStyle.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PlainStrokeStyle.CodingKeys.stringValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E726574746170;
  if (*v0 != 1)
    v1 = 0x706143656E696CLL;
  if (*v0)
    return v1;
  else
    return 0x6573616870;
}

PaperKit::PlainStrokeStyle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PlainStrokeStyle.CodingKeys(Swift::Int *a1)
{
  return PlainStrokeStyle.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PlainStrokeStyle.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E726574746170;
  if (*v0 != 1)
    v1 = 0x706143656E696CLL;
  if (*v0)
    return v1;
  else
    return 0x6573616870;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PlainStrokeStyle.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PlainStrokeStyle.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance PlainStrokeStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return static CodingKey<>.intCases.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlainStrokeStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlainStrokeStyle.CodingKeys()
{
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void PlainStrokeStyle.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt32 v4;
  Swift::UInt64 v5;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 16);
  if ((*(_QWORD *)v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  specialized Array<A>.hash(into:)(a1, v3);
  Hasher._combine(_:)(v4);
}

uint64_t static PlainStrokeStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_DWORD *)(a2 + 16);
  v3 = *(_DWORD *)(a1 + 16);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & (v3 == v2);
}

uint64_t PlainStrokeStyle.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlainStrokeStyle.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v13 = v1[1];
  v10 = *((_DWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = v9;
  v14 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v15 = v13;
    v14 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LODWORD(v15) = v10;
    v14 = 2;
    type metadata accessor for CGLineCap(0);
    lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, (uint64_t)&protocol conformance descriptor for CGLineCap);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int PlainStrokeStyle.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  _BYTE v6[72];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t PlainStrokeStyle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlainStrokeStyle.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    HIBYTE(v14) = 0;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
    HIBYTE(v14) = 1;
    lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](&lazy protocol witness table cache variable for type [CGFloat] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v15;
    type metadata accessor for CGLineCap(0);
    HIBYTE(v14) = 2;
    lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, (uint64_t)&protocol conformance descriptor for CGLineCap);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v15;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_DWORD *)(a2 + 16) = v13;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlainStrokeStyle@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PlainStrokeStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlainStrokeStyle(_QWORD *a1)
{
  return PlainStrokeStyle.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance PlainStrokeStyle()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt32 v2;
  Swift::UInt64 v3;
  Swift::UInt v4;
  Swift::UInt64 *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_DWORD *)(v0 + 16);
  if ((*(_QWORD *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)v0;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt64 *)(v1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = v6;
      else
        v8 = 0;
      Hasher._combine(_:)(v8);
      --v4;
    }
    while (v4);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlainStrokeStyle()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  _BYTE v6[72];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_DWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  specialized Array<A>.hash(into:)((uint64_t)v6, v1);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_DWORD *)(a2 + 16);
  v3 = *(_DWORD *)(a1 + 16);
  return specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & (v3 == v2);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PlainStrokeStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PlainStrokeStyle()
{
  lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PlainStrokeStyle()
{
  lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PlainStrokeStyle()
{
  lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PlainStrokeStyle()
{
  lazy protocol witness table accessor for type PlainStrokeStyle and conformance PlainStrokeStyle();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t CGLineCap.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  dispatch thunk of CRDecoder.valueContainer()();
  if (v1)
  {
    swift_release();
    return a1;
  }
  a1 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  swift_release();
  result = swift_release();
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_8;
  if (a1 <= 0x7FFFFFFF)
    return a1;
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t CGLineCap.encode(to:)()
{
  return Int.encode(to:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CGLineCap()
{
  lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, (uint64_t)&protocol conformance descriptor for CGLineCap);
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CGLineCap()
{
  lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(&lazy protocol witness table cache variable for type CGLineCap and conformance CGLineCap, (uint64_t)&protocol conformance descriptor for CGLineCap);
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CGLineCap@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  dispatch thunk of CRDecoder.valueContainer()();
  if (v1)
    return swift_release();
  v3 = dispatch thunk of CRDecoder.CRValueContainer.decode(_:)();
  swift_release();
  result = swift_release();
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v3 <= 0x7FFFFFFF)
  {
    *a1 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CGLineCap()
{
  return Int.encode(to:)();
}

PaperKit::BrushStyle_optional __swiftcall BrushStyle.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::BrushStyle_optional)rawValue;
}

uint64_t BrushStyle.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PaperKit::BrushStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance BrushStyle(Swift::Int *a1)
{
  return BrushStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance BrushStyle()
{
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle();
  return CRValue<>.minEncodingVersion.getter();
}

unint64_t lazy protocol witness table accessor for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PlainStrokeStyle.CodingKeys, &type metadata for PlainStrokeStyle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainStrokeStyle.CodingKeys and conformance PlainStrokeStyle.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [CGFloat] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    v8 = a2();
    result = MEMORY[0x1DF0E6450](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PlainStrokeStyle.CodingKeys] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PlainStrokeStyle.CodingKeys]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PlainStrokeStyle.CodingKeys] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BrushStyle and conformance BrushStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BrushStyle, &type metadata for BrushStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BrushStyle, &type metadata for BrushStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BrushStyle, &type metadata for BrushStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BrushStyle, &type metadata for BrushStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle;
  if (!lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BrushStyle, &type metadata for BrushStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BrushStyle and conformance BrushStyle);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PlainStrokeStyle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainStrokeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlainStrokeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PlainStrokeStyle()
{
  return &type metadata for PlainStrokeStyle;
}

uint64_t storeEnumTagSinglePayload for PlainStrokeStyle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDCEB178 + 4 * byte_1DDF3E505[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDCEB1AC + 4 * byte_1DDF3E500[v4]))();
}

uint64_t sub_1DDCEB1AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCEB1B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCEB1BCLL);
  return result;
}

uint64_t sub_1DDCEB1C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCEB1D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDCEB1D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCEB1DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlainStrokeStyle.CodingKeys()
{
  return &type metadata for PlainStrokeStyle.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BrushStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BrushStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1DDCEB2D4 + 4 * byte_1DDF3E50F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1DDCEB308 + 4 * byte_1DDF3E50A[v4]))();
}

uint64_t sub_1DDCEB308(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCEB310(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDCEB318);
  return result;
}

uint64_t sub_1DDCEB324(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDCEB32CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1DDCEB330(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDCEB338(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BrushStyle()
{
  return &type metadata for BrushStyle;
}

uint64_t lazy protocol witness table accessor for type CGLineCap and conformance CGLineCap(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGLineCap(255);
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_nTf4ng_n(a1, a2);

  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3;

  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_nTf4ng_n(a1, (uint64_t)a2);

  return v3;
}

uint64_t static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t result;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  objc_class *v88;
  id v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, uint64_t);
  void (*v92)(char *, uint64_t);
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  objc_super v120;

  v117 = (char *)a4;
  v119 = a1;
  v114 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8, v9);
  v104 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRKeyPath();
  v105 = *(_QWORD *)(v11 - 8);
  v106 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v103 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for UUID();
  v111 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v14);
  v95 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v113 = (char *)&v93 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v112 = (char *)&v93 - v21;
  v100 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100, v22);
  v98 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v24, v25);
  v102 = (char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v109 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101, v27);
  v108 = (char *)&v93 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v97 = (char *)&v93 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v110 = (char *)&v93 - v34;
  v35 = *(_QWORD *)(a4 + 16);
  v36 = type metadata accessor for Capsule();
  v115 = *(_QWORD *)(v36 - 8);
  v116 = v36;
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v93 - v38;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v42);
  v44 = (char *)&v93 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v118 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v46);
  v94 = (char *)&v93 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v93 - v50;
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v93 - v54;
  v96 = v35;
  v56 = v119;
  Ref.subscript.getter();
  type metadata accessor for PKStrokeCoherence(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v44, v56, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v39, a2, v116);
  v57 = PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)((uint64_t)v44, (uint64_t)v39, a3, (uint64_t)v117);
  if (v57)
  {
    v58 = (void *)v57;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

    return (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v55, v45);
  }
  v116 = v40;
  v60 = v97;
  v117 = v51;
  v61 = v109;
  v62 = v98;
  v115 = v45;
  v93 = v55;
  CRRegister.value.getter();
  v63 = (uint64_t)v102;
  v64 = v100;
  SharedTagged_2.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v62, v64);
  v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v63, 1, v65) == 1)
    goto LABEL_8;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v63, v65);
  v67 = v61;
  v68 = v110;
  v69 = v101;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v110, v60, v101);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  v70 = v103;
  Reference.identity.getter();
  v71 = v104;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v70, v106);
  v72 = v111;
  v73 = v107;
  v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 48))(v71, 1, v107);
  v63 = (uint64_t)v112;
  v75 = v113;
  v76 = v118;
  if (v74 == 1)
  {
    __break(1u);
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v112, v71, v73);
  v77 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  v77(v75, v63, v73);
  v78 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v79 = v108;
  v78(v108, v68, v69);
  v80 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v81 = v93;
  v82 = v115;
  v80(v117, v93, v115);
  v83 = v69;
  v84 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  v78(&v84[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v79, v83);
  v85 = v95;
  v77(v95, (uint64_t)v75, v73);
  v86 = v94;
  v87 = (uint64_t)v117;
  v80(v94, v117, v82);
  v77(&v84[OBJC_IVAR___PKStrokeCoherenceBase_identity], (uint64_t)v85, v73);
  v80(&v84[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v86, v82);
  v88 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v120.receiver = v84;
  v120.super_class = v88;
  v89 = objc_msgSendSuper2(&v120, sel_init);
  v90 = *(void (**)(char *, uint64_t))(v118 + 8);
  v90(v86, v82);
  v91 = *(void (**)(char *, uint64_t))(v111 + 8);
  v91(v85, v73);
  v90((char *)v87, v82);
  v92 = *(void (**)(char *, uint64_t))(v109 + 8);
  v92(v108, v83);
  v91(v113, v73);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v91(v112, v73);
  v92(v110, v83);
  return ((uint64_t (*)(char *, uint64_t))v90)(v81, v82);
}

uint64_t type metadata accessor for PKStrokeCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherence);
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.isEqual(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  objc_class *v24;
  char *v25;
  char *v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  void *v28;
  int v29;
  char *v30;
  unsigned __int8 v31;
  uint64_t *v32;
  _BYTE *v33;
  void (*v35)(char *, char *, uint64_t);
  int v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  _QWORD v39[3];
  objc_super v40;
  char *v41;
  _BYTE v42[24];
  uint64_t v43;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v39 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v39 - v13;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD **)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v39 - v22;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v42, &demangling cache variable for type metadata for Any?);
  if (!v43)
  {
    v32 = &demangling cache variable for type metadata for Any?;
    v33 = v42;
LABEL_9:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v33, v32);
    goto LABEL_10;
  }
  v24 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v31 = 0;
    return v31 & 1;
  }
  v25 = v41;
  if (v41 == v1)
  {

    v31 = 1;
    return v31 & 1;
  }
  v39[0] = v1;
  v39[1] = &v41[OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp];
  v39[2] = &v1[OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp];
  type metadata accessor for FinalizedTimestamp();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, (uint64_t (*)(uint64_t))MEMORY[0x1E0D125D0], MEMORY[0x1E0D125E8]);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {

    goto LABEL_10;
  }
  v26 = v25;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v39[0] + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  v27 = (uint64_t (*)(char *, uint64_t, uint64_t))v16[6];
  if (v27(v14, 1, v15) != 1)
  {
    v35 = (void (*)(char *, char *, uint64_t))v16[4];
    v35(v23, v14, v15);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v26[OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID], (uint64_t)v10, &demangling cache variable for type metadata for UUID?);
    v36 = v27(v10, 1, v15);
    v37 = v26;
    if (v36 != 1)
    {
      v35(v19, v10, v15);
      v31 = static UUID.== infix(_:_:)();

      v38 = (void (*)(char *, uint64_t))v16[1];
      v38(v19, v15);
      v38(v23, v15);
      return v31 & 1;
    }
    ((void (*)(char *, uint64_t))v16[1])(v23, v15);

    v32 = &demangling cache variable for type metadata for UUID?;
    v33 = v10;
    goto LABEL_9;
  }
  v28 = (void *)v39[0];
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v26[OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID], (uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  v29 = v27(v6, 1, v15);
  v30 = v26;
  if (v29 != 1)
  {

    v32 = &demangling cache variable for type metadata for UUID?;
    v33 = v6;
    goto LABEL_9;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  v40.receiver = v28;
  v40.super_class = v24;
  v31 = objc_msgSendSuper2(&v40, sel_isEqual_, v26);

  return v31 & 1;
}

Swift::Int PKStrokeProviderSliceIdentifierCoherence.hash.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  objc_class *v10;
  id v11;
  uint64_t v13;
  objc_super v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init()();
  type metadata accessor for FinalizedTimestamp();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, (uint64_t (*)(uint64_t))MEMORY[0x1E0D125D0], MEMORY[0x1E0D125E0]);
  dispatch thunk of Hashable.hash(into:)();
  v10 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v14.receiver = v0;
  v14.super_class = v10;
  v11 = objc_msgSendSuper2(&v14, sel_hash);
  Hasher._combine(_:)((Swift::UInt)v11);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v0 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v22 = v17;
  v23 = v18;
  v24 = v19;
  v20 = v15;
  v21 = v16;
  return Hasher.finalize()();
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::String v16;
  Swift::String v17;
  id v18;
  Swift::String v19;
  void (*v20)(char *, uint64_t);
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v30 - v14;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v16._countAndFlagsBits = 60;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v31 = v0;
  _print_unlocked<A, B>(_:_:)();
  v17._countAndFlagsBits = 1029990688;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  v18 = objc_msgSend(v0, sel_strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, v7, MEMORY[0x1E0CB09F0]);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v15, v6);
  v21._countAndFlagsBits = 4027424;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  objc_msgSend(v1, sel_tStart);
  v22._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 15917;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  objc_msgSend(v1, sel_tEnd);
  v24._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x6F66736E61727420;
  v25._object = (void *)0xEB000000003D6D72;
  String.append(_:)(v25);
  type metadata accessor for FinalizedTimestamp();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type FinalizedTimestamp and conformance FinalizedTimestamp, (uint64_t (*)(uint64_t))MEMORY[0x1E0D125D0], MEMORY[0x1E0D125F0]);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x6B6F727473202C3ELL;
  v27._object = (void *)0xEE003D6174614465;
  String.append(_:)(v27);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v1 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    UUID.init()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v5, v6);
  }
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v20(v11, v6);
  return v32;
}

Swift::Void __swiftcall PKStrokeProviderSliceIdentifierCoherence.encode(with:)(NSCoder with)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  objc_class *v17;
  Class isa;
  void (*v19)(char *, uint64_t);
  void *v20;
  uint64_t v21;
  void *v22;
  Class v23;
  void *v24;
  objc_super v25;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v25 - v15;
  v17 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v25.receiver = v1;
  v25.super_class = v17;
  objc_msgSendSuper2(&v25, sel_encodeWithCoder_, with.super.isa);
  FinalizedTimestamp.replica.getter();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v16, v8);
  v20 = (void *)MEMORY[0x1DF0E41AC](1885688436, 0xE400000000000000);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v20);

  v21 = FinalizedTimestamp.counter.getter();
  v22 = (void *)MEMORY[0x1DF0E41AC](1953383284, 0xE400000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v21, v22);

  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v2 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, (uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v23 = UUID._bridgeToObjectiveC()().super.isa;
    v24 = (void *)MEMORY[0x1DF0E41AC](1952531571, 0xE400000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v23, v24);

    v19(v12, v8);
  }
}

uint64_t PKStrokeProviderSliceIdentifierCoherence.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  unsigned int v23;
  uint64_t result;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void *v30;
  unsigned int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  objc_class *v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3, v4);
  v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v38 - v8;
  v10 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v12 = type metadata accessor for FinalizedTimestamp();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v38 - v19;
  v21 = v1;
  v22 = (void *)MEMORY[0x1DF0E41AC](1885688436, 0xE400000000000000);
  v23 = objc_msgSend(a1, sel_containsValueForKey_, v22);

  if (v23)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
    result = NSCoder.decodeObject<A>(of:forKey:)();
    if (!result)
    {
      __break(1u);
      return result;
    }
    v25 = (void *)result;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = (void *)MEMORY[0x1DF0E41AC](1953383284, 0xE400000000000000);
    objc_msgSend(a1, sel_decodeIntegerForKey_, v26);

    FinalizedTimestamp.init(replica:counter:)();
  }
  else
  {
    UUID.init()();
    FinalizedTimestamp.init(replica:counter:)();
    v20 = v16;
  }
  v27 = v40;
  v28 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))((uint64_t)v21 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp, v20, v12);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v29(v9, 1, 1, v28);
  v30 = (void *)MEMORY[0x1DF0E41AC](1952531571, 0xE400000000000000);
  v31 = objc_msgSend(a1, sel_containsValueForKey_, v30);

  if (v31)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUUID);
    v32 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v32)
    {
      v33 = (void *)v32;
      v34 = (uint64_t)v39;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      v29((char *)v34, 0, 1, v28);
      outlined init with take of UUID?(v34, (uint64_t)v9);
    }
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v21 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, &demangling cache variable for type metadata for UUID?);

  v35 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v42.receiver = v21;
  v42.super_class = v35;
  v36 = objc_msgSendSuper2(&v42, sel_initWithCoder_, a1);

  v37 = v36;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
  if (v37)

  return (uint64_t)v37;
}

id PKStrokeProviderSliceIdentifierCoherence.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKStrokeProviderSliceIdentifierCoherence);
}

id _PKStrokeConcrete.init(stroke:drawing:)(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  id v27;
  Class v28;
  id v29;
  Class v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  id v36;
  Class v37;
  Class v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  Class v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t, uint64_t);
  char *v48;
  id v49;
  Class v50;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  __int128 v54;
  id v55;
  __int128 v56;
  Class isa;
  id v58;
  void *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v59 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3, v4);
  v61 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v60 = (char *)&v52 - v8;
  *(_QWORD *)&v56 = type metadata accessor for PKInk();
  v9 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PKStrokePath();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v23 = objc_msgSend(a1, sel_path);
  static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v24 = *(void (**)(char *, uint64_t))(v19 + 8);
  v25 = v14;
  v26 = v13;
  v24(v22, v18);
  v27 = objc_msgSend(a1, sel__strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v28 = UUID._bridgeToObjectiveC()().super.isa;
  v53 = *(void (**)(char *, uint64_t))(v25 + 8);
  v53(v17, v13);
  v55 = objc_msgSend(a1, sel__flags);
  v29 = objc_msgSend(a1, "ink");
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  v30 = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, _QWORD))(v9 + 8))(v12, v56);
  objc_msgSend(a1, sel_transform);
  v56 = v62;
  v54 = v63;
  v31 = v64;
  v32 = v65;
  v33 = v59;
  v34 = objc_msgSend(a1, sel__substrokesInDrawing_, v59);
  type metadata accessor for PKStroke();
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v36 = v33;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_n(v35, v36);
  swift_bridgeObjectRelease();
  v37 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v62 = v56;
  v63 = v54;
  v64 = v31;
  v65 = v32;
  v38 = isa;
  v39 = objc_msgSend(v58, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v28, v55, v30, &v62, v37);

  v40 = v39;
  v41 = objc_msgSend(a1, sel__clipPlane);
  objc_msgSend(v40, sel__setClipPlane_, v41);

  v42 = v40;
  v43 = objc_msgSend(a1, sel__strokeMask);
  objc_msgSend(v42, sel__setStrokeMask_, v43);

  v44 = v42;
  v45 = (Class)objc_msgSend(a1, sel__groupID);
  if (v45)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v46 = v60;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v60, v17, v26);
    v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v47(v46, 0, 1, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v46, 1, v26) == 1)
    {
      v45 = 0;
    }
    else
    {
      v45 = UUID._bridgeToObjectiveC()().super.isa;
      v53(v46, v26);
    }
  }
  else
  {
    v47 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v47(v60, 1, 1, v26);
  }
  v48 = v61;
  objc_msgSend(v44, sel__setGroupID_, v45);

  v49 = v44;
  v50 = (Class)objc_msgSend(a1, sel__renderGroupID);
  if (v50)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v48, v17, v26);
    v47(v48, 0, 1, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v48, 1, v26) == 1)
    {
      v50 = 0;
    }
    else
    {
      v50 = UUID._bridgeToObjectiveC()().super.isa;
      v53(v48, v26);
    }
  }
  else
  {
    v47(v48, 1, 1, v26);
  }
  objc_msgSend(v49, sel__setRenderGroupID_, v50);

  objc_msgSend(v49, sel__setShapeType_, objc_msgSend(a1, sel__shapeType));
  return v49;
}

void PKStrokeCoherenceBase.shared.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  id v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v121 = a3;
  v122 = a1;
  v123 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5, v6);
  v106 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CRKeyPath();
  v104 = *(_QWORD *)(v8 - 8);
  v105 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v103 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v11, v12);
  v113 = (uint64_t)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v99, v14);
  v100 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v16);
  v98 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v112 = (uint64_t)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v111 = (uint64_t)&v93 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v93 - v30;
  v32 = *(_QWORD *)(a4 + 16);
  v33 = type metadata accessor for Capsule();
  v120 = *(void (**)(uint64_t, uint64_t))(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v95 = (char *)&v93 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v97 = (char *)&v93 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v93 - v42;
  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v45 = *(_QWORD *)(v44 - 8);
  v115 = v44;
  v116 = v45;
  MEMORY[0x1E0C80A78](v44, v46);
  v48 = (char *)&v93 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v49, v50);
  v114 = (char *)&v93 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v96, v52);
  v107 = (uint64_t)&v93 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54, v55);
  v94 = (char *)&v93 - v56;
  MEMORY[0x1E0C80A78](v57, v58);
  v119 = (uint64_t)&v93 - v59;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v109 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v61);
  v93 = (char *)&v93 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v63, v64);
  v66 = (char *)&v93 - v65;
  v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v118 = v32;
  Ref.subscript.getter();
  v110 = v60;
  v108 = v66;
  CRRegister.value.getter();
  v68 = (uint64_t)v114;
  v67 = v115;
  SharedTagged_2.tagged1.getter();
  v69 = v68;
  (*(void (**)(char *, uint64_t))(v116 + 8))(v48, v67);
  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v71 = *(_QWORD *)(v70 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v68, 1, v70) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    (*((void (**)(uint64_t, uint64_t))v120 + 1))(v123, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)(v117 - 8) + 8))(v122);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v110);
    return 0;
  }
  v116 = v71;
  v73 = (uint64_t)v94;
  v74 = v123;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v69, v70);
  outlined init with take of PKStrokeStruct(v73, v119, type metadata accessor for PKStrokeStruct);
  v75 = v95;
  (*((void (**)(char *, uint64_t, uint64_t))v120 + 2))(v95, v74, v33);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  while (1)
  {
    MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v33);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v31, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v21, 1, v36) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v36);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v43, v21, v36);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v76 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v120 + 1);
  v115 = v33;
  v120 = v76;
  v76((uint64_t)v75, v33);
  outlined init with copy of PKStrokeProperties(v119, v107, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v77 = (uint64_t)v100;
  CRRegister.wrappedValue.getter();
  v78 = v101;
  v79 = v98;
  v80 = v102;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v98, v77 + *(int *)(v99 + 32), v102);
  outlined destroy of PKStrokeProperties(v77, type metadata accessor for PKStrokeProperties);
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v80);
  Ref.subscript.getter();
  v81 = v97;
  CRRegister.wrappedValue.getter();
  Ref.subscript.getter();
  v82 = *(void (**)(char *, uint64_t))(v37 + 8);
  v82(v81, v36);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  v83 = v103;
  v84 = v117;
  Reference.identity.getter();
  v85 = v106;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v83, v105);
  v86 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 48))(v85, 1, v86);
  if ((_DWORD)result != 1)
  {
    v89 = v108;
    v88 = v109;
    v90 = v93;
    v91 = v110;
    (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v93, v108, v110);
    v92 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
    v72 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(v107, v113, v111, v112, v85, v90);
    v120(v123, v115);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v122, v84);
    v82(v43, v36);
    outlined destroy of PKStrokeProperties(v119, type metadata accessor for PKStrokeStruct);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v91);
    return (uint64_t)v72;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PKStrokeCoherenceSubstrokes(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherenceSubstrokes);
}

uint64_t type metadata accessor for PKStrokeCoherenceBase(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKStrokeCoherenceBase);
}

void PKStrokeCoherenceBase.init()()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PKStrokeCoherenceBase.init(ink:strokePath:transform:mask:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PKStrokeCoherenceBase.newShared(in:flatten:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t PKStrokeCoherenceBase._newStroke(withSubstrokes:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  void *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(void);
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  objc_class *v66;
  id v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  _QWORD v72[2];
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void (*v91)(void);
  objc_super v92;
  _QWORD *v93;
  uint64_t v94;

  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v90 = (char *)v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v72 - v10;
  v91 = (void (*)(void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v12 = *((_QWORD *)v91 - 1);
  MEMORY[0x1E0C80A78](v91, v13);
  v15 = (char *)v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for UUID();
  v87 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v16);
  v77 = (char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v78 = (char *)v72 - v20;
  v21 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v21, v22);
  v72[1] = (char *)v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x1E0C80A78](v24, v25);
  v72[0] = (char *)v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v84 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v27);
  v73 = (char *)v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v74 = (char *)v72 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v86 = (char *)v72 - v34;
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v82 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v35);
  v81 = (char *)v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v83 = (char *)v72 - v39;
  v40 = *(_QWORD *)(a1 + 16);
  v41 = MEMORY[0x1E0DEE9D8];
  v80 = a2;
  if (v40)
  {
    v94 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    v42 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v88 = *(_QWORD *)(v5 + 72);
    v89 = v5;
    v43 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v43(v11, v42, v4);
      v43(v90, (uint64_t)v11, v4);
      type metadata accessor for PKStrokeCoherenceBase(0);
      v44 = swift_dynamicCast();
      v45 = v93;
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v93) + 0x60))(v44);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      v41 = v94;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
        v41 = v94;
      }
      v47 = *(_QWORD *)(v41 + 16);
      v46 = *(_QWORD *)(v41 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
        v41 = v94;
      }
      *(_QWORD *)(v41 + 16) = v47 + 1;
      (*(void (**)(unint64_t, char *, void (*)(void)))(v12 + 32))(v41+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v47, v15, v91);
      v5 = v89;
      v42 += v88;
      --v40;
    }
    while (v40);
  }
  v94 = v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
  v48 = v83;
  CRSequence.init<A>(_:)();
  v49 = v75;
  swift_beginAccess();
  v91 = *(void (**)(void))(v84 + 16);
  v50 = v86;
  v51 = v76;
  v91();
  LOBYTE(v93) = 1;
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  CRRegister.value.setter();
  v52 = v49 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  v54 = v78;
  v55 = v79;
  v53(v78, v52, v79);
  v56 = v81;
  v57 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
  v57(v81, v48, v85);
  v58 = v74;
  v59 = v50;
  v60 = v91;
  ((void (*)(char *, char *, uint64_t))v91)(v74, v59, v51);
  v61 = (char *)objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherenceSubstrokes(0));
  v62 = v56;
  v63 = v85;
  v57(&v61[OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes], v62, v85);
  v64 = v77;
  v53(v77, (uint64_t)v54, v55);
  v65 = v73;
  ((void (*)(char *, char *, uint64_t))v60)(v73, v58, v51);
  v53(&v61[OBJC_IVAR___PKStrokeCoherenceBase_identity], (uint64_t)v64, v55);
  ((void (*)(char *, char *, uint64_t))v60)(&v61[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v65, v51);
  v66 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v92.receiver = v61;
  v92.super_class = v66;
  v67 = objc_msgSendSuper2(&v92, sel_init);
  v68 = *(void (**)(char *, uint64_t))(v84 + 8);
  v68(v65, v51);
  v69 = *(void (**)(char *, uint64_t))(v87 + 8);
  v69(v64, v55);
  v68(v58, v51);
  v70 = *(void (**)(char *, uint64_t))(v82 + 8);
  v70(v81, v63);
  v69(v54, v55);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

  v68(v86, v51);
  return ((uint64_t (*)(char *, uint64_t))v70)(v83, v63);
}

void PKStrokeCoherenceBase.concreteStroke(in:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id PKStrokeCoherenceBase.__allocating_init(ink:strokePath:transform:mask:randomSeed:)(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, uint64_t a5)
{
  objc_class *v5;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v19 = a3[1];
  v20 = *a3;
  v10 = *((_QWORD *)a3 + 4);
  v11 = *((_QWORD *)a3 + 5);
  v12 = objc_allocWithZone(v5);
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  v14 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v21[0] = v20;
  v21[1] = v19;
  v22 = v10;
  v23 = v11;
  v15 = objc_msgSend(v12, sel_initWithInk_strokePath_transform_mask_randomSeed_, isa, v14, v21, a4, a5);

  v16 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  v17 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  return v15;
}

void PKStrokeCoherenceBase.init(ink:strokePath:transform:mask:randomSeed:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PKStrokeCoherenceBase.__allocating_init(data:id:flags:ink:transform:substrokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  objc_class *v5;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  Class v14;
  Class v15;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v22 = a5[1];
  v23 = *a5;
  v10 = *((_QWORD *)a5 + 4);
  v11 = *((_QWORD *)a5 + 5);
  v12 = objc_allocWithZone(v5);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v14 = UUID._bridgeToObjectiveC()().super.isa;
  v15 = PKInk._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PKStroke();
  v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v24[0] = v23;
  v24[1] = v22;
  v25 = v10;
  v26 = v11;
  v17 = objc_msgSend(v12, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v14, a3, v15, v24, v16);

  v18 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a4, v18);
  v19 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a2, v19);
  v20 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
  return v17;
}

void PKStrokeCoherenceBase.init(data:id:flags:ink:transform:substrokes:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PKStrokeCoherenceBase.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKStrokeCoherenceBase);
}

uint64_t PKStrokeCoherenceSubstrokes.newShared(in:flatten:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v44 = a1;
  v54 = a2;
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v52 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v3);
  v48 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v45 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v8);
  v49 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  MEMORY[0x1E0C80A78](v10, v12);
  v55 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v40 = *(_QWORD *)(v18 - 8);
  v19 = v40;
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v23 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v24);
  v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v2;
  v27 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v37(v22, v27, v18);
  v28 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  v42 = v28;
  swift_beginAccess();
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v41(v55, v28, v10);
  swift_retain();
  CRKeyPath.init(_:)();
  v29 = type metadata accessor for CRKeyPath();
  v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v30(v17, 0, 1, v29);
  v39 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  Ref.init<A>(_:_:identity:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v36 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes, v47);
  v37(v22, v27, v18);
  swift_retain();
  v31 = v48;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v22, v18);
  v32 = v50;
  MEMORY[0x1DF0E3378](v50);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v31, v32);
  v30(v17, 0, 1, v29);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11808]);
  v33 = v49;
  Ref.init<A>(_:_:identity:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v33, v53);
  v41(v55, v42, v43);
  return Ref.init(id:)();
}

uint64_t one-time initialization function for substrokesInkType()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v8;

  v0 = type metadata accessor for PKInkingTool.InkType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKInk();
  __swift_allocate_value_buffer(v5, static PKStrokeCoherenceSubstrokes.substrokesInkType);
  __swift_project_value_buffer(v5, (uint64_t)static PKStrokeCoherenceSubstrokes.substrokesInkType);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0CD0F60], v0);
  v6 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  return PKInk.init(_:color:)();
}

uint64_t PKStrokeCoherenceSubstrokes._substrokes(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  _QWORD v17[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for PKDrawing();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v10);
  type metadata accessor for PKDrawingCoherence(0);
  if (!swift_dynamicCast())
    return MEMORY[0x1E0DEE9D8];
  v13 = (void *)v17[3];
  (*(void (**)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes, v3);
  v14 = v13;
  v15 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9Coherence10CRSequenceVyAF3RefVyAF10CRRegisterVyAF14SharedTagged_2Vy8PaperKit0I6StrokeVGGGG_06PencilK08PKStrokeVs5NeverOTg503_s8j5Kit27nd32SubstrokesC11_substrokes2inSay06m29B00C0VGAF9PKDrawingV_tFAH0D03f6VyAL10g6VyAL14hi9_2VyAA0M6L9VGGGXEfU_AO0yD0CTf1cn_nTf4ng_n(v7, (uint64_t)v14);

  (*(void (**)(unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v4 + 8))(v7, v3);
  return v15;
}

Swift::String __swiftcall PKStrokeCoherenceSubstrokes.description(atDepth:)(Swift::Int atDepth)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  Swift::String result;
  _QWORD v23[4];
  uint64_t v24;
  unint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  v6 = *(_QWORD *)(v4 - 8);
  v8 = MEMORY[0x1E0C80A78](v4, v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1DF0E42D8](8224, 0xE200000000000000, atDepth, v8);
  v13 = v12;
  v24 = 0;
  v25 = 0xE000000000000000;
  v23[1] = v2;
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v15, v4);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, v5, MEMORY[0x1E0CB09F0]);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v4);
  v17 = v24;
  v18 = (void *)v25;
  v24 = v11;
  v25 = v13;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v24;
  v21 = (void *)v25;
  result._object = v21;
  result._countAndFlagsBits = v20;
  return result;
}

id PKStrokeCoherenceSubstrokes.concreteStroke(in:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  id v35;
  Class isa;
  Class v37;
  Class v38;
  Class v39;
  id v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];

  v2 = v1;
  v4 = type metadata accessor for PKInk();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PKStrokePath();
  v46 = *(_QWORD *)(v20 - 8);
  v47 = v20;
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = objc_msgSend(v2, sel__substrokesInDrawing_, a1, v22);
  v26 = type metadata accessor for PKStroke();
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_n(v27, a1);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v26 - 8);
  if (!*(_QWORD *)(v28 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v15, 1, 1, v26);
    goto LABEL_6;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v15, v28 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)), v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v15, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v15, 1, v26) == 1)
  {
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v19, 1, 1, v47);
    goto LABEL_7;
  }
  PKStroke.path.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v26);
  v31 = v46;
  v30 = v47;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v19, 0, 1, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v30) == 1)
  {
LABEL_7:
    PKStrokePath.init()();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PKStrokePath?);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v24, v19, v47);
LABEL_8:
  v32 = objc_msgSend(v2, sel__strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v33 = objc_msgSend(v2, sel__flags);
  v34 = objc_msgSend(v2, "ink");
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  v35 = objc_allocWithZone(MEMORY[0x1E0CD12D0]);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v37 = UUID._bridgeToObjectiveC()().super.isa;
  v38 = PKInk._bridgeToObjectiveC()().super.isa;
  v39 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v48[0] = 0x3FF0000000000000;
  v48[1] = 0;
  v48[2] = 0;
  v48[3] = 0x3FF0000000000000;
  v48[4] = 0;
  v48[5] = 0;
  v40 = objc_msgSend(v35, sel_initWithData_id_flags_ink_transform_substrokes_, isa, v37, v33, v38, v48, v39);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v45);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v47);
  return v40;
}

void PKStrokeCoherenceSubstrokes.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PKStrokeCoherenceSubstrokes.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR___PKStrokeCoherenceSubstrokes_substrokes;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id PKStrokeCoherenceSubstrokes.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKStrokeCoherenceSubstrokes);
}

uint64_t PKStrokeCoherence._path.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct, a1);
}

uint64_t PKStrokeCoherence._path.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
}

uint64_t (*PKStrokeCoherence._path.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t key path setter for PKStrokeCoherence._path : PKStrokeCoherence(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  v10 = a5(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v16 - v12;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)&v16 - v12, a5);
  v14 = *a2 + *a6;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v13, v14, a5);
  return swift_endAccess();
}

uint64_t PKStrokeCoherence.resolvedProperties.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties, a1);
}

uint64_t PKStrokeCoherence._path.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of PKStrokeProperties(v6, a3, a2);
}

uint64_t PKStrokeCoherence.resolvedProperties.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t PKStrokeCoherence._path.setter(uint64_t a1, _QWORD *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;

  v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct(a1, v6, a3);
  return swift_endAccess();
}

uint64_t (*PKStrokeCoherence.resolvedProperties.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t PKStrokeCoherence.inheritedProperties.getter@<X0>(uint64_t a1@<X8>)
{
  return PKStrokeCoherence._path.getter(&OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties, a1);
}

uint64_t PKStrokeCoherence.inheritedProperties.setter(uint64_t a1)
{
  return PKStrokeCoherence._path.setter(a1, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

uint64_t (*PKStrokeCoherence.inheritedProperties.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PKStrokeCoherenceSubstrokes.shared.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  return Ref.init(id:)();
}

uint64_t PKStrokeCoherence.newShared(in:flatten:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t, uint64_t);
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v114 = a2;
  v110 = a1;
  v135 = a3;
  v131 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v130 = *(_QWORD *)(v131 - 8);
  MEMORY[0x1E0C80A78](v131, v4);
  v129 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v133 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134, v6);
  v132 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v138 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137, v8);
  v124 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v126 = (char *)&v102 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v105 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v123, v16);
  v121 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v104 = (uint64_t)&v102 - v20;
  v116 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v116, v21);
  v115 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v142, v23);
  v103 = (uint64_t)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v141 = (uint64_t)&v102 - v27;
  v111 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v111, v28);
  v140 = (uint64_t)&v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v30);
  v106 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v109 = (char *)&v102 - v34;
  v35 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v102 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v102 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v45 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v46);
  v48 = (char *)&v102 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v136 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139, v49);
  v51 = (char *)&v102 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  v118 = v45;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v113 = v52;
  v112 = v53;
  v53(v48, v52, v44);
  v54 = v3 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v122 = v54;
  v128 = v35;
  v56 = v141;
  v120 = v55;
  v55(v39, v54, v35);
  swift_retain();
  v127 = v39;
  CRKeyPath.init(_:)();
  v57 = type metadata accessor for CRKeyPath();
  v58 = *(char **)(*(_QWORD *)(v57 - 8) + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v58)(v43, 0, 1, v57);
  v59 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  v117 = v48;
  v125 = v44;
  v119 = v59;
  Ref.init<A>(_:_:identity:)();
  v60 = v3;
  (*(void (**)(char *, uint64_t))(v136 + 8))(v51, v139);
  v61 = v3 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v61, v140, type metadata accessor for PKStrokePathStruct);
  v136 = v60;
  v62 = v60 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  v139 = v62;
  outlined init with copy of PKStrokeProperties(v62, v56, type metadata accessor for PKStrokeStruct);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v63 = (uint64_t)v115;
  CRRegister.wrappedValue.getter();
  v64 = v107;
  v65 = v106;
  v66 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v106, v63 + *(int *)(v116 + 32), v108);
  outlined destroy of PKStrokeProperties(v63, type metadata accessor for PKStrokeProperties);
  outlined destroy of PKStrokeProperties(v56, type metadata accessor for PKStrokeStruct);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<PKStrokePathStruct> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokePathStruct>, MEMORY[0x1E0D12878]);
  v67 = v65;
  Reference.identity.getter();
  v68 = *(void (**)(char *, uint64_t))(v64 + 8);
  v68(v67, v66);
  v116 = v57;
  v115 = v58;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v58)(v43, 0, 1, v57);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  v69 = v109;
  v70 = v43;
  Ref.init<A>(_:_:identity:)();
  v68(v69, v66);
  if ((v114 & 1) == 0)
    goto LABEL_3;
  v71 = v136 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  v72 = v104;
  outlined init with copy of PKStrokeProperties(v71, v104, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  v73 = (uint64_t)v105;
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties(v72, type metadata accessor for PKStrokeInheritedProperties);
  LODWORD(v71) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v73, 1, v137);
  outlined destroy of StocksKitCurrencyCache.Provider?(v73, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if ((_DWORD)v71 != 1)
  {
    v88 = v141;
    outlined init with copy of PKStrokeProperties(v139, v141, type metadata accessor for PKStrokeStruct);
    v89 = v136 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
    swift_beginAccess();
    outlined init with copy of PKStrokeProperties(v89, v121, type metadata accessor for PKStrokeInheritedProperties);
    swift_retain();
    v90 = v70;
    static CRKeyPath.unique.getter();
    v91 = v116;
    v92 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v115;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v115)(v70, 0, 1, v116);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
    v93 = v126;
    Ref.init<A>(_:_:identity:)();
    v94 = v138;
    v95 = v137;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v124, v93, v137);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
    outlined init with copy of PKStrokeProperties(v88, v103, type metadata accessor for PKStrokeStruct);
    v96 = v117;
    v97 = v125;
    v112(v117, v113, v125);
    swift_retain();
    v98 = v129;
    CRRegister.value.getter();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v96, v97);
    v99 = v131;
    MEMORY[0x1DF0E3378](v131);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v98, v99);
    v92(v90, 0, 1, v91);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
    v100 = v132;
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v100, v134);
    outlined destroy of PKStrokeProperties(v88, type metadata accessor for PKStrokeStruct);
  }
  else
  {
LABEL_3:
    v74 = v136 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
    swift_beginAccess();
    outlined init with copy of PKStrokeProperties(v74, v121, type metadata accessor for PKStrokeInheritedProperties);
    v75 = v141;
    outlined init with copy of PKStrokeProperties(v139, v141, type metadata accessor for PKStrokeStruct);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    v76 = v124;
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties(v75, type metadata accessor for PKStrokeStruct);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12878]);
    v77 = v70;
    v78 = v137;
    Reference.identity.getter();
    v79 = *(void (**)(char *, uint64_t))(v138 + 8);
    v79(v76, v78);
    v80 = v116;
    v81 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v115;
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v115)(v77, 0, 1, v116);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
    v82 = v126;
    Ref.init<A>(_:_:identity:)();
    v79(v82, v78);
    outlined init with copy of PKStrokeProperties(v139, v75, type metadata accessor for PKStrokeStruct);
    v83 = v117;
    v84 = v125;
    v112(v117, v113, v125);
    swift_retain();
    v85 = v129;
    CRRegister.value.getter();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v83, v84);
    v86 = v131;
    MEMORY[0x1DF0E3378](v131);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v85, v86);
    v81(v77, 0, 1, v80);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
    v87 = v132;
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v87, v134);
  }
  v120(v127, v122, v128);
  return Ref.init(id:)();
}

void one-time initialization function for defaultInk()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  id v4;

  v0 = (void *)*MEMORY[0x1E0CD1308];
  v1 = (void *)objc_opt_self();
  v2 = v0;
  v3 = objc_msgSend(v1, sel_blackColor);
  v4 = objc_msgSend((id)objc_opt_self(), sel_inkWithIdentifier_color_weight_, v2, v3, 0.0);

  static PKStrokeCoherence.defaultInk = (uint64_t)v4;
}

id PKStrokeCoherence.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PKStrokeCoherence.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  void *v45;
  id v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  objc_class *v59;
  id v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  objc_super v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v69 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x1E0C80A78](v70, v4);
  v68 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v71 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v72 = (char *)&v64 - v11;
  v12 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v65 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v79 = *(_QWORD *)(v15 - 8);
  v80 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v64 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v77 = *(_QWORD *)(v23 - 8);
  v78 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v76 = (char *)&v64 - v29;
  v67 = type metadata accessor for UUID();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v30);
  v32 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v75 = (char *)&v64 - v35;
  v36 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v64 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v64 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v0;
  PKStrokePath.init()();
  outlined init with take of PKStrokeStruct((uint64_t)v43, (uint64_t)&v44[OBJC_IVAR___PKStrokeCoherence__path], type metadata accessor for PKStrokePathStruct);
  if (one-time initialization token for defaultInk != -1)
    swift_once();
  v45 = (void *)static PKStrokeCoherence.defaultInk;
  v83 = 0x3FF0000000000000uLL;
  v84 = 0;
  v85 = 0x3FF0000000000000;
  v86 = 0;
  v87 = 0;
  v46 = (id)static PKStrokeCoherence.defaultInk;
  PKStrokeInheritedProperties.init(ink:transform:)(v45, &v83, (uint64_t)v39);
  v47 = (uint64_t)&v44[OBJC_IVAR___PKStrokeCoherence_resolvedProperties];
  outlined init with take of PKStrokeStruct((uint64_t)v39, (uint64_t)&v44[OBJC_IVAR___PKStrokeCoherence_resolvedProperties], type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v47, (uint64_t)&v44[OBJC_IVAR___PKStrokeCoherence_inheritedProperties], type metadata accessor for PKStrokeInheritedProperties);
  v48 = v75;
  UUID.init()();
  UUID.init()();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
  v49 = v76;
  Ref.init(id:)();
  UUID.init()();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  Ref.init(id:)();
  v64 = v22;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v18, v22, v80);
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v26, v49, v78);
  v50 = v65;
  PKStrokeStruct.init(inheritedProperties:path:flags:mask:)((uint64_t)v18, (uint64_t)v26, 0, 0, v65);
  outlined init with take of PKStrokeStruct(v50, (uint64_t)&v44[OBJC_IVAR___PKStrokeCoherence_model], type metadata accessor for PKStrokeStruct);

  v82 = 0;
  v51 = v66;
  v52 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  v53 = v67;
  v52(v32, v48, v67);
  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>, MEMORY[0x1E0D121F8]);
  v54 = v72;
  CRRegister.init(_:)();
  UUID.init()();
  v56 = v73;
  v55 = v74;
  v57 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
  v58 = v71;
  v57(v71, v54, v74);
  v52(&v44[OBJC_IVAR___PKStrokeCoherenceBase_identity], v32, v53);
  v57(&v44[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v58, v55);
  v59 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v81.receiver = v44;
  v81.super_class = v59;
  v60 = objc_msgSendSuper2(&v81, sel_init);
  v61 = *(void (**)(char *, uint64_t))(v56 + 8);
  v61(v58, v55);
  v62 = *(void (**)(char *, uint64_t))(v51 + 8);
  v62(v32, v53);
  v61(v54, v55);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v80);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v76, v78);
  v62(v75, v53);
  return v60;
}

uint64_t PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  void *v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t result;
  char *v51;
  char *v52;
  PKInk v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  objc_class *v64;
  id v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  objc_super v94;
  char v95;

  v7 = v6;
  v74 = a5;
  v92 = a4;
  v76 = a3;
  v84 = a2;
  v93 = a1;
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v78 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x1E0C80A78](v79, v12);
  v77 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v14);
  v80 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v82 = (char *)&v69 - v18;
  v19 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v73, v23);
  v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v90 = *(_QWORD *)(v26 - 8);
  v91 = v26;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v69 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v89 = (char *)&v69 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v87 = *(_QWORD *)(v33 - 8);
  v88 = v33;
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v69 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v69 - v39;
  v75 = type metadata accessor for UUID();
  v86 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v41);
  v43 = (char *)&v69 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)&v69 - v46;
  v48 = *(_QWORD *)(a6 + 16);
  v49 = v7;
  result = swift_bridgeObjectRelease();
  if (v48)
  {
    __break(1u);
  }
  else
  {
    v85 = v47;
    v70 = v22;
    UUID.init()();
    UUID.init()();
    type metadata accessor for PKStrokePathStruct(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
    v71 = v40;
    Ref.init(id:)();
    UUID.init()();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
    v51 = v89;
    Ref.init(id:)();
    v52 = &v49[OBJC_IVAR___PKStrokeCoherence__path];
    v72 = type metadata accessor for PKStrokePath();
    v73 = *(_QWORD *)(v72 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v52, v93, v72);
    v53.super.isa = PKInk._bridgeToObjectiveC()().super.isa;
    PKStrokeInheritedProperties.init(ink:transform:)(v53.super.isa, v74, (uint64_t)v25);
    v54 = (uint64_t)&v49[OBJC_IVAR___PKStrokeCoherence_resolvedProperties];
    outlined init with take of PKStrokeStruct((uint64_t)v25, (uint64_t)&v49[OBJC_IVAR___PKStrokeCoherence_resolvedProperties], type metadata accessor for PKStrokeInheritedProperties);
    swift_beginAccess();
    outlined init with copy of PKStrokeProperties(v54, (uint64_t)&v49[OBJC_IVAR___PKStrokeCoherence_inheritedProperties], type metadata accessor for PKStrokeInheritedProperties);
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v29, v51, v91);
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v36, v40, v88);
    v55 = (uint64_t)v70;
    PKStrokeStruct.init(inheritedProperties:path:flags:mask:)((uint64_t)v29, (uint64_t)v36, v76, 0, (uint64_t)v70);
    outlined init with take of PKStrokeStruct(v55, (uint64_t)&v49[OBJC_IVAR___PKStrokeCoherence_model], type metadata accessor for PKStrokeStruct);

    v95 = 0;
    v56 = v75;
    v57 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
    v57(v43, v85, v75);
    CRKeyPath.init(_:)();
    lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
    SharedTagged_2.init(_:id:)();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>, MEMORY[0x1E0D121F8]);
    v58 = v82;
    CRRegister.init(_:)();
    v59 = v84;
    v57(v43, v84, v56);
    v61 = v80;
    v60 = v81;
    v62 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v63 = v83;
    v62(v80, v58, v83);
    v57(&v49[OBJC_IVAR___PKStrokeCoherenceBase_identity], v43, v56);
    v62(&v49[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], v61, v63);
    v64 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
    v94.receiver = v49;
    v94.super_class = v64;
    v65 = objc_msgSendSuper2(&v94, sel_init);
    v66 = *(void (**)(char *, uint64_t))(v60 + 8);
    v66(v61, v63);
    v67 = *(void (**)(char *, uint64_t))(v86 + 8);
    v67(v43, v56);
    v68 = type metadata accessor for PKInk();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v92, v68);
    v67(v59, v56);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v93, v72);
    v66(v58, v63);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v91);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v71, v88);
    v67(v85, v56);
    return (uint64_t)v65;
  }
  return result;
}

id PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, char *a6)
{
  void *v6;
  void *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  objc_class *v31;
  id v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  objc_super v46;
  void *v47;

  v7 = v6;
  v40 = a6;
  v45 = a5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v39 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID();
  v38 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a1;
  outlined init with copy of PKStrokeProperties(a1, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_model, type metadata accessor for PKStrokeStruct);
  v43 = a2;
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
  v42 = a3;
  outlined init with copy of PKStrokeProperties(a3, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
  v41 = a4;
  outlined init with copy of PKStrokeProperties(a4, (uint64_t)v7 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  type metadata accessor for PKStrokeInheritedProperties(0);
  v20 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v21 = v47;
  swift_endAccess();

  if (!v21)
  {
    v37 = v19;
    v22 = v16;
    if (one-time initialization token for defaultInk != -1)
      swift_once();
    v23 = (void *)static PKStrokeCoherence.defaultInk;
    swift_beginAccess();
    v47 = v23;
    v24 = v23;
    CRRegister.wrappedValue.setter();
    swift_endAccess();
    v16 = v22;
    v19 = v37;
  }

  v25 = v19;
  v26 = v38;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v27(v25, (uint64_t)v45, v16);
  v29 = v39;
  v28 = v40;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v30(v15, (uint64_t)v40, v12);
  v27(&v20[OBJC_IVAR___PKStrokeCoherenceBase_identity], (uint64_t)v25, v16);
  v30(&v20[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode], (uint64_t)v15, v12);
  v31 = (objc_class *)type metadata accessor for PKStrokeCoherenceBase(0);
  v46.receiver = v20;
  v46.super_class = v31;
  v32 = objc_msgSendSuper2(&v46, sel_init);
  v33 = *(void (**)(char *, uint64_t))(v29 + 8);
  v33(v15, v12);
  v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v34(v25, v16);
  v33(v28, v12);
  v34(v45, v16);
  outlined destroy of PKStrokeProperties(v41, type metadata accessor for PKStrokeInheritedProperties);
  outlined destroy of PKStrokeProperties(v42, type metadata accessor for PKStrokeInheritedProperties);
  outlined destroy of PKStrokeProperties(v43, type metadata accessor for PKStrokePathStruct);
  outlined destroy of PKStrokeProperties(v44, type metadata accessor for PKStrokeStruct);
  return v32;
}

id PKStrokeCoherenceBase.__allocating_init(ink:strokePath:transform:mask:)(uint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  objc_class *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Class isa;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v17 = a3[1];
  v18 = *a3;
  v8 = *((_QWORD *)a3 + 4);
  v9 = *((_QWORD *)a3 + 5);
  v10 = objc_allocWithZone(v4);
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  v12 = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v19[0] = v18;
  v19[1] = v17;
  v20 = v8;
  v21 = v9;
  v13 = objc_msgSend(v10, sel_initWithInk_strokePath_transform_mask_, isa, v12, v19, a4);

  v14 = type metadata accessor for PKStrokePath();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
  v15 = type metadata accessor for PKInk();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  return v13;
}

void *PKStrokeCoherence.init(ink:strokePath:transform:mask:)(uint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, double);
  void (*v28)(char *, uint64_t, uint64_t);
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[32];

  v43 = a3;
  v7 = type metadata accessor for PKStroke();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PKInk();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PKStrokePath();
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v26;
  v45 = v25;
  v27 = *(void (**)(char *, uint64_t, double))(v26 + 16);
  v46 = a2;
  v27(v24, a2, v22);
  UUID.init()();
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v47 = a1;
  v28(v15, a1, v11);
  v29 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  v30 = (void *)PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)((uint64_t)v24, v19, 0, (uint64_t)v15, v43, MEMORY[0x1E0DEE9D8]);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  if (a4)
  {
    v31 = a4;
    v32 = v30;
    static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = objc_allocWithZone(MEMORY[0x1E0CD1228]);
    isa = PKStroke._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v33, sel_initWithBezierPath_stroke_, v31, isa);

    (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v42);
    type metadata accessor for PKStrokeMaskStruct();
    v36 = swift_allocObject();
    if (v35)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      v37 = swift_allocObject();
      *(_QWORD *)(v37 + 16) = v35;
      *(_QWORD *)(v36 + 16) = v37;
    }
    else
    {
      swift_deallocPartialClassInstance();
      v36 = 0;
    }
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v38 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
    *(_QWORD *)(v39 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v36;
    v38(v48, 0);
    swift_endAccess();

    swift_release();
  }
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v47, v11);
  return v30;
}

void PKStrokeCoherence.parentStrokeForInsertion(in:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  objc_class *v17;
  id v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for PKInk();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStrokePath();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(v1, sel_path, v12);
  static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init()();
  v16 = objc_msgSend(v1, "ink");
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = 0x3FF0000000000000uLL;
  v21 = 0;
  v22 = 0x3FF0000000000000;
  v17 = (objc_class *)type metadata accessor for PKStrokeCoherence(0);
  v23 = 0;
  v24 = 0;
  v18 = objc_allocWithZone(v17);
  v19 = (void *)PKStrokeCoherence.init(data:id:flags:ink:transform:substrokes:)((uint64_t)v14, v9, 0, (uint64_t)v5, &v20, MEMORY[0x1E0DEE9D8]);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

}

id PKStrokeCoherence.mutableCopy(with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  id v33;
  id result;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v40 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v38 = *(_QWORD *)(v2 - 8);
  v39 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v18 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v26, (uint64_t)v25, type metadata accessor for PKStrokeStruct);
  v27 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v27, (uint64_t)v21, type metadata accessor for PKStrokePathStruct);
  v28 = v1 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v28, (uint64_t)v17, type metadata accessor for PKStrokeInheritedProperties);
  v29 = v1 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v29, (uint64_t)v13, type metadata accessor for PKStrokeInheritedProperties);
  v30 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v30, v37);
  v31 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v5, v31, v39);
  v32 = (objc_class *)type metadata accessor for PKStrokeCoherence(0);
  v33 = objc_allocWithZone(v32);
  result = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v17, (uint64_t)v13, v9, v5);
  v35 = v40;
  v40[3] = v32;
  *v35 = result;
  return result;
}

void PKStrokeCoherence.copyForMutation()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v34 - v16;
  v18 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v26, (uint64_t)v25, type metadata accessor for PKStrokeStruct);
  v27 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v27, (uint64_t)v21, type metadata accessor for PKStrokePathStruct);
  v28 = v1 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v28, (uint64_t)v17, type metadata accessor for PKStrokeInheritedProperties);
  v29 = v1 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v29, (uint64_t)v13, type metadata accessor for PKStrokeInheritedProperties);
  v30 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v30, v35);
  v31 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v5, v31, v37);
  v32 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  v33 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v25, (uint64_t)v21, (uint64_t)v17, (uint64_t)v13, v9, v5);
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

}

void PKStrokeCoherence.copyForSubstroke()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1;
  v60 = a1;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v3);
  v54 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for UUID();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v57 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v48 - v13;
  v53 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v53, v15);
  v49 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v48 - v19;
  v21 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v48 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v48 - v31;
  v33 = v2 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v33, (uint64_t)v32, type metadata accessor for PKStrokeStruct);
  v34 = v2 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v34, (uint64_t)v24, type metadata accessor for PKStrokePathStruct);
  v35 = v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v35, (uint64_t)v20, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeProperties(v33, (uint64_t)v28, type metadata accessor for PKStrokeStruct);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for PKStrokeStruct);
  v36 = v49;
  PKStrokeInheritedProperties.init(inherited:)((uint64_t)v14, v49);
  v37 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  v38 = v51;
  v39 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v7, v37, v52);
  v40 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  v41 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v40, v56);
  v42 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
  v43 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)((uint64_t)v32, (uint64_t)v24, (uint64_t)v20, v36, v7, v41);
  UUID.init()();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
  Ref.init(id:)();
  swift_beginAccess();
  v45 = v58;
  v44 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v57, v14, v59);
  CRRegister.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v44);
  swift_endAccess();
  UUID.init()();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  objc_msgSend(v43, sel__setStrokeUUID_, isa);

  v47 = v43;
  static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

}

Class @objc PKStrokeCoherence.copyForMutation()(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  Class isa;
  uint64_t v13;

  v5 = type metadata accessor for PKStroke();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1;
  a3();

  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return isa;
}

id PKStrokeCoherence.sliceIdentifier(forTStart:tEnd:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  Class isa;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  objc_class *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  Class v49;
  id v50;
  void (*v51)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  objc_super v61;

  v3 = v2;
  v6 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10, v11);
  v58 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for FinalizedTimestamp();
  v59 = *(_QWORD *)(v13 - 8);
  v60 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v54 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v57 = (char *)&v53 - v18;
  v19 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v53 - v25;
  v27 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v27 - 8);
  v55 = v27;
  v29 = v28;
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)&v53 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v32;
  v33 = v2 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v53 = v29;
  v34(v32, v33, v27);
  v35 = v3 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v35, (uint64_t)v26, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.timestamp.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v26, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeProperties(v35, (uint64_t)v22, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  v36 = v54;
  CRRegister.timestamp.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v22, type metadata accessor for PKStrokeInheritedProperties);
  v37 = v3 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v37, (uint64_t)v9, type metadata accessor for PKStrokePathStruct);
  isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v39 = -[objc_class _strokeDataUUID](isa, sel__strokeDataUUID);

  v40 = (uint64_t)v58;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v41 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v9, v41);
  v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v43 = v55;
  v42(v40, 0, 1, v55);
  v44 = (objc_class *)type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
  v45 = objc_allocWithZone(v44);
  v47 = v59;
  v46 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))((uint64_t)v45 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_transformTimestamp, v36, v60);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, (uint64_t)v45 + OBJC_IVAR___PKStrokeProviderSliceIdentifierCoherence_strokeDataUUID, &demangling cache variable for type metadata for UUID?);
  v48 = v56;
  v49 = UUID._bridgeToObjectiveC()().super.isa;
  v61.receiver = v45;
  v61.super_class = v44;
  v50 = objc_msgSendSuper2(&v61, sel_initWithUUID_tStart_tEnd_, v49, a1, a2);

  outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for UUID?);
  v51 = *(void (**)(char *, uint64_t))(v47 + 8);
  v51(v36, v46);
  v51(v57, v46);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v43);
  return v50;
}

uint64_t PKStrokeCoherence.ink.setter(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  Class v17;
  id v18;
  void (*v19)(char *, uint64_t);
  CGFloat b;
  CGFloat a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  void (*v26)(Class *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  BOOL IsIdentity;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class v41[4];
  CGAffineTransform v42;

  v2 = v1;
  v4 = type metadata accessor for PKInk();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t)v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v13, (uint64_t)v12, type metadata accessor for PKStrokeInheritedProperties);
  v14 = (uint64_t)v2 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v12, v14, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  v40 = a1;
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  swift_beginAccess();
  v41[0] = isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  outlined init with copy of PKStrokeProperties(v14, (uint64_t)v12, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v12, v13, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  v16 = objc_msgSend(v2, "ink");
  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = PKInk._bridgeToObjectiveC()().super.isa;
  v18 = -[objc_class behavior](v17, sel_behavior);

  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39 = v4;
  v19(v8, v4);
  objc_msgSend(v18, sel_inkTransform);
  a = v42.a;
  b = v42.b;
  c = v42.c;
  d = v42.d;
  tx = v42.tx;
  ty = v42.ty;

  swift_beginAccess();
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v26 = (void (*)(Class *, _QWORD))CRRegister.wrappedValue.modify();
  v28 = v27;
  v42.a = a;
  v42.b = b;
  v42.c = c;
  v42.d = d;
  v42.tx = tx;
  v42.ty = ty;
  IsIdentity = CGAffineTransformIsIdentity(&v42);
  v30 = 0.0;
  v31 = 0.0;
  v32 = 0.0;
  v33 = 0.0;
  v34 = 0.0;
  v35 = 0.0;
  if (!IsIdentity)
  {
    v30 = a;
    v31 = b;
    v32 = c;
    v33 = d;
    v34 = tx;
    v35 = ty;
  }
  v36 = v28 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 44);
  *(CGFloat *)v36 = v30;
  *(CGFloat *)(v36 + 8) = v31;
  *(CGFloat *)(v36 + 16) = v32;
  *(CGFloat *)(v36 + 24) = v33;
  *(CGFloat *)(v36 + 32) = v34;
  *(CGFloat *)(v36 + 40) = v35;
  *(_BYTE *)(v36 + 48) = IsIdentity;
  v26(v41, 0);
  swift_endAccess();
  return ((uint64_t (*)(uint64_t, uint64_t))v19)(v40, v39);
}

void @objc PKStrokeCoherence.ink.setter(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD), void (*a5)(void *), void (*a6)(char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;

  v10 = a4(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v16 - v12;
  v14 = a3;
  v15 = a1;
  a5(a3);

  a6(v13);
}

uint64_t PKStrokeCoherence.path.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  v3 = v1 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  v4 = type metadata accessor for PKStrokePath();
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  swift_endAccess();
  v6 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  v7 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v8 = *(_QWORD *)(v6 + v7);
    v9 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v8 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v8 + 32) = v9;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    v10 = swift_allocObject();
    v11 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v10 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v10 + 64) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v10 + 88) = 0;
    *(_QWORD *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_QWORD *)(v6 + v7) = v10;
    swift_release();
  }
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

id PKStrokeCoherence._strokeMask.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v1 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v9, (uint64_t)v8, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  v10 = *(_QWORD *)&v4[*(int *)(v1 + 36)];
  swift_retain();
  outlined destroy of PKStrokeProperties((uint64_t)v4, type metadata accessor for PKStrokeProperties);
  outlined destroy of PKStrokeProperties((uint64_t)v8, type metadata accessor for PKStrokeStruct);
  if (!v10)
    return 0;
  v11 = *(id *)(*(_QWORD *)(v10 + 16) + 16);
  swift_release();
  return v11;
}

Class @objc PKStrokeCoherenceSubstrokes._strokeUUID.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Class isa;
  uint64_t v10;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return isa;
}

uint64_t PKStrokeCoherence._strokeUUID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v21 = a1;
  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x1E0C80A78](v5, v6);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v7 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, a1, v11, v14);
  v17 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_identity;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v17, v16, v11);
  swift_endAccess();
  v23 = 0;
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
  SharedTagged_2.init(_:id:)();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>, MEMORY[0x1E0D121F8]);
  CRRegister.init(_:)();
  v18 = v1 + OBJC_IVAR___PKStrokeCoherenceBase_strokeNode;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v18, v10, v22);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v21, v11);
}

void PKStrokeCoherence.isEqual(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  id v34;
  id v35;
  Class isa;
  unsigned __int8 v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v2 = type metadata accessor for FinalizedTimestamp();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v59 = (char *)&v52 - v8;
  v58 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v58, v9);
  v57 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v56 = (uint64_t)&v52 - v13;
  v14 = type metadata accessor for PKInk();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v52 - v26;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v65, &demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v66 + 1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v65, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for PKStrokeCoherence(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v55 = v14;
    v28 = (char *)v62;
    if ((char *)v62 == v61)
    {

      return;
    }
    v53 = v3;
    v54 = v2;
    v29 = &v61[OBJC_IVAR___PKStrokeCoherenceBase_identity];
    swift_beginAccess();
    v30 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v30(v27, v29, v19);
    v31 = &v28[OBJC_IVAR___PKStrokeCoherenceBase_identity];
    swift_beginAccess();
    v30(v23, v31, v19);
    LOBYTE(v31) = static UUID.== infix(_:_:)();
    v32 = *(void (**)(char *, uint64_t))(v20 + 8);
    v32(v23, v19);
    v32(v27, v19);
    if ((v31 & 1) == 0)
      goto LABEL_12;
    v33 = v61;
    v34 = objc_msgSend(v61, "ink");
    v35 = objc_msgSend(v28, "ink");
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    isa = PKInk._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v55);
    v37 = objc_msgSend(v34, sel_isEqualUnweightedInk_, isa);

    if ((v37 & 1) == 0)
      goto LABEL_12;
    objc_msgSend(v33, sel_transform);
    v62 = v65;
    v63 = v66;
    v64 = v67;
    objc_msgSend(v28, sel_transform);
    if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      goto LABEL_12;
    v38 = objc_msgSend(v33, sel_path);
    v39 = objc_msgSend(v38, sel__strokeDataUUID);

    if (v39)
    {
      v40 = objc_msgSend(v28, sel_path);
      v41 = objc_msgSend(v40, sel__strokeDataUUID);

      v42 = v54;
      v43 = v53;
      if (v41)
      {
        v44 = objc_msgSend(v39, sel_isEqual_, v41);

        if ((v44 & 1) != 0)
        {
          v45 = &v61[OBJC_IVAR___PKStrokeCoherence_model];
          swift_beginAccess();
          v46 = v56;
          outlined init with copy of PKStrokeProperties((uint64_t)v45, v56, type metadata accessor for PKStrokeStruct);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
          v47 = v59;
          CRRegister.timestamp.getter();
          outlined destroy of PKStrokeProperties(v46, type metadata accessor for PKStrokeStruct);
          v48 = (uint64_t)&v28[OBJC_IVAR___PKStrokeCoherence_model];
          swift_beginAccess();
          v49 = v57;
          outlined init with copy of PKStrokeProperties(v48, v57, type metadata accessor for PKStrokeStruct);
          v50 = v60;
          CRRegister.timestamp.getter();
          outlined destroy of PKStrokeProperties(v49, type metadata accessor for PKStrokeStruct);
          static FinalizedTimestamp.== infix(_:_:)();

          v51 = *(void (**)(char *, uint64_t))(v43 + 8);
          v51(v50, v42);
          v51(v47, v42);
          return;
        }
LABEL_12:

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

id PKStrokeCoherence._clipPlane.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id result;
  uint64_t v16;

  v1 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v9, (uint64_t)v8, type metadata accessor for PKStrokeStruct);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  CRRegister.wrappedValue.getter();
  v10 = &v4[*(int *)(v1 + 40)];
  v11 = *(double *)v10;
  v12 = *((double *)v10 + 1);
  v13 = *((double *)v10 + 2);
  v14 = *((double *)v10 + 3);
  LOBYTE(v9) = v10[32];
  outlined destroy of PKStrokeProperties((uint64_t)v4, type metadata accessor for PKStrokeProperties);
  outlined destroy of PKStrokeProperties((uint64_t)v8, type metadata accessor for PKStrokeStruct);
  result = 0;
  if ((v9 & 1) == 0)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD12C8]), sel_initWithOrigin_normal_, v11, v12, v13, v14);
  return result;
}

void PKStrokeCoherence._clipPlane.setter(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_BYTE *, _QWORD);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];

  if (a1)
  {
    objc_msgSend(a1, sel_origin);
    v3 = v2;
    v5 = v4;
    objc_msgSend(a1, sel_normal);
    v7 = v6;
    v9 = v8;
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v10 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
    v12 = v11 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 40);
    *(_QWORD *)v12 = v3;
    *(_QWORD *)(v12 + 8) = v5;
    *(_QWORD *)(v12 + 16) = v7;
    *(_QWORD *)(v12 + 24) = v9;
    *(_BYTE *)(v12 + 32) = 0;
    v10(v16, 0);
    swift_endAccess();

  }
  else
  {
    swift_beginAccess();
    type metadata accessor for PKStrokeStruct(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v13 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
    v15 = v14 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 40);
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_BYTE *)(v15 + 32) = 1;
    v13(v16, 0);
    swift_endAccess();
  }
}

uint64_t PKStrokeCoherence._transform.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v19[3];

  v2 = v1;
  v4 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v8, (uint64_t)v7, type metadata accessor for PKStrokeInheritedProperties);
  v9 = v2 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties;
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v7, v9, type metadata accessor for PKStrokeInheritedProperties);
  v10 = a1[2];
  v11 = *a1;
  v19[1] = a1[1];
  v19[2] = v10;
  v19[0] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.setter();
  swift_endAccess();
  outlined init with copy of PKStrokeProperties(v9, (uint64_t)v7, type metadata accessor for PKStrokeInheritedProperties);
  swift_beginAccess();
  outlined assign with take of PKStrokePathStruct((uint64_t)v7, v8, type metadata accessor for PKStrokeInheritedProperties);
  swift_endAccess();
  v12 = v2 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  v13 = *(int *)(type metadata accessor for PKStrokeStruct(0) + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v14 = *(_QWORD *)(v12 + v13);
    v15 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v14 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v14 + 32) = v15;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    v16 = swift_allocObject();
    v17 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v16 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v16 + 32) = v17;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 0;
    *(_QWORD *)(v16 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v16 + 88) = 0;
    *(_QWORD *)(v16 + 96) = 0;
    *(_QWORD *)(v16 + 104) = 0;
    *(_QWORD *)(v12 + v13) = v16;
    swift_release();
  }
  return swift_endAccess();
}

uint64_t PKStrokeCoherence._bounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  PKStrokePath v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  double v37;
  void *v38;
  void *v39;
  objc_class *v40;
  id v41;
  double v43;
  double v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = v4;
  v44 = a4;
  v43 = a3;
  v8 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v43 - v14;
  v16 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = v5 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v24, (uint64_t)v23, type metadata accessor for PKStrokeStruct);
  v25 = v5 + OBJC_IVAR___PKStrokeCoherence__path;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v25, (uint64_t)v19, type metadata accessor for PKStrokePathStruct);
  v26.super.isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
  v27 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v19, v27);
  v28 = v5 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v28, (uint64_t)v15, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  v29 = v45;
  v30 = v46;
  v31 = v47;
  v32 = v48;
  v33 = v49;
  v34 = v50;
  outlined destroy of PKStrokeProperties((uint64_t)v15, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeProperties(v28, (uint64_t)v11, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v35 = v45;
  outlined destroy of PKStrokeProperties((uint64_t)v11, type metadata accessor for PKStrokeInheritedProperties);
  if (one-time initialization token for unfairLock != -1)
    swift_once();
  swift_beginAccess();
  os_unfair_lock_lock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
  swift_endAccess();
  v36 = *(_QWORD *)&v23[*(int *)(v20 + 24)];
  *(double *)(v36 + 16) = a1;
  *(double *)(v36 + 24) = a2;
  v37 = v44;
  *(double *)(v36 + 32) = v43;
  *(double *)(v36 + 40) = v37;
  v38 = *(void **)(v36 + 48);
  v39 = *(void **)(v36 + 104);
  *(PKStrokePath *)(v36 + 48) = v26;
  *(_QWORD *)(v36 + 56) = v29;
  *(_QWORD *)(v36 + 64) = v30;
  *(_QWORD *)(v36 + 72) = v31;
  *(_QWORD *)(v36 + 80) = v32;
  *(_QWORD *)(v36 + 88) = v33;
  *(_QWORD *)(v36 + 96) = v34;
  *(_QWORD *)(v36 + 104) = v35;
  v40 = v26.super.isa;
  v41 = v35;

  swift_beginAccess();
  os_unfair_lock_unlock((os_unfair_lock_t)&static PKStrokeStruct.unfairLock);
  swift_endAccess();

  return outlined destroy of PKStrokeProperties((uint64_t)v23, type metadata accessor for PKStrokeStruct);
}

double PKStrokeCoherence.renderBounds.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  void *v16;
  CGAffineTransform *v17;
  double v18;
  _BYTE v20[24];
  void *v21;
  PKStrokePath_optional v22;
  PKInk_optional v23;

  v1 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v20[-v7];
  v9 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = (uint64_t)v0 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v13, (uint64_t)v12, type metadata accessor for PKStrokeStruct);
  v14 = (objc_class *)objc_msgSend(v0, sel_path);
  v15 = (uint64_t)v0 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties;
  swift_beginAccess();
  outlined init with copy of PKStrokeProperties(v15, (uint64_t)v8, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v16 = v21;
  outlined destroy of PKStrokeProperties((uint64_t)v8, type metadata accessor for PKStrokeInheritedProperties);
  outlined init with copy of PKStrokeProperties(v15, (uint64_t)v4, type metadata accessor for PKStrokeInheritedProperties);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v4, type metadata accessor for PKStrokeInheritedProperties);
  v23.value.super.isa = (Class)&v21;
  v22.value.super.isa = v14;
  v22.is_nil = (char)v16;
  *(_QWORD *)&v18 = (unint64_t)PKStrokeStruct.bounds(path:ink:transform:)(v22, v23, v17);

  outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for PKStrokeStruct);
  return v18;
}

uint64_t PKStrokeCoherence.compare(to:)()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  Class isa;
  double v5;
  double v6;
  id v8;
  double v9;
  double v10;
  Class v11;
  double v12;
  double v13;

  v1 = objc_msgSend(v0, sel_path);
  objc_msgSend(v1, sel__timestamp);
  v3 = v2;

  isa = PKStroke._bridgeToObjectiveC()().super.isa;
  -[objc_class timestamp](isa, sel_timestamp);
  v6 = v5;

  if (v3 < v6)
    return -1;
  v8 = objc_msgSend(v0, sel_path);
  objc_msgSend(v8, sel__timestamp);
  v10 = v9;

  v11 = PKStroke._bridgeToObjectiveC()().super.isa;
  -[objc_class timestamp](v11, sel_timestamp);
  v13 = v12;

  return v13 < v10;
}

id PKStrokeCoherence.concreteStroke(in:)(void *a1)
{
  void *v1;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
  return _PKStrokeConcrete.init(stroke:drawing:)(v1, a1);
}

uint64_t PKStrokeCoherence.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of PKStrokeProperties(v0 + OBJC_IVAR___PKStrokeCoherence_model, type metadata accessor for PKStrokeStruct);
  outlined destroy of PKStrokeProperties(v0 + OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct);
  outlined destroy of PKStrokeProperties(v0 + OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties);
  return outlined destroy of PKStrokeProperties(v0 + OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties);
}

id PKStrokeCoherence.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKStrokeCoherence);
}

unint64_t lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke;
  if (!lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TaggedStroke, &type metadata for TaggedStroke);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaggedStroke and conformance TaggedStroke);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg507_sSo17_f15ConcreteC8Papere55E6stroke7drawingAbC0A9CoherenceC_AC09PKDrawingG0Ctcfc06D13D00A0VALXEfU_0lE00sQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a2;
  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v22 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v22[1] = v2;
    v29 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v25 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v15 = a1 + v25;
    v16 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
    v17 = *(_QWORD *)(v5 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v24 = v16;
    v26 = v5;
    do
    {
      v23(v8, v15, v4);
      type metadata accessor for PKStrokeCoherence(0);
      swift_dynamicCast();
      v18 = (void *)_PKStrokeConcrete.init(stroke:drawing:)(v28, v27);
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      v14 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v29;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = v29;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v14 + v25 + v20 * v17, v12, v4);
      v29 = v14;
      v15 += v17;
      --v13;
    }
    while (v13);
  }
  return v14;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_AHs5NeverOTg5013_s8PaperKit27f76CoherenceSubstrokesC14concreteStroke2inSo01_C8ConcreteCAA09PKDrawingD0C_tF06D13B00C0VALXEfU_0iE00sK0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v26 = a2;
  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = MEMORY[0x1E0DEE9D8];
  if (v13)
  {
    v22 = v2;
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
    v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v25 = v5;
    v15 = a1 + v24;
    v16 = *(_QWORD *)(v5 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    do
    {
      v23(v8, v15, v4);
      type metadata accessor for PKStrokeCoherenceBase(0);
      swift_dynamicCast();
      v17 = v27;
      v18 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v27) + 0xA8))(v26);

      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v28;
      }
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v14 = v28;
      }
      *(_QWORD *)(v14 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v14 + v24 + v20 * v16, v12, v4);
      v28 = v14;
      v15 += v16;
      --v13;
    }
    while (v13);
  }
  return v14;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF9Coherence10CRSequenceVyAF3RefVyAF10CRRegisterVyAF14SharedTagged_2Vy8PaperKit0I6StrokeVGGGG_06PencilK08PKStrokeVs5NeverOTg503_s8j5Kit27nd32SubstrokesC11_substrokes2inSay06m29B00C0VGAF9PKDrawingV_tFAH0D03f6VyAL10g6VyAL14hi9_2VyAA0M6L9VGGGXEfU_AO0yD0CTf1cn_nTf4ng_n(unsigned int (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v45 = a2;
  v48 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for PKStroke();
  v6 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v7);
  v57 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v47 = (char *)&v44 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v53 = (char *)&v44 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v54 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v46 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v55 = *(char **)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v49 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v25);
  v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CRSequence<A>, &demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11810]);
  v28 = dispatch thunk of Sequence.underestimatedCount.getter();
  v58 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
  (*((void (**)(char *, unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))v55 + 2))(v49, v48, v22);
  v55 = v27;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v28 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (v28)
  {
    v48 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v45 + OBJC_IVAR___PKDrawingCoherence_model);
    swift_beginAccess();
    v49 = (char *)lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D117E0]);
    v30 = v54;
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v15, 1, v19);
      if ((_DWORD)result == 1)
        goto LABEL_22;
      v32 = v51;
      v31 = v52;
      (*(void (**)(char *, unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v51 + 16))(v5, v48, v52);
      specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)((uint64_t)v15, (uint64_t)v5, v57);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v31);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v19);
      v33 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
        v33 = v58;
      }
      v35 = *(_QWORD *)(v33 + 16);
      v34 = *(_QWORD *)(v33 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v33 = v58;
      }
      *(_QWORD *)(v33 + 16) = v35 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v33+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v35, v57, v50);
      v58 = v33;
      --v28;
      v36 = (uint64_t)v53;
      v30 = v54;
      if (!v28)
        goto LABEL_12;
    }
  }
  v33 = v58;
  v36 = (uint64_t)v53;
  v30 = v54;
LABEL_12:
  v57 = v45 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v49 = (char *)lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CRSequence<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D117E0]);
  dispatch thunk of IteratorProtocol.next()();
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  if (v48(v36, 1, v19) != 1)
  {
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
    v38 = (uint64_t)v46;
    v39 = (uint64_t)v47;
    do
    {
      v37(v38, v36, v19);
      v41 = v51;
      v40 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v5, v57, v52);
      specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v38, (uint64_t)v5, v39);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v40);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v38, v19);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
        v33 = v58;
      }
      v43 = *(_QWORD *)(v33 + 16);
      v42 = *(_QWORD *)(v33 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v33 = v58;
      }
      *(_QWORD *)(v33 + 16) = v43 + 1;
      v39 = (uint64_t)v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v33+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v43, v47, v50);
      v58 = v33;
      v36 = (uint64_t)v53;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v48(v36, 1, v19) != 1);
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v55, v56);
  outlined destroy of StocksKitCurrencyCache.Provider?(v36, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  return v33;
}

uint64_t outlined assign with take of PKStrokePathStruct(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for PKStrokeProviderSliceIdentifierCoherence);
}

uint64_t outlined assign with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized PKStrokeCoherence._strokeMask.setter(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void (*v8)(_BYTE *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v16[32];

  type metadata accessor for PKStrokeMaskStruct();
  v3 = swift_allocObject();
  if (a1)
  {
    type metadata accessor for PKStrokeMaskWrapper();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = a1;
    *(_QWORD *)(v3 + 16) = v4;
  }
  else
  {
    swift_deallocPartialClassInstance();
    v3 = 0;
  }
  v5 = v1 + OBJC_IVAR___PKStrokeCoherence_model;
  swift_beginAccess();
  v6 = type metadata accessor for PKStrokeStruct(0);
  v7 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v8 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
  *(_QWORD *)(v9 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v3;
  v8(v16, 0);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  v10 = *(int *)(v6 + 24);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    v11 = *(_QWORD *)(v5 + v10);
    v12 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v11 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v11 + 32) = v12;
  }
  else
  {
    type metadata accessor for PKStrokeStructCache();
    v13 = swift_allocObject();
    v14 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(v13 + 16) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0x3FF0000000000000;
    *(_QWORD *)(v13 + 64) = 0;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)(v13 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(v13 + 88) = 0;
    *(_QWORD *)(v13 + 96) = 0;
    *(_QWORD *)(v13 + 104) = 0;
    *(_QWORD *)(v5 + v10) = v13;
    swift_release();
  }
  return swift_endAccess();
}

uint64_t sub_1DDCF7260@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence__path, type metadata accessor for PKStrokePathStruct, a2);
}

uint64_t sub_1DDCF7274(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokePathStruct, &OBJC_IVAR___PKStrokeCoherence__path);
}

uint64_t sub_1DDCF7298@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties, type metadata accessor for PKStrokeInheritedProperties, a2);
}

uint64_t keypath_getTm_2@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t (*a3)(_QWORD)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;

  v6 = *a1 + *a2;
  swift_beginAccess();
  return outlined init with copy of PKStrokeProperties(v6, a4, a3);
}

uint64_t sub_1DDCF730C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokeInheritedProperties, &OBJC_IVAR___PKStrokeCoherence_resolvedProperties);
}

uint64_t sub_1DDCF7330@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm_2(a1, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties, type metadata accessor for PKStrokeInheritedProperties, a2);
}

uint64_t sub_1DDCF7344(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PKStrokeCoherence._path : PKStrokeCoherence(a1, a2, a3, a4, type metadata accessor for PKStrokeInheritedProperties, &OBJC_IVAR___PKStrokeCoherence_inheritedProperties);
}

uint64_t ObjC metadata update function for PKStrokeProviderSliceIdentifierCoherence()
{
  return type metadata accessor for PKStrokeProviderSliceIdentifierCoherence(0);
}

uint64_t type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D125D0], (uint64_t (*)(uint64_t))type metadata accessor for UUID?);
}

uint64_t ObjC metadata update function for PKStrokeCoherenceBase()
{
  return type metadata accessor for PKStrokeCoherenceBase(0);
}

uint64_t type metadata completion function for PKStrokeCoherenceBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for CRRegister<SharedTagged_2<TaggedStroke>>, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
}

uint64_t type metadata completion function for PKStrokeProviderSliceIdentifierCoherence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  result = a4(319);
  if (v7 <= 0x3F)
  {
    result = a5(319);
    if (v8 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PKStrokeCoherenceBase()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for CRRegister<SharedTagged_2<TaggedStroke>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>, MEMORY[0x1E0D121F8]);
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  }
}

uint64_t ObjC metadata update function for PKStrokeCoherenceSubstrokes()
{
  return type metadata accessor for PKStrokeCoherenceSubstrokes(0);
}

void type metadata completion function for PKStrokeCoherenceSubstrokes()
{
  unint64_t v0;

  type metadata accessor for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for PKStrokeCoherenceSubstrokes()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    v0 = type metadata accessor for CRSequence();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  }
}

uint64_t ObjC metadata update function for PKStrokeCoherence()
{
  return type metadata accessor for PKStrokeCoherence(0);
}

uint64_t type metadata completion function for PKStrokeCoherence()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for PKStrokeStruct(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PKStrokePath();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for PKStrokeInheritedProperties(319);
      if (v3 <= 0x3F)
      {
        result = swift_updateClassMetadata2();
        if (!result)
          return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for PKStrokeCoherence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PKStrokeCoherence._path.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PKStrokeCoherence._path.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PKStrokeCoherence._path.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of PKStrokeCoherence.resolvedProperties.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of PKStrokeCoherence.inheritedProperties.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void CanvasGenerationTool.adjustScrollViewForKeyboardNotification(_:)(void *a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  id v5;
  char *v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  CGFloat v48;
  unint64_t v49;
  char v50;
  double v51;
  unint64_t v52;
  char v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  double v62;
  double v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  uint64_t v74[5];
  __int128 v75;
  __int128 v76;

  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)generativeLogger);
  v4 = v1;
  v5 = a1;
  v6 = (char *)v4;
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v74[0] = v11;
    *(_DWORD *)v10 = 136315906;
    v12 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000001DDF55A80, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2080;
    *(_QWORD *)&v75 = objc_msgSend(v7, sel_name);
    type metadata accessor for NSNotificationName(0);
    v14 = String.init<A>(describing:)();
    *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 32) = 2080;
    v16 = CGRect.debugDescription.getter();
    *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v8, v9, "%s - %s: (notification = %s, generationFrameForKeyboardAvoidance = %s", (uint8_t *)v10, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v11, -1, -1);
    MEMORY[0x1DF0E6558](v10, -1, -1);

  }
  else
  {

  }
  v18 = (double *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance];
  if (CGRectEqualToRect(*(CGRect *)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_generationFrameForKeyboardAvoidance], *MEMORY[0x1E0C9D628]))
  {
    v19 = v6;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v74[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v26 = "%s returning (generationFrameForKeyboardAvoidance is nil)";
LABEL_19:
      _os_log_impl(&dword_1DDB0F000, v20, v21, v26, v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v23, -1, -1);
      MEMORY[0x1DF0E6558](v22, -1, -1);

      return;
    }
LABEL_20:

LABEL_21:
    return;
  }
  v27 = (_QWORD *)MEMORY[0x1DF0E666C](&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_canvas]);
  if (!v27
    || (v28 = v27,
        v19 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v27) + 0x310))(),
        v28,
        !v19))
  {
    v19 = v6;
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v74[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v39 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v26 = "%s returning (scrollViewForAvoidingKeyboard is nil)";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v29 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC];
  if (!v29)
  {
LABEL_23:
    v41 = v6;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      v74[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = CanvasGenerationTool.nameAndPointerDescription.getter();
      *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v42, v43, "%s returning (magicGenerativeVC or magicView is nil)", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v45, -1, -1);
      MEMORY[0x1DF0E6558](v44, -1, -1);

    }
    else
    {

    }
    goto LABEL_21;
  }
  v30 = v29;
  v31 = objc_msgSend(v30, sel_view);
  if (!v31)
  {

    goto LABEL_23;
  }
  v32 = v31;
  v33 = objc_msgSend(v7, sel_userInfo);
  if (!v33)
    goto LABEL_41;
  v34 = v33;
  v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(double *)&v68 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
  v71 = v36;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v35 + 16) && (v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74), (v38 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v35 + 56) + 32 * v37, (uint64_t)&v75);
  }
  else
  {
    v75 = 0u;
    v76 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v74);
  if (!*((_QWORD *)&v76 + 1))
    goto LABEL_38;
  type metadata accessor for CGRect(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v48 = *(double *)&v68;
  *(double *)&v69 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v35 + 16) && (v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74), (v50 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v35 + 56) + 32 * v49, (uint64_t)&v75);
  }
  else
  {
    v75 = 0u;
    v76 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v74);
  if (!*((_QWORD *)&v76 + 1))
  {
LABEL_38:
    swift_bridgeObjectRelease();
LABEL_39:
    outlined destroy of Any?((uint64_t)&v75);
    goto LABEL_41;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_40;
  v51 = *(double *)&v69;
  v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v35 + 16) && (v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74), (v53 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v35 + 56) + 32 * v52, (uint64_t)&v75);
  }
  else
  {
    v75 = 0u;
    v76 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v74);
  if (!*((_QWORD *)&v76 + 1))
    goto LABEL_39;
  if ((swift_dynamicCast() & 1) != 0)
  {
    objc_msgSend(v30, sel_magicViewFullHeightForKeyboardScrolling);
    if (v61 == 0.0)
      v62 = v18[3] + 54.0 + 30.0 + 70.0;
    else
      v62 = v61;
    objc_msgSend(v32, sel_convertRect_toView_, 0, *v18, v18[1], v18[2], v62);
    UIScrollView.scrollTo(_:keyboardFrame:animationDuration:animationCurve:)(v70, v63, v64, v65, v66, v48, v71, v72, v73, v51);
    goto LABEL_44;
  }
LABEL_41:
  v54 = v6;
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    v67 = v32;
    v58 = swift_slowAlloc();
    v74[0] = v58;
    *(_DWORD *)v57 = 136315138;
    v59 = CanvasGenerationTool.nameAndPointerDescription.getter();
    *(_QWORD *)&v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v55, v56, "%s returning (userInfo does not contain valid information)", v57, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v58, -1, -1);
    MEMORY[0x1DF0E6558](v57, -1, -1);

    return;
  }

LABEL_44:
}

uint64_t specialized CRRegister<>.requiredContentVersion<A>(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  Class isa;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  void *v137;

  v129 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v131 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v124 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v132 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v4);
  v130 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v135 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112, v9);
  v110 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v109 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134, v11);
  v133 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v123 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v127 = *(_QWORD *)(v16 - 8);
  v128 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v119 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v108 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v104, v22);
  v105 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v106 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v24);
  v103 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v117, v30);
  v118 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v98 - v34;
  v116 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v126 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116, v36);
  v115 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v40);
  v42 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v44 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v45);
  v47 = (char *)&v98 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v98 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v102, v52);
  v114 = (char *)&v98 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54, v55);
  v125 = (uint64_t)&v98 - v56;
  v136 = v1;
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v57 = *(void (**)(char *, uint64_t))(v44 + 8);
  v121 = v47;
  v122 = v43;
  v120 = v57;
  v57(v47, v43);
  v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v51, 1, v58) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v51, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    v60 = v129;
  }
  else
  {
    v61 = type metadata accessor for PKDrawingStruct();
    v99 = v59;
    v62 = v61;
    v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v64 = (uint64_t)v114;
    v65 = v129;
    v101 = v62;
    v100 = v63;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v51, v58);
    outlined init with take of PKStrokeStruct(v64, v125);
    v66 = v115;
    v67 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v115, v65, v116);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
    CRRegister.wrappedValue.getter();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>, MEMORY[0x1E0D12B28]);
    while (1)
    {
      Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v35, type metadata accessor for PKStrokeInheritedProperties);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v29, 1, v38) == 1)
        break;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v42, v29, v38);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v66, v67);
    v68 = (uint64_t)v118;
    v60 = v129;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
    CRRegister.wrappedValue.getter();
    v69 = v137;
    outlined destroy of PKStrokeProperties(v68, type metadata accessor for PKStrokeInheritedProperties);
    if (v69)
    {
      v70 = (void *)objc_opt_self();
      v71 = v125;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      v72 = (uint64_t)v105;
      CRRegister.wrappedValue.getter();
      v73 = v106;
      v74 = v103;
      v75 = v107;
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v103, v72 + *(int *)(v104 + 32), v107);
      outlined destroy of PKStrokeProperties(v72, type metadata accessor for PKStrokeProperties);
      v76 = v108;
      Ref.subscript.getter();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
      isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
      v78 = type metadata accessor for PKStrokePath();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v76, v78);
      v79 = (uint64_t)objc_msgSend(v70, sel__requiredContentVersionForStrokePath_ink_, isa, v69);

      outlined destroy of PKStrokeProperties(v71, type metadata accessor for PKStrokeStruct);
      return v79;
    }
    outlined destroy of PKStrokeProperties(v125, type metadata accessor for PKStrokeStruct);
  }
  v80 = v135;
  v81 = (uint64_t)v123;
  v82 = v124;
  v83 = v127;
  v84 = v128;
  v86 = v121;
  v85 = v122;
  v87 = v120;
  CRRegister.value.getter();
  SharedTagged_2.tagged2.getter();
  v87(v86, v85);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v81, 1, v84) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v81, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    return 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v119, v81, v84);
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v88 = v110;
    Ref.subscript.getter();
    v89 = v112;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v88, v89);
    CRSequence.Iterator.next()();
    v90 = v132;
    v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48);
    v79 = 1;
    v92 = v113;
    if (v91(v80, 1, v113) != 1)
    {
      v93 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
      v79 = 1;
      do
      {
        v94 = v80;
        v95 = v130;
        v93(v130, v94, v92);
        Ref.subscript.getter();
        v96 = specialized CRRegister<>.requiredContentVersion<A>(in:)(v60);
        (*(void (**)(char *, uint64_t))(v131 + 8))(v82, v136);
        if (v79 >= v96)
        {
          (*(void (**)(char *, uint64_t))(v132 + 8))(v95, v92);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v132 + 8))(v95, v92);
          v79 = v96;
          if (v96 == 3)
            break;
        }
        v80 = v135;
        CRSequence.Iterator.next()();
      }
      while (v91(v80, 1, v92) != 1);
    }
    (*(void (**)(char *, uint64_t))(v109 + 8))(v133, v134);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v119, v128);
  }
  return v79;
}

id specialized PKStrokeStruct.init<A>(stroke:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  id result;
  void *v49;
  uint64_t v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  void (*v52)(char *, char *, uint64_t);
  id v53;
  id v54;
  char *v55;
  Class isa;
  id v57;
  char *v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int *v68;
  char *v69;
  id v70;
  void *v71;
  uint64_t v72;
  id v73;
  char *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;

  v99 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5, v6);
  v105 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v104 = (uint64_t)&v84 - v10;
  v89 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v89, v11);
  v88 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v102 = *(_QWORD *)(v13 - 8);
  v103 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v101 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for UUID();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v16);
  v97 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for PKStrokePath();
  v93 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94, v18);
  v92 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v98, v20);
  v95 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v108 = *(_QWORD *)(v22 - 8);
  v109 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v107 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v96 = (char *)&v84 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v91, v32);
  v34 = (char *)&v84 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v90 = (char *)&v84 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v84 - v41;
  v43 = type metadata accessor for PKStrokeStruct(0);
  v44 = *(int *)(v43 + 24);
  type metadata accessor for PKStrokeStructCache();
  v45 = swift_allocObject();
  v46 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(v45 + 16) = *MEMORY[0x1E0C9D628];
  *(_OWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 48) = 0;
  *(_QWORD *)(v45 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(v45 + 64) = 0;
  *(_QWORD *)(v45 + 72) = 0;
  *(_QWORD *)(v45 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v45 + 88) = 0;
  *(_QWORD *)(v45 + 96) = 0;
  *(_QWORD *)(v45 + 104) = 0;
  *(_QWORD *)(a3 + v44) = v45;
  v100 = v43;
  v47 = *(int *)(v43 + 28);
  v106 = a3;
  *(_QWORD *)(a3 + v47) = MEMORY[0x1E0DEE9E0];
  result = objc_msgSend(a1, "ink");
  if (result)
  {
    v49 = result;
    objc_msgSend(a1, sel_transform);
    PKStrokeInheritedProperties.init(ink:transform:)(v49, &v110, (uint64_t)v34);
    static CRKeyPath.unique.getter();
    v50 = type metadata accessor for CRKeyPath();
    v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56);
    v51(v31, 0, 1, v50);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeInheritedProperties and conformance PKStrokeInheritedProperties, type metadata accessor for PKStrokeInheritedProperties, (uint64_t)&protocol conformance descriptor for PKStrokeInheritedProperties);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    v85 = v36;
    v52 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
    v84 = v42;
    v52(v90, v42, v35);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKStrokeInheritedProperties> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>, MEMORY[0x1E0D12870]);
    v91 = v35;
    CRRegister.init(_:)();
    swift_retain();
    v53 = objc_msgSend(a1, sel_path);
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = objc_msgSend(a1, sel_path);
    v55 = v92;
    static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

    isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
    v57 = -[objc_class _strokeDataUUID](isa, sel__strokeDataUUID);

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v93 + 8))(v55, v94);
    CRKeyPath.init(_:)();
    v51(v31, 0, 1, v50);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
    v58 = v96;
    Ref.init<A>(_:_:identity:)();
    v59 = objc_msgSend(a1, sel__flags);
    v60 = objc_msgSend(a1, sel__groupID);
    if (v60)
    {
      v61 = v60;
      v62 = v104;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
      v64 = v62;
      v65 = 0;
    }
    else
    {
      v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56);
      v64 = v104;
      v65 = 1;
    }
    v66 = v87;
    v63(v64, v65, 1, v87);
    v67 = v105;
    v68 = (int *)v89;
    v69 = v88;
    v70 = objc_msgSend(a1, sel__renderGroupID);
    if (v70)
    {
      v71 = v70;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v72 = 0;
    }
    else
    {
      v72 = 1;
    }
    v63(v67, v72, 1, v66);
    v73 = objc_msgSend(a1, sel__shapeType);
    v74 = v58;
    (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v107, v58, v109);
    v75 = objc_msgSend(a1, sel__strokeMask);
    type metadata accessor for PKStrokeMaskStruct();
    v76 = swift_allocObject();
    if (v75)
    {
      type metadata accessor for PKStrokeMaskWrapper();
      v77 = swift_allocObject();
      *(_QWORD *)(v77 + 16) = v75;
      *(_QWORD *)(v76 + 16) = v77;
    }
    else
    {
      swift_deallocPartialClassInstance();
      v76 = 0;
    }
    v78 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)v69 = v59;
    outlined init with take of (key: Int, value: AnyCRValue)?(v104, (uint64_t)&v69[v68[5]], &demangling cache variable for type metadata for UUID?);
    outlined init with take of (key: Int, value: AnyCRValue)?(v105, (uint64_t)&v69[v68[6]], &demangling cache variable for type metadata for UUID?);
    *(_QWORD *)&v69[v68[7]] = v73;
    v79 = v108;
    v80 = v109;
    (*(void (**)(char *, char *, uint64_t))(v108 + 32))(&v69[v68[8]], v107, v109);
    *(_QWORD *)&v69[v68[9]] = v76;
    v81 = &v69[v68[10]];
    *(_OWORD *)v81 = 0u;
    *((_OWORD *)v81 + 1) = 0u;
    v81[32] = 1;
    v82 = &v69[v68[11]];
    *((_OWORD *)v82 + 1) = 0u;
    *((_OWORD *)v82 + 2) = 0u;
    *(_OWORD *)v82 = 0u;
    v82[48] = 1;
    *(_QWORD *)&v69[v68[12]] = v78;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKStrokeProperties and conformance PKStrokeProperties, type metadata accessor for PKStrokeProperties, (uint64_t)&protocol conformance descriptor for PKStrokeProperties);
    v83 = v101;
    CRRegister.init(_:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v74, v80);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v91);
    return (id)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v102 + 32))(v106 + *(int *)(v100 + 20), v83, v103);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PKDrawingCoherence.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id PKDrawingCoherence.__allocating_init(model:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR___PKDrawingCoherence_model];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

uint64_t PKDrawingCoherence.__allocating_init(concreteDrawing:)(void *a1)
{
  uint64_t v2;

  v2 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(a1);

  return v2;
}

uint64_t specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *i;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t);
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  id v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;

  v123 = a1;
  v124 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2, v3);
  v109 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRKeyPath();
  v107 = *(_QWORD *)(v5 - 8);
  v108 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v106 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v8, v9);
  v115 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v102, v11);
  v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v13);
  v101 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PKStrokeInheritedProperties(0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v114 = (uint64_t)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21, v23);
  v113 = (uint64_t)&v95 - v25;
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v95 - v27;
  v120 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v122 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120, v29);
  v98 = (char *)&v95 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v32 = *(_QWORD *)(v31 - 8);
  v34 = MEMORY[0x1E0C80A78](v31, v33);
  v100 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v36);
  v125 = (char *)&v95 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v39 = *(_QWORD *)(v38 - 8);
  v116 = v38;
  v117 = v39;
  MEMORY[0x1E0C80A78](v38, v40);
  v42 = (char *)&v95 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)&v95 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for PKStrokeStruct(0);
  v48 = MEMORY[0x1E0C80A78](v99, v47);
  v110 = (uint64_t)&v95 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0C80A78](v48, v50);
  v97 = (char *)&v95 - v52;
  MEMORY[0x1E0C80A78](v51, v53);
  v121 = (uint64_t)&v95 - v54;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v111 = *(_QWORD *)(v55 - 8);
  v57 = MEMORY[0x1E0C80A78](v55, v56);
  v96 = (char *)&v95 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v57, v59);
  v61 = (char *)&v95 - v60;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v63 = type metadata accessor for PKDrawingStruct();
  v118 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v119 = v63;
  Ref.subscript.getter();
  v112 = v55;
  CRRegister.value.getter();
  v64 = v116;
  SharedTagged_2.tagged1.getter();
  v65 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t))(v117 + 8))(v42, v64);
  v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v65, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v120);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 8))(v123, v62);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v61, v112);
    return 0;
  }
  v117 = v62;
  v95 = v61;
  v69 = (uint64_t)v97;
  v70 = v124;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
  outlined init with take of PKStrokeStruct(v69, v121);
  v71 = v98;
  v72 = v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v98, v70, v120);
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>, MEMORY[0x1E0D12B28]);
  v73 = v72;
  for (i = v71; ; i = v75)
  {
    v75 = i;
    v76 = v73;
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v18, 1, v31) == 1)
      break;
    v77 = v125;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v125, v31);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v77, v18, v31);
    v73 = v76;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  v122 = *(_QWORD *)(v122 + 8);
  ((void (*)(char *, uint64_t))v122)(v75, v76);
  outlined init with copy of PKStrokeStruct(v121, v110);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v78 = (uint64_t)v103;
  CRRegister.wrappedValue.getter();
  v79 = v104;
  v80 = v101;
  v81 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v101, v78 + *(int *)(v102 + 32), v105);
  outlined destroy of PKStrokeProperties(v78, type metadata accessor for PKStrokeProperties);
  v82 = v124;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
  Ref.subscript.getter();
  v83 = v100;
  CRRegister.wrappedValue.getter();
  Ref.subscript.getter();
  v84 = *(void (**)(char *, uint64_t))(v32 + 8);
  v84(v83, v31);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  v85 = v106;
  v86 = v117;
  Reference.identity.getter();
  v87 = v109;
  CRKeyPath.uuid.getter();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v85, v108);
  v88 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v87, 1, v88);
  if ((_DWORD)result != 1)
  {
    v90 = v111;
    v91 = v112;
    v92 = v96;
    v93 = v95;
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v96, v95, v112);
    v94 = objc_allocWithZone((Class)type metadata accessor for PKStrokeCoherence(0));
    v68 = PKStrokeCoherence.init(model:path:resolvedProperties:inheritedProperties:identity:strokeNode:)(v110, v115, v113, v114, v87, v92);
    ((void (*)(uint64_t, uint64_t))v122)(v82, v120);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8))(v123, v86);
    v84(v125, v31);
    outlined destroy of PKStrokeProperties(v121, type metadata accessor for PKStrokeStruct);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
    return (uint64_t)v68;
  }
  __break(1u);
  return result;
}

id PKDrawingCoherenceVersion.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  uint64_t v17;
  objc_super v18;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1;
  v9 = objc_msgSend(a1, sel_decodeDataObject);
  if (v9)
  {
    v10 = v9;
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    UUID.init(_:)(v11, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))((uint64_t)v8 + OBJC_IVAR___PKDrawingCoherenceVersion_versionUUID, v7, v3);

    v14 = (objc_class *)type metadata accessor for PKDrawingCoherenceVersion(0);
    v18.receiver = v8;
    v18.super_class = v14;
    v15 = objc_msgSendSuper2(&v18, sel_init);

  }
  else
  {

    type metadata accessor for PKDrawingCoherenceVersion(0);
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v15;
}

uint64_t PKDrawingCoherenceVersion.isEqual(_:)(uint64_t a1)
{
  void *v1;
  char v2;
  void *v4;
  _BYTE v5[24];
  uint64_t v6;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Any?);
  if (!v6)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Any?);
    goto LABEL_6;
  }
  type metadata accessor for PKDrawingCoherenceVersion(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    v2 = 0;
    return v2 & 1;
  }
  if (v4 == v1)
  {

    v2 = 1;
  }
  else
  {
    v2 = static UUID.== infix(_:_:)();

  }
  return v2 & 1;
}

id PKDrawingCoherenceVersion.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKDrawingCoherenceVersion);
}

void PKCoherenceUndoCommand.apply(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  void *v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for PKDrawing();
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v11 + 16))(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v7, v9);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  v12 = v17;
  v13 = v1 + OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo;
  v14 = type metadata accessor for CapsuleUndoAction();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v6, v13, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v6, 0, 1, v14);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();

}

id PKCoherenceUndoCommand.apply(toDrawingReturnInverted:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  id v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  objc_class *v46;
  char *v47;
  char *v48;
  void *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  id v55;
  char *v56;
  char *v57;
  char *v58;
  void (*v59)(char *, uint64_t);
  objc_super v60;
  char *v61;

  v2 = type metadata accessor for CapsuleUndoAction();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v58 = (char *)&v52 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v9, v10);
  v54 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v52 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v52 - v23;
  v25 = type metadata accessor for PKDrawing();
  v27 = MEMORY[0x1E0C80A78](v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)&v52 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v25, v27);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  v30 = v61;
  v31 = &v61[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v32 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v32(v24, v31, v16);
  v53 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v53(v15, (char *)v59 + OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  swift_beginAccess();
  Capsule.apply(_:)();
  v33 = (uint64_t)v15;
  v34 = (uint64_t)v54;
  outlined destroy of StocksKitCurrencyCache.Provider?(v33, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();
  v55 = v30;
  objc_msgSend(v30, sel_invalidateVisibleStrokes);
  v32(v20, v31, v16);
  v56 = v24;
  v35 = v2;
  Capsule.actionUndoingDifference(from:)();
  v36 = *(void (**)(char *, uint64_t))(v17 + 8);
  v36(v20, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v34, 1, v2) == 1)
  {
    v36(v56, v16);

    outlined destroy of StocksKitCurrencyCache.Provider?(v34, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v38 = v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v58, v34, v2);
    v39 = v53;
    v53(v57, v38, v2);
    v40 = v59;
    v54 = (char *)objc_msgSend(v59, sel_drawingUUID);
    v41 = objc_msgSend(v40, sel_actionName);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    v45 = objc_msgSend(v40, sel_changesVisibleStrokes);
    v46 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v47 = (char *)objc_allocWithZone(v46);
    v59 = v36;
    v48 = v57;
    v39(&v47[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v57, v35);
    v49 = (void *)MEMORY[0x1DF0E41AC](v42, v44);
    swift_bridgeObjectRelease();
    v60.receiver = v47;
    v60.super_class = v46;
    v37 = objc_msgSendSuper2(&v60, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v54, v49, v45);
    swift_unknownObjectRelease();

    v50 = *(void (**)(char *, uint64_t))(v3 + 8);
    v50(v48, v35);

    v50(v58, v35);
    v59(v56, v16);
  }
  return v37;
}

id PKCoherenceUndoCommand.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKCoherenceUndoCommand);
}

uint64_t @objc PKDrawingCoherenceVersion.__ivar_destroyer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *a3;
  v5 = a4(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t key path getter for PKDrawingCoherence.model : PKDrawingCoherence@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for PKDrawingCoherence.model : PKDrawingCoherence(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, a1, v4, v7);
  v10 = *a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v10, v9, v4);
  return swift_endAccess();
}

uint64_t PKDrawingCoherence.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PKDrawingCoherence.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*PKDrawingCoherence.model.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

id PKDrawingCoherence.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  id v12;
  objc_class *v13;
  uint64_t v15;
  uint64_t v16;
  objc_super v17;
  __int128 v18;
  __int128 v19;

  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v7 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v18 = *MEMORY[0x1E0C9D628];
  v19 = v11;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v12 = v0;
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  CROrderedSet.init()();
  *(_QWORD *)&v6[*(int *)(v3 + 24)] = MEMORY[0x1E0DEE9E0];
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.init(_:id:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v12 + OBJC_IVAR___PKDrawingCoherence_model, v10, v16);

  v13 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v17.receiver = v12;
  v17.super_class = v13;
  return objc_msgSendSuper2(&v17, sel_init);
}

id PKDrawingCoherence.__allocating_init(data:)(uint64_t a1, unint64_t a2)
{
  id v4;

  v4 = specialized PKDrawingCoherence.__allocating_init(data:)();
  outlined consume of Data._Representation(a1, a2);
  return v4;
}

id PKDrawingCoherence.init(data:)(uint64_t a1, unint64_t a2)
{
  id v4;

  v4 = specialized PKDrawingCoherence.init(data:)();
  outlined consume of Data._Representation(a1, a2);
  return v4;
}

void closure #1 in PKDrawingCoherence.init(strokes:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  void (*v26)(__int128 *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[32];
  _OWORD v47[2];
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSFastEnumerationIterator();
  v40 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v43 = *(_QWORD *)(v15 - 8);
  v44 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a2, (uint64_t)&v48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKStroke]);
  v19 = swift_dynamicCast();
  v45 = a1;
  if ((v19 & 1) != 0)
  {
    v41 = a3;
    v42 = v10;
    v20 = *(_QWORD *)&v47[0];
    if (*(_QWORD *)&v47[0] >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21)
        goto LABEL_4;
    }
    else
    {
      v21 = *(_QWORD *)((*(_QWORD *)&v47[0] & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v21)
      {
LABEL_4:
        if (v21 < 1)
        {
          __break(1u);
          return;
        }
        v39 = v3;
        v22 = 0;
        do
        {
          if ((v20 & 0xC000000000000001) != 0)
            v23 = (id)MEMORY[0x1DF0E4D64](v22, v20);
          else
            v23 = *(id *)(v20 + 8 * v22 + 32);
          v24 = v23;
          v25 = v45;
          ++v22;
          swift_getKeyPath();
          type metadata accessor for PKStrokeCoherence(0);
          swift_dynamicCastClassUnconditional();
          PKStrokeCoherence.newShared(in:flatten:)(v25, 1, (uint64_t)v18);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
          v26 = (void (*)(__int128 *, _QWORD))Capsule.Ref<>.subscript.modify();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
          CROrderedSet.append(_:)();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v44);
          v26(&v48, 0);
          swift_release();

        }
        while (v21 != v22);
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  outlined init with copy of Any(a2, (uint64_t)&v48);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSOrderedSet);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_18;
  v38 = v11;
  v39 = v3;
  v41 = a3;
  v42 = v10;
  v37 = *(id *)&v47[0];
  NSOrderedSet.makeIterator()();
  NSFastEnumerationIterator.next()();
  v28 = v43;
  v27 = v44;
  while (v50)
  {
    outlined init with take of Any(&v48, v47);
    swift_getKeyPath();
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    type metadata accessor for PKStrokeCoherence(0);
    swift_dynamicCast();
    v29 = v51;
    PKStrokeCoherence.newShared(in:flatten:)(a1, 1, (uint64_t)v18);

    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v30 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    CROrderedSet.append(_:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
    v30(v46, 0);
    a1 = v45;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    NSFastEnumerationIterator.next()();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v38);

LABEL_17:
  a3 = v41;
  v10 = v42;
LABEL_18:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
  v31 = type metadata accessor for PKDrawing();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v10, 1, v31) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
  }
  else
  {
    type metadata accessor for PKDrawingCoherence(0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v32 = (void *)v48;
      swift_getKeyPath();
      objc_msgSend(v32, sel__canvasBounds);
      *(_QWORD *)&v48 = v33;
      *((_QWORD *)&v48 + 1) = v34;
      v49 = v35;
      v50 = v36;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      Capsule.Ref<>.subscript.setter();

    }
  }
}

id PKDrawingCoherence.init(model:)(uint64_t a1)
{
  char *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v3 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v3, a1, v4);
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for PKDrawingCoherence(0);
  v6 = objc_msgSendSuper2(&v8, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return v6;
}

uint64_t PKDrawingCoherence.init(drawing:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  char *v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  id v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  objc_super v24;
  char *v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKDrawing();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v22 = v12;
  v23 = a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8, v10);
  v13 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v14 = v1;
  if (swift_dynamicCast())
  {
    v15 = v25;

    v16 = &v15[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    v17 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v17(v7, v16, v3);
    v18 = (char *)objc_allocWithZone(v13);
    v17(&v18[OBJC_IVAR___PKDrawingCoherence_model], v7, v3);
    v24.receiver = v18;
    v24.super_class = v13;
    v19 = objc_msgSendSuper2(&v24, sel_init);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v8);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return (uint64_t)v19;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in PKDrawingCoherence.init(concreteDrawing:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  void (*v53)(_QWORD *, _QWORD);
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  id v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, unint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD v93[4];
  uint64_t v94;

  v88 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v86 = *(_QWORD *)(v3 - 8);
  v87 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v85 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRKeyPath();
  v83 = *(_QWORD *)(v6 - 8);
  v84 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v82 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  MEMORY[0x1E0C80A78](v81, v9);
  v80 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v78 = *(_QWORD *)(v11 - 8);
  v79 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v77 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v76 = (char *)&v63 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v17, v18);
  v75 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v74 = *(_QWORD *)(v94 - 8);
  MEMORY[0x1E0C80A78](v94, v20);
  v92 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PKStroke();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v73 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v72, v26);
  v71 = (uint64_t)&v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v91 = (uint64_t)&v63 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = objc_msgSend(a2, sel_strokes, v33);
  v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v38 = *(_QWORD *)(v37 + 16);
  v64 = a2;
  v63 = v37;
  if (v38)
  {
    v39 = v37 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v66 = *(_QWORD *)(v23 + 72);
    v70 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
    v69 = v22;
    v68 = v23;
    v67 = v35;
    v40 = v88;
    while (1)
    {
      v70(v35, v39, v22);
      v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
      v41(v35, 0, 1, v22);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v35, 1, v22) == 1)
        break;
      v65 = v41;
      v42 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v90 = v38;
      v42(v73, v35, v22);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _PKStrokeConcrete);
      swift_dynamicCast();
      v43 = (void *)v93[0];
      swift_retain();
      v44 = v91;
      specialized PKStrokeStruct.init<A>(stroke:in:)(v43, v40, v91);
      outlined init with copy of PKStrokeStruct(v44, v71);
      v45 = v84;
      v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56);
      v89 = v39;
      v47 = v75;
      v46(v75, 1, 1, v84);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokeStruct and conformance PKStrokeStruct, type metadata accessor for PKStrokeStruct, (uint64_t)&protocol conformance descriptor for PKStrokeStruct);
      swift_retain();
      Ref.init<A>(_:_:identity:)();
      LOBYTE(v93[0]) = 0;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<PKStrokeStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>, MEMORY[0x1E0D12878]);
      Reference.identity.getter();
      lazy protocol witness table accessor for type TaggedStroke and conformance TaggedStroke();
      SharedTagged_2.init(_:id:)();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_2<TaggedStroke> and conformance SharedTagged_2<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>, MEMORY[0x1E0D121F8]);
      v48 = v76;
      CRRegister.init(_:)();
      swift_getKeyPath();
      v49 = v78;
      v50 = v79;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v48, v79);
      v46(v47, 1, 1, v45);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      swift_retain();
      v51 = v85;
      v52 = v89;
      Ref.init<A>(_:_:identity:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v53 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      CROrderedSet.append(_:)();
      v54 = v90;
      v55 = v51;
      v35 = v67;
      (*(void (**)(char *, uint64_t))(v86 + 8))(v55, v87);
      v53(v93, 0);
      swift_release();
      v56 = v48;
      v22 = v69;
      v57 = v50;
      v23 = v68;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v56, v57);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v92, v94);
      outlined destroy of PKStrokeProperties(v91, type metadata accessor for PKStrokeStruct);
      v39 = v52 + v66;
      v38 = v54 - 1;
      if (!v38)
      {
        v65(v35, 1, 1, v22);
        break;
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v35, 1, 1, v22);
  }
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  objc_msgSend(v64, sel__canvasBounds, v63);
  v93[0] = v58;
  v93[1] = v59;
  v93[2] = v60;
  v93[3] = v61;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return Capsule.Ref<>.subscript.setter();
}

id PKDrawingCoherence.__allocating_init(context:data:)(void *a1, uint64_t a2, unint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  id v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  id v14[2];

  v4 = v3;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v8 = objc_allocWithZone(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14[0] = 0;
  v10 = objc_msgSend(v8, sel_initWithData_loadNonInkingStrokes_error_, isa, 0, v14);

  if (v10)
  {
    v11 = v14[0];
  }
  else
  {
    v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined consume of Data._Representation(a2, a3);

  return v10;
}

uint64_t PKDrawingCoherence.__allocating_init(context:concreteDrawing:)(void *a1, void *a2)
{
  uint64_t v4;

  v4 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(a2);

  return v4;
}

uint64_t static PKDrawingCoherence.fileType.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t PKDrawingCoherence.dataRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v15[16];
  _OWORD v16[2];
  uint64_t v17;

  v1 = type metadata accessor for CRCodableVersion();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v0 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
  type metadata accessor for CRContext();
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v12 = (void *)MEMORY[0x1DF0E3C90](0, v16);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0D12378], v1);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v13 = Capsule<>.serializedData(_:version:allowedAppFormats:)();

  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
  return v13;
}

void __swiftcall PKDrawingCoherence.concreteDrawing()(PKDrawing *__return_ptr retstr)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v3 = type metadata accessor for PKStroke();
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1160]), sel_init);
  v8 = objc_msgSend(v2, sel__rootStrokes);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v10 = v2;
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_So01_F8ConcreteCs5NeverOTg5062_s8PaperKit18PKDrawingCoherenceC15concreteDrawingSo0C0CyFSo17_fg3C06D11B00G0VXEfU_0jE00lM0CTf1cn_nTf4ng_n(v9, (uint64_t)v10);
  swift_bridgeObjectRelease();

  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_10;
LABEL_3:
  if (v12 >= 1)
  {
    v13 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        v14 = (id)MEMORY[0x1DF0E4D64](v13, v11);
      else
        v14 = *(id *)(v11 + 8 * v13 + 32);
      v15 = v14;
      ++v13;
      v16 = objc_msgSend(v7, sel__addStroke_, v14);
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v3);
    }
    while (v12 != v13);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t specialized PKDrawingStruct.requiredContentVersion<A>(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned int (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  unsigned int (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v33 = *(_QWORD *)(v1 - 8);
  v34 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v29 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  v30 = v14;
  v19 = v17;
  CROrderedSet.Iterator.next()();
  v35 = v6;
  v20 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v6 + 48);
  v21 = 1;
  if (v20(v13, 1, v5) == 1)
  {
    v22 = v30;
  }
  else
  {
    v23 = v28;
    v24 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v31 = v18;
    v32 = v24;
    v21 = 1;
    v22 = v30;
    do
    {
      v32(v9, v13, v5);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v25 = v20;
      Ref.subscript.getter();
      v26 = specialized CRRegister<>.requiredContentVersion<A>(in:)(v23);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v34);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v5);
      if (v21 <= v26)
        v21 = v26;
      CROrderedSet.Iterator.next()();
      v20 = v25;
    }
    while (v25(v13, 1, v5) != 1);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v22);
  return v21;
}

uint64_t closure #1 in PKDrawingCoherence._rootStrokes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
  specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(a1, (uint64_t)v10, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double PKDrawingCoherence.bounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t);
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[16];
  uint64_t v21;
  double v22;

  v1 = v0;
  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v20[-v14];
  v16 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16);
  v17(v15, v16, v7);
  v17(v11, v16, v7);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  v18 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v18(v11, v7);
  v21 = v1;
  type metadata accessor for CGRect(0);
  Capsule.getCachedValue<A>(forKey:recompute:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
  v18(v15, v7);
  return v22;
}

uint64_t closure #1 in PKDrawingCoherence.bounds.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42[16];
  char *v43;

  v41 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v38 - v18;
  v20 = a1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21(v19, v20, v11);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.root.getter();
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v19, v11);
  v21(v15, v20, v11);
  v24 = v39;
  v23 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v6, &v10[*(int *)(v7 + 20)], v40);
  v25 = *MEMORY[0x1E0C9D628];
  v26 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v27 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v28 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v43 = v15;
  v29 = specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, char *))partial apply for specialized closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)v42, v25, v26, v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v23);
  v22(v15, v11);
  result = outlined destroy of PKStrokeProperties((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  v37 = v41;
  *(double *)v41 = v29;
  v37[1] = v31;
  v37[2] = v33;
  v37[3] = v35;
  return result;
}

uint64_t closure #1 in PKDrawingCoherence._canvasBounds.setter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return Capsule.Ref<>.subscript.setter();
}

uint64_t PKDrawingCoherence.addNewStroke(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  void *v18;
  Class isa;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t result;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  Class v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v3 = type metadata accessor for CRKeyPath();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v41 - v14;
  v44 = a1;
  v16 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  v17 = objc_msgSend(v1, sel__cachedVisibleStrokes);
  if (v17)
  {
    v18 = v17;
    isa = PKStroke._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, sel_addObject_, isa);

  }
  v41[1] = a1;
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v20(v15, v16, v7);
  v20(v11, v16, v7);
  v41[0] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v11, v7);
  type metadata accessor for CGRect(0);
  Capsule.getCachedValue<A>(forKey:)();
  v22 = *(void (**)(char *, uint64_t))(v42 + 8);
  v22(v6, v43);
  result = ((uint64_t (*)(char *, uint64_t))v21)(v15, v7);
  if ((v49 & 1) == 0)
  {
    v25 = v47;
    v24 = v48;
    v27 = v45;
    v26 = v46;
    v28 = PKStroke._bridgeToObjectiveC()().super.isa;
    -[objc_class _bounds](v28, sel__bounds);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    v50.origin.x = v27;
    v50.origin.y = v26;
    v50.size.width = v25;
    v50.size.height = v24;
    v52.origin.x = v30;
    v52.origin.y = v32;
    v52.size.width = v34;
    v52.size.height = v36;
    v51 = CGRectUnion(v50, v52);
    x = v51.origin.x;
    y = v51.origin.y;
    width = v51.size.width;
    height = v51.size.height;
    v20(v15, v16, v7);
    v45 = x;
    v46 = y;
    v47 = width;
    v48 = height;
    v20(v11, v16, v7);
    Capsule<>.rootID.getter();
    v21(v11, v7);
    Capsule.setCachedValue<A>(_:forKey:)();
    v22(v6, v43);
    return ((uint64_t (*)(char *, uint64_t))v21)(v15, v7);
  }
  return result;
}

uint64_t closure #1 in PKDrawingCoherence.addNewStroke(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void (*v15)(_QWORD *, _QWORD);
  _QWORD v17[4];

  v4 = type metadata accessor for PKStroke();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  type metadata accessor for PKStrokeCoherenceBase(0);
  swift_dynamicCast();
  v14 = (void *)v17[0];
  (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v17[0]) + 0xA0))(a1, 1);

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v15 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v15(v17, 0);
  return swift_release();
}

uint64_t @objc PKCoherenceUndoCommand.apply(to:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD), void (*a5)(void *), void (*a6)(char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v18;

  v10 = a4(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v18 - v13;
  v15 = a3;
  v16 = a1;
  a5(a3);

  a6(v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

id PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  id v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  id v35;
  objc_class *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  int v47;
  id v48;
  char *v49;
  char *v50;
  objc_super v51;

  v45 = a6;
  v46 = a5;
  v44 = a4;
  v47 = a3;
  v42 = a1;
  v43 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CapsuleUndoAction();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v50 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v49 = (char *)&v42 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v42 - v25;
  v48 = v6;
  v27 = &v6[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v28 = *(uint64_t (**)(char *, char *, uint64_t))(v19 + 16);
  v29 = v28(v26, v27, v18);
  v46(v29);
  if ((v47 & 1) != 0)
    objc_msgSend(v48, sel_set_cachedVisibleStrokes_, 0);
  v28(v22, v27, v18);
  Capsule.actionUndoingDifference(from:)();
  v30 = *(void (**)(char *, uint64_t))(v19 + 8);
  v30(v22, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v30(v26, v18);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v49, v10, v11);
    v33 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v34 = v50;
    v33(v50, v32, v11);
    v35 = objc_msgSend(v48, sel_uuid);
    v36 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v37 = (char *)objc_allocWithZone(v36);
    v33(&v37[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v34, v11);
    v38 = v43;
    swift_bridgeObjectRetain();
    v39 = (void *)MEMORY[0x1DF0E41AC](v42, v38);
    swift_bridgeObjectRelease();
    v51.receiver = v37;
    v51.super_class = v36;
    v31 = objc_msgSendSuper2(&v51, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v35, v39, v44 & 1);
    swift_unknownObjectRelease();

    v40 = *(void (**)(char *, uint64_t))(v12 + 8);
    v40(v50, v11);
    v40(v49, v11);
    v30(v26, v18);
  }
  return v31;
}

uint64_t closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  void (*v8)(_QWORD *, _QWORD);
  void (*v9)(_QWORD *, _QWORD);
  _QWORD v11[6];

  swift_retain();
  v7 = specialized Sequence.compactMap<A>(_:)(a2, a1);
  swift_release();
  swift_getKeyPath();
  v11[5] = v7;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  if ((a4 & 1) != 0)
  {
    v9 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
    CROrderedSet.append<A>(contentsOf:)();
    v9(v11, 0);
  }
  else
  {
    v8 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
    CROrderedSet.insert<A>(contentsOf:at:)();
    v8(v11, 0);
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

void __swiftcall PKDrawingCoherence.undoableAddNewStrokes(_:)(PKUndoCommand_optional *__return_ptr retstr, Swift::OpaquePointer a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  CGFloat v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  Class isa;
  char *v43;
  id v44;
  double v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  Class v52;
  char *v53;
  CGFloat v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  char *v73;
  char *v74;
  Class v75;
  double v76;
  CGFloat v77;
  double v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  double v82;
  CGFloat v83;
  char *v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  id v96[2];
  CGFloat v97;
  CGFloat v98;
  id v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  CGFloat v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t, uint64_t, uint64_t);
  double v118;
  double v119;
  unint64_t v120;
  CGFloat v121;
  char v122;
  Swift::String v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;

  v104 = type metadata accessor for CRKeyPath();
  v98 = *(double *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104, v4);
  v103 = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v97 = *(double *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v6);
  v100 = (char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v101 = (char *)v96 - v10;
  v11 = type metadata accessor for PKInk();
  v115 = *(_QWORD *)(v11 - 8);
  v116 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v114 = (char *)v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v14, v15);
  v109 = (char *)v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)v96 - v19;
  v21 = type metadata accessor for PKStroke();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v107 = (char *)v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v113 = (char *)v96 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  *(_QWORD *)&v110 = (char *)v96 - v30;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v123._object = (void *)0x80000001DDF55AE0;
  v31._countAndFlagsBits = 0x6F72745320646441;
  v31._object = (void *)0xEB0000000073656BLL;
  v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v32.value._object = (void *)0xEB00000000656C62;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v123._countAndFlagsBits = 0xD00000000000001ALL;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v123);
  v35 = v2;
  swift_bridgeObjectRetain();
  v99 = specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v34._countAndFlagsBits, (uint64_t)v34._object, 0, 1, v35, (uint64_t)v35, (uint64_t)a2._rawValue);
  swift_bridgeObjectRelease();
  v96[0] = v35;

  swift_bridgeObjectRelease();
  v118 = MEMORY[0x1E0DEE9D8];
  v36 = *((_QWORD *)a2._rawValue + 2);
  swift_bridgeObjectRetain();
  v108 = v22;
  v96[1] = a2._rawValue;
  if (v36)
  {
    v106 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v37 = (char *)a2._rawValue + v106;
    v38 = *(_QWORD *)(v22 + 72);
    v112 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v39 = v110;
    v105 = v21;
    v111 = v20;
    v40 = v114;
    v112(v20, v37, v21);
    while (1)
    {
      v117 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      v117(v20, 0, 1, v21);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
        break;
      v41 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
      v41(*(char **)&v39, v20, v21);
      PKStroke.ink.getter();
      isa = PKInk._bridgeToObjectiveC()().super.isa;
      v43 = *(char **)&v39;
      v44 = -[objc_class behavior](isa, sel_behavior);

      (*(void (**)(char *, uint64_t))(v115 + 8))(v40, v116);
      LOBYTE(isa) = objc_msgSend(v44, sel_isEraser);

      if ((isa & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v43, v21);
        v39 = *(double *)&v43;
        v20 = v111;
      }
      else
      {
        v41(v113, v43, v21);
        v45 = v118;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v45 + 16) + 1, 1);
          v45 = v118;
        }
        v20 = v111;
        v47 = *(_QWORD *)(*(_QWORD *)&v45 + 16);
        v46 = *(_QWORD *)(*(_QWORD *)&v45 + 24);
        v21 = v105;
        if (v47 >= v46 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          v45 = v118;
        }
        *(_QWORD *)(*(_QWORD *)&v45 + 16) = v47 + 1;
        v41((char *)(*(_QWORD *)&v45 + v106 + v47 * v38), v113, v21);
        v118 = v45;
        v22 = v108;
        v39 = v110;
      }
      v37 += v38;
      if (!--v36)
        goto LABEL_16;
      v112(v20, v37, v21);
    }
  }
  else
  {
    v117 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
LABEL_16:
    v117(v20, 1, 1, v21);
  }
  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  v48 = *(_QWORD *)&v118;
  v49 = (char *)v96[0];
  v50 = objc_msgSend(v96[0], sel__cachedVisibleStrokes);
  if (v50)
  {
    v51 = v50;
    specialized _arrayForceCast<A, B>(_:)(v48);
    v52 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v51, sel_addObjectsFromArray_, v52);

  }
  v53 = &v49[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v54 = v97;
  v55 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v97 + 16);
  v56 = v101;
  v57 = v102;
  v55(v101, v53, v102);
  v58 = v100;
  v55(v100, v53, v57);
  v59 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v60 = v103;
  Capsule<>.rootID.getter();
  v61 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v54 + 8);
  v61(v58, v57);
  type metadata accessor for CGRect(0);
  v116 = v62;
  Capsule.getCachedValue<A>(forKey:)();
  v63 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v98 + 8);
  v63(v60, v104);
  v61(v56, v57);
  if ((v122 & 1) == 0)
  {
    v111 = (char *)v63;
    v112 = (void (*)(char *, char *, uint64_t))v59;
    v113 = (char *)v55;
    v114 = (char *)v61;
    v110 = v121;
    v106 = v120;
    v98 = v119;
    v97 = v118;
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v68 = *(_QWORD *)(v48 + 16);
    v115 = v48;
    if (v68)
    {
      v69 = v108;
      v70 = v48 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
      v71 = *(_QWORD *)(v108 + 72);
      v72 = *(void (**)(char *, unint64_t, uint64_t))(v108 + 16);
      swift_retain();
      v73 = v109;
      v74 = v107;
      while (1)
      {
        v72(v73, v70, v21);
        v117(v73, 0, 1, v21);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v73, 1, v21) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v74, v73, v21);
        v75 = PKStroke._bridgeToObjectiveC()().super.isa;
        -[objc_class _bounds](v75, sel__bounds);
        v77 = v76;
        v79 = v78;
        v81 = v80;
        v83 = v82;

        v73 = v109;
        v124.origin.x = x;
        v124.origin.y = y;
        v124.size.width = width;
        v124.size.height = height;
        v128.origin.x = v77;
        v128.origin.y = v79;
        v128.size.width = v81;
        v128.size.height = v83;
        v125 = CGRectUnion(v124, v128);
        x = v125.origin.x;
        y = v125.origin.y;
        width = v125.size.width;
        height = v125.size.height;
        (*(void (**)(char *, uint64_t))(v69 + 8))(v74, v21);
        v70 += v71;
        if (!--v68)
          goto LABEL_26;
      }
      v84 = v53;
    }
    else
    {
      swift_retain();
      v73 = v109;
LABEL_26:
      v84 = v53;
      v117(v73, 1, 1, v21);
    }
    v48 = v115;
    swift_release();
    v126.origin.x = v97;
    v126.origin.y = v98;
    *(_QWORD *)&v126.size.width = v106;
    v126.size.height = v110;
    v129.origin.x = x;
    v129.origin.y = y;
    v129.size.width = width;
    v129.size.height = height;
    v127 = CGRectUnion(v126, v129);
    v85 = v127.origin.x;
    v86 = v127.origin.y;
    v87 = v127.size.width;
    v88 = v127.size.height;
    v89 = v101;
    v90 = v102;
    v91 = (void (*)(char *, char *, uint64_t))v113;
    ((void (*)(char *, char *, uint64_t))v113)(v101, v84, v102);
    v118 = v85;
    v119 = v86;
    v120 = *(_QWORD *)&v87;
    v121 = v88;
    v92 = v100;
    v91(v100, v84, v90);
    v93 = v103;
    Capsule<>.rootID.getter();
    v94 = (void (*)(char *, uint64_t))v114;
    ((void (*)(char *, uint64_t))v114)(v92, v90);
    Capsule.setCachedValue<A>(_:forKey:)();
    ((void (*)(char *, uint64_t))v111)(v93, v104);
    v94(v89, v90);
  }
  v95 = *(_QWORD *)(v48 + 16);
  swift_release();
  if (!v95)

}

uint64_t PKDrawingCoherence.indexOf(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  void (*v73)(char *, uint64_t, char *);
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  _QWORD v105[2];
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t, uint64_t);
  void (*v140)(char *, uint64_t);
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;

  v138 = a1;
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v110 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v2);
  v109 = (char *)v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v123 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124, v4);
  v122 = (char *)v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v141 = (char *)v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v9);
  v119 = (char *)v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v12 = *(_QWORD *)(v11 - 8);
  v136 = v11;
  v137 = v12;
  MEMORY[0x1E0C80A78](v11, v13);
  v108 = (char *)v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CRKeyPath();
  v129 = *(_QWORD *)(v15 - 8);
  v130 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v128 = (char *)v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v134 = *(_QWORD *)(v22 - 8);
  v135 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v142 = (char *)v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v127 = (char *)v105 - v27;
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Ref<CRRegister<SharedTagged_2<TaggedStroke>>>));
  MEMORY[0x1E0C80A78](v126, v28);
  v125 = (_QWORD *)((char *)v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v132 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v131 = (char *)v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v105 - v35;
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v39);
  v118 = (char *)v105 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v117 = (char *)v105 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = (char *)v105 - v46;
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  MEMORY[0x1E0C80A78](v113, v48);
  v106 = (char *)v105 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>.Iterator);
  MEMORY[0x1E0C80A78](v50, v51);
  v133 = (_QWORD *)((char *)v105 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0));
  v112 = v1;
  v53 = v1 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v139 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  v139(v47, v53, v37);
  swift_getKeyPath();
  v105[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.subscript.getter();
  swift_release();
  v54 = *(void (**)(char *, uint64_t))(v38 + 8);
  v107 = v47;
  v140 = v54;
  v54(v47, v37);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC8]);
  dispatch thunk of Collection.startIndex.getter();
  v55 = v36;
  v115 = v30;
  result = dispatch thunk of Collection.endIndex.getter();
  v57 = v143;
  v58 = v144;
  if (v143 < v144)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  v59 = v132;
  v60 = *(void (**)(char *, uint64_t))(v132 + 8);
  v105[0] = v50;
  v61 = v55;
  v62 = v115;
  v60(v55, v115);
  v63 = v117;
  v116 = v53;
  v139(v117, v53, v37);
  swift_getKeyPath();
  v64 = v131;
  Capsule<>.subscript.getter();
  swift_release();
  v117 = (char *)v37;
  v140(v63, v37);
  v65 = &v106[*(int *)(v113 + 52)];
  v66 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
  v66(v65, v64, v62);
  v67 = v133;
  *v133 = v58;
  v67[1] = v57;
  v67[2] = v58;
  v66(v61, v65, v62);
  v68 = v105[0];
  v69 = (char *)v67 + *(int *)(v105[0] + 52);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  v131 = v69;
  result = dispatch thunk of Sequence.makeIterator()();
  v132 = *(int *)(v68 + 56);
  *((_BYTE *)v67 + v132) = 0;
  v71 = v134;
  v70 = v135;
  v72 = v67;
  v73 = (void (*)(char *, uint64_t, char *))v139;
  if (v58 != v57)
  {
    v115 = 0;
    v74 = v58;
    v114 = v21;
    while (v57 >= v74)
    {
      if (v58 < v74)
        goto LABEL_23;
      if (v58 >= v57)
        goto LABEL_24;
      v72[2] = v58 + 1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
      dispatch thunk of IteratorProtocol.next()();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v21, 1, v70) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
        goto LABEL_3;
      }
      v75 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      v76 = v127;
      v75(v127, v21, v70);
      v77 = *(int *)(v126 + 48);
      v78 = v125;
      v79 = (char *)v125 + v77;
      *v125 = v58;
      v75((char *)v78 + v77, v76, v70);
      v80 = v142;
      v75(v142, v79, v70);
      v81 = v128;
      Ref.id.getter();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v82 = v130;
      LOBYTE(v79) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v129 + 8))(v81, v82);
      if ((v79 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v80, v70);
        goto LABEL_4;
      }
      v113 = v58;
      v83 = v118;
      v84 = v116;
      v85 = v117;
      v73(v118, v116, v117);
      type metadata accessor for PKDrawingStruct();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v86 = v119;
      Ref.subscript.getter();
      v140(v83, (uint64_t)v85);
      v87 = v122;
      v88 = v121;
      CRRegister.value.getter();
      v89 = v124;
      SharedTagged_2.tagged2.getter();
      v90 = (uint64_t)v141;
      (*(void (**)(char *, uint64_t))(v123 + 8))(v87, v89);
      v92 = v136;
      v91 = v137;
      (*(void (**)(char *, uint64_t))(v120 + 8))(v86, v88);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v90, 1, v92) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v90, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
        v71 = v134;
        v70 = v135;
        result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v142, v135);
        v72 = v133;
        v73 = (void (*)(char *, uint64_t, char *))v139;
      }
      else
      {
        v94 = v136;
        v93 = v137;
        v95 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v108, v90, v136);
        v96 = v107;
        v97 = v84;
        v98 = v139;
        v139(v107, v97, (uint64_t)v85);
        v99 = v109;
        v100 = Ref.subscript.getter();
        MEMORY[0x1E0C80A78](v100, v101);
        v102 = v112;
        v105[-2] = v138;
        v105[-1] = v102;
        v103 = v115;
        v104 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:), (uint64_t)&v105[-4]);
        v115 = v103;
        (*(void (**)(char *, uint64_t))(v110 + 8))(v99, v111);
        v140(v96, (uint64_t)v85);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v94);
        v71 = v134;
        v70 = v135;
        result = (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v142, v135);
        v72 = v133;
        if (v104)
        {
          v58 = v113;
          goto LABEL_4;
        }
        v73 = (void (*)(char *, uint64_t, char *))v98;
      }
      v21 = v114;
      if ((*((_BYTE *)v72 + v132) & 1) != 0)
      {
        v58 = 0;
        goto LABEL_4;
      }
      v57 = v72[1];
      v58 = v72[2];
      v74 = *v72;
      if (v58 == v57)
        goto LABEL_3;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_3:
  v58 = 0;
  *((_BYTE *)v72 + v132) = 1;
LABEL_4:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v72, &demangling cache variable for type metadata for Zip2Sequence<Range<Int>, CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>.Iterator);
  return v58;
}

BOOL containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[3];
  void (*v56)(char *, uint64_t, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v61 = *(_QWORD *)(v5 - 8);
  v62 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v59 = (char *)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v65 = (char *)v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v69 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v63 = *(_QWORD *)(v14 - 8);
  v64 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v18 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v19);
  v58 = (char *)v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v55 - v23;
  v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v73 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v25);
  v57 = (char *)v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for CRKeyPath();
  v28 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70];
  v29 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v30);
  v32 = (char *)v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v68 = a1;
  Ref.id.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v28, MEMORY[0x1E0D12C90]);
  v60 = a2;
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v27);
  if ((a1 & 1) != 0)
  {
    return 1;
  }
  else
  {
    v34 = v70;
    v35 = v70 + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    v36 = v72;
    v56 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v56(v24, v35, v72);
    v37 = type metadata accessor for PKDrawingStruct();
    v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v55[2] = v37;
    v55[1] = v38;
    Ref.subscript.getter();
    v39 = *(void (**)(char *, uint64_t))(v18 + 8);
    v39(v24, v36);
    v41 = v64;
    v40 = v65;
    CRRegister.value.getter();
    v42 = (uint64_t)v69;
    v43 = v67;
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v43);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v17, v41);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v42, 1, v71) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v42, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      return 0;
    }
    else
    {
      v44 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      v68 = v39;
      v45 = v57;
      v46 = v42;
      v47 = v34;
      v48 = v71;
      v44(v57, v46, v71);
      v49 = v58;
      v50 = v72;
      v56(v58, v35, v72);
      v51 = v59;
      v52 = Ref.subscript.getter();
      MEMORY[0x1E0C80A78](v52, v53);
      v55[-2] = v60;
      v55[-1] = v47;
      v33 = specialized Sequence.contains(where:)((uint64_t (*)(char *))closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)partial apply, (uint64_t)&v55[-4]);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v51, v62);
      v68(v49, v50);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v45, v48);
    }
  }
  return v33;
}

void __swiftcall PKDrawingCoherence.undoableAddNewStrokes(_:replacingOldStrokes:)(PKUndoCommand_optional *__return_ptr retstr, Swift::OpaquePointer _, Swift::OpaquePointer replacingOldStrokes)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  Class v22;
  id v23;
  id v24;
  char v25;
  char v26;
  Swift::String v27;
  Swift::String_optional v28;
  Swift::String v29;
  Swift::String v30;
  char *v31;
  uint64_t v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;
  void *rawValue;
  id v37;
  Swift::String v38;

  v5 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PKStroke();
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*((_QWORD *)replacingOldStrokes._rawValue + 2))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v17 + 56))(v15, 1, 1, v16, v19);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t, double))(v17 + 16))(v15, (char *)replacingOldStrokes._rawValue+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v16, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_7:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, sel_undoableAddNewStrokes_, isa);

    return;
  }
  rawValue = _._rawValue;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
  v22 = PKStroke._bridgeToObjectiveC()().super.isa;
  v23 = -[objc_class _strokeUUID](v22, sel__strokeUUID);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  CRKeyPath.init(_:)();
  v24 = v37;
  v35 = PKDrawingCoherence.indexOf(_:)((uint64_t)v11);
  v26 = v25 & 1;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v38._object = (void *)0x80000001DDF55AE0;
  v27._countAndFlagsBits = 0x6F72745320646441;
  v27._object = (void *)0xEB0000000073656BLL;
  v28.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v28.value._object = (void *)0xEB00000000656C62;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0xD00000000000001ALL;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, v28, paperKitBundle, v29, v38);
  v31 = (char *)v24;
  v32 = (uint64_t)rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v30._countAndFlagsBits, (uint64_t)v30._object, 1, 1, v31, v31, v32, v35, v26, (uint64_t)replacingOldStrokes._rawValue);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
}

uint64_t closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(uint64_t a1, uint64_t a2, CGFloat *a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  Class isa;
  id v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v29[2];
  int v30;
  CGFloat *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v30 = a4;
  v31 = a3;
  v32 = a1;
  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v41 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v40 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for PKStroke();
  v12 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v13);
  v37 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 16);
  v19 = MEMORY[0x1E0DEE9D8];
  if (v18)
  {
    v29[1] = v4;
    v42 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    v20 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v21 = *(_QWORD *)(v12 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v34 = v21;
    v35 = v12;
    v23 = v37;
    v22 = v38;
    do
    {
      v33(v23, v20, v22);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v25 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v22);
      v19 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1);
        v19 = v42;
      }
      v27 = *(_QWORD *)(v19 + 16);
      v26 = *(_QWORD *)(v19 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v19 = v42;
      }
      *(_QWORD *)(v19 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v36 + 32))(v19+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v27, v17, v39);
      v12 = v35;
      v20 += v34;
      --v18;
    }
    while (v18);
  }
  specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v19, v31, v30 & 1, v32);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PKDrawingCoherence.deleteStrokes(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void (*v88)(char *, unint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  void (*v114)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;

  v110 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v131 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v109 = (char *)&v105 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v112 = (char *)&v105 - v11;
  v111 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v12 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v13);
  v123 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v135 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v120 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v106 = (char *)&v105 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v105 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v125 = (uint64_t)&v105 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v28, v29);
  v126 = (uint64_t)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for CRKeyPath();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v130 = (char *)&v105 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v118 = (char *)&v105 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v113 = (char *)&v105 - v40;
  v41 = type metadata accessor for PKStroke();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v43);
  v117 = (char *)&v105 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v45, v46);
  v132 = (uint64_t *)((char *)&v105 - v47);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v48, v49);
  v121 = v32;
  v122 = (char *)&v105 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = *(_QWORD *)(a2 + 16);
  v127 = v15;
  v133 = v31;
  v107 = v12;
  v119 = v24;
  v108 = a2;
  if (v51)
  {
    v52 = a2 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
    v115 = *(_QWORD *)(v42 + 72);
    v53 = *(char **)(v42 + 16);
    swift_bridgeObjectRetain();
    v124 = MEMORY[0x1E0DEE9D8];
    v54 = v126;
    v116 = v42;
    v129 = v53;
    do
    {
      v55 = v122;
      ((void (*)(char *, uint64_t, uint64_t))v53)(v122, v52, v41);
      v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
      v114(v55, 0, 1, v41);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v55, 1, v41) == 1)
      {
        v76 = v110;
        v77 = (uint64_t)v109;
        goto LABEL_18;
      }
      v128 = v51;
      v56 = v132;
      (*(void (**)(_QWORD *, char *, uint64_t))(v42 + 32))(v132, v55, v41);
      v57 = v56;
      v53 = v129;
      ((void (*)(char *, _QWORD *, uint64_t))v129)(v117, v57, v41);
      type metadata accessor for PKStrokeCoherenceBase(0);
      if (swift_dynamicCast())
      {
        v58 = v134;
        v59 = v125;
        (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v134) + 0x60))();
        v60 = v127;
        Ref.id.getter();
        v53 = v129;
        v31 = v133;

        v54 = v126;
        v61 = v59;
        v32 = v121;
        v62 = v60;
        v42 = v116;
        (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v61, v62);
        v63 = 0;
      }
      else
      {
        v63 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v54, v63, 1, v31);
      (*(void (**)(_QWORD *, uint64_t))(v42 + 8))(v132, v41);
      v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v54, 1, v31);
      v65 = v128;
      if (v64 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v54, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      }
      else
      {
        v66 = v54;
        v67 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
        v68 = v113;
        v67(v113, v66, v31);
        v67(v118, (uint64_t)v68, v31);
        v69 = v124;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
        v71 = *(_QWORD *)(v69 + 16);
        v70 = *(_QWORD *)(v69 + 24);
        v72 = v69;
        v42 = v116;
        if (v71 >= v70 >> 1)
          v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v69);
        *(_QWORD *)(v72 + 16) = v71 + 1;
        v73 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
        v124 = v72;
        v74 = v72 + v73 + *(_QWORD *)(v121 + 72) * v71;
        v32 = v121;
        v67((char *)v74, (uint64_t)v118, v31);
        v54 = v126;
        v53 = v129;
      }
      v52 += v115;
      v51 = v65 - 1;
    }
    while (v51);
    v76 = v110;
    v77 = (uint64_t)v109;
    v114(v122, 1, 1, v41);
  }
  else
  {
    v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
    swift_bridgeObjectRetain();
    v124 = MEMORY[0x1E0DEE9D8];
    v76 = v110;
    v77 = (uint64_t)v109;
    v75(v122, 1, 1, v41);
  }
LABEL_18:
  v78 = v112;
  v79 = v111;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v122 = (char *)Capsule.Ref<>.root.modify();
  v81 = v80;
  v82 = swift_allocObject();
  v83 = MEMORY[0x1E0DEE9E8];
  v126 = v82;
  *(_QWORD *)(v82 + 16) = MEMORY[0x1E0DEE9E8];
  v132 = (_QWORD *)(v82 + 16);
  v84 = v124;
  v85 = *(_QWORD *)(v124 + 16);
  if (v85)
  {
    v86 = *(int *)(type metadata accessor for PKDrawingStruct() + 20);
    v118 = v81;
    v129 = &v81[v86];
    v87 = v84 + ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80));
    v128 = *(_QWORD *)(v121 + 72);
    v88 = *(void (**)(char *, unint64_t, uint64_t))(v121 + 16);
    swift_bridgeObjectRetain();
    v89 = v127;
    v90 = v106;
    do
    {
      v88(v130, v87, v133);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      Ref.init(id:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      v94 = v90;
      v95 = (uint64_t)v131;
      CROrderedSet.remove(_:)();
      v96 = v135;
      v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v95, 1, v89);
      outlined destroy of StocksKitCurrencyCache.Provider?(v95, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      if (v97 == 1)
      {
        v91 = v120;
        (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v120, v94, v89);
        v92 = v125;
        specialized Set._Variant.insert(_:)(v125, v91);
        v93 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
        v93(v92, v89);
      }
      else
      {
        v93 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      }
      v90 = v94;
      v93((uint64_t)v94, v89);
      v87 += v128;
      --v85;
    }
    while (v85);
    swift_bridgeObjectRelease();
    v83 = *v132;
    v76 = v110;
    v77 = (uint64_t)v109;
    v78 = v112;
    v79 = v111;
  }
  if (*(_QWORD *)(v83 + 16))
  {
    type metadata accessor for PKDrawingStruct();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    CROrderedSet.makeIterator()();
    v98 = v127;
    v99 = v135;
    do
    {
      CROrderedSet.Iterator.next()();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v78, 1, v98) == 1)
        break;
      v103 = (uint64_t)v119;
      (*(void (**)(void))(v99 + 32))();
      if ((specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(v103, v126, v76) & 1) != 0)
      {
        CROrderedSet.remove(_:)();
        outlined destroy of StocksKitCurrencyCache.Provider?(v77, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      }
      v100 = v132;
      swift_beginAccess();
      v101 = *(_QWORD *)(*v100 + 16);
      v99 = v135;
      v102 = v103;
      v98 = v127;
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v102, v127);
    }
    while (v101);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v123, v79);
  }
  swift_bridgeObjectRelease();
  swift_release();
  return ((uint64_t (*)(_QWORD **, _QWORD))v122)(&v134, 0);
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD, _QWORD);
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  Class isa;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char **, _QWORD);
  void (*v83)(char *, _QWORD);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Class v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void (*v98)(char *, _QWORD);
  uint64_t v99;
  char *v100;
  uint64_t v102;
  void (*v103)(char **, _QWORD);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  void (*v134)(_QWORD, _QWORD, _QWORD);
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char v140[8];
  char *v141;
  uint64_t v142;

  v5 = v4;
  v116 = a4;
  v119 = a3;
  v112 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v111 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v110, v10);
  v109 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v12);
  v115 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKStrokePath?);
  MEMORY[0x1E0C80A78](v14, v15);
  v114 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for UUID();
  v118 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124, v17);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v117 = (char *)&v102 - v22;
  v122 = type metadata accessor for PKStrokePath();
  v120 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122, v23);
  v106 = (char *)&v102 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130, v25);
  v128 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v126 = *(_QWORD *)(v127 - 8);
  MEMORY[0x1E0C80A78](v127, v27);
  v125 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v33 = *(_QWORD *)(v138 - 8);
  MEMORY[0x1E0C80A78](v138, v34);
  v131 = (char *)&v102 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for PKStroke();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v136 = (char *)&v102 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v137 = (char *)&v102 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v43, v44);
  v133 = (char *)&v102 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(a2 + 16);
  v105 = v5;
  v104 = a2;
  if (v46)
  {
    v113 = v19;
    v47 = a2 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    v135 = *(_QWORD *)(v37 + 72);
    v48 = *(void (**)(_QWORD, _QWORD, _QWORD))(v37 + 16);
    swift_bridgeObjectRetain();
    v49 = v137;
    v50 = v133;
    v123 = v33;
    v132 = v37;
    v134 = v48;
    while (1)
    {
      v142 = v46;
      v48(v50, v47, v36);
      v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v51(v50, 0, 1, v36);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v50, 1, v36) == 1)
        return swift_bridgeObjectRelease();
      v139 = v47;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v49, v50, v36);
      v48(v136, v49, v36);
      type metadata accessor for PKStrokeCoherence(0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v52 = v141;
        v53 = &v141[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
        swift_beginAccess();
        v54 = v126;
        v55 = v36;
        v56 = v32;
        v57 = v125;
        v58 = v127;
        (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v125, v53, v127);

        v59 = v128;
        CRRegister.value.getter();
        v60 = v130;
        SharedTagged_2.tagged1.getter();
        v49 = v137;
        (*(void (**)(char *, uint64_t))(v129 + 8))(v59, v60);
        v61 = *(void (**)(char *, uint64_t))(v54 + 8);
        v62 = v57;
        v32 = v56;
        v63 = v138;
        v36 = v55;
        v33 = v123;
        v64 = v58;
        v37 = v132;
        v50 = v133;
        v61(v62, v64);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v56, 1, v63) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v131, v56, v138);
          isa = PKStroke._bridgeToObjectiveC()().super.isa;
          v66 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

          v67 = (uint64_t)v117;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v68 = v119;
          if (*(_QWORD *)(v119 + 16))
          {
            v69 = specialized __RawDictionaryStorage.find<A>(_:)(v67);
            v70 = v67;
            if ((v71 & 1) != 0)
            {
              v72 = *(_QWORD *)(v68 + 56);
              v73 = v120;
              v74 = (uint64_t)v114;
              (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v114, v72 + *(_QWORD *)(v120 + 72) * v69, v122);
              v75 = 0;
LABEL_15:
              v76 = v122;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v74, v75, 1, v122);
              v77 = *(void (**)(uint64_t, uint64_t))(v118 + 8);
              v77(v70, v124);
              v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v74, 1, v76);
              v121 = v77;
              if (v78 == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for PKStrokePath?);
              }
              else
              {
                v79 = v106;
                v80 = v122;
                (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v106, v74, v122);
                (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v109, v79, v80);
                v81 = type metadata accessor for CRKeyPath();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v111, 1, 1, v81);
                lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
                swift_retain();
                Ref.init<A>(_:_:identity:)();
                v82 = (void (*)(char **, _QWORD))Ref.subscript.modify();
                type metadata accessor for PKStrokeStruct(0);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
                v83 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
                v85 = v84;
                v86 = type metadata accessor for PKStrokeProperties(0);
                (*(void (**)(uint64_t, char *, uint64_t))(v107 + 40))(v85 + *(int *)(v86 + 32), v115, v108);
                v83(v140, 0);
                v82(&v141, 0);
                (*(void (**)(char *, uint64_t))(v120 + 8))(v79, v80);
              }
              v87 = v116;
              v37 = v132;
              v88 = PKStroke._bridgeToObjectiveC()().super.isa;
              v89 = -[objc_class _strokeUUID](v88, sel__strokeUUID);

              v90 = (uint64_t)v113;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(_QWORD *)(v87 + 16) && (v91 = specialized __RawDictionaryStorage.find<A>(_:)(v90), (v92 & 1) != 0))
              {
                v93 = *(id *)(*(_QWORD *)(v87 + 56) + 8 * v91);
                v121(v90, v124);
                type metadata accessor for PKStrokeMaskStruct();
                v94 = swift_allocObject();
                type metadata accessor for PKStrokeMaskWrapper();
                v95 = swift_allocObject();
                *(_QWORD *)(v95 + 16) = v93;
                *(_QWORD *)(v94 + 16) = v95;
                v121 = (void (*)(uint64_t, uint64_t))v93;
                v96 = v138;
                v97 = v131;
                v103 = (void (*)(char **, _QWORD))Ref.subscript.modify();
                type metadata accessor for PKStrokeStruct(0);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
                v98 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
                *(_QWORD *)(v99 + *(int *)(type metadata accessor for PKStrokeProperties(0) + 36)) = v94;
                swift_release();
                v98(v140, 0);
                v103(&v141, 0);

                v100 = v97;
                v37 = v132;
                (*(void (**)(char *, uint64_t))(v33 + 8))(v100, v96);
              }
              else
              {
                v121(v90, v124);
                (*(void (**)(char *, uint64_t))(v33 + 8))(v131, v138);
              }
              v49 = v137;
              (*(void (**)(char *, uint64_t))(v37 + 8))(v137, v36);
              v50 = v133;
              goto LABEL_5;
            }
            v75 = 1;
            v74 = (uint64_t)v114;
          }
          else
          {
            v75 = 1;
            v74 = (uint64_t)v114;
            v70 = v67;
          }
          v73 = v120;
          goto LABEL_15;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v32, 1, 1, v138);
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v49, v36);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_5:
      v48 = v134;
      v47 = v139 + v135;
      v46 = v142 - 1;
      if (v142 == 1)
        goto LABEL_24;
    }
  }
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
  swift_bridgeObjectRetain();
  v50 = v133;
LABEL_24:
  v51(v50, 1, 1, v36);
  return swift_bridgeObjectRelease();
}

uint64_t PKDrawingCoherence.transformStrokes(_:paths:masks:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  Swift::String v16;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v16._object = (void *)0x80000001DDF55B60;
  v7._countAndFlagsBits = 0x5320796669646F4DLL;
  v7._object = (void *)0xEE0073656B6F7274;
  v8.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v8.value._object = (void *)0xEB00000000656C62;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0xD00000000000001DLL;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, paperKitBundle, v9, v16);
  v11 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(v10._countAndFlagsBits, (uint64_t)v10._object, 1, 1, v11, v11, a1, a2, a3);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1DDF35440;
  *(_QWORD *)(v13 + 32) = v12;
  v15 = v13;
  specialized Array._endMutation()();
  return v15;
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t (*v80)(char *, char *, uint64_t);
  char *v81;
  uint64_t result;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int v102;
  objc_class *v103;
  void (*v104)(Class *, _QWORD);
  void (*v105)(Class *, _QWORD);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  void (*v112)(char **, _QWORD);
  char *v113;
  char *v114;
  uint64_t i;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  Class isa;
  void (*v125)(char **, _QWORD);
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(Class *, _QWORD);
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  objc_class *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  void (*v159)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  char *v161;
  char *v162;
  void (*v163)(char *, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  char *v177;
  Class v178;
  char *v179;
  uint64_t v180;

  v147 = a1;
  v5 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v143 = (char *)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v136 = (uint64_t)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v135 = (char *)&v131 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v134 = (char *)&v131 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v142 = (char *)&v131 - v19;
  v141 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v141, v20);
  v133 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v177 = (char *)&v131 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v140 = (char *)&v131 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v180 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v148 = (char *)&v131 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v132 = (char *)&v131 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v138 = (char *)&v131 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v139 = (char *)&v131 - v39;
  v154 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v153 = *(_QWORD *)(v154 - 8);
  MEMORY[0x1E0C80A78](v154, v40);
  v152 = (char *)&v131 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v42);
  v149 = (char *)&v131 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v44, v45);
  v172 = (char *)&v131 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v171 = *(_QWORD *)(v173 - 8);
  MEMORY[0x1E0C80A78](v173, v47);
  v49 = (char *)&v131 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  MEMORY[0x1E0C80A78](v50, v51);
  v166 = (char *)&v131 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for PKInk();
  v170 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v54);
  v175 = (char *)&v131 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56, v57);
  v162 = (char *)&v131 - v58;
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v59, v60);
  v62 = (char *)&v131 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PKStroke();
  v64 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v65);
  v161 = (char *)&v131 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v67, v68);
  v167 = (char *)&v131 - v69;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKStroke, PKInk)?);
  MEMORY[0x1E0C80A78](v70, v71);
  v169 = (char *)&v131 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v160 = v73;
  v144 = a2;
  v168 = a3;
  if (v73)
  {
    v74 = 0;
    v165 = a2 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
    v164 = *(_QWORD *)(v64 + 72);
    v163 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
    v75 = v170;
    v156 = v49;
    v155 = v53;
    v174 = v63;
    v158 = v62;
    v157 = v64;
    v163(v62, v165, v63);
    while (1)
    {
      v159 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56);
      v159(v62, 0, 1, v63);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63) == 1)
        goto LABEL_24;
      v78 = v63;
      v79 = v62;
      v80 = *(uint64_t (**)(char *, char *, uint64_t))(v64 + 32);
      v81 = v167;
      result = v80(v167, v79, v78);
      v83 = *(_QWORD *)(a3 + 16);
      if (v74 == v83)
      {
        v85 = v166;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v166, 1, 1, v53);
LABEL_22:
        (*(void (**)(char *, uint64_t))(v64 + 8))(v81, v174);
        v127 = &demangling cache variable for type metadata for PKInk?;
        v128 = (uint64_t)v85;
        goto LABEL_25;
      }
      if (v74 >= v83)
      {
        __break(1u);
        return result;
      }
      v84 = a3
          + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))
          + *(_QWORD *)(v75 + 72) * v74;
      v85 = v166;
      (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v166, v84, v53);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v85, 0, 1, v53);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v85, 1, v53) == 1)
        goto LABEL_22;
      v176 = v74;
      v86 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v87 = v162;
      v86(v162, v85, v53);
      v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKStroke, PKInk));
      v89 = v169;
      v90 = &v169[*(int *)(v88 + 48)];
      v91 = v81;
      v63 = v174;
      v80(v169, v91, v174);
      v86(v90, v87, v53);
      v92 = *(_QWORD *)(v88 - 8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v88);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v89, 1, v88) == 1)
        goto LABEL_26;
      v86(v175, &v89[*(int *)(v88 + 48)], v53);
      v80(v161, v89, v63);
      type metadata accessor for PKStrokeCoherence(0);
      if ((swift_dynamicCast() & 1) == 0)
        break;
      v93 = v179;
      v94 = &v179[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
      swift_beginAccess();
      v95 = v150;
      v96 = v149;
      v97 = v151;
      (*(void (**)(char *, char *, uint64_t))(v150 + 16))(v149, v94, v151);

      v98 = v152;
      CRRegister.value.getter();
      v99 = v154;
      SharedTagged_2.tagged1.getter();
      v100 = v98;
      v63 = v174;
      (*(void (**)(char *, uint64_t))(v153 + 8))(v100, v99);
      v101 = v96;
      v53 = v155;
      v76 = (uint64_t)v172;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v101, v97);
      v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v76, 1, v173);
      v75 = v170;
      v77 = v176;
      if (v102 == 1)
        goto LABEL_4;
      (*(void (**)(char *, uint64_t, uint64_t))(v171 + 32))(v156, v76, v173);
      v103 = v147;
      v145 = Ref.subscript.modify();
      v105 = v104;
      v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
      v106 = v139;
      v137 = v105;
      CRRegister.wrappedValue.getter();
      v107 = (uint64_t)v140;
      Ref.subscript.getter();
      v108 = v180;
      v109 = *(void (**)(char *, uint64_t))(v180 + 8);
      v109(v106, v28);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
      v110 = (uint64_t)v142;
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v107, type metadata accessor for PKStrokeInheritedProperties);
      v111 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48);
      LODWORD(v105) = v111(v110, 1, v28);
      outlined destroy of StocksKitCurrencyCache.Provider?(v110, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
      v112 = (void (*)(char **, _QWORD))v145;
      if ((_DWORD)v105 != 1)
      {
        CRRegister.wrappedValue.getter();
        v178 = v103;
        swift_retain_n();
        v113 = v132;
        CRRegister.wrappedValue.getter();
        v114 = v113;
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref, MEMORY[0x1E0D12A88]);
        for (i = (uint64_t)v134; ; (*(void (**)(char *, uint64_t, uint64_t))(v180 + 32))(v114, i, v28))
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
          v116 = (uint64_t)v177;
          Ref.subscript.getter();
          CRRegister.wrappedValue.getter();
          outlined destroy of PKStrokeProperties(v116, type metadata accessor for PKStrokeInheritedProperties);
          if (v111(i, 1, v28) == 1)
            break;
          v109(v114, v28);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(i, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        swift_release();
        Ref.subscript.getter();
        v109(v114, v28);
        v117 = v138;
        Ref.subscript.setter();
        v109(v117, v28);
        v118 = v148;
        CRRegister.wrappedValue.getter();
        v119 = (uint64_t)v135;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v180 + 56))(v135, 1, 1, v28);
        v137 = (void (*)(Class *, _QWORD))Ref.subscript.modify();
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v119, v136, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        CRRegister.wrappedValue.setter();
        outlined destroy of StocksKitCurrencyCache.Provider?(v119, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        v137(&v178, 0);
        v109(v118, v28);
        v112 = (void (*)(char **, _QWORD))v145;
      }
      v112(&v179, 0);
      v120 = (uint64_t)v143;
      v121 = v156;
      Ref.subscript.getter();
      v122 = v148;
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v120, type metadata accessor for PKStrokeStruct);
      v123 = v175;
      isa = PKInk._bridgeToObjectiveC()().super.isa;
      v125 = (void (*)(char **, _QWORD))Ref.subscript.modify();
      v178 = isa;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
      CRRegister.wrappedValue.setter();
      v125(&v179, 0);
      v109(v122, v28);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v121, v173);
      v126 = v170;
      v53 = v155;
      (*(void (**)(char *, uint64_t))(v170 + 8))(v123, v155);
      a3 = v168;
      v75 = v126;
      v63 = v174;
      v62 = v158;
      v64 = v157;
      v77 = v176;
LABEL_5:
      v74 = v77 + 1;
      if (v74 == v160)
      {
        v159(v62, 1, 1, v63);
        goto LABEL_24;
      }
      v163(v62, v165 + v164 * v74, v63);
    }
    v76 = (uint64_t)v172;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56))(v172, 1, 1, v173);
    v75 = v170;
    v77 = v176;
LABEL_4:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v175, v53);
    outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    a3 = v168;
    v62 = v158;
    v64 = v157;
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v62, 1, 1, v63);
LABEL_24:
  v127 = (uint64_t *)&demangling cache variable for type metadata for PKStroke?;
  v128 = (uint64_t)v62;
LABEL_25:
  outlined destroy of StocksKitCurrencyCache.Provider?(v128, v127);
  v129 = v169;
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PKStroke, PKInk));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v129, 1, 1, v130);
LABEL_26:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char **, _QWORD);
  void (*v38)(char *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v44[3];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[32];
  char *v63;
  uint64_t v64;

  v59 = a1;
  v60 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v56 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v53 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKStroke();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v52 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v51 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a2 + 16);
  v44[1] = a2;
  if (v26)
  {
    v27 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v45 = *(_QWORD *)(v11 + 72);
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain();
    v48 = v11;
    v47 = v10;
    v46 = v25;
    v28 = v54;
    while (1)
    {
      v50(v25, v27, v10);
      v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v49(v25, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v25, 1, v10) == 1)
        break;
      v61 = v27;
      v64 = v26;
      v29 = v18;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v52, v25, v10);
      type metadata accessor for PKStrokeCoherence(0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_11:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
        result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v30 = v63;
      v31 = &v63[OBJC_IVAR___PKStrokeCoherenceBase_strokeNode];
      swift_beginAccess();
      v32 = v53;
      v33 = v55;
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v53, v31, v55);

      v34 = v56;
      CRRegister.value.getter();
      v35 = v58;
      SharedTagged_2.tagged1.getter();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v33);
      v18 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v29) == 1)
        goto LABEL_11;
      v36 = v51;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v51, v17, v29);
      v37 = (void (*)(char **, _QWORD))Ref.subscript.modify();
      type metadata accessor for PKStrokeStruct(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
      v38 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
      v40 = v39;
      v41 = type metadata accessor for PKStrokeProperties(0);
      outlined assign with copy of UUID?(v60, v40 + *(int *)(v41 + 20));
      v38(v62, 0);
      v37(&v63, 0);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v36, v29);
      v27 = v61 + v45;
      v26 = v64 - 1;
      v10 = v47;
      v11 = v48;
      v25 = v46;
      if (v64 == 1)
      {
        v49(v46, 1, 1, v47);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain();
    v42(v25, 1, 1, v10);
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSArray v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKStroke();
  v9.super.isa = Array._bridgeToObjectiveC()().super.isa;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
  }
  objc_msgSend(a1, sel_setStrokes_groupID_, v9.super.isa, isa);

}

uint64_t closure #1 in PKDrawingCoherence.mergeStrokes(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  _QWORD v15[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a2 >> 62))
  {
    v10 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v10 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v10 >= 1)
  {
    v15[1] = v2;
    v12 = 0;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v13 = (_QWORD *)MEMORY[0x1DF0E4D64](v12, a2);
      else
        v13 = *(id *)(a2 + 8 * v12 + 32);
      v14 = v13;
      ++v12;
      (*(void (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v13) + 0xA0))(a1, 0);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    while (v10 != v12);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(uint64_t a1, uint64_t a2, void (**a3)(char *, uint64_t), void (*a4)(char *, uint64_t))
{
  void (**v4)(char *, uint64_t);
  void (**v5)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  void (**v28)(char *, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  id v32;
  char *v33;
  Swift::String v34;
  Swift::String_optional v35;
  Swift::String v36;
  Swift::String v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  id v40;
  id v41;
  uint64_t v42;
  objc_class *v43;
  char *v44;
  void *v45;
  void (*v46)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (**v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (**v57)(char *, uint64_t);
  objc_super v58;
  Swift::String v59;

  v5 = v4;
  v50 = a4;
  v51 = a3;
  v49 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for CapsuleUndoAction();
  v11 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v12);
  v48 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v53 = (char *)&v48 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v48 - v24;
  v26 = (char *)v4 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v27(v25, v26, v17);
  v54 = v50;
  v55 = a2;
  v56 = v49;
  v57 = v51;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  v51 = v5;
  objc_msgSend(v5, sel_invalidateVisibleStrokes);
  v27(v21, v26, v17);
  v28 = (void (**)(char *, uint64_t))v11;
  Capsule.actionUndoingDifference(from:)();
  v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30 = v21;
  v31 = v52;
  v29(v30, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v31) == 1)
  {
    v29(v25, v17);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v50 = v29;
    v33 = v53;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v53, v10, v31);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v34._object = (void *)0xEB00000000657361;
    v59._object = (void *)0x80000001DDF55E60;
    v34._countAndFlagsBits = 0x7245206C65786950;
    v35.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v35.value._object = (void *)0xEB00000000656C62;
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    v59._countAndFlagsBits = 0xD00000000000001FLL;
    v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, v35, paperKitBundle, v36, v59);
    v38 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v39 = v48;
    v38(v48, v33, v31);
    v40 = objc_msgSend(v51, sel_uuid);
    v51 = v28;
    v41 = v40;
    v42 = v31;
    v43 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v44 = (char *)objc_allocWithZone(v43);
    v38(&v44[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v39, v42);
    v45 = (void *)MEMORY[0x1DF0E41AC](v37._countAndFlagsBits, v37._object);
    swift_bridgeObjectRelease();
    v58.receiver = v44;
    v58.super_class = v43;
    v32 = objc_msgSendSuper2(&v58, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v41, v45, 1);
    swift_unknownObjectRelease();

    v46 = v51[1];
    v46(v39, v42);
    v46(v53, v42);
    v50(v25, v17);
  }
  return v32;
}

void closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void (*v20)(__int128 *, _QWORD);
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD);
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;

  v29 = a3;
  v30 = a5;
  v25 = a4;
  v7 = type metadata accessor for NSFastEnumerationIterator();
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (a2)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v17 = a2;
    v28 = a2;
    while (v17 <= a2)
    {
      v32 = v17 - 1;
      v18 = *(void **)(v29 + 8 * (v17 - 1));
      if (v18)
      {
        type metadata accessor for PKStrokeCoherenceBase(0);
        v31 = *(void (**)(uint64_t, _QWORD))((*v16 & *(_QWORD *)swift_dynamicCastClassUnconditional()) + 0xA0);
        v19 = v18;
        v31(a1, 0);

        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      }
      else
      {
        swift_getKeyPath();
        v31 = *(void (**)(uint64_t, _QWORD))(v25 + 8 * v32);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
        v20 = (void (*)(__int128 *, _QWORD))Capsule.Ref<>.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
        CROrderedSet.remove(at:)((Swift::Int)v31);
        v20(&v34, 0);
        swift_release();
      }
      v17 = v32;
      v21 = *(void **)(v30 + 8 * v32);
      v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if (v21)
      {
        v22 = v21;
        NSArray.makeIterator()();
        while (1)
        {
          NSFastEnumerationIterator.next()();
          if (!v35)
            break;
          outlined init with take of Any(&v34, &v33);
          type metadata accessor for PKStrokeCoherenceBase(0);
          swift_dynamicCast();
          v23 = v36;
          (*(void (**)(uint64_t, _QWORD))((*v16 & *v36) + 0xA0))(a1, 0);

          (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);

        v17 = v32;
      }
      a2 = v28;
      if (!v17)
        return;
    }
    __break(1u);
    goto LABEL_16;
  }
}

id PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  objc_class *v12;
  char *v13;
  id v14;
  _BYTE v16[24];
  uint64_t v17;
  objc_super v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v2 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v11(v9, v10, v5);
  v12 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v13 = (char *)objc_allocWithZone(v12);
  v11(&v13[OBJC_IVAR___PKDrawingCoherence_model], (uint64_t)v9, v5);
  v18.receiver = v13;
  v18.super_class = v12;
  v14 = objc_msgSendSuper2(&v18, sel_init);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16[16] = a2;
  v17 = a1;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  objc_msgSend(v14, sel_invalidateVisibleStrokes);
  return v14;
}

uint64_t closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, int a2, CGFloat *a3)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int (*v28)(_BYTE *, uint64_t, uint64_t);
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  int v30;
  uint64_t (*v31)(_BYTE *, _QWORD);
  void (*v32)(_BYTE *, _QWORD);
  CGRect *v33;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CGFloat *v40;
  uint64_t v41;
  CGAffineTransform v42;
  _BYTE v43[32];
  _BYTE v44[40];
  uint64_t v45;
  CGRect v46;

  v36 = a2;
  v4 = *a3;
  v5 = a3[1];
  v6 = a3[2];
  v7 = a3[3];
  v8 = a3[4];
  v9 = a3[5];
  v40 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v37 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v41 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = &v35[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v39 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v35[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_getKeyPath();
  v38 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v45 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  CROrderedSet.makeIterator()();
  (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v21, v18);
  v41 = v22;
  v26 = v25;
  CROrderedSet.Iterator.next()();
  v27 = v37;
  v28 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v37 + 48);
  if (v28(v17, 1, v10) != 1)
  {
    v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v27 + 32);
    v30 = v36 & 1;
    do
    {
      v29(v13, v17, v10);
      transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)((uint64_t)v13, v45, v30, v40);
      (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v13, v10);
      CROrderedSet.Iterator.next()();
    }
    while (v28(v17, 1, v10) != 1);
  }
  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v26, v41);
  v31 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v32 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
  v46 = *v33;
  v42.a = v4;
  v42.b = v5;
  v42.c = v6;
  v42.d = v7;
  v42.tx = v8;
  v42.ty = v9;
  *v33 = CGRectApplyAffineTransform(v46, &v42);
  v32(v43, 0);
  return v31(v44, 0);
}

uint64_t transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1, uint64_t a2, int a3, CGFloat *a4)
{
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  char *v86;
  double v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v94;
  double v95;
  char *v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  CGFloat *v100;
  char v101;
  void (*v102)(char *, char *, uint64_t);
  CGFloat v103;
  char *v104;
  void (*v105)(CGAffineTransform *, _QWORD);
  char *v106;
  uint64_t v107;
  void (*v108)(char *, _QWORD);
  void (*v109)(char *, _QWORD);
  _OWORD *v110;
  _OWORD *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  PKStrokePath v122;
  _OWORD *v123;
  CGFloat *v124;
  __int128 v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  CGFloat tx;
  CGFloat ty;
  const void *v134;
  id v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  void (*v143)(CGAffineTransform *, _QWORD);
  void (*v144)(CGAffineTransform *, _QWORD);
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  CGFloat *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  double v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  void *v189;
  uint64_t v190;
  CGAffineTransform v191;
  CGAffineTransform t2;
  char v193[8];
  char v194[8];
  CGAffineTransform t1;

  v179 = a3;
  v186 = a1;
  v5 = *a4;
  v6 = a4[1];
  v7 = a4[2];
  v8 = a4[3];
  v9 = a4[4];
  v10 = a4[5];
  v176 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v150 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v151 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v163, v17);
  v152 = (char *)&v147 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  *(_QWORD *)&v187 = (char *)&v147 - v21;
  *(_QWORD *)&v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v166 = *(_QWORD *)(v188 - 8);
  MEMORY[0x1E0C80A78](v188, v22);
  v148 = (char *)&v147 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v149 = (char *)&v147 - v26;
  v154 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v154, v27);
  v160 = (char *)&v147 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v164 = *(_QWORD *)(v165 - 8);
  MEMORY[0x1E0C80A78](v165, v29);
  v162 = (char *)&v147 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v161, v31);
  v147 = (char *)&v147 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v157, v33);
  v155 = (uint64_t)&v147 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v174 = (char *)&v147 - v37;
  v159 = type metadata accessor for PKStrokePath();
  v158 = *(_QWORD *)(v159 - 8);
  MEMORY[0x1E0C80A78](v159, v38);
  v153 = (char *)&v147 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v156 = (char *)&v147 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v43, v44);
  v175 = (char *)&v147 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v177 = *(_QWORD *)(v178 - 8);
  MEMORY[0x1E0C80A78](v178, v46);
  v167 = (char *)&v147 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v189 = *(void **)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v49);
  v51 = (char *)&v147 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v147 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v171 = *(_QWORD *)(v172 - 8);
  MEMORY[0x1E0C80A78](v172, v56);
  v170 = (char *)&v147 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v173 = *(_QWORD *)(v190 - 8);
  MEMORY[0x1E0C80A78](v190, v58);
  v168 = (char *)&v147 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v184 = *(char **)(v183 - 8);
  MEMORY[0x1E0C80A78](v183, v60);
  v62 = (char *)&v147 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v63, v64);
  v66 = (char *)&v147 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v182 = *(_QWORD *)(v67 - 8);
  v181 = v67;
  MEMORY[0x1E0C80A78](v67, v68);
  v169 = (char *)&v147 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v70, v71);
  v73 = (char *)&v147 - v72;
  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v75 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v76);
  v180 = (char *)&v147 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = *(double *)&a2;
  Ref.subscript.getter();
  CRRegister.value.getter();
  v78 = v183;
  SharedTagged_2.tagged2.getter();
  v79 = v74;
  v80 = (void (*)(char *, uint64_t))*((_QWORD *)v184 + 1);
  v184 = v62;
  v80(v62, v78);
  v81 = *(void (**)(char *, uint64_t))(v182 + 8);
  v82 = v73;
  v83 = v181;
  v81(v82, v181);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v66, 1, v79) == 1)
  {
    v84 = v81;
    v85 = (uint64_t)v174;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    v86 = v169;
    v87 = v185;
    Ref.subscript.getter();
    v88 = v184;
    CRRegister.value.getter();
    v89 = v80;
    v90 = (uint64_t)v175;
    SharedTagged_2.tagged1.getter();
    v89(v88, v78);
    v84(v86, v83);
    v91 = v177;
    v92 = v178;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v90, 1, v178) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v90, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    }
    else
    {
      v103 = v87;
      v104 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v167, v90, v92);
      if ((v179 & 1) != 0)
      {
        v105 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
        specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(*(uint64_t *)&v103);
        v105(&t1, 0);
        Ref.subscript.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        v106 = v148;
        CRRegister.wrappedValue.getter();
        outlined destroy of PKStrokeProperties(v85, type metadata accessor for PKStrokeStruct);
        v107 = v188;
        v108 = (void (*)(char *, _QWORD))Ref.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        v109 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
        v111 = v110;
        v112 = v110[1];
        v113 = v110[2];
        *(_OWORD *)&t1.a = *v110;
        *(_OWORD *)&t1.c = v112;
        *(_OWORD *)&t1.tx = v113;
        t2.a = v5;
        t2.b = v6;
        t2.c = v7;
        t2.d = v8;
        t2.tx = v9;
        t2.ty = v10;
        CGAffineTransformConcat(&v191, &t1, &t2);
        v114 = *(_OWORD *)&v191.c;
        v115 = *(_OWORD *)&v191.tx;
        *v111 = *(_OWORD *)&v191.a;
        v111[1] = v114;
        v111[2] = v115;
        v109(v193, 0);
        v108(v194, 0);
        (*(void (**)(char *, uint64_t))(v166 + 8))(v106, v107);
        return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v104, v92);
      }
      else
      {
        Ref.subscript.getter();
        v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
        v117 = (uint64_t)v147;
        v190 = v116;
        CRRegister.wrappedValue.getter();
        outlined destroy of PKStrokeProperties(v85, type metadata accessor for PKStrokeStruct);
        v118 = v164;
        v119 = v162;
        v120 = v165;
        (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v162, v117 + *(int *)(v161 + 32), v165);
        outlined destroy of PKStrokeProperties(v117, type metadata accessor for PKStrokeProperties);
        v121 = v160;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
        (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v156, v121, v159);
        v122.super.isa = PKStrokePath._bridgeToObjectiveC()().super.isa;
        v123 = (_OWORD *)swift_allocObject();
        v124 = v176;
        v125 = *((_OWORD *)v176 + 1);
        v123[1] = *(_OWORD *)v176;
        v123[2] = v125;
        v123[3] = *((_OWORD *)v124 + 2);
        *(_QWORD *)&t1.tx = partial apply for closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:);
        *(_QWORD *)&t1.ty = v123;
        *(_QWORD *)&t1.a = MEMORY[0x1E0C809B0];
        *(_QWORD *)&t1.b = 1107296256;
        *(_QWORD *)&t1.c = thunk for @escaping @callee_guaranteed (@unowned CGPoint) -> (@unowned CGPoint);
        *(_QWORD *)&t1.d = &block_descriptor_39;
        v189 = _Block_copy(&t1);
        swift_release();
        Ref.subscript.getter();
        t1.a = v103;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        v126 = v149;
        CRRegister.wrappedValue.getter();
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref, MEMORY[0x1E0D12A88]);
        v127 = v166;
        v128 = (uint64_t)v151;
        v129 = v187;
        while (1)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          v130 = v188;
          outlined destroy of PKStrokeProperties(v129, type metadata accessor for PKStrokeInheritedProperties);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v128, 1, v130) == 1)
            break;
          (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v130);
          (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v126, v128, v130);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        outlined destroy of PKStrokeProperties(v155, type metadata accessor for PKStrokeStruct);
        swift_release();
        v131 = (uint64_t)v152;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))(v127 + 8))(v126, v130);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
        CRRegister.wrappedValue.getter();
        v188 = *(_OWORD *)&t1.a;
        v187 = *(_OWORD *)&t1.c;
        tx = t1.tx;
        ty = t1.ty;
        outlined destroy of PKStrokeProperties(v131, type metadata accessor for PKStrokeInheritedProperties);
        *(_OWORD *)&t1.a = v188;
        *(_OWORD *)&t1.c = v187;
        t1.tx = tx;
        t1.ty = ty;
        v134 = v189;
        v135 = -[objc_class copyTransformed:inCoordinateSpace:](v122.super.isa, sel_copyTransformed_inCoordinateSpace_, v189, &t1);
        _Block_release(v134);

        v136 = v153;
        static PKStrokePath._unconditionallyBridgeFromObjectiveC(_:)();

        v137 = v158;
        v138 = v159;
        (*(void (**)(char *, char *, uint64_t))(v158 + 16))(v160, v136, v159);
        v139 = type metadata accessor for CRKeyPath();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v150, 1, 1, v139);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKStrokePathStruct and conformance PKStrokePathStruct, type metadata accessor for PKStrokePathStruct, (uint64_t)&protocol conformance descriptor for PKStrokePathStruct);
        swift_retain();
        v140 = v162;
        Ref.init<A>(_:_:identity:)();
        v141 = v178;
        v142 = v167;
        v143 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
        v144 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        (*(void (**)(uint64_t, char *, uint64_t))(v164 + 40))(v145 + *(int *)(v161 + 32), v140, v165);
        v144(&t2, 0);
        v143(&t1, 0);
        v146 = *(void (**)(char *, uint64_t))(v137 + 8);
        v146(v136, v138);
        v146(v156, v138);
        return (*(uint64_t (**)(char *, uint64_t))(v177 + 8))(v142, v141);
      }
    }
  }
  else
  {
    *(_QWORD *)&v187 = v75;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v180, v66, v79);
    v94 = v170;
    v95 = v185;
    *(_QWORD *)&v188 = v79;
    Ref.subscript.getter();
    v96 = v168;
    v97 = v172;
    CRSequence.makeIterator()();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v94, v97);
    CRSequence.Iterator.next()();
    v98 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v189 + 6);
    v99 = v98(v55, 1, v48);
    v100 = v176;
    v101 = v179;
    if (v99 != 1)
    {
      v102 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v189 + 4);
      do
      {
        v102(v51, v55, v48);
        transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(v51, *(_QWORD *)&v95, v101 & 1, v100);
        (*((void (**)(char *, uint64_t))v189 + 1))(v51, v48);
        CRSequence.Iterator.next()();
      }
      while (v98(v55, 1, v48) != 1);
    }
    (*(void (**)(char *, uint64_t))(v173 + 8))(v96, v190);
    return (*(uint64_t (**)(char *, _QWORD))(v187 + 8))(v180, v188);
  }
}

double closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(_OWORD *a1, double a2, double a3)
{
  __int128 v3;
  double result;
  CGAffineTransform v5;

  v3 = a1[1];
  *(_OWORD *)&v5.a = *a1;
  *(_OWORD *)&v5.c = v3;
  *(_OWORD *)&v5.tx = a1[2];
  *(_QWORD *)&result = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&a2, &v5);
  return result;
}

double thunk for @escaping @callee_guaranteed (@unowned CGPoint) -> (@unowned CGPoint)(uint64_t a1, double a2, double a3)
{
  double (*v5)(uint64_t, double, double);
  uint64_t v6;
  double v7;

  v5 = *(double (**)(uint64_t, double, double))(a1 + 32);
  v6 = swift_retain();
  v7 = v5(v6, a2, a3);
  swift_release();
  return v7;
}

uint64_t PKDrawingCoherence.merge(with:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[24];
  char *v19;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for PKDrawing();
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v13 + 16))(&v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v9, v11);
  type metadata accessor for PKDrawingCoherence(0);
  if (swift_dynamicCast())
  {
    v14 = v19;
    if (v19 == v2)
    {
      v16 = 1;
    }
    else
    {
      v15 = &v19[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      (*(void (**)(_BYTE *, char *, uint64_t))(v5 + 16))(v8, v15, v4);
      swift_beginAccess();
      type metadata accessor for PKDrawingStruct();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      LOBYTE(v15) = Capsule.merge<A>(_:)();
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      swift_endAccess();
      if ((v15 & 1) != 0)
      {
        objc_msgSend(v2, sel_invalidateVisibleStrokes);
        v16 = 2;
      }
      else
      {
        v16 = 1;
      }
      v2 = v14;
    }

    return v16;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PKDrawingCoherence.undoableMerge(with:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t result;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  id v40;
  objc_class *v41;
  char *v42;
  void *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  objc_super v50;
  char *v51;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CapsuleUndoAction();
  v49 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v48 = (char *)&v45 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v45 - v21;
  v23 = type metadata accessor for PKDrawing();
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))((char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v23, v25);
  type metadata accessor for PKDrawingCoherence(0);
  if (swift_dynamicCast())
  {
    v28 = v51;
    if (v51 == v2)
    {

    }
    else
    {
      v46 = v8;
      v29 = &v2[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      v30 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
      v30(v22, v29, v14);
      v31 = &v28[OBJC_IVAR___PKDrawingCoherence_model];
      swift_beginAccess();
      v30(v18, v31, v14);
      swift_beginAccess();
      type metadata accessor for PKDrawingStruct();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      LOBYTE(v31) = Capsule.merge<A>(_:)();
      v32 = *(void (**)(char *, uint64_t))(v15 + 8);
      v32(v18, v14);
      swift_endAccess();
      if ((v31 & 1) != 0)
      {
        objc_msgSend(v2, sel_invalidateVisibleStrokes);
        v30(v18, v29, v14);
        Capsule.actionUndoingDifference(from:)();
        v32(v18, v14);
        v33 = v49;
        v34 = v46;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v7, 1, v46) != 1)
        {
          v37 = v48;
          (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v48, v7, v34);
          v38 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
          v39 = v47;
          v38(v47, v37, v34);
          v40 = objc_msgSend(v2, sel_uuid);
          v41 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
          v42 = (char *)objc_allocWithZone(v41);
          v38(&v42[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v39, v34);
          v43 = (void *)MEMORY[0x1DF0E41AC](0, 0xE000000000000000);
          v50.receiver = v42;
          v50.super_class = v41;
          v35 = objc_msgSendSuper2(&v50, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v40, v43, 1);
          swift_unknownObjectRelease();

          v44 = *(void (**)(char *, uint64_t))(v49 + 8);
          v44(v47, v34);

          v44(v48, v34);
          v32(v22, v14);
          return (uint64_t)v35;
        }
        v32(v22, v14);

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
      }
      else
      {
        v32(v22, v14);

      }
    }
    return 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id @objc PKCoherenceUndoCommand.apply(toDrawingReturnInverted:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v16;

  v7 = type metadata accessor for PKDrawing();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3;
  v13 = a1;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v14 = (void *)a4(v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v14;
}

uint64_t PKDrawingCoherence.merge<A>(_:)()
{
  void *v0;
  void *v1;
  char v2;

  v1 = v0;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v2 = Capsule.merge<A>(_:)();
  swift_endAccess();
  if ((v2 & 1) != 0)
    objc_msgSend(v1, sel_invalidateVisibleStrokes);
  return v2 & 1;
}

Swift::Int PKDrawingCoherence.hash.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v19 = type metadata accessor for CRVersion();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init()();
  v14 = v0 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15(v13, v14, v9);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v13, v9);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v15(v13, v14, v9);
  Capsule.version.getter();
  v16(v13, v9);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRVersion and conformance CRVersion, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12CD0], MEMORY[0x1E0D12CE0]);
  v17 = v19;
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v17);
  v28 = v23;
  v29 = v24;
  v30 = v25;
  v26 = v21;
  v27 = v22;
  return Hasher.finalize()();
}

uint64_t PKDrawingCoherence.isEqual(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  void (*v31)(char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  char v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _BYTE v50[24];
  uint64_t v51;

  v3 = type metadata accessor for CRVersion();
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v46 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v45 = (char *)&v40 - v8;
  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v40 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v40 - v25;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v50, &demangling cache variable for type metadata for Any?);
  if (!v51)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v50, &demangling cache variable for type metadata for Any?);
    goto LABEL_9;
  }
  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_9:
    v35 = 0;
    return v35 & 1;
  }
  v44 = v49;
  if (v49 == v1)
  {

    v35 = 1;
    return v35 & 1;
  }
  v27 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v28 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v41 = v27;
  v28(v26, v27, v18);
  v43 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.rootID.getter();
  v29 = *(void (**)(char *, uint64_t))(v19 + 8);
  v29(v26, v18);
  v30 = &v44[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v40 = v30;
  v42 = v28;
  v28(v22, v30, v18);
  Capsule<>.rootID.getter();
  v29(v22, v18);
  LOBYTE(v28) = static CRKeyPath.== infix(_:_:)();
  v31 = *(void (**)(char *, uint64_t))(v10 + 8);
  v31(v13, v9);
  v31(v17, v9);
  if ((v28 & 1) == 0)
  {

    goto LABEL_9;
  }
  v32 = v42;
  v42(v26, v41, v18);
  v33 = v45;
  Capsule.version.getter();
  v29(v26, v18);
  v32(v22, v40, v18);
  v34 = v46;
  Capsule.version.getter();
  v29(v22, v18);
  v35 = static CRVersion.== infix(_:_:)();

  v36 = *(void (**)(char *, uint64_t))(v47 + 8);
  v37 = v34;
  v38 = v48;
  v36(v37, v48);
  v36(v33, v38);
  return v35 & 1;
}

uint64_t PKDrawingCoherence._stroke(forIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v3, v4);
  v52 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  MEMORY[0x1E0C80A78](v6, v7);
  v51 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v13 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v14);
  v50 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v49 - v18;
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v53 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)v49 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v24, a1, v20, v29);
  CRKeyPath.init(_:)();
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v49[1] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  WeakRef.init(id:)();
  v33 = v55 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v34 = v13;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v36 = v54;
  v49[0] = v35;
  v35(v19, v33, v54);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v55 = v27;
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v36);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 48))(v12, 1, v32);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if ((_DWORD)v21 == 1)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v55);
    v37 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v56, 1, 1, v37);
  }
  else
  {
    v39 = v53;
    v40 = v56;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B70]);
    v41 = v55;
    Reference.identity.getter();
    v42 = (uint64_t)v51;
    Ref.init(id:)();
    v43 = (uint64_t)v50;
    ((void (*)(char *, uint64_t, uint64_t))v49[0])(v50, v33, v36);
    v44 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(v42, v43);
    if (v44)
    {
      v45 = (void *)v44;
      v46 = (uint64_t)v52;
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v41);
      v47 = type metadata accessor for PKStroke();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 0, 1, v47);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v41);
      v48 = type metadata accessor for PKStroke();
      v46 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v52, 1, 1, v48);
    }
    return outlined init with take of (key: Int, value: AnyCRValue)?(v46, v40, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  }
}

id PKDrawingCoherence.__allocating_init(from:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  Class isa;
  id v11;
  id v13[6];

  v13[5] = *(id *)MEMORY[0x1E0C80C00];
  outlined init with copy of FindResult(a1, (uint64_t)v13);
  v5 = Data.init(from:)();
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    v9 = objc_allocWithZone(v1);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v13[0] = 0;
    v3 = objc_msgSend(v9, sel_initWithData_error_, isa, v13);

    if (v3)
    {
      v11 = v13[0];
      __swift_destroy_boxed_opaque_existential_1(a1);
      outlined consume of Data._Representation(v7, v8);
      return v3;
    }
    v3 = v13[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v3;
}

uint64_t PKDrawingCoherence.encode(to:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = objc_msgSend(v0, sel_dataRepresentation);
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  Data.encode(to:)();
  return outlined consume of Data._Representation(v2, v4);
}

id PKDrawingCoherence.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKDrawingCoherence);
}

id protocol witness for Decodable.init(from:) in conformance PKDrawingCoherence@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id result;

  result = PKDrawingCoherence.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PKDrawingCoherence()
{
  id *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = objc_msgSend(*v0, sel_dataRepresentation);
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  Data.encode(to:)();
  return outlined consume of Data._Representation(v2, v4);
}

uint64_t specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a3;
  v55 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v50 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v49 = (char *)&v45 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v51 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v54 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v23);
  v48 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v46 = a2;
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
    return 0;
  v45 = v4;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v55, (uint64_t)v28);
  swift_endAccess();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v30 = 1;
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  if (v31 == 1)
  {
    v32 = v53;
    Ref.subscript.getter();
    CRRegister.value.getter();
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    v33 = v54;
    v34 = v52;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v17, 1, v52) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    }
    else
    {
      v35 = v48;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v48, v17, v34);
      v36 = v49;
      Ref.subscript.getter();
      v37 = v45;
      v38 = CRSequence.count.getter();
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v36, v37);
      if (v38)
      {
        v40 = Ref.subscript.getter();
        MEMORY[0x1E0C80A78](v40, v41);
        v42 = v47;
        *(&v45 - 2) = v46;
        *(&v45 - 1) = v32;
        CRSequence.filter(_:)();
        v39(v36, v37);
        if (!CRSequence.count.getter())
        {
          v39(v42, v37);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v34);
          return 1;
        }
        Ref.subscript.getter();
        v43 = CRSequence.hasDelta(from:)();
        v39(v36, v37);
        if ((v43 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v36, v42, v37);
          swift_retain();
          Ref.subscript.setter();
        }
        v39(v42, v37);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v34);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
      }
    }
    return 0;
  }
  return v30;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_So01_F8ConcreteCs5NeverOTg5062_s8PaperKit18PKDrawingCoherenceC15concreteDrawingSo0C0CyFSo17_fg3C06D11B00G0VXEfU_0jE00lM0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = type metadata accessor for PKStroke();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v15[1] = v2;
    v18 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v12 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v16 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v9, v12, v5);
      type metadata accessor for PKStrokeCoherenceBase(0);
      swift_dynamicCast();
      v14 = v17;
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0xA8))(a2);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v12 += v16;
      --v10;
    }
    while (v10);
    return v18;
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  Class isa;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v54[2];
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;

  v56 = a2;
  v4 = type metadata accessor for PKInk();
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v66 = *(_QWORD *)(v12 - 8);
  v67 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v61 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v57 = (char *)v54 - v17;
  v18 = type metadata accessor for PKStroke();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v55 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v70 = (char *)v54 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v25, v26);
  v64 = (char *)v54 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a1 + 16);
  if (v28)
  {
    v54[1] = v2;
    v29 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v60 = *(_QWORD *)(v19 + 72);
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v59 = *MEMORY[0x1E0CD1300];
    v54[0] = a1;
    swift_bridgeObjectRetain();
    v68 = MEMORY[0x1E0DEE9D8];
    v69 = v19;
    v30 = v64;
    v58 = v11;
    while (1)
    {
      v65(v30, v29, v18);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v31(v30, 0, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v30, 1, v18) == 1)
        goto LABEL_23;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v70, v30, v18);
      PKStroke.ink.getter();
      isa = PKInk._bridgeToObjectiveC()().super.isa;
      v33 = -[objc_class identifier](isa, sel_identifier);

      if (!v33)
      {
        v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v33 = (id)MEMORY[0x1DF0E41AC](v34);
        swift_bridgeObjectRelease();
      }
      v35 = v7;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v63);
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v37;
      if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        v40 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
        {
          v65(v55, (uint64_t)v70, v18);
          type metadata accessor for PKStrokeCoherence(0);
          swift_dynamicCast();
          v43 = v71;
          v42 = (uint64_t)v58;
          PKStrokeCoherence.newShared(in:flatten:)(v56, 0, (uint64_t)v58);

          v41 = 0;
          goto LABEL_14;
        }
      }
      v41 = 1;
      v42 = (uint64_t)v58;
LABEL_14:
      v45 = v66;
      v44 = v67;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v42, v41, 1, v67);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v18);
      v7 = v35;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v42, 1, v44) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v42, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
        v19 = v69;
      }
      else
      {
        v46 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
        v47 = v57;
        v46(v57, v42, v44);
        v46(v61, (uint64_t)v47, v44);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1, v68);
        v19 = v69;
        v49 = *(_QWORD *)(v68 + 16);
        v48 = *(_QWORD *)(v68 + 24);
        if (v49 >= v48 >> 1)
          v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1, v68);
        v50 = v67;
        v51 = v68;
        *(_QWORD *)(v68 + 16) = v49 + 1;
        v46((char *)(v51+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v49), (uint64_t)v61, v50);
      }
      v29 += v60;
      --v28;
      v30 = v64;
      if (!v28)
      {
        v31(v64, 1, 1, v18);
        goto LABEL_23;
      }
    }
  }
  v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  swift_bridgeObjectRetain();
  v68 = MEMORY[0x1E0DEE9D8];
  v52(v64, 1, 1, v18);
LABEL_23:
  swift_bridgeObjectRelease();
  return v68;
}

uint64_t specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(id a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  id v27;
  void *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  objc_class *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  objc_super v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54, v3);
  v49 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v47 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v48 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v43 - v22;
  objc_opt_self();
  v24 = swift_dynamicCastObjCClass();
  if (!v24)
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB35C8]), sel_init);
    swift_willThrow();
    return (uint64_t)a1;
  }
  v25 = (void *)v24;
  v44 = v23;
  v45 = v1;
  v46 = v17;
  v26 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v52 = *MEMORY[0x1E0C9D628];
  v53 = v26;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v43 = a1;
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  CROrderedSet.init()();
  *(_QWORD *)&v15[*(int *)(v12 + 24)] = MEMORY[0x1E0DEE9E0];
  v27 = objc_msgSend(v25, sel_nsuuid);
  if (v27)
  {
    v28 = v27;
    v29 = v49;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v30 = v50;
    v31 = v29;
    v32 = v54;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v8, v31, v54);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v8, 0, 1, v32);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v32);
    v34 = v46;
    if ((_DWORD)result != 1)
    {
      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
      v35 = v44;
      v36 = Capsule<>.init(_:id:)();
      MEMORY[0x1E0C80A78](v36, v37);
      *(&v43 - 2) = v25;
      Capsule.mutate<A>(_:)();
      v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v39 = v48;
      v38(v48, v35, v16);
      v40 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v41 = (char *)objc_allocWithZone(v40);
      v38(&v41[OBJC_IVAR___PKDrawingCoherence_model], v39, v16);
      v51.receiver = v41;
      v51.super_class = v40;
      a1 = objc_msgSendSuper2(&v51, sel_init);
      v42 = *(void (**)(char *, uint64_t))(v34 + 8);
      v42(v39, v16);

      v42(v35, v16);
      return (uint64_t)a1;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v8, 1, 1, v54);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PKDrawingCoherence(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKDrawingCoherence);
}

id specialized PKDrawingCoherence.__allocating_init(data:)()
{
  objc_class *v0;
  id v1;
  Class isa;
  id v3;
  id v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = objc_allocWithZone(v0);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v7[0] = 0;
  v3 = objc_msgSend(v1, sel_initWithData_error_, isa, v7);

  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    v5 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id specialized PKDrawingCoherence.init(data:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithData_loadNonInkingStrokes_error_, isa, 0, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t type metadata accessor for PKDrawingCoherenceVersion(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKDrawingCoherenceVersion);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence._rootStrokes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in PKDrawingCoherence._rootStrokes.getter(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.bounds.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.bounds.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in PKDrawingCoherence._canvasBounds.setter()
{
  return closure #1 in PKDrawingCoherence._canvasBounds.setter();
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.addNewStroke(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.addNewStroke(_:)(a1, *(_QWORD *)(v1 + 16));
}

id specialized @nonobjc PKDrawingConcrete.init(data:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initWithData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized PKDrawingCoherence.init(data:loadNonInkingStrokes:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  void (*v18)(char *, char *, uint64_t);
  objc_class *v19;
  char *v20;
  id v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  _QWORD v25[2];
  objc_super v26;
  uint64_t v27;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v25 - v13;
  v15 = v2;
  outlined copy of Data._Representation(a1, a2);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v3)
  {
    swift_getObjectType();

    v16 = objc_allocWithZone(MEMORY[0x1E0CD1160]);
    outlined copy of Data._Representation(a1, a2);
    v17 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    outlined consume of Data._Representation(a1, a2);
    v23 = specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v17);

    outlined consume of Data._Representation(a1, a2);
  }
  else
  {

    v27 = 0;
    v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v18(v10, v14, v6);
    v19 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    v20 = (char *)objc_allocWithZone(v19);
    v25[1] = v15;
    v21 = v20;
    v18(&v20[OBJC_IVAR___PKDrawingCoherence_model], v10, v6);
    v26.receiver = v21;
    v26.super_class = v19;
    v23 = (uint64_t)objc_msgSendSuper2(&v26, sel_init);
    v22 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22(v10, v6);
    outlined consume of Data._Representation(a1, a2);
    v22(v14, v6);
    swift_getObjectType();
  }
  swift_deallocPartialClassInstance();
  return v23;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  id v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  id v36;
  objc_class *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  objc_super v56;

  v47 = a6;
  v46 = a4;
  v48 = a3;
  v45 = a2;
  v44 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CapsuleUndoAction();
  v52 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v51 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v50 = (char *)&v43 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v43 - v26;
  v49 = a5;
  v28 = &a5[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v29 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
  v29(v27, v28, v19);
  v53 = a7;
  v54 = 0;
  v55 = 1;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v48 & 1) != 0)
    objc_msgSend(v49, sel_set_cachedVisibleStrokes_, 0);
  v29(v23, v28, v19);
  Capsule.actionUndoingDifference(from:)();
  v30 = *(void (**)(char *, uint64_t))(v20 + 8);
  v30(v23, v19);
  v31 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v12, 1, v13) == 1)
  {
    v30(v27, v19);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v50, v12, v13);
    v34 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35 = v51;
    v34(v51, v33, v13);
    v36 = objc_msgSend(v49, sel_uuid);
    v37 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v38 = (char *)objc_allocWithZone(v37);
    v34(&v38[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v35, v13);
    v39 = v45;
    swift_bridgeObjectRetain();
    v40 = (void *)MEMORY[0x1DF0E41AC](v44, v39);
    swift_bridgeObjectRelease();
    v56.receiver = v38;
    v56.super_class = v37;
    v32 = objc_msgSendSuper2(&v56, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v36, v40, v46 & 1);
    swift_unknownObjectRelease();

    v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v51, v13);
    v41(v50, v13);
    v30(v27, v19);
  }
  return v32;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, void *a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  Class isa;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  id v40;
  objc_class *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  objc_super v62;

  v51 = a8;
  v50 = a7;
  v49 = a4;
  v54 = a3;
  v48 = a2;
  v47 = a1;
  v52 = a10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for CapsuleUndoAction();
  v58 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v16);
  v57 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v56 = (char *)&v47 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v47 - v28;
  v53 = a5;
  v30 = &a5[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v31 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v31(v29, v30, v21);
  v59 = v50;
  v60 = v51;
  v61 = a9 & 1;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a6, sel_deleteStrokes_, isa);

  if ((v54 & 1) != 0)
    objc_msgSend(v53, sel_set_cachedVisibleStrokes_, 0);
  v31(v25, v30, v21);
  Capsule.actionUndoingDifference(from:)();
  v33 = *(void (**)(char *, uint64_t))(v22 + 8);
  v33(v25, v21);
  v34 = v58;
  v35 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v15, 1, v55) == 1)
  {
    v33(v29, v21);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v37 = v56;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v56, v15, v35);
    v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v39 = v57;
    v38(v57, v37, v35);
    v40 = objc_msgSend(v53, sel_uuid);
    v41 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v42 = (char *)objc_allocWithZone(v41);
    v38(&v42[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v39, v35);
    v43 = v48;
    swift_bridgeObjectRetain();
    v44 = (void *)MEMORY[0x1DF0E41AC](v47, v43);
    swift_bridgeObjectRelease();
    v62.receiver = v42;
    v62.super_class = v41;
    v36 = objc_msgSendSuper2(&v62, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v40, v44, v49 & 1);
    swift_unknownObjectRelease();

    v45 = *(void (**)(char *, uint64_t))(v34 + 8);
    v45(v57, v35);
    v45(v56, v35);
    v33(v29, v21);
  }
  return v36;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (**a5)(char *, uint64_t), void *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  Class isa;
  void (*v30)(char *, uint64_t);
  void (**v31)(char *, uint64_t);
  id v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  id v36;
  id v37;
  objc_class *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  id v49;
  int v50;
  void (**v51)(char *, uint64_t);
  char *v52;
  objc_super v53;

  v49 = a6;
  v48 = a4;
  v50 = a3;
  v46 = a1;
  v47 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CapsuleUndoAction();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v45 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v52 = (char *)&v44 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v44 - v25;
  v51 = a5;
  v27 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v28 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v28(v26, v27, v18);
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v49, sel_deleteStrokes_, isa);

  if ((v50 & 1) != 0)
    objc_msgSend(v51, sel_set_cachedVisibleStrokes_, 0);
  v28(v22, v27, v18);
  Capsule.actionUndoingDifference(from:)();
  v30 = *(void (**)(char *, uint64_t))(v19 + 8);
  v30(v22, v18);
  v31 = (void (**)(char *, uint64_t))v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v30(v26, v18);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v33 = v52;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v52, v10, v11);
    v34 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v35 = v45;
    v34(v45, v33, v11);
    v36 = objc_msgSend(v51, sel_uuid);
    v51 = v31;
    v37 = v36;
    v38 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v39 = (char *)objc_allocWithZone(v38);
    v34(&v39[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v35, v11);
    v40 = v47;
    swift_bridgeObjectRetain();
    v41 = (void *)MEMORY[0x1DF0E41AC](v46, v40);
    swift_bridgeObjectRelease();
    v53.receiver = v39;
    v53.super_class = v38;
    v32 = objc_msgSendSuper2(&v53, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v37, v41, v48 & 1);
    swift_unknownObjectRelease();

    v42 = v51[1];
    v42(v35, v11);
    v42(v52, v11);
    v30(v26, v18);
  }
  return v32;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, void (**a5)(char *, uint64_t), void *a6, uint64_t a7, __int128 *a8, unsigned __int8 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  Class isa;
  void (*v35)(char *, uint64_t);
  void (**v36)(char *, uint64_t);
  id v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  id v41;
  id v42;
  objc_class *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void (*v47)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  int v55;
  id v56;
  int v57;
  void (**v58)(char *, uint64_t);
  char *v59;
  objc_super v60;
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;

  v56 = a6;
  v52 = a4;
  v57 = a3;
  v51 = a2;
  v50 = a1;
  v55 = a9;
  v54 = *a8;
  v53 = a8[1];
  v10 = *((_QWORD *)a8 + 4);
  v11 = *((_QWORD *)a8 + 5);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CapsuleUndoAction();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v49 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v59 = (char *)&v49 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v49 - v30;
  v58 = a5;
  v32 = (char *)a5 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  v33 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v33(v31, v32, v23);
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v61[0] = v54;
  v61[1] = v53;
  v62 = v10;
  v63 = v11;
  objc_msgSend(v56, sel_transformStrokes_withTransform_concat_, isa, v61, v55 & 1);

  if ((v57 & 1) != 0)
    objc_msgSend(v58, sel_set_cachedVisibleStrokes_, 0);
  v33(v27, v32, v23);
  Capsule.actionUndoingDifference(from:)();
  v35 = *(void (**)(char *, uint64_t))(v24 + 8);
  v35(v27, v23);
  v36 = (void (**)(char *, uint64_t))v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v35(v31, v23);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v38 = v59;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v59, v15, v16);
    v39 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    v40 = v49;
    v39(v49, v38, v16);
    v41 = objc_msgSend(v58, sel_uuid);
    v58 = v36;
    v42 = v41;
    v43 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v44 = (char *)objc_allocWithZone(v43);
    v39(&v44[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v40, v16);
    v45 = v51;
    swift_bridgeObjectRetain();
    v46 = (void *)MEMORY[0x1DF0E41AC](v50, v45);
    swift_bridgeObjectRelease();
    v60.receiver = v44;
    v60.super_class = v43;
    v37 = objc_msgSendSuper2(&v60, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v42, v46, v52 & 1);
    swift_unknownObjectRelease();

    v47 = v58[1];
    v47(v40, v16);
    v47(v59, v16);
    v35(v31, v23);
  }
  return v37;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  id v38;
  objc_class *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  id v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  objc_super v60;

  v50 = a8;
  v49 = a7;
  v48 = a4;
  v52 = a3;
  v47 = a2;
  v46 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for CapsuleUndoAction();
  v56 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v15);
  v55 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v54 = (char *)&v45 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v45 - v27;
  v53 = a5;
  v29 = &a5[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v30 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v30(v28, v29, v20);
  v57 = v49;
  v58 = v50;
  v59 = a9;
  swift_beginAccess();
  Capsule.mutate<A>(_:)();
  swift_endAccess();
  objc_msgSend(a6, sel_invalidateVisibleStrokes);
  if ((v52 & 1) != 0)
    objc_msgSend(v53, sel_set_cachedVisibleStrokes_, 0);
  v30(v24, v29, v20);
  Capsule.actionUndoingDifference(from:)();
  v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v24, v20);
  v32 = v56;
  v33 = v51;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v14, 1, v51) == 1)
  {
    v31(v28, v20);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v35 = v54;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v54, v14, v33);
    v36 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v37 = v55;
    v36(v55, v35, v33);
    v38 = objc_msgSend(v53, sel_uuid);
    v39 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v40 = (char *)objc_allocWithZone(v39);
    v36(&v40[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v37, v33);
    v41 = v47;
    swift_bridgeObjectRetain();
    v42 = (void *)MEMORY[0x1DF0E41AC](v46, v41);
    swift_bridgeObjectRelease();
    v60.receiver = v40;
    v60.super_class = v39;
    v34 = objc_msgSendSuper2(&v60, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v38, v42, v48 & 1);
    swift_unknownObjectRelease();

    v43 = *(void (**)(char *, uint64_t))(v32 + 8);
    v43(v55, v33);
    v43(v54, v33);
    v31(v28, v20);
  }
  return v34;
}

id specialized PKDrawingCoherence.undoable(actionName:clearCachedVisibleStrokes:changesVisibleStrokes:_:)(uint64_t a1, uint64_t a2, int a3, int a4, char *a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  Class isa;
  Class v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  id v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  id v36;
  objc_class *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int v45;
  id v46;
  int v47;
  id v48;
  char *v49;
  char *v50;
  uint64_t v51;
  objc_super v52;

  v46 = a6;
  v45 = a4;
  v47 = a3;
  v43 = a1;
  v44 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CapsuleUndoAction();
  v51 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v50 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v49 = (char *)&v43 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v43 - v24;
  v48 = a5;
  v26 = &a5[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v27 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v27(v25, v26, v17);
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PKInk();
  v29 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, sel_setStrokes_inks_, isa, v29);

  if ((v47 & 1) != 0)
    objc_msgSend(v48, sel_set_cachedVisibleStrokes_, 0);
  v27(v21, v26, v17);
  Capsule.actionUndoingDifference(from:)();
  v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v21, v17);
  v31 = v51;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v10, 1, v11) == 1)
  {
    v30(v25, v17);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    return 0;
  }
  else
  {
    v33 = v49;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v49, v10, v11);
    v34 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35 = v50;
    v34(v50, v33, v11);
    v36 = objc_msgSend(v48, sel_uuid);
    v37 = (objc_class *)type metadata accessor for PKCoherenceUndoCommand(0);
    v38 = (char *)objc_allocWithZone(v37);
    v34(&v38[OBJC_IVAR____TtC8PaperKitP33_745DA07C2AB299ADF5B7B63B4181D3F122PKCoherenceUndoCommand_undo], v35, v11);
    v39 = v44;
    swift_bridgeObjectRetain();
    v40 = (void *)MEMORY[0x1DF0E41AC](v43, v39);
    swift_bridgeObjectRelease();
    v52.receiver = v38;
    v52.super_class = v37;
    v32 = objc_msgSendSuper2(&v52, sel_initWithDrawingUUID_actionName_changesVisibleStrokes_, v36, v40, v45 & 1);
    swift_unknownObjectRelease();

    v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v50, v11);
    v41(v49, v11);
    v30(v25, v17);
  }
  return v32;
}

uint64_t specialized PKDrawingCoherence.updateStroke(_:indexHint:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  void *v14;

  v2 = type metadata accessor for PKStroke();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  type metadata accessor for PKStrokeCoherenceBase(0);
  if (swift_dynamicCast())
  {
    v7 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = v7;
    v14 = (void *)inited;
    v9 = specialized Array._endMutation()();
    MEMORY[0x1E0C80A78](v9, v10);
    swift_beginAccess();
    v11 = v7;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
    Capsule.mutate<A>(_:)();
    swift_endAccess();

    return swift_bridgeObjectRelease();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(a1, *(_QWORD *)(v1 + 16), *(CGFloat **)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.deleteStrokes(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.deleteStrokes(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(objc_class *a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)()
{
  uint64_t v0;

  closure #1 in PKDrawingCoherence.undoableSetStrokes(_:groupID:actionName:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for PKCoherenceUndoCommand(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKCoherenceUndoCommand);
}

uint64_t ObjC metadata update function for PKDrawingCoherenceVersion()
{
  return type metadata accessor for PKDrawingCoherenceVersion(0);
}

uint64_t type metadata completion function for PKDrawingCoherenceVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
}

uint64_t ObjC metadata update function for PKCoherenceUndoCommand()
{
  return type metadata accessor for PKCoherenceUndoCommand(0);
}

uint64_t type metadata completion function for PKCoherenceUndoCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12468]);
}

uint64_t ObjC metadata update function for PKDrawingCoherence()
{
  return type metadata accessor for PKDrawingCoherence(0);
}

uint64_t type metadata completion function for PKDrawingCoherence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for PKDrawingCoherenceVersion(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Capsule<PKDrawingStruct>);
}

uint64_t type metadata completion function for PKDrawingCoherenceVersion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PKDrawingCoherence()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PKDrawingCoherence.model.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of PKDrawingCoherence.model.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PKDrawingCoherence.model.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PKDrawingCoherence.__allocating_init(model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PKDrawingCoherence.concreteDrawing()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of PKDrawingCoherence.merge<A>(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PKDrawingCoherence.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of PKDrawingCoherence.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

void type metadata accessor for Capsule<PKDrawingStruct>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Capsule<PKDrawingStruct>)
  {
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    v0 = type metadata accessor for Capsule();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<PKDrawingStruct>);
  }
}

void partial apply for closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in PKDrawingCoherence.update(fromSlicedIntersectingIndexes:resultNewRoots:resultUpdatedStrokes:count:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in PKDrawingCoherence.init(strokes:from:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PKDrawingCoherence.init(strokes:from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(a1, *(unsigned __int8 *)(v1 + 16), *(CGFloat **)(v1 + 24));
}

uint64_t sub_1DDD0A998()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)(double a1, double a2)
{
  uint64_t v2;

  return closure #1 in transformStroke #1 (_:) in closure #1 in PKDrawingCoherence.applyTransform(_:transformInk:)((_OWORD *)(v2 + 16), a1, a2);
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PKDrawingCoherence.setStrokes(_:paths:masks:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1DDD0A9E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

BOOL partial apply for specialized closure #1 in removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1)
{
  uint64_t v1;

  return (specialized removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1) == 0;
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.mergeStrokes(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.mergeStrokes(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

BOOL partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(void (*a1)(char *, uint64_t))
{
  uint64_t v1;

  return containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in PKDrawingCoherence.init(concreteDrawing:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingCoherence.init(concreteDrawing:)(a1, *(void **)(v1 + 16));
}

uint64_t closure #1 in PKDrawingCoherence._canvasBounds.setterpartial apply()
{
  return partial apply for closure #1 in PKDrawingCoherence._canvasBounds.setter();
}

uint64_t closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.addNewStrokes(_:at:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:groupID:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence.setStrokes(_:inks:)partial apply(objc_class *a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.setStrokes(_:inks:)(a1);
}

uint64_t closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)partial apply()
{
  return partial apply for closure #1 in containsStroke #1 (in:) in PKDrawingCoherence.indexOf(_:)() & 1;
}

uint64_t closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.transformStrokes(_:with:concat:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence.deleteStrokes(_:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in PKDrawingCoherence.deleteStrokes(_:)(a1);
}

uint64_t closure #1 in PKDrawingCoherence._rootStrokes.getterpartial apply@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in PKDrawingCoherence._rootStrokes.getter(a1, a2);
}

Swift::Void __swiftcall TextAlignmentViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  objc_super v34;

  v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v34, sel_viewDidLoad);
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl];
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329D0;
  v6 = objc_msgSend(v2, sel_topAnchor);
  v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  v10 = objc_msgSend(v9, sel_topAnchor);
  v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin];
  v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(_QWORD *)(v5 + 32) = v12;
  v13 = objc_msgSend(v2, sel_leadingAnchor);
  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  v17 = objc_msgSend(v16, sel_leadingAnchor);
  v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(_QWORD *)(v5 + 40) = v18;
  v19 = objc_msgSend(v2, sel_bottomAnchor);
  v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  v23 = objc_msgSend(v22, sel_bottomAnchor);
  v24 = -v11;
  v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(_QWORD *)(v5 + 48) = v25;
  v26 = objc_msgSend(v2, sel_trailingAnchor);
  v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    v28 = v27;
    v29 = (void *)objc_opt_self();
    v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    v31 = objc_msgSend(v30, sel_trailingAnchor);
    v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

    *(_QWORD *)(v5 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize + 8]);
    return;
  }
LABEL_11:
  __break(1u);
}

id TextAlignmentViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  objc_class *ObjectType;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  v8 = OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl;
  v9 = objc_allocWithZone((Class)type metadata accessor for TextAlignmentControl());
  v10 = v3;
  TextAlignmentControl.init(axis:useCapsuleStyle:)(0, 0);
  *(_QWORD *)&v3[v8] = v11;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin] = 0x4028000000000000;
  *(_OWORD *)&v10[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize] = xmmword_1DDF353E0;

  if (a2)
  {
    v12 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v10;
  v15.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, v12, a3);

  return v13;
}

id TextAlignmentViewController.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  id v5;
  char *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_textAlignmentControl;
  v5 = objc_allocWithZone((Class)type metadata accessor for TextAlignmentControl());
  v6 = v1;
  TextAlignmentControl.init(axis:useCapsuleStyle:)(0, 0);
  *(_QWORD *)&v1[v4] = v7;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_contentViewMargin] = 0x4028000000000000;
  *(_OWORD *)&v6[OBJC_IVAR____TtC8PaperKit27TextAlignmentViewController_preferredPopoverSize] = xmmword_1DDF353E0;

  v10.receiver = v6;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t type metadata accessor for TextAlignmentViewController()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for ReflowTextLine(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReflowTextLine(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for ReflowTextLine(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReflowTextLine(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReflowTextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReflowTextLine()
{
  return &type metadata for ReflowTextLine;
}

BOOL ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  double v13;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  _OWORD v63[2];
  _OWORD v64[2];
  __int128 v65;
  __int128 v66;
  _BYTE v67[26];
  uint64_t v68[9];

  v12 = v6;
  v13 = a6;
  v16 = a3;
  v17 = a2;
  if (a6 >= 1.0)
    goto LABEL_18;
  if (a2 != 100)
    goto LABEL_18;
  v19 = *(_QWORD *)(v6 + 8);
  if (!v19)
    goto LABEL_18;
  outlined init with take of ReflowSpacingAdjustment?(a3, (uint64_t)v68);
  if (v68[0])
  {
    if (*(_QWORD *)(v68[0] + 120) == *(_QWORD *)(v12 + 152))
      goto LABEL_18;
  }
  if (*(_QWORD *)v12 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v20 = v7 + 1;
    if (!__OFADD__(v7, 1))
      goto LABEL_8;
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  v7 = *(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v20 = v7 + 1;
  if (__OFADD__(v7, 1))
    goto LABEL_96;
LABEL_8:
  *(_QWORD *)&v61 = specialized Collection.prefix(_:)(v20, v19);
  v59 = v22;
  *(_QWORD *)&v60 = v21;
  v58 = v23;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1DDF35440;
  *(_QWORD *)(v24 + 32) = a1;
  *(_QWORD *)&v65 = v24;
  specialized Array._endMutation()();
  v19 = v65;
  if ((v65 & 0x8000000000000000) == 0 && (v65 & 0x4000000000000000) == 0)
  {
    v25 = v65 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_11;
  }
LABEL_97:
  swift_bridgeObjectRetain();
  swift_retain();
  v25 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v19);
  swift_bridgeObjectRelease();
LABEL_11:
  v26 = *(_QWORD *)(v25 + 16);
  *(_QWORD *)&v65 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v65 + 1) = MEMORY[0x1E0DEE9D8] + 32;
  v66 = xmmword_1DDF32D00;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v28 = (v26 & 0x7FFFFFFFFFFFFFFFLL) + v27;
  if (__OFADD__(v26 & 0x7FFFFFFFFFFFFFFFLL, v27))
  {
    __break(1u);
    goto LABEL_100;
  }
  v8 = (2 * v26) | 1;
  specialized ArraySlice.reserveCapacity(_:)(v28);
  v29 = swift_bridgeObjectRetain();
  specialized ArraySlice.append<A>(contentsOf:)(v29);
  specialized ArraySlice.append<A>(contentsOf:)(v25, v25 + 32, 0, v8);
  swift_bridgeObjectRelease();
  swift_release();
  v30 = specialized static ArraySlice<A>.== infix(_:_:)(v60, v59, v58, *((uint64_t *)&v65 + 1), v66, *((unint64_t *)&v66 + 1));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v30 & 1) == 0)
  {
LABEL_18:
    v33 = *(_QWORD *)v12;
    if (*(_QWORD *)v12 >> 62)
    {
      swift_bridgeObjectRetain();
      v34 = _CocoaArrayWrapper.endIndex.getter();
      if (v34)
      {
LABEL_20:
        if ((v33 & 0xC000000000000001) != 0)
        {
          v34 = MEMORY[0x1DF0E4D64](0, v33);
        }
        else
        {
          if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_36;
          }
          v34 = *(_QWORD *)(v33 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v7 = *(_QWORD *)(v12 + 8);
        if (v7)
        {
LABEL_24:
          v8 = v7 & 0xFFFFFFFFFFFFFF8;
          if (!(v7 >> 62))
          {
            v25 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v25)
            {
LABEL_26:
              if ((v7 & 0xC000000000000001) != 0)
                goto LABEL_91;
              if (*(_QWORD *)(v8 + 16))
              {
                v35 = *(_QWORD *)(v7 + 32);
                swift_release();
                goto LABEL_29;
              }
              __break(1u);
              goto LABEL_93;
            }
            goto LABEL_37;
          }
LABEL_36:
          swift_bridgeObjectRetain();
          v25 = _CocoaArrayWrapper.endIndex.getter();
          if (v25)
            goto LABEL_26;
LABEL_37:
          swift_release();
          swift_bridgeObjectRelease();
LABEL_38:
          *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
          outlined init with take of ReflowSpacingAdjustment?(v16, (uint64_t)v63);
          if (!*(_QWORD *)&v63[0])
            goto LABEL_43;
          v65 = v63[0];
          v66 = v63[1];
          *(_OWORD *)v67 = v64[0];
          *(_OWORD *)&v67[10] = *(_OWORD *)((char *)v64 + 10);
          v36 = *(_QWORD *)v12;
          v37 = *(_QWORD *)&v63[0];
          outlined retain of ReflowSpacingAdjustment?(v16);
          swift_bridgeObjectRetain();
          v38 = specialized Sequence<>.contains(_:)(v37, v36);
          swift_bridgeObjectRelease();
          if ((v38 & 1) != 0 || (_OWORD *)v37 == a1)
            goto LABEL_54;
          while (1)
          {
            outlined release of ReflowSpacingAdjustment?(v16);
LABEL_43:
            v16 = 1;
            if (v7)
            {
              v39 = *(_QWORD *)v12;
              swift_bridgeObjectRetain();
              v40 = Array<A>.nonOverlappingElements.getter(v39);
              v41 = specialized static Array<A>.== infix(_:_:)(v40, v7);
              swift_bridgeObjectRelease();
              v42 = swift_bridgeObjectRelease();
              if ((v41 & 1) != 0
                && v17 == 100
                && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(v42) & 1) == 0)
              {
                v16 = 0;
              }
            }
            v13 = *(double *)(v12 + 40);
            v9 = *(double *)(v12 + 48);
            v10 = *(double *)(v12 + 56);
            v11 = *(double *)(v12 + 32);
            v43 = sqrt((v9 - v11) * (v9 - v11) + (v10 - v13) * (v10 - v13));
            v44 = (v9 - v11) / v43;
            a5 = sqrt((v11 + v44 * ((a5 - v11) / v44) - v11) * (v11 + v44 * ((a5 - v11) / v44) - v11)+ (v13 + (v10 - v13) / v43 * ((a5 - v11) / v44) - v13)* (v13 + (v10 - v13) / v43 * ((a5 - v11) / v44) - v13))- *(double *)(v12 + 24);
            if (a5 < 0.0)
            {
LABEL_87:
              __break(1u);
            }
            else
            {
              v62 = *(_QWORD *)v12;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v45 = swift_retain_n();
              MEMORY[0x1DF0E4398](v45);
              if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                goto LABEL_50;
            }
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_50:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
            v37 = Array<A>.nonOverlappingElements.getter(v62);
            swift_bridgeObjectRelease();
            if (!v7)
            {
              swift_bridgeObjectRelease();
LABEL_61:
              v62 = *(_QWORD *)v12;
              swift_retain_n();
              v50 = swift_bridgeObjectRetain();
              MEMORY[0x1DF0E4398](v50);
              if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_release();
              v25 = *(_QWORD *)(v12 + 152);
              v17 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v62, v17, v25, v16, 1, 1, 0, 0.0, a5, v11, v13, v9, v10, *(CGFloat *)(v12 + 16));
              v52 = v51;
              swift_bridgeObjectRelease();
              if (v52 >> 62)
              {
                swift_bridgeObjectRetain();
                v53 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                v53 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v53)
              {
                swift_bridgeObjectRelease();
                return 0;
              }
              v54 = swift_retain();
              MEMORY[0x1DF0E4398](v54);
              if (*(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
LABEL_93:
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v26 = *(_QWORD *)(v17 + 16);
              if (!v26)
              {
                swift_bridgeObjectRelease();
                return 1;
              }
              v12 = *(_QWORD *)v12;
              v60 = *(_OWORD *)(v17 + 32);
              v61 = *(_OWORD *)(v17 + 48);
              if (v12 >> 62)
              {
LABEL_100:
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v34 = _CocoaArrayWrapper.endIndex.getter();
                if (!v34)
                {
LABEL_80:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease_n();
                  return 1;
                }
              }
              else
              {
                v34 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (!v34)
                  goto LABEL_80;
              }
              a1 = 0;
              a5 = (double)v25;
              v16 = v12 & 0xC000000000000001;
              v7 = v17 + 80;
              v55 = (_OWORD *)(v26 - 1);
              while (1)
              {
                if (v16)
                {
                  v56 = MEMORY[0x1DF0E4D64](a1, v12);
                }
                else
                {
                  if ((unint64_t)a1 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    __break(1u);
LABEL_91:
                    v35 = MEMORY[0x1DF0E4D64](0, v7);
                    swift_release();
                    swift_unknownObjectRelease();
LABEL_29:
                    swift_bridgeObjectRelease();
                    if (v34 != v35)
                      goto LABEL_38;
                    goto LABEL_39;
                  }
                  v56 = swift_retain();
                }
                *(_OWORD *)(v56 + 48) = v60;
                *(_OWORD *)(v56 + 64) = v61;
                *(double *)(v56 + 80) = a5;
                swift_release();
                if (v55 == a1)
                  goto LABEL_80;
                if ((unint64_t)a1 + 1 >= *(_QWORD *)(v17 + 16))
                {
                  __break(1u);
                  goto LABEL_87;
                }
                v60 = *(_OWORD *)(v7 - 16);
                v61 = *(_OWORD *)v7;
                a1 = (_OWORD *)((char *)a1 + 1);
                v7 += 32;
                if ((_OWORD *)v34 == a1)
                  goto LABEL_80;
              }
            }
            v46 = swift_bridgeObjectRetain();
            v47 = specialized static Array<A>.== infix(_:_:)(v46, v37);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            if ((v47 & 1) == 0)
              goto LABEL_61;
            a5 = a5 + 2.0;
            if (a5 >= 0.0)
              goto LABEL_61;
            __break(1u);
LABEL_54:
            if ((v67[24] & 1) != 0)
              goto LABEL_59;
            v48 = *(_QWORD *)(v12 + 152);
            if (v48 < *(uint64_t *)&v67[16] && ((_OWORD *)v37 != a1 || (BYTE8(v65) & 1) == 0))
            {
              outlined release of ReflowSpacingAdjustment?(v16);
              return 0;
            }
            if (*(_QWORD *)&v67[16] == v48)
            {
LABEL_59:
              v49 = ReflowTextLine.addWithSpacingAdjustment(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)((uint64_t)a1, v17, (uint64_t)&v65, a4, a5, v13);
              outlined release of ReflowSpacingAdjustment?(v16);
              return v49;
            }
          }
        }
LABEL_33:
        swift_release();
        goto LABEL_38;
      }
    }
    else
    {
      v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v34)
        goto LABEL_20;
    }
    swift_bridgeObjectRelease();
    swift_retain();
    v34 = (uint64_t)a1;
    v7 = *(_QWORD *)(v12 + 8);
    if (v7)
      goto LABEL_24;
    goto LABEL_33;
  }
  v31 = swift_retain();
  MEMORY[0x1DF0E4398](v31);
  if (*(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v12 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v32 = a1[2];
  a1[3] = a1[1];
  a1[4] = v32;
  return 1;
}

__C::CGRect __swiftcall ReflowTextLine.caretRect(at:)(CGPoint at)
{
  double *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  __C::CGRect result;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[7];
  v5 = v1[6] - v2;
  v6 = ((at.x - v2) * v5 + (at.y - v3) * (v4 - v3)) / (v5 * v5 + (v4 - v3) * (v4 - v3));
  v7 = v5 * v6;
  v8 = (v4 - v3) * v6;
  v9 = v2 + v7;
  v10 = v3 + v8;
  v11 = (v3 + v4) * 0.5 - (v1[9] + v1[11]) * 0.5;
  v12 = v10 - v11;
  v13 = 0.0;
  result.size.height = v11;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v9;
  return result;
}

uint64_t ReflowTextLine.textSize.getter()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double Height;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t result;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  unint64_t v22;
  CGRect v23;

  v1 = *v0;
  v22 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
LABEL_17:
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2)
    goto LABEL_17;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return swift_once();
  }
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      MEMORY[0x1DF0E4D64](v3, v1);
    else
      swift_retain();
    type metadata accessor for ReflowWord();
    v5 = swift_dynamicCastClass();
    if (v5)
    {
      v6 = *(double *)(v5 + 184);
      v7 = *(double *)(v5 + 200);
      v8 = *(double *)(v5 + 152);
      v9 = *(double *)(v5 + 168);
      objc_msgSend(*(id *)(v5 + 272), sel__canvasBounds);
      Height = CGRectGetHeight(v23);
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
      v12 = v4[2];
      v11 = v4[3];
      if (v12 >= v11 >> 1)
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
      v4[2] = v12 + 1;
      *(double *)&v4[v12 + 4] = ((v6 + v7) * 0.5 - (v8 + v9) * 0.5) * Height;
    }
    else
    {
      swift_release();
    }
    ++v3;
  }
  while (v2 != v3);
LABEL_18:
  outlined release of [ReflowElement]((uint64_t)&v22);
  outlined release of [ReflowElement]((uint64_t)&v22);
  v13 = v4[2];
  if (v13)
  {
    if (v13 == 1)
    {
      v14 = 0;
      v15 = 0.0;
    }
    else
    {
      v14 = v13 & 0x7FFFFFFFFFFFFFFELL;
      v17 = (double *)(v4 + 5);
      v15 = 0.0;
      v18 = v13 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(v17 - 1) + *v17;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      if (v13 == v14)
        return swift_bridgeObjectRelease();
    }
    v19 = v13 - v14;
    v20 = (double *)&v4[v14 + 4];
    do
    {
      v21 = *v20++;
      v15 = v15 + v21;
      --v19;
    }
    while (v19);
    return swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  if (one-time initialization token for handwritingReflowDefaultTextSize != -1)
    return swift_once();
  return result;
}

uint64_t specialized Sequence.dropLast(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;

  if (result < 0)
    goto LABEL_30;
  v2 = a2;
  v3 = result;
  if (!result)
    return v2;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    swift_bridgeObjectRelease();
    swift_release();
    return v9;
  }
  v5 = 0;
  v6 = 0;
  v16 = a2 + 32;
  v7 = v4 - 1;
  v8 = MEMORY[0x1E0DEE9D8];
  v9 = MEMORY[0x1E0DEE9D8];
  do
  {
    v17 = *(_OWORD *)(v16 + 16 * v5);
    v12 = *(_QWORD *)(v8 + 16);
    if (v12 < v3)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1);
      v11 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      if (v11 >= v10 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v8 + 16) = v11 + 1;
      *(_OWORD *)(v8 + 16 * v11 + 32) = v17;
LABEL_8:
      if (v7 == v5)
        goto LABEL_25;
      goto LABEL_9;
    }
    if (v6 >= v12)
      goto LABEL_28;
    v15 = *(_OWORD *)(v8 + 16 * v6 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
    v14 = *(_QWORD *)(v9 + 16);
    v13 = *(_QWORD *)(v9 + 24);
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v9 + 16) = v14 + 1;
    *(_OWORD *)(v9 + 16 * v14 + 32) = v15;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v8);
      v8 = result;
    }
    if (v6 >= *(_QWORD *)(v8 + 16))
      goto LABEL_29;
    *(_OWORD *)(v8 + 16 * v6++ + 32) = v17;
    if ((uint64_t)v6 < v3)
      goto LABEL_8;
    if (v7 == v5)
      goto LABEL_25;
    v6 = 0;
LABEL_9:
    ++v5;
  }
  while (v5 < *(_QWORD *)(v2 + 16));
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.dropLast(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v2 = a2;
  v3 = a1;
  if (a1)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    v21 = MEMORY[0x1E0DEE9D8];
    if (!(a2 >> 62))
    {
      v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
LABEL_5:
        if ((v2 & 0xC000000000000001) != 0)
        {
          v5 = MEMORY[0x1DF0E4D64](0, v2);
          v6 = 0;
          v7 = 1;
          while (1)
          {
            v9 = *(_QWORD *)(v20 + 16);
            if ((uint64_t)v9 < v3)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              if (v6 >= v9)
                goto LABEL_36;
              swift_retain();
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
              if (v6 >= *(_QWORD *)(v20 + 16))
                goto LABEL_37;
              swift_release();
              *(_QWORD *)(v20 + 8 * v6 + 32) = v5;
              specialized ContiguousArray._endMutation()();
              if ((uint64_t)++v6 >= v3)
              {
                if (v4 == v7)
                  goto LABEL_42;
                v6 = 0;
                goto LABEL_9;
              }
            }
            if (v4 == v7)
              goto LABEL_42;
LABEL_9:
            v5 = MEMORY[0x1DF0E4D64](v7, v2);
            if (__OFADD__(v7++, 1))
            {
              __break(1u);
LABEL_35:
              __break(1u);
LABEL_36:
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
          }
        }
        v11 = v2 & 0xFFFFFFFFFFFFFF8;
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_35;
        v12 = 0;
        v13 = 0;
        v14 = v4 - 1;
        v19 = v2;
        while (1)
        {
          v15 = *(_QWORD *)(v2 + 8 * v12 + 32);
          v16 = *(_QWORD *)(v20 + 16);
          if ((uint64_t)v16 < v3)
            break;
          if (v13 >= v16)
            goto LABEL_38;
          v2 = v14;
          swift_retain();
          swift_retain();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
          if (v13 >= *(_QWORD *)(v20 + 16))
          {
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          swift_release();
          *(_QWORD *)(v20 + 8 * v13 + 32) = v15;
          specialized ContiguousArray._endMutation()();
          ++v13;
          v2 = v19;
          if ((uint64_t)v13 < v3)
            goto LABEL_24;
          if (v14 == v12)
            goto LABEL_42;
          v13 = 0;
LABEL_25:
          if ((unint64_t)++v12 >= *(_QWORD *)(v11 + 16))
            goto LABEL_35;
        }
        swift_retain();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_24:
        if (v14 == v12)
          goto LABEL_42;
        goto LABEL_25;
      }
      goto LABEL_42;
    }
LABEL_41:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_5;
LABEL_42:
    swift_bridgeObjectRelease();
    v10 = v21;
    swift_release();
    return v10;
  }
  if ((a2 & 0x8000000000000000) != 0 || (a2 & 0x4000000000000000) != 0)
  {
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a2);
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
  return a2 & 0xFFFFFFFFFFFFFF8;
}

uint64_t Array<A>.nonOverlappingElements.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_48;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    return MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v7 = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
LABEL_52:
      v8 = MEMORY[0x1DF0E4D64](v6 - 1, a1);
      v6 = v8;
      goto LABEL_8;
    }
    v3 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
      goto LABEL_52;
    if ((v7 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v7 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_54;
    v6 = *(_QWORD *)(a1 + 8 * v7 + 32);
    v8 = swift_retain();
LABEL_8:
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v8);
    swift_release();
    if ((v1 & 1) == 0)
      break;
    if (v7)
    {
      v1 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v9 = __OFSUB__(v7--, 1);
        if (v9)
          break;
        if (v3)
        {
          v6 = MEMORY[0x1DF0E4D64](v7, a1);
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_46;
          if (v7 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_47;
          v6 = *(_QWORD *)(a1 + 32 + 8 * v7);
          swift_retain();
        }
        v2 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 136))();
        swift_release();
        if ((v2 & 1) == 0)
          goto LABEL_20;
        if (!v7)
          return v1;
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6)
        continue;
    }
    return MEMORY[0x1E0DEE9D8];
  }
LABEL_20:
  v9 = __OFADD__(v7++, 1);
  if (v9)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (!v5)
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter() < 0)
    goto LABEL_58;
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_29:
  if (v6 < (uint64_t)v7)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v3)
  {
    type metadata accessor for ReflowElement();
    v10 = 0;
    do
    {
      v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      v10 = v11;
    }
    while (v7 != v11);
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.subscript.getter();
    v2 = v12;
    v1 = v13;
    v7 = v14;
    swift_bridgeObjectRelease_n();
    if ((v7 & 1) != 0)
      goto LABEL_38;
LABEL_37:
    v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v6, v2, v1, v7);
    goto LABEL_44;
  }
  v1 = 0;
  v6 = a1 & 0xFFFFFFFFFFFFFF8;
  v2 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  v7 = (2 * v7) | 1;
  if ((v7 & 1) == 0)
    goto LABEL_37;
LABEL_38:
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v16 = *(_QWORD *)(v15 + 16);
  swift_release();
  if (__OFSUB__(v7 >> 1, v1))
    goto LABEL_59;
  if (v16 != (v7 >> 1) - v1)
  {
LABEL_60:
    swift_unknownObjectRelease();
    goto LABEL_37;
  }
  v1 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (v1)
    return v1;
  v1 = MEMORY[0x1E0DEE9D8];
LABEL_44:
  swift_unknownObjectRelease();
  return v1;
}

BOOL ReflowTextLine.addWithSpacingAdjustment(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(uint64_t a1, uint64_t a2, uint64_t IsNativeType, uint64_t a4, double a5, CGFloat a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  double *i;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  uint64_t v58;
  __int128 *v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::Int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t inited;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  int64_t v78;
  BOOL v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  Swift::Int v98;
  uint64_t v99;
  Swift::Int v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  Swift::Int v116;
  Swift::Int v117;
  uint64_t v118;
  unint64_t v119;
  Swift::Int v120;
  Swift::Int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  Swift::Int v139;
  Swift::Int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 *v154;
  unint64_t v155;
  double MinX;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  Swift::Int v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  Swift::Int v179;
  Swift::Int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  int64_t v193;
  double v194;
  double *v195;
  CGFloat v196;
  CGFloat v197;
  CGFloat v198;
  CGFloat v199;
  double v200;
  double v201;
  CGFloat v202;
  double v203;
  double v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 *v211;
  uint64_t v212;
  uint64_t v213;
  CGFloat v214;
  double v215;
  double v216;
  uint64_t v217;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  _WORD v225[13];
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;

  v16 = (unint64_t)v6;
  *(_QWORD *)&v223 = *v6;
  swift_retain_n();
  v22 = swift_bridgeObjectRetain();
  MEMORY[0x1DF0E4398](v22);
  if (*(_QWORD *)((v223 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v223 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v23 = v223;
  v217 = a1;
  swift_release();
  v24 = (unint64_t)v223 >> 62;
  if (!((unint64_t)v223 >> 62))
  {
    v25 = *(_QWORD *)((v223 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v25)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  if (!v25)
    goto LABEL_17;
LABEL_5:
  if ((v223 & 0xC000000000000001) != 0)
  {
    v89 = MEMORY[0x1DF0E4D64](0, v223);
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)IsNativeType;
    swift_unknownObjectRelease();
    if (v89 != v7)
      goto LABEL_18;
    goto LABEL_8;
  }
  if (!*(_QWORD *)((v223 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_92;
  }
  v26 = *(_QWORD *)(v223 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)IsNativeType;
  swift_release();
  if (v26 == v7)
  {
LABEL_8:
    if ((*(_BYTE *)(IsNativeType + 8) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v27 = *(double *)(IsNativeType + 32);
      v28 = a5 - *(double *)(v16 + 24);
      if (v28 <= v27)
        goto LABEL_349;
      v29 = *(double *)(v16 + 16);
      if (v29 > v27)
        v27 = *(double *)(v16 + 16);
      if (v27 > v28)
        goto LABEL_405;
      v30 = v217;
      if (v29 < v27)
        return specialized ReflowTextLine.addLayoutAndApply(_:textScalePercentage:span:headIndent:canCompress:canOverflow:isWholeLine:)(v27, v28, 0.0, v217, a2);
      v224 = 0u;
      memset(v225, 0, sizeof(v225));
      v223 = 0u;
LABEL_39:
      v44 = ReflowTextLine.add(_:textScalePercentage:spacingAdjustment:maxWidth:previousLine:adjustment:)(v30, a2, &v223, a4, a5, a6);
      return v44 & 1;
    }
  }
LABEL_18:
  v7 = *(_QWORD *)(v16 + 8);
  if (!v7)
    goto LABEL_94;
  v8 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)v7 >> 62))
  {
    v32 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v32)
      goto LABEL_21;
LABEL_93:
    swift_bridgeObjectRelease();
    goto LABEL_94;
  }
LABEL_92:
  swift_bridgeObjectRetain();
  v32 = _CocoaArrayWrapper.endIndex.getter();
  if (!v32)
    goto LABEL_93;
LABEL_21:
  v33 = v32 - 1;
  if (__OFSUB__(v32, 1))
    goto LABEL_368;
  if ((v7 & 0xC000000000000001) != 0)
    goto LABEL_369;
  if ((v33 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_372;
  }
  if (v33 >= *(_QWORD *)(v8 + 16))
  {
LABEL_372:
    __break(1u);
    goto LABEL_373;
  }
  v8 = *(_QWORD *)(v7 + 8 * v33 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  v34 = *(_QWORD *)IsNativeType;
  swift_release();
  if (v8 != v34)
    goto LABEL_94;
LABEL_26:
  if (*(_BYTE *)(IsNativeType + 8) == 1)
  {
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)v16;
    swift_bridgeObjectRetain();
    outlined retain of ReflowSpacingAdjustment?(IsNativeType);
    v25 = specialized Collection<>.firstIndex(of:)(v8, v23);
    v36 = v35;
    outlined release of ReflowSpacingAdjustment?(IsNativeType);
    v37 = swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
    {
      v224 = 0u;
      memset(v225, 0, sizeof(v225));
      v223 = 0u;
      v30 = v217;
      goto LABEL_39;
    }
    v15 = *(double *)(IsNativeType + 32);
    a6 = *(double *)(IsNativeType + 16);
    if (a6 <= v15)
    {
      v23 = v217;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 136))(v37) & 1) == 0)
        goto LABEL_349;
    }
    if ((*(_QWORD *)v16 & 0xC000000000000001) != 0)
      goto LABEL_409;
    if (v25 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v25 < *(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      for (i = (double *)swift_retain(); ; i = (double *)MEMORY[0x1DF0E4D64](v25))
      {
        v11 = i[2];
        v12 = i[3];
        v13 = i[4];
        v14 = i[5];
        swift_release();
        v226.origin.x = v11;
        v226.origin.y = v12;
        v226.size.width = v13;
        v226.size.height = v14;
        if (CGRectGetMaxX(v226) > v15)
          break;
        if (v25 < 0)
          goto LABEL_419;
        v23 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_421;
        v45 = *(_QWORD *)v16;
        specialized Array._checkIndex(_:)(0, *(_QWORD *)v16);
        specialized Array._checkIndex(_:)(v25 + 1, v45);
        v23 = specialized _ArrayBuffer.subscript.getter(0, v25 + 1, v45);
        v49 = specialized Array.init<A>(_:)(v23, v46, v47, v48);
        swift_unknownObjectRelease();
        v50 = a5 - *(double *)(v16 + 24);
        if (v50 < 0.0)
          goto LABEL_422;
        v9 = *(_QWORD *)(v16 + 152);
        v10 = *(double *)(v16 + 32);
        v11 = *(double *)(v16 + 40);
        v12 = *(double *)(v16 + 48);
        v13 = *(double *)(v16 + 56);
        v23 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v49, a2, v9, 1, 0, 0, 0, 0.0, v50, v10, v11, v12, v13, *(CGFloat *)(v16 + 16));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = *(_QWORD *)v16;
        v51 = specialized Array._getCount()(v23);
        if (!v51)
          goto LABEL_53;
        v52 = v51;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v23);
        v219 = *(_OWORD *)(v23 + 32);
        v221 = *(_OWORD *)(v23 + 48);
        swift_bridgeObjectRetain();
        v53 = swift_bridgeObjectRetain();
        v54 = specialized Array._getCount()(v53);
        if (v54)
        {
          v55 = v54;
          v215 = *(double *)&v9;
          v216 = *(double *)&v16;
          v56 = (double)v9;
          IsNativeType = specialized Array._hoistableIsNativeTypeChecked()(v7);
          v57 = 0;
          v24 = v7 + 32;
          v16 = v23 + 64;
          a4 = v52 - 1;
          do
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v57, IsNativeType & 1, v7);
            if ((IsNativeType & 1) != 0)
              v58 = swift_retain();
            else
              v58 = MEMORY[0x1DF0E4D64](v57, v7);
            *(_OWORD *)(v58 + 48) = v219;
            *(_OWORD *)(v58 + 64) = v221;
            *(double *)(v58 + 80) = v56;
            swift_release();
            if (a4 == v57)
              break;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v57 + 1, 1, v23);
            if (__OFADD__(v57 + 1, 1))
              goto LABEL_402;
            v59 = (__int128 *)(v16 + 32 * v57);
            v219 = *v59;
            v221 = v59[1];
            ++v57;
          }
          while (v55 != v57);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v9 = *(_QWORD *)&v215;
          v16 = *(_QWORD *)&v216;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }
LABEL_54:
        if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
LABEL_412:
          swift_once();
        v60 = v15 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth;
        if (v15 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth >= a6)
          v60 = a6;
        if (v60 < 0.0)
          v14 = 0.0;
        else
          v14 = v60;
        if (v14 > a6)
        {
          __break(1u);
LABEL_414:
          __break(1u);
LABEL_415:
          __break(1u);
          goto LABEL_416;
        }
        v23 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_414;
        v61 = *(_QWORD *)v16;
        v62 = specialized Array._getCount()(*(_QWORD *)v16);
        v24 = v217;
        if (v62 < v23)
          goto LABEL_415;
        v63 = v62;
        specialized Array._checkIndex(_:)(v25 + 1, v61);
        specialized Array._checkIndex(_:)(v63, v61);
        v64 = specialized _ArrayBuffer.subscript.getter(v25 + 1, v63, v61);
        v66 = v65;
        v68 = v67;
        v70 = v69;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        inited = swift_initStackObject();
        v72 = specialized static Array._adoptStorage(_:count:)(inited, 1);
        *v73 = v217;
        specialized _finalizeUninitializedArray<A>(_:)();
        v74 = v72;
        *(_QWORD *)&v223 = v64;
        *((_QWORD *)&v223 + 1) = v66;
        *(_QWORD *)&v224 = v68;
        *((_QWORD *)&v224 + 1) = v70;
        swift_retain();
        v23 = (uint64_t)&v223;
        v75 = specialized ArraySlice.append<A>(contentsOf:)(v74);
        v7 = *((_QWORD *)&v223 + 1);
        v76 = v223;
        IsNativeType = *((_QWORD *)&v224 + 1);
        v24 = v224;
        v25 = *((_QWORD *)&v224 + 1) >> 1;
        if ((_QWORD)v224 == *((_QWORD *)&v224 + 1) >> 1)
        {
          v77 = v224;
LABEL_73:
          v79 = v25 < v77;
          v25 = v77;
          if (!v79)
          {
LABEL_74:
            if (v25 >= v24)
            {
              v7 = specialized Array.init<A>(_:)(v76, v7, v25, IsNativeType);
              swift_unknownObjectRelease();
              v80 = swift_bridgeObjectRetain();
              v81 = specialized Array._getCount()(v80);
              swift_bridgeObjectRelease();
              if (!v81)
                goto LABEL_360;
              IsNativeType = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v7, a2, v9, 1, 1, 1, 0, v14, a6, v10, v11, v12, v13, 0.0);
              v83 = specialized Array._getCount()(v82);
              swift_bridgeObjectRelease();
              if (!v83)
              {
                v84 = swift_retain();
                MEMORY[0x1DF0E4398](v84);
                specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8)
                                                                                            + 0x10));
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                v85 = specialized Array._getCount()(IsNativeType);
                if (v85)
                {
                  v86 = v85;
                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, IsNativeType);
                  v219 = *(_OWORD *)(IsNativeType + 32);
                  v221 = *(_OWORD *)(IsNativeType + 48);
                  v10 = (double)v9;
                  v24 = specialized Array._hoistableIsNativeTypeChecked()(v7);
                  a4 = v7 + 32;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v23 = 0;
                  v25 = IsNativeType + 64;
                  do
                  {
                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v23, v24 & 1, v7);
                    if ((v24 & 1) != 0)
                      v87 = swift_retain();
                    else
                      v87 = MEMORY[0x1DF0E4D64](v23, v7);
                    *(_OWORD *)(v87 + 48) = v219;
                    *(_OWORD *)(v87 + 64) = v221;
                    *(double *)(v87 + 80) = v10;
                    swift_release();
                    if (v86 - 1 == v23)
                      break;
                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v23 + 1, 1, IsNativeType);
                    if (__OFADD__(v23 + 1, 1))
                      goto LABEL_406;
                    v88 = (__int128 *)(v25 + 32 * v23);
                    v219 = *v88;
                    v221 = v88[1];
                    ++v23;
                  }
                  while (v81 != v23);
                  goto LABEL_358;
                }
                swift_bridgeObjectRelease();
                goto LABEL_360;
              }
              goto LABEL_240;
            }
LABEL_417:
            __break(1u);
LABEL_418:
            __break(1u);
LABEL_419:
            __break(1u);
LABEL_420:
            __break(1u);
LABEL_421:
            __break(1u);
LABEL_422:
            __break(1u);
LABEL_423:
            __break(1u);
LABEL_424:
            __break(1u);
LABEL_425:
            __break(1u);
LABEL_426:
            __break(1u);
            goto LABEL_427;
          }
LABEL_416:
          __break(1u);
          goto LABEL_417;
        }
        if ((uint64_t)v224 >= *((_QWORD *)&v224 + 1) >> 1)
          goto LABEL_423;
        v23 = *(_QWORD *)(*((_QWORD *)&v223 + 1) + 8 * v224);
        v77 = v224;
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v75) & 1) == 0)
          goto LABEL_73;
        v77 = v24 + 1;
        if (v24 + 1 == v25)
          goto LABEL_74;
        while (v77 < v25)
        {
          v23 = *(_QWORD *)(v7 + 8 * v77);
          if (((*(uint64_t (**)(void))(*(_QWORD *)v23 + 136))() & 1) == 0)
            goto LABEL_73;
          v78 = v77 + 1;
          if (__OFADD__(v77, 1))
            goto LABEL_408;
          ++v77;
          if (v78 == v25)
            goto LABEL_74;
        }
LABEL_407:
        __break(1u);
LABEL_408:
        __break(1u);
LABEL_409:
        ;
      }
      if (v25 < 0)
        goto LABEL_418;
      v23 = v25 + 1;
      if (__OFADD__(v25, 1))
        goto LABEL_420;
      v39 = *(_QWORD *)v16;
      specialized Array._checkIndex(_:)(0, *(_QWORD *)v16);
      specialized Array._checkIndex(_:)(v25 + 1, v39);
      v23 = specialized _ArrayBuffer.subscript.getter(0, v25 + 1, v39);
      v43 = specialized Array.init<A>(_:)(v23, v40, v41, v42);
      swift_unknownObjectRelease();
      v9 = *(_QWORD *)(v16 + 152);
      v10 = *(double *)(v16 + 32);
      v11 = *(double *)(v16 + 40);
      v12 = *(double *)(v16 + 48);
      v13 = *(double *)(v16 + 56);
      specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(v43, a2, IsNativeType, v9, a4, v10, v11, v12, v13);
LABEL_53:
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    __break(1u);
    goto LABEL_412;
  }
  while (1)
  {
LABEL_94:
    v14 = *(double *)(IsNativeType + 32);
    v10 = *(double *)(IsNativeType + 16);
    v90 = *(_QWORD *)IsNativeType;
    outlined retain of ReflowSpacingAdjustment?(IsNativeType);
    v91 = specialized Collection<>.firstIndex(of:)(v90, v23);
    v7 = v92;
    outlined release of ReflowSpacingAdjustment?(IsNativeType);
    if (v14 >= v10)
    {
      if ((v7 & 1) != 0)
        goto LABEL_425;
      v95 = *(unsigned __int8 *)(IsNativeType + 8);
      IsNativeType = v91 + v95;
      if (__OFADD__(v91, v95))
        goto LABEL_286;
      if (IsNativeType < 0)
        goto LABEL_288;
      if (v24)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v7 < 0)
          goto LABEL_378;
        swift_bridgeObjectRetain();
        v96 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v96 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v96 < IsNativeType)
        goto LABEL_290;
      v9 = v23 & 0xC000000000000001;
      if ((v23 & 0xC000000000000001) != 0 && IsNativeType)
      {
        type metadata accessor for ReflowElement();
        v100 = 0;
        do
        {
          v101 = v100 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v100);
          v100 = v101;
        }
        while (IsNativeType != v101);
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.subscript.getter();
        v102 = v107;
        a4 = v108;
        v103 = v109;
        swift_bridgeObjectRelease();
      }
      else
      {
        v7 = v23 & 0xFFFFFFFFFFFFFF8;
        v102 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
        v103 = (2 * IsNativeType) | 1;
        swift_bridgeObjectRetain();
        a4 = 0;
      }
      v8 = specialized Array.init<A>(_:)(v7, v102, a4, v103);
      swift_unknownObjectRelease();
      if (v24)
      {
        swift_bridgeObjectRetain();
        v112 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (IsNativeType >= v112)
          goto LABEL_128;
      }
      else if (IsNativeType >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_128:
        swift_bridgeObjectRelease();
        IsNativeType = MEMORY[0x1E0DEE9D8];
LABEL_166:
        v24 = (unint64_t)IsNativeType >> 62;
        if ((unint64_t)IsNativeType >> 62)
          goto LABEL_291;
        a4 = *(_QWORD *)((IsNativeType & 0xFFFFFFFFFFFFF8) + 0x10);
        if (a4)
          goto LABEL_168;
        v25 = 0;
        goto LABEL_202;
      }
      if (v25 < IsNativeType)
        goto LABEL_380;
      if (v24)
      {
        swift_bridgeObjectRetain();
        v113 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v113 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      if (v113 < v25)
      {
        __break(1u);
LABEL_384:
        __break(1u);
LABEL_385:
        __break(1u);
LABEL_386:
        __break(1u);
        goto LABEL_387;
      }
      if (v9 && IsNativeType != v25)
      {
        if (IsNativeType >= v25)
          goto LABEL_398;
        type metadata accessor for ReflowElement();
        v116 = IsNativeType;
        do
        {
          v117 = v116 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v116);
          v116 = v117;
        }
        while (v25 != v117);
      }
      if (v24)
      {
        swift_bridgeObjectRetain();
        v7 = _CocoaArrayWrapper.subscript.getter();
        v118 = v124;
        IsNativeType = v125;
        v119 = v126;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v7 = v23 & 0xFFFFFFFFFFFFFF8;
        v118 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
        v119 = (2 * v25) | 1;
      }
      IsNativeType = specialized Array.init<A>(_:)(v7, v118, IsNativeType, v119);
      swift_unknownObjectRelease();
      goto LABEL_166;
    }
    *(_QWORD *)&v221 = a4;
    if ((v7 & 1) != 0)
      goto LABEL_424;
    v93 = *(unsigned __int8 *)(IsNativeType + 8);
    a4 = v91 + v93;
    if (__OFADD__(v91, v93))
      goto LABEL_285;
    if (a4 < 0)
      goto LABEL_287;
    if (v24)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7 < 0)
        goto LABEL_377;
      swift_bridgeObjectRetain();
      v94 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v94 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v94 < a4)
    {
      while (1)
      {
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        swift_bridgeObjectRetain();
        a4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (a4)
        {
LABEL_168:
          if ((IsNativeType & 0xC000000000000001) != 0)
          {
LABEL_373:
            swift_bridgeObjectRetain();
            v127 = MEMORY[0x1DF0E4D64](0, IsNativeType);
            v128 = swift_bridgeObjectRelease();
          }
          else
          {
            v127 = *(_QWORD *)(IsNativeType + 32);
            v128 = swift_retain();
          }
          v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 136))(v128);
          swift_release();
          if ((v129 & 1) != 0)
          {
            if (a4 == 1)
            {
              v25 = 1;
              if (!v24)
                goto LABEL_202;
            }
            else
            {
              v7 = specialized Array._hoistableIsNativeTypeChecked()(IsNativeType);
              v9 = 5;
              while (1)
              {
                v25 = v9 - 4;
                if ((v7 & 1) != 0)
                {
                  v23 = *(_QWORD *)(IsNativeType + 8 * v9);
                  v136 = swift_retain();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  v23 = MEMORY[0x1DF0E4D64](v9 - 4, IsNativeType);
                  v136 = swift_bridgeObjectRelease();
                }
                v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v136);
                swift_release();
                if ((v137 & 1) == 0)
                  break;
                v138 = v9 - 3;
                if (__OFADD__(v25, 1))
                  goto LABEL_282;
                ++v9;
                if (v138 == a4)
                {
                  v25 = a4;
                  break;
                }
              }
              if (a4 < v25)
                goto LABEL_403;
              if (!v24)
              {
LABEL_202:
                if (*(_QWORD *)((IsNativeType & 0xFFFFFFFFFFFFF8) + 0x10) < v25)
                  goto LABEL_294;
                goto LABEL_203;
              }
            }
          }
          else
          {
            if (a4 < 0)
              goto LABEL_394;
            v25 = 0;
            if (!v24)
              goto LABEL_202;
          }
        }
        else
        {
          v25 = 0;
        }
        swift_bridgeObjectRetain();
        v176 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v176 < v25)
        {
LABEL_294:
          __break(1u);
          goto LABEL_295;
        }
LABEL_203:
        if (v25 < 0)
          goto LABEL_299;
        if (v24)
        {
          swift_bridgeObjectRetain();
          v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v23 = *(_QWORD *)((IsNativeType & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v23 < a4)
          goto LABEL_301;
        if (a4 < 0)
          goto LABEL_303;
        if ((IsNativeType & 0xC000000000000001) != 0 && v25 != a4)
        {
          if (v25 >= (unint64_t)a4)
            goto LABEL_385;
          type metadata accessor for ReflowElement();
          v139 = v25;
          do
          {
            v140 = v139 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v139);
            v139 = v140;
          }
          while (a4 != v140);
        }
        if (v24)
        {
          swift_bridgeObjectRetain();
          v141 = _CocoaArrayWrapper.subscript.getter();
          v142 = v144;
          v25 = v145;
          v143 = v146;
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v141 = IsNativeType & 0xFFFFFFFFFFFFFF8;
          v142 = (IsNativeType & 0xFFFFFFFFFFFFFF8) + 32;
          v143 = (2 * a4) | 1;
        }
        IsNativeType = specialized Array.init<A>(_:)(v141, v142, v25, v143);
        swift_unknownObjectRelease();
        if (v14 < 0.0)
          v147 = 0.0;
        else
          v147 = v14;
        a4 = *(_QWORD *)(v16 + 152);
        a6 = *(double *)(v16 + 32);
        v11 = *(double *)(v16 + 40);
        v12 = *(double *)(v16 + 48);
        v13 = *(double *)(v16 + 56);
        v148 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v8, a2, a4, 1, 0, 0, 0, 0.0, v147, a6, v11, v12, v13, *(CGFloat *)(v16 + 16));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = *(_QWORD *)v16;
        v149 = specialized Array._getCount()(v148);
        if (!v149)
        {
          swift_bridgeObjectRelease();
          goto LABEL_232;
        }
        v150 = v149;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v148);
        v219 = *(_OWORD *)(v148 + 32);
        v221 = *(_OWORD *)(v148 + 48);
        swift_bridgeObjectRetain();
        v151 = swift_bridgeObjectRetain();
        v152 = specialized Array._getCount()(v151);
        if (!v152)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_232:
          v155 = swift_bridgeObjectRetain();
          v8 = specialized Array._getCount()(v155);
          swift_bridgeObjectRelease();
          v24 = v217;
          if (!v8)
          {
            swift_bridgeObjectRelease();
            v159 = swift_retain();
            MEMORY[0x1DF0E4398](v159);
            specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8)
                                                                                        + 0x10));
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_361;
          }
          v10 = a5 - *(double *)(v16 + 24);
          if (v10 < v14)
            goto LABEL_348;
          *(double *)&v221 = v11;
          v7 = specialized Array._hoistableIsNativeTypeChecked()(IsNativeType);
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v7 & 1, IsNativeType);
          v214 = a6;
          v11 = v14;
          if ((v7 & 1) != 0)
          {
            v23 = *(_QWORD *)(IsNativeType + 32);
            swift_retain();
            goto LABEL_236;
          }
LABEL_396:
          swift_bridgeObjectRetain();
          v23 = MEMORY[0x1DF0E4D64](0, IsNativeType);
          swift_bridgeObjectRelease();
LABEL_236:
          v14 = *(double *)(v23 + 16);
          v15 = *(double *)(v23 + 24);
          a5 = *(double *)(v23 + 32);
          a6 = *(double *)(v23 + 40);
          swift_release();
          v227.origin.x = v14;
          v227.origin.y = v15;
          v227.size.width = a5;
          v227.size.height = a6;
          MinX = CGRectGetMinX(v227);
          if (MinX <= v11)
            MinX = v11;
          if (MinX <= v10)
          {
            v25 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(IsNativeType, a2, a4, 1, 1, 0, 0, MinX, v10, v214, *(double *)&v221, v12, v13, 0.0);
            v158 = specialized Array._getCount()(v157);
            swift_bridgeObjectRelease();
            if (!v158)
            {
              v171 = swift_retain();
              MEMORY[0x1DF0E4398](v171);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFF8)
                                                                                          + 0x10));
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              v172 = specialized Array._getCount()(v25);
              if (!v172)
                goto LABEL_359;
              v173 = v172;
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v25);
              v219 = *(_OWORD *)(v25 + 32);
              v221 = *(_OWORD *)(v25 + 48);
              v10 = (double)a4;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v24 = 0;
              v9 = v173 - 1;
              do
              {
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, v7 & 1, IsNativeType);
                if ((v7 & 1) != 0)
                  v174 = swift_retain();
                else
                  v174 = MEMORY[0x1DF0E4D64](v24, IsNativeType);
                *(_OWORD *)(v174 + 48) = v219;
                *(_OWORD *)(v174 + 64) = v221;
                *(double *)(v174 + 80) = v10;
                swift_release();
                if (v9 == v24)
                  break;
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24 + 1, 1, v25);
                if (__OFADD__(v24 + 1, 1))
                  goto LABEL_284;
                v175 = (__int128 *)(v25 + 64 + 32 * v24);
                v219 = *v175;
                v221 = v175[1];
                ++v24;
              }
              while (v8 != v24);
LABEL_358:
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              goto LABEL_361;
            }
LABEL_240:
            swift_bridgeObjectRelease();
LABEL_348:
            swift_bridgeObjectRelease();
LABEL_349:
            v44 = 0;
            return v44 & 1;
          }
          __break(1u);
LABEL_398:
          __break(1u);
LABEL_399:
          __break(1u);
LABEL_400:
          __break(1u);
LABEL_401:
          __break(1u);
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
LABEL_405:
          __break(1u);
LABEL_406:
          __break(1u);
          goto LABEL_407;
        }
        v8 = v152;
        v215 = *(double *)&a4;
        v216 = *(double *)&v16;
        v10 = (double)a4;
        v25 = specialized Array._hoistableIsNativeTypeChecked()(v7);
        v9 = 0;
        v24 = v7 + 32;
        v16 = v148 + 64;
        while (1)
        {
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v9, v25 & 1, v7);
          if ((v25 & 1) != 0)
            v153 = swift_retain();
          else
            v153 = MEMORY[0x1DF0E4D64](v9, v7);
          *(_OWORD *)(v153 + 48) = v219;
          *(_OWORD *)(v153 + 64) = v221;
          *(double *)(v153 + 80) = v10;
          swift_release();
          if (v150 - 1 == v9)
          {
LABEL_229:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v16 = *(_QWORD *)&v216;
            goto LABEL_232;
          }
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v9 + 1, 1, v148);
          if (__OFADD__(v9 + 1, 1))
            break;
          v154 = (__int128 *)(v16 + 32 * v9);
          v219 = *v154;
          v221 = v154[1];
          if (v8 == ++v9)
            goto LABEL_229;
        }
        __break(1u);
LABEL_282:
        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
      }
    }
    *(_QWORD *)&v219 = v23 & 0xC000000000000001;
    if ((v23 & 0xC000000000000001) != 0 && a4)
    {
      type metadata accessor for ReflowElement();
      v97 = 0;
      do
      {
        v98 = v97 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v97);
        v97 = v98;
      }
      while (a4 != v98);
    }
    v216 = *(double *)&v16;
    if (!v24)
    {
      v7 = v23 & 0xFFFFFFFFFFFFFF8;
      v99 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      v16 = (2 * a4) | 1;
      swift_bridgeObjectRetain();
      v8 = 0;
LABEL_129:
      v215 = *(double *)&v99;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v110 = swift_dynamicCastClass();
      if (!v110)
      {
        swift_unknownObjectRelease();
        v110 = MEMORY[0x1E0DEE9D8];
      }
      v111 = *(_QWORD *)(v110 + 16);
      swift_release();
      if (!__OFSUB__(v16 >> 1, v8))
      {
        if (v111 == (v16 >> 1) - v8)
        {
          v9 = swift_dynamicCastClass();
          if (!v9)
          {
            swift_unknownObjectRelease();
            v9 = MEMORY[0x1E0DEE9D8];
          }
          goto LABEL_135;
        }
        goto LABEL_382;
      }
      goto LABEL_379;
    }
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.subscript.getter();
    v99 = v104;
    v8 = v105;
    v16 = v106;
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      goto LABEL_129;
    while (1)
    {
      v9 = specialized _copyCollectionToContiguousArray<A>(_:)(v7, v99, v8, v16);
LABEL_135:
      swift_unknownObjectRelease();
      if (v24)
      {
        swift_bridgeObjectRetain();
        v114 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (a4 >= v114)
        {
LABEL_137:
          swift_bridgeObjectRelease();
          v25 = MEMORY[0x1E0DEE9D8];
          goto LABEL_180;
        }
      }
      else if (a4 >= *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_137;
      }
      if (v25 >= a4)
        break;
LABEL_381:
      __break(1u);
LABEL_382:
      swift_unknownObjectRelease();
      v99 = *(_QWORD *)&v215;
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      v115 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v115 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v115 < v25)
      goto LABEL_384;
    if (!(_QWORD)v219 || a4 == v25)
      goto LABEL_162;
    if (a4 >= v25)
      goto LABEL_399;
    type metadata accessor for ReflowElement();
    v120 = a4;
    do
    {
      v121 = v120 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v120);
      v120 = v121;
    }
    while (v25 != v121);
LABEL_162:
    if (v24)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.subscript.getter();
      v122 = v130;
      v123 = v131;
      v8 = v132;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v7 = v23 & 0xFFFFFFFFFFFFFF8;
      v122 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      v8 = (2 * v25) | 1;
      v123 = a4;
    }
    v25 = specialized Array.init<A>(_:)(v7, v122, v123, v8);
    swift_unknownObjectRelease();
LABEL_180:
    *(_QWORD *)&v219 = v9;
    v24 = (unint64_t)v25 >> 62;
    if (!((unint64_t)v25 >> 62))
    {
      v16 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v16)
      {
        v7 = 0;
LABEL_253:
        if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10) < v7)
          goto LABEL_298;
        goto LABEL_254;
      }
      goto LABEL_182;
    }
LABEL_295:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16)
    {
      v7 = 0;
      goto LABEL_297;
    }
LABEL_182:
    if ((v25 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v133 = MEMORY[0x1DF0E4D64](0, v25);
      v134 = swift_bridgeObjectRelease();
    }
    else
    {
      v133 = *(_QWORD *)(v25 + 32);
      v134 = swift_retain();
    }
    v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 136))(v134);
    swift_release();
    if ((v135 & 1) != 0)
    {
      if (v16 == 1)
      {
        v7 = 1;
        if (!v24)
          goto LABEL_253;
      }
      else
      {
        v8 = specialized Array._hoistableIsNativeTypeChecked()(v25);
        v9 = 5;
        while (1)
        {
          v7 = v9 - 4;
          if ((v8 & 1) != 0)
          {
            v23 = *(_QWORD *)(v25 + 8 * v9);
            v160 = swift_retain();
          }
          else
          {
            swift_bridgeObjectRetain();
            v23 = MEMORY[0x1DF0E4D64](v9 - 4, v25);
            v160 = swift_bridgeObjectRelease();
          }
          v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v160);
          swift_release();
          if ((v161 & 1) == 0)
            break;
          v162 = v9 - 3;
          if (__OFADD__(v7, 1))
            goto LABEL_283;
          ++v9;
          if (v162 == v16)
          {
            v7 = v16;
            break;
          }
        }
        if ((uint64_t)v16 < v7)
          goto LABEL_404;
        if (!v24)
          goto LABEL_253;
      }
    }
    else
    {
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_395;
      v7 = 0;
      if (!v24)
        goto LABEL_253;
    }
LABEL_297:
    swift_bridgeObjectRetain();
    v177 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v177 < v7)
    {
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
      goto LABEL_305;
    }
LABEL_254:
    if (v7 < 0)
      goto LABEL_300;
    if (v24)
    {
      swift_bridgeObjectRetain();
      v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v23 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (v23 < (uint64_t)v16)
      goto LABEL_302;
    if ((v16 & 0x8000000000000000) != 0)
      goto LABEL_304;
    if ((v25 & 0xC000000000000001) != 0 && v7 != v16)
    {
      if (v7 >= v16)
        goto LABEL_386;
      type metadata accessor for ReflowElement();
      v163 = v7;
      do
      {
        v164 = v163 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v163);
        v163 = v164;
      }
      while (v16 != v164);
    }
    if (v24)
    {
      swift_bridgeObjectRetain();
      v165 = _CocoaArrayWrapper.subscript.getter();
      v166 = v167;
      v7 = v168;
      v8 = v169;
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v165 = v25 & 0xFFFFFFFFFFFFFF8;
      v166 = (v25 & 0xFFFFFFFFFFFFFF8) + 32;
      v8 = (2 * v16) | 1;
    }
    specialized Array.init<A>(_:)(v165, v166, v7, v8);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v9 = *(_QWORD *)&v216;
    v25 = *(_QWORD *)(*(_QWORD *)&v216 + 152);
    a6 = *(double *)(*(_QWORD *)&v216 + 32);
    v11 = *(double *)(*(_QWORD *)&v216 + 40);
    v12 = *(double *)(*(_QWORD *)&v216 + 48);
    v13 = *(double *)(*(_QWORD *)&v216 + 56);
    specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(v219, a2, IsNativeType, v25, v221, a6, v11, v12, v13);
    swift_release();
    if (!(**(_QWORD **)&v216 >> 62))
    {
      if (*(_QWORD *)((**(_QWORD **)&v216 & 0xFFFFFFFFFFFFF8) + 0x10) < a4)
        goto LABEL_270;
      goto LABEL_306;
    }
LABEL_305:
    swift_bridgeObjectRetain();
    v178 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v178 < a4)
    {
LABEL_270:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v170 = swift_allocObject();
      *(_OWORD *)(v170 + 16) = xmmword_1DDF35440;
      v24 = v217;
      *(_QWORD *)(v170 + 32) = v217;
      *(_QWORD *)&v223 = v170;
      specialized Array._endMutation()();
      v8 = v223;
      swift_retain();
      goto LABEL_329;
    }
LABEL_306:
    v23 = *(_QWORD *)v9;
    v24 = *(_QWORD *)v9 >> 62;
    if (!v24)
    {
      v7 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 < a4)
        goto LABEL_391;
      if ((v23 & 0xC000000000000001) == 0)
        goto LABEL_313;
LABEL_309:
      if (a4 != v7)
      {
        if (a4 >= v7)
          goto LABEL_400;
        type metadata accessor for ReflowElement();
        v179 = a4;
        do
        {
          v180 = v179 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v179);
          v179 = v180;
        }
        while (v7 != v180);
      }
      goto LABEL_313;
    }
LABEL_387:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 < a4)
      goto LABEL_426;
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8 < a4)
    {
LABEL_427:
      __break(1u);
      goto LABEL_428;
    }
    swift_bridgeObjectRetain();
    v213 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v213 < v7)
    {
      __break(1u);
LABEL_391:
      __break(1u);
      goto LABEL_392;
    }
LABEL_428:
    v9 = *(_QWORD *)&v216;
    if ((v23 & 0xC000000000000001) != 0)
      goto LABEL_309;
LABEL_313:
    if (v24)
    {
      swift_bridgeObjectRetain();
      v181 = _CocoaArrayWrapper.subscript.getter();
      v182 = v184;
      a4 = v185;
      v183 = v186;
      swift_bridgeObjectRelease();
    }
    else
    {
      v181 = v23 & 0xFFFFFFFFFFFFFF8;
      v182 = (v23 & 0xFFFFFFFFFFFFFF8) + 32;
      v183 = (2 * v7) | 1;
      swift_bridgeObjectRetain();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v187 = swift_initStackObject();
    v188 = specialized static Array._adoptStorage(_:count:)(v187, 1);
    *v189 = v217;
    specialized _finalizeUninitializedArray<A>(_:)();
    v190 = v188;
    *(_QWORD *)&v223 = v181;
    *((_QWORD *)&v223 + 1) = v182;
    *(_QWORD *)&v224 = a4;
    *((_QWORD *)&v224 + 1) = v183;
    swift_retain();
    v23 = (uint64_t)&v223;
    v191 = specialized ArraySlice.append<A>(contentsOf:)(v190);
    v8 = *((_QWORD *)&v223 + 1);
    v7 = v223;
    IsNativeType = *((_QWORD *)&v224 + 1);
    v24 = v224;
    a4 = *((_QWORD *)&v224 + 1) >> 1;
    if ((_QWORD)v224 == *((_QWORD *)&v224 + 1) >> 1)
      break;
    if ((uint64_t)v224 >= *((_QWORD *)&v224 + 1) >> 1)
      goto LABEL_401;
    v192 = v224;
    if (((*(uint64_t (**)(uint64_t))(**(_QWORD **)(*((_QWORD *)&v223 + 1) + 8 * v224) + 136))(v191) & 1) == 0)
      goto LABEL_326;
    v192 = v24 + 1;
    if (v24 + 1 == a4)
      goto LABEL_327;
    while (1)
    {
      if (v192 >= a4)
      {
LABEL_364:
        __break(1u);
        goto LABEL_365;
      }
      v23 = *(_QWORD *)(v8 + 8 * v192);
      v33 = (*(uint64_t (**)(void))(*(_QWORD *)v23 + 136))();
      if ((v33 & 1) == 0)
        goto LABEL_326;
      v193 = v192 + 1;
      if (__OFADD__(v192, 1))
        break;
      ++v192;
      if (v193 == a4)
        goto LABEL_327;
    }
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    v8 = MEMORY[0x1DF0E4D64](v33, v7);
    swift_bridgeObjectRelease();
    v212 = *(_QWORD *)IsNativeType;
    swift_unknownObjectRelease();
    if (v8 == v212)
      goto LABEL_26;
  }
  v192 = v224;
LABEL_326:
  v79 = a4 < v192;
  a4 = v192;
  if (v79)
  {
LABEL_392:
    __break(1u);
    goto LABEL_393;
  }
LABEL_327:
  if (a4 < v24)
  {
LABEL_393:
    __break(1u);
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }
  v8 = specialized Array.init<A>(_:)(v7, v8, a4, IsNativeType);
  swift_unknownObjectRelease();
LABEL_329:
  if (!((unint64_t)v8 >> 62))
  {
    IsNativeType = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!IsNativeType)
      goto LABEL_360;
    goto LABEL_331;
  }
LABEL_365:
  swift_bridgeObjectRetain();
  IsNativeType = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!IsNativeType)
    goto LABEL_360;
LABEL_331:
  v216 = v12;
  *(double *)&v219 = v11;
  *(CGFloat *)&v221 = a6;
  v194 = vabdd_f64(v10, v14);
  a4 = specialized Array._hoistableIsNativeTypeChecked()(v8);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, a4 & 1, v8);
  v215 = v13;
  v13 = v10;
  v12 = v14;
  v11 = a5;
  if ((a4 & 1) != 0)
  {
    v195 = *(double **)(v8 + 32);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v195 = (double *)MEMORY[0x1DF0E4D64](0, v8);
    swift_bridgeObjectRelease();
  }
  v196 = v195[2];
  v197 = v195[3];
  v199 = v195[4];
  v198 = v195[5];
  swift_release();
  v228.origin.x = v196;
  v228.origin.y = v197;
  v228.size.width = v199;
  v228.size.height = v198;
  v200 = v194 / (CGRectGetMinX(v228) - v13);
  v201 = 1.0;
  if (v200 <= 1.0)
    v201 = v200;
  if (v200 >= 0.0)
    a6 = v201;
  else
    a6 = 0.0;
  if ((a4 & 1) != 0)
  {
    v23 = *(_QWORD *)(v8 + 32);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    v23 = MEMORY[0x1DF0E4D64](0, v8);
    swift_bridgeObjectRelease();
  }
  v10 = *(double *)(v23 + 16);
  v202 = *(double *)(v23 + 24);
  v15 = *(double *)(v23 + 32);
  a5 = *(double *)(v23 + 40);
  swift_release();
  v229.origin.x = v10;
  v229.origin.y = v202;
  v229.size.width = v15;
  v229.size.height = a5;
  v14 = CGRectGetMinX(v229);
  if (one-time initialization token for handwritingReflowMinimumSpaceWidth != -1)
    swift_once();
  v203 = v14 + a6 * (v12 + *(double *)&static UIConstants.handwritingReflowMinimumSpaceWidth - v14);
  if (v203 < 0.0)
    v203 = 0.0;
  v204 = v11 - *(double *)(v9 + 24);
  if (v203 > v204)
  {
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
    goto LABEL_381;
  }
  v7 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v8, a2, v25, 1, 1, 1, 0, v203, v204, *(CGFloat *)&v221, *(double *)&v219, v216, v215, 0.0);
  v206 = specialized Array._getCount()(v205);
  swift_bridgeObjectRelease();
  if (v206)
  {
    swift_bridgeObjectRelease();
    goto LABEL_348;
  }
  v207 = swift_retain();
  MEMORY[0x1DF0E4398](v207);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFF8)
                                                                              + 0x10));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v208 = specialized Array._getCount()(v7);
  if (v208)
  {
    v209 = v208;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v7);
    v220 = *(_OWORD *)(v7 + 32);
    v222 = *(_OWORD *)(v7 + 48);
    v10 = (double)v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = 0;
    v25 = v7 + 64;
    v9 = v209 - 1;
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, a4 & 1, v8);
      v210 = (a4 & 1) != 0 ? swift_retain() : MEMORY[0x1DF0E4D64](v24, v8);
      *(_OWORD *)(v210 + 48) = v220;
      *(_OWORD *)(v210 + 64) = v222;
      *(double *)(v210 + 80) = v10;
      swift_release();
      if (v9 == v24)
        goto LABEL_358;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24 + 1, 1, v7);
      if (__OFADD__(v24 + 1, 1))
      {
        __break(1u);
        goto LABEL_364;
      }
      v211 = (__int128 *)(v25 + 32 * v24);
      v220 = *v211;
      v222 = v211[1];
      if (IsNativeType == ++v24)
        goto LABEL_358;
    }
  }
LABEL_359:
  swift_bridgeObjectRelease();
LABEL_360:
  swift_bridgeObjectRelease();
LABEL_361:
  v44 = 1;
  return v44 & 1;
}

uint64_t outlined init with take of ReflowSpacingAdjustment?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReflowSpacingAdjustment?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static ArraySlice<A>.== infix(_:_:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a3 >> 1;
  v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v9 = a6 >> 1;
  if (__OFSUB__(a6 >> 1, a5))
    goto LABEL_26;
  if (v7 != (a6 >> 1) - a5)
    return 0;
  if (!v7)
    return 1;
  v11 = result;
  v12 = (uint64_t *)(result + 8 * a2);
  if (v12 == (uint64_t *)(a4 + 8 * a5) || v6 == a2)
    return 1;
  if (v6 > a2)
  {
    v18 = a2 + 1;
    v17 = *v12;
    result = swift_retain();
    if (v17)
    {
      v13 = a5;
      while (v9 != v13)
      {
        if (v13 < a5 || v13 >= v9)
          goto LABEL_27;
        v14 = *(_QWORD *)(a4 + 8 * v13);
        result = swift_release();
        v16 = v14 == v17;
        v15 = v14 == v17;
        v16 = !v16 || v6 == v18;
        if (!v16)
        {
          if (v18 >= v6)
            goto LABEL_28;
          v17 = *(_QWORD *)(v11 + 8 * v18);
          result = swift_retain();
          ++v13;
          ++v18;
          if (v17)
            continue;
        }
        return v15;
      }
      swift_release();
      return 0;
    }
    return 1;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, double x, double a9, CGFloat a10, double a11, double a12, double a13, CGFloat a14)
{
  unint64_t IsNull;
  uint64_t v15;
  double v16;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  char v36;
  uint64_t v37;
  double Width;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  void (*v53)(void);
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  CGFloat v63;
  CGFloat v64;
  double MinX;
  double v66;
  double MinY;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  double v82;
  BOOL v83;
  double v84;
  BOOL v85;
  double v86;
  BOOL v87;
  double v88;
  double v90;
  int v91;
  Swift::Int v92;
  Swift::Int v93;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v100;
  double v101;
  double *v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v112;
  uint64_t v113;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v125;
  unint64_t v126;
  uint64_t v127;
  double v128;
  double height;
  double v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;

  LODWORD(v16) = a5;
  v26 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    height = a12;
    if (v27)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v27 = _CocoaArrayWrapper.endIndex.getter();
  height = a12;
  if (!v27)
    goto LABEL_11;
LABEL_3:
  v28 = v27 - 1;
  if (__OFSUB__(v27, 1))
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) == 0)
  {
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v28 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v29 = *(_QWORD *)(a1 + 8 * v28 + 32);
      swift_retain();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_140;
  }
  v29 = MEMORY[0x1DF0E4D64](v28, a1);
LABEL_8:
  v30 = swift_bridgeObjectRelease();
  IsNull = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 136))(v30);
  swift_release();
  if ((IsNull & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v15 = specialized Sequence.dropLast(_:)(1, a1);
    goto LABEL_13;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  v15 = a1;
LABEL_13:
  v31 = a11;
  v32 = a13;
  if ((unint64_t)v15 >> 62)
  {
LABEL_135:
    swift_bridgeObjectRetain();
    v33 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v33 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v125 = 0.0;
  v34 = 0.0;
  v35 = 0.0;
  v117 = v27;
  if (v33)
  {
    if (v33 >= 1)
    {
      v127 = a2;
      v36 = a4;
      LODWORD(a4) = LODWORD(v16);
      v37 = 0;
      if ((v15 & 0xC000000000000001) != 0)
      {
        do
        {
          IsNull = MEMORY[0x1DF0E4D64](v37++, v15);
          Width = CGRectGetWidth(*(CGRect *)(IsNull + 16));
          swift_unknownObjectRelease();
          v35 = v35 + Width;
        }
        while (v33 != v37);
      }
      else
      {
        do
        {
          v39 = *(_QWORD *)(v15 + 8 * v37++ + 32);
          v35 = v35 + CGRectGetWidth(*(CGRect *)(v39 + 16));
        }
        while (v33 != v37);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v40 = 0;
      v34 = 0.0;
      do
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v41 = MEMORY[0x1DF0E4D64](v40, v15);
        }
        else
        {
          v41 = *(_QWORD *)(v15 + 8 * v40 + 32);
          swift_retain();
        }
        ++v40;
        v42 = (*(double (**)(void))(*(_QWORD *)v41 + 144))();
        swift_release();
        v34 = v34 + v42;
      }
      while (v33 != v40);
      LODWORD(v16) = a4;
      LOBYTE(a4) = v36;
      a2 = v127;
      goto LABEL_27;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
LABEL_27:
  v43 = (double)a2 / 100.0;
  swift_bridgeObjectRelease_n();
  if ((a4 & 1) != 0)
  {
    v44 = v43 * (v35 + a14);
    v45 = a9;
    if (a9 - x < v44)
      v125 = fmin((v44 - (a9 - x)) / (v44 - v43 * v34), 1.0);
    if (v27)
      goto LABEL_31;
LABEL_129:
    v16 = MEMORY[0x1E0DEE9D8];
    return *(_QWORD *)&v16;
  }
  v45 = a9;
  if (!v27)
    goto LABEL_129;
LABEL_31:
  v121 = v43 * v31;
  v122 = v43 * a10;
  v46 = sqrt((height - a10) * (height - a10) + (v32 - v31) * (v32 - v31));
  v119 = (v32 - v31) / v46;
  v120 = (height - a10) / v46;
  v47 = v43 * a14 * (1.0 - v125) + x;
  v126 = a1 & 0xC000000000000001;
  a4 = a1 & 0xFFFFFFFFFFFFFF8;
  if ((a1 & 0x8000000000000000) != 0)
    v48 = a1;
  else
    v48 = a1 & 0xFFFFFFFFFFFFFF8;
  v116 = v48;
  v113 = a4 + 32;
  v118 = LODWORD(v16) ^ 1;
  v112 = v45 + 0.1;
  swift_bridgeObjectRetain();
  v15 = 0;
  v16 = MEMORY[0x1E0DEE9D8];
  v115 = v26;
  while (1)
  {
    if (v126)
    {
      v49 = MEMORY[0x1DF0E4D64](v15, a1);
      if (__OFADD__(v15, 1))
        goto LABEL_131;
    }
    else
    {
      if ((unint64_t)v15 >= *(_QWORD *)(a4 + 16))
        goto LABEL_133;
      v49 = *(_QWORD *)(a1 + 32 + 8 * v15);
      swift_retain();
      if (__OFADD__(v15, 1))
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
        goto LABEL_135;
      }
    }
    v132.origin.x = v43 * *(double *)(v49 + 16);
    v132.origin.y = v43 * *(double *)(v49 + 24);
    v132.size.width = v43 * *(double *)(v49 + 32);
    v132.size.height = v43 * *(double *)(v49 + 40);
    height = v132.size.height;
    v50 = CGRectGetWidth(v132);
    v51 = (*(double (**)(void))(*(_QWORD *)v49 + 144))();
    v52 = *(_QWORD *)v49;
    if (*(_QWORD *)(v49 + 120) == a3)
      v53 = *(void (**)(void))(v52 + 232);
    else
      v53 = *(void (**)(void))(v52 + 264);
    v53();
    if ((a7 & 1) != 0)
    {
      v58 = v56;
      v131 = v57;
    }
    else
    {
      v58 = v54;
      v131 = v55;
    }
    v59 = (1.0 - v125) * v50 + v125 * (v43 * v51);
    v128 = v47;
    v60 = v43;
    v61 = v122 + v120 * v47;
    v62 = v121 + v119 * v47;
    v63 = *(double *)(v49 + 32);
    v64 = *(double *)(v49 + 40);
    v133.origin.x = 0.0;
    v133.origin.y = 0.0;
    v133.size.width = v63;
    v133.size.height = v64;
    MinX = CGRectGetMinX(v133);
    v134.origin.x = 0.0;
    v134.origin.y = 0.0;
    v134.size.width = v63;
    v134.size.height = v64;
    v66 = MinX + v58 * CGRectGetWidth(v134);
    v135.origin.x = 0.0;
    v135.origin.y = 0.0;
    v135.size.width = v63;
    v135.size.height = v64;
    MinY = CGRectGetMinY(v135);
    v136.origin.x = 0.0;
    v136.origin.y = 0.0;
    v136.size.width = v63;
    v136.size.height = v64;
    v68 = v60;
    v69 = v62 - v60 * (MinY + v131 * CGRectGetHeight(v136));
    v70 = v61 - v60 * v66 + v61 - v60 * v66;
    v71 = floor(v70);
    v72 = v70 - v71;
    v73 = ceil(v70);
    if (v72 < 0.49)
      v73 = v71;
    v74 = v69 + v69;
    v75 = floor(v74);
    v76 = v74 - v75;
    v77 = ceil(v74);
    if (v76 < 0.49)
      v78 = v75;
    else
      v78 = v77;
    v137.origin.x = v73 * 0.5;
    v31 = v78 * 0.5;
    v79 = *(double *)(v49 + 16);
    a10 = *(double *)(v49 + 24);
    v80 = *(double *)(v49 + 32);
    v32 = *(double *)(v49 + 40);
    v137.origin.y = v78 * 0.5;
    a9 = v59;
    v137.size.width = v59;
    x = v137.origin.x;
    a14 = height;
    v137.size.height = height;
    IsNull = CGRectIsNull(v137);
    v138.origin.x = v79;
    v138.origin.y = a10;
    v138.size.width = v80;
    v138.size.height = v32;
    v81 = CGRectIsNull(v138);
    if ((_DWORD)IsNull && (v81 & 1) != 0)
      goto LABEL_54;
    v82 = vabdd_f64(x, v79);
    v83 = (_DWORD)IsNull == v81 && v82 < 2.0;
    v84 = vabdd_f64(v31, a10);
    v85 = v83 && v84 < 2.0;
    v86 = vabdd_f64(a9, v80);
    v87 = v85 && v86 < 2.0;
    v88 = vabdd_f64(height, v32);
    if (v87 && v88 < 2.0)
    {
LABEL_54:
      x = *(double *)(v49 + 16);
      v31 = *(double *)(v49 + 24);
      a14 = *(double *)(v49 + 40);
      a9 = *(double *)(v49 + 32);
    }
    if (v15)
    {
      v43 = v68;
      v90 = v128;
      if (v26)
      {
        swift_bridgeObjectRetain();
        v27 = v116;
        if (_CocoaArrayWrapper.endIndex.getter() < 0)
          goto LABEL_134;
        swift_bridgeObjectRetain();
        IsNull = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        IsNull = *(_QWORD *)(a4 + 16);
        swift_bridgeObjectRetain();
        v27 = v116;
      }
      if ((uint64_t)IsNull < v15)
        goto LABEL_132;
      height = v16;
      if (v126)
      {
        IsNull = type metadata accessor for ReflowElement();
        v92 = 0;
        do
        {
          v93 = v92 + 1;
          _ArrayBuffer._typeCheckSlowPath(_:)(v92);
          v92 = v93;
        }
        while (v15 != v93);
      }
      if (v26)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.subscript.getter();
        v94 = v96;
        v95 = v97;
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v94 = 0;
        v95 = (2 * v15) | 1;
      }
      v98 = v95 >> 1;
      if (v95 >> 1 == v94)
      {
LABEL_87:
        swift_unknownObjectRelease();
        v91 = 0;
        a2 = 0;
        a4 = a1 & 0xFFFFFFFFFFFFFF8;
        v26 = v115;
        v27 = v117;
        v16 = height;
      }
      else
      {
        while (1)
        {
          if (__OFSUB__(v98--, 1))
          {
            __break(1u);
LABEL_127:
            __break(1u);
            goto LABEL_128;
          }
          if (v98 < v94 || v98 >= (uint64_t)(v95 >> 1))
            goto LABEL_127;
          IsNull = type metadata accessor for ReflowWord();
          if (swift_dynamicCastClass())
            break;
          if (v98 == v94)
            goto LABEL_87;
        }
        swift_retain();
        swift_unknownObjectRelease();
        a2 = swift_dynamicCastClass();
        v26 = v115;
        v27 = v117;
        v16 = height;
        if (!a2)
          swift_release();
        v91 = 0;
        a4 = a1 & 0xFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      a2 = 0;
      v91 = a6;
      v43 = v68;
      v90 = v128;
    }
    if (((v91 | v118) & 1) == 0
      && ((*(uint64_t (**)(void))(*(_QWORD *)v49 + 136))() & 1) == 0
      && (v112 < v90 + CGRectGetWidth(*(CGRect *)(v49 + 48)) || a2 && *(_BYTE *)(a2 + 136) == 1))
    {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v16 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)&v16 + 16) + 1, 1, *(_QWORD **)&v16));
    IsNull = *(_QWORD *)(*(_QWORD *)&v16 + 16);
    v100 = *(_QWORD *)(*(_QWORD *)&v16 + 24);
    v101 = v16;
    if (IsNull >= v100 >> 1)
      v101 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v100 > 1), IsNull + 1, 1, *(_QWORD **)&v16));
    ++v15;
    *(_QWORD *)(*(_QWORD *)&v101 + 16) = IsNull + 1;
    v16 = v101;
    v102 = (double *)(*(_QWORD *)&v101 + 32 * IsNull);
    v102[4] = x;
    v102[5] = v31;
    v139.size.width = a9;
    v102[6] = a9;
    v102[7] = a14;
    v139.origin.x = x;
    v139.origin.y = v31;
    v139.size.height = a14;
    v31 = CGRectGetWidth(v139);
    swift_release();
    swift_release();
    v47 = v90 + v31;
    if (v15 == v27)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)&v16;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27 < v15)
    goto LABEL_141;
  if (v26)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter() < v15)
      goto LABEL_142;
    swift_bridgeObjectRetain();
    IsNull = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    IsNull = *(_QWORD *)(a4 + 16);
    swift_bridgeObjectRetain();
    if ((uint64_t)IsNull < v15)
      goto LABEL_142;
    IsNull = *(_QWORD *)(a4 + 16);
  }
  if ((uint64_t)IsNull < v27)
    goto LABEL_143;
  if (v126 && v15 != v27)
  {
    if (v15 >= (unint64_t)v27)
      goto LABEL_144;
    type metadata accessor for ReflowElement();
    v103 = v15;
    do
    {
      v104 = v103 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v103);
      v103 = v104;
    }
    while (v27 != v104);
  }
  if (v26)
  {
    swift_bridgeObjectRetain();
    a4 = _CocoaArrayWrapper.subscript.getter();
    v113 = v105;
    v15 = v106;
    IsNull = v107;
    swift_bridgeObjectRelease_n();
    if ((IsNull & 1) == 0)
      goto LABEL_119;
  }
  else
  {
    IsNull = (2 * v27) | 1;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v108 = swift_dynamicCastClass();
  if (!v108)
  {
    swift_unknownObjectRelease();
    v108 = MEMORY[0x1E0DEE9D8];
  }
  v109 = *(_QWORD *)(v108 + 16);
  swift_release();
  if (!__OFSUB__(IsNull >> 1, v15))
  {
    if (v109 != (IsNull >> 1) - v15)
      goto LABEL_146;
    v110 = swift_dynamicCastClass();
    swift_release();
    swift_unknownObjectRelease();
    if (!v110)
    {
LABEL_128:
      swift_unknownObjectRelease();
      swift_release();
      goto LABEL_129;
    }
    goto LABEL_125;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  swift_unknownObjectRelease();
LABEL_119:
  specialized _copyCollectionToContiguousArray<A>(_:)(a4, v113, v15, IsNull);
  swift_release();
  swift_unknownObjectRelease();
LABEL_125:
  swift_release();
  v16 = MEMORY[0x1E0DEE9D8];
  return *(_QWORD *)&v16;
}

BOOL specialized ReflowTextLine.addLayoutAndApply(_:textScalePercentage:span:headIndent:canCompress:canOverflow:isWholeLine:)(double a1, double a2, CGFloat a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  unint64_t v26;

  v6 = (uint64_t)v5;
  v26 = *v5;
  swift_retain_n();
  v11 = swift_bridgeObjectRetain();
  MEMORY[0x1DF0E4398](v11);
  if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
LABEL_21:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_release();
  v12 = *(_QWORD *)(v6 + 152);
  a5 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v26, a5, v12, 1, 1, 1, 0, a1, a2, *(CGFloat *)(v6 + 32), *(double *)(v6 + 40), *(double *)(v6 + 48), *(double *)(v6 + 56), a3);
  v14 = v13;
  swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v15)
  {
    v16 = swift_retain();
    MEMORY[0x1DF0E4398](v16);
    if (*(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      goto LABEL_24;
    while (1)
    {
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v17 = *(_QWORD *)(a5 + 16);
      if (!v17)
        break;
      v18 = *(_QWORD *)v6;
      v24 = *(_OWORD *)(a5 + 32);
      v25 = *(_OWORD *)(a5 + 48);
      if (*(_QWORD *)v6 >> 62)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return v15 == 0;
        }
      }
      else
      {
        v6 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!v6)
          goto LABEL_18;
      }
      v19 = 0;
      a3 = (double)v12;
      v12 = v18 & 0xC000000000000001;
      v20 = (__int128 *)(a5 + 80);
      v21 = v17 - 1;
      while (1)
      {
        if (v12)
        {
          v22 = MEMORY[0x1DF0E4D64](v19, v18);
          goto LABEL_15;
        }
        if (v19 >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
          break;
        v22 = swift_retain();
LABEL_15:
        *(_OWORD *)(v22 + 48) = v24;
        *(_OWORD *)(v22 + 64) = v25;
        *(CGFloat *)(v22 + 80) = a3;
        swift_release();
        if (v21 == v19)
          goto LABEL_18;
        if (v19 + 1 >= *(_QWORD *)(a5 + 16))
        {
          __break(1u);
          goto LABEL_21;
        }
        v24 = *(v20 - 1);
        v25 = *v20;
        ++v19;
        v20 += 2;
        if (v6 == v19)
          goto LABEL_18;
      }
      __break(1u);
LABEL_24:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
  }
  swift_bridgeObjectRelease();
  return v15 == 0;
}

uint64_t specialized static ReflowTextLine.layoutBackwards(_:textScalePercentage:span:lineIndex:baseline:)(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  double *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  CGRect v32;

  v17 = swift_bridgeObjectRetain();
  v18 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v17);
  swift_bridgeObjectRelease();
  if ((v18 & 0x8000000000000000) == 0 && (v18 & 0x4000000000000000) == 0)
  {
    v19 = *(_QWORD *)(v18 + 16);
    result = swift_retain();
    if (v19)
      goto LABEL_4;
LABEL_12:
    swift_release();
    __break(1u);
    goto LABEL_13;
  }
  swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_12;
LABEL_4:
  v30 = a6;
  v31 = a1;
  if ((v18 & 0xC000000000000001) != 0)
  {
LABEL_13:
    v21 = (double *)MEMORY[0x1DF0E4D64](0, v18);
    goto LABEL_7;
  }
  if (!*(_QWORD *)(v18 + 16))
  {
    __break(1u);
    return result;
  }
  v21 = *(double **)(v18 + 32);
  swift_retain();
LABEL_7:
  swift_release();
  v22 = v21[2];
  v23 = v21[3];
  v24 = v21[4];
  v25 = v21[5];
  swift_release();
  v32.origin.x = v22;
  v32.origin.y = v23;
  v32.size.width = v24;
  v32.size.height = v25;
  v26 = a2 - CGRectGetMaxX(v32);
  if (v26 < 0.0)
    v27 = 0.0;
  else
    v27 = v26;
  v28 = sqrt((a5 - a3) * (a5 - a3) + (v30 - a4) * (v30 - a4));
  v29 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v18, a8, a9, 1, 1, 0, 1, v31, a2, (a5 - a3) / v28 * a2 + a3, (v30 - a4) / v28 * a2 + a4, a3 - (a5 - a3) / v28, a4 - (v30 - a4) / v28, v27);
  swift_release();
  return specialized Sequence.reversed()(v29);
}

uint64_t specialized static ReflowTextLine.layoutTextAdjustingBackwards(_:textScalePercentage:spacingAdjustment:lineIndex:baseline:previousLine:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat a6, CGFloat a7, CGFloat a8, double MaxX)
{
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  CGFloat v49;
  uint64_t v50;
  CGFloat v51;
  double v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  __int128 v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  CGRect v67;

  v17 = a1;
  v65 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_86;
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v18)
    goto LABEL_3;
LABEL_67:
  while (2)
  {
    swift_bridgeObjectRelease();
LABEL_68:
    a3 = v65;
    if (v65 >> 62)
    {
      swift_bridgeObjectRetain();
      v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v50)
      {
LABEL_105:
        if (!(v65 >> 62))
        {
          v61 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_107:
          swift_bridgeObjectRelease();
          return v61;
        }
LABEL_110:
        swift_bridgeObjectRetain();
        v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_107;
      }
    }
    else if (!*(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_105;
    }
    v47 = *(_QWORD *)a5;
    v66 = v47;
    if (!((unint64_t)v47 >> 62))
    {
      a4 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a4)
        goto LABEL_72;
LABEL_91:
      outlined release of [ReflowElement]((uint64_t)&v66);
      MaxX = 0.0;
LABEL_92:
      v47 = *(_QWORD *)(a5 + 152);
      v51 = *(double *)(a5 + 32);
      v52 = *(double *)(a5 + 40);
      v53 = *(double *)(a5 + 48);
      v54 = *(double *)(a5 + 56);
      v55 = swift_bridgeObjectRetain();
      a2 = specialized static ReflowTextLine.layout(_:textScalePercentage:span:lineIndex:baseline:headIndent:canCompress:canOverflow:isWholeLine:isReversed:)(v55, a2, v47, 0, 0, 0, 0, MaxX, 1.79769313e308, v51, v52, v53, v54, 0.0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a5 = *(_QWORD *)(a2 + 16);
      if (!a5)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
      a3 = v65;
      v63 = *(_OWORD *)(a2 + 32);
      v64 = *(_OWORD *)(a2 + 48);
      if (!(v65 >> 62))
      {
        v56 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (v56)
          goto LABEL_95;
LABEL_103:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_104;
      }
LABEL_115:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v56 = _CocoaArrayWrapper.endIndex.getter();
      if (v56)
      {
LABEL_95:
        v57 = 0;
        v58 = (__int128 *)(a2 + 80);
        v59 = (char *)(a5 - 1);
        while (1)
        {
          if ((a3 & 0xC000000000000001) != 0)
          {
            v60 = MEMORY[0x1DF0E4D64](v57, a3);
          }
          else
          {
            if ((unint64_t)v57 >= *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_109;
            v60 = swift_retain();
          }
          *(_OWORD *)(v60 + 48) = v63;
          *(_OWORD *)(v60 + 64) = v64;
          *(double *)(v60 + 80) = (double)v47;
          swift_release();
          if (v59 == v57)
            goto LABEL_103;
          if ((unint64_t)(v57 + 1) >= *(_QWORD *)(a2 + 16))
            break;
          v63 = *(v58 - 1);
          v64 = *v58;
          ++v57;
          v58 += 2;
          if ((char *)v56 == v57)
            goto LABEL_103;
        }
        __break(1u);
LABEL_109:
        __break(1u);
        goto LABEL_110;
      }
      goto LABEL_103;
    }
    swift_bridgeObjectRetain();
    a4 = _CocoaArrayWrapper.endIndex.getter();
    if (!a4)
      goto LABEL_91;
LABEL_72:
    v48 = a4 - 1;
    if (__OFSUB__(a4, 1))
    {
      __break(1u);
    }
    else if ((v47 & 0xC000000000000001) == 0)
    {
      if ((v48 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v48 < *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v17 = *(_QWORD *)(v47 + 8 * v48 + 32);
        swift_retain();
        goto LABEL_77;
      }
      __break(1u);
      goto LABEL_115;
    }
    v17 = MEMORY[0x1DF0E4D64](v48, v47);
LABEL_77:
    outlined release of [ReflowElement]((uint64_t)&v66);
    v49 = *(double *)(v17 + 48);
    a8 = *(double *)(v17 + 56);
    a7 = *(double *)(v17 + 64);
    a6 = *(double *)(v17 + 72);
    swift_release();
    v67.origin.x = v49;
    v67.origin.y = a8;
    v67.size.width = a7;
    v67.size.height = a6;
    MaxX = CGRectGetMaxX(v67);
    if (MaxX <= 1.79769313e308)
      goto LABEL_92;
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter())
      continue;
    break;
  }
LABEL_3:
  *(_QWORD *)&v63 = a5;
  if (*(double *)(a3 + 32) < 0.0)
    v19 = 0.0;
  else
    v19 = *(double *)(a3 + 32);
  while (1)
  {
    a3 = specialized static ReflowTextLine.layoutBackwards(_:textScalePercentage:span:lineIndex:baseline:)(0.0, v19, a6, a7, a8, MaxX, v17, a2, a4);
    swift_bridgeObjectRelease();
    v20 = *(_QWORD *)(a3 + 16);
    if (v20)
    {
      a5 = v63;
      v35 = *(_QWORD *)(v63 + 152);
      v36 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
        __break(1u);
      }
      else
      {
        a8 = *(double *)(a3 + 32);
        v64 = *(_OWORD *)(a3 + 40);
        MaxX = *(double *)(a3 + 56);
        if (!((unint64_t)v17 >> 62))
        {
          a4 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (!a4)
            goto LABEL_66;
LABEL_54:
          a7 = (double)v36;
          if ((v17 & 0xC000000000000001) != 0)
          {
            v37 = 0;
            v38 = (double *)(a3 + 88);
            v39 = v20 - 1;
            v40 = v64;
            do
            {
              v64 = v40;
              v41 = MEMORY[0x1DF0E4D64](v37, v17);
              *(CGFloat *)(v41 + 48) = a8;
              *(_OWORD *)(v41 + 56) = v64;
              *(double *)(v41 + 72) = MaxX;
              *(CGFloat *)(v41 + 80) = a7;
              swift_unknownObjectRelease();
              if (v39 == v37)
                break;
              if ((unint64_t)(v37 + 1) >= *(_QWORD *)(a3 + 16))
                goto LABEL_83;
              MaxX = *v38;
              v40 = *((_OWORD *)v38 - 1);
              a8 = *(v38 - 3);
              ++v37;
              v38 += 4;
            }
            while (a4 != v37);
LABEL_66:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_67;
          }
          v42 = 0;
          v43 = a3 + 64;
          v44 = v64;
          while (v42 < *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            v45 = *(_QWORD *)(v17 + 32 + 8 * v42);
            *(CGFloat *)(v45 + 48) = a8;
            *(_OWORD *)(v45 + 56) = v44;
            *(double *)(v45 + 72) = MaxX;
            *(CGFloat *)(v45 + 80) = a7;
            if (v20 - 1 == v42)
              goto LABEL_66;
            if (v42 + 1 >= *(_QWORD *)(a3 + 16))
              goto LABEL_85;
            MaxX = *(double *)(v43 + 24);
            v44 = *(_OWORD *)(v43 + 8);
            v46 = *(double *)v43;
            v43 += 32;
            a8 = v46;
            if (a4 == ++v42)
              goto LABEL_66;
          }
          goto LABEL_84;
        }
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a4 = _CocoaArrayWrapper.endIndex.getter();
      if (!a4)
        goto LABEL_66;
      goto LABEL_54;
    }
    swift_bridgeObjectRelease();
    v21 = (unint64_t)v17 >> 62;
    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        a3 = v17;
      else
        a3 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
      v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22)
        goto LABEL_121;
    }
    else
    {
      v22 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v22)
        goto LABEL_121;
    }
    if ((v17 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1DF0E4D64](0, v17);
    }
    else
    {
      if (!*(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_79;
      swift_retain();
    }
    v23 = swift_bridgeObjectRelease();
    MEMORY[0x1DF0E4398](v23);
    a5 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)a5 >= *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (v22 < 0)
      break;
    if (v21)
    {
      if (v17 < 0)
        a3 = v17;
      else
        a3 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v24 < 1)
        goto LABEL_80;
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      a3 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!a3)
        goto LABEL_80;
    }
    if (a3 < v22)
      goto LABEL_81;
    if ((v17 & 0xC000000000000001) != 0 && v22 != 1)
    {
      type metadata accessor for ReflowElement();
      v25 = 1;
      do
      {
        v26 = v25 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v25);
        v25 = v26;
      }
      while (v22 != v26);
    }
    if (v21)
    {
      swift_bridgeObjectRetain();
      a3 = _CocoaArrayWrapper.subscript.getter();
      v27 = v29;
      a5 = (uint64_t)v30;
      v28 = v31;
      swift_bridgeObjectRelease_n();
      if ((v28 & 1) == 0)
        goto LABEL_30;
    }
    else
    {
      a3 = v17 & 0xFFFFFFFFFFFFFF8;
      v27 = (v17 & 0xFFFFFFFFFFFFFF8) + 32;
      v28 = (2 * v22) | 1;
      a5 = 1;
      if ((v28 & 1) == 0)
        goto LABEL_30;
    }
    v17 = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v32 = swift_dynamicCastClass();
    if (!v32)
    {
      swift_unknownObjectRelease();
      v32 = MEMORY[0x1E0DEE9D8];
    }
    v33 = *(_QWORD *)(v32 + 16);
    swift_release();
    if (__OFSUB__(v28 >> 1, a5))
      goto LABEL_82;
    if (v33 == (v28 >> 1) - a5)
    {
      v17 = swift_dynamicCastClass();
      if (!v17)
      {
        swift_unknownObjectRelease();
        v17 = MEMORY[0x1E0DEE9D8];
      }
      goto LABEL_44;
    }
    swift_unknownObjectRelease();
LABEL_30:
    v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, v27, a5, v28);
LABEL_44:
    swift_unknownObjectRelease();
    if (v17 < 0 || (v17 & 0x4000000000000000) != 0)
    {
      swift_retain();
      v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (!v34)
      {
LABEL_60:
        swift_release();
        a5 = v63;
        goto LABEL_68;
      }
    }
    else if (!*(_QWORD *)(v17 + 16))
    {
      goto LABEL_60;
    }
  }
  __break(1u);
LABEL_121:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

double TaggedValue_2<>.bounds.getter@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  char v5;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  TaggedValue_2.tagged1.getter();
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

uint64_t TaggedValue_2<>.quad.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  return TaggedValue_2.tagged2.getter();
}

uint64_t specialized Capsule<>.isFormField.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v0 = type metadata accessor for CRKeyPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v20 - v7;
  v21 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v21, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v20 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v24[0]) = 5;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v8, v0);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v22, (uint64_t)v24);
    v16 = v25;
    v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ShapeTextBox?);
    v18 = 0;
  }
  return v18 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v0 = type metadata accessor for CRKeyPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v20 - v7;
  v21 = type metadata accessor for TextBox();
  MEMORY[0x1E0C80A78](v21, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v20 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v24[0]) = 3;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v8, v0);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v22, (uint64_t)v24);
    v16 = v25;
    v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ShapeTextBox?);
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t specialized Capsule<>.isFixedWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v0 = type metadata accessor for CRKeyPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v20 - v7;
  v21 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v21, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v20 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v24[0]) = 5;
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v8, v0);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
  outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElement);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if (swift_dynamicCast())
  {
    outlined init with take of FindResult(v22, (uint64_t)v24);
    v16 = v25;
    v17 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for ShapeTextBox?);
    v18 = 0;
  }
  return v18 & 1;
}

BOOL TextBoxCanvasElementView.isTextBox.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView) != 0;
}

_QWORD *TextBoxCanvasElementView.isFormField.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *result;
  void *v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(char **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (!v7)
  {
    v12 = 0;
    return (_QWORD *)(v12 & 1);
  }
  result = (_QWORD *)MEMORY[0x1DF0E666C](&v7[direct field offset for TextBoxView.canvasElementView], v4);
  if (result)
  {
    v9 = result;
    v10 = (char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v10, v1);
    v11 = v7;

    v12 = specialized Capsule<>.isFormField.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);

    return (_QWORD *)(v12 & 1);
  }
  __break(1u);
  return result;
}

_QWORD *TextBoxCanvasElementView.isFixedWidth.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  char *v7;
  _QWORD *result;
  void *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(char **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (!v7)
    return 0;
  result = (_QWORD *)MEMORY[0x1DF0E666C](&v7[direct field offset for TextBoxView.canvasElementView], v4);
  if (result)
  {
    v9 = result;
    v10 = (char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v6, v10, v1);
    v11 = v7;

    MEMORY[0x1E0C80A78](v12, v13);
    *(&v14 - 4) = type metadata accessor for TextBox();
    *(&v14 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    *(&v14 - 2) = (uint64_t)&protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);

    return (_QWORD *)((v14 & 1) == 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void @objc TextBoxCanvasElementView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[direct field offset for TextBoxCanvasElementView._textBoxView] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *TextBoxCanvasElementView.textBoxView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  v2 = v1;
  return v1;
}

id @objc TextBoxCanvasElementView.becomeFirstResponder()(uint64_t a1, uint64_t a2)
{
  return @objc TextBoxCanvasElementView.becomeFirstResponder()(a1, a2, (SEL *)&selRef_becomeFirstResponder);
}

id @objc TextBoxCanvasElementView.resignFirstResponder()(uint64_t a1, uint64_t a2)
{
  return @objc TextBoxCanvasElementView.becomeFirstResponder()(a1, a2, (SEL *)&selRef_resignFirstResponder);
}

id @objc TextBoxCanvasElementView.becomeFirstResponder()(uint64_t a1, uint64_t a2, SEL *a3)
{
  id result;

  result = *(id *)(a1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (result)
    return objc_msgSend(result, *a3);
  return result;
}

id TextBoxCanvasElementView.isElementFirstResponder.getter()
{
  uint64_t v0;
  uint64_t v1;
  id result;

  v1 = *(_QWORD *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (!v1)
    return 0;
  result = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (result)
    return objc_msgSend(result, sel_isFirstResponder);
  return result;
}

void __swiftcall TextBoxCanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  double y;
  double x;
  void *v6;
  Class isa;
  id v8;
  id v9;
  char *v10;
  CGPoint v11;
  CGRect v12;

  y = _.y;
  x = _.x;
  v6 = *(void **)&v3[direct field offset for TextBoxCanvasElementView._textBoxView];
  if (!v6
    || (isa = with.value.super.isa,
        v8 = v6,
        objc_msgSend(v3, sel_convertPoint_toView_, v8, x, y),
        v9 = objc_msgSend(v8, sel_hitTest_withEvent_, isa),
        v8,
        !v9))
  {
    objc_msgSend(v3, sel_bounds);
    v11.x = x;
    v11.y = y;
    if (CGRectContainsPoint(v12, v11))
      v10 = v3;
  }
}

id @objc TextBoxCanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  TextBoxCanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

id TextBoxCanvasElementView.didZoom(in:)()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (result)
    return objc_msgSend(result, sel_setNeedsLayout);
  return result;
}

Swift::Int TextBoxCanvasElementView.resizeHandles.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v1
    && (v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView)) != 0
    && (objc_msgSend(v2, sel_isFirstResponder) & 1) != 0)
  {
    return MEMORY[0x1E0DEE9E8];
  }
  else
  {
    return specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of TextBoxCanvasElementView.resizeHandles.getter);
  }
}

uint64_t TextBoxCanvasElementView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  v10[0] = type metadata accessor for TextBox();
  v10[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v10[2] = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = 13;
  if ((v11 & 0x80) == 0)
    v7 = 15;
  v8 = 5;
  if ((v11 & 0x80) == 0)
    v8 = 7;
  if ((v11 & 0x10) != 0)
    v7 = v8;
  if ((v11 & 4) != 0)
    return 0;
  else
    return v7;
}

uint64_t TextBoxCanvasElementView.isSelected.setter(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  char *v23;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for TextBox();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_BYTE *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset(v11);
  v14 = direct field offset for TextBoxCanvasElementView._textBoxView;
  v15 = *(void **)((char *)v2 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v15)
  {
    v16 = v15;
    specialized TextBoxView.updateSelected()();

    v17 = *(void **)((char *)v2 + v14);
    if (v17)
    {
      v18 = v17;
      specialized TextBoxView.updateUI()();

    }
  }
  specialized CanvasElementView.updateGestures()();
  v19 = *(void **)((char *)v2 + v14);
  if (v19)
    objc_msgSend(v19, sel_setNeedsLayout);
  v20 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v20)
  {
    v22 = v20;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x668))();

  }
  v23 = (char *)v2 + *(_QWORD *)((*v21 & *v2) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v23, v8);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  return outlined destroy of PKStrokeProperties((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
}

void @objc TextBoxCanvasElementView.layoutSubviews()(char *a1, uint64_t a2)
{
  @objc TextBoxCanvasElementView.layoutSubviews()(a1, a2, (SEL *)&selRef_layoutSubviews);
}

void @objc TextBoxCanvasElementView.setNeedsDisplay()(char *a1, uint64_t a2)
{
  @objc TextBoxCanvasElementView.layoutSubviews()(a1, a2, (SEL *)&selRef_setNeedsDisplay);
}

void @objc TextBoxCanvasElementView.layoutSubviews()(char *a1, uint64_t a2, SEL *a3)
{
  void *v5;
  char *v6;
  objc_super v7;

  v5 = *(void **)&a1[direct field offset for TextBoxCanvasElementView._textBoxView];
  v6 = a1;
  if (v5)
    objc_msgSend(v5, *a3);
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for TextBoxCanvasElementView();
  objc_msgSendSuper2(&v7, *a3);

}

Swift::Void __swiftcall TextBoxCanvasElementView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for TextBox();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = direct field offset for TextBoxCanvasElementView._textBoxView;
  v12 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v12)
  {
    v13 = v12;
    specialized TextBoxView.updateUI()();

  }
  specialized CanvasElementView.updateGestures()();
  v14 = *(void **)((char *)v1 + v11);
  if (v14)
    objc_msgSend(v14, sel_setNeedsLayout);
  v15 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v15)
  {
    v17 = v15;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x668))();

  }
  v18 = (char *)v1 + *(_QWORD *)((*v16 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v18, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
}

Swift::Void __swiftcall TextBoxCanvasElementView.beginLiveEdit()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  void *v19;
  CGPathRef v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - v8;
  v10 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v10)
  {
    v11 = v10;
    specialized TextBoxView.beginLiveEdit()();

  }
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388);
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v13, (uint64_t)v9, &demangling cache variable for type metadata for Capsule<TextBox>?);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Capsule<TextBox>?);
  if (v16 == 1)
  {
    v17 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v5, v17, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v5, 0, 1, v14);
    swift_beginAccess();
    outlined assign with copy of Capsule<TextBox>?((uint64_t)v5, v13);
    swift_endAccess();
    v18 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v18)
    {
      v19 = (void *)v18;
      specialized LiveEditable.didChangeLiveEditing()();

    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for Capsule<TextBox>?);
    v20 = TextBoxCanvasElementView.modelHitTestPath.getter();
    v21 = *(_QWORD *)((*v12 & *v1) + 0x3A8);
    v22 = *(void **)((char *)v1 + v21);
    *(_QWORD *)((char *)v1 + v21) = v20;

  }
}

Swift::Void __swiftcall TextBoxCanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  uint64_t v2;
  char *v5;
  _QWORD *v6;
  void *v7;
  uint64_t (*v8)(void);
  char *v9;
  char *v10;

  v5 = *(char **)(v2 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v5)
  {
    v6 = (_QWORD *)MEMORY[0x1DF0E666C](&v5[direct field offset for TextBoxView.canvasElementView]);
    if (v6)
    {
      v7 = v6;
      v8 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x1E0);
      v9 = v5;
      LOBYTE(v8) = v8();

      if ((v8 & 1) != 0)
      {
        v10 = &v9[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace];
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)v10 = 0u;
        v10[48] = 1;
      }

    }
  }
  specialized CanvasElementView.endLiveEdit(undoable:discard:)(undoable, discard);
}

CGPathRef TextBoxCanvasElementView.modelHitTestPath.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  CGPathRef v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  CGAffineTransform transform;
  uint64_t v14;
  CGRect v15;
  CGRect v16;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&transform - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)((char *)v0 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v6)
  {
    v7 = v6;
    specialized TextBoxView.selectionCoordinateSpace.getter((__int128 *)&transform);
    v15.origin.x = 0.0;
    v15.origin.y = 0.0;
    v15.size.width = 1.0;
    v15.size.height = 1.0;
    v8 = CGPathCreateWithRect(v15, &transform);

  }
  else
  {
    v9 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
    swift_beginAccess();
    v10 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v5, v9, v1);
    MEMORY[0x1E0C80A78](v10, v11);
    *((_QWORD *)&transform - 4) = type metadata accessor for TextBox();
    *((_QWORD *)&transform - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    *((_QWORD *)&transform - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    v16.origin.x = 0.0;
    v16.origin.y = 0.0;
    v16.size.width = 1.0;
    v16.size.height = 1.0;
    return CGPathCreateWithRect(v16, &transform);
  }
  return v8;
}

void TextBoxCanvasElementView.uneditedModelCoordinateSpace.getter(_OWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)((char *)v1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v12
    && (v13 = (__int128 *)(v12 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace),
        (v13[3] & 1) == 0))
  {
    v20 = v13[1];
    v19 = v13[2];
    v21 = *v13;
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v15 = (uint64_t)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388);
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v15, (uint64_t)v6, &demangling cache variable for type metadata for Capsule<TextBox>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      v16 = (char *)v1 + *(_QWORD *)((*v14 & *v1) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
      v17 = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for Capsule<TextBox>?);
    }
    else
    {
      v17 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    }
    MEMORY[0x1E0C80A78](v17, v18);
    *(_QWORD *)&v22[-2] = type metadata accessor for TextBox();
    *((_QWORD *)&v22[-2] + 1) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    *(_QWORD *)&v22[-1] = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v21 = v22[0];
    v20 = v22[1];
    v19 = v22[2];
  }
  *a1 = v21;
  a1[1] = v20;
  a1[2] = v19;
}

void TextBoxCanvasElementView.selectionCoordinateSpace.getter(__int128 *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)((char *)v1 + direct field offset for TextBoxCanvasElementView._textBoxView);
  if (v8)
  {
    v9 = v8;
    specialized TextBoxView.selectionCoordinateSpace.getter(&v19);
    v17 = v20;
    v18 = v19;
    v16 = v21;

    v11 = v16;
    v10 = v17;
    v12 = v18;
  }
  else
  {
    v13 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v13, v3);
    MEMORY[0x1E0C80A78](v14, v15);
    *((_QWORD *)&v16 - 4) = type metadata accessor for TextBox();
    *((_QWORD *)&v16 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    *((_QWORD *)&v16 - 2) = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v12 = v19;
    v10 = v20;
    v11 = v21;
  }
  *a1 = v12;
  a1[1] = v10;
  a1[2] = v11;
}

id @objc TextBoxCanvasElementView.textBoxViewActiveTextBoxFrame(_:)(void *a1)
{
  return objc_msgSend(a1, sel_frame);
}

id @objc TextBoxCanvasElementView.textBoxViewUpdateViewFrame(_:viewFrame:)(void *a1)
{
  return objc_msgSend(a1, sel_setFrame_);
}

void @objc TextBoxCanvasElementView.textBoxViewUpdateModelFrame(_:modelFrame:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7)
{
  id v12;
  id v13;

  v12 = a7;
  v13 = a1;
  specialized CanvasElementView.modelFrame.setter(a2, a3, a4, a5);

}

Swift::OpaquePointer_optional __swiftcall TextBoxCanvasElementView.pasteboardRepresentation()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  void *v25;
  Swift::Bool v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  uint64_t v35;
  Swift::OpaquePointer_optional result;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UTType();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static UTType.plainText.getter();
  v31 = UTType.identifier.getter();
  v29 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v18 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v18, v6);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v19 = (void *)CRAttributedString.attributedString.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v2);
  v20 = objc_msgSend(v19, sel_string);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v35 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v34 = v21;
  *((_QWORD *)&v34 + 1) = v23;
  outlined init with take of Any(&v34, v33);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = v16;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v31, v29, isUniquelyReferenced_nonNull_native);
  v25 = (void *)v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = v25;
  result.value._rawValue = v27;
  result.is_nil = v26;
  return result;
}

id @objc TextBoxCanvasElementView.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, a1);
}

void TextBoxCanvasElementView.__ivar_destroyer()
{
  uint64_t v0;

}

id TextBoxCanvasElementView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TextBoxCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc TextBoxCanvasElementView.__ivar_destroyer(uint64_t a1)
{

}

uint64_t type metadata accessor for TextBoxCanvasElementView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextBoxCanvasElementView;
  if (!type metadata singleton initialization cache for TextBoxCanvasElementView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TextBoxCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for TextBoxCanvasElementView()
{
  return type metadata accessor for TextBoxCanvasElementView();
}

double key path getter for CanvasElement.coordinateSpace : <A>A@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  CanvasElement.coordinateSpace.getter(*(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 8), v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void key path setter for CanvasElement.coordinateSpace : <A>A(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t (*specialized TextBoxUndoSnapshot.snapshot.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t key path getter for ShapeTextBox.text : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 16))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t key path setter for ShapeTextBox.text : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v11, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 24))(v11, v5, v6);
}

void specialized TextBoxView.updateSelected()()
{
  _BYTE *v0;
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[direct field offset for TextBoxView.canvasElementView]);
  if (v2)
  {
    v6 = v2;
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x228))() & 1) == 0)
    {
      v3 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
      v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
      if (v4)
      {
        objc_msgSend(v4, sel_removeFromSuperview);
        v5 = *(void **)&v1[v3];
      }
      else
      {
        v5 = 0;
      }
      *(_QWORD *)&v1[v3] = 0;

      v1[direct field offset for TextBoxView.hideText] = 0;
      objc_msgSend(v1, sel_setNeedsDisplay);
    }

  }
}

void specialized TextBoxView.updateUI()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  void *v25;
  unsigned __int8 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  id v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  BOOL v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  id v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  id v64;
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  _QWORD *v76;
  uint64_t v77;
  char v78[32];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CursorRange<CRAttributedString<TextAttributeScope>.Cursor>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.canvasElementView], v15);
  if (v18)
  {
    v77 = v8;
    v19 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (!v19)
    {
      v75 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      v37 = (char *)v18 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v18) + 0x380);
      v76 = (_QWORD *)v7;
      v38 = v13;
      v39 = v18;
      swift_beginAccess();
      v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 16))(v17, v37, v12);
      MEMORY[0x1E0C80A78](v40, v41);
      *(&v69 - 4) = (id)type metadata accessor for TextBox();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      *(&v69 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      v42 = v75;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v12);
      CRTextStorage.merge(string:)((uint64_t)v11);

      (*(void (**)(char *, _QWORD *))(v77 + 8))(v11, v76);
LABEL_22:
      objc_msgSend(v1, sel_setNeedsLayout);
      objc_msgSend(v1, sel_setNeedsDisplay);

      return;
    }
    v73 = v2;
    v74 = v6;
    v72 = v3;
    v76 = v18;
    v20 = v19;
    v21 = objc_msgSend(v1, sel_undoManager);
    v75 = v20;
    if (v21 && (v22 = v21, v23 = objc_msgSend(v21, sel_isUndoing), v22, (v23 & 1) != 0)
      || (v24 = objc_msgSend(v1, sel_undoManager)) != 0
      && (v25 = v24, v26 = objc_msgSend(v24, sel_isRedoing), v25, (v26 & 1) != 0))
    {
      v74 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      v27 = (char *)v76 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v76) + 0x380);
      swift_beginAccess();
      v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v17, v27, v12);
      MEMORY[0x1E0C80A78](v28, v29);
      *(&v69 - 4) = (id)type metadata accessor for TextBox();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      *(&v69 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      v30 = v74;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
      v31 = CRTextStorage.merge(string:)((uint64_t)v11);
      v33 = v32;
      v35 = v34;

      (*(void (**)(char *, uint64_t))(v77 + 8))(v11, v7);
      if ((v35 & 1) != 0)
      {

      }
      else
      {
        v36 = v75;
        objc_msgSend(v75, sel_setSelectedRange_, v31, v33);

      }
LABEL_21:
      v39 = v76;
      goto LABEL_22;
    }
    specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(0, &demangling cache variable for type metadata for Capsule<TextBox>?, &demangling cache variable for type metadata for Capsule<TextBox>, (void (*)(char *, char *, uint64_t))partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:));
    v71 = direct field offset for TextBoxView.textStorage;
    v43 = *(_QWORD *)&v1[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    v44 = v77;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v70(v11, v43, v7);
    v45 = (char *)objc_msgSend(v20, sel_selectedRange);
    v46 = (char *)objc_msgSend(v20, sel_selectedRange);
    v48 = __OFADD__(v46, v47);
    v49 = &v46[v47];
    if (v48)
    {
      __break(1u);
    }
    else if ((uint64_t)v49 >= (uint64_t)v45)
    {
      CRAttributedString.cursor(range:)();
      v77 = *(_QWORD *)(v44 + 8);
      ((void (*)(char *, uint64_t))v77)(v11, v7);
      v69 = *(id *)&v1[v71];
      v50 = (char *)v76 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v76) + 0x380);
      swift_beginAccess();
      v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v17, v50, v12);
      v52 = v13;
      MEMORY[0x1E0C80A78](v51, v53);
      *(&v69 - 4) = (id)type metadata accessor for TextBox();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      *(&v69 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      v54 = v69;
      Capsule<>.subscript.getter();
      swift_release();
      v55 = v52;
      v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57 = v74;
      v56(v17, v12);
      CRTextStorage.merge(string:)((uint64_t)v11);

      v58 = (void (*)(char *, uint64_t))v77;
      ((void (*)(char *, uint64_t))v77)(v11, v7);
      v59 = *(_QWORD *)&v1[v71] + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
      swift_beginAccess();
      v70(v11, v59, v7);
      v60 = CRAttributedString.range(of:)();
      v62 = v61;
      LOBYTE(v54) = v63;
      v58(v11, v7);
      v64 = v75;
      if ((v54 & 1) != 0)
        goto LABEL_15;
      if (!__OFSUB__(v62, v60))
      {
        objc_msgSend(v75, sel_setSelectedRange_, v60, v62 - v60);
LABEL_15:
        (*(void (**)(id, uint64_t))(v72 + 8))(v57, v73);
        if (*(_QWORD *)&v1[direct field offset for TextBoxView.currentUndoAction])
        {
          swift_retain();
          v65 = specialized TextBoxUndoSnapshot.snapshot.modify();
          v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v66, 1, v12);
          if (!(_DWORD)v67)
          {
            MEMORY[0x1E0C80A78](v67, v68);
            *(&v69 - 2) = v1;
            Capsule.callAsFunction<A>(_:)();
          }
          ((void (*)(char *, _QWORD))v65)(v78, 0);

          swift_release();
        }
        else
        {

        }
        goto LABEL_21;
      }
LABEL_26:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
}

{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  unsigned __int8 v23;
  id v24;
  void *v25;
  unsigned __int8 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  id v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  BOOL v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  id v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  id v64;
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75;
  _QWORD *v76;
  uint64_t v77;
  char v78[32];

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CursorRange<CRAttributedString<TextAttributeScope>.Cursor>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.canvasElementView], v15);
  if (v18)
  {
    v77 = v8;
    v19 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (!v19)
    {
      v75 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      v37 = (char *)v18 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v18) + 0x380);
      v76 = (_QWORD *)v7;
      v38 = v13;
      v39 = v18;
      swift_beginAccess();
      v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 16))(v17, v37, v12);
      MEMORY[0x1E0C80A78](v40, v41);
      *(&v69 - 4) = (id)type metadata accessor for Shape();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      *(&v69 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      v42 = v75;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v12);
      CRTextStorage.merge(string:)((uint64_t)v11);

      (*(void (**)(char *, _QWORD *))(v77 + 8))(v11, v76);
LABEL_22:
      objc_msgSend(v1, sel_setNeedsLayout);
      objc_msgSend(v1, sel_setNeedsDisplay);

      return;
    }
    v73 = v2;
    v74 = v6;
    v72 = v3;
    v76 = v18;
    v20 = v19;
    v21 = objc_msgSend(v1, sel_undoManager);
    v75 = v20;
    if (v21 && (v22 = v21, v23 = objc_msgSend(v21, sel_isUndoing), v22, (v23 & 1) != 0)
      || (v24 = objc_msgSend(v1, sel_undoManager)) != 0
      && (v25 = v24, v26 = objc_msgSend(v24, sel_isRedoing), v25, (v26 & 1) != 0))
    {
      v74 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
      v27 = (char *)v76 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v76) + 0x380);
      swift_beginAccess();
      v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v17, v27, v12);
      MEMORY[0x1E0C80A78](v28, v29);
      *(&v69 - 4) = (id)type metadata accessor for Shape();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      *(&v69 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      v30 = v74;
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
      v31 = CRTextStorage.merge(string:)((uint64_t)v11);
      v33 = v32;
      v35 = v34;

      (*(void (**)(char *, uint64_t))(v77 + 8))(v11, v7);
      if ((v35 & 1) != 0)
      {

      }
      else
      {
        v36 = v75;
        objc_msgSend(v75, sel_setSelectedRange_, v31, v33);

      }
LABEL_21:
      v39 = v76;
      goto LABEL_22;
    }
    specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(0, &demangling cache variable for type metadata for Capsule<Shape>?, (uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>, (void (*)(char *, char *, uint64_t))partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:));
    v71 = direct field offset for TextBoxView.textStorage;
    v43 = *(_QWORD *)&v1[direct field offset for TextBoxView.textStorage]
        + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
    swift_beginAccess();
    v44 = v77;
    v70 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
    v70(v11, v43, v7);
    v45 = (char *)objc_msgSend(v20, sel_selectedRange);
    v46 = (char *)objc_msgSend(v20, sel_selectedRange);
    v48 = __OFADD__(v46, v47);
    v49 = &v46[v47];
    if (v48)
    {
      __break(1u);
    }
    else if ((uint64_t)v49 >= (uint64_t)v45)
    {
      CRAttributedString.cursor(range:)();
      v77 = *(_QWORD *)(v44 + 8);
      ((void (*)(char *, uint64_t))v77)(v11, v7);
      v69 = *(id *)&v1[v71];
      v50 = (char *)v76 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v76) + 0x380);
      swift_beginAccess();
      v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v17, v50, v12);
      v52 = v13;
      MEMORY[0x1E0C80A78](v51, v53);
      *(&v69 - 4) = (id)type metadata accessor for Shape();
      *(&v69 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      *(&v69 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      v54 = v69;
      Capsule<>.subscript.getter();
      swift_release();
      v55 = v52;
      v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v57 = v74;
      v56(v17, v12);
      CRTextStorage.merge(string:)((uint64_t)v11);

      v58 = (void (*)(char *, uint64_t))v77;
      ((void (*)(char *, uint64_t))v77)(v11, v7);
      v59 = *(_QWORD *)&v1[v71] + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
      swift_beginAccess();
      v70(v11, v59, v7);
      v60 = CRAttributedString.range(of:)();
      v62 = v61;
      LOBYTE(v54) = v63;
      v58(v11, v7);
      v64 = v75;
      if ((v54 & 1) != 0)
        goto LABEL_15;
      if (!__OFSUB__(v62, v60))
      {
        objc_msgSend(v75, sel_setSelectedRange_, v60, v62 - v60);
LABEL_15:
        (*(void (**)(id, uint64_t))(v72 + 8))(v57, v73);
        if (*(_QWORD *)&v1[direct field offset for TextBoxView.currentUndoAction])
        {
          swift_retain();
          v65 = specialized TextBoxUndoSnapshot.snapshot.modify();
          v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v66, 1, v12);
          if (!(_DWORD)v67)
          {
            MEMORY[0x1E0C80A78](v67, v68);
            *(&v69 - 2) = v1;
            Capsule.callAsFunction<A>(_:)();
          }
          ((void (*)(char *, _QWORD))v65)(v78, 0);

          swift_release();
        }
        else
        {

        }
        goto LABEL_21;
      }
LABEL_26:
      __break(1u);
      return;
    }
    __break(1u);
    goto LABEL_26;
  }
}

void specialized TextBoxView.beginLiveEdit()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t ObjectType;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double x;
  double y;
  double width;
  double height;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  CGFloat a;
  double MidX;
  double MidY;
  __int128 v35;
  __int128 v36;
  CGFloat c;
  CGFloat d;
  __int128 v39;
  CGFloat tx;
  CGFloat ty;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CGFloat v48;
  CGFloat v49;
  __int128 v50;
  __int128 v51;
  CGAffineTransform v52;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + direct field offset for TextBoxView.delegate;
  if (MEMORY[0x1DF0E666C](v8, v5))
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = MEMORY[0x1DF0E666C](v1 + direct field offset for TextBoxView.canvasElementView);
    if (v10)
    {
      v11 = (_QWORD *)v10;
      ObjectType = swift_getObjectType();
      v13 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v1, ObjectType, v9);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v20 = MEMORY[0x1DF0E666C]((char *)v11 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
      if (v20)
      {
        v21 = (void *)v20;
        AnyCanvasElementView.paperBoundsTransform()(&v55);

        v23 = *(_OWORD *)&v55.a;
        v22 = *(_OWORD *)&v55.c;
        v24 = *(_OWORD *)&v55.tx;
      }
      else
      {
        v22 = xmmword_1DDF33A30;
        v23 = xmmword_1DDF33970;
        v24 = 0uLL;
      }
      *(_OWORD *)&t1.a = v23;
      *(_OWORD *)&t1.c = v22;
      *(_OWORD *)&t1.tx = v24;
      CGAffineTransformInvert(&t2, &t1);
      t1 = t2;
      v56.origin.x = v13;
      v56.origin.y = v15;
      v56.size.width = v17;
      v56.size.height = v19;
      v57 = CGRectApplyAffineTransform(v56, &t1);
      x = v57.origin.x;
      y = v57.origin.y;
      width = v57.size.width;
      height = v57.size.height;
      v29 = (char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x380);
      swift_beginAccess();
      v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v7, v29, v2);
      MEMORY[0x1E0C80A78](v30, v31);
      *((_QWORD *)&v46 - 4) = type metadata accessor for TextBox();
      *((_QWORD *)&v46 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      *((_QWORD *)&v46 - 2) = &protocol witness table for TextBox;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      a = t1.a;
      *(double *)&v51 = x - width * 0.0;
      *(double *)&v50 = y - height * 0.0;
      v58.origin.x = x;
      v58.origin.y = y;
      v58.size.width = width;
      v48 = width;
      v58.size.height = height;
      v49 = height;
      MidX = CGRectGetMidX(v58);
      v59.origin.x = x;
      v59.origin.y = y;
      v59.size.width = width;
      v59.size.height = height;
      MidY = CGRectGetMidY(v59);
      CGAffineTransformMakeRotation(&t1, a);
      v47 = *(_OWORD *)&t1.a;
      v46 = *(_OWORD *)&t1.c;
      v35 = *(_OWORD *)&t1.tx;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      v36 = *(_OWORD *)&t1.a;
      c = t1.c;
      d = t1.d;
      v39 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t2.a = v47;
      *(_OWORD *)&t2.c = v46;
      *(_OWORD *)&t2.tx = v35;
      CGAffineTransformConcat(&v52, &t1, &t2);
      v47 = *(_OWORD *)&v52.a;
      v46 = *(_OWORD *)&v52.c;
      tx = v52.tx;
      ty = v52.ty;
      *(_OWORD *)&t1.a = v36;
      t1.c = c;
      t1.d = d;
      *(_OWORD *)&t1.tx = v39;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v47;
      *(_OWORD *)&t1.c = v46;
      t1.tx = tx;
      t1.ty = ty;
      CGAffineTransformConcat(&v52, &t1, &t2);
      t1.a = v48;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = v49;
      *(_QWORD *)&t1.tx = v51;
      *(_QWORD *)&t1.ty = v50;
      t2 = v52;
      CGAffineTransformConcat(&v52, &t1, &t2);
      v51 = *(_OWORD *)&v52.a;
      v50 = *(_OWORD *)&v52.c;
      v42 = v52.tx;
      v43 = v52.ty;
      swift_unknownObjectRelease();

      v44 = v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      v45 = v50;
      *(_OWORD *)v44 = v51;
      *(_OWORD *)(v44 + 16) = v45;
      *(CGFloat *)(v44 + 32) = v42;
      *(CGFloat *)(v44 + 40) = v43;
      *(_BYTE *)(v44 + 48) = 0;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t ObjectType;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double x;
  double y;
  double width;
  double height;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  CGFloat a;
  double MidX;
  double MidY;
  __int128 v35;
  __int128 v36;
  CGFloat c;
  CGFloat d;
  __int128 v39;
  CGFloat tx;
  CGFloat ty;
  CGFloat v42;
  CGFloat v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CGFloat v48;
  CGFloat v49;
  __int128 v50;
  __int128 v51;
  CGAffineTransform v52;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + direct field offset for TextBoxView.delegate;
  if (MEMORY[0x1DF0E666C](v8, v5))
  {
    v9 = *(_QWORD *)(v8 + 8);
    v10 = MEMORY[0x1DF0E666C](v1 + direct field offset for TextBoxView.canvasElementView);
    if (v10)
    {
      v11 = (_QWORD *)v10;
      ObjectType = swift_getObjectType();
      v13 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v1, ObjectType, v9);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      v20 = MEMORY[0x1DF0E666C]((char *)v11 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
      if (v20)
      {
        v21 = (void *)v20;
        AnyCanvasElementView.paperBoundsTransform()(&v55);

        v23 = *(_OWORD *)&v55.a;
        v22 = *(_OWORD *)&v55.c;
        v24 = *(_OWORD *)&v55.tx;
      }
      else
      {
        v22 = xmmword_1DDF33A30;
        v23 = xmmword_1DDF33970;
        v24 = 0uLL;
      }
      *(_OWORD *)&t1.a = v23;
      *(_OWORD *)&t1.c = v22;
      *(_OWORD *)&t1.tx = v24;
      CGAffineTransformInvert(&t2, &t1);
      t1 = t2;
      v56.origin.x = v13;
      v56.origin.y = v15;
      v56.size.width = v17;
      v56.size.height = v19;
      v57 = CGRectApplyAffineTransform(v56, &t1);
      x = v57.origin.x;
      y = v57.origin.y;
      width = v57.size.width;
      height = v57.size.height;
      v29 = (char *)v11 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v11) + 0x380);
      swift_beginAccess();
      v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v7, v29, v2);
      MEMORY[0x1E0C80A78](v30, v31);
      *((_QWORD *)&v46 - 4) = type metadata accessor for Shape();
      *((_QWORD *)&v46 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      *((_QWORD *)&v46 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
      a = t1.a;
      *(double *)&v51 = x - width * 0.0;
      *(double *)&v50 = y - height * 0.0;
      v58.origin.x = x;
      v58.origin.y = y;
      v58.size.width = width;
      v48 = width;
      v58.size.height = height;
      v49 = height;
      MidX = CGRectGetMidX(v58);
      v59.origin.x = x;
      v59.origin.y = y;
      v59.size.width = width;
      v59.size.height = height;
      MidY = CGRectGetMidY(v59);
      CGAffineTransformMakeRotation(&t1, a);
      v47 = *(_OWORD *)&t1.a;
      v46 = *(_OWORD *)&t1.c;
      v35 = *(_OWORD *)&t1.tx;
      CGAffineTransformMakeTranslation(&t1, -MidX, -MidY);
      v36 = *(_OWORD *)&t1.a;
      c = t1.c;
      d = t1.d;
      v39 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t2.a = v47;
      *(_OWORD *)&t2.c = v46;
      *(_OWORD *)&t2.tx = v35;
      CGAffineTransformConcat(&v52, &t1, &t2);
      v47 = *(_OWORD *)&v52.a;
      v46 = *(_OWORD *)&v52.c;
      tx = v52.tx;
      ty = v52.ty;
      *(_OWORD *)&t1.a = v36;
      t1.c = c;
      t1.d = d;
      *(_OWORD *)&t1.tx = v39;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v47;
      *(_OWORD *)&t1.c = v46;
      t1.tx = tx;
      t1.ty = ty;
      CGAffineTransformConcat(&v52, &t1, &t2);
      t1.a = v48;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = v49;
      *(_QWORD *)&t1.tx = v51;
      *(_QWORD *)&t1.ty = v50;
      t2 = v52;
      CGAffineTransformConcat(&v52, &t1, &t2);
      v51 = *(_OWORD *)&v52.a;
      v50 = *(_OWORD *)&v52.c;
      v42 = v52.tx;
      v43 = v52.ty;
      swift_unknownObjectRelease();

      v44 = v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      v45 = v50;
      *(_OWORD *)v44 = v51;
      *(_OWORD *)(v44 + 16) = v45;
      *(CGFloat *)(v44 + 32) = v42;
      *(CGFloat *)(v44 + 40) = v43;
      *(_BYTE *)(v44 + 48) = 0;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void specialized TextBoxView.selectionCoordinateSpace.getter(__int128 *a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  id v26;
  id v27;
  _QWORD *v28;
  double (*v29)(void);
  uint64_t v30;
  double v31;
  double v32;
  char v33;
  id v34;
  double v35;
  double Height;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double Width;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  uint64_t inited;
  unint64_t v70;
  char *v71;
  CGFloat v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  CGFloat v78;
  uint64_t v79;
  void *v80;
  char *v81;
  char *v82;
  double v83;
  CGFloat v84;
  double v85;
  CGFloat v86;
  double v87;
  CGFloat v88;
  double v89;
  CGFloat v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  double v96;
  double v97;
  double MidX;
  double MidY;
  _QWORD *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  _BOOL4 v105;
  id v106;
  int v107;
  CGFloat v108;
  char v109;
  double v110;
  double v111;
  CGFloat v112;
  CGFloat v113;
  double v114;
  CGFloat v115;
  _QWORD *v116;
  void *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  CGFloat v123;
  double v124;
  double v125;
  CGFloat v126;
  CGFloat v127;
  CGFloat v128;
  CGFloat v129;
  CGFloat v130;
  CGFloat v131;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  id v137[2];
  CGFloat ty;
  int v139;
  CGFloat tx;
  char *v141;
  id v142;
  __int128 *v143;
  __int128 v144;
  __int128 v145;
  double v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  CGAffineTransform v150;
  CGAffineTransform v151;
  CGAffineTransform v152;
  double v153;
  CGAffineTransform v154;
  unsigned __int8 v155;
  void *v156;
  CGRect v157;
  CGRect v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)v137 - v12;
  *(_QWORD *)&v149 = &v2[direct field offset for TextBoxView.canvasElementView];
  v14 = MEMORY[0x1DF0E666C](v11);
  if (!v14)
  {
    v18 = xmmword_1DDF33A30;
    v19 = xmmword_1DDF33970;
    v20 = 0uLL;
LABEL_58:
    *a1 = v19;
    a1[1] = v18;
    a1[2] = v20;
    return;
  }
  v15 = (_QWORD *)v14;
  v141 = v8;
  v143 = a1;
  v16 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (v16)
  {
    v17 = *(id *)&v2[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  }
  else
  {
    objc_msgSend(v2, sel_bounds);
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E50]), sel_initWithFrame_textContainer_, *(_QWORD *)&v2[direct field offset for TextBoxView.textContainer], v21, v22, v23, v24);
    v16 = 0;
  }
  v25 = one-time initialization token for textBoxTextContainerInset;
  v26 = v16;
  if (v25 != -1)
    swift_once();
  v27 = objc_msgSend(v17, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v29 = *(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x138);
  v30 = ((uint64_t (*)(id))v29)(v27);
  v32 = v31;
  v33 = (*(uint64_t (**)(uint64_t))((*v28 & *v15) + 0x110))(v30);
  v142 = v17;
  if ((v33 & 1) != 0)
  {
    v34 = objc_msgSend(v17, sel_sizeThatFits_, v32, 1.79769313e308);
    Height = v35;
    if (((*(uint64_t (**)(id))((*v28 & *v15) + 0x120))(v34) & 1) != 0)
    {
      v157.origin.x = v29();
      if (Height < CGRectGetHeight(v157))
        goto LABEL_15;
      v38 = objc_msgSend(v17, sel_text);
      if (!v38)
        goto LABEL_63;
      v39 = v38;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;

      v37 = swift_bridgeObjectRelease();
      v43 = HIBYTE(v42) & 0xF;
      if ((v42 & 0x2000000000000000) == 0)
        v43 = v40 & 0xFFFFFFFFFFFFLL;
      v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if (!v43)
      {
LABEL_15:
        v158.origin.x = ((double (*)(uint64_t))v29)(v37);
        Height = CGRectGetHeight(v158);
      }
    }
  }
  else
  {
    v44 = (_QWORD *)MEMORY[0x1DF0E666C](v149);
    if (v44)
    {
      v45 = v44;
      v46 = v28;
      v47 = (_QWORD *)(*(uint64_t (**)(void))((*v28 & *v44) + 0x88))();

      if (v47)
      {
        v48 = (_QWORD *)(*(uint64_t (**)(void))((*v46 & *v47) + 0x2F8))();
        v49 = (*(double (**)(void))((*v46 & *v48) + 0x138))();
        v51 = v50;
        v53 = v52;
        v55 = v54;

        v159.origin.x = v49;
        v159.origin.y = v51;
        v159.size.width = v53;
        v159.size.height = v55;
        Width = CGRectGetWidth(v159);

        v57 = Width + -48.0;
      }
      else
      {
        v57 = 1.79769313e308;
      }
      v28 = v46;
    }
    else
    {
      v57 = 1.79769313e308;
    }
    objc_msgSend(v17, sel_sizeThatFits_, v57, 1.79769313e308);
    v32 = v58;
    Height = v59;
  }
  v60 = *(_QWORD *)((*v28 & *v15) + 0x380);
  *(_QWORD *)&v144 = v15;
  v61 = (char *)v15 + v60;
  swift_beginAccess();
  *(_QWORD *)&v148 = *(_QWORD *)(v5 + 16);
  v62 = ((uint64_t (*)(char *, char *, uint64_t))v148)(v13, v61, v4);
  MEMORY[0x1E0C80A78](v62, v63);
  *(_QWORD *)&v147 = type metadata accessor for TextBox();
  v137[-4] = (id)v147;
  v64 = (void *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v137[-3] = v64;
  v137[-2] = &protocol witness table for TextBox;
  swift_getKeyPath();
  *(_QWORD *)&v145 = v64;
  Capsule<>.subscript.getter();
  swift_release();
  v146 = *(double *)(v5 + 8);
  (*(void (**)(char *, uint64_t))&v146)(v13, v4);
  a = v154.a;
  b = v154.b;
  c = v154.c;
  d = v154.d;
  if (vabdd_f64(v154.c, v32) >= 0.1 || vabdd_f64(v154.d, Height) >= 0.1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = v2;
    *(_QWORD *)&v154.a = inited;
    specialized Array._endMutation()();
    v70 = *(_QWORD *)&v154.a;
    v71 = v2;
    Array<A>.displayAttributes.getter(v70, (uint64_t *)&v154);
    swift_bridgeObjectRelease();
    v72 = v154.b;
    tx = v154.tx;
    ty = v154.ty;
    v139 = v155;
    v73 = v156;
    v74 = ((uint64_t (*)(char *, char *, uint64_t))v148)(v13, v61, v4);
    MEMORY[0x1E0C80A78](v74, v75);
    v76 = v4;
    v77 = (void *)v145;
    v137[-4] = (id)v147;
    v137[-3] = v77;
    v137[-2] = &protocol witness table for TextBox;
    swift_getKeyPath();
    v4 = v76;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))&v146)(v13, v76);
    if (!*(_QWORD *)&v154.a)
    {
      v160.origin.x = a;
      v160.origin.y = b;
      v160.size.width = c;
      v160.size.height = d;
      v96 = CGRectGetWidth(v160);
      if (v32 >= v96)
        v32 = v96;
      v161.origin.x = a;
      v161.origin.y = b;
      v161.size.width = c;
      v161.size.height = d;
      v97 = CGRectGetHeight(v161);
      if (Height >= v97)
        Height = v97;
      v162.origin.x = a;
      v162.origin.y = b;
      v162.size.width = c;
      v162.size.height = d;
      MidX = CGRectGetMidX(v162);
      v163.origin.x = a;
      v163.origin.y = b;
      v163.size.width = c;
      v163.size.height = d;
      MidY = CGRectGetMidY(v163);

      swift_bridgeObjectRelease();
      a = MidX - v32 * 0.5;
      b = MidY - Height * 0.5;
      goto LABEL_36;
    }
    v137[0] = v73;
    v137[1] = *(id *)&v72;
    v78 = tx;
    v79 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling;
    v80 = (void *)v144;
    if (v71[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling] != 1)
      goto LABEL_45;
    v81 = (char *)MEMORY[0x1DF0E666C](v149);
    if (v81)
    {
      v82 = v81;
      objc_msgSend(v81, sel_frame);
      v84 = v83;
      v86 = v85;
      v88 = v87;
      v90 = v89;
      v91 = MEMORY[0x1DF0E666C](&v82[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
      if (v91)
      {
        v92 = (void *)v91;
        AnyCanvasElementView.paperBoundsTransform()(&v154);

        v94 = *(_OWORD *)&v154.a;
        v93 = *(_OWORD *)&v154.c;
        v95 = *(_OWORD *)&v154.tx;
      }
      else
      {
        v93 = xmmword_1DDF33A30;
        v94 = xmmword_1DDF33970;
        v95 = 0uLL;
      }
      *(_OWORD *)&v152.a = v94;
      *(_OWORD *)&v152.c = v93;
      *(_OWORD *)&v152.tx = v95;
      CGAffineTransformInvert(&v151, &v152);
      v152 = v151;
      v164.origin.x = v84;
      v164.origin.y = v86;
      v164.size.width = v88;
      v164.size.height = v90;
      v165 = CGRectApplyAffineTransform(v164, &v152);
      a = v165.origin.x;
      b = v165.origin.y;
      c = v165.size.width;
      d = v165.size.height;

    }
    else
    {
      a = 0.0;
      b = 0.0;
      c = 0.0;
      d = 0.0;
    }
    if (v71[v79] == 1)
    {
      v101 = objc_msgSend(v71, sel_traitCollection);
      v102 = objc_msgSend(v101, sel_layoutDirection);

      if (v71[v79] != 1)
      {
        v100 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v107 = v139;
        v108 = ty;
        if (!v102)
        {

LABEL_54:
          swift_bridgeObjectRelease();

          goto LABEL_56;
        }
        v105 = 0;
        v106 = v137[0];
LABEL_47:
        if (v108 == 0.0)
          v109 = v107;
        else
          v109 = 1;
        if ((v109 & 1) != 0)
        {
          v110 = a;
          v111 = b;
          v112 = c;
          v113 = d;
          if ((v105 | (*(_QWORD *)&v108 == 2) & ~v107) == 1)
          {
            v114 = CGRectGetWidth(*(CGRect *)&v110);

            swift_bridgeObjectRelease();
            a = a - (v32 - v114);
          }
          else
          {
            v115 = CGRectGetMidX(*(CGRect *)&v110) + v32 * -0.5;
            v166.origin.x = a;
            v166.origin.y = b;
            v166.size.width = c;
            v166.size.height = d;
            b = CGRectGetMinY(v166);

            swift_bridgeObjectRelease();
            a = v115;
          }
          goto LABEL_56;
        }

        goto LABEL_54;
      }
      v103 = objc_msgSend(v71, sel_traitCollection);
      v104 = objc_msgSend(v103, sel_layoutDirection);

      v105 = v104 == (id)1;
      if (!v102)
      {

        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
    }
    else
    {
LABEL_45:
      v105 = 0;
    }
    v100 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v106 = v137[0];
    v107 = v139;
    v108 = ty;
    goto LABEL_47;
  }
  v32 = v154.c;
  Height = v154.d;
LABEL_36:
  v80 = (void *)v144;
LABEL_37:
  v100 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_56:
  v116 = (_QWORD *)MEMORY[0x1DF0E666C](v149);
  if (v116)
  {
    v117 = v116;
    v118 = (char *)v116 + *(_QWORD *)((*v100 & *v116) + 0x380);
    swift_beginAccess();
    v119 = v141;
    ((void (*)(char *, char *, uint64_t))v148)(v141, v118, v4);

    MEMORY[0x1E0C80A78](v120, v121);
    v122 = (void *)v145;
    v137[-4] = (id)v147;
    v137[-3] = v122;
    v137[-2] = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))&v146)(v119, v4);
    v123 = v153;
    *(double *)&v149 = a - v32 * 0.0;
    *(double *)&v148 = b - Height * 0.0;
    v167.origin.x = a;
    v167.origin.y = b;
    v167.size.width = v32;
    v167.size.height = Height;
    v124 = CGRectGetMidX(v167);
    v168.origin.x = a;
    v168.origin.y = b;
    v168.size.width = v32;
    v168.size.height = Height;
    v125 = CGRectGetMidY(v168);
    CGAffineTransformMakeRotation(&v152, v123);
    v144 = *(_OWORD *)&v152.c;
    v145 = *(_OWORD *)&v152.a;
    v126 = -v125;
    v127 = v152.tx;
    v128 = v152.ty;
    CGAffineTransformMakeTranslation(&v152, -v124, v126);
    v129 = v152.a;
    v130 = v152.b;
    v146 = Height;
    *(double *)&v147 = v32;
    v132 = v152.c;
    v131 = v152.d;
    v133 = v152.tx;
    v134 = v152.ty;
    *(_OWORD *)&v151.a = v145;
    *(_OWORD *)&v151.c = v144;
    v151.tx = v127;
    v151.ty = v128;
    CGAffineTransformConcat(&v150, &v152, &v151);
    v144 = *(_OWORD *)&v150.c;
    v145 = *(_OWORD *)&v150.a;
    v135 = v150.tx;
    v136 = v150.ty;
    v152.a = v129;
    v152.b = v130;
    v152.c = v132;
    v152.d = v131;
    v152.tx = v133;
    v152.ty = v134;
    CGAffineTransformInvert(&v151, &v152);
    *(_OWORD *)&v152.a = v145;
    *(_OWORD *)&v152.c = v144;
    v152.tx = v135;
    v152.ty = v136;
    CGAffineTransformConcat(&v150, &v152, &v151);
    *(_QWORD *)&v152.a = v147;
    v152.b = 0.0;
    v152.c = 0.0;
    v152.d = v146;
    *(_QWORD *)&v152.tx = v149;
    *(_QWORD *)&v152.ty = v148;
    v151 = v150;
    CGAffineTransformConcat(&v150, &v152, &v151);
    v148 = *(_OWORD *)&v150.c;
    v149 = *(_OWORD *)&v150.a;
    v147 = *(_OWORD *)&v150.tx;

    v20 = v147;
    v18 = v148;
    v19 = v149;
    a1 = v143;
    goto LABEL_58;
  }
  __break(1u);
LABEL_63:
  __break(1u);
}

{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  id v25;
  id v26;
  _QWORD *v27;
  double (*v28)(id);
  double v29;
  double v30;
  void *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char v34;
  void (*v35)(char *, uint64_t);
  double v36;
  double Height;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double Width;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void (*v66)(char *, uint64_t);
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  void *v71;
  uint64_t inited;
  CGFloat v73;
  unint64_t v74;
  _BYTE *v75;
  CGFloat v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  CGFloat v81;
  uint64_t v82;
  char *v83;
  char *v84;
  double v85;
  CGFloat v86;
  double v87;
  CGFloat v88;
  double v89;
  CGFloat v90;
  double v91;
  CGFloat v92;
  uint64_t v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  double v98;
  double v99;
  double MidX;
  double MidY;
  _QWORD *v102;
  id v103;
  id v104;
  id v105;
  id v106;
  _BOOL4 v107;
  id v108;
  int v109;
  CGFloat v110;
  char v111;
  double v112;
  double v113;
  CGFloat v114;
  CGFloat v115;
  double v116;
  CGFloat v117;
  _QWORD *v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  CGFloat v125;
  double v126;
  double v127;
  CGFloat v128;
  CGFloat v129;
  CGFloat v130;
  CGFloat v131;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  CGFloat v137;
  CGFloat v138;
  id v139[2];
  CGFloat ty;
  int v141;
  void *v142;
  CGFloat tx;
  __int128 v144;
  __int128 *v145;
  id v146;
  __int128 v147;
  CGFloat v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  CGAffineTransform v152;
  CGAffineTransform v153;
  CGAffineTransform v154;
  double v155;
  CGAffineTransform v156;
  unsigned __int8 v157;
  void *v158;
  CGRect v159;
  CGRect v160;
  CGRect v161;
  CGRect v162;
  CGRect v163;
  CGRect v164;
  CGRect v165;
  CGRect v166;
  CGRect v167;
  CGRect v168;
  CGRect v169;
  CGRect v170;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)v139 - v11;
  *(_QWORD *)&v150 = &v1[direct field offset for TextBoxView.canvasElementView];
  v13 = MEMORY[0x1DF0E666C](v10);
  if (!v13)
  {
    v17 = xmmword_1DDF33A30;
    v18 = xmmword_1DDF33970;
    v19 = 0uLL;
LABEL_57:
    *a1 = v18;
    a1[1] = v17;
    a1[2] = v19;
    return;
  }
  v14 = (_QWORD *)v13;
  v145 = a1;
  v15 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  tx = *(double *)&v1;
  if (v15)
  {
    v16 = v15;
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E50]), sel_initWithFrame_textContainer_, *(_QWORD *)&v1[direct field offset for TextBoxView.textContainer], v20, v21, v22, v23);
    v15 = 0;
  }
  *(_QWORD *)&v144 = v7;
  v24 = one-time initialization token for textBoxTextContainerInset;
  v25 = v15;
  if (v24 != -1)
    swift_once();
  v26 = objc_msgSend(v16, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);
  v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v28 = *(double (**)(id))((*MEMORY[0x1E0DEEDD8] & *v14) + 0x138);
  v28(v26);
  v30 = v29;
  v31 = v14;
  v32 = (char *)v14 + *(_QWORD *)((*v27 & *v14) + 0x380);
  swift_beginAccess();
  v33 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v33(v12, v32, v3);
  v34 = specialized Capsule<>.isFixedWidth.getter();
  v35 = *(void (**)(char *, uint64_t))(v4 + 8);
  v35(v12, v3);
  *(_QWORD *)&v149 = v35;
  *(_QWORD *)&v151 = v33;
  v146 = v16;
  if ((v34 & 1) != 0)
  {
    objc_msgSend(v16, sel_sizeThatFits_, v30, 1.79769313e308);
    Height = v36;
    v33(v12, v32, v3);
    v38 = specialized Capsule<>.isFormField.getter();
    v39 = ((uint64_t (*)(char *, uint64_t))v35)(v12, v3);
    if ((v38 & 1) != 0)
    {
      v159.origin.x = v28((id)v39);
      if (Height < CGRectGetHeight(v159))
        goto LABEL_15;
      v41 = objc_msgSend(v16, sel_text);
      if (!v41)
        goto LABEL_59;
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v45 = v44;

      v40 = swift_bridgeObjectRelease();
      v46 = HIBYTE(v45) & 0xF;
      if ((v45 & 0x2000000000000000) == 0)
        v46 = v43 & 0xFFFFFFFFFFFFLL;
      if (!v46)
      {
LABEL_15:
        v160.origin.x = v28((id)v40);
        Height = CGRectGetHeight(v160);
      }
    }
  }
  else
  {
    v47 = (_QWORD *)MEMORY[0x1DF0E666C](v150);
    if (v47
      && (v48 = v47,
          v49 = (_QWORD *)MEMORY[0x1E0DEEDD8],
          v50 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v47) + 0x88))(),
          v48,
          v50))
    {
      v51 = (_QWORD *)(*(uint64_t (**)(void))((*v49 & *v50) + 0x2F8))();
      v52 = (*(double (**)(void))((*v49 & *v51) + 0x138))();
      v54 = v53;
      v56 = v55;
      v58 = v57;

      v161.origin.x = v52;
      v161.origin.y = v54;
      v161.size.width = v56;
      v161.size.height = v58;
      Width = CGRectGetWidth(v161);

      v60 = Width + -48.0;
    }
    else
    {
      v60 = 1.79769313e308;
    }
    objc_msgSend(v16, sel_sizeThatFits_, v60, 1.79769313e308);
    v30 = v61;
    Height = v62;
  }
  v63 = ((uint64_t (*)(char *, char *, uint64_t))v151)(v12, v32, v3);
  MEMORY[0x1E0C80A78](v63, v64);
  v148 = COERCE_DOUBLE(type metadata accessor for Shape());
  *(CGFloat *)&v139[-4] = v148;
  v65 = (void *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v139[-3] = v65;
  v139[-2] = &protocol witness table for Shape;
  swift_getKeyPath();
  *(_QWORD *)&v147 = v65;
  Capsule<>.subscript.getter();
  swift_release();
  v66 = (void (*)(char *, uint64_t))v149;
  ((void (*)(char *, uint64_t))v149)(v12, v3);
  a = v156.a;
  b = v156.b;
  c = v156.c;
  d = v156.d;
  if (vabdd_f64(v156.c, v30) < 0.1 && vabdd_f64(v156.d, Height) < 0.1)
  {
    v30 = v156.c;
    Height = v156.d;
    v71 = v146;
LABEL_54:
    v102 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    goto LABEL_55;
  }
  v142 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
  v73 = tx;
  *(CGFloat *)(inited + 32) = tx;
  *(_QWORD *)&v156.a = inited;
  specialized Array._endMutation()();
  v74 = *(_QWORD *)&v156.a;
  v75 = *(id *)&v73;
  Array<A>.displayAttributes.getter(v74, (uint64_t *)&v156);
  swift_bridgeObjectRelease();
  v76 = v156.b;
  tx = v156.tx;
  ty = v156.ty;
  v141 = v157;
  v77 = v158;
  v78 = ((uint64_t (*)(char *, char *, uint64_t))v151)(v12, v32, v3);
  MEMORY[0x1E0C80A78](v78, v79);
  v80 = (void *)v147;
  *(CGFloat *)&v139[-4] = v148;
  v139[-3] = v80;
  v139[-2] = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v66(v12, v3);
  if (!*(_QWORD *)&v156.a)
  {
    v162.origin.x = a;
    v162.origin.y = b;
    v162.size.width = c;
    v162.size.height = d;
    v98 = CGRectGetWidth(v162);
    if (v30 >= v98)
      v30 = v98;
    v163.origin.x = a;
    v163.origin.y = b;
    v163.size.width = c;
    v163.size.height = d;
    v99 = CGRectGetHeight(v163);
    if (Height >= v99)
      Height = v99;
    v164.origin.x = a;
    v164.origin.y = b;
    v164.size.width = c;
    v164.size.height = d;
    MidX = CGRectGetMidX(v164);
    v165.origin.x = a;
    v165.origin.y = b;
    v165.size.width = c;
    v165.size.height = d;
    MidY = CGRectGetMidY(v165);

    swift_bridgeObjectRelease();
    a = MidX - v30 * 0.5;
    b = MidY - Height * 0.5;
    v71 = v146;
    goto LABEL_34;
  }
  v139[0] = v77;
  v139[1] = *(id *)&v76;
  v81 = tx;
  v82 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling;
  v71 = v146;
  if (v75[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling] != 1)
    goto LABEL_42;
  v83 = (char *)MEMORY[0x1DF0E666C](v150);
  if (v83)
  {
    v84 = v83;
    objc_msgSend(v83, sel_frame);
    v86 = v85;
    v88 = v87;
    v90 = v89;
    v92 = v91;
    v93 = MEMORY[0x1DF0E666C](&v84[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
    if (v93)
    {
      v94 = (void *)v93;
      AnyCanvasElementView.paperBoundsTransform()(&v156);

      v96 = *(_OWORD *)&v156.a;
      v95 = *(_OWORD *)&v156.c;
      v97 = *(_OWORD *)&v156.tx;
    }
    else
    {
      v95 = xmmword_1DDF33A30;
      v96 = xmmword_1DDF33970;
      v97 = 0uLL;
    }
    *(_OWORD *)&v154.a = v96;
    *(_OWORD *)&v154.c = v95;
    *(_OWORD *)&v154.tx = v97;
    CGAffineTransformInvert(&v153, &v154);
    v154 = v153;
    v166.origin.x = v86;
    v166.origin.y = v88;
    v166.size.width = v90;
    v166.size.height = v92;
    v167 = CGRectApplyAffineTransform(v166, &v154);
    a = v167.origin.x;
    b = v167.origin.y;
    c = v167.size.width;
    d = v167.size.height;

  }
  else
  {
    a = 0.0;
    b = 0.0;
    c = 0.0;
    d = 0.0;
  }
  if (v75[v82] != 1)
  {
LABEL_42:
    v107 = 0;
    goto LABEL_43;
  }
  v103 = objc_msgSend(v75, sel_traitCollection);
  v104 = objc_msgSend(v103, sel_layoutDirection);

  if (v75[v82] != 1)
  {
    v31 = v142;
    v108 = v139[0];
    v109 = v141;
    v110 = ty;
    if (!v104)
    {
LABEL_53:

      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    v107 = 0;
LABEL_44:
    if (v110 == 0.0)
      v111 = v109;
    else
      v111 = 1;
    if ((v111 & 1) != 0)
    {
      v112 = a;
      v113 = b;
      v114 = c;
      v115 = d;
      if ((v107 | (*(_QWORD *)&v110 == 2) & ~v109) == 1)
      {
        v116 = CGRectGetWidth(*(CGRect *)&v112);

        swift_bridgeObjectRelease();
        a = a - (v30 - v116);
      }
      else
      {
        v117 = CGRectGetMidX(*(CGRect *)&v112) + v30 * -0.5;
        v168.origin.x = a;
        v168.origin.y = b;
        v168.size.width = c;
        v168.size.height = d;
        b = CGRectGetMinY(v168);

        swift_bridgeObjectRelease();
        a = v117;
      }
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  v105 = objc_msgSend(v75, sel_traitCollection);
  v106 = objc_msgSend(v105, sel_layoutDirection);

  v107 = v106 == (id)1;
  if (v104)
  {
LABEL_43:
    v31 = v142;
    v108 = v139[0];
    v109 = v141;
    v110 = ty;
    goto LABEL_44;
  }

  swift_bridgeObjectRelease();
LABEL_34:
  v102 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v31 = v142;
LABEL_55:
  v118 = (_QWORD *)MEMORY[0x1DF0E666C](v150);
  if (v118)
  {
    v119 = v118;
    v120 = (char *)v118 + *(_QWORD *)((*v102 & *v118) + 0x380);
    swift_beginAccess();
    v121 = v144;
    ((void (*)(_QWORD, char *, uint64_t))v151)(v144, v120, v3);

    MEMORY[0x1E0C80A78](v122, v123);
    v124 = (void *)v147;
    *(CGFloat *)&v139[-4] = v148;
    v139[-3] = v124;
    v139[-2] = &protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v149)(v121, v3);
    v125 = v155;
    *(double *)&v151 = a - v30 * 0.0;
    *(double *)&v150 = b - Height * 0.0;
    v169.origin.x = a;
    v169.origin.y = b;
    v169.size.width = v30;
    v169.size.height = Height;
    v126 = CGRectGetMidX(v169);
    v170.origin.x = a;
    v170.origin.y = b;
    v170.size.width = v30;
    v170.size.height = Height;
    v127 = CGRectGetMidY(v170);
    CGAffineTransformMakeRotation(&v154, v125);
    v147 = *(_OWORD *)&v154.a;
    v144 = *(_OWORD *)&v154.c;
    v128 = -v127;
    v129 = v154.tx;
    v130 = v154.ty;
    CGAffineTransformMakeTranslation(&v154, -v126, v128);
    v131 = v154.a;
    v132 = v154.b;
    v148 = Height;
    *(double *)&v149 = v30;
    v134 = v154.c;
    v133 = v154.d;
    v135 = v154.tx;
    v136 = v154.ty;
    *(_OWORD *)&v153.a = v147;
    *(_OWORD *)&v153.c = v144;
    v153.tx = v129;
    v153.ty = v130;
    CGAffineTransformConcat(&v152, &v154, &v153);
    v147 = *(_OWORD *)&v152.a;
    v144 = *(_OWORD *)&v152.c;
    v137 = v152.tx;
    v138 = v152.ty;
    v154.a = v131;
    v154.b = v132;
    v154.c = v134;
    v154.d = v133;
    v154.tx = v135;
    v154.ty = v136;
    CGAffineTransformInvert(&v153, &v154);
    *(_OWORD *)&v154.a = v147;
    *(_OWORD *)&v154.c = v144;
    v154.tx = v137;
    v154.ty = v138;
    CGAffineTransformConcat(&v152, &v154, &v153);
    *(_QWORD *)&v154.a = v149;
    v154.b = 0.0;
    v154.c = 0.0;
    v154.d = v148;
    *(_QWORD *)&v154.tx = v151;
    *(_QWORD *)&v154.ty = v150;
    v153 = v152;
    CGAffineTransformConcat(&v152, &v154, &v153);
    v150 = *(_OWORD *)&v152.c;
    v151 = *(_OWORD *)&v152.a;
    v149 = *(_OWORD *)&v152.tx;

    v19 = v149;
    v17 = v150;
    v18 = v151;
    a1 = v145;
    goto LABEL_57;
  }
  __break(1u);
LABEL_59:
  __break(1u);
}

void specialized TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(int a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *, char *, uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t *v49;
  unint64_t v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  int v71;
  uint64_t v72;

  v70 = a4;
  v7 = v4;
  v71 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CapsuleUndoAction();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v67 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v68 = (char *)&v59 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v19, v20);
  v66 = (uint64_t)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v69 = (char *)&v59 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v59 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v59 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v59 - v36;
  v72 = v7;
  v38 = *(_QWORD *)(v7 + direct field offset for TextBoxView.currentUndoAction);
  if (v38)
  {
    v63 = direct field offset for TextBoxView.currentUndoAction;
    v64 = v12;
    v39 = v38 + *(_QWORD *)(*(_QWORD *)v38 + 104);
    swift_beginAccess();
    v65 = v39;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v39, (uint64_t)v28, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, a2);
      return;
    }
    v61 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v62 = a2;
    v61(v37, v28, v29);
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 16))(v33, v37, v29);
    MEMORY[0x1E0C80A78](v40, v41);
    *(&v59 - 2) = v72;
    swift_retain();
    Capsule.callAsFunction<A>(_:)();
    Capsule.actionUndoingDifference(from:)();
    v42 = v64;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v64) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
      v43 = v62;
      if ((v71 & 1) == 0)
      {
LABEL_6:
        (*(void (**)(char *, uint64_t))(v30 + 8))(v37, v29);
        v44 = v69;
        v61(v69, v33, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v44, 0, 1, v29);
        v45 = (uint64_t)v44;
        v46 = v66;
        outlined init with take of (key: Int, value: AnyCRValue)?(v45, v66, v43);
        v47 = v65;
        swift_beginAccess();
        outlined assign with take of Date?(v46, v47, v43);
        swift_endAccess();
        swift_release();
        return;
      }
    }
    else
    {
      v48 = v68;
      v70 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v70(v68, v11, v42);
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v67, v48, v42);
      v49 = (unint64_t *)(v38 + *(_QWORD *)(*(_QWORD *)v38 + 112));
      swift_beginAccess();
      v50 = *v49;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v49 = v50;
      v60 = v49;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
        *v49 = v50;
      }
      v43 = v62;
      v53 = *(_QWORD *)(v50 + 16);
      v52 = *(_QWORD *)(v50 + 24);
      v54 = (uint64_t *)(v53 + 1);
      if (v53 >= v52 >> 1)
      {
        v62 = (uint64_t *)(v53 + 1);
        v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v50);
        v54 = v62;
        v50 = v58;
        *v60 = v58;
      }
      *(_QWORD *)(v50 + 16) = v54;
      v70((char *)(v50+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v53), v67, v42);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v42);
      if ((v71 & 1) == 0)
        goto LABEL_6;
    }
    v55 = (uint64_t)v69;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v69, 1, 1, v29);
    v56 = v65;
    swift_beginAccess();
    outlined assign with take of Date?(v55, v56, v43);
    swift_endAccess();
    *(_QWORD *)(v72 + v63) = 0;
    swift_release();
    swift_release();
    v57 = *(void (**)(char *, uint64_t))(v30 + 8);
    v57(v33, v29);
    v57(v37, v29);
  }
}

uint64_t specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = *(_QWORD *)(a2 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v3);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v9 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v11 = v10;
  v12 = type metadata accessor for TextBox();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11 + *(int *)(v12 + 24), v7, v3);
  return v9(v15, 0);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  void *v41;
  id v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t (*v53)(_BYTE *, _QWORD);
  _BYTE v54[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v50 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v49 = (uint64_t)&v47 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v48 = (char *)&v47 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v51 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v52 = (char *)&v47 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v47 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v47 - v25;
  v27 = *(_QWORD *)(a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28(v26, v27, v12);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v53 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v30 = v29 + *(int *)(type metadata accessor for Shape() + 52);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 24))(v30, v26, v12);
  v28(v22, v30, v12);
  v31 = (void *)CRAttributedString.attributedString.getter();
  v32 = objc_msgSend(v31, sel_string);

  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;

  if (v33)
    v36 = 0;
  else
    v36 = v35 == 0xE000000000000000;
  if (v36)
  {
    swift_bridgeObjectRelease();
    v38 = *(void (**)(char *, uint64_t))(v13 + 8);
    v38(v22, v12);
    goto LABEL_9;
  }
  v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v38 = *(void (**)(char *, uint64_t))(v13 + 8);
  v38(v22, v12);
  if ((v37 & 1) != 0)
  {
LABEL_9:
    v38(v26, v12);
    return v53(v54, 0);
  }
  v39 = v52;
  v28(v52, v30, v12);
  v40 = v51;
  v28(v51, v30, v12);
  v41 = (void *)CRAttributedString.attributedString.getter();
  v38(v40, v12);
  v42 = objc_msgSend(v41, sel_length);

  result = (uint64_t)v42 - 1;
  if (!__OFSUB__(v42, 1))
  {
    v44 = (uint64_t)v48;
    CRAttributedString.attributes(at:effectiveRange:)();
    v38(v39, v12);
    v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
    v46 = v49;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v44, v49, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v46, v50, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

double sub_1DDD161F0@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;

  CanvasElement.coordinateSpace.getter(*(_QWORD *)(a2 + a1 - 24), *(_QWORD *)(a2 + a1 - 8), v6);
  v4 = v6[1];
  *a3 = v6[0];
  a3[1] = v4;
  result = *(double *)&v7;
  a3[2] = v7;
  return result;
}

void sub_1DDD1623C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[3];

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = a1[1];
  v7[0] = *a1;
  v7[1] = v6;
  v7[2] = a1[2];
  CanvasElement.coordinateSpace.setter((uint64_t)v7, v4, v5);
}

uint64_t sub_1DDD16284()
{
  return 24;
}

__n128 sub_1DDD16290(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD162AC()
{
  return 24;
}

__n128 sub_1DDD162B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD162D4()
{
  return 24;
}

__n128 sub_1DDD162E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD162FC()
{
  return 24;
}

__n128 sub_1DDD16308(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined assign with copy of Capsule<TextBox>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDD16364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 16))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t sub_1DDD1639C()
{
  return 24;
}

__n128 sub_1DDD163A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDD163DC()
{
  return 24;
}

__n128 sub_1DDD163E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

_QWORD *specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(_QWORD *a1, void *a2, char a3, int a4, int a5, _BYTE *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  double v44;
  double v45;
  objc_class *v46;
  id v47;
  void *v48;
  char *v49;
  id v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  Swift::String v60;
  Swift::String_optional v61;
  Swift::String v62;
  uint64_t countAndFlagsBits;
  void *v64;
  void *v65;
  _QWORD *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *result;
  void *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  char *v83;
  id v84;
  int v85;
  int v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  _UNKNOWN **v94;
  uint64_t v95;
  uint64_t v96;
  _UNKNOWN **v97;
  uint64_t v98;
  uint64_t v99;
  _UNKNOWN **v100;
  char v101;
  char v102;
  objc_super v103;
  double v104;
  double v105;
  Swift::String v106;

  v86 = a5;
  v85 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  MEMORY[0x1E0C80A78](v10, v11);
  v88 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v83 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v83 - v19;
  swift_unknownObjectWeakInit();
  v21 = &a6[direct field offset for TextBoxView.delegate];
  *(_QWORD *)&a6[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a6[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(_QWORD *)&a6[direct field offset for TextBoxView.scribbleDebugView] = 0;
  v22 = direct field offset for TextBoxView.shouldAddTextboxView;
  a6[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  a6[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a6[direct field offset for TextBoxView.cancellables] = MEMORY[0x1E0DEE9E8];
  swift_unknownObjectWeakAssign();
  *((_QWORD *)v21 + 1) = &protocol witness table for AnyCanvasElementView;
  v84 = a2;
  swift_unknownObjectWeakAssign();
  a6[v22] = a3;
  v89 = a1;
  v23 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v91 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v87 = v23;
  v91(v20, v23, v13);
  v24 = type metadata accessor for TextBox();
  v98 = v24;
  v25 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  v99 = v25;
  v100 = &protocol witness table for TextBox;
  swift_getKeyPath();
  v26 = a6;
  Capsule<>.subscript.getter();
  swift_release();
  v90 = *(void (**)(char *, uint64_t))(v14 + 8);
  v90(v20, v13);
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, v104, v105);
  v28 = direct field offset for TextBoxView.textContainer;
  *(_QWORD *)&v26[direct field offset for TextBoxView.textContainer] = v27;
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12F0]), sel_init);
  v30 = direct field offset for TextBoxView.textLayoutManager;
  *(_QWORD *)&v26[direct field offset for TextBoxView.textLayoutManager] = v29;
  v91(v20, v23, v13);
  v95 = v24;
  v96 = v25;
  v97 = &protocol witness table for TextBox;
  swift_getKeyPath();
  v31 = (uint64_t)v88;
  Capsule<>.subscript.getter();
  swift_release();
  v32 = v90;
  v90(v20, v13);
  v33 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  v34 = CRTextStorage.init(_:)(v31);
  v35 = direct field offset for TextBoxView.textStorage;
  *(_QWORD *)&v26[direct field offset for TextBoxView.textStorage] = v34;
  v36 = *(_QWORD *)&v26[v28];
  v37 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  objc_msgSend(*(id *)&v26[v30], sel_setTextContainer_, v36);
  v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C8]), sel_init);
  v39 = direct field offset for TextBoxView.textContentStorage;
  *(_QWORD *)&v26[direct field offset for TextBoxView.textContentStorage] = v38;
  objc_msgSend(v38, sel_setTextStorage_, *(_QWORD *)&v26[v35]);
  v40 = *(void **)&v26[v39];
  v41 = *(void **)&v26[v30];
  v42 = v40;
  v43 = v41;
  objc_msgSend(v42, sel_addTextLayoutManager_, v43);

  v91(v20, v87, v13);
  v88 = (char *)v24;
  v92 = v24;
  v93 = v25;
  v94 = &protocol witness table for TextBox;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v32(v20, v13);
  v44 = v104;
  v45 = v105;
  v46 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<TextBox>);
  v103.receiver = v26;
  v103.super_class = v46;
  v47 = objc_msgSendSuper2(&v103, sel_initWithFrame_, 0.0, 0.0, v44, v45);
  v48 = (void *)objc_opt_self();
  v49 = (char *)v47;
  v50 = objc_msgSend(v48, sel_clearColor);
  objc_msgSend(v49, sel_setBackgroundColor_, v50);

  v51 = objc_msgSend(v49, sel_layer);
  objc_msgSend(v51, sel_setAnchorPoint_, 0.0, 0.0);

  v52 = (void *)objc_opt_self();
  v53 = objc_msgSend(v52, sel_defaultCenter);
  objc_msgSend(v53, sel_addObserver_selector_name_object_, v49, sel_keyboardWillShowNotification_, *MEMORY[0x1E0DC4FE8], 0);

  v54 = objc_msgSend(v52, sel_defaultCenter);
  objc_msgSend(v54, sel_addObserver_selector_name_object_, v49, sel_keyboardWillHideNotification_, *MEMORY[0x1E0DC4FE0], 0);

  v55 = objc_msgSend(v52, sel_defaultCenter);
  objc_msgSend(v55, sel_addObserver_selector_name_object_, v49, sel_breakUndoCoalescing_, *MEMORY[0x1E0CB33A8], 0);

  v56 = v89;
  v57 = objc_msgSend(v52, sel_defaultCenter);
  objc_msgSend(v57, sel_addObserver_selector_name_object_, v49, sel_breakUndoCoalescing_, *MEMORY[0x1E0CB33D0], 0);

  if (((*(uint64_t (**)(void))((*v37 & *v56) + 0x118))() & 1) != 0)
  {
    objc_msgSend(v56, sel_setIsAccessibilityElement_, 1);
    v58 = one-time initialization token for paperKitBundle;
    v59 = v56;
    if (v58 != -1)
      swift_once();
    v106._object = (void *)0x80000001DDF56010;
    v60._countAndFlagsBits = 0x786F422074786554;
    v60._object = (void *)0xE800000000000000;
    v61.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v61.value._object = (void *)0xEB00000000656C62;
    v62._countAndFlagsBits = 0;
    v62._object = (void *)0xE000000000000000;
    v106._countAndFlagsBits = 0xD000000000000023;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, v61, paperKitBundle, v62, v106)._countAndFlagsBits;
    v64 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v59, sel_setAccessibilityLabel_, v64);

  }
  v65 = *(void **)&v49[direct field offset for TextBoxView.textStorage];
  v66 = v56;
  v67 = objc_msgSend(v65, sel_string);
  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v70 = v69;

  v71 = (void *)MEMORY[0x1DF0E41AC](v68, v70);
  swift_bridgeObjectRelease();
  objc_msgSend(v66, sel_setAccessibilityValue_, v71);

  v72 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  v73 = *(_QWORD *)&v49[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  result = (_QWORD *)MEMORY[0x1DF0E666C](&v49[direct field offset for TextBoxView.canvasElementView]);
  if (result)
  {
    v75 = result;
    v76 = (char *)result + *(_QWORD *)((*v37 & *result) + 0x380);
    swift_beginAccess();
    v77 = v83;
    v91(v83, v76, v13);
    swift_retain();

    MEMORY[0x1E0C80A78](v78, v79);
    *(&v83 - 4) = v88;
    *(&v83 - 3) = (char *)v25;
    v106._object = &protocol witness table for TextBox;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v90(v77, v13);
    v101 = v102;
    v80 = (id)specialized FormContentType.uiTextContentType.getter();

    v81 = *(void **)(v73 + 24);
    *(_QWORD *)(v73 + 24) = v80;
    swift_release();

    v82 = *(_QWORD *)&v49[v72];
    *(_BYTE *)(v82 + 17) = v85;
    *(_BYTE *)(v82 + 16) = v86;
    return v49;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  char *v48;
  double v49;
  double v50;
  objc_class *v51;
  id v52;
  void *v53;
  char *v54;
  id v55;
  id v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  void (*v61)(char *, char *, uint64_t);
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  Swift::String v66;
  Swift::String_optional v67;
  Swift::String v68;
  uint64_t countAndFlagsBits;
  void *v70;
  void *v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *result;
  void *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  id v91;
  int v92;
  int v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  _UNKNOWN **v102;
  uint64_t v103;
  uint64_t v104;
  _UNKNOWN **v105;
  uint64_t v106;
  uint64_t v107;
  _UNKNOWN **v108;
  char v109;
  char v110;
  objc_super v111;
  double v112;
  double v113;
  Swift::String v114;

  v93 = a5;
  v92 = a4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  MEMORY[0x1E0C80A78](v10, v11);
  v95 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v90 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v89 - v19;
  swift_unknownObjectWeakInit();
  v21 = &a6[direct field offset for TextBoxView.delegate];
  *(_QWORD *)&a6[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a6[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(_QWORD *)&a6[direct field offset for TextBoxView.scribbleDebugView] = 0;
  v22 = direct field offset for TextBoxView.shouldAddTextboxView;
  a6[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  a6[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&a6[direct field offset for TextBoxView.cancellables] = MEMORY[0x1E0DEE9E8];
  swift_unknownObjectWeakAssign();
  *((_QWORD *)v21 + 1) = &protocol witness table for AnyCanvasElementView;
  v91 = a2;
  swift_unknownObjectWeakAssign();
  a6[v22] = a3;
  v96 = a1;
  v23 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  v98 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v24 = v20;
  v25 = v20;
  v26 = v23;
  v94 = v23;
  v98(v24, v23, v13);
  v27 = type metadata accessor for Shape();
  v106 = v27;
  v97 = v27;
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v107 = v28;
  v108 = &protocol witness table for Shape;
  swift_getKeyPath();
  v29 = a6;
  Capsule<>.subscript.getter();
  swift_release();
  v99 = *(void (**)(char *, uint64_t))(v14 + 8);
  v30 = v25;
  v99(v25, v13);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C0]), sel_initWithSize_, v112, v113);
  v32 = direct field offset for TextBoxView.textContainer;
  *(_QWORD *)&v29[direct field offset for TextBoxView.textContainer] = v31;
  v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12F0]), sel_init);
  v34 = direct field offset for TextBoxView.textLayoutManager;
  *(_QWORD *)&v29[direct field offset for TextBoxView.textLayoutManager] = v33;
  v35 = v26;
  v36 = v98;
  v98(v30, v35, v13);
  v103 = v27;
  v104 = v28;
  v105 = &protocol witness table for Shape;
  swift_getKeyPath();
  v37 = (uint64_t)v95;
  Capsule<>.subscript.getter();
  swift_release();
  v38 = v99;
  v99(v30, v13);
  v39 = objc_allocWithZone((Class)type metadata accessor for CRTextStorage());
  v40 = CRTextStorage.init(_:)(v37);
  v41 = direct field offset for TextBoxView.textStorage;
  *(_QWORD *)&v29[direct field offset for TextBoxView.textStorage] = v40;
  objc_msgSend(*(id *)&v29[v34], sel_setTextContainer_, *(_QWORD *)&v29[v32]);
  v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC12C8]), sel_init);
  v43 = direct field offset for TextBoxView.textContentStorage;
  *(_QWORD *)&v29[direct field offset for TextBoxView.textContentStorage] = v42;
  objc_msgSend(v42, sel_setTextStorage_, *(_QWORD *)&v29[v41]);
  v44 = *(void **)&v29[v43];
  v45 = *(void **)&v29[v34];
  v46 = v44;
  v47 = v45;
  objc_msgSend(v46, sel_addTextLayoutManager_, v47);

  v48 = v94;
  v36(v30, v94, v13);
  v100 = v97;
  v101 = v28;
  v102 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v38(v30, v13);
  v49 = v112;
  v50 = v113;
  v51 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TextBoxView<Shape>);
  v111.receiver = v29;
  v111.super_class = v51;
  v52 = objc_msgSendSuper2(&v111, sel_initWithFrame_, 0.0, 0.0, v49, v50);
  v53 = (void *)objc_opt_self();
  v54 = (char *)v52;
  v55 = objc_msgSend(v53, sel_clearColor);
  objc_msgSend(v54, sel_setBackgroundColor_, v55);

  v56 = objc_msgSend(v54, sel_layer);
  objc_msgSend(v56, sel_setAnchorPoint_, 0.0, 0.0);

  v57 = (void *)objc_opt_self();
  v58 = objc_msgSend(v57, sel_defaultCenter);
  objc_msgSend(v58, sel_addObserver_selector_name_object_, v54, sel_keyboardWillShowNotification_, *MEMORY[0x1E0DC4FE8], 0);

  v59 = objc_msgSend(v57, sel_defaultCenter);
  objc_msgSend(v59, sel_addObserver_selector_name_object_, v54, sel_keyboardWillHideNotification_, *MEMORY[0x1E0DC4FE0], 0);

  v60 = objc_msgSend(v57, sel_defaultCenter);
  objc_msgSend(v60, sel_addObserver_selector_name_object_, v54, sel_breakUndoCoalescing_, *MEMORY[0x1E0CB33A8], 0);

  v61 = v98;
  v62 = objc_msgSend(v57, sel_defaultCenter);
  v63 = v96;
  objc_msgSend(v62, sel_addObserver_selector_name_object_, v54, sel_breakUndoCoalescing_, *MEMORY[0x1E0CB33D0], 0);

  v61(v30, v48, v13);
  LOBYTE(v48) = specialized Capsule<>.isTextBox.getter();
  v99(v30, v13);
  if ((v48 & 1) != 0)
  {
    objc_msgSend(v63, sel_setIsAccessibilityElement_, 1);
    v64 = one-time initialization token for paperKitBundle;
    v65 = v63;
    if (v64 != -1)
      swift_once();
    v114._object = (void *)0x80000001DDF56010;
    v66._countAndFlagsBits = 0x786F422074786554;
    v66._object = (void *)0xE800000000000000;
    v67.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v67.value._object = (void *)0xEB00000000656C62;
    v68._countAndFlagsBits = 0;
    v68._object = (void *)0xE000000000000000;
    v114._countAndFlagsBits = 0xD000000000000023;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v66, v67, paperKitBundle, v68, v114)._countAndFlagsBits;
    v70 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v65, sel_setAccessibilityLabel_, v70);

  }
  v71 = *(void **)&v54[direct field offset for TextBoxView.textStorage];
  v72 = v63;
  v73 = objc_msgSend(v71, sel_string);
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v76 = v75;

  v77 = (void *)MEMORY[0x1DF0E41AC](v74, v76);
  swift_bridgeObjectRelease();
  objc_msgSend(v72, sel_setAccessibilityValue_, v77);

  v78 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
  v79 = *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
  result = (_QWORD *)MEMORY[0x1DF0E666C](&v54[direct field offset for TextBoxView.canvasElementView]);
  if (result)
  {
    v81 = result;
    v82 = (char *)result + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *result) + 0x380);
    swift_beginAccess();
    v83 = v90;
    v61(v90, v82, v13);
    swift_retain();

    MEMORY[0x1E0C80A78](v84, v85);
    *(&v89 - 4) = v97;
    *(&v89 - 3) = v28;
    v114._object = &protocol witness table for Shape;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v99(v83, v13);
    v109 = v110;
    v86 = (id)specialized FormContentType.uiTextContentType.getter();

    v87 = *(void **)(v79 + 24);
    *(_QWORD *)(v79 + 24) = v86;
    swift_release();

    v88 = *(_QWORD *)&v54[v78];
    *(_BYTE *)(v88 + 17) = v92;
    *(_BYTE *)(v88 + 16) = v93;
    return v54;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized TextBoxCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double x;
  double y;
  double width;
  double height;
  id v24;
  id v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  CGAffineTransform v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGAffineTransform v37;
  CGRect v38;
  CGRect v39;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + direct field offset for TextBoxCanvasElementView._textBoxView) = 0;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
  Capsule<>.subscript.getter();
  swift_release();
  v12 = v33;
  v13 = v34;
  v14 = v35;
  v15 = v36;
  if (a3)
  {
    v16 = a3;
    AnyCanvasElementView.paperBoundsTransform()(&v37);

    v18 = *(_OWORD *)&v37.a;
    v17 = *(_OWORD *)&v37.c;
    v19 = *(_OWORD *)&v37.tx;
  }
  else
  {
    v17 = xmmword_1DDF33A30;
    v18 = xmmword_1DDF33970;
    v19 = 0uLL;
  }
  *(_OWORD *)&v32.a = v18;
  *(_OWORD *)&v32.c = v17;
  *(_OWORD *)&v32.tx = v19;
  v38.origin.x = v12;
  v38.origin.y = v13;
  v38.size.width = v14;
  v38.size.height = v15;
  v39 = CGRectApplyAffineTransform(v38, &v32);
  x = v39.origin.x;
  y = v39.origin.y;
  width = v39.size.width;
  height = v39.size.height;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v24 = a2;
  v25 = a3;
  v26 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, a2, a3, x, y, width, height);

  v27 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBoxView<TextBox>));
  v28 = v26;
  v29 = specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(v28, v28, 1, 68, 68, v27);
  v30 = direct field offset for TextBoxCanvasElementView._textBoxView;
  v31 = *(void **)((char *)v28 + direct field offset for TextBoxCanvasElementView._textBoxView);
  *(_QWORD *)((char *)v28 + direct field offset for TextBoxCanvasElementView._textBoxView) = v29;

  if (*(_QWORD *)((char *)v28 + v30))
  {
    objc_msgSend(v28, sel_addSubview_);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1DDD16FD0()
{
  return 24;
}

__n128 sub_1DDD16FDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD16FF8()
{
  return 24;
}

__n128 sub_1DDD17004(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t a1)
{
  return partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(a1);
}

{
  return partial apply for specialized closure #1 in TextBoxView.resetUndoActionIfPossible()(a1);
}

Swift::Void __swiftcall PDFRenderer.Context.beginPage()()
{
  uint64_t v0;
  CGContext *v1;
  const __CFDictionary *isa;
  CGFloat v3;
  CGFloat v4;
  double MinY;
  CGAffineTransform v6;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v9;
  CGRect v10;

  if (*(_BYTE *)(v0 + 40) == 1)
    CGPDFContextEndPage(*(CGContextRef *)(v0 + 32));
  *(_BYTE *)(v0 + 40) = 1;
  v1 = *(CGContext **)(v0 + 32);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGPDFContextBeginPage(v1, isa);

  v3 = *(double *)(v0 + 16);
  v4 = *(double *)(v0 + 24);
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v9.size.width = v3;
  v9.size.height = v4;
  MinY = CGRectGetMinY(v9);
  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v10.size.width = v3;
  v10.size.height = v4;
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  t2.b = 0.0;
  t2.c = 0.0;
  t2.a = 1.0;
  *(_OWORD *)&t2.d = xmmword_1DDF325E0;
  t2.ty = MinY + CGRectGetMaxY(v10);
  CGAffineTransformConcat(&v6, &t1, &t2);
  t1 = v6;
  CGContextConcatCTM(v1, &t1);
}

uint64_t PDFRenderer.Context.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void protocol witness for RendererContext.beginPage() in conformance PDFRenderer.Context()
{
  PDFRenderer.Context.beginPage()();
}

id protocol witness for RendererContext.cgContext.getter in conformance PDFRenderer.Context()
{
  uint64_t v0;

  return *(id *)(*(_QWORD *)v0 + 32);
}

void protocol witness for RendererContext.endRendering() in conformance PDFRenderer.Context()
{
  uint64_t v0;
  CGContext *v1;

  v1 = *(CGContext **)(*(_QWORD *)v0 + 32);
  CGPDFContextEndPage(v1);
  CGPDFContextClose(v1);
}

uint64_t PDFRenderer.createCGContext(output:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFMutableDataRef *v11;
  CGSize v12;
  int EnumCaseMultiPayload;
  NSURL *v14;
  const __CFURL *v15;
  const __CFURL *v16;
  const __CFDictionary *isa;
  CGContextRef v18;
  CFMutableDataRef v19;
  CGDataConsumerRef v20;
  CGDataConsumer *v21;
  const __CFDictionary *v22;
  uint64_t result;
  CGRect mediaBox;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&mediaBox - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RendererOutput();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (CFMutableDataRef *)((char *)&mediaBox - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(CGSize *)(v1 + 32);
  mediaBox.origin = *(CGPoint *)(v1 + 16);
  mediaBox.size = v12;
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  outlined init with copy of RendererOutput(a1, (uint64_t)v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, CFMutableDataRef *, uint64_t))(v4 + 32))(v7, v11, v3);
    URL._bridgeToObjectiveC()(v14);
    v16 = v15;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = CGPDFContextCreateWithURL(v16, &mediaBox, isa);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return (uint64_t)v18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v19 = *v11;
    v20 = CGDataConsumerCreateWithCFData(*v11);
    if (v20)
    {
      v21 = v20;
      v22 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v18 = CGPDFContextCreate(v21, &mediaBox, v22);

    }
    else
    {
      swift_bridgeObjectRelease();

      return 0;
    }
    return (uint64_t)v18;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PDFRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PDFRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for PDFRenderer.Context()
{
  return objc_opt_self();
}

double protocol witness for Renderer.size.getter in conformance PDFRenderer()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 32);
}

uint64_t protocol witness for Renderer.createContext(output:) in conformance PDFRenderer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *v2;
  result = PDFRenderer.createCGContext(output:)(a1);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 32);
    v8 = *(_QWORD *)(v4 + 40);
    v9 = type metadata accessor for PDFRenderer.Context();
    result = swift_allocObject();
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)(result + 16) = v7;
    *(_QWORD *)(result + 24) = v8;
    *(_QWORD *)(result + 32) = v6;
    *(_QWORD *)(a2 + 24) = v9;
    *(_QWORD *)(a2 + 32) = &protocol witness table for PDFRenderer.Context;
    *(_QWORD *)a2 = result;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t outlined init with copy of RendererOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RendererOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for DataOrURL(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v9 = *a2;
      v8 = a2[1];
      outlined copy of Data._Representation(v9, v8);
      *a1 = v9;
      a1[1] = v8;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DataOrURL(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v2 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t *initializeWithCopy for DataOrURL(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v6 = *a2;
    v5 = a2[1];
    outlined copy of Data._Representation(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for DataOrURL(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of DataOrURL((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      v6 = *a2;
      v5 = a2[1];
      outlined copy of Data._Representation(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of DataOrURL(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DataOrURL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for DataOrURL()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DataOrURL;
  if (!type metadata singleton initialization cache for DataOrURL)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for DataOrURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DataOrURL(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of DataOrURL((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for DataOrURL()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void CRAttributedString<>.init(string:attributes:scale:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  id v8;
  void *v9;
  Class isa;
  id v11;

  v8 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v9 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
  swift_bridgeObjectRelease();
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v8, sel_initWithString_attributes_, v9, isa);

  CRAttributedString<>.init(nsAttributedString:scale:)(v11, a3, a4);
}

void CRAttributedString<>.init(nsAttributedString:scale:)(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  id v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void (*v25)(__int128 *, _QWORD);
  id v26;
  unint64_t v27;
  char v28;
  id v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  Swift::String v41;
  Swift::String v42;
  Swift::Bool v43;
  void (*v44)(id *, _QWORD);
  id v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  void (*v49)(__int128 *, _QWORD);
  id v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(__int128 *, _QWORD);
  void *v55;
  id v56;
  unint64_t v57;
  char v58;
  id v59;
  id v60;
  uint64_t v61;
  void (*v62)(__int128 *, _QWORD);
  id v63;
  unint64_t v64;
  char v65;
  id v66;
  id v67;
  uint64_t v68;
  void (*v69)(__int128 *, _QWORD);
  id v70;
  unint64_t v71;
  char v72;
  id v73;
  uint64_t v74;
  id v75;
  void *v76;
  void (*v77)(__int128 *, _QWORD);
  id v78;
  uint64_t v79;
  id v80;
  id v81;
  id v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t KeyPath;
  void (*v86)(char *, uint64_t);
  id v87;
  char v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, sel_string, v9);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v11, v6);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v11, a2, v6);
  v14 = CRAttributedString.count.getter();
  v86 = *(void (**)(char *, uint64_t))(v7 + 8);
  v86(v11, v6);
  if (v14 < 1)
  {

    return;
  }
  v15 = objc_msgSend(a1, sel_attributesAtIndex_effectiveRange_, 0, 0);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v16 + 16))
  {
    v89 = 0u;
    v90 = 0u;
LABEL_13:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  v17 = (id)*MEMORY[0x1E0DC1140];
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
  if ((v19 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v18, (uint64_t)&v89);
  }
  else
  {
    v89 = 0u;
    v90 = 0u;
  }

  if (!*((_QWORD *)&v90 + 1))
    goto LABEL_13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v20 = v87;
    v13(v11, a2, v6);
    v21 = v20;
    v22 = CRAttributedString.count.getter();
    v86(v11, v6);
    if (v22 < 0)
      goto LABEL_90;
    v23 = a2;
    KeyPath = swift_getKeyPath();
    v24 = v21;
    Color.init(cgColor:)((CGColor *)objc_msgSend(v24, sel_CGColor), (CGColor **)&v89);

    v87 = (id)v89;
    v25 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
    lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
    CRAttributedString.Substring.subscript.setter();
    v25(&v89, 0);
    v82 = v24;

    a2 = v23;
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_12;
    goto LABEL_15;
  }
LABEL_14:
  v82 = 0;
  if (!*(_QWORD *)(v16 + 16))
  {
LABEL_12:
    v89 = 0u;
    v90 = 0u;
    goto LABEL_21;
  }
LABEL_15:
  v26 = (id)*MEMORY[0x1E0DC1138];
  v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
  if ((v28 & 1) != 0)
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v27, (uint64_t)&v89);
  }
  else
  {
    v89 = 0u;
    v90 = 0u;
  }

  if (*((_QWORD *)&v90 + 1))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if (swift_dynamicCast())
    {
      v29 = v87;
      goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_21:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
LABEL_22:
  if (one-time initialization token for textBoxDefaultFont != -1)
    goto LABEL_86;
  while (1)
  {
    v29 = (id)static UIConstants.textBoxDefaultFont;
LABEL_24:
    v13(v11, a2, v6);
    v30 = CRAttributedString.count.getter();
    v86(v11, v6);
    if (v30 < 0)
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v83 = v13;
    KeyPath = a2;
    v80 = a1;
    if (a3 == 0.0)
      a3 = 1.0;
    v84 = swift_getKeyPath();
    v31 = objc_msgSend(v29, sel_fontName);
    v32 = v29;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

    v36 = objc_msgSend(v29, sel_familyName);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    v81 = v32;
    objc_msgSend(v32, sel_pointSize);
    a3 = a3 * v40;
    swift_bridgeObjectRetain();
    v41._countAndFlagsBits = 46;
    v41._object = (void *)0xE100000000000000;
    LOBYTE(v36) = String.hasPrefix(_:)(v41);
    swift_bridgeObjectRelease();
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v33 = 0;
      v35 = 0;
    }
    *(float *)&a3 = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = 46;
    v42._object = (void *)0xE100000000000000;
    v43 = String.hasPrefix(_:)(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v43)
    {
      swift_bridgeObjectRelease();
      v37 = 0;
      v39 = 0;
    }
    *(_QWORD *)&v89 = v33;
    *((_QWORD *)&v89 + 1) = v35;
    *(_QWORD *)&v90 = v37;
    *((_QWORD *)&v90 + 1) = v39;
    v91 = LODWORD(a3);
    v92 = 0;
    a2 = KeyPath;
    v44 = (void (*)(id *, _QWORD))CRAttributedString.subscript.modify();
    a1 = (void *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Substring.subscript.setter();
    v44(&v87, 0);
    if (!*(_QWORD *)(v16 + 16))
    {
      v89 = 0u;
      v90 = 0u;
      v13 = v83;
LABEL_40:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      if (!*(_QWORD *)(v16 + 16))
        goto LABEL_39;
      goto LABEL_41;
    }
    v45 = (id)*MEMORY[0x1E0DC1248];
    v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v45);
    if ((v47 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v46, (uint64_t)&v89);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
    }
    v13 = v83;

    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_40;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    v13(v11, a2, v6);
    v48 = CRAttributedString.count.getter();
    v86(v11, v6);
    if (v48 < 0)
    {
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    swift_getKeyPath();
    LOBYTE(v87) = 1;
    v49 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
    lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
    CRAttributedString.Substring.subscript.setter();
    v49(&v89, 0);
    if (!*(_QWORD *)(v16 + 16))
    {
LABEL_39:
      v89 = 0u;
      v90 = 0u;
LABEL_47:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      goto LABEL_48;
    }
LABEL_41:
    v50 = (id)*MEMORY[0x1E0DC11A8];
    v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v50);
    if ((v52 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v51, (uint64_t)&v89);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
    }

    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_47;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    v13(v11, a2, v6);
    v53 = CRAttributedString.count.getter();
    v86(v11, v6);
    if (v53 < 0)
      goto LABEL_88;
    swift_getKeyPath();
    LOBYTE(v87) = 1;
    v54 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
    lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
    CRAttributedString.Substring.subscript.setter();
    v54(&v89, 0);
LABEL_48:
    v55 = (void *)*MEMORY[0x1E0DC1178];
    if (!*(_QWORD *)(v16 + 16))
    {
      v89 = 0u;
      v90 = 0u;
LABEL_56:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      goto LABEL_57;
    }
    v56 = v55;
    v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v56);
    if ((v58 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v57, (uint64_t)&v89);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
    }

    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_56;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v59 = v87;
      v60 = objc_msgSend(v87, sel_alignment);

      goto LABEL_58;
    }
LABEL_57:
    v60 = 0;
LABEL_58:
    v13(v11, a2, v6);
    v61 = CRAttributedString.count.getter();
    v86(v11, v6);
    if (v61 < 0)
      goto LABEL_84;
    swift_getKeyPath();
    v87 = v60;
    v88 = 0;
    v62 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
    lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
    CRAttributedString.Substring.subscript.setter();
    v62(&v89, 0);
    if (!*(_QWORD *)(v16 + 16))
    {
      v89 = 0u;
      v90 = 0u;
LABEL_67:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
      goto LABEL_68;
    }
    v63 = v55;
    v64 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63);
    if ((v65 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v64, (uint64_t)&v89);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
    }

    if (!*((_QWORD *)&v90 + 1))
      goto LABEL_67;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v66 = v87;
      v67 = objc_msgSend(v87, sel_baseWritingDirection);

      goto LABEL_69;
    }
LABEL_68:
    v67 = 0;
LABEL_69:
    v13(v11, a2, v6);
    v68 = CRAttributedString.count.getter();
    v86(v11, v6);
    if ((v68 & 0x8000000000000000) == 0)
      break;
LABEL_85:
    __break(1u);
LABEL_86:
    swift_once();
  }
  swift_getKeyPath();
  v87 = v67;
  v88 = 0;
  v69 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
  lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  CRAttributedString.Substring.subscript.setter();
  v69(&v89, 0);
  if (*(_QWORD *)(v16 + 16))
  {
    v70 = (id)*MEMORY[0x1E0DC1150];
    v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v70);
    if ((v72 & 1) != 0)
    {
      outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v71, (uint64_t)&v89);
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
    }

  }
  else
  {
    v89 = 0u;
    v90 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v90 + 1))
  {

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v89, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {

    v78 = v81;
    goto LABEL_82;
  }
  v73 = v87;
  v13(v11, a2, v6);
  v74 = CRAttributedString.count.getter();
  v86(v11, v6);
  v75 = v81;
  if ((v74 & 0x8000000000000000) == 0)
  {
    swift_getKeyPath();
    Double.init(truncating:)();
    v87 = v76;
    v88 = 0;
    v77 = (void (*)(__int128 *, _QWORD))CRAttributedString.subscript.modify();
    lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
    CRAttributedString.Substring.subscript.setter();
    v77(&v89, 0);

    v78 = v80;
LABEL_82:

    return;
  }
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
}

void CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(uint64_t a1, char a2)
{
  id v4;
  unint64_t v5;
  char v6;
  id v7;
  id v8;
  unint64_t v9;
  char v10;
  id v11;
  id v12;
  void *countAndFlagsBits;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  id v20;
  unint64_t v21;
  char v22;
  void *v23;
  id v24;
  unint64_t v25;
  char v26;
  id v27;
  id v28;
  id v29;
  unint64_t v30;
  char v31;
  id v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  id v36[2];
  Swift::String_optional familyName;
  uint64_t pointSize_low;
  Swift::Int rawValue;
  PaperKit::Font v40;

  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.Attributes.init()();
  if (!*(_QWORD *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_11;
  }
  v4 = (id)*MEMORY[0x1E0DC1138];
  v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v4);
  if ((v6 & 1) == 0)
  {
    memset(&v40, 0, 32);

LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_7;
LABEL_12:
    memset(&v40, 0, 32);
LABEL_17:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v40);

  if (!v40._familyName.value._object)
    goto LABEL_11;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_getKeyPath();
    v7 = v36[0];
    Font.init(_:)(&v40, (UIFont)v7);
    *(Swift::String_optional *)v36 = v40._name;
    familyName = v40._familyName;
    pointSize_low = LODWORD(v40.pointSize);
    rawValue = v40.traits.rawValue;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.setter();

  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_12;
LABEL_7:
  v8 = (id)*MEMORY[0x1E0DC1140];
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  if ((v10 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v40);
  else
    memset(&v40, 0, 32);

  if (!v40._familyName.value._object)
    goto LABEL_17;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_18:
    if ((a2 & 1) == 0)
      goto LABEL_25;
    v11 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    if (!v11)
      goto LABEL_25;
    goto LABEL_20;
  }
  v11 = v36[0];
LABEL_20:
  swift_getKeyPath();
  v12 = v11;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v12, sel_CGColor), (CGColor **)&v40);

  countAndFlagsBits = (void *)v40._name.value._countAndFlagsBits;
  if (v40._name.value._countAndFlagsBits && (a2 & 1) != 0)
  {
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v40._name.value._countAndFlagsBits);
    v15 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), (CGColor **)&v40);
    v16 = v40._name.value._countAndFlagsBits;
    if (!v40._name.value._countAndFlagsBits)
    {
      __break(1u);
      return;
    }

    countAndFlagsBits = (void *)v16;
  }
  v40._name.value._countAndFlagsBits = (uint64_t)countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.setter();

LABEL_25:
  if (!*(_QWORD *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_37;
  }
  v17 = (id)*MEMORY[0x1E0DC1248];
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
  if ((v19 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)&v40);
  else
    memset(&v40, 0, 32);

  if (!v40._familyName.value._object)
  {
LABEL_37:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_35;
LABEL_38:
    memset(&v40, 0, 32);
LABEL_44:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) != 0 && v36[0])
  {
    swift_getKeyPath();
    LOBYTE(v40._name.value._countAndFlagsBits) = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
    CRAttributedString.Attributes.subscript.setter();
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_38;
LABEL_35:
  v20 = (id)*MEMORY[0x1E0DC11A8];
  v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v20);
  if ((v22 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v21, (uint64_t)&v40);
  else
    memset(&v40, 0, 32);

  if (!v40._familyName.value._object)
    goto LABEL_44;
  if ((swift_dynamicCast() & 1) != 0 && v36[0])
  {
    swift_getKeyPath();
    LOBYTE(v40._name.value._countAndFlagsBits) = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
    CRAttributedString.Attributes.subscript.setter();
  }
LABEL_45:
  v23 = (void *)*MEMORY[0x1E0DC1178];
  if (!*(_QWORD *)(a1 + 16))
  {
    memset(&v40, 0, 32);
    goto LABEL_60;
  }
  v24 = v23;
  v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24);
  if ((v26 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v25, (uint64_t)&v40);
  else
    memset(&v40, 0, 32);

  if (!v40._familyName.value._object)
  {
LABEL_60:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_58;
LABEL_61:
    memset(&v40, 0, 32);
LABEL_68:
    swift_bridgeObjectRelease();
LABEL_69:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v40, &demangling cache variable for type metadata for Any?);
    return;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSParagraphStyle);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v27 = v36[0];
    if (objc_msgSend(v36[0], sel_baseWritingDirection))
    {
      swift_getKeyPath();
      v40._name.value._countAndFlagsBits = (uint64_t)objc_msgSend(v36[0], sel_baseWritingDirection);
      LOBYTE(v40._name.value._object) = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
      CRAttributedString.Attributes.subscript.setter();
    }
    v28 = objc_msgSend(v36[0], sel_alignment, *(_OWORD *)v36, familyName, pointSize_low, rawValue, v40._name.value._countAndFlagsBits, v40._name.value._object, v40._familyName.value._countAndFlagsBits);
    if (v28 != (id)(2 * (objc_msgSend(v27, sel_baseWritingDirection) == (id)1)))
    {
      swift_getKeyPath();
      v40._name.value._countAndFlagsBits = (uint64_t)objc_msgSend(v27, sel_alignment);
      LOBYTE(v40._name.value._object) = 0;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.setter();
    }

  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_61;
LABEL_58:
  v29 = v23;
  v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
  if ((v31 & 1) != 0)
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v30, (uint64_t)&v40);
  else
    memset(&v40, 0, 32);

  if (!v40._familyName.value._object)
    goto LABEL_68;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v32 = (id)*MEMORY[0x1E0DC1150];
    v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v32);
    if ((v34 & 1) != 0)
      outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v33, (uint64_t)&v40);
    else
      memset(&v40, 0, 32);

  }
  else
  {
    memset(&v40, 0, 32);
  }
  swift_bridgeObjectRelease();
  if (!v40._familyName.value._object)
  {

    goto LABEL_69;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) != 0)
  {
    swift_getKeyPath();
    Double.init(truncating:)();
    v40._name.value._countAndFlagsBits = v35;
    LOBYTE(v40._name.value._object) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
    CRAttributedString.Attributes.subscript.setter();
    objc_msgSend(v36[0], sel_setLineBreakMode_, 2);

  }
  else
  {

  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for WeakCalculateExpression?);
  }
  else
  {
    outlined init with take of WeakCalculateExpression(a1, (uint64_t)v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v7 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v9);
    v16 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v15, a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v15, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v21;
    swift_bridgeObjectRelease();
    v19 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a2, v19);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, void *a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  _OWORD v7[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v6;

    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a2, v7);

    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v9);
    swift_bridgeObjectRelease();
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t CRAttributedString<>.apply(_:)(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  double v25;
  double v26;
  void (*v27)(char *, uint64_t, uint64_t, double);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  float v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char v54[32];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v47 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v53 = *(_QWORD *)(v10 - 8);
  v11 = v53;
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v43 - v23;
  v25 = *a1;
  v26 = a1[1];
  v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v29 = v28;
  v27(v14, v48, v10, v22);
  CRAttributedString.runs.getter();
  v30 = *(void (**)(char *, uint64_t))(v53 + 8);
  v31 = v14;
  v32 = v24;
  v46 = v10;
  v30(v31, v10);
  v43 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v24, v19, v29);
  v53 = v29;
  CRAttributedString.Runs.next()();
  v33 = v47;
  v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (v52(v9, 1, v2) != 1)
  {
    v35 = sqrt(v25 * v25 + v26 * v26);
    v51 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v45 = v2;
    v44 = v9;
    v51(v5, v9, v2);
    while (1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      v36 = v56;
      if (v56 == 1)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v2);
      }
      else
      {
        v37 = v57;
        v49 = v58;
        v50 = v60;
        v38 = v5;
        v39 = v55;
        *(float *)&v40 = v35 * *(float *)&v59;
        CRAttributedString.Runs.Run.range.getter();
        swift_getKeyPath();
        v55 = v39;
        v56 = v36;
        v41 = v47;
        v5 = v38;
        v57 = v37;
        v58 = v49;
        v9 = v44;
        v59 = v40;
        v60 = v50;
        v42 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
        v2 = v45;
        CRAttributedString.Substring.subscript.setter();
        v42(v54, 0);
        v33 = v41;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v38, v2);
      }
      CRAttributedString.Runs.next()();
      if (v52(v9, 1, v2) == 1)
        break;
      v51(v5, v9, v2);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v32, v53);
}

uint64_t CRAttributedString<>.isEmpty.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v0 = (void *)CRAttributedString.attributedString.getter();
  v1 = objc_msgSend(v0, sel_string);

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4 = v3;

  if (v2)
    v5 = 0;
  else
    v5 = v4 == 0xE000000000000000;
  if (v5)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void CRAttributedString.Attributes<>.nsAttributes(darkMode:)(char a1)
{
  unint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  void *v9;
  id v10;
  CGColorRef v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  id v14;
  void *v15;
  CGColor *v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  char v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  unint64_t v29;
  char v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void *v34;
  id v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  char v43;
  void *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  id v52;
  unint64_t v53;
  void *v54;
  id v55;
  unint64_t v56;
  char v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  char v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  CGFloat v71[4];
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v78 = v2;
  v3 = (void *)*MEMORY[0x1E0DC1138];
  swift_getKeyPath();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (*((_QWORD *)&v73 + 1) == 1)
  {
    v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  }
  else
  {
    v66 = v73;
    v67 = v74;
    v68 = v75;
    v69 = v76;
    v70 = v77;
    v5 = Font.platformFont.getter();
    outlined consume of Font?(v73, *((uint64_t *)&v73 + 1));
    v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
    if (v5)
    {
      *(_QWORD *)&v73 = v5;
      goto LABEL_8;
    }
  }
  if (one-time initialization token for textBoxDefaultFont != -1)
    swift_once();
  *(_QWORD *)&v73 = static UIConstants.textBoxDefaultFont;
  v6 = (id)static UIConstants.textBoxDefaultFont;
LABEL_8:
  outlined init with take of Any(&v73, &v66);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72 = v2;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v4, isUniquelyReferenced_nonNull_native);
  v8 = v72;
  v78 = v72;

  swift_bridgeObjectRelease();
  v9 = (void *)*MEMORY[0x1E0DC1140];
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  v10 = v9;
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  v11 = (CGColorRef)v73;
  if ((_QWORD)v73)
  {
    if ((a1 & 1) == 0)
      goto LABEL_16;
    goto LABEL_14;
  }
  if ((a1 & 1) == 0)
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10, &v73);

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v73, &demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  memset(v71, 0, 24);
  v71[3] = 1.0;
  v12 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (!v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v13 = v12;
  v11 = CGColorCreate(v12, v71);

  if (v11)
  {
LABEL_14:
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v11);
    v15 = (void *)static PKInkingTool.convertColor(_:from:to:)();

    Color.init(cgColor:)((CGColor *)objc_msgSend(v15, sel_CGColor), (CGColor **)&v73);
    v16 = (CGColor *)v73;
    if ((_QWORD)v73)
    {

      v11 = v16;
LABEL_16:
      v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v11);

      v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(_QWORD *)&v73 = v17;
      outlined init with take of Any(&v73, &v66);
      v18 = swift_isUniquelyReferenced_nonNull_native();
      v72 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v10, v18);
      v78 = v72;

      swift_bridgeObjectRelease();
LABEL_17:
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (v73 != 2 && (v73 & 1) != 0)
      {
        v19 = (void *)*MEMORY[0x1E0DC1248];
        v20 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
        v21 = v19;
        v22 = objc_msgSend(v20, sel_initWithInteger_, 1);
        v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(_QWORD *)&v73 = v22;
        outlined init with take of Any(&v73, &v66);
        v23 = v78;
        v24 = swift_isUniquelyReferenced_nonNull_native();
        v72 = v23;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v21, v24);
        v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (v73 != 2 && (v73 & 1) != 0)
      {
        v25 = (void *)*MEMORY[0x1E0DC11A8];
        v26 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
        v27 = v25;
        v28 = objc_msgSend(v26, sel_initWithInteger_, 1);
        v75 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        *(_QWORD *)&v73 = v28;
        outlined init with take of Any(&v73, &v66);
        v29 = v78;
        v30 = swift_isUniquelyReferenced_nonNull_native();
        v72 = v29;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v27, v30);
        v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      v31 = (void **)MEMORY[0x1E0DC1150];
      v32 = MEMORY[0x1E0DEB070];
      v33 = (void **)MEMORY[0x1E0DC1178];
      if ((BYTE8(v73) & 1) == 0)
      {
        v34 = (void *)*MEMORY[0x1E0DC1150];
        v75 = MEMORY[0x1E0DEB070];
        outlined init with take of Any(&v73, &v66);
        v35 = v34;
        v36 = v78;
        v37 = swift_isUniquelyReferenced_nonNull_native();
        v72 = v36;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v35, v37);
        v38 = v72;

        swift_bridgeObjectRelease();
        v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
        objc_msgSend(v39, sel_setLineBreakMode_, 2);
        v40 = *v33;
        v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
        *(_QWORD *)&v73 = v39;
        outlined init with take of Any(&v73, &v66);
        v41 = v40;
        v42 = v39;
        v43 = swift_isUniquelyReferenced_nonNull_native();
        v72 = v38;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v41, v43);
        v78 = v72;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if ((BYTE8(v73) & 1) != 0)
      {
        v44 = 0;
      }
      else
      {
        v45 = v73;
        v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
        v44 = v46;
        if (v46)
          objc_msgSend(v46, sel_setAlignment_, v45);
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if ((BYTE8(v73) & 1) == 0)
      {
        v47 = v73;
        if (v44)
        {
          v48 = v44;
          v49 = v44;
        }
        else
        {
          v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
          v44 = v50;
          if (!v50)
            goto LABEL_38;
          v49 = v50;
          v48 = 0;
        }
        v51 = v48;

        if (objc_msgSend(v49, sel_alignment) == (id)4)
          objc_msgSend(v49, sel_setAlignment_, 2 * (v47 == 1));
        objc_msgSend(v49, sel_setBaseWritingDirection_, v47);
      }
LABEL_38:
      swift_getKeyPath();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if ((BYTE8(v73) & 1) != 0)
      {
        if (!v44)
          goto LABEL_48;
        v52 = v44;
        v53 = v78;
      }
      else
      {
        v54 = *v31;
        v75 = v32;
        outlined init with take of Any(&v73, &v66);
        v55 = v54;
        v56 = v78;
        v57 = swift_isUniquelyReferenced_nonNull_native();
        v72 = v56;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v55, v57);
        v53 = v72;
        v78 = v72;

        swift_bridgeObjectRelease();
        if (v44)
        {
          v58 = v44;
          v59 = v44;
        }
        else
        {
          v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
          v44 = v60;
          if (!v60)
          {
LABEL_48:

            return;
          }
          v59 = v60;
          v58 = 0;
        }
        v61 = v58;

        objc_msgSend(v59, sel_setLineBreakMode_, 2);
        v52 = v59;
      }
      v62 = *v33;
      v75 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      *(_QWORD *)&v73 = v52;
      outlined init with take of Any(&v73, &v66);
      v63 = v62;
      v64 = v52;
      v65 = swift_isUniquelyReferenced_nonNull_native();
      v72 = v53;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, v63, v65);
      v78 = v72;

      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_51:
  __break(1u);
}

void CRAttributedString<>.updateAttribute<A>(_:range:keypath:)(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char v23;
  void *v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  BOOL v31;
  char *v32;
  void (*v33)(char *, _QWORD);
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char v42[32];

  v40 = a2;
  v41 = a3;
  v36 = a4;
  v37 = a1;
  v7 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a4 + 8);
  v39 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v9, v10);
  v35 = (char *)&v34 - v11;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v34 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a5 + 24))(v7, a5, v20);
  v38 = v5;
  if ((v23 & 1) == 0)
  {
    v26 = v40;
LABEL_5:
    v28 = v37;
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(v7, a5);
    swift_getAssociatedConformanceWitness();
    v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, AssociatedTypeWitness);
    v30 = &v26[v41];
    v31 = __OFADD__(v26, v41);
    if ((v29 & 1) != 0)
    {
      if (!v31)
      {
        if ((uint64_t)v30 >= (uint64_t)v26)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v35, 1, 1, AssociatedTypeWitness);
LABEL_15:
          swift_retain();
          v33 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
          CRAttributedString.Substring.subscript.setter();
          v33(v42, 0);
          return;
        }
        goto LABEL_18;
      }
      __break(1u);
    }
    else if (!v31)
    {
      if ((uint64_t)v30 >= (uint64_t)v26)
      {
        v32 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v35, v28, AssociatedTypeWitness);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v32, 0, 1, AssociatedTypeWitness);
        goto LABEL_15;
      }
      goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v22, v5, v17);
  v24 = (void *)CRAttributedString.attributedString.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
  v25 = objc_msgSend(v24, sel_string);

  if (v25)
  {
    v26 = (char *)objc_msgSend(v25, sel_paragraphRangeForRange_, v40, v41);
    v41 = v27;

    goto LABEL_5;
  }
LABEL_20:
  __break(1u);
}

_QWORD *CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  int v55;
  char v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void (*v78)(char *);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;

  v7 = v6;
  v77 = a4;
  v78 = a3;
  v69 = a2;
  v76 = a5;
  v10 = *a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v79 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v65 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v64 - v16;
  v82 = a6;
  v68 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + v10 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v75 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v21 = (char *)&v64 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v81 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v73 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (uint64_t *)((char *)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v70 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84, v34);
  v36 = (char *)&v64 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v83 = (char *)&v64 - v39;
  if (NSNotFound.getter() == a1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v72 = (void (*)(_QWORD, _QWORD, _QWORD))v30;
  v30 = a1 + v69;
  if (__OFADD__(a1, v69))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v66 = a1;
  v67 = v40;
  CRAttributedString.subscript.getter();
  v41 = v72;
  CRAttributedString.Substring.runs.getter();
  (*(void (**)(_QWORD *, void (*)(_QWORD, _QWORD, _QWORD)))(v73 + 8))(v33, v41);
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v83, v36, v84);
  CRAttributedString.Runs.next()();
  v42 = v81;
  v73 = *(_QWORD *)(v81 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v73)(v29, 1, v22) != 1)
  {
    v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(v42 + 32);
    v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v71 = v7;
    while (1)
    {
      v72(v25, v29, v22);
      CRAttributedString.Runs.Run.attributes.getter();
      v78(v17);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v17, v80);
      v30 = (uint64_t)v25;
      v47 = (char *)CRAttributedString.Runs.Run.range.getter();
      if (__OFSUB__(v48, v47))
        break;
      CRAttributedString<>.updateAttribute<A>(_:range:keypath:)((uint64_t)v21, v47, v48 - (_QWORD)v47, v76, v82);
      v50 = v49;
      v36 = v51;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v75);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
      v53 = v33[2];
      v52 = v33[3];
      if (v53 >= v52 >> 1)
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v33);
      v33[2] = v53 + 1;
      v54 = &v33[2 * v53];
      v54[4] = v50;
      v54[5] = v36;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v25, v22);
      CRAttributedString.Runs.next()();
      v55 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73)(v29, 1, v22);
      v7 = v71;
      if (v55 == 1)
        goto LABEL_5;
    }
    __break(1u);
    goto LABEL_27;
  }
  v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_5:
  (*(void (**)(char *, uint64_t))(v70 + 8))(v83, v84);
  if (((*(uint64_t (**)(void))(v82 + 24))() & 1) != 0)
  {
    v43 = (void *)CRAttributedString.attributedString.getter();
    v44 = objc_msgSend(v43, sel_string);

    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v46;

    if (!v45 && v17 == (char *)0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      return v33;
    }
    v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v56 & 1) == 0 && !v69 && CRAttributedString.count.getter() >= v66)
    {
      v30 = v7;
      if (!__OFSUB__(CRAttributedString.count.getter(), 1))
      {
        v36 = v65;
        v57 = (char *)v66;
        CRAttributedString.attributes(at:effectiveRange:)();
        v78(v36);
        CRAttributedString<>.updateAttribute<A>(_:range:keypath:)((uint64_t)v21, v57, 0, v76, v82);
        v17 = v58;
        v30 = v59;
        (*(void (**)(char *, uint64_t))(v74 + 8))(v21, v75);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_22:
          v61 = v33[2];
          v60 = v33[3];
          if (v61 >= v60 >> 1)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v60 > 1), v61 + 1, 1, v33);
          v33[2] = v61 + 1;
          v62 = &v33[2 * v61];
          v62[4] = v17;
          v62[5] = v30;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v36, v80);
          return v33;
        }
LABEL_30:
        v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
        goto LABEL_22;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  return v33;
}

uint64_t static TextAttributeScope.ColorAttribute.name.getter()
{
  return 0x726F6C6F63;
}

void one-time initialization function for defaultValue()
{
  Color.init(red:green:blue:alpha:)((CGColorRef *)&static TextAttributeScope.ColorAttribute.defaultValue, 0.0, 0.0, 0.0, 1.0);
}

id static TextAttributeScope.ColorAttribute.defaultValue.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
  *a1 = static TextAttributeScope.ColorAttribute.defaultValue;
  return v2;
}

uint64_t static TextAttributeScope.ColorAttribute.isParagraphAttribute.getter()
{
  return 0;
}

id protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.ColorAttribute@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
  *a1 = static TextAttributeScope.ColorAttribute.defaultValue;
  return v2;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.ColorAttribute()
{
  return 0x726F6C6F63;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.ColorAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.FontAttribute.name.getter()
{
  return 1953394534;
}

float one-time initialization function for defaultValue()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  Swift::String v10;
  Swift::String v11;
  Swift::Bool v12;
  float result;

  if (one-time initialization token for textBoxDefaultFont != -1)
    swift_once();
  v0 = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_fontName);
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  v4 = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_familyName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
  v9 = v8;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  LOBYTE(v4) = String.hasPrefix(_:)(v10);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v1 = 0;
    v3 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  v12 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = 0;
  }
  result = v9;
  static TextAttributeScope.FontAttribute.defaultValue = v1;
  qword_1F0411B60 = v3;
  qword_1F0411B68 = v5;
  qword_1F0411B70 = v7;
  dword_1F0411B78 = LODWORD(result);
  qword_1F0411B80 = 0;
  return result;
}

uint64_t static TextAttributeScope.FontAttribute.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = qword_1F0411B70;
  v3 = dword_1F0411B78;
  v4 = qword_1F0411B80;
  *(_QWORD *)a1 = static TextAttributeScope.FontAttribute.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_1F0411B60;
  *(_QWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static TextAttributeScope.FontAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.FontAttribute@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  if (one-time initialization token for defaultValue != -1)
    swift_once();
  v2 = qword_1F0411B70;
  v3 = dword_1F0411B78;
  v4 = qword_1F0411B80;
  *(_QWORD *)a1 = static TextAttributeScope.FontAttribute.defaultValue;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&qword_1F0411B60;
  *(_QWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.FontAttribute()
{
  return 1953394534;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.FontAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.UnderlineAttribute.name.getter()
{
  return 0x6E696C7265646E75;
}

uint64_t static TextAttributeScope.UnderlineAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.UnderlineAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.UnderlineAttribute()
{
  return 0x6E696C7265646E75;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.UnderlineAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.StrikethroughAttribute.name.getter()
{
  return 0x6874656B69727473;
}

uint64_t static TextAttributeScope.StrikethroughAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.StrikethroughAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.StrikethroughAttribute()
{
  return 0x6874656B69727473;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.StrikethroughAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.name.getter()
{
  return 0x6F69746365726964;
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.defaultValue.getter()
{
  return 0;
}

uint64_t static TextAttributeScope.WritingDirectionAttribute.isParagraphAttribute.getter()
{
  return 1;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.WritingDirectionAttribute()
{
  return 0x6F69746365726964;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.WritingDirectionAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.AlignmentAttribute.name.getter()
{
  return 0x6E656D6E67696C61;
}

uint64_t static TextAttributeScope.AlignmentAttribute.defaultValue.getter()
{
  return 4;
}

uint64_t static TextAttributeScope.AlignmentAttribute.isParagraphAttribute.getter()
{
  return 1;
}

void protocol witness for static CRDefaultedAttributeStringKey.defaultValue.getter in conformance TextAttributeScope.AlignmentAttribute(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.AlignmentAttribute()
{
  return 0x6E656D6E67696C61;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.AlignmentAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

uint64_t static TextAttributeScope.KernAttribute.name.getter()
{
  return 1852990827;
}

double static TextAttributeScope.KernAttribute.defaultValue.getter()
{
  return 0.0;
}

uint64_t static TextAttributeScope.KernAttribute.isParagraphAttribute.getter()
{
  return 0;
}

uint64_t protocol witness for static CRAttributeStringKey.name.getter in conformance TextAttributeScope.KernAttribute()
{
  return 1852990827;
}

uint64_t protocol witness for static CRAttributeStringDecodingKey.loadAttribute(from:) in conformance TextAttributeScope.KernAttribute()
{
  lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
  return static CRAttributeStringKey.loadAttribute(from:)();
}

unint64_t one-time initialization function for attributeTypes()
{
  uint64_t inited;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CRAttributeStringDecodingKey.Type)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF354F0;
  *(_QWORD *)(inited + 32) = 0x726F6C6F63;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v1 = lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  *(_QWORD *)(inited + 48) = &type metadata for TextAttributeScope.ColorAttribute;
  *(_QWORD *)(inited + 56) = v1;
  *(_QWORD *)(inited + 64) = 1953394534;
  *(_QWORD *)(inited + 72) = 0xE400000000000000;
  v2 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  *(_QWORD *)(inited + 80) = &type metadata for TextAttributeScope.FontAttribute;
  *(_QWORD *)(inited + 88) = v2;
  *(_QWORD *)(inited + 96) = 0x6E696C7265646E75;
  *(_QWORD *)(inited + 104) = 0xE900000000000065;
  v3 = lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  *(_QWORD *)(inited + 112) = &type metadata for TextAttributeScope.UnderlineAttribute;
  *(_QWORD *)(inited + 120) = v3;
  strcpy((char *)(inited + 128), "strikethrough");
  *(_WORD *)(inited + 142) = -4864;
  v4 = lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  *(_QWORD *)(inited + 144) = &type metadata for TextAttributeScope.StrikethroughAttribute;
  *(_QWORD *)(inited + 152) = v4;
  *(_QWORD *)(inited + 160) = 0x6E656D6E67696C61;
  *(_QWORD *)(inited + 168) = 0xE900000000000074;
  v5 = lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  *(_QWORD *)(inited + 176) = &type metadata for TextAttributeScope.AlignmentAttribute;
  *(_QWORD *)(inited + 184) = v5;
  *(_QWORD *)(inited + 192) = 0x6F69746365726964;
  *(_QWORD *)(inited + 200) = 0xE90000000000006ELL;
  v6 = lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  *(_QWORD *)(inited + 208) = &type metadata for TextAttributeScope.WritingDirectionAttribute;
  *(_QWORD *)(inited + 216) = v6;
  *(_QWORD *)(inited + 224) = 1852990827;
  *(_QWORD *)(inited + 232) = 0xE400000000000000;
  v7 = lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
  *(_QWORD *)(inited + 240) = &type metadata for TextAttributeScope.KernAttribute;
  *(_QWORD *)(inited + 248) = v7;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static TextAttributeScope.attributeTypes = result;
  return result;
}

uint64_t static TextAttributeScope.attributeTypes.getter()
{
  if (one-time initialization token for attributeTypes != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static TextAttributeScope.attributeTypes.setter(uint64_t a1)
{
  if (one-time initialization token for attributeTypes != -1)
    swift_once();
  swift_beginAccess();
  static TextAttributeScope.attributeTypes = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TextAttributeScope.attributeTypes.modify())()
{
  if (one-time initialization token for attributeTypes != -1)
    swift_once();
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t (*TextAttributeScope.color.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.font.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.underline.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.strikethrough.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.alignment.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.writingDirection.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t (*TextAttributeScope.kern.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t protocol witness for static CRAttributeStringAttributeScope.attributeTypes.getter in conformance TextAttributeScope()
{
  if (one-time initialization token for attributeTypes != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance NSWritingDirection()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance NSWritingDirection()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance NSWritingDirection()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance NSWritingDirection()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance NSTextAlignment()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance NSTextAlignment()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance NSTextAlignment()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance NSTextAlignment()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t closure #1 in CRAttributedString.Runs<>.familyNames.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v7 = v13;
  if (v13 == 1
    || (v9 = v14, v8 = v15, v10 = v12, swift_bridgeObjectRetain(), result = outlined consume of Font?(v10, v7), !v8))
  {
    result = swift_bridgeObjectRelease();
    v8 = 0xE900000000000061;
    v9 = 0x63697465766C6548;
  }
  *a1 = v9;
  a1[1] = v8;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.fontSizes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v11 == 1)
  {
    if (one-time initialization token for textBoxDefaultPointSize != -1)
      result = swift_once();
    v8 = *(double *)&static UIConstants.textBoxDefaultPointSize;
    v9 = v8;
  }
  else
  {
    v9 = *(float *)&v12;
    result = outlined consume of Font?(v10, v11);
  }
  *(float *)a1 = v9;
  *(_BYTE *)(a1 + 4) = 0;
  return result;
}

id closure #1 in CRAttributedString.Runs<>.fontColors.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  result = (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v8 = v10;
  if (!v10)
  {
    if (one-time initialization token for defaultValue != -1)
      swift_once();
    v8 = static TextAttributeScope.ColorAttribute.defaultValue;
    result = (id)static TextAttributeScope.ColorAttribute.defaultValue;
  }
  *a1 = v8;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.isBold.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isBold.getter(a1, (uint64_t (*)(uint64_t))Font.supportsBold.getter, &static Font.Traits.bold, a2);
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsBold.getter@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.supportsBold.getter((uint64_t (*)(uint64_t))Font.supportsBold.getter, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isItalic.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isBold.getter(a1, (uint64_t (*)(uint64_t))Font.supportsItalic.getter, &static Font.Traits.italic, a2);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isBold.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t *v34;
  char *v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v34 = a3;
  v36 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v35 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v32 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v32 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v17, v6);
  v20 = v44;
  result = outlined consume of Font?(v43, v44);
  if (v20 == 1)
  {
    v22 = 0;
LABEL_9:
    *a4 = v22;
    return result;
  }
  v32[1] = a1;
  v33 = a4;
  v32[0] = v18;
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  result = ((uint64_t (*)(char *, uint64_t))v19)(v13, v6);
  v23 = v44;
  if (v44 == 1)
  {
    __break(1u);
  }
  else
  {
    v24 = v43;
    v37 = v43;
    v38 = v44;
    v39 = v45;
    v40 = v46;
    v41 = v47;
    v42 = v48;
    v25 = v36(result);
    result = outlined consume of Font?(v24, v23);
    if ((v25 & 1) == 0)
    {
      v22 = 2;
      goto LABEL_8;
    }
    v26 = v35;
    CRAttributedString.Runs.Run.attributes.getter();
    swift_getKeyPath();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    result = ((uint64_t (*)(char *, uint64_t))v19)(v26, v6);
    v27 = v44;
    if (v44 != 1)
    {
      v28 = v48;
      v29 = v43;
      v30 = v34;
      swift_beginAccess();
      v31 = *v30;
      result = outlined consume of Font?(v29, v27);
      v22 = (v31 & ~v28) == 0;
LABEL_8:
      a4 = v33;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsItalic.getter@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.supportsBold.getter((uint64_t (*)(uint64_t))Font.supportsItalic.getter, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.supportsBold.getter@<X0>(uint64_t (*a1)(uint64_t)@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[4];
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v10 = v17;
  if (v17 == 1)
  {
    v11 = 1;
  }
  else
  {
    v12 = v16;
    v13[0] = v16;
    v13[1] = v17;
    v13[2] = v18;
    v13[3] = v19;
    v14 = v20;
    v15 = v21;
    v11 = a1(result);
    result = outlined consume of Font?(v12, v10);
  }
  *a2 = v11 & 1;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.isUndlerline.getter@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isUndlerline.getter((void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isStrikethrough.getter@<X0>(_BYTE *a1@<X8>)
{
  return closure #1 in CRAttributedString.Runs<>.isUndlerline.getter((void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute, a1);
}

uint64_t closure #1 in CRAttributedString.Runs<>.isUndlerline.getter@<X0>(void (*a1)(void)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t result;
  char v5;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  a1();
  CRAttributedString.Runs.Run.subscript.getter();
  result = swift_release();
  *a2 = v5 & 1;
  return result;
}

uint64_t closure #1 in CRAttributedString.Runs<>.alignments.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  CRAttributedString.Runs.Run.attributes.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (v10)
    v8 = 0;
  else
    v8 = v9;
  *a1 = v8;
  return result;
}

id CRAttributedString<>.nsAttributedString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  char v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  id v41;
  id v42;
  id v43;
  char v44;
  id v45;
  id v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id result;
  uint64_t v52;
  Class isa;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  char *v59;
  char *v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  id v65;
  void (*v66)(char *, char *, uint64_t);
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  id v68;
  char *v69;
  unint64_t v70;
  _OWORD v71[2];
  __int128 v72;
  uint64_t v73;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v55 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v12 = (void *)CRAttributedString.attributedString.getter();
  v13 = objc_msgSend(v12, sel_string);

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  v18 = (void *)MEMORY[0x1DF0E41AC](v14, v16);
  swift_bridgeObjectRelease();
  v19 = v17;
  v20 = v61;
  v68 = objc_msgSend(v19, sel_initWithString_, v18);

  CRAttributedString.runs.getter();
  v69 = v11;
  CRAttributedString.Runs.next()();
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
  if (v67(v8, 1, v0) == 1)
  {
LABEL_17:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v69, v20);
    return v68;
  }
  else
  {
    v66 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
    v58 = (id)*MEMORY[0x1E0DC1138];
    v62 = (id)*MEMORY[0x1E0DC1140];
    v57 = (id)*MEMORY[0x1E0DC1248];
    v56 = (id)*MEMORY[0x1E0DC11A8];
    v65 = (id)*MEMORY[0x1E0DC1178];
    v64 = MEMORY[0x1E0DEE9B8] + 8;
    v60 = v4;
    v59 = v8;
    while (1)
    {
      v66(v4, v8, v0);
      v21 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      v22 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) != 1)
      {
        v23 = v0;
        v24 = v1;
        v25 = v72;
        v63 = v58;
        v26 = Font.platformFont.getter();
        v27 = v25;
        v1 = v24;
        v0 = v23;
        v8 = v59;
        v4 = v60;
        v20 = v61;
        outlined consume of Font?(v27, v22);
        v73 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
        *(_QWORD *)&v72 = v26;
        outlined init with take of Any(&v72, v71);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        v29 = v63;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v63, isUniquelyReferenced_nonNull_native);
        v21 = v70;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      v30 = (void *)v72;
      if ((_QWORD)v72)
      {
        v31 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
        v32 = v62;
        v33 = objc_msgSend(v31, sel_initWithCGColor_, v30);
        v73 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        *(_QWORD *)&v72 = v33;
        outlined init with take of Any(&v72, v71);
        v34 = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v32, v34);
        v21 = v70;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      if (v72 != 2)
      {
        type metadata accessor for NSUnderlineStyle(0);
        v73 = v35;
        *(_QWORD *)&v72 = 1;
        outlined init with take of Any(&v72, v71);
        v36 = v57;
        v37 = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v36, v37);
        v21 = v70;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      if (v72 != 2)
      {
        type metadata accessor for NSUnderlineStyle(0);
        v73 = v38;
        *(_QWORD *)&v72 = 1;
        outlined init with take of Any(&v72, v71);
        v39 = v56;
        v40 = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v39, v40);
        v21 = v70;

        swift_bridgeObjectRelease();
      }
      v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      if (BYTE8(v72) != 1)
      {
        objc_msgSend(v41, sel_setBaseWritingDirection_, (_QWORD)v72);
        v73 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
        *(_QWORD *)&v72 = v41;
        outlined init with take of Any(&v72, v71);
        v42 = v65;
        v43 = v41;
        v44 = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v42, v44);
        v21 = v70;

        swift_bridgeObjectRelease();
      }
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Runs.Run.subscript.getter();
      swift_release();
      if (BYTE8(v72) != 1)
      {
        objc_msgSend(v41, sel_setAlignment_, (_QWORD)v72);
        v73 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
        *(_QWORD *)&v72 = v41;
        outlined init with take of Any(&v72, v71);
        v45 = v41;
        v46 = v65;
        v47 = swift_isUniquelyReferenced_nonNull_native();
        v70 = v21;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v71, v46, v47);

        swift_bridgeObjectRelease();
      }
      v48 = CRAttributedString.Runs.Run.range.getter();
      CRAttributedString.Runs.Run.range.getter();
      v50 = v49;
      result = (id)CRAttributedString.Runs.Run.range.getter();
      v52 = v50 - (_QWORD)result;
      if (__OFSUB__(v50, result))
        break;
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v68, sel_addAttributes_range_, isa, v48, v52);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
      CRAttributedString.Runs.next()();
      if (v67(v8, 1, v0) == 1)
        goto LABEL_17;
    }
    __break(1u);
  }
  return result;
}

char *CRAttributedString<>.nsTypAttributes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  char v19;
  void *v20;
  uint64_t v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v25;
  id v26;
  char v27;
  id v28;
  void **v29;
  void *v30;
  id v31;
  id v32;
  char v33;
  void *v34;
  id v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  uint64_t v44;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v5 = (void *)CRAttributedString.attributedString.getter();
  v6 = (char *)objc_msgSend(v5, sel_length);

  result = v6 - 1;
  if (__OFSUB__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    CRAttributedString.attributes(at:effectiveRange:)();
    v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    v9 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) != 1)
    {
      v39 = v0;
      v40 = v1;
      v10 = v43;
      v11 = (id)*MEMORY[0x1E0DC1138];
      v12 = Font.platformFont.getter();
      v0 = v39;
      v1 = v40;
      outlined consume of Font?(v10, v9);
      v44 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
      *(_QWORD *)&v43 = v12;
      outlined init with take of Any(&v43, v42);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v11, isUniquelyReferenced_nonNull_native);
      v8 = v41;

      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    v14 = (void *)v43;
    if ((_QWORD)v43)
    {
      v15 = (void *)*MEMORY[0x1E0DC1140];
      v16 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
      v17 = v15;
      v18 = objc_msgSend(v16, sel_initWithCGColor_, v14);
      v44 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(_QWORD *)&v43 = v18;
      outlined init with take of Any(&v43, v42);
      v19 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v17, v19);
      v8 = v41;

      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if (v43 != 2)
    {
      v20 = (void *)*MEMORY[0x1E0DC1248];
      type metadata accessor for NSUnderlineStyle(0);
      v44 = v21;
      *(_QWORD *)&v43 = 1;
      outlined init with take of Any(&v43, v42);
      v22 = v20;
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v22, v23);
      v8 = v41;

      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if (v43 != 2)
    {
      v24 = (void *)*MEMORY[0x1E0DC11A8];
      type metadata accessor for NSUnderlineStyle(0);
      v44 = v25;
      *(_QWORD *)&v43 = 1;
      outlined init with take of Any(&v43, v42);
      v26 = v24;
      v27 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v26, v27);
      v8 = v41;

      swift_bridgeObjectRelease();
    }
    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    v29 = (void **)MEMORY[0x1E0DC1178];
    if (BYTE8(v43) != 1)
    {
      objc_msgSend(v28, sel_setBaseWritingDirection_, (_QWORD)v43);
      v30 = *v29;
      v44 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      *(_QWORD *)&v43 = v28;
      outlined init with take of Any(&v43, v42);
      v31 = v30;
      v32 = v28;
      v33 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v31, v33);
      v8 = v41;

      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if (BYTE8(v43) == 1)
    {
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);

    }
    else
    {
      objc_msgSend(v28, sel_setAlignment_, (_QWORD)v43);
      v34 = *v29;
      v44 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
      *(_QWORD *)&v43 = v28;
      outlined init with take of Any(&v43, v42);
      v35 = v28;
      v36 = v34;
      v37 = swift_isUniquelyReferenced_nonNull_native();
      v41 = v8;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v42, v36, v37);
      v8 = v41;

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
    return (char *)v8;
  }
  return result;
}

void CRAttributedString.Attributes<>.fontWithSize(_:)(uint64_t a1@<X8>, float a2@<S0>)
{
  void *object;
  PaperKit::Font *v5;
  Swift::String_optional familyName;
  Swift::Int rawValue;
  uint64_t v8;
  void *v9;
  Swift::String_optional v10;
  Swift::Int v11;
  PaperKit::Font v12;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  object = v9;
  if (v9 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    v5 = &v12;
    Font.init(_:)(&v12, (UIFont)(id)static UIConstants.textBoxDefaultFont);
    object = v12._name.value._object;
    familyName = v12._familyName;
    rawValue = v12.traits.rawValue;
  }
  else
  {
    rawValue = v11;
    v5 = (PaperKit::Font *)&v8;
    familyName = v10;
  }
  *(_QWORD *)a1 = v5->_name.value._countAndFlagsBits;
  *(_QWORD *)(a1 + 8) = object;
  *(Swift::String_optional *)(a1 + 16) = familyName;
  *(float *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = rawValue;
}

Swift::Float CRAttributedString.Attributes<>.fontWithFamily(_:)@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::Float result;
  Swift::Int rawValue;
  Swift::String_optional familyName;
  uint64_t v9;
  void *v10;
  Swift::String_optional v11;
  Swift::Float v12;
  Swift::Int v13;
  PaperKit::Font v14;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v10 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    Font.init(_:)(&v14, (UIFont)(id)static UIConstants.textBoxDefaultFont);
  }
  else
  {
    v14._name.value._countAndFlagsBits = v9;
    v14._name.value._object = v10;
    v14._familyName = v11;
    v14.pointSize = v12;
    v14.traits.rawValue = v13;
  }
  swift_bridgeObjectRetain();
  Font.familyName.setter(a1, a2);
  result = v14.pointSize;
  rawValue = v14.traits.rawValue;
  familyName = v14._familyName;
  *(Swift::String_optional *)a3 = v14._name;
  *(Swift::String_optional *)(a3 + 16) = familyName;
  *(Swift::Float *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = rawValue;
  return result;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1DDD1D354(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1DDD1D538);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09D0]);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for CRKeyPath();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C90]);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for NSObject);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for CRAsset();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12978]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(a1, sel_hash));
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v2);
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.AlignmentAttribute, &type metadata for TextAttributeScope.AlignmentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.AlignmentAttribute, &type metadata for TextAttributeScope.AlignmentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.AlignmentAttribute, &type metadata for TextAttributeScope.AlignmentAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.WritingDirectionAttribute, &type metadata for TextAttributeScope.WritingDirectionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.WritingDirectionAttribute, &type metadata for TextAttributeScope.WritingDirectionAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.KernAttribute, &type metadata for TextAttributeScope.KernAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute;
  if (!lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextAttributeScope.KernAttribute, &type metadata for TextAttributeScope.KernAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute);
  }
  return result;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))FormAnalyticsKeys.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))AnalyticsKeys.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _BYTE v10[72];

  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt *a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  type metadata accessor for PDFPageID();
  type metadata accessor for CRAsset();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  dispatch thunk of Hashable.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;

  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<DrawingIdentifier, CalculateDocumentController>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v6 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((v6 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v31, sel_hash));
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v32;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v6 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<NSAttributedStringKey, Any>);
  v35 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    v24 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v33 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v33 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_34;
      v20 = *(_QWORD *)(v33 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v33 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v14 >= v11)
              goto LABEL_34;
            v20 = *(_QWORD *)(v33 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v14 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((a2 & 1) != 0)
    {
      outlined init with take of Any(v23, v34);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v34);
      v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
    result = (uint64_t)outlined init with take of Any(v34, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (CGRect, CGFloat)>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v36 = *(_OWORD *)(v31 + 16);
    v37 = *(_OWORD *)v31;
    v32 = *(_QWORD *)(v31 + 32);
    if ((a2 & 1) == 0)
      v33 = v30;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v18;
    *(_OWORD *)v19 = v37;
    *(_OWORD *)(v19 + 16) = v36;
    *(_QWORD *)(v19 + 32) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, StickerDropPreviewInfo>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v35 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v35 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v35 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v35 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = *(_QWORD *)(v5 + 56) + 40 * v21;
    v36 = *(_OWORD *)(v31 + 16);
    v37 = *(_OWORD *)v31;
    v32 = *(_QWORD *)(v31 + 32);
    if ((a2 & 1) == 0)
      v33 = v30;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = *(_QWORD *)(v7 + 56) + 40 * v18;
    *(_OWORD *)v19 = v37;
    *(_OWORD *)(v19 + 16) = v36;
    *(_QWORD *)(v19 + 32) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<NSObject, Swift.AnyObject>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      swift_unknownObjectRetain();
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFDocumentWriteOption, Swift.AnyObject>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v34;
              if ((v37 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = 8 * v21;
      v30 = *(void **)(*(_QWORD *)(v5 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        v32 = v30;
        swift_unknownObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      v14 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, AsyncCache<Data, CGImageRef>.CacheState>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_33;
        v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_33;
          v23 = v36[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v37 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v35)
                  goto LABEL_33;
                v23 = v36[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v31 = *(_QWORD *)v30;
      v32 = *(void **)(v30 + 8);
      v33 = *(_BYTE *)(v30 + 16);
      v38 = v29;
      if ((v37 & 1) == 0)
      {
        outlined copy of Data._Representation(v29, *((unint64_t *)&v29 + 1));
        outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v31, v32, v33);
      }
      Hasher.init(_seed:)();
      Data.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v38;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        v18 = v38;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v31;
      *(_QWORD *)(v19 + 8) = v32;
      *(_BYTE *)(v19 + 16) = v33;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Data, String>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_31;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v40 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_33;
      v26 = *(_QWORD *)(v40 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v6 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = *(_QWORD *)(v40 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_42;
            if (v14 >= v39)
              goto LABEL_33;
            v26 = *(_QWORD *)(v40 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_30;
          }
        }
        v14 = v27;
      }
    }
LABEL_30:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_31:
    v32 = 16 * v23;
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v32);
    v34 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v35 = *v34;
    v36 = v34[1];
    v41 = v33;
    if ((v6 & 1) == 0)
    {
      outlined copy of Data._Representation(v33, *((unint64_t *)&v33 + 1));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v41;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      v19 = v41;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v20 = 16 * v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + v20) = v19;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v20);
    *v21 = v35;
    v21[1] = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v38;
  v25 = (_QWORD *)(v5 + 64);
  if ((v6 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PaperKitPDFPage, PageOverlayView>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v15 << 6);
      }
      else
      {
        v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12)
          goto LABEL_33;
        v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          v15 = v22 + 1;
          if (v22 + 1 >= v12)
            goto LABEL_33;
          v23 = v9[v15];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                v15 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v15 >= v12)
                  goto LABEL_33;
                v23 = v9[v15];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v15 = v24;
          }
        }
LABEL_30:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      v29 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
      {
        v30 = v29;
        v31 = (id)v34;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v19) = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  id *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v48 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, SortableCalculateExpression>);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_34;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_34:
          swift_release();
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v18 >= v44)
              goto LABEL_34;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v18 = v26;
      }
    }
LABEL_21:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v5);
      v29 = (id *)(*(_QWORD *)(v9 + 56) + 24 * v22);
      v31 = *v29;
      v30 = v29[1];
      v32 = v29[2];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v5);
      v33 = *(_QWORD *)(v9 + 56) + 24 * v22;
      v31 = *(id *)v33;
      v30 = *(id *)(v33 + 8);
      v32 = *(id *)(v33 + 16);
      v34 = *(id *)v33;
      swift_retain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v5);
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 56) + 24 * v19);
    *v20 = v31;
    v20[1] = v30;
    v20[2] = v32;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  char v42[8];

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, WeakCalculateExpression>);
  v41 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v40 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v38 = v2;
  v39 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = v40;
    v25 = v40[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_34;
      v25 = v40[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v39)
              goto LABEL_34;
            v25 = v40[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      outlined init with take of WeakCalculateExpression(*(_QWORD *)(v10 + 56) + 8 * v22, (uint64_t)v42);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      outlined init with copy of WeakCalculateExpression();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    result = outlined init with take of WeakCalculateExpression((uint64_t)v42, *(_QWORD *)(v12 + 56) + 8 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v38;
  v24 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  __int128 v42[2];

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CalculateMathItem>);
  v41 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v40 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v38 = v2;
  v39 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = v40;
    v25 = v40[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_34;
      v25 = v40[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v39)
              goto LABEL_34;
            v25 = v40[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      outlined init with take of FindResult((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v22), (uint64_t)v42);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      outlined init with copy of FindResult(*(_QWORD *)(v10 + 56) + 40 * v22, (uint64_t)v42);
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    result = outlined init with take of FindResult(v42, *(_QWORD *)(v12 + 56) + 40 * v20);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v38;
  v24 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  char *v45;
  uint64_t v46;

  v3 = v2;
  v46 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v6);
  v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, UUID>);
  v44 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v41 = v2;
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 64);
    v43 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v42 = (unint64_t)(v11 + 63) >> 6;
    v15 = v9 + 64;
    result = swift_retain();
    v17 = 0;
    while (1)
    {
      if (v14)
      {
        v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v21 = v20 | (v17 << 6);
      }
      else
      {
        v22 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v42)
          goto LABEL_34;
        v23 = v43[v22];
        ++v17;
        if (!v23)
        {
          v17 = v22 + 1;
          if (v22 + 1 >= v42)
            goto LABEL_34;
          v23 = v43[v17];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v42)
            {
LABEL_34:
              swift_release();
              v3 = v41;
              if ((v44 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v8 + 32);
                if (v39 >= 64)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v23 = v43[v24];
            if (!v23)
            {
              while (1)
              {
                v17 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v17 >= v42)
                  goto LABEL_34;
                v23 = v43[v17];
                ++v24;
                if (v23)
                  goto LABEL_21;
              }
            }
            v17 = v24;
          }
        }
LABEL_21:
        v14 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v17 << 6);
      }
      v25 = *(_QWORD *)(v8 + 56);
      v26 = v8;
      v27 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
      v29 = *v27;
      v28 = v27[1];
      v30 = *(_QWORD *)(v5 + 72);
      v31 = v25 + v30 * v21;
      if ((v44 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v45, v31, v46);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v45, v31, v46);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v32 = -1 << *(_BYTE *)(v10 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v15 + 8 * v34);
        }
        while (v38 == -1);
        v18 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
      *v19 = v29;
      v19[1] = v28;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 56) + v30 * v18, v45, v46);
      ++*(_QWORD *)(v10 + 16);
      v8 = v26;
    }
  }
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, CGAffineTransform>);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_40;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v49 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v47 = v2;
  v48 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  v46 = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v50 = v20;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v25 >= v48)
      break;
    v26 = v49;
    v27 = v49[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v48)
        goto LABEL_33;
      v27 = v49[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v48)
        {
LABEL_33:
          swift_release();
          v3 = v47;
          if ((v46 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v27 = v49[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_42;
            if (v19 >= v48)
              goto LABEL_33;
            v27 = v49[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v50))(v9, *(_QWORD *)(v10 + 48) + v29 * v24, v5);
    v30 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 48 * v24);
    v32 = v30[4];
    v31 = v30[5];
    v34 = v30[2];
    v33 = v30[3];
    v36 = *v30;
    v35 = v30[1];
    lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v37 = -1 << *(_BYTE *)(v12 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v17 + 8 * (v38 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v17 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v17 + 8 * v39);
      }
      while (v43 == -1);
      v21 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v29 * v21, v9, v5);
    v22 = (_QWORD *)(*(_QWORD *)(v12 + 56) + 48 * v21);
    *v22 = v36;
    v22[1] = v35;
    v22[2] = v34;
    v22[3] = v33;
    v22[4] = v32;
    v22[5] = v31;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v47;
  v26 = v49;
  if ((v46 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v44 = 1 << *(_BYTE *)(v10 + 32);
  if (v44 >= 64)
    bzero(v26, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v44;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, FormPageAnalytics>);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_22;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_34;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_43;
            if (v19 >= v40)
              goto LABEL_34;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_21;
          }
        }
        v19 = v26;
      }
    }
LABEL_21:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_22:
    v27 = *(_QWORD *)(v6 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v43 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v28, v5);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_retain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v12 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v17 + 8 * v32);
      }
      while (v36 == -1);
      v20 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v5);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v10 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for PDFPageID();
  v41 = *(_QWORD *)(v5 - 8);
  v42 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (Swift::UInt *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PDFPageID, Int>);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v41 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v43 & 1) != 0)
      outlined init with take of PDFPageID(v27, (uint64_t)v8);
    else
      outlined init with copy of PDFPageID(v27, (uint64_t)v8);
    v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*v8);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
    dispatch thunk of Hashable.hash(into:)();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = outlined init with take of PDFPageID((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>, &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Ref<PDFAnnotationElement>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, SharedTagged_9<TaggedCanvasElement>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, PDFAnnotation>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[4];
  int v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v52 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for UUID();
  v51 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v44[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CheckedContinuation<CGImageRef?, Never>>);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_41;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v48 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v46 = v2;
  v47 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v50 = v12;
  result = swift_retain();
  v21 = 0;
  v45 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v49 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_24;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v47)
      break;
    v28 = v48;
    v29 = v48[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v47)
        goto LABEL_34;
      v29 = v48[v21];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v47)
        {
LABEL_34:
          v42 = v50;
          swift_release();
          v3 = v46;
          if ((v45 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v29 = v48[v30];
        if (!v29)
        {
          while (1)
          {
            v21 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_43;
            if (v21 >= v47)
              goto LABEL_34;
            v29 = v48[v21];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v21 = v30;
      }
    }
LABEL_23:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_24:
    v31 = v50;
    v32 = *(_QWORD *)(v51 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v51 + v23))(v11, *(_QWORD *)(v50 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v53 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v53 + v23))(v52, v33 + v34 * v26, v54);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v24 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v51 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v11, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v53 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v52, v54);
    ++*(_QWORD *)(v14 + 16);
  }
  v42 = v50;
  swift_release();
  v3 = v46;
  v28 = v48;
  if ((v45 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v43 = 1 << *(_BYTE *)(v42 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v42 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v14;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 *v33;
  __int128 v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  int v47;
  __int128 v48;
  __int128 v49;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, CanvasCollaborationStateView.CollaborationCursor>);
  v47 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v44 = v2;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_34;
      v27 = v46[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          swift_release();
          v3 = v44;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v19 >= v45)
              goto LABEL_34;
            v27 = v46[v19];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v19 = v28;
      }
    }
LABEL_21:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v6 + 72);
    v30 = *(_QWORD *)(v10 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v9, v30, v5);
      v31 = (__int128 *)(*(_QWORD *)(v10 + 56) + 32 * v24);
      v32 = v31[1];
      v48 = *v31;
      v49 = v32;
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, v30, v5);
      v33 = (__int128 *)(*(_QWORD *)(v10 + 56) + 32 * v24);
      v34 = v33[1];
      v48 = *v33;
      v49 = v34;
      swift_bridgeObjectRetain();
      v35 = *((id *)&v48 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v36 = -1 << *(_BYTE *)(v12 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v12 + 48) + v29 * v20, v9, v5);
    v21 = (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20);
    v22 = v49;
    *v21 = v48;
    v21[1] = v22;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v44;
  v26 = v46;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v43 = 1 << *(_BYTE *)(v10 + 32);
  if (v43 >= 64)
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v43;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;
  int v50;

  v48 = a5;
  v49 = a6;
  v8 = v6;
  v47 = a3;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v43 - v13;
  v15 = *v6;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v50 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v45 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v43 = v6;
  v44 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v44)
      break;
    v29 = v45;
    v30 = v45[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v44)
        goto LABEL_34;
      v30 = v45[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v44)
        {
LABEL_34:
          swift_release();
          v8 = v43;
          if ((v50 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v30 = v45[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_43;
            if (v24 >= v44)
              goto LABEL_34;
            v30 = v45[v24];
            ++v31;
            if (v30)
              goto LABEL_21;
          }
        }
        v24 = v31;
      }
    }
LABEL_21:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    v32 = *(_QWORD *)(v11 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v14, v33, v10);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, v33, v10);
      v34 = *(id *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v35 = -1 << *(_BYTE *)(v17 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v22 + 8 * v37);
      }
      while (v41 == -1);
      v25 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v10);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release();
  v8 = v43;
  v29 = v45;
  if ((v50 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v42 = 1 << *(_BYTE *)(v15 + 32);
  if (v42 >= 64)
    bzero(v29, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v42;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v8 = v17;
  return result;
}

{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  unint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a5;
  v54 = a6;
  v8 = v6;
  v52 = a3;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v46 - v13;
  v15 = *v6;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v50 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v48 = v6;
  v49 = (unint64_t)(v18 + 63) >> 6;
  v22 = a2;
  v23 = v16 + 64;
  v55 = v15;
  result = swift_retain();
  v25 = 0;
  v47 = v22;
  v26 = 16;
  if ((v22 & 1) != 0)
    v26 = 32;
  v51 = v26;
  while (1)
  {
    if (v21)
    {
      v28 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v29 = v28 | (v25 << 6);
      goto LABEL_24;
    }
    v30 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v49)
      break;
    v31 = v50;
    v32 = v50[v30];
    ++v25;
    if (!v32)
    {
      v25 = v30 + 1;
      if (v30 + 1 >= v49)
        goto LABEL_34;
      v32 = v50[v25];
      if (!v32)
      {
        v33 = v30 + 2;
        if (v33 >= v49)
        {
LABEL_34:
          v44 = v55;
          swift_release();
          v8 = v48;
          if ((v47 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v32 = v50[v33];
        if (!v32)
        {
          while (1)
          {
            v25 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_43;
            if (v25 >= v49)
              goto LABEL_34;
            v32 = v50[v25];
            ++v33;
            if (v32)
              goto LABEL_23;
          }
        }
        v25 = v33;
      }
    }
LABEL_23:
    v21 = (v32 - 1) & v32;
    v29 = __clz(__rbit64(v32)) + (v25 << 6);
LABEL_24:
    v34 = v55;
    v35 = *(_QWORD *)(v11 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + v51))(v14, *(_QWORD *)(v55 + 48) + v35 * v29, v10);
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v29);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v53, v52, v54);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v37 = -1 << *(_BYTE *)(v17 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v23 + 8 * (v38 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v23 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v23 + 8 * v39);
      }
      while (v43 == -1);
      v27 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v17 + 48) + v35 * v27, v14, v10);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v27) = v36;
    ++*(_QWORD *)(v17 + 16);
  }
  v44 = v55;
  swift_release();
  v8 = v48;
  v31 = v50;
  if ((v47 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v45 = 1 << *(_BYTE *)(v44 + 32);
  if (v45 >= 64)
    bzero(v31, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v45;
  *(_QWORD *)(v44 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v8 = v17;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v33 = v3;
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = (_QWORD *)(v6 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v16 << 6);
      }
      else
      {
        v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v13)
          goto LABEL_33;
        v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          v16 = v23 + 1;
          if (v23 + 1 >= v13)
            goto LABEL_33;
          v24 = v10[v16];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v33;
                goto LABEL_40;
              }
              v32 = 1 << *(_BYTE *)(v6 + 32);
              if (v32 >= 64)
                bzero((void *)(v6 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v4 = v33;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v16 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_42;
                if (v16 >= v13)
                  goto LABEL_33;
                v24 = v10[v16];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v16 = v25;
          }
        }
LABEL_30:
        v12 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }
      v30 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v22);
      v34 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        v31 = v30;
        swift_retain();
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v3;
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_33;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v6 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v6 = v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v55 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for CRKeyPath();
  v54 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v51 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v49 = v4;
  v50 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  v53 = v15;
  result = swift_retain();
  v24 = 0;
  v48 = a2;
  v25 = 16;
  if ((a2 & 1) != 0)
    v25 = 32;
  v52 = v25;
  v26 = v25;
  while (1)
  {
    if (v21)
    {
      v28 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v29 = v28 | (v24 << 6);
      goto LABEL_24;
    }
    v30 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v50)
      break;
    v31 = v51;
    v32 = v51[v30];
    ++v24;
    if (!v32)
    {
      v24 = v30 + 1;
      if (v30 + 1 >= v50)
        goto LABEL_34;
      v32 = v51[v24];
      if (!v32)
      {
        v33 = v30 + 2;
        if (v33 >= v50)
        {
LABEL_34:
          v45 = v53;
          swift_release();
          v6 = v49;
          if ((v48 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v32 = v51[v33];
        if (!v32)
        {
          while (1)
          {
            v24 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_43;
            if (v24 >= v50)
              goto LABEL_34;
            v32 = v51[v24];
            ++v33;
            if (v32)
              goto LABEL_23;
          }
        }
        v24 = v33;
      }
    }
LABEL_23:
    v21 = (v32 - 1) & v32;
    v29 = __clz(__rbit64(v32)) + (v24 << 6);
LABEL_24:
    v34 = v53;
    v35 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v26))(v14, *(_QWORD *)(v53 + 48) + v35 * v29, v11);
    v36 = *(_QWORD *)(v34 + 56);
    v37 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v26))(v55, v36 + v37 * v29, v57);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v38 = -1 << *(_BYTE *)(v17 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v22 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v22 + 8 * v40);
      }
      while (v44 == -1);
      v27 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v22 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v17 + 48) + v35 * v27, v14, v11);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v17 + 56) + v37 * v27, v55, v57);
    ++*(_QWORD *)(v17 + 16);
  }
  v45 = v53;
  swift_release();
  v6 = v49;
  v31 = v51;
  if ((v48 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v46 = 1 << *(_BYTE *)(v45 + 32);
  if (v46 >= 64)
    bzero(v31, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v46;
  *(_QWORD *)(v45 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v17;
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1, &demangling cache variable for type metadata for _DictionaryStorage<UIColor, UIImage>);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<PDFAnnotation, AnyCanvasElementView>);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  _QWORD *v5;
  _QWORD **v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  v6 = (_QWORD **)v5;
  v31 = a2;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)*v5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = v16[3];
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v6;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = v24[7] + 24 * v18;
        v26 = *(void **)v25;
        swift_release();

        v27 = v31;
        *(_QWORD *)v25 = a1;
        *(_QWORD *)(v25 + 8) = v27;
        *(double *)(v25 + 16) = a5;
        return;
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a4 & 1);
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v22 & 1) == (v29 & 1))
    {
      v18 = v28;
      v24 = *v6;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
      specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v15, a1, v31, v24, a5);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
        return outlined assign with take of WeakCalculateExpression(a1, v21[7] + 8 * v15);
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v24 & 1))
    {
      v15 = v23;
      v21 = *v4;
      if ((v19 & 1) != 0)
        return outlined assign with take of WeakCalculateExpression(a1, v21[7] + 8 * v15);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRKeyPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];
      result = swift_release();
      *(_QWORD *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = v24;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRKeyPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v21[7] + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, Int>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = result;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRAsset();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v21[7] + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, Int>, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v15 = result;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12958]);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v14;
    v20 = v13[3];
    if (v20 >= v18 && (a3 & 1) != 0)
    {
LABEL_7:
      v21 = *v4;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7];
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v15, a1, v23);
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v19 & 1) == (v26 & 1))
    {
      v15 = v25;
      v21 = *v4;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, NSNumber>);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRKeyPath();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _DictionaryStorage<CRKeyPath, AnyCanvasElementView>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12C70]);
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CRAsset();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _DictionaryStorage<CRAsset, PaperKitPDFDocument>, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v15 = v23;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v21, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12958]);
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (void (*)(uint64_t))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UUID, PKDrawing>);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for NSAttributedStringKey(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return outlined init with take of Any(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFStringRef(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.ColorAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.FontAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Font and conformance Font()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font and conformance Font;
  if (!lazy protocol witness table cache variable for type Font and conformance Font)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font, &type metadata for Font);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font and conformance Font);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.UnderlineAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.UnderlineAttribute()
{
  return MEMORY[0x1E0D12D30];
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.UnderlineAttribute()
{
  return MEMORY[0x1E0DEAFB0];
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.StrikethroughAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.WritingDirectionAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.WritingDirectionAttribute and conformance TextAttributeScope.WritingDirectionAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.WritingDirectionAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.WritingDirectionAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.AlignmentAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.AlignmentAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.AlignmentAttribute()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
}

unint64_t instantiation function for generic protocol witness table for TextAttributeScope.KernAttribute(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type TextAttributeScope.KernAttribute and conformance TextAttributeScope.KernAttribute();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : CRValue in TextAttributeScope.KernAttribute()
{
  return MEMORY[0x1E0D12D38];
}

uint64_t associated type witness table accessor for CRAttributeStringKey.Value : Hashable in TextAttributeScope.KernAttribute()
{
  return MEMORY[0x1E0DEB090];
}

uint64_t base witness table accessor for CRType in NSWritingDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
}

uint64_t base witness table accessor for CRCodable in NSWritingDirection()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSWritingDirection and conformance NSWritingDirection, (uint64_t (*)(uint64_t))type metadata accessor for NSWritingDirection, (uint64_t)&protocol conformance descriptor for NSWritingDirection);
}

uint64_t base witness table accessor for CRType in NSTextAlignment()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
}

uint64_t base witness table accessor for CRCodable in NSTextAlignment()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type NSTextAlignment and conformance NSTextAlignment, (uint64_t (*)(uint64_t))type metadata accessor for NSTextAlignment, (uint64_t)&protocol conformance descriptor for NSTextAlignment);
}

uint64_t dispatch thunk of static CRDefaultedAttributeStringKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static CRDefaultedAttributeStringKey.isParagraphAttribute.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for TextAttributeScope()
{
  return &type metadata for TextAttributeScope;
}

ValueMetadata *type metadata accessor for TextAttributeScope.ColorAttribute()
{
  return &type metadata for TextAttributeScope.ColorAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.FontAttribute()
{
  return &type metadata for TextAttributeScope.FontAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.UnderlineAttribute()
{
  return &type metadata for TextAttributeScope.UnderlineAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.StrikethroughAttribute()
{
  return &type metadata for TextAttributeScope.StrikethroughAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.WritingDirectionAttribute()
{
  return &type metadata for TextAttributeScope.WritingDirectionAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.AlignmentAttribute()
{
  return &type metadata for TextAttributeScope.AlignmentAttribute;
}

ValueMetadata *type metadata accessor for TextAttributeScope.KernAttribute()
{
  return &type metadata for TextAttributeScope.KernAttribute;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  char v23;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        v20 = type metadata accessor for UUID();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v12, a1, v20);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v16 & 1) == (v23 & 1))
    {
      v12 = v22;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, ()>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), &demangling cache variable for type metadata for _DictionaryStorage<UIDragItem, (_:)>);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return outlined init with take of Any(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0DEA758], (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for PDFPageID();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v20[7] + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = result;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of PDFPageID((uint64_t)a2, (uint64_t)v11);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  id result;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char v21;
  _QWORD v23[5];

  v4 = (_QWORD **)v3;
  v7 = *a1;
  v6 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = (_QWORD *)*v3;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = v11[3];
    if (v18 >= (uint64_t)result && (a3 & 1) != 0)
    {
LABEL_7:
      v19 = *v4;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v20 = (_QWORD *)(v19[7] + 40 * v13);
        *v20 = v7;
        v20[1] = v6;
        v20[2] = v9;
        v20[3] = v8;
        v20[4] = v10;
        return result;
      }
      goto LABEL_11;
    }
    if (v18 >= (uint64_t)result && (a3 & 1) == 0)
    {
      result = specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
    result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = (unint64_t)result;
      v19 = *v4;
      if ((v17 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      v23[0] = v7;
      v23[1] = v6;
      v23[2] = v9;
      v23[3] = v8;
      v23[4] = v10;
      specialized _NativeDictionary._insert(at:key:value:)(v13, (uint64_t)a2, (uint64_t)v23, v19);
      return a2;
    }
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  id result;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  result = (id)(v10 + v11);
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= (uint64_t)result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= (uint64_t)result && (a3 & 1) == 0)
  {
    result = specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7] + 40 * v9;
      v17 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)(v16 + 16) = v17;
      *(_QWORD *)(v16 + 32) = *(_QWORD *)(a1 + 32);
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    *(_QWORD *)(v15[6] + 8 * v9) = a2;
    v19 = v15[7] + 40 * v9;
    v20 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)v19 = *(_OWORD *)a1;
    *(_OWORD *)(v19 + 16) = v20;
    *(_QWORD *)(v19 + 32) = *(_QWORD *)(a1 + 32);
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)((uint64_t)result, a3 & 1);
  result = (id)specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = (unint64_t)result;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_unknownObjectRelease();
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v4 = v3;
  v7 = *v3;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_unknownObjectRelease();
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for PDFDocumentWriteOption(0);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4, void (*a5)(void), uint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  id result;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v13 = *v6;
  v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = v14;
  v20 = *(_QWORD *)(v13 + 24);
  if (v20 >= v18 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v21 = (_QWORD *)*v9;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = (_QWORD *)(v21[7] + 16 * v15);
      result = (id)swift_release();
      *v22 = a1;
      v22[1] = a2;
      return result;
    }
LABEL_11:
    v21[(v15 >> 6) + 8] |= 1 << v15;
    *(_QWORD *)(v21[6] + 8 * v15) = a3;
    v26 = (_QWORD *)(v21[7] + 16 * v15);
    *v26 = a1;
    v26[1] = a2;
    v27 = v21[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v21[2] = v29;
      return a3;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1, a6);
  v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  if ((v19 & 1) == (v25 & 1))
  {
    v15 = v24;
    v21 = (_QWORD *)*v9;
    if ((v19 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t), uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;

  v27 = a5;
  v28 = a1;
  v7 = (_QWORD **)v5;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)*v5;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    v23 = *v7;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7];

      *(_QWORD *)(v24 + 8 * v17) = v28;
      return;
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    a4(v20);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a3 & 1, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], v27, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v17 = v25;
  v23 = *v7;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  specialized _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v14, v28, v23, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_13;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
    goto LABEL_9;
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a6 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v16 = v22;
LABEL_9:
  v24 = a3 & 1;
  v25 = *v7;
  if ((v20 & 1) != 0)
  {
    v26 = v24 != 0;
    v27 = v25[7] + 24 * v16;
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(*(_QWORD *)v27, *(void **)(v27 + 8), *(_BYTE *)(v27 + 16));
    *(_QWORD *)v27 = a1;
    *(_QWORD *)(v27 + 8) = a2;
    *(_BYTE *)(v27 + 16) = v26;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a4, a5, a1, a2, v24, v25);
    outlined copy of Data._Representation(a4, a5);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return outlined copy of Data._Representation(a3, a4);
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x1E0CB0240], specialized __RawDictionaryStorage.find<A>(_:hashValue:));
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  id v25;

  v5 = v4;
  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      v18 = v17[7] + 16 * v11;

      *(_QWORD *)v18 = a1;
      *(_QWORD *)(v18 + 8) = a2;
      return;
    }
LABEL_11:
    v17[(v11 >> 6) + 8] |= 1 << v11;
    *(_QWORD *)(v17[6] + 8 * v11) = a3;
    v21 = (_QWORD *)(v17[7] + 16 * v11);
    *v21 = a1;
    v21[1] = a2;
    v22 = v17[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v17[2] = v24;
      v25 = a3;
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3);
  if ((v15 & 1) == (v20 & 1))
  {
    v11 = v19;
    v17 = (_QWORD *)*v5;
    if ((v15 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for PaperKitPDFPage(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  void *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v7 = (_QWORD **)v6;
  v34 = a3;
  v35 = a4;
  v33 = a2;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)*v6;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = v16[3];
  if (v23 >= v21 && (a6 & 1) != 0)
  {
LABEL_7:
    v24 = *v7;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = (uint64_t *)(v24[7] + 32 * v18);
      v26 = (void *)v25[1];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      result = swift_bridgeObjectRelease();
      v28 = v33;
      *v25 = a1;
      v25[1] = v28;
      v29 = v35;
      v25[2] = v34;
      v25[3] = v29;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a6 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a6 & 1);
  v30 = specialized __RawDictionaryStorage.find<A>(_:)(a5);
  if ((v22 & 1) != (v31 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v18 = v30;
  v24 = *v7;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a5, v11);
  return specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v15, a1, v33, v34, v35, v24);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a3 + 32);
  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v5 = a4[7] + 40 * result;
  v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a3;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = v4;
  v7 = a4[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a4[2] = v9;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v12 = a5[6];
  v13 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a2, v13);
  v15 = a5[7] + 24 * a1;
  *(_QWORD *)v15 = a3;
  *(_QWORD *)(v15 + 8) = a4;
  *(double *)(v15 + 16) = a6;
  v16 = a5[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a5[2] = v18;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = outlined init with take of WeakCalculateExpression(a3, a4[7] + 8 * a1);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for PDFPageID();
  result = outlined init with take of PDFPageID(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0D12958]);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a4, v10);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a7[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(_BYTE *)(v8 + 16) = a6 & 1;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a7[(a1 >> 6) + 8] |= 1 << a1;
  v14 = a7[6];
  v15 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, a2, v15);
  v17 = (_QWORD *)(a7[7] + 32 * a1);
  *v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v18 = a7[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a7[2] = v20;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  char v7;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    do
    {
      v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v4);
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v5;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t, __n128);
  char v16;
  _QWORD v18[2];

  v3 = v2;
  v18[1] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  v8.n128_f64[0] = MEMORY[0x1E0C80A78](v5, v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = -1 << *(_BYTE *)(v3 + 32);
  v12 = a2 & ~v11;
  if (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v6 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16);
    do
    {
      v15(v10, *(_QWORD *)(v3 + 48) + v14 * v12, v5, v8);
      lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12890]);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1DF0E4CEC](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFStringRef(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v7 = v6;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static _CFObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for PaperKitPDFPage(0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78]();
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v21, v20, v22);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
    v9 = v8;
    if (v7 == FormAnalyticsKeys.rawValue.getter(a1) && v9 == v10)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
    {
      v13 = ~v4;
      v5 = (v5 + 1) & v13;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v14 = FormAnalyticsKeys.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
          v16 = v15;
          if (v14 == FormAnalyticsKeys.rawValue.getter(a1) && v16 == v17)
            break;
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
            v5 = (v5 + 1) & v13;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for NSObject(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = type metadata accessor for PDFPageID();
  MEMORY[0x1E0C80A78](v5, v6);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = -1 << *(_BYTE *)(v2 + 32);
  v11 = a2 & ~v10;
  if (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      outlined init with copy of PDFPageID(*(_QWORD *)(v2 + 48) + v13 * v11, (uint64_t)v9);
      if (*v9 == *a1 && (static CRAsset.== infix(_:_:)() & 1) != 0)
        break;
      outlined destroy of PDFPageID((uint64_t)v9);
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v2 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        return v11;
    }
    outlined destroy of PDFPageID((uint64_t)v9);
  }
  return v11;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

void outlined consume of AsyncCache<Data, CGImageRef>.CacheState(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of WeakCalculateExpression(uint64_t a1, uint64_t a2)
{
  assignWithTake for WeakCalculateExpression(a2, a1);
  return a2;
}

uint64_t specialized CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t countAndFlagsBits;
  void *object;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  Swift::Float pointSize;
  Swift::Int rawValue;
  id v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::Bool v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  float v58;
  Swift::Int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  Swift::String_optional *v67;
  void (*v68)(uint64_t *, _QWORD);
  void (*v69)(uint64_t *, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  Swift::String_optional v75;
  Swift::String_optional *p_familyName;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void *v92;
  unint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  Swift::String_optional v99;
  uint64_t v100;
  Swift::Int v101;
  PaperKit::Font v102;

  v92 = a6;
  v90 = a5;
  v86 = a4;
  v83 = a3;
  v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v84 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v8);
  v95 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v10 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v11);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v18 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v19);
  v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v77 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v22);
  v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v88 = (char *)&v75 - v27;
  result = NSNotFound.getter();
  if (result == a1)
    goto LABEL_62;
  if (__OFADD__(a1, a2))
  {
LABEL_63:
    __break(1u);
    return result;
  }
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  CRAttributedString.subscript.getter();
  v29 = v85;
  CRAttributedString.Substring.runs.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v29);
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v88, v24, v89);
  CRAttributedString.Runs.next()();
  v30 = v87;
  v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v82(v17, 1, v87) != 1)
  {
    v80 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    p_familyName = &v102._familyName;
    v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v75 = (Swift::String_optional)xmmword_1DDF32D00;
    v79 = v10;
    v91 = v13;
    v78 = v17;
    while (1)
    {
      v80(v13, v17, v30);
      CRAttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      v32 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      v93 = v32;
      v94 = v31;
      if (v98 == (void *)1)
      {
        if (one-time initialization token for textBoxDefaultFont != -1)
          swift_once();
        Font.init(_:)(&v102, (UIFont)(id)static UIConstants.textBoxDefaultFont);
        countAndFlagsBits = v102._familyName.value._countAndFlagsBits;
        object = v102._familyName.value._object;
        if (v102._familyName.value._object)
        {
LABEL_13:
          if (countAndFlagsBits == v90 && object == v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_26;
        }
      }
      else
      {
        countAndFlagsBits = v99.value._countAndFlagsBits;
        object = v99.value._object;
        v102._name.value._countAndFlagsBits = v97;
        v102._name.value._object = v98;
        v102._familyName = v99;
        LODWORD(v102.pointSize) = v100;
        v102.traits.rawValue = v101;
        if (v99.value._object)
          goto LABEL_13;
      }
      v35 = v92;
      swift_bridgeObjectRetain();
      v36._countAndFlagsBits = 46;
      v36._object = (void *)0xE100000000000000;
      v37 = v90;
      if (String.hasPrefix(_:)(v36))
      {
        swift_bridgeObjectRelease();
        v37 = 0;
        v35 = 0;
      }
      swift_bridgeObjectRelease();
      v102._familyName.value._countAndFlagsBits = v37;
      v102._familyName.value._object = v35;
      v39 = v102._name.value._countAndFlagsBits;
      v38 = v102._name.value._object;
      pointSize = v102.pointSize;
      rawValue = v102.traits.rawValue;
      v97 = v102._name.value._countAndFlagsBits;
      v98 = v102._name.value._object;
      v99.value._countAndFlagsBits = v37;
      v99.value._object = v35;
      *(Swift::Float *)&v100 = v102.pointSize;
      v101 = v102.traits.rawValue;
      v42 = Font.platformFont.getter();
      v43 = objc_msgSend(v42, sel_fontName);

      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v45;

      if (v38 && (v44 == v39 && v38 == v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v47._countAndFlagsBits = 46;
        v47._object = (void *)0xE100000000000000;
        v48 = String.hasPrefix(_:)(v47);
        swift_bridgeObjectRelease();
        if (v48)
        {
          swift_bridgeObjectRelease();
          v44 = 0;
          v46 = 0;
        }
        swift_bridgeObjectRelease();
        v102._name.value._countAndFlagsBits = v44;
        v102._name.value._object = v46;
        v97 = v44;
        v98 = v46;
        v99.value._countAndFlagsBits = v37;
        v99.value._object = v35;
        *(Swift::Float *)&v100 = pointSize;
        v101 = rawValue;
        v49 = Font.platformFont.getter();
        v50 = objc_msgSend(v49, sel_familyName);

        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = v52;

        Font.familyName.setter(v51, v53);
      }
LABEL_26:
      v55 = v102._name.value._countAndFlagsBits;
      v54 = v102._name.value._object;
      v57 = v102._familyName.value._countAndFlagsBits;
      v56 = v102._familyName.value._object;
      v58 = v102.pointSize;
      v59 = v102.traits.rawValue;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v95, v96);
      result = CRAttributedString.Runs.Run.range.getter();
      v61 = v60 - result;
      if (__OFSUB__(v60, result))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      v62 = result;
      if (one-time initialization token for defaultValue != -1)
        result = swift_once();
      v63 = qword_1F0411B68;
      v64 = qword_1F0411B70;
      v65 = *(float *)&dword_1F0411B78;
      v66 = qword_1F0411B80;
      if (v54)
      {
        if (!qword_1F0411B60)
          goto LABEL_48;
        if (v55 != static TextAttributeScope.FontAttribute.defaultValue || v54 != (void *)qword_1F0411B60)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            goto LABEL_48;
        }
      }
      else if (qword_1F0411B60)
      {
        goto LABEL_48;
      }
      if (v56)
      {
        if (!v64)
          goto LABEL_48;
        if (v57 != v63 || v56 != (void *)v64)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            goto LABEL_48;
        }
      }
      else if (v64)
      {
        goto LABEL_48;
      }
      if (v58 == v65 && v59 == v66)
      {
        if (__OFADD__(v62, v61))
          goto LABEL_60;
        if (v62 + v61 < v62)
          goto LABEL_61;
        v102._name = v75;
        v67 = p_familyName;
        *p_familyName = 0u;
        v67[1] = 0u;
        swift_retain();
        v68 = (void (*)(uint64_t *, _QWORD))CRAttributedString.subscript.modify();
        CRAttributedString.Substring.subscript.setter();
        v68(&v97, 0);
        swift_bridgeObjectRelease();
        goto LABEL_51;
      }
LABEL_48:
      if (__OFADD__(v62, v61))
        goto LABEL_58;
      if (v62 + v61 < v62)
        goto LABEL_59;
      v102._name.value._countAndFlagsBits = v55;
      v102._name.value._object = v54;
      v102._familyName.value._countAndFlagsBits = v57;
      v102._familyName.value._object = v56;
      *(_QWORD *)&v102.pointSize = LODWORD(v58);
      v102.traits.rawValue = v59;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v69 = (void (*)(uint64_t *, _QWORD))CRAttributedString.subscript.modify();
      CRAttributedString.Substring.subscript.setter();
      v69(&v97, 0);
      swift_bridgeObjectRelease();
LABEL_51:
      swift_bridgeObjectRelease();
      v31 = v94;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = v87;
      v71 = v79;
      v13 = v91;
      v17 = v78;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
      v73 = v31[2];
      v72 = v31[3];
      if (v73 >= v72 >> 1)
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v72 > 1), v73 + 1, 1, v31);
      v31[2] = v73 + 1;
      v74 = &v31[2 * v73];
      v74[4] = v62;
      v74[5] = v61;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v30);
      CRAttributedString.Runs.next()();
      if (v82(v17, 1, v30) == 1)
        goto LABEL_5;
    }
  }
  v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_5:
  (*(void (**)(char *, uint64_t))(v77 + 8))(v88, v89);
  return (uint64_t)v31;
}

uint64_t getEnumTagSinglePayload for StickerDropPreviewInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for StickerDropPreviewInfo(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for StickerDropPreviewInfo()
{
  return &type metadata for StickerDropPreviewInfo;
}

id specialized Canvas.stickerDropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  _QWORD *v2;
  CGAffineTransformComponents *v5;
  double width;
  double height;
  CGFloat rotation;
  _QWORD *v9;
  uint64_t (*v10)(void);
  void *v11;
  double v12;
  double v13;
  void *v14;
  double v15;
  double v16;
  CGFloat tx;
  CGFloat ty;
  CGSize v19;
  id v20;
  id v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t *v37;
  id v38;
  char isUniquelyReferenced_nonNull_native;
  id v40;
  id v41;
  id v42;
  double v43;
  double v44;
  double v45;
  double v46;
  CGFloat v47;
  CGFloat v48;
  id v49;
  id v50;
  id v51;
  objc_class *v52;
  _BYTE *v53;
  uint64_t v54;
  id v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  objc_super v61;
  uint64_t v62;
  CGAffineTransform v63;
  CGAffineTransformComponents v64;
  CGAffineTransform transform;
  char v66;
  CGSize v67;
  double v68;
  double v69;
  CGFloat v70;
  CGSize v71;

  objc_msgSend(a1, sel__suggestedTransform);
  v5 = CGAffineTransformDecompose(&v64, &transform);
  width = v64.scale.width;
  height = v64.scale.height;
  rotation = v64.rotation;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x308);
  v11 = (void *)((uint64_t (*)(CGAffineTransformComponents *))v10)(v5);
  v12 = 1.0;
  v13 = 1.0;
  if (v11)
  {
    v14 = v11;
    objc_msgSend(v11, sel_zoomScale);
    v13 = v15;

  }
  (*(void (**)(CGAffineTransformComponents *__return_ptr))((*v9 & *v2) + 0x5B8))(&v64);
  outlined init with take of CGAffineTransform?((uint64_t)&v64, (uint64_t)&transform);
  if ((v66 & 1) == 0)
    v12 = sqrt(transform.a * transform.a + transform.b * transform.b);
  v16 = 1.0 / (v13 * v12);
  CGAffineTransformMakeScale(&v63, width * v16, height * v16);
  v57 = *(_OWORD *)&v63.c;
  v59 = *(_OWORD *)&v63.a;
  tx = v63.tx;
  ty = v63.ty;
  objc_msgSend(a2, sel_size);
  *(_OWORD *)&v63.a = v59;
  *(_OWORD *)&v63.c = v57;
  v63.tx = tx;
  v63.ty = ty;
  v19 = CGSizeApplyAffineTransform(v71, &v63);
  v20 = objc_msgSend(a2, sel_target);
  v21 = objc_msgSend(v20, sel_container);

  v22 = objc_msgSend(a2, sel_target);
  objc_msgSend(v22, sel_center);
  v24 = v23;
  v26 = v25;

  objc_msgSend(v2, sel_convertPoint_fromCoordinateSpace_, v21, v24, v26);
  v28 = v27;
  v30 = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>);
  if (swift_dynamicCastClass())
  {
    v31 = (void *)v10();
    if (v31)
    {
      v32 = v31;
      objc_msgSend(v31, sel_contentOffset);
      v34 = v33;
      v36 = v35;

      v28 = v28 + v34;
      v30 = v30 + v36;
    }
    goto LABEL_9;
  }
  type metadata accessor for PaperTextAttachmentView();
  if (swift_dynamicCastClass())
  {
LABEL_9:
    v28 = v16 * v28;
    v30 = v16 * v30;
  }
  v67 = v19;
  v68 = v28;
  v69 = v30;
  v70 = rotation;
  v37 = (_QWORD *)((char *)v2 + direct field offset for Canvas.stickerDropPreviewInfoMap);
  swift_beginAccess();
  v38 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62 = *v37;
  *v37 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v67, v38, isUniquelyReferenced_nonNull_native);
  *v37 = v62;

  swift_bridgeObjectRelease();
  swift_endAccess();
  v40 = objc_msgSend(a2, sel_target);
  v41 = objc_msgSend(v40, sel_container);

  v42 = objc_msgSend(a2, sel_target);
  objc_msgSend(v42, sel_center);
  v44 = v43;
  v46 = v45;

  objc_msgSend(v38, sel__suggestedTransform);
  v58 = *(_OWORD *)&v63.c;
  v60 = *(_OWORD *)&v63.a;
  v47 = v63.tx;
  v48 = v63.ty;
  v49 = objc_allocWithZone(MEMORY[0x1E0DC3770]);
  *(_OWORD *)&v63.a = v60;
  *(_OWORD *)&v63.c = v58;
  v63.tx = v47;
  v63.ty = v48;
  v50 = objc_msgSend(v49, sel_initWithContainer_center_transform_, v41, &v63, v44, v46);

  v51 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v50);
  v52 = (objc_class *)type metadata accessor for StickerDragPreviewContainerView();
  v53 = objc_allocWithZone(v52);
  v54 = OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted;
  v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isLifted] = 0;
  *(_QWORD *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_meshView] = 0;
  *(_QWORD *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_transformView] = 0;
  *(_QWORD *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shineView] = 0;
  *(_QWORD *)&v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_shadowView] = 0;
  v53[OBJC_IVAR____TtC8PaperKit31StickerDragPreviewContainerView_isDropAnimation] = 1;
  v53[v54] = 1;
  v61.receiver = v53;
  v61.super_class = v52;
  v55 = objc_msgSendSuper2(&v61, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v51, sel__setPreviewContainer_, v55);

  return v51;
}

uint64_t TaggedValue_1<>.init(docCameraFilter:)@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
      break;
    case 1:
    case 2:
    case 3:
    case 4:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
      lazy protocol witness table accessor for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>();
      TaggedValue_1.init(_:)();
      v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_1<CRExtensible<BasicImageFilter>>);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 0, 1, v5);
      break;
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

PaperKit::BasicImageFilter_optional __swiftcall BasicImageFilter.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::BasicImageFilter_optional)rawValue;
}

uint64_t BasicImageFilter.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

PaperKit::BasicImageFilter_optional protocol witness for RawRepresentable.init(rawValue:) in conformance BasicImageFilter(Swift::Int *a1)
{
  return BasicImageFilter.init(rawValue:)(*a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance BasicImageFilter()
{
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance BasicImageFilter()
{
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance BasicImageFilter()
{
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance BasicImageFilter()
{
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter();
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t TaggedValue_1<>.init(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
  lazy protocol witness table accessor for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>();
  return TaggedValue_1.init(_:)();
}

unint64_t lazy protocol witness table accessor for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>;
  if (!lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRExtensible<BasicImageFilter>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D11CB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRExtensible<BasicImageFilter> and conformance CRExtensible<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BasicImageFilter and conformance BasicImageFilter()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BasicImageFilter, &type metadata for BasicImageFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BasicImageFilter, &type metadata for BasicImageFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BasicImageFilter, &type metadata for BasicImageFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BasicImageFilter, &type metadata for BasicImageFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter;
  if (!lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for BasicImageFilter, &type metadata for BasicImageFilter);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BasicImageFilter and conformance BasicImageFilter);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BasicImageFilter(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDD29900 + 4 * byte_1DDF3F8EA[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDD29934 + 4 * byte_1DDF3F8E5[v4]))();
}

uint64_t sub_1DDD29934(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD2993C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDD29944);
  return result;
}

uint64_t sub_1DDD29950(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDD29958);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDD2995C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD29964(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BasicImageFilter()
{
  return &type metadata for BasicImageFilter;
}

void TextStyleEditingController.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  id v25;
  void *v26;
  char *v27;
  id v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t *v37;
  char *v38;
  void *v39;
  char *v40;
  id v41;
  char *v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  id v64;
  void *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  objc_class *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  __int128 v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  Swift::String v84;
  objc_super v85;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  v3 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = CanvasElementController.textBoxes.getter();

    if (v5)
    {
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 >= 1)
          goto LABEL_5;
      }
      else if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
      {
LABEL_5:
        Array<A>.displayAttributes.getter(v5, &v76);
        swift_bridgeObjectRelease();
        v6 = v77;
        v7 = v78;
        v8 = v79;
        v9 = v81;
        v10 = v83;
        v11 = v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes;
        v12 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 32);
        v13 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 72);
        *(_QWORD *)v11 = v76;
        *(_QWORD *)(v11 + 8) = v6;
        *(_QWORD *)(v11 + 16) = v7;
        *(_BYTE *)(v11 + 24) = v8;
        *(_OWORD *)(v11 + 32) = v80;
        *(_BYTE *)(v11 + 48) = v9;
        *(_OWORD *)(v11 + 56) = v82;
        *(_QWORD *)(v11 + 72) = v10;

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_8:
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView);
  v16 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_axis);
  v17 = OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl;
  v18 = *(char **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl);
  v75 = v2;
  if (v16 || (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) & 1) != 0)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes);
    v20 = swift_bridgeObjectRetain();
  }
  v21 = &v18[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *(_QWORD *)v21 = v19;
  *((_QWORD *)v21 + 1) = v20;
  v22 = v18;
  swift_bridgeObjectRelease();
  AttributeStylingControl.updateUI()();

  v23 = *(char **)(v15 + v17);
  if (v16 == 1 || *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) == 1)
  {
    v24 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 72);
    v25 = v24;
  }
  else
  {
    v24 = 0;
  }
  v26 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image];
  *(_QWORD *)&v23[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_image] = v24;
  v27 = v23;
  v28 = v24;

  AttributeStylingControl.updateUI()();
  v29 = OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl;
  v30 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl);
  if (v16)
    v31 = 0;
  else
    v31 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) ^ 1;
  v32 = v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes;
  v76 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 16);
  v33 = v30;
  v34 = dispatch thunk of CustomStringConvertible.description.getter();
  v76 = v34;
  v77 = v35;
  if ((v31 & 1) != 0)
  {
    v84._countAndFlagsBits = 32;
    v84._object = (void *)0xE100000000000000;
    if (one-time initialization token for textBoxFontUnitString != -1)
      swift_once();
    v36 = (Swift::String)static UIConstants.textBoxFontUnitString;
    swift_bridgeObjectRetain();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    v34 = v76;
    v35 = v77;
  }
  v37 = (uint64_t *)&v33[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_title];
  *v37 = v34;
  v37[1] = v35;
  swift_bridgeObjectRelease();
  AttributeStylingControl.updateUI()();

  v38 = *(char **)(v15 + v29);
  if (*(_BYTE *)(v32 + 24) == 1)
  {
    v39 = (void *)objc_opt_self();
    v40 = v38;
    v41 = objc_msgSend(v39, sel_italicSystemFontOfSize_, 17.0);
  }
  else
  {
    v42 = v38;
    v41 = 0;
  }
  v43 = *(void **)&v38[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font];
  *(_QWORD *)&v38[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_font] = v41;
  v44 = v41;

  AttributeStylingControl.updateUI()();
  v45 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl);
  v46 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl + 8);
  ObjectType = swift_getObjectType();
  v48 = *(_QWORD *)(v32 + 40);
  v49 = *(unsigned __int8 *)(v32 + 48);
  v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16);
  v51 = v45;
  v50(v48, v49, ObjectType, v46);

  v52 = v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  v53 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView);
  v54 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView + 8);
  v55 = swift_getObjectType();
  v56 = *(_QWORD *)(v32 + 56);
  v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 48);
  v58 = v53;
  v57(v56, v55, v54);

  v59 = *(void **)v52;
  v60 = *(_QWORD *)(v52 + 8);
  v61 = swift_getObjectType();
  v62 = *(_QWORD *)(v32 + 64);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 72);
  v64 = v59;
  v63(v62, v61, v60);

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isCompactUI) == 1)
  {
    v65 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_colorSwatch);
    if (v65)
    {
      v66 = (void *)MEMORY[0x1DF0E666C](v75);
      v67 = v65;
      if (v66)
      {
        CanvasElementController.selectedTextBoxColors()();
        v69 = v68;

        if (v69)
        {
          v70 = (void *)specialized Collection.first.getter(v69);
          swift_bridgeObjectRelease();
          if (v70)
          {
            v71 = *(void **)&v67[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
            *(_QWORD *)&v67[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor] = v70;
            v72 = v70;

            ColorSwatch.updateUI()();
          }
        }
      }
      v73 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isColorPickerPresented);
      v74 = (objc_class *)type metadata accessor for ColorSwatch();
      v85.receiver = v67;
      v85.super_class = v74;
      objc_msgSendSuper2(&v85, sel_setSelected_, v73);
      ColorSwatch.updateUI()();

    }
  }
}

void TextStyleEditingController.didTapFontButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  id v30;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  v3 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    v4 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    v30 = (id)v3;
    if (MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      v5 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType();
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      v8 = swift_unknownObjectRelease();
      if (!v7)
        return;
      v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x608);
      v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
      v11 = objc_msgSend(v10, sel_presentedViewController);

      if (v11)
      {

      }
      else
      {
        v11 = (id)v9();

        if (!v11)
          return;
      }
      type metadata accessor for TextStyleEditingController.SystemFontPickerViewController();
      v30 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      objc_msgSend(v30, sel_setModalPresentationStyle_, 7);
      v12 = objc_msgSend(v30, sel_popoverPresentationController);
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontNameControl));

      }
      v14 = objc_msgSend(v30, sel_popoverPresentationController);
      if (v14)
      {
        v15 = v14;
        objc_msgSend(v14, sel__setIgnoresKeyboardNotifications_, 1);

      }
      v16 = MEMORY[0x1DF0E666C](v2);
      if (v16)
      {
        v17 = (void *)v16;
        v18 = CanvasElementController.elementControllerToolPicker.getter();
        if (v18)
        {
          v19 = v18;
          v20 = objc_msgSend(v18, sel__popoverPresentationConfiguration);

          if (v20)
          {
            objc_msgSend(v20, sel_layoutSceneMargins);
            v22 = v21;
            v24 = v23;
            v26 = v25;
            v28 = v27;
            swift_unknownObjectRelease();
            v29 = objc_msgSend(v30, sel_popoverPresentationController);
            objc_msgSend(v29, sel_setPopoverLayoutMargins_, v22, v24, v26, v28);

            v17 = v29;
          }
        }

      }
      objc_msgSend(v30, sel_setDelegate_, v1);
      objc_msgSend(v11, sel_presentViewController_animated_completion_, v30, 1, 0);

    }
  }
}

void TextStyleEditingController.didTapFontSizeButton()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  id v36;
  CGRect v37;
  CGRect v38;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller;
  v3 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v3)
  {
    v4 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    v36 = (id)v3;
    if (MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    {
      v5 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType();
      v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);

      v8 = swift_unknownObjectRelease();
      if (!v7)
        return;
      v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x608);
      v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
      v11 = objc_msgSend(v10, sel_presentedViewController);

      if (v11)
      {

      }
      else
      {
        v11 = (id)v9();

        if (!v11)
          return;
      }
      v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_displayAttributes + 16);
      if (one-time initialization token for textBoxFontUnitString != -1)
        swift_once();
      v13 = static UIConstants.textBoxFontUnitString;
      objc_allocWithZone((Class)type metadata accessor for FontSizeViewController());
      swift_bridgeObjectRetain();
      v36 = ValueEditingViewController.init(minValue:maxValue:currentValue:unit:contentViewMargin:)(5, 300, v12, v13, *((uint64_t *)&v13 + 1), 10.0);
      swift_unknownObjectWeakAssign();
      objc_msgSend(v36, sel_setModalPresentationStyle_, 7);
      v14 = objc_msgSend(v36, sel_popoverPresentationController);
      v15 = v14;
      if (v14)
      {
        objc_msgSend(v14, sel_setSourceView_, *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl));

      }
      v16 = objc_msgSend(v36, sel_popoverPresentationController);
      if (v16)
      {
        v17 = v16;
        objc_msgSend(*(id *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)+ OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControl), sel_bounds);
        v38 = CGRectInset(v37, -2.0, -2.0);
        objc_msgSend(v17, sel_setSourceRect_, v38.origin.x, v38.origin.y, v38.size.width, v38.size.height);

      }
      v18 = objc_msgSend(v36, sel_popoverPresentationController);
      if (v18)
      {
        v19 = v18;
        objc_msgSend(v18, sel_setDelegate_, v1);

      }
      v20 = objc_msgSend(v36, sel_popoverPresentationController);
      if (v20)
      {
        v21 = v20;
        objc_msgSend(v20, sel__setIgnoresKeyboardNotifications_, 1);

      }
      v22 = MEMORY[0x1DF0E666C](v2);
      if (v22)
      {
        v23 = (void *)v22;
        v24 = CanvasElementController.elementControllerToolPicker.getter();
        if (v24)
        {
          v25 = v24;
          v26 = objc_msgSend(v24, sel__popoverPresentationConfiguration);

          if (v26)
          {
            objc_msgSend(v26, sel_layoutSceneMargins);
            v28 = v27;
            v30 = v29;
            v32 = v31;
            v34 = v33;
            swift_unknownObjectRelease();
            v35 = objc_msgSend(v36, sel_popoverPresentationController);
            objc_msgSend(v35, sel_setPopoverLayoutMargins_, v28, v30, v32, v34);

            v23 = v35;
          }
        }

      }
      objc_msgSend(v11, sel_presentViewController_animated_completion_, v36, 1, 0);

    }
  }
}

void TextStyleEditingController.textAlignmentControlValueChanged()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentControl;
  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v7 = v3;
  v8 = v6(ObjectType, v4);
  LOBYTE(v4) = v9;

  if ((v4 & 1) == 0)
  {
    v10 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v10)
    {
      v11 = (void *)v10;
      CanvasElementController.setSelectionTextAlignment(_:)(v8);

    }
    TextStyleEditingController.updateUI()();
  }
}

void TextStyleEditingController.didTapBoldTextStyle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  char v8;
  uint64_t v9;
  void *v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  v7 = v3;
  v8 = v6(ObjectType, v4);

  v9 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    v10 = (void *)v9;
    CanvasElementController.setSelectionBold(_:)((v8 & 1) == 0);

  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapItalicTextStyle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  char v8;
  uint64_t v9;
  void *v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  v7 = v3;
  v8 = v6(ObjectType, v4);

  v9 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    v10 = (void *)v9;
    CanvasElementController.setSelectionItalic(_:)((v8 & 2) == 0);

  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapUnderlineTextStyle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  char v8;
  uint64_t v9;
  void *v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  v7 = v3;
  v8 = v6(ObjectType, v4);

  v9 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    v10 = (void *)v9;
    CanvasElementController.setSelectionUnderline(_:)((v8 & 4) == 0);

  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapStrikethroughTextStyle()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  id v7;
  char v8;
  uint64_t v9;
  void *v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView)
     + OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleView;
  v3 = *(void **)v2;
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 40);
  v7 = v3;
  v8 = v6(ObjectType, v4);

  v9 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
  if (v9)
  {
    v10 = (void *)v9;
    CanvasElementController.setSelectionStrikethrough(_:)((v8 & 8) == 0);

  }
  TextStyleEditingController.updateUI()();
}

void TextStyleEditingController.didTapColorSwatch(sender:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  _BOOL8 v41;
  id v42;

  v2 = v1;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_textStyleEditingView);
  v5 = objc_msgSend(v4, sel_window);
  if (v5)
  {
    v42 = v5;
    v6 = objc_msgSend(v5, sel_rootViewController);
    if (v6)
    {
      v7 = v6;
      v8 = objc_msgSend(v4, sel_window);
      if (!v8
        || (v9 = v8,
            v10 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v8),
            v9,
            !v10)
        || (v11 = objc_msgSend(v10, sel_colorUserInterfaceStyle), v10, !v11))
      {
        v12 = objc_msgSend(v7, sel_traitCollection);
        v11 = objc_msgSend(v12, sel_userInterfaceStyle);

      }
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3668]), sel_init);
      objc_msgSend(v13, sel_setModalPresentationStyle_, 7);
      v14 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor);
      if (v14)
      {
        v15 = v14;
        v16 = (void *)static PKInkingTool.convertColor(_:from:to:)();
        objc_msgSend(v13, sel_setSelectedColor_, v16);

      }
      v17 = objc_msgSend(v13, sel_popoverPresentationController);
      if (v17)
      {
        v18 = v17;
        objc_msgSend(v17, sel_setSourceView_, a1);

      }
      v19 = objc_msgSend(v13, sel_popoverPresentationController);
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v19, sel_setDelegate_, v2);

      }
      v21 = objc_msgSend(v13, sel_popoverPresentationController);
      if (v21)
      {
        v22 = v21;
        objc_msgSend(v21, sel__setIgnoresKeyboardNotifications_, 1);

      }
      v23 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
      if (v23)
      {
        v24 = (void *)v23;
        v25 = CanvasElementController.elementControllerToolPicker.getter();
        if (v25)
        {
          v26 = v25;
          v27 = objc_msgSend(v25, sel__popoverPresentationConfiguration);

          if (v27)
          {
            objc_msgSend(v27, sel_layoutSceneMargins);
            v29 = v28;
            v31 = v30;
            v33 = v32;
            v35 = v34;
            swift_unknownObjectRelease();
            v36 = objc_msgSend(v13, sel_popoverPresentationController);
            objc_msgSend(v36, sel_setPopoverLayoutMargins_, v29, v31, v33, v35);

            v24 = v36;
          }
        }

      }
      objc_msgSend(v13, sel_setDelegate_, v2);
      objc_msgSend(v13, sel__setUserInterfaceStyleForGrid_, v11);
      v37 = objc_msgSend(v4, sel_window);
      if (v37
        && (v38 = v37,
            v39 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v37),
            v38,
            v39))
      {
        v40 = objc_msgSend(v39, sel_colorUserInterfaceStyle);

        v41 = v40 == 0;
      }
      else
      {
        v41 = 0;
      }
      objc_msgSend(v13, sel__setShouldUseDarkGridInDarkMode_, v41);
      objc_msgSend(v7, sel_presentViewController_animated_completion_, v13, 1, 0);
      *(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_isColorPickerPresented) = 1;
      TextStyleEditingController.updateUI()();

    }
  }
}

void @objc TextStyleEditingController.valueEditingViewController(_:didStartChangingValue:)(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8;
  id v9;
  char *v10;
  id v11;

  v8 = MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller]);
  if (v8)
  {
    v11 = (id)v8;
    v9 = a3;
    v10 = a1;
    a5();

  }
}

Swift::Void __swiftcall TextStyleEditingController.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v1;
  uint64_t v2;
  UIFontDescriptor *v4;
  UIFontDescriptor *v5;
  NSDictionary *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  __int128 v14;
  __int128 v15;

  v2 = v1;
  v4 = -[UIFontPickerViewController selectedFontDescriptor](a1, sel_selectedFontDescriptor);
  if (!v4)
  {
    v14 = 0u;
    v15 = 0u;
    goto LABEL_13;
  }
  v5 = v4;
  v6 = -[UIFontDescriptor fontAttributes](v4, sel_fontAttributes);

  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName();
  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v7 + 16))
  {
    v14 = 0u;
    v15 = 0u;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v8 = (id)*MEMORY[0x1E0DC1378];
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v10 & 1) == 0)
  {
    v14 = 0u;
    v15 = 0u;

    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(v7 + 56) + 32 * v9, (uint64_t)&v14);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v15 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v14);
    return;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    -[UIFontPickerViewController dismissViewControllerAnimated:completion:](a1, sel_dismissViewControllerAnimated_completion_, 1, 0);
    v11 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v11)
    {
      v12 = (void *)v11;
      CanvasElementController.setSelectionFontName(_:)(v13);

    }
    swift_bridgeObjectRelease();
    TextStyleEditingController.updateUI()();
  }
}

Swift::Void __swiftcall TextStyleEditingController.colorPickerViewController(_:didSelect:continuously:)(UIColorPickerViewController *_, UIColor didSelect, Swift::Bool continuously)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!continuously)
  {
    -[UIColorPickerViewController _userInterfaceStyleForGrid](_, sel__userInterfaceStyleForGrid);
    v6 = (void *)static PKInkingTool.convertColor(_:from:to:)();
    v4 = MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit26TextStyleEditingController_controller);
    if (v4)
    {
      v5 = (void *)v4;
      CanvasElementController.setTextSelectionColor(_:)((UIColor)v6);

    }
    TextStyleEditingController.updateUI()();

  }
}

uint64_t type metadata accessor for TextStyleEditingController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for TextStyleEditingController.SystemFontPickerViewController()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName;
  if (!lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName)
  {
    type metadata accessor for UIFontDescriptorAttributeName(255);
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for UIFontDescriptorAttributeName, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextStyles()
{
  return &type metadata for TextStyles;
}

unint64_t lazy protocol witness table accessor for type TextStyles and conformance TextStyles()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextStyles, &type metadata for TextStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextStyles, &type metadata for TextStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextStyles, &type metadata for TextStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextStyles and conformance TextStyles;
  if (!lazy protocol witness table cache variable for type TextStyles and conformance TextStyles)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TextStyles, &type metadata for TextStyles);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextStyles and conformance TextStyles);
  }
  return result;
}

uint64_t PaperDocument.init<A>(url:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (void **)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CRAsset();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v34 - v22;
  type metadata accessor for PaperKitPDFDocument();
  static PaperKitPDFDocument._load(_:assetManager:)(a1, v14);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v14, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    v25 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
LABEL_5:
    v30 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a4, 1, 1, v30);
  }
  v34 = a4;
  v26 = *v14;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, (char *)v14 + *(int *)(v24 + 48), v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v23, v15);
  PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v26, (uint64_t)v19, v35, a3, 0, (uint64_t)v10);
  v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  v28 = type metadata accessor for PaperDocument(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v10, 1, v28))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PaperDocument?);
    a4 = v34;
    goto LABEL_5;
  }
  v32 = (uint64_t)v10;
  v33 = v34;
  outlined init with take of PKStrokeStruct(v32, v34, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
}

uint64_t PaperDocument.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v10 = type metadata accessor for PaperDocument(0);
  v11 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(a1 + *(int *)(v10 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t type metadata accessor for PaperDocument(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocument);
}

uint64_t PaperDocument.init<A>(in:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v10 = type metadata accessor for PaperDocument(0);
  v11 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  result = swift_release();
  *(_QWORD *)(a1 + *(int *)(v10 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a5;
  v35 = a6;
  v36 = a4;
  v30 = a2;
  v31 = a3;
  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v28 - v12;
  v14 = type metadata accessor for PaperDocument(0);
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v18 = &v17[*(int *)(v14 + 20)];
  v19 = type metadata accessor for CRAsset();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v21(v13, 1, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  v28[1] = v18;
  v22 = v30;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v33 = v14;
  *(_QWORD *)&v17[*(int *)(v14 + 24)] = MEMORY[0x1E0DEE9E0];
  v23 = v29;
  if ((PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(v29, v22, v31, v36, v32) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v13, v22, v19);
    v21(v13, 0, 1, v19);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    v24 = v35;
    outlined init with take of PKStrokeStruct((uint64_t)v17, v35, type metadata accessor for PaperDocument);
    v25 = 0;
    v26 = v24;
  }
  else
  {

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    outlined destroy of PKStrokeProperties((uint64_t)v17, type metadata accessor for PaperDocument);
    v25 = 1;
    v26 = v35;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v26, v25, 1, v33);
}

uint64_t PaperDocument.export<A>(_:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  _QWORD *v15;

  v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a3;
  v10 = *(_OWORD *)(a3 + 32);
  v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 32) = v9;
  *(_OWORD *)(v5 + 48) = v10;
  v12 = *(_QWORD *)(a3 + 64);
  v13 = *(_WORD *)(a3 + 72);
  v14 = *(_BYTE *)(a3 + 74);
  *(_QWORD *)(v5 + 96) = a1;
  *(_OWORD *)(v5 + 64) = v11;
  *(_QWORD *)(v5 + 80) = v12;
  *(_BYTE *)(v5 + 90) = v14;
  *(_WORD *)(v5 + 88) = v13;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 104) = v15;
  *v15 = v5;
  v15[1] = PaperDocument.export<A>(_:in:options:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((_QWORD *)(v5 + 96), a2, v5 + 16, a4, a5);
}

uint64_t PaperDocument.pdf.getter()
{
  return PaperDocument.pdf.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path getter for PaperDocument.pdf : PaperDocument()
{
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path setter for PaperDocument.pdf : PaperDocument(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
}

uint64_t PaperDocument.pdf.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
}

uint64_t PaperDocument.exportNonMergable<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  *(_QWORD *)(v4 + 96) = a1 | 0x4000000000000000;
  *(_OWORD *)(v4 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 75) = 0u;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 104) = v8;
  *v8 = v4;
  v8[1] = PaperDocument.exportNonMergable<A>(_:in:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((_QWORD *)(v4 + 96), a2, v4 + 16, a3, a4);
}

uint64_t PaperDocument.exportNonMergable<A>(_:in:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t PaperDocument.pages.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PaperDocument.pages.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*PaperDocument.pages.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

void (*PaperDocument.pdf.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for PaperDocument(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PaperDocument.$pdf.getter()
{
  return PaperDocument.pdf.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t PaperDocument.pdf.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for PaperDocument(0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a1(v2);
}

uint64_t key path setter for PaperDocument.$pdf : PaperDocument(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for PaperDocument(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t PaperDocument.$pdf.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for PaperDocument(0);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PaperDocument.$pdf.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for PaperDocument(0) + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t PaperDocument.additionalFields.getter()
{
  type metadata accessor for PaperDocument(0);
  return swift_bridgeObjectRetain();
}

uint64_t PaperDocument.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PaperDocument(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*PaperDocument.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PaperDocument(0);
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PaperDocument.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDB72498;
  v4 = qword_1EDB724A0;
  v3 = unk_1EDB724A8;
  v5 = qword_1EDB724B0;
  v6 = qword_1EDB724B8;
  *a1 = static PaperDocument.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t PaperDocument.init<A>(data:in:assetManager:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  Class isa;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;

  v44 = a5;
  v45 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x1E0C80A78](v8, v9);
  v43 = (void **)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (void **)((char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CRAsset();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v42 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v42 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v42 - v25;
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  CRAsset.init(data:assetManager:)();
  v27 = objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument());
  outlined copy of Data._Representation(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v27, sel_initWithData_, isa);
  outlined consume of Data._Representation(a1, a2);

  if (v29)
  {
    if ((PaperKitPDFDocument.finishLoading(as:)((unint64_t)v22) & 1) != 0)
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
      v31 = (char *)v14 + *(int *)(v30 + 48);
      *v14 = v29;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v31, v22, v15);
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v14, 0, 1, v30);
      v32 = v44;
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
  }
  v32 = v44;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v14, 1, 1, v33);
LABEL_7:
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v14, 1, v34) == 1)
  {
    swift_release();
    swift_release();
    outlined consume of Data._Representation(a1, a2);
    v35 = &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?;
LABEL_11:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, v35);
    v40 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v32, 1, 1, v40);
  }
  v36 = *v14;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v26, (char *)v14 + *(int *)(v34 + 48), v15);
  v37 = (uint64_t)v42;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v42, v26, v15);
  v14 = v43;
  PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v36, v37, v45, a4, 0, (uint64_t)v43);
  outlined consume of Data._Representation(a1, a2);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v15);
  v38 = type metadata accessor for PaperDocument(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v39 + 48))(v14, 1, v38))
  {
    v35 = &demangling cache variable for type metadata for PaperDocument?;
    goto LABEL_11;
  }
  outlined init with take of PKStrokeStruct((uint64_t)v14, v32, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v32, 0, 1, v38);
}

uint64_t PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  void *v14;
  unsigned int v15;
  __int128 v17;

  v10 = objc_msgSend(a1, sel_isLocked);
  if ((_DWORD)v10)
  {
    if (one-time initialization token for shared != -1)
      v10 = (id)swift_once();
    MEMORY[0x1E0C80A78](v10, v11);
    v13 = v12 + 4;
    os_unfair_lock_lock(v12 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)((void (*)(__int128 *__return_ptr))partial apply for closure #1 in PasswordManager.password(for:), &v17);
    os_unfair_lock_unlock(v13);
    if (!*((_QWORD *)&v17 + 1))
      return 0;
    v14 = (void *)MEMORY[0x1DF0E41AC](v17, *((_QWORD *)&v17 + 1));
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(a1, sel_unlockWithPassword_, v14);

    if (!v15)
      return 0;
  }
  PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)(a1, a2, a3, a4, a5 & 1);
  return 1;
}

void PaperDocument.pageSizeForInserting<A>(at:in:)(uint64_t a1)
{
  CGPoint v1;
  CGSize v2;
  CGAffineTransform v3;
  CGRect v4;

  PaperDocument.pageGeometryForInserting<A>(at:in:)(a1, &v3.a);
  v1 = *(CGPoint *)&v3.a;
  v2 = *(CGSize *)&v3.c;
  CGAffineTransformMakeRotation(&v3, v3.tx);
  v4.origin = v1;
  v4.size = v2;
  CGRectApplyAffineTransform(v4, &v3);
}

uint64_t PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v24;
    v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = v24;
    v20 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 64))(v19, v20);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  result = CROrderedSet.count.getter();
  if (a1 + 1 < result)
    goto LABEL_4;
  if (one-time initialization token for defaultPageBounds != -1)
    result = swift_once();
  v12 = *(double *)&static UIConstants.defaultPageBounds;
  v14 = *(_QWORD *)algn_1F042F058;
  v18 = *((_QWORD *)&xmmword_1F042F060 + 1);
  v16 = xmmword_1F042F060;
  v21 = 0.0;
LABEL_5:
  *a2 = v12;
  *((_QWORD *)a2 + 1) = v14;
  *((_QWORD *)a2 + 2) = v16;
  *((_QWORD *)a2 + 3) = v18;
  a2[4] = v21;
  return result;
}

uint64_t PaperDocument.minAppFormatVersion.getter()
{
  return 4;
}

id PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  id result;
  void *v55;
  void *v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __C::CGRect v105;
  __C::CGRect v106;

  LODWORD(v101) = a6;
  v80 = a5;
  v96 = a4;
  v102 = a2;
  v100 = a7;
  v93 = type metadata accessor for CRKeyPath();
  v90 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v9);
  v94 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v89 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  v91 = *(_QWORD *)(v14 - 8);
  v92 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v88 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v85, v17);
  v84 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v83 = (char *)&v79 - v21;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v82, v22);
  v86 = (uint64_t)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v79 - v26;
  v81 = (void (*)(char *, uint64_t, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v81, v28);
  v30 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v79 - v33;
  v35 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v35, v36);
  v87 = (uint64_t)&v79 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v79 - v40;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v98 = *(_QWORD *)(v42 - 8);
  v99 = v42;
  MEMORY[0x1E0C80A78](v42, v43);
  v95 = (uint64_t)&v79 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PDFPageID();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (uint64_t *)((char *)&v79 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = v50;
  v51 = (char *)v49 + *(int *)(v50 + 20);
  v52 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v51, a3, v52);
  *v49 = a1;
  if ((v101 & 1) == 0)
  {
    v73 = objc_msgSend(v102, sel_pageAtIndex_, a1);
    if (v73)
    {
      v74 = v73;
      type metadata accessor for PaperKitPDFPage(0);
      if (swift_dynamicCastClass())
      {
        v71 = v95;
        PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)((uint64_t)v49, v96, v80, v95);

        v72 = (uint64_t)v49;
        goto LABEL_8;
      }

    }
    outlined destroy of PKStrokeProperties((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v78 = 1;
    v75 = v99;
    v77 = v100;
    v76 = v98;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v77, v78, 1, v75);
  }
  v53 = v102;
  result = objc_msgSend(v102, sel_pageAtIndex_, 0);
  if (result)
  {
    v55 = result;
    v101 = (uint64_t)objc_msgSend(result, sel_rotation);

    result = objc_msgSend(v53, sel_pageAtIndex_, 0);
    if (result)
    {
      v56 = result;
      objc_msgSend(result, sel_boundsForBox_, 0);
      v58 = v57;
      v60 = v59;
      v62 = v61;
      v64 = v63;

      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      v103 = 0u;
      v104 = 0u;
      CRRegister.init(wrappedValue:)();
      v103 = 0u;
      v104 = 0u;
      CRRegister.init(wrappedValue:)();
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v34, 1, 1, v65);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(_QWORD *)&v103 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      v102 = &v41[*(int *)(v35 + 32)];
      v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v81(v27, 1, 1, v97);
      v66 = v86;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v86, &demangling cache variable for type metadata for PDFPageID?);
      lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
      v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      v68 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v83, 1, 1, v67);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v68, v84, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v68, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(_QWORD *)&v103 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
      CROrderedSet.init()();
      *(_QWORD *)&v103 = MEMORY[0x1E0DEE9D8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0D12C68], MEMORY[0x1E0D12D28]);
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v41[*(int *)(v35 + 52)] = MEMORY[0x1E0DEE9E0];
      v105.origin.x = v58;
      v105.origin.y = v60;
      v105.size.width = v62;
      v105.size.height = v64;
      v106.origin.x = v58;
      v106.origin.y = v60;
      v106.size.width = v62;
      v106.size.height = v64;
      PaperDocumentPage.setContentsBounds(_:fullBounds:)(v105, v106);
      outlined init with copy of PKStrokeProperties((uint64_t)v49, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v81(v27, 0, 1, v97);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v66, &demangling cache variable for type metadata for PDFPageID?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
      specialized PaperPage.axisAlignedRotationInDegrees.setter(v101);
      *(_QWORD *)&v103 = 32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.setter();
      LOBYTE(v103) = 2;
      outlined init with copy of PKStrokeProperties((uint64_t)v41, v87, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v89, 1, 1, v93);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
      swift_retain();
      v69 = v88;
      Ref.init<A>(_:_:identity:)();
      v70 = v92;
      Ref.id.getter();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v70);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      v71 = v95;
      SharedTagged_3.init(_:id:)();
      outlined destroy of PKStrokeProperties((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      v72 = (uint64_t)v49;
LABEL_8:
      outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v76 = v98;
      v75 = v99;
      v77 = v100;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32))(v100, v71, v99);
      v78 = 0;
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v77, v78, 1, v75);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PaperDocument.newPDFDocument<A>(use:in:options:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;

  *(_QWORD *)(v6 + 392) = a5;
  *(_QWORD *)(v6 + 400) = v5;
  *(_QWORD *)(v6 + 376) = a2;
  *(_QWORD *)(v6 + 384) = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(_QWORD *)(v6 + 408) = v9;
  *(_QWORD *)(v6 + 416) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 424) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(_QWORD *)(v6 + 432) = swift_task_alloc();
  *(_QWORD *)(v6 + 440) = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(_QWORD *)(v6 + 448) = v10;
  *(_QWORD *)(v6 + 456) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 464) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(_QWORD *)(v6 + 472) = swift_task_alloc();
  *(_QWORD *)(v6 + 480) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  *(_QWORD *)(v6 + 488) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  *(_QWORD *)(v6 + 496) = swift_task_alloc();
  *(_QWORD *)(v6 + 504) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  *(_QWORD *)(v6 + 512) = swift_task_alloc();
  *(_QWORD *)(v6 + 520) = swift_task_alloc();
  *(_QWORD *)(v6 + 528) = swift_task_alloc();
  *(_QWORD *)(v6 + 536) = swift_task_alloc();
  v11 = type metadata accessor for PageId(0);
  *(_QWORD *)(v6 + 544) = v11;
  *(_QWORD *)(v6 + 552) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 560) = swift_task_alloc();
  *(_QWORD *)(v6 + 568) = swift_task_alloc();
  *(_QWORD *)(v6 + 576) = swift_task_alloc();
  v12 = type metadata accessor for PDFPageID();
  *(_QWORD *)(v6 + 584) = v12;
  *(_QWORD *)(v6 + 592) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 600) = swift_task_alloc();
  *(_QWORD *)(v6 + 608) = swift_task_alloc();
  *(_QWORD *)(v6 + 616) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
  *(_QWORD *)(v6 + 624) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  *(_QWORD *)(v6 + 632) = swift_task_alloc();
  *(_QWORD *)(v6 + 640) = swift_task_alloc();
  *(_QWORD *)(v6 + 648) = swift_task_alloc();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(_QWORD *)(v6 + 656) = v13;
  *(_QWORD *)(v6 + 664) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v6 + 672) = swift_task_alloc();
  *(_QWORD *)(v6 + 680) = swift_task_alloc();
  *(_QWORD *)(v6 + 688) = swift_task_alloc();
  *(_QWORD *)(v6 + 696) = swift_task_alloc();
  *(_QWORD *)(v6 + 704) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(_QWORD *)(v6 + 712) = swift_task_alloc();
  *(_QWORD *)(v6 + 720) = swift_task_alloc();
  *(_QWORD *)(v6 + 728) = swift_task_alloc();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  *(_QWORD *)(v6 + 736) = v14;
  *(_QWORD *)(v6 + 744) = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v6 + 752) = swift_task_alloc();
  *(_QWORD *)(v6 + 760) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(v6 + 768) = swift_task_alloc();
  *(_QWORD *)(v6 + 776) = swift_task_alloc();
  *(_QWORD *)(v6 + 784) = swift_task_alloc();
  v15 = type metadata accessor for CRAsset();
  *(_QWORD *)(v6 + 792) = v15;
  *(_QWORD *)(v6 + 800) = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v6 + 808) = swift_task_alloc();
  *(_QWORD *)(v6 + 816) = swift_task_alloc();
  *(_QWORD *)(v6 + 824) = swift_task_alloc();
  *(_QWORD *)(v6 + 832) = swift_task_alloc();
  *(_QWORD *)(v6 + 840) = swift_task_alloc();
  *(_QWORD *)(v6 + 848) = swift_task_alloc();
  *(_QWORD *)(v6 + 856) = swift_task_alloc();
  *(_QWORD *)(v6 + 864) = *a1;
  v16 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 872) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 888) = v16;
  v17 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 904) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 920) = v17;
  *(_QWORD *)(v6 + 936) = *(_QWORD *)(a3 + 64);
  v18 = *(_WORD *)(a3 + 72);
  *(_BYTE *)(v6 + 94) = *(_BYTE *)(a3 + 74);
  *(_WORD *)(v6 + 92) = v18;
  return swift_task_switch();
}

uint64_t PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD, _QWORD);
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void (*v64)(uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  os_unfair_lock_s *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  Swift::UInt *v93;
  int isUniquelyReferenced_nonNull_native;
  char v95;
  uint64_t v96;
  _BOOL8 v97;
  char v98;
  Swift::UInt *v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void (*v130)(uint64_t, unint64_t, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  os_unfair_lock_s *v144;
  uint64_t v145;
  uint64_t v146;
  os_unfair_lock_s *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(uint64_t, uint64_t, uint64_t);
  id v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int16 v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __objc2_prot_list **p_base_prots;
  uint64_t *v197;
  unsigned int (*v198)(uint64_t, uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  __objc2_prot_list **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  char *v224;
  uint64_t v225;
  id v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  __int16 v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(_QWORD, _QWORD);
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(_QWORD, _QWORD, _QWORD);
  __int128 v246;
  __int128 v247;
  uint64_t v248;
  _QWORD *v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  char *v257;
  __int128 v258;
  uint64_t v259;
  uint64_t v260;
  _OWORD v261[4];
  uint64_t v262;
  __int16 v263;
  char v264;

  v2 = *(_QWORD *)(v0 + 800);
  v3 = *(_QWORD *)(v0 + 792);
  v4 = *(_QWORD *)(v0 + 784);
  v5 = swift_allocObject();
  *(_QWORD *)(v0 + 944) = v5;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7 = swift_allocObject();
  *(_QWORD *)(v0 + 952) = v7;
  *(_QWORD *)(v7 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v6);
  *(_DWORD *)(v0 + 1104) = *(_DWORD *)(type metadata accessor for PaperDocument(0) + 20);
  *(_QWORD *)(v0 + 960) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  CRRegister.wrappedValue.getter();
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 968) = v8;
  if (v8(v4, 1, v3) != 1)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 792));
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 976) = v22;
    *v22 = v0;
    v22[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
    return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 856), v5, v7);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 784), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v9 = *(_QWORD *)(v0 + 728);
  v10 = *(_QWORD *)(v0 + 664);
  v11 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  *(_QWORD *)(v0 + 992) = v12;
  if (v12(v9, 1, v11) != 1)
  {
    *(_QWORD *)(v0 + 1000) = *(_QWORD *)(*(_QWORD *)(v0 + 664) + 32);
    do
    {
      v32 = *(_QWORD *)(v0 + 648);
      v33 = *(_QWORD *)(v0 + 592);
      v34 = *(_QWORD *)(v0 + 584);
      v1 = *(_QWORD *)(v0 + 392);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1000))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      v35 = *(_QWORD *)(v0 + 120);
      v36 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v35);
      (*(void (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v32, 1, v34) == 1)
      {
        v24 = *(_QWORD *)(v0 + 800);
        v25 = *(_QWORD *)(v0 + 792);
        v26 = *(_QWORD *)(v0 + 776);
        v27 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v26, 1, 1, v25);
      }
      else
      {
        v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        v38 = *(_QWORD *)(v0 + 800);
        v39 = *(_QWORD *)(v0 + 792);
        v40 = *(_QWORD *)(v0 + 776);
        v41 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v40, v41 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v39);
        outlined destroy of PKStrokeProperties(v41, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v39);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v37(v40, 1, v39) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v42 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1008) = v42;
          *v42 = v0;
          v42[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
        }
      }
      v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v29 = *(_QWORD *)(v0 + 776);
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v31);
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v28(v30, 1, v31) != 1);
  }
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  v14 = *(_QWORD *)(v0 + 792);
  v15 = *(_QWORD *)(v0 + 768);
  v16 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 744) + 8);
  v16(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  v239 = v16;
  if (v13(v15, 1, v14) == 1)
  {
    v17 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v18 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v18, v17);
    v19 = 0;
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v17, 1, v20) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v21 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
    }
    else
    {
      v52 = *(_QWORD *)(v0 + 944);
      v53 = *(_QWORD *)(v0 + 832);
      v54 = *(_QWORD *)(v0 + 824);
      v55 = *(_QWORD *)(v0 + 792);
      v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
      v56(v54, *(_QWORD *)(v0 + 624), v55);
      v56(v53, v54, v55);
      swift_beginAccess();
      v57 = *(_QWORD *)(v52 + 16);
      if (!*(_QWORD *)(v57 + 16))
        goto LABEL_117;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
      if ((v59 & 1) == 0)
        goto LABEL_117;
      v60 = *(_QWORD *)(v0 + 832);
      v61 = *(_QWORD *)(v0 + 800);
      v62 = *(_QWORD *)(v0 + 792);
      v63 = *(void **)(*(_QWORD *)(v57 + 56) + 8 * v58);
      swift_endAccess();
      v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      v21 = v63;
      v64(v60, v62);
    }
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 944);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v44 = *(_QWORD *)(v43 + 16);
    if (!*(_QWORD *)(v44 + 16))
      goto LABEL_115;
    v45 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v46 & 1) == 0)
      goto LABEL_115;
    v47 = *(_QWORD *)(v0 + 840);
    v48 = *(_QWORD *)(v0 + 800);
    v49 = *(_QWORD *)(v0 + 792);
    v50 = *(void **)(*(_QWORD *)(v44 + 56) + 8 * v45);
    swift_endAccess();
    v51 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v21 = v50;
    v51(v47, v49);
    v19 = 0;
  }
  *(_QWORD *)(v0 + 1024) = v21;
  v65 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v257 = v21;
  v66 = (uint64_t)objc_msgSend(v21, sel_pageCount);
  if (v66 < 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  v1 = v66;
  if (!v66)
  {
LABEL_47:
    v242 = v65;
    *(_QWORD *)(v0 + 1032) = v65;
    v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v109 = *(_QWORD *)(v0 + 720);
    v110 = *(_QWORD *)(v0 + 656);
    CROrderedSet.makeIterator()();
    CROrderedSet.Iterator.next()();
    if (v108(v109, 1, v110) == 1)
    {
LABEL_48:
      v111 = *(_QWORD *)(v0 + 944);
      v112 = *(_QWORD *)(v0 + 864);
      v113 = *(_QWORD *)(v0 + 392);
      v115 = *(_QWORD *)(v0 + 376);
      v114 = *(_QWORD *)(v0 + 384);
      v239(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
      swift_beginAccess();
      v116 = *(_QWORD *)(v111 + 16);
      *(_QWORD *)&v261[0] = v112;
      swift_bridgeObjectRetain();
      v117 = PaperDocument.update<A>(_:in:otherDocuments:use:)(v257, v115, v116, (unint64_t *)v261, v114, v113);
      *(_QWORD *)(v0 + 1040) = v117;
      swift_bridgeObjectRelease();
      v118 = v117[32];
      *(_BYTE *)(v0 + 91) = v118;
      v119 = -1;
      v120 = -1 << v118;
      if (-v120 < 64)
        v119 = ~(-1 << -(char)v120);
      v121 = v119 & *((_QWORD *)v117 + 7);
      if (v121)
      {
        v122 = 0;
        v123 = __clz(__rbit64(v121));
        v124 = (v121 - 1) & v121;
        v66 = *(_QWORD *)(v0 + 1040);
      }
      else
      {
        v67 = 63 - v120;
        v66 = *(_QWORD *)(v0 + 1040);
        if ((unint64_t)(63 - v120) <= 0x7F)
          goto LABEL_98;
        v176 = *(_QWORD *)(v66 + 64);
        if (v176)
        {
          v122 = 1;
          goto LABEL_76;
        }
        if (v67 < 0xC0)
          goto LABEL_98;
        v176 = *(_QWORD *)(v66 + 72);
        if (v176)
        {
          v122 = 2;
          goto LABEL_76;
        }
        if (v67 < 0x100)
          goto LABEL_98;
        v176 = *(_QWORD *)(v66 + 80);
        if (!v176)
          goto LABEL_86;
        v122 = 3;
LABEL_76:
        v124 = (v176 - 1) & v176;
        v123 = __clz(__rbit64(v176)) + (v122 << 6);
      }
      *(_QWORD *)(v0 + 1056) = v124;
      *(_QWORD *)(v0 + 1048) = v122;
      v125 = *(_QWORD *)(v0 + 816);
      v126 = *(_QWORD *)(v0 + 808);
      v127 = *(_QWORD *)(v0 + 800);
      v128 = *(_QWORD *)(v0 + 792);
      v129 = *(_QWORD *)(v66 + 48) + *(_QWORD *)(v127 + 72) * v123;
      v130 = *(void (**)(uint64_t, unint64_t, uint64_t))(v127 + 16);
      *(_QWORD *)(v0 + 1064) = v130;
      v130(v125, v129, v128);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v126, v125, v128);
      v131 = swift_task_alloc();
      *(_QWORD *)(v0 + 1072) = v131;
      *(_QWORD *)(v131 + 16) = v126;
      v132 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1080) = v132;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *v132 = v0;
      v132[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
      return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
    }
    v249 = (_QWORD *)(v0 + 136);
    v254 = *(_QWORD *)(v0 + 592);
    v240 = *(_QWORD *)(v0 + 552);
    v241 = *(_QWORD *)(v0 + 544);
    v244 = *(_QWORD *)(v0 + 664);
    v245 = *(void (**)(_QWORD, _QWORD, _QWORD))(v244 + 32);
    while (1)
    {
      v137 = *(_QWORD *)(v0 + 632);
      v138 = *(_QWORD *)(v0 + 584);
      v245(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      v139 = *(_QWORD *)(v0 + 160);
      v140 = *(_QWORD *)(v0 + 168);
      __swift_project_boxed_opaque_existential_1(v249, v139);
      (*(void (**)(uint64_t, uint64_t))(v140 + 88))(v139, v140);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v254 + 48))(v137, 1, v138) == 1)
      {
        v133 = *(_QWORD *)(v0 + 632);
        (*(void (**)(_QWORD, _QWORD))(v244 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
        outlined destroy of StocksKitCurrencyCache.Provider?(v133, &demangling cache variable for type metadata for PDFPageID?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v249);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v249);
        if (v242[2])
        {
          v141 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600));
          if ((v142 & 1) != 0)
          {
            v143 = *(_QWORD *)(v242[7] + 8 * v141);
            if (one-time initialization token for lock != -1)
              swift_once();
            v144 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
            v145 = swift_task_alloc();
            *(_QWORD *)(v145 + 16) = v257;
            *(_QWORD *)(v145 + 24) = v143;
            v146 = swift_task_alloc();
            *(_QWORD *)(v146 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
            *(_QWORD *)(v146 + 24) = v145;
            v147 = v144 + 4;
            os_unfair_lock_lock(v144 + 4);
            specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v148, *(uint64_t (**)(void))(v146 + 16));
            v149 = *(_QWORD *)(v0 + 544);
            v150 = *(_QWORD *)(v0 + 520);
            os_unfair_lock_unlock(v147);
            swift_task_dealloc();
            swift_task_dealloc();
            v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v240 + 48);
            if (v151(v150, 1, v149) == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
              v152 = objc_msgSend(v257, sel_pageAtIndex_, v143);
              if (!v152)
                goto LABEL_116;
              v153 = v152;
              v154 = *(_QWORD *)(v0 + 544);
              v155 = *(_QWORD *)(v0 + 512);
              type metadata accessor for PaperKitPDFPage(0);
              v156 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
              swift_beginAccess();
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v156, v155, &demangling cache variable for type metadata for PageId?);

              if (v151(v155, 1, v154) == 1)
              {
                v157 = *(_QWORD *)(v0 + 584);
                v158 = *(_QWORD *)(v0 + 568);
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v254 + 56))(v158, 1, 1, v157);
                v159 = v241;
                v160 = v158 + *(int *)(v241 + 20);
                v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v160, 1, 1, v161);
                goto LABEL_69;
              }
              v164 = *(_QWORD *)(v0 + 568);
              v165 = *(_QWORD *)(v0 + 512);
            }
            else
            {
              v164 = *(_QWORD *)(v0 + 568);
              v165 = *(_QWORD *)(v0 + 520);
            }
            outlined init with take of PKStrokeStruct(v165, v164, type metadata accessor for PageId);
            v159 = v241;
LABEL_69:
            v166 = *(_QWORD *)(v0 + 568);
            v167 = *(_QWORD *)(v0 + 504);
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v166 + *(int *)(v159 + 20), v167, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            outlined destroy of PKStrokeProperties(v166, type metadata accessor for PageId);
            v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
            v169 = *(_QWORD *)(v168 - 8);
            v170 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168);
            outlined destroy of StocksKitCurrencyCache.Provider?(v167, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            v171 = *(_QWORD *)(v0 + 696);
            if (v170 == 1)
            {
              v237 = *(_QWORD *)(v0 + 656);
              v238 = *(_QWORD *)(v0 + 600);
              v172 = *(_QWORD *)(v0 + 560);
              v173 = v143;
              v174 = *(_QWORD *)(v0 + 496);
              (*(void (**)(_QWORD, uint64_t))(v244 + 16))(*(_QWORD *)(v0 + 688), v171);
              lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
              WeakTagged_3.init(_:)();
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v169 + 56))(v174, 0, 1, v168);
              PaperKitPDFDocument.subscript.getter(v173, v172);
              outlined assign with take of Date?(v174, v172 + *(int *)(v241 + 20), &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              PaperKitPDFDocument.subscript.setter(v172, v173);
              outlined destroy of PKStrokeProperties(v238, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v171, v237);
            }
            else
            {
              v175 = *(_QWORD *)(v0 + 656);
              outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v171, v175);
            }
            goto LABEL_55;
          }
        }
        v162 = *(_QWORD *)(v0 + 696);
        v163 = *(_QWORD *)(v0 + 656);
        outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v162, v163);
      }
LABEL_55:
      v134 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v135 = *(_QWORD *)(v0 + 720);
      v136 = *(_QWORD *)(v0 + 656);
      CROrderedSet.Iterator.next()();
      if (v134(v135, 1, v136) == 1)
        goto LABEL_48;
    }
  }
  if (one-time initialization token for lock != -1)
LABEL_91:
    v66 = swift_once();
  v68 = 0;
  v253 = *(_QWORD *)(v0 + 592);
  v248 = *(_QWORD *)(v0 + 552);
  v243 = *(_QWORD *)(v0 + 544);
  while (v1 != v68)
  {
    v69 = v65;
    v70 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    v71 = swift_task_alloc();
    *(_QWORD *)(v71 + 16) = v257;
    *(_QWORD *)(v71 + 24) = v68;
    v72 = swift_task_alloc();
    *(_QWORD *)(v72 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(_QWORD *)(v72 + 24) = v71;
    os_unfair_lock_lock(v70 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v73, *(uint64_t (**)(void))(v72 + 16));
    if (v19)
    {
      os_unfair_lock_unlock(v70 + 4);
      return swift_task_dealloc();
    }
    v74 = v1;
    v75 = *(_QWORD *)(v0 + 544);
    v76 = *(_QWORD *)(v0 + 536);
    os_unfair_lock_unlock(v70 + 4);
    swift_task_dealloc();
    swift_task_dealloc();
    v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v248 + 48);
    if (v77(v76, 1, v75) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
      v78 = objc_msgSend(v257, sel_pageAtIndex_, v68);
      if (!v78)
        goto LABEL_114;
      v79 = v78;
      v80 = *(_QWORD *)(v0 + 544);
      v81 = *(_QWORD *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      v82 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v82, v81, &demangling cache variable for type metadata for PageId?);

      v1 = v74;
      if (v77(v81, 1, v80) == 1)
      {
        v83 = *(_QWORD *)(v0 + 584);
        v84 = *(_QWORD *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56))(v84, 1, 1, v83);
        v85 = v84 + *(int *)(v243 + 20);
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v85, 1, 1, v86);
      }
      else
      {
        outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 576), type metadata accessor for PageId);
      }
      v65 = v69;
    }
    else
    {
      outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 576), type metadata accessor for PageId);
      v65 = v69;
      v1 = v74;
    }
    v87 = *(_QWORD *)(v0 + 640);
    v88 = *(_QWORD *)(v0 + 584);
    v89 = *(_QWORD *)(v0 + 576);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, v87, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v89, type metadata accessor for PageId);
    v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v253 + 48))(v87, 1, v88);
    v91 = *(_QWORD *)(v0 + 640);
    if (v90 != 1)
    {
      v92 = *(_QWORD *)(v0 + 616);
      v93 = *(Swift::UInt **)(v0 + 608);
      outlined init with take of PKStrokeStruct(v91, v92, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined init with copy of PKStrokeProperties(v92, (uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v261[0] = v65;
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v93);
      v96 = v65[2];
      v97 = (v95 & 1) == 0;
      v66 = v96 + v97;
      if (__OFADD__(v96, v97))
        goto LABEL_85;
      v98 = v95;
      if (v65[3] >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v95 & 1) == 0)
            goto LABEL_44;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v65 = *(_QWORD **)&v261[0];
          if ((v98 & 1) == 0)
            goto LABEL_44;
        }
      }
      else
      {
        v99 = *(Swift::UInt **)(v0 + 608);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, isUniquelyReferenced_nonNull_native);
        v65 = *(_QWORD **)&v261[0];
        v100 = specialized __RawDictionaryStorage.find<A>(_:)(v99);
        if ((v98 & 1) != (v101 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v19 = v100;
        if ((v98 & 1) == 0)
        {
LABEL_44:
          v102 = *(_QWORD *)(v0 + 608);
          v65[(v19 >> 6) + 8] |= 1 << v19;
          outlined init with copy of PKStrokeProperties(v102, v65[6] + *(_QWORD *)(v253 + 72) * v19, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          *(_QWORD *)(v65[7] + 8 * v19) = v68;
          v103 = v65[2];
          v104 = __OFADD__(v103, 1);
          v105 = v103 + 1;
          if (v104)
          {
            __break(1u);
            goto LABEL_90;
          }
          v65[2] = v105;
          goto LABEL_46;
        }
      }
      *(_QWORD *)(v65[7] + 8 * v19) = v68;
LABEL_46:
      v106 = *(_QWORD *)(v0 + 616);
      v107 = *(_QWORD *)(v0 + 608);
      swift_bridgeObjectRelease();
      outlined destroy of PKStrokeProperties(v107, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v66 = outlined destroy of PKStrokeProperties(v106, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      goto LABEL_24;
    }
    v66 = outlined destroy of StocksKitCurrencyCache.Provider?(v91, &demangling cache variable for type metadata for PDFPageID?);
LABEL_24:
    v19 = 0;
    if (v1 == ++v68)
      goto LABEL_47;
  }
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  if (v67 >= 0x140)
  {
    v176 = *(_QWORD *)(v66 + 88);
    if (v176)
    {
      v122 = 4;
    }
    else
    {
      v177 = 0;
      v178 = v67 >> 6;
      if (v67 >> 6 <= 5)
        v178 = 5;
      v179 = v178 - 5;
      do
      {
        if (v179 == v177)
          goto LABEL_98;
        v176 = *(_QWORD *)(v66 + 96 + 8 * v177++);
      }
      while (!v176);
      v122 = v177 + 4;
    }
    goto LABEL_76;
  }
LABEL_98:
  v180 = *(_WORD *)(v0 + 92);
  v181 = *(_BYTE *)(v0 + 94);
  v182 = *(_QWORD *)(v0 + 936);
  v255 = *(_OWORD *)(v0 + 904);
  v258 = *(_OWORD *)(v0 + 920);
  v246 = *(_OWORD *)(v0 + 872);
  v250 = *(_OWORD *)(v0 + 888);
  v183 = *(_QWORD *)(v0 + 864);
  v185 = *(_QWORD *)(v0 + 384);
  v184 = *(_QWORD *)(v0 + 392);
  v186 = *(_QWORD *)(v0 + 376);
  swift_release();
  v260 = v183;
  v261[0] = v246;
  v261[1] = v250;
  v261[2] = v255;
  v261[3] = v258;
  v262 = v182;
  v264 = v181;
  v263 = v180;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v186, &v260, (uint64_t *)v261, v185, v184);
  if (v183 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_112:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v259 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v259);
  }
  v187 = *(_QWORD *)(v0 + 864);
  v189 = *(_QWORD *)(v0 + 480);
  v188 = *(_QWORD *)(v0 + 488);
  v191 = *(_QWORD *)(v0 + 464);
  v190 = *(_QWORD *)(v0 + 472);
  v192 = *(_QWORD *)(v0 + 448);
  v193 = *(_QWORD *)(v0 + 456);
  v194 = *(_QWORD *)(v0 + 400);
  outlined copy of PaperDocument.PDFDocumentUse(v187);
  outlined consume of PaperDocument.PDFDocumentUse(v187);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v190, v194, v192);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 32))(v191, v190, v192);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v195 = *(int *)(v189 + 36);
  *(_DWORD *)(v0 + 1108) = v195;
  *(_QWORD *)(v188 + v195) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v197 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v198 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v199 = *(_QWORD *)(v0 + 712);
    v200 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v198(v199, 1, v200) == 1)
    {
      v201 = *(_QWORD *)(v0 + 432);
      v203 = *(_QWORD *)(v0 + 408);
      v202 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v202 + 56))(v201, 1, 1, v203);
LABEL_107:
      v220 = *(_QWORD *)(v0 + 440);
      v222 = *(_QWORD *)(v0 + 408);
      v221 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v220, v197);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v220, 1, v222) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_112;
      }
      v223 = *(void **)(v0 + 1024);
      v224 = *(char **)(v0 + 440);
      v225 = *(_QWORD *)v224;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v224[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v226 = objc_msgSend(v223, (SEL)p_base_prots[407], v225);
      *(_QWORD *)(v0 + 1088) = v226;
      if (v226)
      {
        v227 = v226;
        type metadata accessor for PaperKitPDFPage(0);
        v228 = swift_dynamicCastClass();
        if (v228)
        {
          v229 = v228;
          v230 = *(_WORD *)(v0 + 92);
          v231 = *(_BYTE *)(v0 + 94);
          v232 = *(_QWORD *)(v0 + 936);
          v252 = *(_OWORD *)(v0 + 904);
          v256 = *(_OWORD *)(v0 + 920);
          v247 = *(_OWORD *)(v0 + 872);
          v251 = *(_OWORD *)(v0 + 888);
          v233 = *(_QWORD *)(v0 + 864);
          SharedTagged_3.subscript.getter();
          v234 = *(_QWORD *)(v0 + 200);
          v235 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v234);
          *(_QWORD *)(v0 + 368) = v233;
          *(_OWORD *)(v0 + 16) = v247;
          *(_OWORD *)(v0 + 32) = v251;
          *(_OWORD *)(v0 + 48) = v252;
          *(_OWORD *)(v0 + 64) = v256;
          *(_QWORD *)(v0 + 80) = v232;
          *(_BYTE *)(v0 + 90) = v231;
          *(_WORD *)(v0 + 88) = v230;
          *(_QWORD *)&v256 = **(int **)(v235 + 144) + *(_QWORD *)(v235 + 144);
          v236 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1096) = v236;
          *v236 = v0;
          v236[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v256)(v229, v0 + 368, *(_QWORD *)(v0 + 376), v0 + 16, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v234, v235);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v204 = v197;
  v205 = p_base_prots;
  v206 = *(int *)(v0 + 1108);
  v207 = *(_QWORD *)(v0 + 680);
  v208 = *(_QWORD *)(v0 + 656);
  v209 = *(_QWORD *)(v0 + 488);
  v210 = *(_QWORD *)(v0 + 424);
  v211 = *(_QWORD *)(v0 + 408);
  v212 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v212(v207, *(_QWORD *)(v0 + 712), v208);
  v213 = v210 + *(int *)(v211 + 48);
  v214 = *(_QWORD *)(v209 + v206);
  v212(v213, v207, v208);
  if (!__OFADD__(v214, 1))
  {
    v215 = *(_QWORD *)(v0 + 656);
    v216 = *(_QWORD **)(v0 + 432);
    v218 = *(_QWORD *)(v0 + 408);
    v217 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1108)) = v214 + 1;
    v219 = (char *)v216 + *(int *)(v218 + 48);
    *v216 = v214;
    v212((uint64_t)v219, v213, v215);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v216, 0, 1, v218);
    p_base_prots = v205;
    v197 = v204;
    goto LABEL_107;
  }
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  swift_endAccess();
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 984) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, _QWORD);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  char v45;
  uint64_t v46;
  void *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  Swift::UInt *v77;
  int isUniquelyReferenced_nonNull_native;
  char v79;
  unint64_t v80;
  uint64_t v81;
  _BOOL8 v82;
  char v83;
  Swift::UInt *v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void (*v115)(uint64_t, unint64_t, uint64_t);
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned int (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  os_unfair_lock_s *v129;
  uint64_t v130;
  uint64_t v131;
  os_unfair_lock_s *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(uint64_t, uint64_t, uint64_t);
  id v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  os_unfair_lock_s *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int16 v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __objc2_prot_list **p_base_prots;
  uint64_t *v181;
  unsigned int (*v182)(uint64_t, uint64_t, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  __objc2_prot_list **v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  char *v208;
  uint64_t v209;
  id v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  __int16 v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(_QWORD, _QWORD);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(_QWORD, _QWORD, _QWORD);
  _QWORD *v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  void *v238;
  __int128 v239;
  __int128 v240;
  uint64_t *v241;
  _QWORD *v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  _OWORD v246[4];
  uint64_t v247;
  __int16 v248;
  char v249;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 792));
  v241 = *(uint64_t **)(v0 + 984);
  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 992) = v4;
  if (v4(v1, 1, v3) != 1)
  {
    *(_QWORD *)(v0 + 1000) = *(_QWORD *)(*(_QWORD *)(v0 + 664) + 32);
    do
    {
      v23 = *(_QWORD *)(v0 + 648);
      v24 = *(_QWORD *)(v0 + 592);
      v25 = *(_QWORD *)(v0 + 584);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1000))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      v26 = *(_QWORD *)(v0 + 120);
      v27 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v26);
      (*(void (**)(uint64_t, uint64_t))(v27 + 88))(v26, v27);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v23, 1, v25) == 1)
      {
        v15 = *(_QWORD *)(v0 + 800);
        v16 = *(_QWORD *)(v0 + 792);
        v17 = *(_QWORD *)(v0 + 776);
        v18 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v18, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v17, 1, 1, v16);
      }
      else
      {
        v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        v29 = *(_QWORD *)(v0 + 800);
        v30 = *(_QWORD *)(v0 + 792);
        v31 = *(_QWORD *)(v0 + 776);
        v32 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v31, v32 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v30);
        outlined destroy of PKStrokeProperties(v32, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v30);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v28(v31, 1, v30) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v33 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1008) = v33;
          *v33 = v0;
          v33[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
        }
      }
      v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v20 = *(_QWORD *)(v0 + 776);
      v21 = *(_QWORD *)(v0 + 728);
      v22 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v22);
      outlined destroy of StocksKitCurrencyCache.Provider?(v20, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v19(v21, 1, v22) != 1);
  }
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  v6 = *(_QWORD *)(v0 + 792);
  v7 = *(_QWORD *)(v0 + 768);
  v8 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 744) + 8);
  v8(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v5(v7, 1, v6) == 1)
  {
    v9 = *(_QWORD *)(v0 + 952);
    v10 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v11 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v11, v10);
    v12 = v241;
    swift_bridgeObjectRelease();
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v10, 1, v13) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v14 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
      goto LABEL_18;
    }
    v40 = *(_QWORD *)(v0 + 944);
    v41 = *(_QWORD *)(v0 + 832);
    v42 = *(_QWORD *)(v0 + 824);
    v43 = *(_QWORD *)(v0 + 792);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
    v44(v42, *(_QWORD *)(v0 + 624), v43);
    v44(v41, v42, v43);
    swift_beginAccess();
    v36 = *(_QWORD *)(v40 + 16);
    if (!*(_QWORD *)(v36 + 16))
      goto LABEL_119;
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
    if ((v45 & 1) == 0)
      goto LABEL_119;
    v39 = *(_QWORD *)(v0 + 832);
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 944);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v36 = *(_QWORD *)(v35 + 16);
    v12 = v241;
    if (!*(_QWORD *)(v36 + 16))
      goto LABEL_117;
    v37 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v38 & 1) == 0)
      goto LABEL_117;
    v39 = *(_QWORD *)(v0 + 840);
  }
  v46 = *(_QWORD *)(v0 + 800);
  v9 = *(_QWORD *)(v0 + 792);
  v47 = *(void **)(*(_QWORD *)(v36 + 56) + 8 * v37);
  swift_endAccess();
  v48 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
  v14 = v47;
  v48(v39, v9);
LABEL_18:
  *(_QWORD *)(v0 + 1024) = v14;
  v242 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v49 = (uint64_t)objc_msgSend(v14, sel_pageCount);
  if (v49 < 0)
  {
LABEL_92:
    __break(1u);
  }
  else
  {
    v9 = v49;
    v238 = v14;
    v223 = v8;
    if (!v49)
    {
LABEL_46:
      *(_QWORD *)(v0 + 1032) = v242;
      v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v94 = *(_QWORD *)(v0 + 720);
      v95 = *(_QWORD *)(v0 + 656);
      CROrderedSet.makeIterator()();
      CROrderedSet.Iterator.next()();
      if (v93(v94, 1, v95) != 1)
      {
        v228 = (_QWORD *)(v0 + 136);
        v231 = *(_QWORD *)(v0 + 592);
        v224 = *(_QWORD *)(v0 + 544);
        v225 = *(_QWORD *)(v0 + 552);
        v235 = *(_QWORD *)(v0 + 664);
        v227 = *(void (**)(_QWORD, _QWORD, _QWORD))(v235 + 32);
        do
        {
          v122 = *(_QWORD *)(v0 + 632);
          v123 = *(_QWORD *)(v0 + 584);
          v227(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
          SharedTagged_3.subscript.getter();
          v124 = *(_QWORD *)(v0 + 160);
          v125 = *(_QWORD *)(v0 + 168);
          __swift_project_boxed_opaque_existential_1(v228, v124);
          (*(void (**)(uint64_t, uint64_t))(v125 + 88))(v124, v125);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48))(v122, 1, v123) == 1)
          {
            v118 = *(_QWORD *)(v0 + 632);
            (*(void (**)(_QWORD, _QWORD))(v235 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
            outlined destroy of StocksKitCurrencyCache.Provider?(v118, &demangling cache variable for type metadata for PDFPageID?);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v228);
          }
          else
          {
            outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v228);
            if (v242[2]
              && (v126 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600)), (v127 & 1) != 0))
            {
              v128 = *(_QWORD *)(v242[7] + 8 * v126);
              if (one-time initialization token for lock != -1)
                swift_once();
              v129 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
              v130 = swift_task_alloc();
              *(_QWORD *)(v130 + 16) = v238;
              *(_QWORD *)(v130 + 24) = v128;
              v131 = swift_task_alloc();
              *(_QWORD *)(v131 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
              *(_QWORD *)(v131 + 24) = v130;
              v132 = v129 + 4;
              os_unfair_lock_lock(v129 + 4);
              specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v133, *(uint64_t (**)(void))(v131 + 16));
              if (v12)
              {
                v159 = v129 + 4;
                goto LABEL_73;
              }
              v134 = *(_QWORD *)(v0 + 544);
              v135 = *(_QWORD *)(v0 + 520);
              os_unfair_lock_unlock(v132);
              swift_task_dealloc();
              swift_task_dealloc();
              v136 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48);
              if (v136(v135, 1, v134) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
                v137 = objc_msgSend(v238, sel_pageAtIndex_, v128);
                if (!v137)
                  goto LABEL_118;
                v138 = v137;
                v139 = *(_QWORD *)(v0 + 544);
                v140 = *(_QWORD *)(v0 + 512);
                type metadata accessor for PaperKitPDFPage(0);
                v141 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
                swift_beginAccess();
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v141, v140, &demangling cache variable for type metadata for PageId?);

                if (v136(v140, 1, v139) == 1)
                {
                  v142 = *(_QWORD *)(v0 + 584);
                  v143 = *(_QWORD *)(v0 + 568);
                  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v143, 1, 1, v142);
                  v144 = v224;
                  v145 = v143 + *(int *)(v224 + 20);
                  v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 56))(v145, 1, 1, v146);
                }
                else
                {
                  outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 568), type metadata accessor for PageId);
                  v144 = v224;
                }
              }
              else
              {
                outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 568), type metadata accessor for PageId);
                v144 = v224;
              }
              v149 = *(_QWORD *)(v0 + 568);
              v150 = *(_QWORD *)(v0 + 504);
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v149 + *(int *)(v144 + 20), v150, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              outlined destroy of PKStrokeProperties(v149, type metadata accessor for PageId);
              v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
              v152 = *(_QWORD *)(v151 - 8);
              v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v150, 1, v151);
              outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              v154 = v144;
              v155 = *(_QWORD *)(v0 + 696);
              if (v153 == 1)
              {
                v221 = *(_QWORD *)(v0 + 656);
                v222 = *(_QWORD *)(v0 + 600);
                v156 = *(_QWORD *)(v0 + 560);
                v157 = *(_QWORD *)(v0 + 496);
                (*(void (**)(_QWORD, uint64_t))(v235 + 16))(*(_QWORD *)(v0 + 688), v155);
                lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
                WeakTagged_3.init(_:)();
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v152 + 56))(v157, 0, 1, v151);
                PaperKitPDFDocument.subscript.getter(v128, v156);
                outlined assign with take of Date?(v157, v156 + *(int *)(v154 + 20), &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                PaperKitPDFDocument.subscript.setter(v156, v128);
                outlined destroy of PKStrokeProperties(v222, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v155, v221);
              }
              else
              {
                v158 = *(_QWORD *)(v0 + 656);
                outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v155, v158);
              }
              v12 = 0;
            }
            else
            {
              v147 = *(_QWORD *)(v0 + 696);
              v148 = *(_QWORD *)(v0 + 656);
              outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v235 + 8))(v147, v148);
            }
          }
          v119 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
          v120 = *(_QWORD *)(v0 + 720);
          v121 = *(_QWORD *)(v0 + 656);
          CROrderedSet.Iterator.next()();
        }
        while (v119(v120, 1, v121) != 1);
      }
      v96 = *(_QWORD *)(v0 + 944);
      v97 = *(_QWORD *)(v0 + 864);
      v98 = *(_QWORD *)(v0 + 392);
      v100 = *(_QWORD *)(v0 + 376);
      v99 = *(_QWORD *)(v0 + 384);
      v223(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
      swift_beginAccess();
      v101 = *(_QWORD *)(v96 + 16);
      *(_QWORD *)&v246[0] = v97;
      swift_bridgeObjectRetain();
      v102 = PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v238, v100, v101, (unint64_t *)v246, v99, v98);
      *(_QWORD *)(v0 + 1040) = v102;
      swift_bridgeObjectRelease();
      v103 = v102[32];
      *(_BYTE *)(v0 + 91) = v103;
      v104 = -1;
      v105 = -1 << v103;
      if (-v105 < 64)
        v104 = ~(-1 << -(char)v105);
      v106 = v104 & *((_QWORD *)v102 + 7);
      if (v106)
      {
        v107 = 0;
        v108 = __clz(__rbit64(v106));
        v109 = (v106 - 1) & v106;
        v49 = *(_QWORD *)(v0 + 1040);
      }
      else
      {
        v50 = 63 - v105;
        v49 = *(_QWORD *)(v0 + 1040);
        if ((unint64_t)(63 - v105) <= 0x7F)
          goto LABEL_100;
        v160 = *(_QWORD *)(v49 + 64);
        if (v160)
        {
          v107 = 1;
          goto LABEL_77;
        }
        if (v50 < 0xC0)
          goto LABEL_100;
        v160 = *(_QWORD *)(v49 + 72);
        if (v160)
        {
          v107 = 2;
          goto LABEL_77;
        }
        if (v50 < 0x100)
          goto LABEL_100;
        v160 = *(_QWORD *)(v49 + 80);
        if (!v160)
          goto LABEL_88;
        v107 = 3;
LABEL_77:
        v109 = (v160 - 1) & v160;
        v108 = __clz(__rbit64(v160)) + (v107 << 6);
      }
      *(_QWORD *)(v0 + 1056) = v109;
      *(_QWORD *)(v0 + 1048) = v107;
      v110 = *(_QWORD *)(v0 + 816);
      v111 = *(_QWORD *)(v0 + 808);
      v112 = *(_QWORD *)(v0 + 800);
      v113 = *(_QWORD *)(v0 + 792);
      v114 = *(_QWORD *)(v49 + 48) + *(_QWORD *)(v112 + 72) * v108;
      v115 = *(void (**)(uint64_t, unint64_t, uint64_t))(v112 + 16);
      *(_QWORD *)(v0 + 1064) = v115;
      v115(v110, v114, v113);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 32))(v111, v110, v113);
      v116 = swift_task_alloc();
      *(_QWORD *)(v0 + 1072) = v116;
      *(_QWORD *)(v116 + 16) = v111;
      v117 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1080) = v117;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *v117 = v0;
      v117[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
      return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
    }
    if (one-time initialization token for lock == -1)
      goto LABEL_21;
  }
  v49 = swift_once();
LABEL_21:
  v51 = 0;
  v234 = *(_QWORD *)(v0 + 592);
  v230 = *(_QWORD *)(v0 + 552);
  v226 = *(_QWORD *)(v0 + 544);
  while (v9 != v51)
  {
    v52 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    v53 = swift_task_alloc();
    *(_QWORD *)(v53 + 16) = v14;
    *(_QWORD *)(v53 + 24) = v51;
    v54 = swift_task_alloc();
    *(_QWORD *)(v54 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(_QWORD *)(v54 + 24) = v53;
    v55 = v52 + 4;
    os_unfair_lock_lock(v52 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v56, *(uint64_t (**)(void))(v54 + 16));
    if (v12)
    {
      v159 = v52 + 4;
LABEL_73:
      os_unfair_lock_unlock(v159);
      return swift_task_dealloc();
    }
    v57 = *(_QWORD *)(v0 + 544);
    v58 = *(_QWORD *)(v0 + 536);
    os_unfair_lock_unlock(v55);
    swift_task_dealloc();
    swift_task_dealloc();
    v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v230 + 48);
    if (v59(v58, 1, v57) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
      v60 = objc_msgSend(v238, sel_pageAtIndex_, v51);
      if (!v60)
        goto LABEL_116;
      v61 = v60;
      v62 = *(_QWORD *)(v0 + 544);
      v63 = *(_QWORD *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      v64 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v64, v63, &demangling cache variable for type metadata for PageId?);

      if (v59(v63, 1, v62) == 1)
      {
        v65 = *(_QWORD *)(v0 + 584);
        v66 = *(_QWORD *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v234 + 56))(v66, 1, 1, v65);
        v67 = v66 + *(int *)(v226 + 20);
        v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
        v14 = v238;
        goto LABEL_33;
      }
      v69 = *(_QWORD *)(v0 + 576);
      v70 = *(_QWORD *)(v0 + 528);
    }
    else
    {
      v69 = *(_QWORD *)(v0 + 576);
      v70 = *(_QWORD *)(v0 + 536);
    }
    outlined init with take of PKStrokeStruct(v70, v69, type metadata accessor for PageId);
    v14 = v238;
LABEL_33:
    v71 = *(_QWORD *)(v0 + 640);
    v72 = *(_QWORD *)(v0 + 584);
    v73 = *(_QWORD *)(v0 + 576);
    v12 = &demangling cache variable for type metadata for PDFPageID?;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v73, v71, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v73, type metadata accessor for PageId);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v234 + 48))(v71, 1, v72);
    v75 = *(_QWORD *)(v0 + 640);
    if (v74 != 1)
    {
      v76 = *(_QWORD *)(v0 + 616);
      v77 = *(Swift::UInt **)(v0 + 608);
      outlined init with take of PKStrokeStruct(v75, v76, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined init with copy of PKStrokeProperties(v76, (uint64_t)v77, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v246[0] = v242;
      v80 = specialized __RawDictionaryStorage.find<A>(_:)(v77);
      v81 = v242[2];
      v82 = (v79 & 1) == 0;
      v49 = v81 + v82;
      if (__OFADD__(v81, v82))
        goto LABEL_87;
      v83 = v79;
      if (v242[3] >= v49)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v79 & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v242 = *(_QWORD **)&v246[0];
          if ((v83 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        v84 = *(Swift::UInt **)(v0 + 608);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v49, isUniquelyReferenced_nonNull_native);
        v242 = *(_QWORD **)&v246[0];
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v84);
        if ((v83 & 1) != (v86 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v80 = v85;
        if ((v83 & 1) == 0)
        {
LABEL_43:
          v87 = *(_QWORD *)(v0 + 608);
          v242[(v80 >> 6) + 8] |= 1 << v80;
          outlined init with copy of PKStrokeProperties(v87, v242[6] + *(_QWORD *)(v234 + 72) * v80, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          *(_QWORD *)(v242[7] + 8 * v80) = v51;
          v88 = v242[2];
          v89 = __OFADD__(v88, 1);
          v90 = v88 + 1;
          if (v89)
          {
            __break(1u);
            goto LABEL_92;
          }
          v242[2] = v90;
          goto LABEL_45;
        }
      }
      *(_QWORD *)(v242[7] + 8 * v80) = v51;
LABEL_45:
      v91 = *(_QWORD *)(v0 + 616);
      v92 = *(_QWORD *)(v0 + 608);
      swift_bridgeObjectRelease();
      outlined destroy of PKStrokeProperties(v92, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v49 = outlined destroy of PKStrokeProperties(v91, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      goto LABEL_23;
    }
    v49 = outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for PDFPageID?);
LABEL_23:
    v12 = 0;
    if (v9 == ++v51)
      goto LABEL_46;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  if (v50 >= 0x140)
  {
    v160 = *(_QWORD *)(v49 + 88);
    if (v160)
    {
      v107 = 4;
    }
    else
    {
      v161 = 0;
      v162 = v50 >> 6;
      if (v50 >> 6 <= 5)
        v162 = 5;
      v163 = v162 - 5;
      do
      {
        if (v163 == v161)
          goto LABEL_100;
        v160 = *(_QWORD *)(v49 + 96 + 8 * v161++);
      }
      while (!v160);
      v107 = v161 + 4;
    }
    goto LABEL_77;
  }
LABEL_100:
  v164 = *(_WORD *)(v0 + 92);
  v165 = *(_BYTE *)(v0 + 94);
  v166 = *(_QWORD *)(v0 + 936);
  v239 = *(_OWORD *)(v0 + 904);
  v243 = *(_OWORD *)(v0 + 920);
  v236 = *(_OWORD *)(v0 + 888);
  v232 = *(_OWORD *)(v0 + 872);
  v167 = *(_QWORD *)(v0 + 864);
  v169 = *(_QWORD *)(v0 + 384);
  v168 = *(_QWORD *)(v0 + 392);
  v170 = *(_QWORD *)(v0 + 376);
  swift_release();
  v245 = v167;
  v246[0] = v232;
  v246[1] = v236;
  v246[2] = v239;
  v246[3] = v243;
  v247 = v166;
  v249 = v165;
  v248 = v164;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v170, &v245, (uint64_t *)v246, v169, v168);
  if (v167 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_114:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v244 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v244);
  }
  v171 = *(_QWORD *)(v0 + 864);
  v173 = *(_QWORD *)(v0 + 480);
  v172 = *(_QWORD *)(v0 + 488);
  v175 = *(_QWORD *)(v0 + 464);
  v174 = *(_QWORD *)(v0 + 472);
  v176 = *(_QWORD *)(v0 + 448);
  v177 = *(_QWORD *)(v0 + 456);
  v178 = *(_QWORD *)(v0 + 400);
  outlined copy of PaperDocument.PDFDocumentUse(v171);
  outlined consume of PaperDocument.PDFDocumentUse(v171);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 16))(v174, v178, v176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 32))(v175, v174, v176);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v179 = *(int *)(v173 + 36);
  *(_DWORD *)(v0 + 1108) = v179;
  *(_QWORD *)(v172 + v179) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v181 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v182 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v183 = *(_QWORD *)(v0 + 712);
    v184 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v182(v183, 1, v184) == 1)
    {
      v185 = *(_QWORD *)(v0 + 432);
      v187 = *(_QWORD *)(v0 + 408);
      v186 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v186 + 56))(v185, 1, 1, v187);
LABEL_109:
      v204 = *(_QWORD *)(v0 + 440);
      v206 = *(_QWORD *)(v0 + 408);
      v205 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v204, v181);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48))(v204, 1, v206) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_114;
      }
      v207 = *(void **)(v0 + 1024);
      v208 = *(char **)(v0 + 440);
      v209 = *(_QWORD *)v208;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v208[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v210 = objc_msgSend(v207, (SEL)p_base_prots[407], v209);
      *(_QWORD *)(v0 + 1088) = v210;
      if (v210)
      {
        v211 = v210;
        type metadata accessor for PaperKitPDFPage(0);
        v212 = swift_dynamicCastClass();
        if (v212)
        {
          v213 = v212;
          v214 = *(_WORD *)(v0 + 92);
          v215 = *(_BYTE *)(v0 + 94);
          v216 = *(_QWORD *)(v0 + 936);
          v237 = *(_OWORD *)(v0 + 904);
          v240 = *(_OWORD *)(v0 + 920);
          v229 = *(_OWORD *)(v0 + 872);
          v233 = *(_OWORD *)(v0 + 888);
          v217 = *(_QWORD *)(v0 + 864);
          SharedTagged_3.subscript.getter();
          v218 = *(_QWORD *)(v0 + 200);
          v219 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v218);
          *(_QWORD *)(v0 + 368) = v217;
          *(_OWORD *)(v0 + 16) = v229;
          *(_OWORD *)(v0 + 32) = v233;
          *(_OWORD *)(v0 + 48) = v237;
          *(_OWORD *)(v0 + 64) = v240;
          *(_QWORD *)(v0 + 80) = v216;
          *(_BYTE *)(v0 + 90) = v215;
          *(_WORD *)(v0 + 88) = v214;
          *(_QWORD *)&v240 = **(int **)(v219 + 144) + *(_QWORD *)(v219 + 144);
          v220 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1096) = v220;
          *v220 = v0;
          v220[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v240)(v213, v0 + 368, *(_QWORD *)(v0 + 376), v0 + 16, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v218, v219);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v188 = v181;
  v189 = p_base_prots;
  v190 = *(int *)(v0 + 1108);
  v191 = *(_QWORD *)(v0 + 680);
  v192 = *(_QWORD *)(v0 + 656);
  v193 = *(_QWORD *)(v0 + 488);
  v194 = *(_QWORD *)(v0 + 424);
  v195 = *(_QWORD *)(v0 + 408);
  v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v196(v191, *(_QWORD *)(v0 + 712), v192);
  v197 = v194 + *(int *)(v195 + 48);
  v198 = *(_QWORD *)(v193 + v190);
  v196(v197, v191, v192);
  if (!__OFADD__(v198, 1))
  {
    v199 = *(_QWORD *)(v0 + 656);
    v200 = *(_QWORD **)(v0 + 432);
    v202 = *(_QWORD *)(v0 + 408);
    v201 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1108)) = v198 + 1;
    v203 = (char *)v200 + *(int *)(v202 + 48);
    *v200 = v198;
    v196((uint64_t)v203, v197, v199);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v201 + 56))(v200, 0, 1, v202);
    p_base_prots = v189;
    v181 = v188;
    goto LABEL_109;
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  swift_endAccess();
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1016) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD, _QWORD);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  char v47;
  uint64_t v48;
  void *v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  os_unfair_lock_s *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  id v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  Swift::UInt *v79;
  int isUniquelyReferenced_nonNull_native;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  char v85;
  Swift::UInt *v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void (*v117)(uint64_t, unint64_t, uint64_t);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  uint64_t v133;
  os_unfair_lock_s *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  id v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_unfair_lock_s *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int16 v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __objc2_prot_list **p_base_prots;
  uint64_t *v183;
  unsigned int (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  __objc2_prot_list **v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  char *v210;
  uint64_t v211;
  id v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  __int16 v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(_QWORD, _QWORD);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void (*v229)(_QWORD, _QWORD, _QWORD);
  _QWORD *v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  void *v240;
  __int128 v241;
  __int128 v242;
  uint64_t *v243;
  _QWORD *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  _OWORD v248[4];
  uint64_t v249;
  __int16 v250;
  char v251;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 664);
  v5 = *(_QWORD *)(v0 + 656);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  CROrderedSet.Iterator.next()();
  v6 = v1(v2, 1, v5);
  v243 = *(uint64_t **)(v0 + 1016);
  if (v6 != 1)
  {
    do
    {
      v25 = *(_QWORD *)(v0 + 648);
      v26 = *(_QWORD *)(v0 + 592);
      v27 = *(_QWORD *)(v0 + 584);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1000))(*(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 656));
      SharedTagged_3.subscript.getter();
      v28 = *(_QWORD *)(v0 + 120);
      v29 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v28);
      (*(void (**)(uint64_t, uint64_t))(v29 + 88))(v28, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v25, 1, v27) == 1)
      {
        v17 = *(_QWORD *)(v0 + 800);
        v18 = *(_QWORD *)(v0 + 792);
        v19 = *(_QWORD *)(v0 + 776);
        v20 = *(_QWORD *)(v0 + 648);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        outlined destroy of StocksKitCurrencyCache.Provider?(v20, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v19, 1, 1, v18);
      }
      else
      {
        v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
        v31 = *(_QWORD *)(v0 + 800);
        v32 = *(_QWORD *)(v0 + 792);
        v33 = *(_QWORD *)(v0 + 776);
        v34 = *(_QWORD *)(v0 + 648);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v33, v34 + *(int *)(*(_QWORD *)(v0 + 584) + 20), v32);
        outlined destroy of PKStrokeProperties(v34, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v33, 0, 1, v32);
        __swift_destroy_boxed_opaque_existential_1(v0 + 96);
        if (v30(v33, 1, v32) != 1)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 792));
          v35 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1008) = v35;
          *v35 = v0;
          v35[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952));
        }
      }
      v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v22 = *(_QWORD *)(v0 + 776);
      v23 = *(_QWORD *)(v0 + 728);
      v24 = *(_QWORD *)(v0 + 656);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 704), v24);
      outlined destroy of StocksKitCurrencyCache.Provider?(v22, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      CROrderedSet.Iterator.next()();
    }
    while (v21(v23, 1, v24) != 1);
  }
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 968);
  v8 = *(_QWORD *)(v0 + 792);
  v9 = *(_QWORD *)(v0 + 768);
  v10 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 744) + 8);
  v10(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 736));
  CRRegister.wrappedValue.getter();
  if (v7(v9, 1, v8) == 1)
  {
    v11 = *(_QWORD *)(v0 + 952);
    v12 = *(_QWORD *)(v0 + 624);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 768), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_beginAccess();
    v13 = swift_bridgeObjectRetain();
    specialized Sequence.max(by:)(v13, v12);
    v14 = v243;
    swift_bridgeObjectRelease();
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v12, 1, v15) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 624), (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int)?);
      v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
      goto LABEL_18;
    }
    v42 = *(_QWORD *)(v0 + 944);
    v43 = *(_QWORD *)(v0 + 832);
    v44 = *(_QWORD *)(v0 + 824);
    v45 = *(_QWORD *)(v0 + 792);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 800) + 32);
    v46(v44, *(_QWORD *)(v0 + 624), v45);
    v46(v43, v44, v45);
    swift_beginAccess();
    v38 = *(_QWORD *)(v42 + 16);
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_119;
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 832));
    if ((v47 & 1) == 0)
      goto LABEL_119;
    v41 = *(_QWORD *)(v0 + 832);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 944);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 32))(*(_QWORD *)(v0 + 840), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 792));
    swift_beginAccess();
    v38 = *(_QWORD *)(v37 + 16);
    v14 = v243;
    if (!*(_QWORD *)(v38 + 16))
      goto LABEL_117;
    v39 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 840));
    if ((v40 & 1) == 0)
      goto LABEL_117;
    v41 = *(_QWORD *)(v0 + 840);
  }
  v48 = *(_QWORD *)(v0 + 800);
  v11 = *(_QWORD *)(v0 + 792);
  v49 = *(void **)(*(_QWORD *)(v38 + 56) + 8 * v39);
  swift_endAccess();
  v50 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
  v16 = v49;
  v50(v41, v11);
LABEL_18:
  *(_QWORD *)(v0 + 1024) = v16;
  v244 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v51 = (uint64_t)objc_msgSend(v16, sel_pageCount);
  if (v51 < 0)
  {
LABEL_92:
    __break(1u);
  }
  else
  {
    v11 = v51;
    v240 = v16;
    v225 = v10;
    if (!v51)
    {
LABEL_46:
      *(_QWORD *)(v0 + 1032) = v244;
      v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
      v96 = *(_QWORD *)(v0 + 720);
      v97 = *(_QWORD *)(v0 + 656);
      CROrderedSet.makeIterator()();
      CROrderedSet.Iterator.next()();
      if (v95(v96, 1, v97) != 1)
      {
        v230 = (_QWORD *)(v0 + 136);
        v233 = *(_QWORD *)(v0 + 592);
        v226 = *(_QWORD *)(v0 + 544);
        v227 = *(_QWORD *)(v0 + 552);
        v237 = *(_QWORD *)(v0 + 664);
        v229 = *(void (**)(_QWORD, _QWORD, _QWORD))(v237 + 32);
        do
        {
          v124 = *(_QWORD *)(v0 + 632);
          v125 = *(_QWORD *)(v0 + 584);
          v229(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 656));
          SharedTagged_3.subscript.getter();
          v126 = *(_QWORD *)(v0 + 160);
          v127 = *(_QWORD *)(v0 + 168);
          __swift_project_boxed_opaque_existential_1(v230, v126);
          (*(void (**)(uint64_t, uint64_t))(v127 + 88))(v126, v127);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v124, 1, v125) == 1)
          {
            v120 = *(_QWORD *)(v0 + 632);
            (*(void (**)(_QWORD, _QWORD))(v237 + 8))(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 656));
            outlined destroy of StocksKitCurrencyCache.Provider?(v120, &demangling cache variable for type metadata for PDFPageID?);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v230);
          }
          else
          {
            outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v230);
            if (v244[2]
              && (v128 = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt **)(v0 + 600)), (v129 & 1) != 0))
            {
              v130 = *(_QWORD *)(v244[7] + 8 * v128);
              if (one-time initialization token for lock != -1)
                swift_once();
              v131 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
              v132 = swift_task_alloc();
              *(_QWORD *)(v132 + 16) = v240;
              *(_QWORD *)(v132 + 24) = v130;
              v133 = swift_task_alloc();
              *(_QWORD *)(v133 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
              *(_QWORD *)(v133 + 24) = v132;
              v134 = v131 + 4;
              os_unfair_lock_lock(v131 + 4);
              specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v135, *(uint64_t (**)(void))(v133 + 16));
              if (v14)
              {
                v161 = v131 + 4;
                goto LABEL_73;
              }
              v136 = *(_QWORD *)(v0 + 544);
              v137 = *(_QWORD *)(v0 + 520);
              os_unfair_lock_unlock(v134);
              swift_task_dealloc();
              swift_task_dealloc();
              v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v227 + 48);
              if (v138(v137, 1, v136) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for PageId?);
                v139 = objc_msgSend(v240, sel_pageAtIndex_, v130);
                if (!v139)
                  goto LABEL_118;
                v140 = v139;
                v141 = *(_QWORD *)(v0 + 544);
                v142 = *(_QWORD *)(v0 + 512);
                type metadata accessor for PaperKitPDFPage(0);
                v143 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
                swift_beginAccess();
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v143, v142, &demangling cache variable for type metadata for PageId?);

                if (v138(v142, 1, v141) == 1)
                {
                  v144 = *(_QWORD *)(v0 + 584);
                  v145 = *(_QWORD *)(v0 + 568);
                  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 512), &demangling cache variable for type metadata for PageId?);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v233 + 56))(v145, 1, 1, v144);
                  v146 = v226;
                  v147 = v145 + *(int *)(v226 + 20);
                  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 56))(v147, 1, 1, v148);
                }
                else
                {
                  outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 568), type metadata accessor for PageId);
                  v146 = v226;
                }
              }
              else
              {
                outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 568), type metadata accessor for PageId);
                v146 = v226;
              }
              v151 = *(_QWORD *)(v0 + 568);
              v152 = *(_QWORD *)(v0 + 504);
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v151 + *(int *)(v146 + 20), v152, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              outlined destroy of PKStrokeProperties(v151, type metadata accessor for PageId);
              v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
              v154 = *(_QWORD *)(v153 - 8);
              v155 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153);
              outlined destroy of StocksKitCurrencyCache.Provider?(v152, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
              v156 = v146;
              v157 = *(_QWORD *)(v0 + 696);
              if (v155 == 1)
              {
                v223 = *(_QWORD *)(v0 + 656);
                v224 = *(_QWORD *)(v0 + 600);
                v158 = *(_QWORD *)(v0 + 560);
                v159 = *(_QWORD *)(v0 + 496);
                (*(void (**)(_QWORD, uint64_t))(v237 + 16))(*(_QWORD *)(v0 + 688), v157);
                lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
                WeakTagged_3.init(_:)();
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v154 + 56))(v159, 0, 1, v153);
                PaperKitPDFDocument.subscript.getter(v130, v158);
                outlined assign with take of Date?(v159, v158 + *(int *)(v156 + 20), &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
                PaperKitPDFDocument.subscript.setter(v158, v130);
                outlined destroy of PKStrokeProperties(v224, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v157, v223);
              }
              else
              {
                v160 = *(_QWORD *)(v0 + 656);
                outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v157, v160);
              }
              v14 = 0;
            }
            else
            {
              v149 = *(_QWORD *)(v0 + 696);
              v150 = *(_QWORD *)(v0 + 656);
              outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 600), (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              (*(void (**)(uint64_t, uint64_t))(v237 + 8))(v149, v150);
            }
          }
          v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
          v122 = *(_QWORD *)(v0 + 720);
          v123 = *(_QWORD *)(v0 + 656);
          CROrderedSet.Iterator.next()();
        }
        while (v121(v122, 1, v123) != 1);
      }
      v98 = *(_QWORD *)(v0 + 944);
      v99 = *(_QWORD *)(v0 + 864);
      v100 = *(_QWORD *)(v0 + 392);
      v102 = *(_QWORD *)(v0 + 376);
      v101 = *(_QWORD *)(v0 + 384);
      v225(*(_QWORD *)(v0 + 752), *(_QWORD *)(v0 + 736));
      swift_beginAccess();
      v103 = *(_QWORD *)(v98 + 16);
      *(_QWORD *)&v248[0] = v99;
      swift_bridgeObjectRetain();
      v104 = PaperDocument.update<A>(_:in:otherDocuments:use:)((char *)v240, v102, v103, (unint64_t *)v248, v101, v100);
      *(_QWORD *)(v0 + 1040) = v104;
      swift_bridgeObjectRelease();
      v105 = v104[32];
      *(_BYTE *)(v0 + 91) = v105;
      v106 = -1;
      v107 = -1 << v105;
      if (-v107 < 64)
        v106 = ~(-1 << -(char)v107);
      v108 = v106 & *((_QWORD *)v104 + 7);
      if (v108)
      {
        v109 = 0;
        v110 = __clz(__rbit64(v108));
        v111 = (v108 - 1) & v108;
        v51 = *(_QWORD *)(v0 + 1040);
      }
      else
      {
        v52 = 63 - v107;
        v51 = *(_QWORD *)(v0 + 1040);
        if ((unint64_t)(63 - v107) <= 0x7F)
          goto LABEL_100;
        v162 = *(_QWORD *)(v51 + 64);
        if (v162)
        {
          v109 = 1;
          goto LABEL_77;
        }
        if (v52 < 0xC0)
          goto LABEL_100;
        v162 = *(_QWORD *)(v51 + 72);
        if (v162)
        {
          v109 = 2;
          goto LABEL_77;
        }
        if (v52 < 0x100)
          goto LABEL_100;
        v162 = *(_QWORD *)(v51 + 80);
        if (!v162)
          goto LABEL_88;
        v109 = 3;
LABEL_77:
        v111 = (v162 - 1) & v162;
        v110 = __clz(__rbit64(v162)) + (v109 << 6);
      }
      *(_QWORD *)(v0 + 1056) = v111;
      *(_QWORD *)(v0 + 1048) = v109;
      v112 = *(_QWORD *)(v0 + 816);
      v113 = *(_QWORD *)(v0 + 808);
      v114 = *(_QWORD *)(v0 + 800);
      v115 = *(_QWORD *)(v0 + 792);
      v116 = *(_QWORD *)(v51 + 48) + *(_QWORD *)(v114 + 72) * v110;
      v117 = *(void (**)(uint64_t, unint64_t, uint64_t))(v114 + 16);
      *(_QWORD *)(v0 + 1064) = v117;
      v117(v112, v116, v115);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v114 + 32))(v113, v112, v115);
      v118 = swift_task_alloc();
      *(_QWORD *)(v0 + 1072) = v118;
      *(_QWORD *)(v118 + 16) = v113;
      v119 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1080) = v119;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
      *v119 = v0;
      v119[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
      return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
    }
    if (one-time initialization token for lock == -1)
      goto LABEL_21;
  }
  v51 = swift_once();
LABEL_21:
  v53 = 0;
  v236 = *(_QWORD *)(v0 + 592);
  v232 = *(_QWORD *)(v0 + 552);
  v228 = *(_QWORD *)(v0 + 544);
  while (v11 != v53)
  {
    v54 = (os_unfair_lock_s *)static PaperKitPDFDocument.lock;
    v55 = swift_task_alloc();
    *(_QWORD *)(v55 + 16) = v16;
    *(_QWORD *)(v55 + 24) = v53;
    v56 = swift_task_alloc();
    *(_QWORD *)(v56 + 16) = closure #1 in PaperKitPDFDocument.subscript.getterpartial apply;
    *(_QWORD *)(v56 + 24) = v55;
    v57 = v54 + 4;
    os_unfair_lock_lock(v54 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v58, *(uint64_t (**)(void))(v56 + 16));
    if (v14)
    {
      v161 = v54 + 4;
LABEL_73:
      os_unfair_lock_unlock(v161);
      return swift_task_dealloc();
    }
    v59 = *(_QWORD *)(v0 + 544);
    v60 = *(_QWORD *)(v0 + 536);
    os_unfair_lock_unlock(v57);
    swift_task_dealloc();
    swift_task_dealloc();
    v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48);
    if (v61(v60, 1, v59) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for PageId?);
      v62 = objc_msgSend(v240, sel_pageAtIndex_, v53);
      if (!v62)
        goto LABEL_116;
      v63 = v62;
      v64 = *(_QWORD *)(v0 + 544);
      v65 = *(_QWORD *)(v0 + 528);
      type metadata accessor for PaperKitPDFPage(0);
      v66 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v66, v65, &demangling cache variable for type metadata for PageId?);

      if (v61(v65, 1, v64) == 1)
      {
        v67 = *(_QWORD *)(v0 + 584);
        v68 = *(_QWORD *)(v0 + 576);
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v236 + 56))(v68, 1, 1, v67);
        v69 = v68 + *(int *)(v228 + 20);
        v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 1, 1, v70);
        v16 = v240;
        goto LABEL_33;
      }
      v71 = *(_QWORD *)(v0 + 576);
      v72 = *(_QWORD *)(v0 + 528);
    }
    else
    {
      v71 = *(_QWORD *)(v0 + 576);
      v72 = *(_QWORD *)(v0 + 536);
    }
    outlined init with take of PKStrokeStruct(v72, v71, type metadata accessor for PageId);
    v16 = v240;
LABEL_33:
    v73 = *(_QWORD *)(v0 + 640);
    v74 = *(_QWORD *)(v0 + 584);
    v75 = *(_QWORD *)(v0 + 576);
    v14 = &demangling cache variable for type metadata for PDFPageID?;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v75, v73, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties(v75, type metadata accessor for PageId);
    v76 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v236 + 48))(v73, 1, v74);
    v77 = *(_QWORD *)(v0 + 640);
    if (v76 != 1)
    {
      v78 = *(_QWORD *)(v0 + 616);
      v79 = *(Swift::UInt **)(v0 + 608);
      outlined init with take of PKStrokeStruct(v77, v78, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined init with copy of PKStrokeProperties(v78, (uint64_t)v79, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v248[0] = v244;
      v82 = specialized __RawDictionaryStorage.find<A>(_:)(v79);
      v83 = v244[2];
      v84 = (v81 & 1) == 0;
      v51 = v83 + v84;
      if (__OFADD__(v83, v84))
        goto LABEL_87;
      v85 = v81;
      if (v244[3] >= v51)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v81 & 1) == 0)
            goto LABEL_43;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v244 = *(_QWORD **)&v248[0];
          if ((v85 & 1) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        v86 = *(Swift::UInt **)(v0 + 608);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
        v244 = *(_QWORD **)&v248[0];
        v87 = specialized __RawDictionaryStorage.find<A>(_:)(v86);
        if ((v85 & 1) != (v88 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v82 = v87;
        if ((v85 & 1) == 0)
        {
LABEL_43:
          v89 = *(_QWORD *)(v0 + 608);
          v244[(v82 >> 6) + 8] |= 1 << v82;
          outlined init with copy of PKStrokeProperties(v89, v244[6] + *(_QWORD *)(v236 + 72) * v82, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          *(_QWORD *)(v244[7] + 8 * v82) = v53;
          v90 = v244[2];
          v91 = __OFADD__(v90, 1);
          v92 = v90 + 1;
          if (v91)
          {
            __break(1u);
            goto LABEL_92;
          }
          v244[2] = v92;
          goto LABEL_45;
        }
      }
      *(_QWORD *)(v244[7] + 8 * v82) = v53;
LABEL_45:
      v93 = *(_QWORD *)(v0 + 616);
      v94 = *(_QWORD *)(v0 + 608);
      swift_bridgeObjectRelease();
      outlined destroy of PKStrokeProperties(v94, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v51 = outlined destroy of PKStrokeProperties(v93, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      goto LABEL_23;
    }
    v51 = outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for PDFPageID?);
LABEL_23:
    v14 = 0;
    if (v11 == ++v53)
      goto LABEL_46;
  }
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  if (v52 >= 0x140)
  {
    v162 = *(_QWORD *)(v51 + 88);
    if (v162)
    {
      v109 = 4;
    }
    else
    {
      v163 = 0;
      v164 = v52 >> 6;
      if (v52 >> 6 <= 5)
        v164 = 5;
      v165 = v164 - 5;
      do
      {
        if (v165 == v163)
          goto LABEL_100;
        v162 = *(_QWORD *)(v51 + 96 + 8 * v163++);
      }
      while (!v162);
      v109 = v163 + 4;
    }
    goto LABEL_77;
  }
LABEL_100:
  v166 = *(_WORD *)(v0 + 92);
  v167 = *(_BYTE *)(v0 + 94);
  v168 = *(_QWORD *)(v0 + 936);
  v241 = *(_OWORD *)(v0 + 904);
  v245 = *(_OWORD *)(v0 + 920);
  v238 = *(_OWORD *)(v0 + 888);
  v234 = *(_OWORD *)(v0 + 872);
  v169 = *(_QWORD *)(v0 + 864);
  v171 = *(_QWORD *)(v0 + 384);
  v170 = *(_QWORD *)(v0 + 392);
  v172 = *(_QWORD *)(v0 + 376);
  swift_release();
  v247 = v169;
  v248[0] = v234;
  v248[1] = v238;
  v248[2] = v241;
  v248[3] = v245;
  v249 = v168;
  v251 = v167;
  v250 = v166;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v172, &v247, (uint64_t *)v248, v171, v170);
  if (v169 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_114:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v246 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v246);
  }
  v173 = *(_QWORD *)(v0 + 864);
  v175 = *(_QWORD *)(v0 + 480);
  v174 = *(_QWORD *)(v0 + 488);
  v177 = *(_QWORD *)(v0 + 464);
  v176 = *(_QWORD *)(v0 + 472);
  v178 = *(_QWORD *)(v0 + 448);
  v179 = *(_QWORD *)(v0 + 456);
  v180 = *(_QWORD *)(v0 + 400);
  outlined copy of PaperDocument.PDFDocumentUse(v173);
  outlined consume of PaperDocument.PDFDocumentUse(v173);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 16))(v176, v180, v178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 32))(v177, v176, v178);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v181 = *(int *)(v175 + 36);
  *(_DWORD *)(v0 + 1108) = v181;
  *(_QWORD *)(v174 + v181) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v183 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (2)
  {
    v184 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v185 = *(_QWORD *)(v0 + 712);
    v186 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v184(v185, 1, v186) == 1)
    {
      v187 = *(_QWORD *)(v0 + 432);
      v189 = *(_QWORD *)(v0 + 408);
      v188 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v188 + 56))(v187, 1, 1, v189);
LABEL_109:
      v206 = *(_QWORD *)(v0 + 440);
      v208 = *(_QWORD *)(v0 + 408);
      v207 = *(_QWORD *)(v0 + 416);
      outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v206, v183);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v206, 1, v208) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
        goto LABEL_114;
      }
      v209 = *(void **)(v0 + 1024);
      v210 = *(char **)(v0 + 440);
      v211 = *(_QWORD *)v210;
      (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v210[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
      v212 = objc_msgSend(v209, (SEL)p_base_prots[407], v211);
      *(_QWORD *)(v0 + 1088) = v212;
      if (v212)
      {
        v213 = v212;
        type metadata accessor for PaperKitPDFPage(0);
        v214 = swift_dynamicCastClass();
        if (v214)
        {
          v215 = v214;
          v216 = *(_WORD *)(v0 + 92);
          v217 = *(_BYTE *)(v0 + 94);
          v218 = *(_QWORD *)(v0 + 936);
          v239 = *(_OWORD *)(v0 + 904);
          v242 = *(_OWORD *)(v0 + 920);
          v231 = *(_OWORD *)(v0 + 872);
          v235 = *(_OWORD *)(v0 + 888);
          v219 = *(_QWORD *)(v0 + 864);
          SharedTagged_3.subscript.getter();
          v220 = *(_QWORD *)(v0 + 200);
          v221 = *(_QWORD *)(v0 + 208);
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v220);
          *(_QWORD *)(v0 + 368) = v219;
          *(_OWORD *)(v0 + 16) = v231;
          *(_OWORD *)(v0 + 32) = v235;
          *(_OWORD *)(v0 + 48) = v239;
          *(_OWORD *)(v0 + 64) = v242;
          *(_QWORD *)(v0 + 80) = v218;
          *(_BYTE *)(v0 + 90) = v217;
          *(_WORD *)(v0 + 88) = v216;
          *(_QWORD *)&v242 = **(int **)(v221 + 144) + *(_QWORD *)(v221 + 144);
          v222 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 1096) = v222;
          *v222 = v0;
          v222[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
          return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v242)(v215, v0 + 368, *(_QWORD *)(v0 + 376), v0 + 16, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v220, v221);
        }

      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      continue;
    }
    break;
  }
  v190 = v183;
  v191 = p_base_prots;
  v192 = *(int *)(v0 + 1108);
  v193 = *(_QWORD *)(v0 + 680);
  v194 = *(_QWORD *)(v0 + 656);
  v195 = *(_QWORD *)(v0 + 488);
  v196 = *(_QWORD *)(v0 + 424);
  v197 = *(_QWORD *)(v0 + 408);
  v198 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
  v198(v193, *(_QWORD *)(v0 + 712), v194);
  v199 = v196 + *(int *)(v197 + 48);
  v200 = *(_QWORD *)(v195 + v192);
  v198(v199, v193, v194);
  if (!__OFADD__(v200, 1))
  {
    v201 = *(_QWORD *)(v0 + 656);
    v202 = *(_QWORD **)(v0 + 432);
    v204 = *(_QWORD *)(v0 + 408);
    v203 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1108)) = v200 + 1;
    v205 = (char *)v202 + *(int *)(v204 + 48);
    *v202 = v200;
    v198((uint64_t)v205, v199, v201);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v203 + 56))(v202, 0, 1, v204);
    p_base_prots = v191;
    v183 = v190;
    goto LABEL_109;
  }
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  swift_endAccess();
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  result = swift_endAccess();
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  id v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t result;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __objc2_prot_list **p_base_prots;
  uint64_t *v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  __objc2_prot_list **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD v106[4];
  uint64_t v107;
  __int16 v108;
  char v109;

  v1 = *(void **)(v0 + 360);
  if ((unint64_t)v1 < 2)
    goto LABEL_5;
  v2 = *(_QWORD *)(v0 + 808);
  v3 = v1;
  LOBYTE(v2) = PaperKitPDFDocument.finishLoading(as:)(v2);
  outlined consume of PaperKitPDFDocument??(v1);
  if ((v2 & 1) == 0)
  {
    outlined consume of PaperKitPDFDocument??(v1);
LABEL_5:
    result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 792));
    goto LABEL_6;
  }
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1064);
  v99 = *(char **)(v0 + 1024);
  v91 = *(_QWORD *)(v0 + 864);
  v5 = *(_QWORD *)(v0 + 808);
  v102 = *(_QWORD *)(v0 + 800);
  v6 = *(_QWORD *)(v0 + 792);
  v94 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 376);
  v92 = *(_QWORD *)(v0 + 384);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument));
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1DDF32CF0;
  v12 = v11 + v10;
  v13 = *(int *)(v8 + 48);
  v4(v12, v5, v6);
  *(_QWORD *)(v12 + v13) = v3;
  v14 = v3;
  v15 = specialized Dictionary.init(dictionaryLiteral:)(v11);
  *(_QWORD *)&v106[0] = v91;
  PaperDocument.update<A>(_:in:otherDocuments:use:)(v99, v7, v15, (unint64_t *)v106, v92, v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PaperKitPDFDocument??(v1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 8))(v5, v6);
LABEL_6:
  v17 = *(_QWORD *)(v0 + 1056);
  v18 = *(_QWORD *)(v0 + 1048);
  if (v17)
  {
    v19 = (v17 - 1) & v17;
    v20 = __clz(__rbit64(v17)) | (v18 << 6);
    result = *(_QWORD *)(v0 + 1040);
LABEL_8:
    *(_QWORD *)(v0 + 1056) = v19;
    *(_QWORD *)(v0 + 1048) = v18;
    v21 = *(_QWORD *)(v0 + 816);
    v22 = *(_QWORD *)(v0 + 808);
    v23 = *(_QWORD *)(v0 + 800);
    v24 = *(_QWORD *)(v0 + 792);
    v25 = *(_QWORD *)(result + 48) + *(_QWORD *)(v23 + 72) * v20;
    v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    *(_QWORD *)(v0 + 1064) = v26;
    v26(v21, v25, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v22, v21, v24);
    v27 = swift_task_alloc();
    *(_QWORD *)(v0 + 1072) = v27;
    *(_QWORD *)(v27 + 16) = v22;
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1080) = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitPDFDocument?);
    *v28 = v0;
    v28[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
    return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
  }
  v29 = v18 + 1;
  if (__OFADD__(v18, 1))
    goto LABEL_39;
  v30 = (unint64_t)((1 << *(_BYTE *)(v0 + 91)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 1040);
  if (v29 < v30)
  {
    v31 = result + 56;
    v32 = *(_QWORD *)(result + 56 + 8 * v29);
    ++v18;
    if (v32)
    {
LABEL_12:
      v19 = (v32 - 1) & v32;
      v20 = __clz(__rbit64(v32)) + (v18 << 6);
      goto LABEL_8;
    }
    v18 = v29 + 1;
    if (v29 + 1 < v30)
    {
      v32 = *(_QWORD *)(v31 + 8 * v18);
      if (v32)
        goto LABEL_12;
      v18 = v29 + 2;
      if (v29 + 2 < v30)
      {
        v32 = *(_QWORD *)(v31 + 8 * v18);
        if (v32)
          goto LABEL_12;
        v33 = v29 + 3;
        if (v33 < v30)
        {
          v32 = *(_QWORD *)(v31 + 8 * v33);
          if (v32)
          {
            v18 = v33;
            goto LABEL_12;
          }
          while (1)
          {
            v18 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_40;
            if (v18 >= v30)
              break;
            v32 = *(_QWORD *)(v31 + 8 * v18);
            ++v33;
            if (v32)
              goto LABEL_12;
          }
        }
      }
    }
  }
  v34 = *(_WORD *)(v0 + 92);
  v35 = *(_BYTE *)(v0 + 94);
  v36 = *(_QWORD *)(v0 + 936);
  v100 = *(_OWORD *)(v0 + 904);
  v103 = *(_OWORD *)(v0 + 920);
  v97 = *(_OWORD *)(v0 + 888);
  v95 = *(_OWORD *)(v0 + 872);
  v37 = *(_QWORD *)(v0 + 864);
  v39 = *(_QWORD *)(v0 + 384);
  v38 = *(_QWORD *)(v0 + 392);
  v40 = *(_QWORD *)(v0 + 376);
  swift_release();
  v105 = v37;
  v106[0] = v95;
  v106[1] = v97;
  v106[2] = v100;
  v106[3] = v103;
  v107 = v36;
  v109 = v35;
  v108 = v34;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v40, &v105, (uint64_t *)v106, v39, v38);
  if (v37 == 0x8000000000000000)
  {
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_37:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v104 = *(_QWORD *)(v0 + 1024);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v104);
  }
  v41 = *(_QWORD *)(v0 + 864);
  v43 = *(_QWORD *)(v0 + 480);
  v42 = *(_QWORD *)(v0 + 488);
  v45 = *(_QWORD *)(v0 + 464);
  v44 = *(_QWORD *)(v0 + 472);
  v46 = *(_QWORD *)(v0 + 448);
  v47 = *(_QWORD *)(v0 + 456);
  v48 = *(_QWORD *)(v0 + 400);
  outlined copy of PaperDocument.PDFDocumentUse(v41);
  outlined consume of PaperDocument.PDFDocumentUse(v41);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v44, v48, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v45, v44, v46);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v49 = *(int *)(v43 + 36);
  *(_DWORD *)(v0 + 1108) = v49;
  *(_QWORD *)(v42 + v49) = 0;
  p_base_prots = &MiniMenuController.base_prots;
  v51 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v53 = *(_QWORD *)(v0 + 712);
    v54 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v52(v53, 1, v54) == 1)
    {
      v55 = *(_QWORD *)(v0 + 432);
      v57 = *(_QWORD *)(v0 + 408);
      v56 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v55, 1, 1, v57);
      goto LABEL_32;
    }
    v58 = v51;
    v59 = p_base_prots;
    v60 = *(int *)(v0 + 1108);
    v61 = *(_QWORD *)(v0 + 680);
    v62 = *(_QWORD *)(v0 + 656);
    v63 = *(_QWORD *)(v0 + 488);
    v64 = *(_QWORD *)(v0 + 424);
    v65 = *(_QWORD *)(v0 + 408);
    v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
    v66(v61, *(_QWORD *)(v0 + 712), v62);
    v67 = v64 + *(int *)(v65 + 48);
    v68 = *(_QWORD *)(v63 + v60);
    result = v66(v67, v61, v62);
    if (__OFADD__(v68, 1))
      break;
    v69 = *(_QWORD *)(v0 + 656);
    v70 = *(_QWORD **)(v0 + 432);
    v72 = *(_QWORD *)(v0 + 408);
    v71 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1108)) = v68 + 1;
    v73 = (char *)v70 + *(int *)(v72 + 48);
    *v70 = v68;
    v66((uint64_t)v73, v67, v69);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v70, 0, 1, v72);
    p_base_prots = v59;
    v51 = v58;
LABEL_32:
    v74 = *(_QWORD *)(v0 + 440);
    v76 = *(_QWORD *)(v0 + 408);
    v75 = *(_QWORD *)(v0 + 416);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v74, v51);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v74, 1, v76) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      goto LABEL_37;
    }
    v77 = *(void **)(v0 + 1024);
    v78 = *(char **)(v0 + 440);
    v79 = *(_QWORD *)v78;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v78[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
    v80 = objc_msgSend(v77, (SEL)p_base_prots[407], v79);
    *(_QWORD *)(v0 + 1088) = v80;
    if (v80)
    {
      v81 = v80;
      type metadata accessor for PaperKitPDFPage(0);
      v82 = swift_dynamicCastClass();
      if (v82)
      {
        v83 = v82;
        v84 = *(_WORD *)(v0 + 92);
        v85 = *(_BYTE *)(v0 + 94);
        v86 = *(_QWORD *)(v0 + 936);
        v98 = *(_OWORD *)(v0 + 904);
        v101 = *(_OWORD *)(v0 + 920);
        v93 = *(_OWORD *)(v0 + 872);
        v96 = *(_OWORD *)(v0 + 888);
        v87 = *(_QWORD *)(v0 + 864);
        SharedTagged_3.subscript.getter();
        v88 = *(_QWORD *)(v0 + 200);
        v89 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v88);
        *(_QWORD *)(v0 + 368) = v87;
        *(_OWORD *)(v0 + 16) = v93;
        *(_OWORD *)(v0 + 32) = v96;
        *(_OWORD *)(v0 + 48) = v98;
        *(_OWORD *)(v0 + 64) = v101;
        *(_QWORD *)(v0 + 80) = v86;
        *(_BYTE *)(v0 + 90) = v85;
        *(_WORD *)(v0 + 88) = v84;
        *(_QWORD *)&v101 = **(int **)(v89 + 144) + *(_QWORD *)(v89 + 144);
        v90 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1096) = v90;
        *v90 = v0;
        v90[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
        return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v101)(v83, v0 + 368, *(_QWORD *)(v0 + 376), v0 + 16, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v88, v89);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __objc2_prot_list **p_base_prots;
  uint64_t *v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __objc2_prot_list **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t (*v50)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  p_base_prots = &MiniMenuController.base_prots;
  v5 = &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    v7 = *(_QWORD *)(v0 + 712);
    v8 = *(_QWORD *)(v0 + 656);
    dispatch thunk of IteratorProtocol.next()();
    if (v6(v7, 1, v8) == 1)
    {
      v9 = *(_QWORD *)(v0 + 432);
      v11 = *(_QWORD *)(v0 + 408);
      v10 = *(_QWORD *)(v0 + 416);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v11);
      goto LABEL_8;
    }
    v12 = v5;
    v13 = p_base_prots;
    v14 = *(int *)(v0 + 1108);
    v15 = *(_QWORD *)(v0 + 680);
    v16 = *(_QWORD *)(v0 + 656);
    v17 = *(_QWORD *)(v0 + 488);
    v18 = *(_QWORD *)(v0 + 424);
    v19 = *(_QWORD *)(v0 + 408);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 664) + 32);
    v20(v15, *(_QWORD *)(v0 + 712), v16);
    v21 = v18 + *(int *)(v19 + 48);
    v22 = *(_QWORD *)(v17 + v14);
    result = v20(v21, v15, v16);
    if (__OFADD__(v22, 1))
      break;
    v24 = *(_QWORD *)(v0 + 656);
    v25 = *(_QWORD **)(v0 + 432);
    v27 = *(_QWORD *)(v0 + 408);
    v26 = *(_QWORD *)(v0 + 416);
    *(_QWORD *)(*(_QWORD *)(v0 + 488) + *(int *)(v0 + 1108)) = v22 + 1;
    v28 = (char *)v25 + *(int *)(v27 + 48);
    *v25 = v22;
    v20((uint64_t)v28, v21, v24);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v25, 0, 1, v27);
    p_base_prots = v13;
    v5 = v12;
LABEL_8:
    v29 = *(_QWORD *)(v0 + 440);
    v31 = *(_QWORD *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 416);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 432), v29, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v29, 1, v31) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 488), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v51 = *(_QWORD *)(v0 + 1024);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v51);
    }
    v32 = *(void **)(v0 + 1024);
    v33 = *(char **)(v0 + 440);
    v34 = *(_QWORD *)v33;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 664) + 32))(*(_QWORD *)(v0 + 672), &v33[*(int *)(*(_QWORD *)(v0 + 408) + 48)], *(_QWORD *)(v0 + 656));
    v35 = objc_msgSend(v32, (SEL)p_base_prots[407], v34);
    *(_QWORD *)(v0 + 1088) = v35;
    if (v35)
    {
      v36 = v35;
      type metadata accessor for PaperKitPDFPage(0);
      v37 = swift_dynamicCastClass();
      if (v37)
      {
        v38 = v37;
        v39 = *(_WORD *)(v0 + 92);
        v40 = *(_BYTE *)(v0 + 94);
        v41 = *(_QWORD *)(v0 + 936);
        v48 = *(_OWORD *)(v0 + 904);
        v49 = *(_OWORD *)(v0 + 920);
        v46 = *(_OWORD *)(v0 + 872);
        v47 = *(_OWORD *)(v0 + 888);
        v42 = *(_QWORD *)(v0 + 864);
        SharedTagged_3.subscript.getter();
        v43 = *(_QWORD *)(v0 + 200);
        v44 = *(_QWORD *)(v0 + 208);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v43);
        *(_QWORD *)(v0 + 368) = v42;
        *(_OWORD *)(v0 + 16) = v46;
        *(_OWORD *)(v0 + 32) = v47;
        *(_OWORD *)(v0 + 48) = v48;
        *(_OWORD *)(v0 + 64) = v49;
        *(_QWORD *)(v0 + 80) = v41;
        *(_BYTE *)(v0 + 90) = v40;
        *(_WORD *)(v0 + 88) = v39;
        v50 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v44 + 144) + *(_QWORD *)(v44 + 144));
        v45 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 1096) = v45;
        *v45 = v0;
        v45[1] = PaperDocument.newPDFDocument<A>(use:in:options:);
        return v50(v38, v0 + 368, *(_QWORD *)(v0 + 376), v0 + 16, *(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 392), v43, v44);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v7;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 856), *(_QWORD *)(v0 + 792));
  v1 = *(void **)(v0 + 984);
  if (one-time initialization token for logger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1DDB0F000, v3, v4, "Could not create PDFDocument.", v5, 2u);
    MEMORY[0x1DF0E6558](v5, -1, -1);
  }

  v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v13;

  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v0 + 744);
  v3 = *(_QWORD *)(v0 + 736);
  v4 = *(_QWORD *)(v0 + 704);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 656);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 800) + 8))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 792));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(void **)(v0 + 1016);
  if (one-time initialization token for logger != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1DDB0F000, v9, v10, "Could not create PDFDocument.", v11, 2u);
    MEMORY[0x1DF0E6558](v11, -1, -1);
  }

  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFDocument()), sel_init);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  v4 = type metadata accessor for CRAsset();
  v3[17] = v4;
  v3[18] = *(_QWORD *)(v4 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 112)), (v2 & 1) == 0))
  {
    swift_endAccess();
    v31 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                          + async function pointer to specialized static PaperKitPDFDocument._load(_:));
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v20;
    *v20 = v0;
    v20[1] = loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:);
    return v31(*(_QWORD *)(v0 + 112));
  }
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 112);
  swift_endAccess();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v3, v7, v5);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0x8000000000000000;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    if (*(_QWORD *)(v10 + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 152);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17);
      if ((v16 & 1) != (v19 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v12 = v18;
    }
    v21 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v21 + 16) = v10;
    swift_bridgeObjectRelease();
    v22 = *(_QWORD **)(v21 + 16);
    result = swift_bridgeObjectRetain();
    if ((v16 & 1) == 0)
    {
      v23 = *(_QWORD *)(v0 + 160);
      v8(v23, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
      result = specialized _NativeDictionary._insert(at:key:value:)(v12, v23, 0, v22);
    }
    v24 = v22[7];
    v25 = *(_QWORD *)(v24 + 8 * v12);
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v29 = *(_QWORD *)(v0 + 144);
      v28 = *(_QWORD *)(v0 + 152);
      v30 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v24 + 8 * v12) = v27;
      swift_endAccess();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  id v7;
  char isUniquelyReferenced_nonNull_native;
  void (*v9)(uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 176);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = (uint64_t *)(*(_QWORD *)(v0 + 128) + 16);
    v6 = *(void (**)(uint64_t))(v4 + 16);
    v6(v2);
    swift_beginAccess();
    v7 = v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, v2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v5 + 16) = v16;
    swift_bridgeObjectRelease();
    v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v9(v2, v3);
    swift_endAccess();
    ((void (*)(uint64_t, uint64_t, uint64_t))v6)(v2, v14, v3);
    swift_beginAccess();
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v15;
    *v15 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v2, v10);
    *v15 = v17;
    swift_bridgeObjectRelease();
    v9(v2, v3);
    swift_endAccess();

  }
  else
  {
    v11 = type metadata accessor for CRCodingError();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRCodingError and conformance CRCodingError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11F08], MEMORY[0x1E0D11F10]);
    swift_allocError();
    *v12 = 0x4620464450206F4ELL;
    v12[1] = 0xEB00000000656C69;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v12, *MEMORY[0x1E0D11EF8], v11);
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t loadPdfAsset #1 <A>(_:) in PaperDocument.newPDFDocument<A>(use:in:options:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized Sequence.max(by:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  void (*v54)(char *, unint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v48 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v19.n128_f64[0] = MEMORY[0x1E0C80A78](v15, v16);
  v21 = (char *)&v48 - v20;
  v22 = *(_QWORD *)(a1 + 64);
  v52 = a1 + 64;
  v23 = *(_BYTE *)(a1 + 32);
  v24 = 1 << v23;
  v25 = -1;
  if (1 << v23 < 64)
    v25 = ~(-1 << (1 << v23));
  v26 = v25 & v22;
  if (v26)
  {
    v50 = v2;
    v51 = v18;
    v48 = v17;
    v49 = a2;
    v27 = 0;
    v28 = __clz(__rbit64(v26));
    a2 = (v26 - 1) & v26;
    v53 = (unint64_t)(v24 + 63) >> 6;
    while (1)
    {
      v29 = *(_QWORD *)(a1 + 48);
      v30 = type metadata accessor for CRAsset();
      v31 = *(_QWORD *)(v30 - 8);
      v32 = *(_QWORD *)(v31 + 72);
      v33 = v29 + v32 * v28;
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
      v35 = v51;
      v56 = v30;
      v54 = v34;
      v55 = v32;
      ((void (*)(uint64_t, uint64_t))v34)(v51, v33);
      *(_QWORD *)(v35 + *(int *)(v5 + 48)) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v28);
      outlined init with take of (key: Int, value: AnyCRValue)?(v35, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
      swift_bridgeObjectRetain();
      while (a2)
      {
        while (1)
        {
          v37 = __clz(__rbit64(a2));
          a2 &= a2 - 1;
          v38 = v37 | (v27 << 6);
LABEL_25:
          v54(v8, *(_QWORD *)(a1 + 48) + v38 * v55, v56);
          *(_QWORD *)&v8[*(int *)(v5 + 48)] = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v38);
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v8, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          if (*(_QWORD *)&v21[*(int *)(v5 + 48)] < *(_QWORD *)&v12[*(int *)(v5 + 48)])
            break;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          if (!a2)
            goto LABEL_9;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
      }
LABEL_9:
      v39 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
LABEL_39:
        if (v36 < 9)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(a2, 1, 1, v5, v19);
        v44 = *(_QWORD *)(a1 + 96);
        if (v44)
        {
          v27 = 4;
          goto LABEL_32;
        }
        v44 = *(_QWORD *)(a1 + 104);
        if (v44)
        {
          v27 = 5;
          goto LABEL_32;
        }
      }
      else
      {
        if (v39 >= v53)
          goto LABEL_28;
        v40 = *(_QWORD *)(v52 + 8 * v39);
        ++v27;
        if (v40)
          goto LABEL_24;
        v27 = v39 + 1;
        if (v39 + 1 >= v53)
          goto LABEL_28;
        v40 = *(_QWORD *)(v52 + 8 * v27);
        if (v40)
          goto LABEL_24;
        v27 = v39 + 2;
        if (v39 + 2 >= v53)
          goto LABEL_28;
        v40 = *(_QWORD *)(v52 + 8 * v27);
        if (v40)
          goto LABEL_24;
        v27 = v39 + 3;
        if (v39 + 3 >= v53)
          goto LABEL_28;
        v40 = *(_QWORD *)(v52 + 8 * v27);
        if (v40)
          goto LABEL_24;
        v41 = v39 + 4;
        if (v41 >= v53)
        {
LABEL_28:
          swift_release();
          v42 = v49;
          outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v21, v49, (uint64_t *)&demangling cache variable for type metadata for (key: CRAsset, value: Int));
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v5);
        }
        v40 = *(_QWORD *)(v52 + 8 * v41);
        if (v40)
        {
          v27 = v41;
LABEL_24:
          a2 = (v40 - 1) & v40;
          v38 = __clz(__rbit64(v40)) + (v27 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          v27 = v41 + 1;
          if (__OFADD__(v41, 1))
            break;
          if (v27 >= v53)
            goto LABEL_28;
          v40 = *(_QWORD *)(v52 + 8 * v27);
          ++v41;
          if (v40)
            goto LABEL_24;
        }
        __break(1u);
      }
      v45 = 0;
      v46 = 6;
      if (v53 > 6)
        v46 = v53;
      v47 = v46 - 6;
      do
      {
        if (v47 == v45)
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(a2, 1, 1, v5, v19);
        v44 = *(_QWORD *)(a1 + 112 + 8 * v45++);
      }
      while (!v44);
      v27 = v45 + 5;
LABEL_32:
      a2 = (v44 - 1) & v44;
      v28 = __clz(__rbit64(v44)) + (v27 << 6);
    }
  }
  v36 = v23 & 0x3F;
  if (v36 > 6)
  {
    v53 = (unint64_t)(v24 + 63) >> 6;
    v44 = *(_QWORD *)(a1 + 72);
    if (v44)
    {
      v50 = v2;
      v51 = v18;
      v48 = v17;
      v49 = a2;
      v27 = 1;
      goto LABEL_32;
    }
    if (v36 >= 8)
    {
      v44 = *(_QWORD *)(a1 + 80);
      v49 = a2;
      v50 = v2;
      v48 = v17;
      v51 = v18;
      if (v44)
      {
        v27 = 2;
      }
      else
      {
        v44 = *(_QWORD *)(a1 + 88);
        if (!v44)
          goto LABEL_39;
        v27 = 3;
      }
      goto LABEL_32;
    }
  }
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, __n128))(v17 + 56))(a2, 1, 1, v5, v19);
}

id PaperDocument.update<A>(_:in:otherDocuments:use:)(char *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t);
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  os_unfair_lock_s *v153;
  os_unfair_lock_s *v154;
  uint64_t v155;
  unsigned int (*v156)(char *, uint64_t, uint64_t);
  uint64_t v157;
  id result;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  unsigned int (*v168)(char *, uint64_t, uint64_t);
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  void (*v175)(char *, char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t (**v179)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  BOOL (**v180)(uint64_t);
  uint64_t (**v181)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  os_unfair_lock_s *v199;
  os_unfair_lock_s *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t *v229;
  uint64_t v230;
  _QWORD *v231;
  unsigned int v232;
  uint64_t v233;
  _QWORD *v234;
  char v235;
  Swift::UInt *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  char v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  void *v264;
  uint64_t v265;
  char isUniquelyReferenced_nonNull_native;
  void (*v267)(uint64_t, uint64_t);
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  BOOL v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(uint64_t *, _QWORD);
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t *v282;
  int EnumCaseMultiPayload;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  Swift::UInt *v289;
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  void (*v317)(uint64_t, uint64_t);
  uint64_t v318;
  char *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  _QWORD *v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  Swift::UInt *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char *v375;
  void (*v376)(char *, char *, uint64_t);
  unsigned int (*v377)(char *, uint64_t, uint64_t);
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  uint64_t v385;
  char *v386;
  char *v387;
  void (*v388)(char *, char *, uint64_t);
  uint64_t v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;

  v367 = a6;
  v366 = a5;
  v394 = a3;
  v365 = a2;
  v391 = a1;
  v362 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x1E0C80A78](v362, v8);
  v361 = (uint64_t *)((char *)&v318 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v360 = (uint64_t)&v318 - v12;
  v328 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x1E0C80A78](v328, v13);
  v327 = (char *)&v318 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v369 = (char *)&v318 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x1E0C80A78](v18, v19);
  v324 = (char *)&v318 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v323 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  MEMORY[0x1E0C80A78](v323, v21);
  v325 = (char *)&v318 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v23, v24);
  v326 = (char *)&v318 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v368 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  v372 = *(_QWORD *)(v368 - 8);
  MEMORY[0x1E0C80A78](v368, v26);
  v359 = (char *)&v318 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v333 = (char *)&v318 - v30;
  v338 = type metadata accessor for CRAsset();
  v340 = *(_QWORD *)(v338 - 8);
  MEMORY[0x1E0C80A78](v338, v31);
  v319 = (char *)&v318 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v320 = (char *)&v318 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v336 = (char *)&v318 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v335 = (uint64_t)&v318 - v41;
  v346 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x1E0C80A78](v346, v42);
  v357 = (uint64_t)&v318 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v385 = type metadata accessor for PDFPageID();
  v44 = *(_QWORD *)(v385 - 8);
  MEMORY[0x1E0C80A78](v385, v45);
  v344 = (Swift::UInt *)((char *)&v318 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v47, v48);
  v331 = (uint64_t *)((char *)&v318 - v49);
  MEMORY[0x1E0C80A78](v50, v51);
  v363 = (uint64_t)&v318 - v52;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v53, v54);
  v347 = (uint64_t)&v318 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56, v57);
  v341 = (uint64_t)&v318 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v337 = (uint64_t *)((char *)&v318 - v61);
  MEMORY[0x1E0C80A78](v62, v63);
  v354 = (uint64_t)&v318 - v64;
  MEMORY[0x1E0C80A78](v65, v66);
  v356 = (uint64_t)&v318 - v67;
  MEMORY[0x1E0C80A78](v68, v69);
  v382 = (uint64_t)&v318 - v70;
  MEMORY[0x1E0C80A78](v71, v72);
  v386 = (char *)&v318 - v73;
  v379 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v380 = *(_QWORD *)(v379 - 8);
  MEMORY[0x1E0C80A78](v379, v74);
  v352 = (char *)&v318 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v76, v77);
  v387 = (char *)&v318 - v78;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v79, v80);
  v364 = (char *)&v318 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v371 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v322 = *(_QWORD *)(v371 - 8);
  MEMORY[0x1E0C80A78](v371, v82);
  v370 = (char *)&v318 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v373 = type metadata accessor for CRKeyPath();
  v355 = *(_QWORD *)(v373 - 8);
  MEMORY[0x1E0C80A78](v373, v84);
  v334 = (char *)&v318 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v86, v87);
  v358 = (char *)&v318 - v88;
  MEMORY[0x1E0C80A78](v89, v90);
  v351 = (char *)&v318 - v91;
  v92 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  v381 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v93);
  v353 = (uint64_t)&v318 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v95, v96);
  v348 = (uint64_t)&v318 - v97;
  MEMORY[0x1E0C80A78](v98, v99);
  v388 = (void (*)(char *, char *, uint64_t))((char *)&v318 - v100);
  MEMORY[0x1E0C80A78](v101, v102);
  v378 = (char *)&v318 - v103;
  MEMORY[0x1E0C80A78](v104, v105);
  v377 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)&v318 - v106);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v107, v108);
  v376 = (void (*)(char *, char *, uint64_t))((char *)&v318 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0));
  v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v389 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110, v111);
  v342 = (char *)&v318 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v113, v114);
  v375 = (char *)&v318 - v115;
  v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v116, v117);
  v343 = (char *)&v318 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v119, v120);
  v332 = (uint64_t)&v318 - v121;
  MEMORY[0x1E0C80A78](v122, v123);
  v339 = (char *)&v318 - v124;
  MEMORY[0x1E0C80A78](v125, v126);
  v384 = (char *)&v318 - v127;
  MEMORY[0x1E0C80A78](v128, v129);
  v350 = (uint64_t)&v318 - v130;
  MEMORY[0x1E0C80A78](v131, v132);
  v134 = (char *)&v318 - v133;
  v395 = type metadata accessor for PageId(0);
  v392 = *(_QWORD *)(v395 - 8);
  MEMORY[0x1E0C80A78](v395, v135);
  v137 = (char *)&v318 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v139 = *(_QWORD *)(v138 - 8);
  v141 = MEMORY[0x1E0C80A78](v138, v140);
  v143 = (char *)&v318 - ((v142 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = *a4;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v139 + 16))(v143, v6, v138, v141);
  v396 = v366;
  v397 = v367;
  v398 = v365;
  v390 = v92;
  v144 = 0;
  v321 = CROrderedSet.map<A>(_:)();
  v145 = *(void (**)(char *, uint64_t))(v139 + 8);
  v330 = v138;
  v145(v143, v138);
  v404 = v394;
  v146 = v391;
  swift_bridgeObjectRetain();
  v147 = (uint64_t)objc_msgSend(v146, sel_pageCount);
  if (v147 < 0)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  v146 = (char *)v147;
  v383 = v44;
  v393 = v110;
  v329 = v6;
  if (!v147)
  {
    v163 = v110;
    v150 = MEMORY[0x1E0DEE9D8];
LABEL_26:
    v394 = v144;
    v403 = MEMORY[0x1E0DEE9E8];
    CROrderedSet.makeIterator()();
    v378 = &v391[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    v171 = v364;
    CROrderedSet.Iterator.next()();
    v172 = v380;
    v173 = v379;
    v377 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v380 + 48);
    if (v377(v171, 1, v379) == 1)
    {
LABEL_27:
      (*(void (**)(char *, uint64_t))(v322 + 8))(v370, v371);
      v399 = v321;
      v402 = v150;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [PaperDocument.PDFPageAndPaperPage] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage], MEMORY[0x1E0DEAF20]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage, (uint64_t)&protocol conformance descriptor for PaperDocument.PDFPageAndPaperPage);
      v174 = v333;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      v175 = *(void (**)(char *, char *, uint64_t))(v372 + 16);
      v176 = (uint64_t)v324;
      v177 = v368;
      v175(v324, v174, v368);
      v178 = v325;
      v175(v325, (char *)v176, v177);
      v179 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v178[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>)
                                                                                    + 44)];
      *v179 = closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:);
      v179[1] = 0;
      v180 = (BOOL (**)(uint64_t))&v178[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>)
                                                         + 36)];
      *v180 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v180[1] = 0;
      v181 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v178[*(int *)(v323 + 44)];
      *v181 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v181[1] = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?(v176, (uint64_t *)&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
      v182 = v391;
      v183 = v326;
      v391 = v182;
      specialized Sequence.first(where:)(v178, &v404, v182, v326);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
      swift_bridgeObjectRelease();
      v184 = v340;
      v185 = v338;
      v186 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v340 + 48))(v183, 1, v338);
      v388 = v175;
      if (v186 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v183, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v187 = (uint64_t)v369;
        v188 = v383;
        goto LABEL_87;
      }
      v259 = (uint64_t)v320;
      (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v320, v183, v185);
      v260 = (uint64_t)v319;
      (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v319, v259, v185);
      swift_beginAccess();
      v261 = v404;
      v187 = (uint64_t)v369;
      v188 = v383;
      if (*(_QWORD *)(v404 + 16) && (v262 = specialized __RawDictionaryStorage.find<A>(_:)(v259), (v263 & 1) != 0))
      {
        v264 = *(void **)(*(_QWORD *)(v261 + 56) + 8 * v262);
        swift_endAccess();
        objc_msgSend(v264, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for PaperKitPDFDocument();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v265 = v402;
          swift_beginAccess();
          if (v265)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v402 = v404;
            v404 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v265, v260, isUniquelyReferenced_nonNull_native);
            v404 = v402;
            swift_bridgeObjectRelease();
            v267 = *(void (**)(uint64_t, uint64_t))(v340 + 8);
            v267(v260, v185);
LABEL_86:
            swift_endAccess();
            v267(v259, v185);
            v175 = v388;
LABEL_87:
            v269 = (uint64_t)v327;
            v175(v327, v333, v177);
            lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>, MEMORY[0x1E0DECE10]);
            dispatch thunk of Collection.startIndex.getter();
            v270 = v328;
            *(_QWORD *)(v269 + *(int *)(v328 + 36)) = v399;
            outlined init with take of (key: Int, value: AnyCRValue)?(v269, v187, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
            v271 = v177;
            v272 = (uint64_t *)(v187 + *(int *)(v270 + 36));
            v273 = *v272;
            dispatch thunk of Collection.endIndex.getter();
            v274 = v273 == v399;
            v275 = v385;
            if (v274)
            {
LABEL_89:
              outlined destroy of StocksKitCurrencyCache.Provider?(v187, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
              (*(void (**)(char *, uint64_t))(v372 + 8))(v333, v271);
              v276 = v403;
              swift_bridgeObjectRelease();
              return (id)v276;
            }
            while (1)
            {
              v278 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
              v279 = v360;
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v280, v360, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
              v278(&v399, 0);
              v281 = v359;
              v175(v359, (char *)v187, v271);
              dispatch thunk of Collection.formIndex(after:)();
              (*(void (**)(char *, uint64_t))(v372 + 8))(v281, v271);
              v282 = v361;
              outlined init with take of (key: Int, value: AnyCRValue)?(v279, (uint64_t)v361, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              v284 = *v282;
              v285 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?));
              v286 = (uint64_t)v282 + *(int *)(v285 + 48);
              if (EnumCaseMultiPayload != 1)
                break;
              objc_msgSend(v391, sel_removePageAtIndex_, v284);
LABEL_91:
              outlined destroy of PKStrokeProperties(v286, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
              v277 = *v272;
              v187 = (uint64_t)v369;
              v271 = v368;
              dispatch thunk of Collection.endIndex.getter();
              if (v277 == v399)
                goto LABEL_89;
            }
            v286 = v353;
            outlined init with take of PKStrokeStruct((uint64_t)v282 + *(int *)(v285 + 48), v353, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
            v287 = v347;
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v286, v347, &demangling cache variable for type metadata for PDFPageID?);
            v274 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48))(v287, 1, v275) == 1;
            v394 = v284;
            if (v274)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v287, &demangling cache variable for type metadata for PDFPageID?);
              v288 = v345;
              if (v345 == 0x8000000000000000)
              {
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                type metadata accessor for PaperKitPDFPage(0);
                if (one-time initialization token for blankPageImage != -1)
                  swift_once();
                result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
                v286 = v353;
                if (!result)
                  goto LABEL_124;
              }
              else
              {
                outlined copy of PaperDocument.PDFDocumentUse(v345);
                outlined consume of PaperDocument.PDFDocumentUse(v288);
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
              }
              v293 = one-time initialization token for defaultPageBounds;
              v292 = (char *)result;
              if (v293 != -1)
                swift_once();
              objc_msgSend(v292, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_1F042F058, xmmword_1F042F060);
              v294 = (uint64_t)v343;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v188 + 56))(v343, 1, 1, v275);
              v295 = v294 + *(int *)(v395 + 20);
              v296 = v188;
              v297 = v275;
              v298 = v389;
              v299 = v393;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v389 + 16))(v295, v286 + *(int *)(v390 + 20), v393);
              v300 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v298 + 56);
              v275 = v297;
              v188 = v296;
              v300(v295, 0, 1, v299);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v392 + 56))(v294, 0, 1, v395);
              v301 = (uint64_t)&v292[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
              swift_beginAccess();
              outlined assign with take of Date?(v294, v301, &demangling cache variable for type metadata for PageId?);
              swift_endAccess();

            }
            else
            {
              v289 = v344;
              outlined init with take of PKStrokeStruct(v287, (uint64_t)v344, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              v290 = v286 + *(int *)(v390 + 20);
              v291 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v289, v290, v391, &v404);
              if (v291)
              {
                v292 = v291;
                outlined destroy of PKStrokeProperties((uint64_t)v289, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_116:
                objc_msgSend(v391, sel_insertPage_atIndex_, v292, v394);

                goto LABEL_91;
              }
              v302 = v275;
              v303 = v345;
              if (v345 == 0x8000000000000000)
              {
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                type metadata accessor for PaperKitPDFPage(0);
                if (one-time initialization token for blankPageImage != -1)
                  swift_once();
                result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
                if (!result)
                  goto LABEL_125;
              }
              else
              {
                outlined copy of PaperDocument.PDFDocumentUse(v345);
                outlined consume of PaperDocument.PDFDocumentUse(v303);
                outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
              }
              v304 = one-time initialization token for defaultPageBounds;
              v292 = (char *)result;
              if (v304 != -1)
                swift_once();
              objc_msgSend(v292, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_1F042F058, xmmword_1F042F060);
              v305 = (uint64_t)v343;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v188 + 56))(v343, 1, 1, v302);
              v306 = v305 + *(int *)(v395 + 20);
              v307 = v389;
              v308 = v290;
              v309 = v393;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v389 + 16))(v306, v308, v393);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v307 + 56))(v306, 0, 1, v309);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v392 + 56))(v305, 0, 1, v395);
              v310 = (uint64_t)&v292[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
              swift_beginAccess();
              outlined assign with take of Date?(v305, v310, &demangling cache variable for type metadata for PageId?);
              swift_endAccess();

              v311 = (char *)v289 + *(int *)(v302 + 20);
              v312 = v340;
              v313 = v336;
              v314 = v338;
              (*(void (**)(char *, char *, uint64_t))(v340 + 16))(v336, v311, v338);
              v315 = v335;
              v316 = v383;
              specialized Set._Variant.insert(_:)(v335, v313);
              v317 = *(void (**)(uint64_t, uint64_t))(v312 + 8);
              v188 = v316;
              v275 = v385;
              v317(v315, v314);
              outlined destroy of PKStrokeProperties((uint64_t)v344, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
              v286 = v353;
            }
            v175 = v388;
            goto LABEL_116;
          }
LABEL_85:
          v268 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v260);
          v267 = *(void (**)(uint64_t, uint64_t))(v340 + 8);
          v267(v260, v185);

          goto LABEL_86;
        }
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      goto LABEL_85;
    }
    v376 = *(void (**)(char *, char *, uint64_t))(v172 + 32);
    v189 = (uint64_t)v386;
    v137 = v384;
    v376(v387, v171, v173);
    while (1)
    {
      v191 = (uint64_t)v358;
      MEMORY[0x1DF0E3390](v173);
      v192 = *(_QWORD *)v378;
      if (!*(_QWORD *)(*(_QWORD *)v378 + 16))
        goto LABEL_43;
      swift_bridgeObjectRetain();
      v193 = specialized __RawDictionaryStorage.find<A>(_:)(v191);
      if ((v194 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_43:
        v211 = 1;
        v205 = v395;
        goto LABEL_48;
      }
      v195 = *(_QWORD *)(*(_QWORD *)(v192 + 56) + 8 * v193);
      v196 = swift_bridgeObjectRelease();
      if (one-time initialization token for lock != -1)
        v196 = swift_once();
      MEMORY[0x1E0C80A78](v196, v197);
      v198 = v391;
      *(&v318 - 2) = (uint64_t)v391;
      *(&v318 - 1) = v195;
      v200 = v199 + 4;
      os_unfair_lock_lock(v199 + 4);
      v201 = (uint64_t)v339;
      v202 = v394;
      specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v203, (uint64_t (*)(void))closure #1 in PaperKitPDFDocument.subscript.getterpartial apply);
      v394 = v202;
      os_unfair_lock_unlock(v200);
      v204 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v392 + 48);
      v205 = v395;
      if (v204(v201, 1, v395) != 1)
        break;
      outlined destroy of StocksKitCurrencyCache.Provider?(v201, &demangling cache variable for type metadata for PageId?);
      result = objc_msgSend(v198, sel_pageAtIndex_, v195);
      v206 = v389;
      v137 = v384;
      if (!result)
        goto LABEL_123;
      v207 = result;
      type metadata accessor for PaperKitPDFPage(0);
      v208 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      v209 = v208;
      v210 = v332;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v209, v332, &demangling cache variable for type metadata for PageId?);

      v205 = v395;
      if (v204(v210, 1, v395) != 1)
      {
        v212 = v210;
        goto LABEL_46;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v210, &demangling cache variable for type metadata for PageId?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v383 + 56))(v137, 1, 1, v385);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v206 + 56))(&v137[*(int *)(v205 + 20)], 1, 1, v163);
LABEL_47:
      v211 = 0;
      v189 = (uint64_t)v386;
      v173 = v379;
LABEL_48:
      v388 = (void (*)(char *, char *, uint64_t))v150;
      v213 = v392;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v392 + 56))(v137, v211, 1, v205);
      v214 = *(void (**)(uint64_t, uint64_t))(v355 + 8);
      v214(v191, v373);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48))(v137, 1, v205) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v137, &demangling cache variable for type metadata for PageId?);
        v215 = v383;
        v216 = v385;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v383 + 56))(v189, 1, 1, v385);
        v217 = v387;
      }
      else
      {
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v137, v189, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties((uint64_t)v137, type metadata accessor for PageId);
        v217 = v387;
        v216 = v385;
        v215 = v383;
      }
      SharedTagged_3.subscript.getter();
      v218 = v173;
      v219 = v400;
      v220 = v401;
      __swift_project_boxed_opaque_existential_1(&v399, v400);
      v221 = v382;
      (*(void (**)(uint64_t, uint64_t))(v220 + 88))(v219, v220);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v399);
      v222 = v356;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v221, v356, &demangling cache variable for type metadata for PDFPageID?);
      v223 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48);
      if (v223(v222, 1, v216) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v221, &demangling cache variable for type metadata for PDFPageID?);
        v189 = (uint64_t)v386;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v386, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, uint64_t))(v380 + 8))(v217, v218);
        outlined destroy of StocksKitCurrencyCache.Provider?(v222, &demangling cache variable for type metadata for PDFPageID?);
        v173 = v218;
        v146 = v217;
        v190 = v364;
        v137 = v384;
        v150 = (uint64_t)v388;
LABEL_31:
        v163 = v393;
        goto LABEL_32;
      }
      v224 = v363;
      outlined init with take of PKStrokeStruct(v222, v363, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v225 = v354;
      outlined init with copy of PKStrokeProperties(v224, v354, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v374 = *(char **)(v215 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v374)(v225, 0, 1, v216);
      v226 = v357;
      v227 = v357 + *(int *)(v346 + 48);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v225, v357, &demangling cache variable for type metadata for PDFPageID?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v386, v227, &demangling cache variable for type metadata for PDFPageID?);
      if (v223(v226, 1, v216) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v225, &demangling cache variable for type metadata for PDFPageID?);
        v228 = v223(v227, 1, v216);
        v229 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
        v137 = v384;
        v150 = (uint64_t)v388;
        v163 = v393;
        if (v228 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v357, &demangling cache variable for type metadata for PDFPageID?);
          v173 = v379;
          v230 = v380;
LABEL_55:
          outlined destroy of PKStrokeProperties(v224, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?(v382, &demangling cache variable for type metadata for PDFPageID?);
          v189 = (uint64_t)v386;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v386, &demangling cache variable for type metadata for PDFPageID?);
          v146 = v387;
          (*(void (**)(char *, uint64_t))(v230 + 8))(v387, v173);
          v190 = v364;
          goto LABEL_32;
        }
        goto LABEL_62;
      }
      v231 = v337;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v226, (uint64_t)v337, &demangling cache variable for type metadata for PDFPageID?);
      v232 = v223(v227, 1, v216);
      v229 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      v137 = v384;
      v150 = (uint64_t)v388;
      v163 = v393;
      if (v232 == 1)
        goto LABEL_61;
      v233 = v227;
      v234 = v331;
      outlined init with take of PKStrokeStruct(v233, (uint64_t)v331, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      if (*v231 != *v234)
      {
        outlined destroy of PKStrokeProperties((uint64_t)v234, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v229 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_61:
        outlined destroy of StocksKitCurrencyCache.Provider?(v354, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties((uint64_t)v231, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_62:
        outlined destroy of StocksKitCurrencyCache.Provider?(v357, v229);
        v173 = v379;
        v230 = v380;
        goto LABEL_63;
      }
      v235 = static CRAsset.== infix(_:_:)();
      outlined destroy of PKStrokeProperties((uint64_t)v234, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v354, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties((uint64_t)v231, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v357, &demangling cache variable for type metadata for PDFPageID?);
      v173 = v379;
      v230 = v380;
      if ((v235 & 1) != 0)
        goto LABEL_55;
LABEL_63:
      v375 = *(char **)(v230 + 16);
      ((void (*)(char *, char *, uint64_t))v375)(v352, v387, v173);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      v236 = (Swift::UInt *)v224;
      v237 = (uint64_t)v342;
      WeakTagged_3.init(_:)();
      v238 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v236, v237, v391, &v404);
      (*(void (**)(uint64_t, uint64_t))(v389 + 8))(v237, v163);
      if (v238)
      {
        v239 = (uint64_t)v334;
        MEMORY[0x1DF0E3390](v173);
        v240 = *(_QWORD *)v378;
        if (*(_QWORD *)(*(_QWORD *)v378 + 16))
        {
          swift_bridgeObjectRetain();
          v241 = specialized __RawDictionaryStorage.find<A>(_:)(v239);
          if ((v242 & 1) != 0)
          {
            v243 = *(_QWORD *)(*(_QWORD *)(v240 + 56) + 8 * v241);
            swift_bridgeObjectRelease();
            v214(v239, v373);
            v244 = v391;
            objc_msgSend(v391, sel_removePageAtIndex_, v243);
            objc_msgSend(v244, sel_insertPage_atIndex_, v238, v243);
LABEL_70:

            goto LABEL_71;
          }
          swift_bridgeObjectRelease();
        }
        v214(v239, v373);
        goto LABEL_70;
      }
      v245 = v340;
      v246 = v336;
      v247 = v338;
      (*(void (**)(char *, char *, uint64_t))(v340 + 16))(v336, (char *)v236 + *(int *)(v385 + 20), v338);
      v248 = v335;
      specialized Set._Variant.insert(_:)(v335, v246);
      v249 = v248;
      v150 = (uint64_t)v388;
      (*(void (**)(uint64_t, uint64_t))(v245 + 8))(v249, v247);
LABEL_71:
      v134 = v386;
      v250 = v348;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v386, v348, &demangling cache variable for type metadata for PDFPageID?);
      v251 = v387;
      v252 = v379;
      ((void (*)(char *, char *, uint64_t))v375)(v352, v387, v379);
      WeakTagged_3.init(_:)();
      swift_bridgeObjectRetain();
      v253 = specialized Collection<>.firstIndex(of:)(v250, v150);
      v255 = v254;
      swift_bridgeObjectRelease();
      v256 = v382;
      if ((v255 & 1) != 0)
      {
        outlined destroy of PKStrokeProperties(v250, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        outlined destroy of PKStrokeProperties(v363, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?(v256, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v134, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, uint64_t))(v380 + 8))(v251, v252);
        v189 = (uint64_t)v134;
        v173 = v252;
        v146 = v251;
        v190 = v364;
        v137 = v384;
        goto LABEL_31;
      }
      v257 = v341;
      outlined init with copy of PKStrokeProperties(v363, v341, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v374)(v257, 0, 1, v385);
      v258 = swift_isUniquelyReferenced_nonNull_native();
      v137 = v384;
      if ((v258 & 1) == 0)
        v150 = specialized _ArrayBuffer._consumeAndCreateNew()(v150);
      v146 = v387;
      v190 = v364;
      v144 = v348;
      v163 = v393;
      if ((v253 & 0x8000000000000000) != 0)
        goto LABEL_118;
      if (v253 >= *(_QWORD *)(v150 + 16))
        goto LABEL_119;
      outlined assign with take of Date?(v341, v150+ ((*(unsigned __int8 *)(v381 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v381 + 80))+ *(_QWORD *)(v381 + 72) * v253, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties(v144, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PKStrokeProperties(v363, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v256, &demangling cache variable for type metadata for PDFPageID?);
      v189 = (uint64_t)v386;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v386, &demangling cache variable for type metadata for PDFPageID?);
      v173 = v379;
      (*(void (**)(char *, uint64_t))(v380 + 8))(v146, v379);
LABEL_32:
      CROrderedSet.Iterator.next()();
      if (v377(v190, 1, v173) == 1)
        goto LABEL_27;
      v376(v146, v190, v173);
    }
    v212 = v201;
    v137 = v384;
LABEL_46:
    outlined init with take of PKStrokeStruct(v212, (uint64_t)v137, type metadata accessor for PageId);
    goto LABEL_47;
  }
  if (one-time initialization token for lock != -1)
LABEL_121:
    v147 = swift_once();
  v149 = 0;
  v150 = MEMORY[0x1E0DEE9D8];
  v374 = v146;
  v349 = v134;
  while (1)
  {
    if (v146 == v149)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    v151 = v150;
    MEMORY[0x1E0C80A78](v147, v148);
    v152 = v391;
    *(&v318 - 2) = (uint64_t)v391;
    *(&v318 - 1) = (uint64_t)v149;
    v154 = v153 + 4;
    os_unfair_lock_lock(v153 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v155, (uint64_t (*)(void))partial apply for closure #1 in PaperKitPDFDocument.subscript.getter);
    v394 = v144;
    os_unfair_lock_unlock(v154);
    v156 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48);
    v157 = v395;
    if (v156(v134, 1, v395) == 1)
      break;
    outlined init with take of PKStrokeStruct((uint64_t)v134, (uint64_t)v137, type metadata accessor for PageId);
    v163 = v393;
    v159 = v389;
    v150 = v151;
    v164 = (uint64_t)v376;
LABEL_15:
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v137[*(int *)(v157 + 20)], v164, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v164, 1, v163) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v137, (uint64_t)v388, &demangling cache variable for type metadata for PDFPageID?);
      LOBYTE(v399) = 2;
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v150 + 16) + 1, 1, v150);
      v144 = v394;
      v166 = *(_QWORD *)(v150 + 16);
      v165 = *(_QWORD *)(v150 + 24);
      if (v166 >= v165 >> 1)
        v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v165 > 1, v166 + 1, 1, v150);
      *(_QWORD *)(v150 + 16) = v166 + 1;
      outlined init with take of PKStrokeStruct((uint64_t)v388, v150+ ((*(unsigned __int8 *)(v381 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v381 + 80))+ *(_QWORD *)(v381 + 72) * v166, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    }
    else
    {
      v167 = v375;
      (*(void (**)(char *, uint64_t, uint64_t))(v159 + 32))(v375, v164, v163);
      v168 = v377;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v137, (uint64_t)v377, &demangling cache variable for type metadata for PDFPageID?);
      (*(void (**)(char *, char *, uint64_t))(v159 + 16))((char *)v168 + *(int *)(v390 + 20), v167, v163);
      outlined init with copy of PKStrokeProperties((uint64_t)v168, (uint64_t)v378, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v150 + 16) + 1, 1, v150);
      v170 = *(_QWORD *)(v150 + 16);
      v169 = *(_QWORD *)(v150 + 24);
      if (v170 >= v169 >> 1)
        v150 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v169 > 1, v170 + 1, 1, v150);
      *(_QWORD *)(v150 + 16) = v170 + 1;
      outlined init with take of PKStrokeStruct((uint64_t)v378, v150+ ((*(unsigned __int8 *)(v381 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v381 + 80))+ *(_QWORD *)(v381 + 72) * v170, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PKStrokeProperties((uint64_t)v377, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      (*(void (**)(char *, uint64_t))(v159 + 8))(v375, v163);
      v144 = v394;
    }
    ++v149;
    v147 = outlined destroy of PKStrokeProperties((uint64_t)v137, type metadata accessor for PageId);
    v146 = v374;
    if (v374 == v149)
      goto LABEL_26;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v134, &demangling cache variable for type metadata for PageId?);
  result = objc_msgSend(v152, sel_pageAtIndex_, v149);
  v159 = v389;
  if (result)
  {
    v160 = result;
    type metadata accessor for PaperKitPDFPage(0);
    v161 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    v162 = v350;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v161, v350, &demangling cache variable for type metadata for PageId?);

    v157 = v395;
    if (v156((char *)v162, 1, v395) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for PageId?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v383 + 56))(v137, 1, 1, v385);
      v163 = v393;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v159 + 56))(&v137[*(int *)(v157 + 20)], 1, 1, v393);
    }
    else
    {
      outlined init with take of PKStrokeStruct(v162, (uint64_t)v137, type metadata accessor for PageId);
      v163 = v393;
    }
    v150 = v151;
    v164 = (uint64_t)v376;
    v134 = v349;
    goto LABEL_15;
  }
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
  return result;
}

uint64_t PaperDocument.PDFPageAndPaperPage.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  _QWORD v25[2];
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (_QWORD *)((char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v1, (uint64_t)v5, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PDFPageID?);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v11._object = (void *)0x80000001DDF56220;
    v11._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v11);
    type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    _print_unlocked<A, B>(_:_:)();
    v12._countAndFlagsBits = 125;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    return v27;
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(18);
    v14._countAndFlagsBits = 0x3A6664707BLL;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 979857531;
    v26._object = (void *)0xE400000000000000;
    v25[1] = *v10;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x3A7465737361202CLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);
    v17 = CRAsset.digest.getter();
    v19 = v18;
    v20 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v17, v19);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 125;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x3A7265706170202CLL;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 125;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    v13 = v27;
    outlined destroy of PKStrokeProperties((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  return v13;
}

Swift::Int PaperDocument.PDFPageAndPaperPage.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PDFPageID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (Swift::UInt *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v1, (uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v6);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E40]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PaperDocument.PDFPageAndPaperPage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PDFPageID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (Swift::UInt *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v1, (uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v6);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E40]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PaperDocument.PDFPageAndPaperPage()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PDFPageID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (Swift::UInt *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v1, (uint64_t)v10, &demangling cache variable for type metadata for PDFPageID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of PKStrokeStruct((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*v6);
    type metadata accessor for CRAsset();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
    dispatch thunk of Hashable.hash(into:)();
    outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E40]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  SharedTagged_3.subscript.getter();
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

char *specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(Swift::UInt *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  Swift::UInt *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  id v60;
  id v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  void *v77;
  Swift::UInt v78;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  uint64_t v98;
  id v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  char *v112;
  char *v113;

  v111 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v107 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v101 = (char *)&v98 - v12;
  v13 = type metadata accessor for PDFPageID();
  v110 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v100 = (uint64_t *)((char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x1E0C80A78](v102, v16);
  v105 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v22, v23);
  v106 = (uint64_t)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v104 = (char *)&v98 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v98 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v103 = (uint64_t)&v98 - v34;
  v35 = type metadata accessor for CRKeyPath();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v98 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  MEMORY[0x1DF0E3078]();
  v112 = a3;
  v40 = &a3[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
  swift_beginAccess();
  v41 = *(_QWORD *)v40;
  v42 = *(_QWORD *)(v41 + 16);
  v109 = a2;
  if (!v42)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
    v47 = a1;
    v48 = v13;
    goto LABEL_9;
  }
  v45 = *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v43);
  swift_bridgeObjectRelease();
  v46 = objc_msgSend(v112, sel_pageAtIndex_, v45);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
  v47 = a1;
  v48 = v13;
  if (v46)
  {
    type metadata accessor for PaperKitPDFPage(0);
    v49 = swift_dynamicCastClass();
    if (v49)
    {
      v50 = (char *)v49;
      v99 = v46;
      v51 = v49 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v51, (uint64_t)v21, &demangling cache variable for type metadata for PageId?);
      v52 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 48))(v21, 1, v52))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PageId?);
        v53 = v110;
        v54 = v103;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v103, 1, 1, v13);
      }
      else
      {
        v54 = v103;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, v103, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PageId?);
        v53 = v110;
      }
      v89 = (uint64_t)v105;
      v90 = v104;
      v91 = v102;
      outlined init with copy of PKStrokeProperties((uint64_t)v47, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v31, 0, 1, v48);
      v92 = v89 + *(int *)(v91 + 48);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v54, v89, &demangling cache variable for type metadata for PDFPageID?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v31, v92, &demangling cache variable for type metadata for PDFPageID?);
      v93 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
      if (v93(v89, 1, v48) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for PDFPageID?);
        if (v93(v92, 1, v48) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for PDFPageID?);
          return v50;
        }
      }
      else
      {
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, (uint64_t)v90, &demangling cache variable for type metadata for PDFPageID?);
        if (v93(v92, 1, v48) != 1)
        {
          v96 = v100;
          outlined init with take of PKStrokeStruct(v92, (uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          if (*v90 == *v96)
          {
            v97 = static CRAsset.== infix(_:_:)();
            outlined destroy of PKStrokeProperties((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
            outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for PDFPageID?);
            outlined destroy of PKStrokeProperties((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
            outlined destroy of StocksKitCurrencyCache.Provider?(v89, &demangling cache variable for type metadata for PDFPageID?);
            if ((v97 & 1) != 0)
              return v50;
            goto LABEL_39;
          }
          outlined destroy of PKStrokeProperties((uint64_t)v96, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for PDFPageID?);
          outlined destroy of PKStrokeProperties((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          v95 = v89;
          v94 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_38:
          outlined destroy of StocksKitCurrencyCache.Provider?(v95, v94);
LABEL_39:

          goto LABEL_9;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties((uint64_t)v90, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      }
      v94 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      v95 = v89;
      goto LABEL_38;
    }

  }
LABEL_9:
  v55 = &v112[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pdfPageIdMap];
  swift_beginAccess();
  v56 = *(_QWORD *)v55;
  if (!*(_QWORD *)(*(_QWORD *)v55 + 16))
    goto LABEL_16;
  swift_bridgeObjectRetain();
  v57 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v58 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v59 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v57);
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v112, sel_pageAtIndex_, v59);
  if (!v60)
  {
LABEL_16:
    v73 = v111;
    swift_beginAccess();
    v74 = *v73;
    if (!*(_QWORD *)(*v73 + 16)
      || (v75 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47 + *(int *)(v48 + 20)), (v76 & 1) == 0))
    {
      swift_endAccess();
      return 0;
    }
    v77 = *(void **)(*(_QWORD *)(v74 + 56) + 8 * v75);
    swift_endAccess();
    v78 = *v47;
    v61 = v77;
    result = (char *)objc_msgSend(v61, sel_pageAtIndex_, v78);
    if (result)
    {
      v79 = result;
      objc_msgSend(result, sel_copy);

      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for PaperKitPDFPage(0);
      swift_dynamicCast();
      v80 = v113;
      v81 = (uint64_t)v47;
      v82 = v106;
      outlined init with copy of PKStrokeProperties(v81, v106, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v82, 0, 1, v48);
      v83 = (uint64_t)v80 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      v84 = type metadata accessor for PageId(0);
      v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 48);
      result = (char *)v85(v83, 1, v84);
      v86 = v107;
      if ((_DWORD)result != 1)
      {
        v50 = v80;
        outlined assign with take of Date?(v82, v83, &demangling cache variable for type metadata for PDFPageID?);
        swift_endAccess();
        v87 = v108;
        v88 = *(_QWORD *)(v108 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, v109, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v86, 0, 1, v87);
        swift_beginAccess();
        result = (char *)v85(v83, 1, v84);
        if ((_DWORD)result != 1)
        {
          v72 = v83 + *(int *)(v84 + 20);
          v71 = (uint64_t)v86;
          goto LABEL_22;
        }
        goto LABEL_42;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v61 = v60;
  type metadata accessor for PaperKitPDFPage(0);
  v62 = (void *)swift_dynamicCastClass();
  if (!v62)
  {

    goto LABEL_16;
  }
  objc_msgSend(v62, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  v63 = v113;
  v64 = v108;
  v65 = *(_QWORD *)(v108 - 8);
  v66 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v101, v109, v108);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v64);
  v67 = &v63[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  v68 = type metadata accessor for PageId(0);
  result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 48))(v67, 1, v68);
  if ((_DWORD)result != 1)
  {
    v70 = (uint64_t)&v67[*(int *)(v68 + 20)];
    v50 = v63;
    v71 = (uint64_t)v66;
    v72 = v70;
LABEL_22:
    outlined assign with take of Date?(v71, v72, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    swift_endAccess();

    return v50;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v16 = (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change;
    v17 = (uint64_t)v11;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v17, v16);
    v20 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a2, 1, 1, v20);
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?));
  outlined init with take of PKStrokeStruct((uint64_t)&v11[*(int *)(v18 + 48)], (uint64_t)v15, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v15, (uint64_t)v7, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of PKStrokeProperties((uint64_t)v15, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
  v19 = type metadata accessor for PDFPageID();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v7, 1, v19) == 1)
  {
    v16 = &demangling cache variable for type metadata for PDFPageID?;
    v17 = (uint64_t)v7;
    goto LABEL_5;
  }
  v22 = &v7[*(int *)(v19 + 20)];
  v23 = type metadata accessor for CRAsset();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 16))(a2, v22, v23);
  outlined destroy of PKStrokeProperties((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(a2, 0, 1, v23);
}

BOOL closure #4 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;

  swift_beginAccess();
  v6 = *a2;
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_endAccess();
    return v9 == a3;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t PaperDocument.renderPDFDocument<A>(capsule:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v8[20] = a3;
  v8[21] = v3;
  v8[18] = a1;
  v8[19] = a2;
  return swift_task_switch();
}

uint64_t PaperDocument.export<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  return swift_task_switch();
}

uint64_t PaperDocument.export<A>(in:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for CRContext();
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 96) = 0u;
  v1 = MEMORY[0x1DF0E3C90](0, v0 + 96);
  *(_QWORD *)(v0 + 176) = v1;
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  *(_QWORD *)(v0 + 136) = v1;
  *(_OWORD *)(v0 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 75) = 0u;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v2;
  *v2 = v0;
  v2[1] = PaperDocument.export<A>(in:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), v0 + 16, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
}

uint64_t PaperDocument.export<A>(in:)(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  uint64_t v5;

  v3 = *(void **)(*v1 + 176);
  v5 = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t PaperDocument.export<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  *(_QWORD *)(v4 + 96) = a1;
  *(_OWORD *)(v4 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 75) = 0u;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 104) = v8;
  *v8 = v4;
  v8[1] = PaperDocument.export<A>(_:in:options:);
  return PaperDocument.newPDFDocument<A>(use:in:options:)((_QWORD *)(v4 + 96), a2, v4 + 16, a3, a4);
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  *(_QWORD *)(v5 + 96) = *a3;
  *(_OWORD *)(v5 + 16) = xmmword_1DDF32D00;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 75) = 0u;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 104) = v10;
  *v10 = v5;
  v10[1] = PaperDocument.update<A>(pdfDocument:in:use:);
  return PaperDocument.update<A>(pdfDocument:in:use:options:)(a1, a2, (uint64_t *)(v5 + 96), v5 + 16, a4, a5);
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:options:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)(v7 + 168) = a6;
  *(_QWORD *)(v7 + 176) = v6;
  *(_QWORD *)(v7 + 152) = a2;
  *(_QWORD *)(v7 + 160) = a5;
  *(_QWORD *)(v7 + 144) = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(_QWORD *)(v7 + 184) = v10;
  *(_QWORD *)(v7 + 192) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 200) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(_QWORD *)(v7 + 208) = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(_QWORD *)(v7 + 216) = v11;
  *(_QWORD *)(v7 + 224) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 232) = swift_task_alloc();
  *(_QWORD *)(v7 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(_QWORD *)(v7 + 248) = swift_task_alloc();
  *(_QWORD *)(v7 + 256) = swift_task_alloc();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(_QWORD *)(v7 + 264) = v12;
  *(_QWORD *)(v7 + 272) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v7 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(_QWORD *)(v7 + 288) = swift_task_alloc();
  *(_QWORD *)(v7 + 296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v13 = swift_task_alloc();
  v14 = *a3;
  *(_QWORD *)(v7 + 304) = v13;
  *(_QWORD *)(v7 + 312) = v14;
  v15 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v7 + 320) = *(_OWORD *)a4;
  *(_OWORD *)(v7 + 336) = v15;
  v16 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v7 + 352) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v7 + 368) = v16;
  *(_QWORD *)(v7 + 384) = *(_QWORD *)(a4 + 64);
  LOWORD(v14) = *(_WORD *)(a4 + 72);
  *(_BYTE *)(v7 + 94) = *(_BYTE *)(a4 + 74);
  *(_WORD *)(v7 + 92) = v14;
  return swift_task_switch();
}

uint64_t PaperDocument.update<A>(pdfDocument:in:use:options:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[4];
  uint64_t v67;
  __int16 v68;
  char v69;

  v1 = *(void **)(v0 + 144);
  type metadata accessor for PaperKitPDFDocument();
  v2 = swift_dynamicCastClass();
  *(_QWORD *)(v0 + 392) = v2;
  if (!v2)
  {
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_WORD *)(v0 + 92);
  v4 = *(_BYTE *)(v0 + 94);
  v5 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  v65 = *(_QWORD *)(v0 + 312);
  v6 = v65;
  v10 = *(_OWORD *)(v0 + 336);
  v66[0] = *(_OWORD *)(v0 + 320);
  v66[1] = v10;
  v11 = *(_OWORD *)(v0 + 368);
  v66[2] = *(_OWORD *)(v0 + 352);
  v66[3] = v11;
  v67 = v5;
  v69 = v4;
  v68 = v3;
  v12 = v1;
  PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v9, &v65, (uint64_t *)v66, v8, v7);
  if (v6 == 0x8000000000000000)
  {
    v13 = *(void **)(v0 + 144);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
LABEL_16:

    goto LABEL_17;
  }
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 176);
  outlined copy of PaperDocument.PDFDocumentUse(v15);
  outlined consume of PaperDocument.PDFDocumentUse(v15);
  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v21, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v18, v16, v20);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v22 = *(int *)(v17 + 36);
  *(_DWORD *)(v0 + 416) = v22;
  *(_QWORD *)(v14 + v22) = 0;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    v24 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 224);
    v25 = *(_QWORD *)(v0 + 208);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
    {
      v26 = *(_QWORD *)(v0 + 248);
      v28 = *(_QWORD *)(v0 + 184);
      v27 = *(_QWORD *)(v0 + 192);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 208), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1, 1, v28);
      goto LABEL_11;
    }
    v63 = *(int *)(v0 + 416);
    v29 = *(_QWORD *)(v0 + 304);
    v30 = *(_QWORD *)(v0 + 240);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 200);
    v33 = *(_QWORD *)(v0 + 184);
    v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 32);
    v34(v30, *(_QWORD *)(v0 + 208), v31);
    v35 = v32 + *(int *)(v33 + 48);
    v36 = *(_QWORD *)(v29 + v63);
    result = v34(v35, v30, v31);
    if (__OFADD__(v36, 1))
      break;
    v38 = *(_QWORD **)(v0 + 248);
    v39 = *(_QWORD *)(v0 + 216);
    v41 = *(_QWORD *)(v0 + 184);
    v40 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(*(_QWORD *)(v0 + 304) + *(int *)(v0 + 416)) = v36 + 1;
    v42 = (char *)v38 + *(int *)(v41 + 48);
    *v38 = v36;
    v34((uint64_t)v42, v35, v39);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v38, 0, 1, v41);
LABEL_11:
    v43 = *(_QWORD *)(v0 + 256);
    v45 = *(_QWORD *)(v0 + 184);
    v44 = *(_QWORD *)(v0 + 192);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 248), v43, &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v43, 1, v45) == 1)
    {
      v13 = *(void **)(v0 + 144);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 304), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
      goto LABEL_16;
    }
    v46 = *(void **)(v0 + 392);
    v47 = *(char **)(v0 + 256);
    v48 = *(_QWORD *)v47;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 232), &v47[*(int *)(*(_QWORD *)(v0 + 184) + 48)], *(_QWORD *)(v0 + 216));
    v49 = objc_msgSend(v46, sel_pageAtIndex_, v48);
    *(_QWORD *)(v0 + 400) = v49;
    if (v49)
    {
      v50 = v49;
      type metadata accessor for PaperKitPDFPage(0);
      v51 = swift_dynamicCastClass();
      if (v51)
      {
        v52 = v51;
        v53 = *(_WORD *)(v0 + 92);
        v54 = *(_BYTE *)(v0 + 94);
        v55 = *(_QWORD *)(v0 + 384);
        v62 = *(_OWORD *)(v0 + 352);
        v64 = *(_OWORD *)(v0 + 368);
        v60 = *(_OWORD *)(v0 + 320);
        v61 = *(_OWORD *)(v0 + 336);
        v56 = *(_QWORD *)(v0 + 312);
        SharedTagged_3.subscript.getter();
        v57 = *(_QWORD *)(v0 + 120);
        v58 = *(_QWORD *)(v0 + 128);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v57);
        *(_QWORD *)(v0 + 136) = v56;
        *(_OWORD *)(v0 + 16) = v60;
        *(_OWORD *)(v0 + 32) = v61;
        *(_OWORD *)(v0 + 48) = v62;
        *(_OWORD *)(v0 + 64) = v64;
        *(_QWORD *)(v0 + 80) = v55;
        *(_BYTE *)(v0 + 90) = v54;
        *(_WORD *)(v0 + 88) = v53;
        *(_QWORD *)&v64 = **(int **)(v58 + 144) + *(_QWORD *)(v58 + 144);
        v59 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 408) = v59;
        *v59 = v0;
        v59[1] = PaperDocument.update<A>(pdfDocument:in:use:options:);
        return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v64)(v52, v0 + 136, *(_QWORD *)(v0 + 152), v0 + 16, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), v57, v58);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  }
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __objc2_prot_list **p_base_prots;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __objc2_prot_list **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);

  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v4 = &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  p_base_prots = &MiniMenuController.base_prots;
  while (1)
  {
    v7 = *(_QWORD *)(v0 + 216);
    v6 = *(_QWORD *)(v0 + 224);
    v8 = *(_QWORD *)(v0 + 208);
    __swift_instantiateConcreteTypeFromMangledName(v4);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
    {
      v9 = *(_QWORD *)(v0 + 248);
      v11 = *(_QWORD *)(v0 + 184);
      v10 = *(_QWORD *)(v0 + 192);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 208), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v11);
      goto LABEL_8;
    }
    v12 = p_base_prots;
    v13 = v4;
    v49 = *(int *)(v0 + 416);
    v14 = *(_QWORD *)(v0 + 304);
    v15 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 200);
    v18 = *(_QWORD *)(v0 + 184);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 224) + 32);
    v19(v15, *(_QWORD *)(v0 + 208), v16);
    v20 = v17 + *(int *)(v18 + 48);
    v21 = *(_QWORD *)(v14 + v49);
    result = v19(v20, v15, v16);
    if (__OFADD__(v21, 1))
      break;
    v23 = *(_QWORD **)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 216);
    v26 = *(_QWORD *)(v0 + 184);
    v25 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(*(_QWORD *)(v0 + 304) + *(int *)(v0 + 416)) = v21 + 1;
    v27 = (char *)v23 + *(int *)(v26 + 48);
    *v23 = v21;
    v19((uint64_t)v27, v20, v24);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v26);
    v4 = v13;
    p_base_prots = v12;
LABEL_8:
    v28 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 184);
    v29 = *(_QWORD *)(v0 + 192);
    outlined init with take of (key: Int, value: AnyCRValue)?(*(_QWORD *)(v0 + 248), v28, &demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v28, 1, v30) == 1)
    {
      v45 = *(void **)(v0 + 144);
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 304), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v31 = *(void **)(v0 + 392);
    v32 = *(char **)(v0 + 256);
    v33 = *(_QWORD *)v32;
    (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 232), &v32[*(int *)(*(_QWORD *)(v0 + 184) + 48)], *(_QWORD *)(v0 + 216));
    v34 = objc_msgSend(v31, (SEL)p_base_prots[407], v33);
    *(_QWORD *)(v0 + 400) = v34;
    if (v34)
    {
      v35 = v34;
      type metadata accessor for PaperKitPDFPage(0);
      v36 = swift_dynamicCastClass();
      if (v36)
      {
        v37 = v36;
        v38 = *(_WORD *)(v0 + 92);
        v39 = *(_BYTE *)(v0 + 94);
        v40 = *(_QWORD *)(v0 + 384);
        v50 = *(_OWORD *)(v0 + 368);
        v47 = *(_OWORD *)(v0 + 336);
        v48 = *(_OWORD *)(v0 + 352);
        v46 = *(_OWORD *)(v0 + 320);
        v41 = *(_QWORD *)(v0 + 312);
        SharedTagged_3.subscript.getter();
        v42 = *(_QWORD *)(v0 + 120);
        v43 = *(_QWORD *)(v0 + 128);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v42);
        *(_QWORD *)(v0 + 136) = v41;
        *(_OWORD *)(v0 + 16) = v46;
        *(_OWORD *)(v0 + 32) = v47;
        *(_OWORD *)(v0 + 48) = v48;
        *(_OWORD *)(v0 + 64) = v50;
        *(_QWORD *)(v0 + 80) = v40;
        *(_BYTE *)(v0 + 90) = v39;
        *(_WORD *)(v0 + 88) = v38;
        *(_QWORD *)&v50 = **(int **)(v43 + 144) + *(_QWORD *)(v43 + 144);
        v44 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 408) = v44;
        *v44 = v0;
        v44[1] = PaperDocument.update<A>(pdfDocument:in:use:options:);
        return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))v50)(v37, v0 + 136, *(_QWORD *)(v0 + 152), v0 + 16, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), v42, v43);
      }

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.minEncodingVersion.getter();
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PaperDocument@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1EDB72498;
  v4 = qword_1EDB724A0;
  v3 = unk_1EDB724A8;
  v5 = qword_1EDB724B0;
  v6 = qword_1EDB724B8;
  *a1 = static PaperDocument.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return static CRStruct_2.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance PaperDocument()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRStruct_Base.init() in conformance PaperDocument@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v14 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v12 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v11, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  *(_QWORD *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRStruct_2.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PaperDocument()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  return CRDT.init(serializedData:)();
}

uint64_t PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[7];
  char v16;
  uint64_t v17;

  result = (uint64_t)objc_msgSend(a1, sel_pageCount);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](result, v12);
    v15[2] = v5;
    v15[3] = a1;
    v15[4] = a2;
    v15[5] = a3;
    v15[6] = a4;
    v16 = a5 & 1;
    specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD, __n128))partial apply for closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:), (uint64_t)v15, 0, v13);
    v17 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>], MEMORY[0x1E0DEAF38]);
    CROrderedSet.append<A>(contentsOf:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static PaperDocument.PDFPageAndPaperPage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  char v31;
  _QWORD v32[3];
  _QWORD *v33;

  v4 = type metadata accessor for PDFPageID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (_QWORD *)((char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v13, v14);
  v33 = (_QWORD *)((char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v32 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v32 - v22;
  v32[1] = a1;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v32 - v22, &demangling cache variable for type metadata for PDFPageID?);
  v32[2] = a2;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
  v24 = (uint64_t)&v12[*(int *)(v9 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v23, (uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v19, v24, &demangling cache variable for type metadata for PDFPageID?);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v25((uint64_t)v12, 1, v4) != 1)
  {
    v27 = v33;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v33, &demangling cache variable for type metadata for PDFPageID?);
    if (v25(v24, 1, v4) != 1)
    {
      outlined init with take of PKStrokeStruct(v24, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      if (*v27 == *v8)
      {
        v31 = static CRAsset.== infix(_:_:)();
        outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
        if ((v31 & 1) != 0)
          goto LABEL_4;
LABEL_9:
        v26 = 0;
        return v26 & 1;
      }
      outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v29 = (uint64_t)v12;
      v28 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_8:
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, v28);
      goto LABEL_9;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
    outlined destroy of PKStrokeProperties((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_7:
    v28 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
    v29 = (uint64_t)v12;
    goto LABEL_8;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for PDFPageID?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for PDFPageID?);
  if (v25(v24, 1, v4) != 1)
    goto LABEL_7;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for PDFPageID?);
LABEL_4:
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  v26 = static WeakTagged_3.== infix(_:_:)();
  return v26 & 1;
}

uint64_t specialized static PaperDocument.PDFDocumentUse.== infix(_:_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  v2 = *a1;
  v3 = *a2;
  v4 = *a1 >> 62;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 1)
    {
      if (v3 >> 62 == 1)
        goto LABEL_6;
    }
    else if (v2 == 0x8000000000000000)
    {
      if (v3 == 0x8000000000000000)
      {
        v5 = 1;
        v2 = 0x8000000000000000;
        v3 = 0x8000000000000000;
        goto LABEL_13;
      }
    }
    else if (v3 == 0x8000000000000008)
    {
      v5 = 1;
      v2 = 0x8000000000000008;
      v3 = 0x8000000000000008;
      goto LABEL_13;
    }
LABEL_12:
    outlined copy of PaperDocument.PDFDocumentUse(*a2);
    outlined copy of PaperDocument.PDFDocumentUse(v2);
    v5 = 0;
    goto LABEL_13;
  }
  if (v3 >> 62)
    goto LABEL_12;
LABEL_6:
  type metadata accessor for NSObject();
  outlined copy of PaperDocument.PDFDocumentUse(v3);
  outlined copy of PaperDocument.PDFDocumentUse(v2);
  v5 = static NSObject.== infix(_:_:)();
LABEL_13:
  outlined consume of PaperDocument.PDFDocumentUse(v2);
  outlined consume of PaperDocument.PDFDocumentUse(v3);
  return v5 & 1;
}

uint64_t base witness table accessor for CRStruct_Base_2 in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t base witness table accessor for CRStruct_Base in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_1 : CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DB0]);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CRAsset?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CRAsset?>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t base witness table accessor for CRMergeable in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t base witness table accessor for CRType in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PaperDocument()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PaperDocument> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PaperDocument>, MEMORY[0x1E0D12738]);
}

uint64_t base witness table accessor for CRCodable in PaperDocument()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
}

uint64_t sub_1DDD3A628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_3(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDD3A638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_3(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_getTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for PaperDocument(0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  return a4(v5);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocument(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PaperDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for PaperDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD3AA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocument()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD3AB1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void type metadata completion function for PaperDocument()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CROrderedSet<SharedTagged_3<TaggedPaperPage>>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CRAsset?>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for CROrderedSet<SharedTagged_3<TaggedPaperPage>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
    v0 = type metadata accessor for CROrderedSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  }
}

void type metadata accessor for CRRegister<CRAsset?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<CRAsset?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CRAsset?>);
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  outlined copy of PaperDocument.PDFDocumentUse(*a2);
  *a1 = v3;
  return a1;
}

void destroy for PaperDocument.PDFDocumentUse(unint64_t *a1)
{
  outlined consume of PaperDocument.PDFDocumentUse(*a1);
}

unint64_t *assignWithCopy for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  outlined copy of PaperDocument.PDFDocumentUse(*a2);
  v4 = *a1;
  *a1 = v3;
  outlined consume of PaperDocument.PDFDocumentUse(v4);
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for PaperDocument.PDFDocumentUse(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  outlined consume of PaperDocument.PDFDocumentUse(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument.PDFDocumentUse(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PaperDocument.PDFDocumentUse(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PaperDocument.PDFDocumentUse(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *destructiveProjectEnumData for PaperDocument.PDFDocumentUse(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for PaperDocument.PDFDocumentUse(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 62;
  }
  else
  {
    v2 = 8 * (a2 - 2);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for PaperDocument.PDFDocumentUse()
{
  return &type metadata for PaperDocument.PDFDocumentUse;
}

id partial apply for closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)(*a1, *(char **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), a2);
}

uint64_t lazy protocol witness table accessor for type CRAsset? and conformance <A> A?(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x1DF0E6450](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PaperDocument.PDFPageAndPaperPage(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperDocument.PDFPageAndPaperPage);
}

uint64_t partial apply for closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  return closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(a1);
}

uint64_t sub_1DDD3B008()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperDocument.PDFPageAndPaperPage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for PDFPageID();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v11 = *(int *)(v7 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for PaperDocument.PDFPageAndPaperPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for PDFPageID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = a1 + *(int *)(v4 + 20);
    v6 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

_QWORD *initializeWithCopy for PaperDocument.PDFPageAndPaperPage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v6 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

_QWORD *assignWithCopy for PaperDocument.PDFPageAndPaperPage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v21 = *(int *)(v6 + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
      goto LABEL_7;
    }
    outlined destroy of PKStrokeProperties((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v11 = *(int *)(v6 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  return a1;
}

_QWORD *initializeWithTake for PaperDocument.PDFPageAndPaperPage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v6 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

_QWORD *assignWithTake for PaperDocument.PDFPageAndPaperPage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v21 = *(int *)(v6 + 20);
      v22 = (char *)a1 + v21;
      v23 = (char *)a2 + v21;
      v24 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
      goto LABEL_7;
    }
    outlined destroy of PKStrokeProperties((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v11 = *(int *)(v6 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocument.PDFPageAndPaperPage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD3B6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PaperDocument.PDFPageAndPaperPage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD3B774(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PaperDocument.PDFPageAndPaperPage()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PDFPageID?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for WeakTagged_3<TaggedPaperPage>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for PDFPageID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for PDFPageID?)
  {
    type metadata accessor for PDFPageID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PDFPageID?);
  }
}

void type metadata accessor for WeakTagged_3<TaggedPaperPage>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>)
  {
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    v0 = type metadata accessor for WeakTagged_3();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  }
}

uint64_t base witness table accessor for Equatable in PaperDocument.PDFPageAndPaperPage()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage, (uint64_t)&protocol conformance descriptor for PaperDocument.PDFPageAndPaperPage);
}

void LinkPreviewLoadingOperation.linkPreviewDidFinishLoading(notification:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  char v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v10[24];
  uint64_t v11;

  v1 = v0;
  if (objc_msgSend((id)objc_opt_self(), sel_isMainThread))
  {
    Notification.object.getter();
    if (v11)
    {
      type metadata accessor for SYContentItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v2 = *(void **)(v0 + 16);
        if (v2)
        {
          v3 = v9;
          v4 = v2;
          v5 = static NSObject.== infix(_:_:)();

          if ((v5 & 1) != 0)
          {
            v6 = *(void (**)(uint64_t))(v1 + 24);
            if (v6)
            {
              v7 = swift_retain();
              v6(v7);

              outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v6);
            }
            else
            {

            }
            v8 = *(_QWORD *)(v1 + 24);
            *(_QWORD *)(v1 + 24) = 0;
            *(_QWORD *)(v1 + 32) = 0;
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
          }
          else
          {

          }
        }
        else
        {

        }
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v10);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LinkPreviewLoadingOperation.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinkPreviewLoadingOperation()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for SYContentItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SYContentItem;
  if (!lazy cache variable for type metadata for SYContentItem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
  }
  return result;
}

uint64_t LiveEditable.endedLiveEditing()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[11] = a2;
  v3[12] = v2;
  v3[10] = a1;
  v3[13] = type metadata accessor for MainActor();
  v3[14] = static MainActor.shared.getter();
  v3[15] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[16] = v4;
  return swift_task_switch();
}

uint64_t LiveEditable.endedLiveEditing()()
{
  uint64_t v0;
  uint64_t v1;

  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 80)) & 1) != 0)
  {
    v1 = static MainActor.shared.getter();
    *(_QWORD *)(v0 + 136) = v1;
    if (v1)
    {
      swift_getObjectType();
      dispatch thunk of Actor.unownedExecutor.getter();
    }
    return swift_task_switch();
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v0[2] = v0;
  v0[3] = LiveEditable.endedLiveEditing();
  v4 = swift_continuation_init();
  closure #1 in LiveEditable.endedLiveEditing()(v4, v1, v3, v2);
  return swift_continuation_await();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LiveEditable.endedLiveEditing()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v5)(_BYTE *, _QWORD);
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  _BYTE v13[32];

  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 48))(v13, a3, a4);
  v7 = v6;
  v8 = *v6;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *v7 = v8;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    *v7 = v8;
  }
  v8[2] = v11 + 1;
  v8[v11 + 4] = a1;
  return v5(v13, 0);
}

uint64_t Capsule<>.links.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  Class isa;
  id v69;
  id v70;
  uint64_t v71;
  id v72;
  void *v73;
  uint64_t v74;
  id v75;
  id v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101[2];
  uint64_t v102;
  id v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v86 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Link();
  v94 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v4);
  v90 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  *(_QWORD *)&v97 = (char *)&v86 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v93 = (char *)&v86 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v96 = (uint64_t)&v86 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v92 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v86 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v86 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v98 = (char *)&v86 - v29;
  MEMORY[0x1E0C80A78](v30, v31);
  v95 = (char *)&v86 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v99 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v86 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Paper and conformance Paper((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  v91 = v37;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v36, &v40[*(int *)(v37 + 44)], v33);
  outlined destroy of PKStrokeProperties((uint64_t)v40, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  lazy protocol witness table accessor for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>();
  v89 = (unint64_t *)v36;
  v41 = dispatch thunk of Sequence._copyToContiguousArray()();
  v100 = v41;
  if (*(_QWORD *)(v41 + 16))
  {
    v42 = v41;
    v99 = MEMORY[0x1E0DEE9D8];
    v43 = v95;
    v44 = v98;
    v88 = v16;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v48 = *(_QWORD *)(v42 + 16);
        if (!v48)
          goto LABEL_38;
      }
      else
      {
        v42 = specialized _ArrayBuffer._consumeAndCreateNew()(v42);
        v48 = *(_QWORD *)(v42 + 16);
        if (!v48)
LABEL_38:
          __break(1u);
      }
      v49 = v48 - 1;
      v50 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 32);
      v50(v22, v42+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * (v48 - 1), v15);
      *(_QWORD *)(v42 + 16) = v49;
      v100 = v42;
      v50(v26, (unint64_t)v22, v15);
      v50(v44, (unint64_t)v26, v15);
      v50(v43, (unint64_t)v44, v15);
      SharedTagged_9.tagged5.getter();
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v3, 1, v51) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v3, &demangling cache variable for type metadata for Ref<Link>?);
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v92, v43, v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElement);
        if ((swift_dynamicCast() & 1) != 0)
        {
          outlined init with take of FindResult(v101, (uint64_t)&v103);
          v46 = v105;
          v45 = v106;
          __swift_project_boxed_opaque_existential_1(&v103, v105);
          v47 = v89;
          v43 = v95;
          (*(void (**)(uint64_t, uint64_t))(v45 + 72))(v46, v45);
          v16 = v88;
          specialized Array.append<A>(contentsOf:)(v47);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v43, v15);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
        }
        else
        {
          v102 = 0;
          memset(v101, 0, sizeof(v101));
          (*(void (**)(char *, uint64_t))(v16 + 8))(v43, v15);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v101, &demangling cache variable for type metadata for ContainerCanvasElement?);
        }
        v44 = v98;
      }
      else
      {
        lazy protocol witness table accessor for type Paper and conformance Paper(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t)&protocol conformance descriptor for Paper);
        v53 = v93;
        Ref.subscript.getter();
        (*(void (**)(char *, uint64_t))(v52 + 8))(v3, v51);
        v54 = (uint64_t)v53;
        v55 = v96;
        outlined init with take of Link(v54, v96);
        outlined init with copy of Link(v55, v97);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v56 = v99;
        else
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v99 + 16) + 1, 1, v99);
        v58 = *(_QWORD *)(v56 + 16);
        v57 = *(_QWORD *)(v56 + 24);
        if (v58 >= v57 >> 1)
          v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1, v56);
        *(_QWORD *)(v56 + 16) = v58 + 1;
        v59 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
        v99 = v56;
        outlined init with take of Link(v97, v56 + v59 + *(_QWORD *)(v94 + 72) * v58);
        outlined destroy of PKStrokeProperties(v96, (uint64_t (*)(_QWORD))type metadata accessor for Link);
        v43 = v95;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v95, v15);
        v44 = v98;
      }
      v42 = v100;
    }
    while (*(_QWORD *)(v100 + 16));
  }
  else
  {
    v99 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v101[0] = MEMORY[0x1E0DEE9D8];
  v60 = *(_QWORD *)(v99 + 16);
  if (v60)
  {
    v61 = v99 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
    v62 = *(char **)(v94 + 72);
    swift_bridgeObjectRetain_n();
    *(_QWORD *)&v63 = 136315138;
    v97 = v63;
    v96 = MEMORY[0x1E0DEE9B8] + 8;
    v64 = (uint64_t)v90;
    v98 = v62;
    do
    {
      outlined init with copy of Link(v61, v64);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
      CRRegister.wrappedValue.getter();
      v65 = v104;
      if (v104 >> 60 == 15)
      {
        outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Link);
      }
      else
      {
        v66 = (uint64_t)v103;
        v67 = objc_allocWithZone(MEMORY[0x1E0DB0700]);
        outlined copy of Data._Representation(v66, v65);
        isa = Data._bridgeToObjectiveC()().super.isa;
        v103 = 0;
        v69 = objc_msgSend(v67, sel_initWithData_error_, isa, &v103);

        if (v69)
        {
          v70 = v103;
          outlined consume of Data?(v66, v65);
          outlined consume of Data?(v66, v65);
          v71 = outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Link);
          MEMORY[0x1DF0E4398](v71);
          if (*(_QWORD *)((*(_QWORD *)&v101[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v101[0] & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v64 = (uint64_t)v90;
        }
        else
        {
          v72 = v103;
          v73 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          outlined consume of Data?(v66, v65);
          if (one-time initialization token for logger != -1)
            swift_once();
          v74 = type metadata accessor for Logger();
          __swift_project_value_buffer(v74, (uint64_t)logger);
          v75 = v73;
          v76 = v73;
          v77 = Logger.logObject.getter();
          v78 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v77, v78))
          {
            v79 = swift_slowAlloc();
            v80 = (void *)swift_slowAlloc();
            v103 = v80;
            *(_DWORD *)v79 = v97;
            swift_getErrorValue();
            v81 = Error.localizedDescription.getter();
            *(_QWORD *)(v79 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&v103);
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_1DDB0F000, v77, v78, "%s", (uint8_t *)v79, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1DF0E6558](v80, -1, -1);
            v83 = v79;
            v64 = (uint64_t)v90;
            MEMORY[0x1DF0E6558](v83, -1, -1);
            outlined consume of Data?(v66, v65);

          }
          else
          {
            outlined consume of Data?(v66, v65);

          }
          outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Link);
          v62 = v98;
        }
      }
      v61 += (uint64_t)v62;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease();
    v84 = *(_QWORD *)&v101[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    v84 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v84;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size_0(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1DF0E4D70);
}

unint64_t lazy protocol witness table accessor for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>;
  if (!lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D11DC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Paper and conformance Paper(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Paper();
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall LinedPaperView.update(bounds:drawingTransform:shouldClip:)(__C::CGRect bounds, CGAffineTransform *drawingTransform, Swift::Bool shouldClip)
{
  char *v3;
  double height;
  double width;
  double y;
  double x;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;

  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  objc_msgSend(v3, sel_setFrame_);
  v10 = &v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_drawingTransform];
  v11 = *(_OWORD *)&drawingTransform->tx;
  v12 = *(_OWORD *)&drawingTransform->a;
  *((_OWORD *)v10 + 1) = *(_OWORD *)&drawingTransform->c;
  *((_OWORD *)v10 + 2) = v11;
  *(_OWORD *)v10 = v12;
  v13 = OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper;
  v14 = OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer;
  v15 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer];
  if (!*(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper])
  {
    if (v15)
    {
      objc_msgSend(v15, sel_removeFromSuperlayer);
      v19 = *(void **)&v3[v14];
    }
    else
    {
      v19 = 0;
    }
    *(_QWORD *)&v3[v14] = 0;
    goto LABEL_9;
  }
  if (v15)
  {
LABEL_10:
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer], sel_updateLinesFromAttachmentBounds_, x, y, width, height);
    objc_msgSend(v3, sel_setClipsToBounds_, (*(_QWORD *)&v3[v13] != 0) & shouldClip);
    return;
  }
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11D0]), sel_initWithLinedPaperLayerDelegate_, v3);
  v17 = *(void **)&v3[v14];
  *(_QWORD *)&v3[v14] = v16;

  v18 = objc_msgSend(v3, sel_layer);
  if (*(_QWORD *)&v3[v14])
  {
    v19 = v18;
    objc_msgSend(v18, sel_addSublayer_);
LABEL_9:

    goto LABEL_10;
  }
  __break(1u);
}

id LinedPaperView.init(coder:)(void *a1)
{
  char *v1;
  char *v3;
  objc_class *v4;
  id v5;
  objc_super v7;

  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaperLayer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_linedPaper] = 0;
  v3 = &v1[OBJC_IVAR____TtC8PaperKit14LinedPaperView_drawingTransform];
  *(_QWORD *)v3 = 0x3FF0000000000000;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *((_QWORD *)v3 + 3) = 0x3FF0000000000000;
  v4 = (objc_class *)type metadata accessor for LinedPaperView();
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  v7.receiver = v1;
  v7.super_class = v4;
  v5 = objc_msgSendSuper2(&v7, sel_initWithCoder_, a1);

  return v5;
}

id LinedPaperView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinedPaperView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for LinedPaperView()
{
  return objc_opt_self();
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t MiniMenuState.popoverState.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_retain();
}

uint64_t closure #1 in MiniMenuState.popoverState.setter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 24) = a2;
  swift_retain();
  return swift_release();
}

uint64_t MiniMenuState.visible.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t closure #1 in MiniMenuState.visible.setter(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t MiniMenuState.options.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(_QWORD *)(v0 + 40);
}

uint64_t key path getter for MiniMenuState.options : MiniMenuState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_QWORD *)(v3 + 40);
  return result;
}

uint64_t key path setter for MiniMenuState.options : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._fillColor.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(id *, uint64_t, uint64_t);
  id v7;
  id v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  swift_getKeyPath();
  v9[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 56) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v9, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v10;
        v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v8 = *(id *)(v0 + 48);
        v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 88);
        v7 = v8;
        v6(&v8, v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.fillColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char v4;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v3 = *(void **)(v1 + 48);
  v4 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.fillColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v4 = *(void **)(v3 + 48);
  v5 = *(_BYTE *)(v3 + 56);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.fillColor : MiniMenuState(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

}

_QWORD *MiniMenuState._strokeColor.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(id *, uint64_t, uint64_t);
  id v7;
  id v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  swift_getKeyPath();
  v9[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 72) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v9, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v10;
        v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v8 = *(id *)(v0 + 64);
        v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 112);
        v7 = v8;
        v6(&v8, v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.strokeColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char v4;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v3 = *(void **)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 72);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.strokeColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v4 = *(void **)(v3 + 64);
  v5 = *(_BYTE *)(v3 + 72);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.strokeColor : MiniMenuState(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

}

uint64_t MiniMenuState.strokeWidthIsMutable.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 73);
}

uint64_t key path getter for MiniMenuState.strokeWidthIsMutable : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 73);
  return result;
}

uint64_t key path setter for MiniMenuState.strokeWidthIsMutable : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._strokeWidth.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 88) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v5 + 136))(*(_QWORD *)(v0 + 80), 0, v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.strokeWidth.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 88);
}

double key path getter for MiniMenuState.strokeWidth : MiniMenuState@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = *(double *)(v3 + 80);
  v5 = *(_BYTE *)(v3 + 88);
  *(double *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.strokeWidth : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuState.strokeIsRequired.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 89);
}

uint64_t key path getter for MiniMenuState.strokeIsRequired : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 89);
  return result;
}

uint64_t key path setter for MiniMenuState.strokeIsRequired : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._fontName.didset()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  swift_getKeyPath();
  v10[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (_QWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 112) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v3 = result;
      v4 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v4)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v10, *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v5 = v11;
        v6 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v8 = *(_QWORD *)(v0 + 96);
        v7 = *(_QWORD *)(v1 + 104);
        v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 168);
        swift_bridgeObjectRetain();
        v9(v8, v7, v5, v6);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._fontName.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._fontName.modify;
}

uint64_t MiniMenuState._fontName.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._fontName.didset);
}

uint64_t MiniMenuState.fontName.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for MiniMenuState.fontName : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(_BYTE *)(v3 + 112);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for MiniMenuState.fontName : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *closure #1 in MiniMenuState.fontName.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 112) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return MiniMenuState._fontName.didset();
}

void (*MiniMenuState.fontName.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *v4 = v2;
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v4[7] = MiniMenuState._fontName.modify((uint64_t)v4);
  return MiniMenuState.fontName.modify;
}

void MiniMenuState.fontName.modify(_QWORD *a1)
{
  MiniMenuState.fontName.modify(a1);
}

{
  _QWORD *v1;

  v1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  *v1 = v1[4];
  swift_getKeyPath();
  ObservationRegistrar.didSet<A, B>(_:keyPath:)();
  swift_release();
  free(v1);
}

_QWORD *MiniMenuState._fontSize.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (_QWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 192))(*(_QWORD *)(v0 + 120), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._fontSize.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._fontSize.modify;
}

uint64_t MiniMenuState._fontSize.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._fontSize.didset);
}

uint64_t MiniMenuState.fontSize.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  return *(_QWORD *)(v0 + 120);
}

uint64_t key path getter for MiniMenuState.fontSize : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 128);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 120);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.fontSize : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void (*MiniMenuState.fontSize.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *v4 = v2;
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v4[7] = MiniMenuState._fontSize.modify((uint64_t)v4);
  return MiniMenuState.fontSize.modify;
}

void MiniMenuState.fontSize.modify(_QWORD *a1)
{
  MiniMenuState.fontName.modify(a1);
}

_QWORD *MiniMenuState._bold.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (_QWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 130) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 240))(*(unsigned __int8 *)(v0 + 129), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._bold.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._bold.modify;
}

uint64_t MiniMenuState._bold.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._bold.didset);
}

uint64_t MiniMenuState.bold.getter()
{
  uint64_t v0;
  int v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(_BYTE *)(v0 + 130))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + 129);
}

uint64_t key path getter for MiniMenuState.bold : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 130);
  *a2 = *(_BYTE *)(v3 + 129);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.bold : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void (*MiniMenuState.bold.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *v4 = v2;
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v4[7] = MiniMenuState._bold.modify((uint64_t)v4);
  return MiniMenuState.bold.modify;
}

void MiniMenuState.bold.modify(_QWORD *a1)
{
  MiniMenuState.fontName.modify(a1);
}

_QWORD *MiniMenuState._italic.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (_QWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 132) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 264))(*(unsigned __int8 *)(v0 + 131), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t (*MiniMenuState._italic.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return MiniMenuState._italic.modify;
}

uint64_t MiniMenuState._italic.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))MiniMenuState._italic.didset);
}

uint64_t MiniMenuState._fontName.modify(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return a3(result);
  return result;
}

uint64_t MiniMenuState.italic.getter()
{
  uint64_t v0;
  int v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  if (*(_BYTE *)(v0 + 132))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + 131);
}

uint64_t key path getter for MiniMenuState.italic : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = swift_beginAccess();
  v5 = *(_BYTE *)(v3 + 132);
  *a2 = *(_BYTE *)(v3 + 131);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.italic : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void (*MiniMenuState.italic.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = v1;
  v4 = malloc(0x40uLL);
  *a1 = v4;
  v4[4] = v2;
  swift_getKeyPath();
  v4[5] = OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  *v4 = v2;
  v4[6] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *v4 = v2;
  swift_getKeyPath();
  ObservationRegistrar.willSet<A, B>(_:keyPath:)();
  swift_release();
  v4[7] = MiniMenuState._italic.modify((uint64_t)v4);
  return MiniMenuState.italic.modify;
}

void MiniMenuState.italic.modify(_QWORD *a1)
{
  MiniMenuState.fontName.modify(a1);
}

_QWORD *MiniMenuState._underline.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 134) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 288))(*(unsigned __int8 *)(v0 + 133), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.underline.getter()
{
  uint64_t v0;
  int v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(_BYTE *)(v0 + 134))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + 133);
}

uint64_t key path getter for MiniMenuState.underline : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  v5 = *(_BYTE *)(v3 + 134);
  *a2 = *(_BYTE *)(v3 + 133);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.underline : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._strikethrough.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 136) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 312))(*(unsigned __int8 *)(v0 + 135), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.strikethrough.getter()
{
  uint64_t v0;
  int v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  if (*(_BYTE *)(v0 + 136))
    v1 = 256;
  else
    v1 = 0;
  return v1 | *(unsigned __int8 *)(v0 + 135);
}

uint64_t key path getter for MiniMenuState.strikethrough : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  v5 = *(_BYTE *)(v3 + 136);
  *a2 = *(_BYTE *)(v3 + 135);
  a2[1] = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.strikethrough : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._textAlignment.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 152) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 216))(*(_QWORD *)(v0 + 144), v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.textAlignment.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(_QWORD *)(v0 + 144);
}

uint64_t key path getter for MiniMenuState.textAlignment : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  v5 = *(_BYTE *)(v3 + 152);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 144);
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.textAlignment : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._fontColor.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(id *, uint64_t, uint64_t);
  id v7;
  id v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  swift_getKeyPath();
  v9[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (_QWORD *)swift_beginAccess();
  if ((*(_BYTE *)(v0 + 168) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v9, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v10;
        v5 = v11;
        __swift_project_boxed_opaque_existential_1(v9, v10);
        swift_getKeyPath();
        v8 = (id)v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v8 = *(id *)(v0 + 160);
        v6 = *(void (**)(id *, uint64_t, uint64_t))(v5 + 336);
        v7 = v8;
        v6(&v8, v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

id MiniMenuState.fontColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  char v4;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v3 = *(void **)(v1 + 160);
  v4 = *(_BYTE *)(v1 + 168);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return v3;
}

id key path getter for MiniMenuState.fontColor : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_beginAccess();
  v4 = *(void **)(v3 + 160);
  v5 = *(_BYTE *)(v3 + 168);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v4;
}

void key path setter for MiniMenuState.fontColor : MiniMenuState(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

}

_QWORD *closure #1 in MiniMenuState.fontColor.setter(uint64_t a1, void *a2, char a3)
{
  void *v6;
  id v7;

  swift_beginAccess();
  v6 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = a2;
  *(_BYTE *)(a1 + 168) = a3;
  v7 = a2;

  return MiniMenuState._fontColor.didset();
}

uint64_t MiniMenuState.grapableExpressionsState.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_retain();
}

uint64_t key path getter for MiniMenuState.grapableExpressionsState : MiniMenuState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 176);
  return swift_retain();
}

uint64_t key path setter for MiniMenuState.grapableExpressionsState : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t MiniMenuState.boldAllowed.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 184);
}

uint64_t key path getter for MiniMenuState.boldAllowed : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 184);
  return result;
}

uint64_t key path setter for MiniMenuState.boldAllowed : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuState.italicAllowed.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 185);
}

uint64_t key path getter for MiniMenuState.italicAllowed : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 185);
  return result;
}

uint64_t key path setter for MiniMenuState.italicAllowed : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuState.hasMultipleFontSizes.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 186);
}

uint64_t key path getter for MiniMenuState.hasMultipleFontSizes : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 186);
  return result;
}

uint64_t key path setter for MiniMenuState.hasMultipleFontSizes : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._opacity.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  swift_getKeyPath();
  v6[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 200) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v6, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v7;
        v5 = v8;
        __swift_project_boxed_opaque_existential_1(v6, v7);
        swift_getKeyPath();
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        (*(void (**)(uint64_t, uint64_t, double))(v5 + 408))(v4, v5, *(double *)(v0 + 192));

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.opacity.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 200);
}

double key path getter for MiniMenuState.opacity : MiniMenuState@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  char v5;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = *(double *)(v3 + 192);
  v5 = *(_BYTE *)(v3 + 200);
  *(double *)a2 = result;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for MiniMenuState.opacity : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuState.hasMultipleOpacities.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return *(unsigned __int8 *)(v0 + 201);
}

uint64_t key path getter for MiniMenuState.hasMultipleOpacities : MiniMenuState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 201);
  return result;
}

uint64_t key path setter for MiniMenuState.hasMultipleOpacities : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

_QWORD *MiniMenuState._lineEnds.didset()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  swift_getKeyPath();
  v13[0] = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = (_QWORD *)swift_release();
  if ((*(_BYTE *)(v0 + 233) & 1) == 0)
  {
    result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + 16);
    if (result)
    {
      v2 = result;
      v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v3)
      {
        (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *result)
                                                                                     + 0x430))(v13, *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
        v4 = v14;
        v5 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        swift_getKeyPath();
        v11 = v0;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v6 = *(_BYTE *)(v0 + 216);
        v7 = *(_QWORD *)(v0 + 224);
        v8 = *(_BYTE *)(v0 + 232);
        v11 = *(_QWORD *)(v0 + 208);
        v12 = v6;
        v9 = v7;
        v10 = v8;
        (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v5 + 384))(&v11, &v9, v4, v5);

        return (_QWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t MiniMenuState.lineEnds.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  v4 = *(_BYTE *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 224);
  v6 = *(_BYTE *)(v1 + 232);
  v7 = *(_BYTE *)(v1 + 233);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 208);
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 25) = v7;
  return result;
}

uint64_t key path getter for MiniMenuState.lineEnds : MiniMenuState@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  v5 = *(_BYTE *)(v3 + 216);
  v6 = *(_QWORD *)(v3 + 224);
  v7 = *(_BYTE *)(v3 + 232);
  v8 = *(_BYTE *)(v3 + 233);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 208);
  *(_BYTE *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 25) = v8;
  return result;
}

uint64_t key path setter for MiniMenuState.lineEnds : MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t MiniMenuState.feedbackAction.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v1 = *(_QWORD *)(v0 + 240);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in MiniMenuState.feedbackAction.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = a3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

void MiniMenuState.init(visible:options:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  CGColorSpace *v3;
  CGColorSpace *v4;
  CGColorRef v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13[4];

  v1 = v0;
  swift_unknownObjectWeakInit();
  type metadata accessor for MiniPopoverState();
  v2 = (_OWORD *)swift_allocObject();
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  *(_QWORD *)(v0 + 24) = v2;
  *(_BYTE *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 56) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_WORD *)(v0 + 72) = 257;
  *(_QWORD *)(v0 + 80) = 0x3FF0000000000000;
  *(_WORD *)(v0 + 88) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0xE000000000000000;
  *(_BYTE *)(v0 + 112) = 1;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0x1000100010001;
  *(_BYTE *)(v0 + 136) = 1;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 152) = 1;
  memset(v13, 0, 24);
  v13[3] = 1.0;
  v3 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v3)
  {
    v4 = v3;
    v5 = CGColorCreate(v3, v13);

    if (v5)
    {
      *(_QWORD *)(v1 + 160) = v5;
      *(_BYTE *)(v1 + 168) = 1;
      type metadata accessor for GraphableExpressionsState(0);
      v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(_QWORD *)(v6 + 24) = MEMORY[0x1E0DEE9D8];
      ObservationRegistrar.init()();
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v8);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      GraphableExpressionsState.update()();
      *(_QWORD *)(v1 + 176) = v6;
      *(_WORD *)(v1 + 184) = 257;
      *(_BYTE *)(v1 + 186) = 1;
      *(_QWORD *)(v1 + 192) = 0x3FF0000000000000;
      *(_WORD *)(v1 + 200) = 1;
      *(_QWORD *)(v1 + 208) = 0;
      *(_BYTE *)(v1 + 216) = 0;
      *(_QWORD *)(v1 + 224) = 0;
      *(_WORD *)(v1 + 232) = 256;
      *(_QWORD *)(v1 + 240) = 0;
      *(_QWORD *)(v1 + 248) = 0;
      ObservationRegistrar.init()();
      v9 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v9, v10);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      v11 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v11, v12);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void MiniMenuState.update(from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  void *v111;
  uint64_t (*v112)(uint64_t);
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  id v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  void *v126;
  void *v127;
  unsigned int v128;
  uint64_t v129;
  void *v130;
  void *v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(uint64_t, uint64_t);
  void *v154;
  uint64_t (*v155)(uint64_t);
  uint64_t v156;
  uint64_t v157;
  char v158;
  ValueMetadata *v159;
  unint64_t v160;
  _QWORD v161[3];
  uint64_t v162;
  uint64_t v163;

  v6 = v5;
  swift_getKeyPath();
  v151 = v5;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  v8 = *(_QWORD *)((char *)a5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v8)
    goto LABEL_90;
  v150 = a5;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *a5) + 0x430))(v161, *(_QWORD *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection), *(_QWORD *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8), *(_QWORD *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16), *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24));
  v9 = v162;
  v10 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10) & 1) != 0)
  {
    v11 = v162;
    v12 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 104))(&v151, v11, v12);
    v13 = v151;
    swift_getKeyPath();
    v157 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v14 = *(void **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = v13;
    *(_BYTE *)(v5 + 72) = 1;

    MiniMenuState._strokeColor.didset();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v15 = v162;
    v16 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 128))(v15, v16);
    if ((v18 & 1) == 0)
    {
      v19 = v17;
      swift_getKeyPath();
      v151 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v151 = v5;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      *(_QWORD *)(v5 + 80) = v19;
      *(_BYTE *)(v5 + 88) = 1;
      MiniMenuState._strokeWidth.didset();
      v151 = v5;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
    v20 = v162;
    v21 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v21 + 128))(v20, v21);
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v23);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    v24 = v162;
    v25 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v25 + 152))(v24, v25);
    v26 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v26, v27);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v28 = *(_QWORD *)(v5 + 40);
    if ((v28 & 2) == 0)
      *(_QWORD *)(v5 + 40) = v28 | 2;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v29 = v150;
  v30 = v162;
  v31 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31) & 1) != 0)
  {
    v32 = v162;
    v33 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v33 + 80))(&v151, v32, v33);
    v34 = v151;
    swift_getKeyPath();
    v157 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v35 = *(void **)(v5 + 48);
    *(_QWORD *)(v5 + 48) = v34;
    *(_BYTE *)(v5 + 56) = 1;

    MiniMenuState._fillColor.didset();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v36 = *(_QWORD *)(v5 + 40);
    if ((v36 & 1) == 0)
      *(_QWORD *)(v5 + 40) = v36 | 1;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v37 = v162;
  v38 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v38 + 24))(v37, v38) & 1) != 0)
  {
    v39 = v162;
    v40 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 160))(v39, v40);
    v43 = v42;
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v5 + 96) = v41;
    *(_QWORD *)(v5 + 104) = v43;
    *(_BYTE *)(v5 + 112) = 1;
    swift_bridgeObjectRelease();
    MiniMenuState._fontName.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v44 = v162;
    v45 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 184))(v44, v45);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v5 + 120) = v46;
    *(_BYTE *)(v5 + 128) = 1;
    MiniMenuState._fontSize.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v47 = v162;
    v48 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 208))(v47, v48);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(_QWORD *)(v5 + 144) = v49;
    *(_BYTE *)(v5 + 152) = 1;
    MiniMenuState._textAlignment.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v50 = v162;
    v51 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    LOBYTE(v50) = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 232))(v50, v51);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(_BYTE *)(v5 + 129) = v50 & 1;
    *(_BYTE *)(v5 + 130) = 1;
    MiniMenuState._bold.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v52 = v162;
    v53 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    LOBYTE(v52) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 256))(v52, v53);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    *(_BYTE *)(v5 + 131) = v52 & 1;
    *(_BYTE *)(v5 + 132) = 1;
    MiniMenuState._italic.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v54 = v162;
    v55 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    LOBYTE(v54) = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 280))(v54, v55);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(_BYTE *)(v5 + 133) = v54 & 1;
    *(_BYTE *)(v5 + 134) = 1;
    MiniMenuState._underline.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v56 = v162;
    v57 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    LOBYTE(v56) = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 304))(v56, v57);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(_BYTE *)(v5 + 135) = v56 & 1;
    *(_BYTE *)(v5 + 136) = 1;
    MiniMenuState._strikethrough.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v58 = v162;
    v59 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v59 + 328))(&v151, v58, v59);
    v60 = v151;
    swift_getKeyPath();
    v157 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    swift_beginAccess();
    v61 = *(void **)(v5 + 160);
    *(_QWORD *)(v5 + 160) = v60;
    *(_BYTE *)(v5 + 168) = 1;

    MiniMenuState._fontColor.didset();
    v157 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v62 = v162;
    v63 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v63 + 352))(v62, v63);
    v64 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v64, v65);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    v66 = v162;
    v67 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v67 + 360))(v66, v67);
    v68 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v68, v69);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    v70 = v162;
    v71 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v71 + 368))(v70, v71);
    v72 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v72, v73);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v74 = *(_QWORD *)(v5 + 40);
    if ((v74 & 4) == 0)
      *(_QWORD *)(v5 + 40) = v74 | 4;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v29 = v150;
  }
  v75 = v162;
  v76 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v76 + 32))(v75, v76) & 1) != 0)
  {
    v77 = v162;
    v78 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v78 + 376))(&v151, &v157, v77, v78);
    v79 = v151;
    v80 = v152;
    v81 = v157;
    v82 = v158;
    swift_getKeyPath();
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(_QWORD *)(v5 + 208) = v79;
    *(_BYTE *)(v5 + 216) = v80;
    *(_QWORD *)(v5 + 224) = v81;
    *(_BYTE *)(v5 + 232) = v82;
    *(_BYTE *)(v5 + 233) = 1;
    MiniMenuState._lineEnds.didset();
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v83 = *(_QWORD *)(v5 + 40);
    if ((v83 & 8) == 0)
      *(_QWORD *)(v5 + 40) = v83 | 8;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v29 = v150;
  }
  v84 = v162;
  v85 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v85 + 40))(v84, v85) & 1) != 0)
  {
    v86 = v162;
    v87 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    v88 = (*(double (**)(uint64_t, uint64_t))(v87 + 400))(v86, v87);
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    *(double *)(v5 + 192) = v88;
    *(_BYTE *)(v5 + 200) = 1;
    MiniMenuState._opacity.didset();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    v89 = v162;
    v90 = v163;
    __swift_project_boxed_opaque_existential_1(v161, v162);
    (*(void (**)(uint64_t, uint64_t))(v90 + 424))(v89, v90);
    v91 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v91, v92);
    v151 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v93 = *(_QWORD *)(v5 + 40);
    if ((v93 & 0x10) == 0)
      *(_QWORD *)(v5 + 40) = v93 | 0x10;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v94 = v162;
  v95 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v95 + 48))(v94, v95) & 1) != 0)
  {
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v96 = *(_QWORD *)(v5 + 40);
    if ((v96 & 0x100) == 0)
      *(_QWORD *)(v5 + 40) = v96 | 0x100;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v97 = v162;
  v98 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 432))(v97, v98);
  if ((v99 & 1) != 0)
  {
    swift_getKeyPath();
    v151 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v100 = *(_QWORD *)(v5 + 40);
    if ((v100 & 0x4000) == 0)
      *(_QWORD *)(v5 + 40) = v100 | 0x4000;
    v151 = v5;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    v99 = swift_release();
  }
  if (*(_QWORD *)(a2 + 16) && !*(_QWORD *)(a1 + 16))
  {
    v125 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x320);
    v126 = (void *)v125(v99);
    if (v126)
    {
      v127 = v126;
      v128 = objc_msgSend(v126, sel_insertSpaceEnabled);

      if (v128)
      {
        swift_getKeyPath();
        v151 = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        v129 = *(_QWORD *)(v6 + 40);
        if ((v129 & 0x400) == 0)
          *(_QWORD *)(v6 + 40) = v129 | 0x400;
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        v126 = (void *)swift_release();
      }
    }
    v130 = (void *)v125((uint64_t)v126);
    if (v130)
    {
      v131 = v130;
      v132 = objc_msgSend(v130, sel_selectionSupportsCopyAsText);

      if (v132)
      {
        swift_getKeyPath();
        v151 = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        v133 = *(_QWORD *)(v6 + 40);
        if ((v133 & 0x200) == 0)
          *(_QWORD *)(v6 + 40) = v133 | 0x200;
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        swift_release();
        swift_getKeyPath();
        v151 = v6;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.willSet<A, B>(_:keyPath:)();
        swift_release();
        v134 = *(_QWORD *)(v6 + 40);
        if ((v134 & 0x1000) == 0)
          *(_QWORD *)(v6 + 40) = v134 | 0x1000;
        v151 = v6;
        swift_getKeyPath();
        ObservationRegistrar.didSet<A, B>(_:keyPath:)();
        v135 = swift_release();
        v136 = (void *)v125(v135);
        if (v136)
        {
          v137 = v136;
          v138 = objc_msgSend(v136, sel_selectionSupportsTranslate);

          if (v138)
          {
            swift_getKeyPath();
            v151 = v6;
            ObservationRegistrar.access<A, B>(_:keyPath:)();
            swift_release();
            v151 = v6;
            swift_getKeyPath();
            ObservationRegistrar.willSet<A, B>(_:keyPath:)();
            swift_release();
            v139 = *(_QWORD *)(v6 + 40);
            if ((v139 & 0x800) == 0)
              *(_QWORD *)(v6 + 40) = v139 | 0x800;
            v151 = v6;
            swift_getKeyPath();
            ObservationRegistrar.didSet<A, B>(_:keyPath:)();
            v136 = (void *)swift_release();
          }
        }
        v140 = v125((uint64_t)v136);
        if (v140)
        {
          v141 = (void *)v140;
          v142 = swift_allocObject();
          swift_weakInit();
          v155 = partial apply for closure #1 in MiniMenuState.update(from:in:);
          v156 = v142;
          v151 = MEMORY[0x1E0C809B0];
          v152 = 1107296256;
          v153 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
          v154 = &block_descriptor_40;
          v143 = _Block_copy(&v151);
          swift_release();
          objc_msgSend(v141, sel_selectionSupportsRefinement_, v143);
          _Block_release(v143);

        }
      }
    }
  }
  v101 = v162;
  v102 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v102 + 56))(v101, v102) & 1) != 0)
  {
    swift_getKeyPath();
    v151 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v103 = *(_QWORD *)(v6 + 40);
    if ((v103 & 0x40) == 0)
      *(_QWORD *)(v6 + 40) = v103 | 0x40;
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
    swift_getKeyPath();
    v151 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v104 = *(_QWORD *)(v6 + 40);
    if ((v104 & 0x20000) == 0)
      *(_QWORD *)(v6 + 40) = v104 | 0x20000;
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v105 = v162;
  v106 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v106 + 64))(v105, v106) & 1) != 0)
  {
    swift_getKeyPath();
    v151 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.willSet<A, B>(_:keyPath:)();
    swift_release();
    v107 = *(_QWORD *)(v6 + 40);
    if ((v107 & 0x20) == 0)
      *(_QWORD *)(v6 + 40) = v107 | 0x20;
    v151 = v6;
    swift_getKeyPath();
    ObservationRegistrar.didSet<A, B>(_:keyPath:)();
    swift_release();
  }
  v108 = v162;
  v109 = v163;
  __swift_project_boxed_opaque_existential_1(v161, v162);
  v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 72))(v108, v109);
  outlined init with copy of FindResult((uint64_t)v161, (uint64_t)&v151);
  if ((v110 & 1) != 0)
  {
    v111 = v154;
    v112 = v155;
    __swift_project_boxed_opaque_existential_1(&v151, (uint64_t)v154);
    v113 = (*((uint64_t (**)(void *, uint64_t (*)(uint64_t)))v112 + 7))(v111, v112);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
    if ((v113 & 1) == 0)
    {
      swift_getKeyPath();
      v157 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      v114 = *(_QWORD *)(v6 + 40);
      if ((v114 & 0x10000) == 0)
        *(_QWORD *)(v6 + 40) = v114 | 0x10000;
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
  }
  v159 = &type metadata for PencilAndPaperFeatureFlags;
  v160 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v157) = 6;
  v115 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v157);
  if ((v115 & 1) != 0)
  {
    swift_getKeyPath();
    v157 = v6;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if ((*(_BYTE *)(v6 + 40) & 4) != 0
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x4A8))(a1, a2, a3, a4 & 1) & 1) != 0)
    {
      swift_getKeyPath();
      v157 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      v116 = *(_QWORD *)(v6 + 40);
      if ((v116 & 0x80) == 0)
        *(_QWORD *)(v6 + 40) = v116 | 0x80;
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
    }
  }
  v117 = v29;
  v118 = swift_bridgeObjectRetain();
  v119 = specialized Sequence.compactMap<A>(_:)(v118, v117);
  swift_bridgeObjectRelease();

  if (v119 >> 62)
  {
    swift_bridgeObjectRetain();
    v144 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v144 == 1)
    {
      swift_bridgeObjectRetain();
      v145 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v145)
        goto LABEL_58;
    }
LABEL_86:
    swift_bridgeObjectRelease();
LABEL_87:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    return;
  }
  if (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    goto LABEL_86;
LABEL_58:
  if ((v119 & 0xC000000000000001) != 0)
  {
    v120 = (id)MEMORY[0x1DF0E4D64](0, v119);
LABEL_61:
    v121 = v120;
    swift_bridgeObjectRelease();
    type metadata accessor for GraphCanvasElementView(0);
    if (swift_dynamicCastClass())
    {
      swift_getKeyPath();
      v157 = v6;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      v122 = *(_QWORD *)(v6 + 40);
      if ((v122 & 0x8000) == 0)
        *(_QWORD *)(v6 + 40) = v122 | 0x8000;
      v157 = v6;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      GraphCanvasElementView.cachedGraphableExpressionsState.getter();
      v123 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v123, v124);
      v157 = v6;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();

      swift_release();
      swift_release();
    }
    else
    {

    }
    goto LABEL_87;
  }
  if (*(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v120 = *(id *)(v119 + 32);
    goto LABEL_61;
  }
  __break(1u);
LABEL_90:
  __break(1u);
}

uint64_t closure #1 in MiniMenuState.update(from:in:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if ((result & 1) != 0)
  {
    swift_beginAccess();
    result = swift_weakLoadStrong();
    if (result)
    {
      v1 = result;
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      swift_getKeyPath();
      ObservationRegistrar.willSet<A, B>(_:keyPath:)();
      swift_release();
      v2 = *(_QWORD *)(v1 + 40);
      if ((v2 & 0x2000) == 0)
        *(_QWORD *)(v1 + 40) = v2 | 0x2000;
      swift_getKeyPath();
      ObservationRegistrar.didSet<A, B>(_:keyPath:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

id *MiniMenuState.deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectWeakDestroy();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit13MiniMenuState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t MiniMenuState.__deallocating_deinit()
{
  MiniMenuState.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for MiniMenuState()
{
  return type metadata accessor for MiniMenuState();
}

uint64_t type metadata accessor for MiniMenuState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MiniMenuState;
  if (!type metadata singleton initialization cache for MiniMenuState)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MiniMenuState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

ValueMetadata *type metadata accessor for MiniMenuOptions()
{
  return &type metadata for MiniMenuOptions;
}

unint64_t lazy protocol witness table accessor for type MiniMenuOptions and conformance MiniMenuOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniMenuOptions, &type metadata for MiniMenuOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniMenuOptions, &type metadata for MiniMenuOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniMenuOptions, &type metadata for MiniMenuOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions;
  if (!lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniMenuOptions, &type metadata for MiniMenuOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuOptions and conformance MiniMenuOptions);
  }
  return result;
}

uint64_t (*protocol witness for TextFormattingState.fontName.modify in conformance MiniMenuState(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.fontName.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*protocol witness for TextFormattingState.fontSize.modify in conformance MiniMenuState(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.fontSize.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.textAlignment.setter in conformance MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t protocol witness for TextFormattingState.bold.setter in conformance MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t (*protocol witness for TextFormattingState.bold.modify in conformance MiniMenuState(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.bold.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.italic.setter in conformance MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t (*protocol witness for TextFormattingState.italic.modify in conformance MiniMenuState(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = MiniMenuState.italic.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for TextFormattingState.underline.setter in conformance MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t protocol witness for TextFormattingState.strikethrough.setter in conformance MiniMenuState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

void protocol witness for TextFormattingState.fontColor.setter in conformance MiniMenuState(void **a1)
{
  void *v1;

  v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance MiniMenuState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for MiniMenuState();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for MiniMenuState(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void partial apply for closure #1 in MiniMenuState.italicAllowed.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 185) = *(_BYTE *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.boldAllowed.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 184) = *(_BYTE *)(v0 + 24);
}

_QWORD *partial apply for closure #1 in MiniMenuState.fontColor.setter()
{
  uint64_t v0;

  return closure #1 in MiniMenuState.fontColor.setter(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

_QWORD *partial apply for closure #1 in MiniMenuState.strikethrough.setter()
{
  return partial apply for closure #1 in MiniMenuState.strikethrough.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 25);
  *(_BYTE *)(v1 + 135) = *(_BYTE *)(v0 + 24);
  *(_BYTE *)(v1 + 136) = v2;
  return MiniMenuState._strikethrough.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.underline.setter()
{
  return partial apply for closure #1 in MiniMenuState.underline.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 25);
  *(_BYTE *)(v1 + 133) = *(_BYTE *)(v0 + 24);
  *(_BYTE *)(v1 + 134) = v2;
  return MiniMenuState._underline.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.italic.setter()
{
  return partial apply for closure #1 in MiniMenuState.italic.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 25);
  swift_beginAccess();
  *(_BYTE *)(v1 + 131) = v2;
  *(_BYTE *)(v1 + 132) = v3;
  return MiniMenuState._italic.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.bold.setter()
{
  return partial apply for closure #1 in MiniMenuState.bold.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 25);
  swift_beginAccess();
  *(_BYTE *)(v1 + 129) = v2;
  *(_BYTE *)(v1 + 130) = v3;
  return MiniMenuState._bold.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.textAlignment.setter()
{
  return partial apply for closure #1 in MiniMenuState.textAlignment.setter();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 152) = v2;
  return MiniMenuState._textAlignment.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.fontSize.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = v2;
  *(_BYTE *)(v1 + 128) = v3;
  return MiniMenuState._fontSize.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.fontName.setter()
{
  uint64_t v0;

  return closure #1 in MiniMenuState.fontName.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

void partial apply for closure #1 in MiniMenuState.options.setter()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 40) = *(_QWORD *)(v0 + 24);
}

uint64_t partial apply for closure #1 in MiniMenuState.grapableExpressionsState.setter()
{
  return partial apply for closure #1 in MiniMenuState.grapableExpressionsState.setter();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 176) = *(_QWORD *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t sub_1DDD4468C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MiniMenuState.update(from:in:)(uint64_t result)
{
  return closure #1 in MiniMenuState.update(from:in:)(result);
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

void partial apply for closure #1 in MiniMenuState.hasMultipleOpacities.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 201) = *(_BYTE *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.hasMultipleFontSizes.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 186) = *(_BYTE *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.strokeWidthIsMutable.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 73) = *(_BYTE *)(v0 + 24);
}

void partial apply for closure #1 in MiniMenuState.strokeIsRequired.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 89) = *(_BYTE *)(v0 + 24);
}

_QWORD *partial apply for closure #1 in MiniMenuState.strokeWidth.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 88) = v2;
  return MiniMenuState._strokeWidth.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.strokeColor.setter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  v4 = *(void **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v1;
  *(_BYTE *)(v2 + 72) = v3;
  v5 = v1;

  return MiniMenuState._strokeColor.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.fillColor.setter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char v3;
  void *v4;
  id v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  v4 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = v1;
  *(_BYTE *)(v2 + 56) = v3;
  v5 = v1;

  return MiniMenuState._fillColor.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.lineEnds.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_BYTE *)(v0 + 48);
  v5 = *(_BYTE *)(v0 + 49);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 216) = v2;
  *(_QWORD *)(v1 + 224) = v3;
  *(_BYTE *)(v1 + 232) = v4;
  *(_BYTE *)(v1 + 233) = v5;
  return MiniMenuState._lineEnds.didset();
}

_QWORD *partial apply for closure #1 in MiniMenuState.opacity.setter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 32);
  *(_QWORD *)(v1 + 192) = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 200) = v2;
  return MiniMenuState._opacity.didset();
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.view.setter()
{
  return closure #1 in GraphableExpressionsState.view.setter();
}

void partial apply for closure #1 in MiniMenuState.visible.setter()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32) = *(_BYTE *)(v0 + 24);
}

void closure #1 in MiniMenuState.boldAllowed.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.boldAllowed.setter();
}

void closure #1 in MiniMenuState.italicAllowed.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.italicAllowed.setter();
}

void closure #1 in MiniMenuState.strokeIsRequired.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.strokeIsRequired.setter();
}

void closure #1 in MiniMenuState.strokeWidthIsMutable.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.strokeWidthIsMutable.setter();
}

void closure #1 in MiniMenuState.hasMultipleFontSizes.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.hasMultipleFontSizes.setter();
}

void closure #1 in MiniMenuState.hasMultipleOpacities.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.hasMultipleOpacities.setter();
}

_QWORD *closure #1 in MiniMenuState.fontColor.setterpartial apply()
{
  return partial apply for closure #1 in MiniMenuState.fontColor.setter();
}

void closure #1 in MiniMenuState.options.setterpartial apply()
{
  partial apply for closure #1 in MiniMenuState.options.setter();
}

id LineEndControl.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  void *v4;
  void *v5;
  objc_super *v6;
  void *v8;
  objc_super v9;
  void *v10;
  objc_super v11;
  objc_super v12;
  objc_super v13;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_noArrowButton);
  v3 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v13.receiver = v2;
  v13.super_class = v3;
  objc_msgSendSuper2(&v13, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_oneArrowButton);
  v12.receiver = v4;
  v12.super_class = v3;
  objc_msgSendSuper2(&v12, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14LineEndControl_twoArrowButton);
  v11.receiver = v5;
  v11.super_class = v3;
  objc_msgSendSuper2(&v11, sel_setSelected_, 0);
  AttributeStylingButton.isSelected.didset();
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 24) & 1) != 0
    || *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 16))
  {
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 8) & 1 | (*(_BYTE *)(v1
                                                                                                 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds) != 0))
    {
      v10 = v5;
      v6 = (objc_super *)&v10;
      goto LABEL_8;
    }
LABEL_7:
    v9.receiver = v4;
    v6 = &v9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds + 8) & 1 | (*(_BYTE *)(v1
                                                                                               + OBJC_IVAR____TtC8PaperKit14LineEndControl_lineEnds) != 0))
    goto LABEL_7;
  v8 = v2;
  v6 = (objc_super *)&v8;
LABEL_8:
  v6->super_class = v3;
  -[objc_super setSelected:](v6, sel_setSelected_, 1, v8);
  return AttributeStylingButton.isSelected.didset();
}

Swift::Void __swiftcall LineEndControl.layoutSubviews()()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  double Width;
  double v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_useCapsuleStyle] == 1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2)
      Width = CGRectGetWidth(*(CGRect *)&v3);
    else
      Width = CGRectGetHeight(*(CGRect *)&v3);
    v8 = Width * 0.5;
  }
  else
  {
    v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit14LineEndControl_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);

}

uint64_t type metadata accessor for LineEndControl()
{
  return objc_opt_self();
}

uint64_t PageId.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  void *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  Swift::String v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v1 = v0;
  v2 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v46 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v46 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v46 - v19;
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v21 = (void *)0xE300000000000000;
  v52 = 3826793;
  v53 = 0xE300000000000000;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0, (uint64_t)v20, &demangling cache variable for type metadata for PDFPageID?);
  v22 = type metadata accessor for PDFPageID();
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  v24 = v23(v20, 1, v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for PDFPageID?);
  v25 = 7104878;
  if (v24 != 1)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v1, (uint64_t)v16, &demangling cache variable for type metadata for PDFPageID?);
    result = v23((char *)v16, 1, v22);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      goto LABEL_10;
    }
    v50 = 0;
    v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v50 = 979857531;
    v51 = 0xE400000000000000;
    v49 = *v16;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x3A7465737361202CLL;
    v28._object = (void *)0xE800000000000000;
    String.append(_:)(v28);
    v29 = CRAsset.digest.getter();
    v31 = v30;
    v32 = Data.base64EncodedString(options:)(0);
    outlined consume of Data._Representation(v29, v31);
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 125;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    v25 = v50;
    v21 = (void *)v51;
    outlined destroy of PKStrokeProperties((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  }
  v34._countAndFlagsBits = v25;
  v34._object = v21;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 0x6150726570617020;
  v35._object = (void *)0xEB000000003A6567;
  String.append(_:)(v35);
  v36 = v1 + *(int *)(type metadata accessor for PageId(0) + 20);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v36, (uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v12, 1, v37);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  if (v40 == 1)
  {
    v41 = (void *)0xE300000000000000;
    v42 = 7104878;
LABEL_8:
    v45._countAndFlagsBits = v42;
    v45._object = v41;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    return v52;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v36, (uint64_t)v8, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  result = v39(v8, 1, v37);
  if ((_DWORD)result != 1)
  {
    v43 = v46;
    MEMORY[0x1DF0E3078](v37);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v37);
    v42 = CRKeyPath.description.getter();
    v41 = v44;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v48);
    goto LABEL_8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t (*PaperKitPDFPage.pageId.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaperKitPDFPage.AnnotationIDState(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (!v2)
    return !v3;
  if (v2 == 1)
    return v3 == 1;
  if (v3 < 2)
    return 0;
  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

void one-time initialization function for blankPageImage()
{
  UIImage *v0;
  uint64_t v1;
  CGSize v2;

  v2.width = 1.0;
  v2.height = 1.0;
  UIGraphicsBeginImageContext(v2);
  v0 = UIGraphicsGetImageFromCurrentImageContext();
  if (v0)
  {
    v1 = (uint64_t)v0;
    UIGraphicsEndImageContext();
    static PaperKitPDFPage.blankPageImage = v1;
  }
  else
  {
    __break(1u);
  }
}

void PaperKitPDFPage.copy(with:)(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  objc_class *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  objc_super v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
  v21.receiver = v2;
  v21.super_class = v9;
  objc_msgSendSuper2(&v21, sel_copyWithZone_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  v10 = v20;
  v11 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  v12 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render + 8];
  v13 = (uint64_t *)&v20[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  v14 = *(_QWORD *)&v20[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  *v13 = v11;
  v13[1] = v12;
  outlined copy of ModifiedContent<MiniButton<<<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>.0>, _FrameLayout>?(v11);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
  v15 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v15, (uint64_t)v8, &demangling cache variable for type metadata for PageId?);
  v16 = (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v8, v16, &demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  v17 = *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState];
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = 0;
  outlined consume of PaperKitPDFPage.AnnotationIDState(v17);
  v18 = v10;
  objc_msgSend(v18, sel_setBookmarked_, objc_msgSend(v2, sel_isBookmarked));

  a2[3] = (char *)v9;
  *a2 = v18;
}

uint64_t PaperKitPDFPage.annotations.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  v1 = objc_msgSendSuper2(&v9, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for lock != -1)
    v3 = swift_once();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = v5 + 4;
  os_unfair_lock_lock(v5 + 4);
  specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v7, (uint64_t (*)(void))partial apply for closure #1 in PaperKitPDFPage.annotations.getter);
  os_unfair_lock_unlock(v6);
  return v2;
}

void closure #1 in PaperKitPDFPage.annotations.getter(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  id v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v6, v7);
  v45 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v54 = (char *)v41 - v16;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRKeyPath, PDFAnnotation));
  MEMORY[0x1E0C80A78](v51, v17);
  v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState);
  v52 = a2;
  if (v20 >= 2)
  {
    v42 = OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState;
    v43 = a1;
    v44 = v2;
    v21 = *(_QWORD *)(v20 + 16);
    outlined copy of PaperKitPDFPage.AnnotationIDState(v20);
    swift_bridgeObjectRetain();
    v50 = v21;
    if (v21)
    {
      v3 = 0;
      v22 = v52 & 0xFFFFFFFFFFFFFF8;
      if (v52 < 0)
        v23 = v52;
      else
        v23 = v52 & 0xFFFFFFFFFFFFFF8;
      v41[1] = v23;
      v46 = v20;
      v47 = v52 & 0xC000000000000001;
      v48 = v52 & 0xFFFFFFFFFFFFFF8;
      v49 = (unint64_t)v52 >> 62;
      while (v3 < *(_QWORD *)(v20 + 16))
      {
        v24 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
        v24(v54, v20+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v3, v9);
        if (v49)
        {
          swift_bridgeObjectRetain();
          v33 = _CocoaArrayWrapper.endIndex.getter();
          v22 = v48;
          swift_bridgeObjectRelease();
          if (v3 == v33)
          {
LABEL_19:
            (*(void (**)(char *, uint64_t))(v10 + 8))(v54, v9);
            goto LABEL_20;
          }
        }
        else if (v3 == *(_QWORD *)(v22 + 16))
        {
          goto LABEL_19;
        }
        if (v47)
        {
          v25 = (id)MEMORY[0x1DF0E4D64](v3, v52);
        }
        else
        {
          if (v3 >= *(_QWORD *)(v22 + 16))
            goto LABEL_35;
          v25 = *(id *)(v52 + 8 * v3 + 32);
        }
        v26 = v25;
        v27 = *(int *)(v51 + 48);
        v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v28(v19, v54, v9);
        *(_QWORD *)&v19[v27] = v26;
        v28(v13, v19, v9);
        type metadata accessor for CanvasElementPDFAnnotation();
        v29 = swift_dynamicCastClass();
        if (v29)
        {
          v30 = v29;
          v31 = (uint64_t)v45;
          v24(v45, (unint64_t)v13, v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v31, 0, 1, v9);
          v32 = v30 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          outlined assign with take of Date?(v31, v32, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          swift_endAccess();
        }
        ++v3;

        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        v20 = v46;
        v22 = v48;
        if (v50 == v3)
          goto LABEL_20;
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_20:
    outlined consume of PaperKitPDFPage.AnnotationIDState(v20);
    swift_bridgeObjectRelease();
    a1 = v43;
    v34 = *(_QWORD *)(v43 + v42);
    *(_QWORD *)(v43 + v42) = 1;
    outlined consume of PaperKitPDFPage.AnnotationIDState(v34);
    v3 = v44;
  }
  v13 = (char *)OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations))
    return;
  v20 = a1;
  v53 = MEMORY[0x1E0DEE9D8];
  v10 = v52;
  if ((unint64_t)v52 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    v35 = _CocoaArrayWrapper.endIndex.getter();
    if (!v35)
      goto LABEL_37;
LABEL_24:
    if (v35 < 1)
    {
      __break(1u);
      return;
    }
    v44 = v3;
    v36 = 0;
    v37 = v10 & 0xC000000000000001;
    do
    {
      if (v37)
        v38 = (id)MEMORY[0x1DF0E4D64](v36, v10);
      else
        v38 = *(id *)(v10 + 8 * v36 + 32);
      v39 = v38;
      if (objc_msgSend(v38, sel_hasAppearanceStream))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v10 = v52;
      }
      else
      {

      }
      ++v36;
    }
    while (v35 != v36);
    swift_bridgeObjectRelease();
    v40 = v53;
    goto LABEL_38;
  }
  v35 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v35)
    goto LABEL_24;
LABEL_37:
  swift_bridgeObjectRelease();
  v40 = MEMORY[0x1E0DEE9D8];
LABEL_38:
  *(_QWORD *)&v13[v20] = v40;
  swift_bridgeObjectRelease();
}

uint64_t PaperKitPDFPage.hasFormWidgets.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  unsigned int v10;
  unsigned int v11;

  v1 = objc_msgSend(v0, sel_annotations);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
    goto LABEL_19;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = 4;
    while (1)
    {
      v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      if (objc_msgSend(v5, sel_isTextWidget)
        && objc_msgSend(v6, sel_isActivatableTextField))
      {
        swift_bridgeObjectRelease_n();

        return 1;
      }
      type metadata accessor for CanvasElementPDFAnnotation();
      v8 = (void *)swift_dynamicCastClassUnconditional();
      v9 = v6;
      v10 = 0;
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_isSignature))
        v10 = objc_msgSend(v8, sel_isSignature);
      if (objc_msgSend(v8, sel_respondsToSelector_, sel_isAppearanceStreamEmpty))
      {
        v11 = objc_msgSend(v8, sel_isAppearanceStreamEmpty);

        if ((v10 & v11 & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          return 1;
        }
      }
      else
      {

      }
      ++v4;
      if (v7 == v3)
        goto LABEL_20;
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t closure #1 in PaperKitPDFPage.annotationFor(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  char v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v33;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v33 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v33 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v33 - v21;
  type metadata accessor for CanvasElementPDFAnnotation();
  v23 = swift_dynamicCastClass();
  if (v23)
  {
    v24 = v23 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v24, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v22, 1, 1, v3);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v18, a2, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v18, 0, 1, v3);
  v25 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, v25, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v27 = v26(v25, 1, v3);
    if (v27 == 1)
      v28 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
    else
      v28 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    if (v27 == 1)
      v29 = -1;
    else
      v29 = 0;
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v26(v25, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
      v29 = 0;
      v28 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      v30 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v33, v25, v3);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v4 + 8);
      v31(v30, v3);
      v28 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v31(v14, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v28);
  return v29 & 1;
}

id PaperKitPDFPage.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  id result;
  void *v14;
  id v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  void *v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - v8;
  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v33 = v30;
  v34 = v31;
  v10._object = (void *)0x80000001DDF566A0;
  v10._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v10);
  v30 = (uint64_t)v0;
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 979857440;
  v11._object = (void *)0xE400000000000000;
  String.append(_:)(v11);
  v12 = objc_msgSend(v0, sel_document);

  if (v12)
  {
    v30 = 0;
    v31 = 0xE000000000000000;
    result = objc_msgSend(v1, sel_document);
    if (!result)
    {
      __break(1u);
      goto LABEL_11;
    }
    v14 = result;
    v15 = objc_msgSend(result, sel_indexForPage_, v1);

    v32 = v15;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = v30;
    v18 = v31;
  }
  else
  {
    v18 = 0xE100000000000000;
    v17 = 63;
  }
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 32;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21 = (uint64_t)v1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v21, (uint64_t)v9, &demangling cache variable for type metadata for PageId?);
  v22 = type metadata accessor for PageId(0);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  v24 = v23(v9, 1, v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PageId?);
  if (v24 == 1)
  {
    v25 = (void *)0xE600000000000000;
    v26 = 0x6C696E3A6469;
LABEL_9:
    v28._countAndFlagsBits = v26;
    v28._object = v25;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 62;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    return (id)v33;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v21, (uint64_t)v5, &demangling cache variable for type metadata for PageId?);
  result = (id)v23(v5, 1, v22);
  if ((_DWORD)result != 1)
  {
    v26 = PageId.description.getter();
    v25 = v27;
    outlined destroy of PKStrokeProperties((uint64_t)v5, type metadata accessor for PageId);
    goto LABEL_9;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t PaperKitPDFPage.candidateForOCR.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v22;
  uint64_t v23;
  objc_super v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)v1 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v14, (uint64_t)v5, &demangling cache variable for type metadata for PageId?);
  v15 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v5, 1, v15))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PageId?);
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakRef<Image>?);
    v20 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
    v24.receiver = v1;
    v24.super_class = v20;
    return (uint64_t)objc_msgSendSuper2(&v24, sel_isCandidateForOCR);
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v5[*(int *)(v15 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v5, &demangling cache variable for type metadata for PageId?);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
    goto LABEL_4;
  WeakTagged_3.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v17);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v13, 1, v22) == 1)
    goto LABEL_5;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakRef<Image>?);
  return 1;
}

void PaperKitPDFPage.draw(with:in:withOptions:)(NSObject *a1, void *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  id v37;
  unsigned int v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(dispatch_semaphore_t, void *);
  NSDictionary v60;
  objc_class *v61;
  void *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  dispatch_semaphore_t v70;
  char *v71;
  id v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  dispatch_semaphore_t v88;
  unint64_t v89;
  unint64_t v90;
  id v91[5];
  objc_super v92;
  __int128 v93;
  __int128 v94;

  v4 = v3;
  v88 = a1;
  v81 = type metadata accessor for Image();
  v7 = *(_QWORD *)(v81 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v81, v9);
  v77 = (uint64_t)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v78 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v83 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80, v13);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v16, v17);
  v84 = (uint64_t)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v74 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v32 = *(_QWORD *)(v31 - 8);
  v86 = v31;
  v87 = v32;
  MEMORY[0x1E0C80A78](v31, v33);
  v85 = (char *)&v74 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v7;
  v79 = v15;
  if (!a3)
  {
    v93 = 0u;
    v94 = 0u;
LABEL_10:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v93, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  v89 = 0xD00000000000001BLL;
  v90 = 0x80000001DDF56680;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(a3 + 16) && (v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91), (v36 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v35, (uint64_t)&v93);
  }
  else
  {
    v93 = 0u;
    v94 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v91);
  if (!*((_QWORD *)&v94 + 1))
    goto LABEL_10;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    v38 = 0;
    goto LABEL_12;
  }
  v37 = v91[0];
  v38 = objc_msgSend(v91[0], sel_BOOLValue);

LABEL_12:
  v39 = objc_msgSend(v4, sel_document);
  if (v39)
  {
    v40 = v39;
    v41 = objc_msgSend(v39, sel_delegate);

    if (v41)
    {
      v76 = a2;
      type metadata accessor for PaperDocumentView();
      v42 = swift_dynamicCastClass();
      if (v42)
      {
        v43 = v42;
        v44 = (uint64_t)&v4[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
        swift_beginAccess();
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v44, (uint64_t)v22, &demangling cache variable for type metadata for PageId?);
        v45 = type metadata accessor for PageId(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v22, 1, v45))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PageId?);
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v26, 1, 1, v46);
LABEL_18:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v30, 1, 1, v86);
LABEL_19:
          swift_unknownObjectRelease();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for WeakRef<Image>?);
LABEL_26:
          a2 = v76;
          goto LABEL_27;
        }
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v22[*(int *)(v45 + 20)], (uint64_t)v26, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for PageId?);
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
        v48 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v26, 1, v47) == 1)
          goto LABEL_18;
        v75 = v48;
        WeakTagged_3.tagged2.getter();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v26, v47);
        v50 = v86;
        v49 = v87;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v30, 1, v86) == 1)
          goto LABEL_19;
        v51 = v85;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v85, v30, v50);
        if (v38)
        {
          v52 = v43 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
          swift_beginAccess();
          v53 = v83;
          v54 = v79;
          v55 = v80;
          (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v79, v52, v80);
          type metadata accessor for PaperDocument(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          v56 = v51;
          v57 = v84;
          WeakRef.subscript.getter();
          v58 = v82;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v57, 1, v81) == 1)
          {
            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
            (*(void (**)(char *, uint64_t))(v87 + 8))(v56, v50);
            outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Image?);
            return;
          }
          v62 = v76;
          if (v76)
          {
            (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v55);
            v63 = v4;
            v88 = dispatch_semaphore_create(0);
            v64 = type metadata accessor for TaskPriority();
            v65 = (uint64_t)v78;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v78, 1, 1, v64);
            v66 = v57;
            v67 = v77;
            outlined init with copy of Image(v66, v77);
            v68 = (*(unsigned __int8 *)(v58 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
            v69 = (_QWORD *)swift_allocObject();
            v69[2] = 0;
            v69[3] = 0;
            v69[4] = v62;
            v69[5] = v63;
            outlined init with take of Image(v67, (uint64_t)v69 + v68);
            v70 = v88;
            *(_QWORD *)((char *)v69 + ((v8 + v68 + 7) & 0xFFFFFFFFFFFFFFF8)) = v88;
            v71 = v63;
            v72 = v62;
            v73 = v70;
            _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v65, (uint64_t)&async function pointer to partial apply for closure #1 in Image.renderPage(pdfPage:box:context:), (uint64_t)v69);
            swift_release();
            OS_dispatch_semaphore.wait()();
            swift_unknownObjectRelease();

            (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v86);
            outlined destroy of PKStrokeProperties(v84, (uint64_t (*)(_QWORD))type metadata accessor for Image);
            return;
          }
          goto LABEL_37;
        }
        (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v50);
      }
      swift_unknownObjectRelease();
      goto LABEL_26;
    }
  }
LABEL_27:
  v59 = *(void (**)(dispatch_semaphore_t, void *))&v4[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  if (v59)
  {
    if (a2)
    {
      swift_retain();
      v59(v88, a2);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v59);
      return;
    }
    __break(1u);
LABEL_37:
    __break(1u);
    return;
  }
  if (a3)
    v60.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v60.super.isa = 0;
  v61 = (objc_class *)type metadata accessor for PaperKitPDFPage(0);
  v92.receiver = v4;
  v92.super_class = v61;
  -[NSObject drawWithBox:inContext:withOptions:](&v92, sel_drawWithBox_inContext_withOptions_, v88, a2, v60.super.isa);

}

id PaperKitPDFPage.init(image:options:)(void *a1)
{
  char *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  Class isa;
  id v7;
  id v8;
  objc_super v10;

  v3 = &v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_render];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  v5 = type metadata accessor for PageId(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = 0;
  type metadata accessor for PDFPageImageInitializationOption(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PDFPageImageInitializationOption and conformance PDFPageImageInitializationOption, (uint64_t (*)(uint64_t))type metadata accessor for PDFPageImageInitializationOption, (uint64_t)&protocol conformance descriptor for PDFPageImageInitializationOption);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  v7 = objc_msgSendSuper2(&v10, sel_initWithImage_options_, a1, isa);

  v8 = v7;
  if (v8)

  return v8;
}

id PaperKitPDFPage.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitPDFPage(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for PaperKitPDFPage()
{
  return type metadata accessor for PaperKitPDFPage(0);
}

uint64_t type metadata accessor for PaperKitPDFPage(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperKitPDFPage);
}

void type metadata completion function for PaperKitPDFPage()
{
  unint64_t v0;

  type metadata accessor for CRAsset?(319, &lazy cache variable for type metadata for PageId?, (void (*)(uint64_t))type metadata accessor for PageId);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for PageId(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, type metadata singleton initialization cache for PageId);
}

uint64_t *initializeBufferWithCopyOfBuffer for PaperKitPDFPage.AnnotationIDState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for PaperKitPDFPage.AnnotationIDState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t *assignWithCopy for PaperKitPDFPage.AnnotationIDState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for PaperKitPDFPage.AnnotationIDState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperKitPDFPage.AnnotationIDState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PaperKitPDFPage.AnnotationIDState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for PaperKitPDFPage.AnnotationIDState(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PaperKitPDFPage.AnnotationIDState()
{
  return &type metadata for PaperKitPDFPage.AnnotationIDState;
}

uint64_t *initializeBufferWithCopyOfBuffer for PageId(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for PDFPageID();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v11 = *(int *)(v7 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v15 = *(int *)(a3 + 20);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for PageId(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for PDFPageID();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = a1 + *(int *)(v4 + 20);
    v6 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  v7 = a1 + *(int *)(a2 + 20);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for PageId(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v6 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *assignWithCopy for PageId(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v11 = *(int *)(v6 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v26 = *(int *)(v6 + 20);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

_QWORD *initializeWithTake for PageId(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v9 = *(int *)(v6 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for CRAsset();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = *(int *)(a3 + 20);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

_QWORD *assignWithTake for PageId(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  v6 = type metadata accessor for PDFPageID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      v11 = *(int *)(v6 + 20);
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for CRAsset();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    outlined destroy of PKStrokeProperties((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  v26 = *(int *)(v6 + 20);
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for CRAsset();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v27, v28, v29);
LABEL_7:
  v16 = *(int *)(a3 + 20);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageId()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD47F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for PageId()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD47F9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PageId()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CRAsset?(319, (unint64_t *)&lazy cache variable for type metadata for PDFPageID?, (void (*)(uint64_t))type metadata accessor for PDFPageID);
  if (v0 <= 0x3F)
  {
    type metadata accessor for WeakTagged_3<TaggedPaperPage>?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for WeakTagged_3<TaggedPaperPage>?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
}

uint64_t outlined init with copy of Image(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Image();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDD48150()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for Image();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  v5 = v0 + v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v5 + v1[5], v6);
  v8 = v5 + v1[6];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v5 + v1[7];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<CGRect, Quad>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v5 + v1[8];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_1<CRExtensible<BasicImageFilter>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = v5 + v1[9];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = v5 + v1[10];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  v18 = v5 + v1[11];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  v20 = v5 + v1[12];
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = v5 + v1[13];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v22, v23);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in PaperKitPDFPage.annotations.getter()
{
  uint64_t v0;

  closure #1 in PaperKitPDFPage.annotations.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t outlined copy of PaperKitPDFPage.AnnotationIDState(unint64_t result)
{
  if (result >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

id RulerHostingDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RulerHostingDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RulerHostingDelegate()
{
  return objc_opt_self();
}

unint64_t closure #1 in static SignatureAnalytics.created(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t inited;
  char v5;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(inited + 32) = 6775156;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  if (a2 <= 5)
  {
    specialized Collection<>.firstIndex(of:)(a1, a2, (uint64_t)&outlined read-only object #0 of static SignatureDescription.allCases.getter);
    if ((v5 & 1) != 0)
      __break(1u);
  }
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

unint64_t specialized closure #1 in static SignatureAnalytics.inserted()()
{
  uint64_t inited;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, NSObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(inited + 32) = 0x746E756F63;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  type metadata accessor for NSNumber();
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

id protocol witness for CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:) in conformance MarkupContainerViewController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a3);
}

id CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a3);
}

uint64_t CanvasDelegate.canvas(_:shouldOpenLink:)()
{
  return 1;
}

uint64_t CanvasDelegate.canvasCanSnapshot(_:)()
{
  return 1;
}

UIMenu closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, UIMenuElementSize a2)
{
  Swift::String v3;
  Swift::OpaquePointer v5;
  UIImage_optional v6;

  type metadata accessor for UIMenu();
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6.value.super.isa = 0;
  v6.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v6, 0, 0xFFFFFFFFFFFFFFFFLL, a2, v5);
}

id specialized CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v7[6];

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  v3 = (void *)objc_opt_self();
  v7[4] = partial apply for closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:);
  v7[5] = v2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  v7[3] = &block_descriptor_41;
  v4 = _Block_copy(v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v5 = objc_msgSend(v3, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v4);
  swift_release();
  _Block_release(v4);
  return v5;
}

uint64_t dispatch thunk of CanvasDelegate.canvasSelectionDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasDrawingWillChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasTextSelectionDidChange(_:textBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:wantsToEnterFullscreen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:shouldOpenLink:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of CanvasDelegate.canvasCanSnapshot(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of CanvasDelegate.canvas(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_1DDD48734()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

UIMenu partial apply for closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CanvasDelegate.canvas(_:contextMenuConfigurationFor:suggestedActions:)(a1, *(UIMenuElementSize *)(v1 + 16));
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

unint64_t type metadata accessor for UIMenu()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIMenu;
  if (!lazy cache variable for type metadata for UIMenu)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  }
  return result;
}

void ShapeView.addTextBox(canvas:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  double v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  _BYTE *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - v15;
  v17 = direct field offset for ShapeView._textBoxView;
  if (!*(_QWORD *)((char *)v2 + direct field offset for ShapeView._textBoxView))
  {
    v37 = a1;
    v18 = (char *)v2 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x380);
    swift_beginAccess();
    v19 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v19(v16, v18, v8);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    Capsule<>.subscript.getter();
    swift_release();
    v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v16, v8);
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v7, 1, v21);
    outlined destroy of CRAttributedString<TextAttributeScope>.Attributes?((uint64_t)v7);
    if (v22 == 1)
    {
      v19(v12, v18, v8);
      v23 = specialized Capsule<>.isFormField.getter();
      v24 = ((uint64_t (*)(char *, uint64_t))v20)(v12, v8);
      v25 = 1.0;
      if ((v23 & 1) == 0)
      {
        if (v37)
        {
          (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v37) + 0x278))(v24);
          if ((v26 & 1) != 0)
            v25 = AnyCanvas.scaleFactorForNewElements.getter();
        }
      }
      if (one-time initialization token for defaultTextBoxAttributes != -1)
        swift_once();
      v38 = static UIConstants.defaultTextBoxAttributes;
      swift_bridgeObjectRetain();
      Dictionary<>.scaleBy(_:)(v25);
      MEMORY[0x1E0C80A78](v27, v28);
      *(&v36 - 2) = (uint64_t)&v38;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
    v29 = *((_BYTE *)v2 + direct field offset for ShapeView.showsSignaturePopover);
    v30 = *((unsigned __int8 *)v2 + direct field offset for ShapeView.analytics_documentType);
    v31 = *((unsigned __int8 *)v2 + direct field offset for ShapeView.analytics_inputSource);
    v32 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TextBoxView<Shape>));
    v33 = v2;
    v34 = specialized TextBoxView.init(canvasElementView:delegate:shouldAddTextboxView:analytics_inputSource:analytics_documentType:)(v33, v33, (v29 & 1) == 0, v31, v30, v32);
    v35 = *(void **)((char *)v2 + v17);
    *(_QWORD *)((char *)v2 + v17) = v34;

    if (*(_QWORD *)((char *)v2 + v17))
      objc_msgSend(v33, sel_addSubview_);
    else
      __break(1u);
  }
}

void ShapeView.setupTextBoxIfNeeded(canvas:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v27 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  v28 = v1;
  v16 = (char *)v1 + v15;
  swift_beginAccess();
  v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v17(v14, v16, v6);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.subscript.getter();
  swift_release();
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v14, v6);
  v19 = (void *)CRAttributedString.attributedString.getter();
  v20 = objc_msgSend(v19, sel_string);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  if (v21)
    v24 = 0;
  else
    v24 = v23 == 0xE000000000000000;
  if (v24)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v2);
LABEL_8:
    v17(v10, v16, v6);
    v26 = specialized Capsule<>.isFormField.getter();
    v18(v10, v6);
    if ((v26 & 1) == 0)
      return;
    goto LABEL_9;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v2);
  if ((v25 & 1) != 0)
    goto LABEL_8;
LABEL_9:
  ShapeView.addTextBox(canvas:)(v27);
}

uint64_t closure #1 in ShapeView.addTextBox(canvas:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v4 = swift_bridgeObjectRetain();
  CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v4, 0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 0, 1, v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  return Capsule.Ref<>.subscript.setter();
}

Swift::Bool __swiftcall ShapeView.becomeFirstResponder()()
{
  char *v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  uint64_t v17;
  id v18;
  id v19;
  objc_super v20;

  v1 = v0;
  if (v0[direct field offset for ShapeView.showsSignaturePopover] != 1)
  {
    v6 = *(void **)&v0[direct field offset for ShapeView._textBoxView];
    if (v6)
      return objc_msgSend(v6, sel_becomeFirstResponder);
    goto LABEL_12;
  }
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v2)
  {
LABEL_12:
    v20.receiver = v1;
    v20.super_class = (Class)type metadata accessor for ShapeView();
    return objc_msgSendSuper2(&v20, sel_becomeFirstResponder);
  }
  v3 = v2;
  v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x608))();
  if (!v4)
  {
    v8 = objc_msgSend(v3, sel_window);
    v5 = objc_msgSend(v8, sel_rootViewController);

    if (v5)
      goto LABEL_8;

    goto LABEL_12;
  }
  v5 = (id)v4;
LABEL_8:
  if (one-time initialization token for shared != -1)
    swift_once();
  objc_msgSend(v1, sel_bounds);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v1;
  *(_QWORD *)(v17 + 24) = v3;
  v18 = v1;
  v19 = v3;
  specialized SignatureManager.showSignatures(_:_:_:_:)(v5, v1, (uint64_t)partial apply for closure #1 in ShapeView.becomeFirstResponder(), v17, v10, v12, v14, v16);
  swift_release();

  return 1;
}

void closure #1 in ShapeView.becomeFirstResponder()(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t MaxY;
  CGFloat Height;
  _QWORD *v19;
  uint64_t (*v20)(char *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  id v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  CGRect v52;
  CGRect v53;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  MEMORY[0x1E0C80A78](v6, v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v48 = v9;
    v49 = v8;
    type metadata accessor for SignatureManager();
    v12 = a1;
    swift_initStaticObject();
    objc_msgSend(a2, sel_center);
    v14 = v13;
    v16 = v15;
    objc_msgSend(a2, sel_frame);
    MaxY = CGRectGetMaxY(v52);
    objc_msgSend(a2, sel_frame);
    Height = CGRectGetHeight(v53);
    v51 = v12;
    SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v12, MaxY, 0, COERCE__INT64(Height * 1.3), 0, v14, v16);
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v20 = *(uint64_t (**)(char *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x480);
    v21 = type metadata accessor for Signature();
    v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
    v23 = v20(v11, 1, 0, 0, v21, v22, &protocol witness table for Signature);
    v24 = *v19 & *a3;
    v50 = v11;
    v25 = *(uint64_t (**)(uint64_t))(v24 + 760);
    v26 = (void *)v25(v23);
    v28 = v27;
    ObjectType = swift_getObjectType();
    v30 = a2;
    v31 = specialized CanvasMembers.init(_:)(v30);
    v33 = v32;
    v35 = v34;
    LOBYTE(v19) = v36;

    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 88))(v31, v33, v35, v19 & 1, ObjectType, v28);
    swift_bridgeObjectRelease();
    v37 = swift_bridgeObjectRelease();
    v38 = (void *)v25(v37);
    v40 = v39;
    v41 = swift_getObjectType();
    v42 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 144))(v41, v40);

    if (v42)
    {
      v43 = v50;
      v44 = v51;
      v45 = *(_QWORD *)&v42[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)&v42[OBJC_IVAR____TtC8PaperKit15FormFillingView_signatureFieldsSigned] = v47;

        (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v49);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);

    }
  }
}

Swift::Bool __swiftcall ShapeView.resignFirstResponder()()
{
  char *v0;
  char *v1;
  void *v2;
  char *v3;
  unsigned __int8 v4;
  objc_super v6;

  v1 = *(char **)&v0[direct field offset for ShapeView._textBoxView];
  if (!v1)
    goto LABEL_6;
  v2 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (!v2)
    goto LABEL_6;
  v3 = v1;
  if ((objc_msgSend(v2, sel_isFirstResponder) & 1) == 0)
  {

LABEL_6:
    v6.receiver = v0;
    v6.super_class = (Class)type metadata accessor for ShapeView();
    return objc_msgSendSuper2(&v6, sel_resignFirstResponder);
  }
  v4 = objc_msgSend(v3, sel_resignFirstResponder);

  return v4;
}

uint64_t sub_1DDD49658()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeView.becomeFirstResponder()(void *a1)
{
  uint64_t v1;

  closure #1 in ShapeView.becomeFirstResponder()(a1, *(void **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t outlined destroy of CRAttributedString<TextAttributeScope>.Attributes?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in ShapeView.addTextBox(canvas:)()
{
  return closure #1 in ShapeView.addTextBox(canvas:)();
}

void sub_1DDD4A094(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t sub_1DDD4A0DC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8)
                                                                                               + 8)
                                                                                   + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDD4A120()
{
  return 24;
}

__n128 sub_1DDD4A12C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD4A148()
{
  return 24;
}

__n128 sub_1DDD4A154(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD4A170()
{
  return 24;
}

__n128 sub_1DDD4A17C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(unint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  id v10;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_undoManager);
  objc_msgSend(v4, sel_beginUndoGrouping);

  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v2, sel_undoManager);
    objc_msgSend(v10, sel_endUndoGrouping);

    return;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  if (!v5)
    goto LABEL_10;
LABEL_3:
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (_QWORD *)MEMORY[0x1DF0E4D64](v6, a1);
      else
        v8 = *(id *)(a1 + 8 * v6 + 32);
      v9 = v8;
      ++v6;
      (*(void (**)(uint64_t, _QWORD))((*v7 & *v8) + 0x1F0))(1, 0);

    }
    while (v5 != v6);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t i;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  void (*v50)(uint64_t, unint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;

  v2 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v2, v3);
  v65 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v63 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v66 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v61 = (char *)&v54 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v56 = (char *)&v54 - v17;
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v62 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v55 = (char *)&v54 - v24;
  v25 = *(_QWORD *)(a1 + 16);
  v67 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
  v26 = *(_QWORD *)(a1 + 56);
  v58 = a1;
  v59 = a1 + 56;
  v27 = -1;
  v28 = -1 << *(_BYTE *)(a1 + 32);
  if (-v28 < 64)
    v27 = ~(-1 << -(char)v28);
  v29 = v27 & v26;
  v60 = (unint64_t)(63 - v28) >> 6;
  v57 = v25;
  if (v25)
  {
    swift_bridgeObjectRetain();
    v30 = 0;
    v31 = 0;
    while (1)
    {
      if (v29)
      {
        v32 = __clz(__rbit64(v29));
        v29 &= v29 - 1;
        v33 = v32 | (v31 << 6);
      }
      else
      {
        v34 = v31 + 1;
        if (__OFADD__(v31, 1))
        {
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        if (v34 >= v60)
          goto LABEL_62;
        v35 = *(_QWORD *)(v59 + 8 * v34);
        ++v31;
        if (!v35)
        {
          v31 = v34 + 1;
          if (v34 + 1 >= v60)
            goto LABEL_62;
          v35 = *(_QWORD *)(v59 + 8 * v31);
          if (!v35)
          {
            v31 = v34 + 2;
            if (v34 + 2 >= v60)
              goto LABEL_62;
            v35 = *(_QWORD *)(v59 + 8 * v31);
            if (!v35)
            {
              v31 = v34 + 3;
              if (v34 + 3 >= v60)
                goto LABEL_62;
              v35 = *(_QWORD *)(v59 + 8 * v31);
              if (!v35)
              {
                v36 = v34 + 4;
                if (v36 >= v60)
                  goto LABEL_62;
                v35 = *(_QWORD *)(v59 + 8 * v36);
                if (!v35)
                {
                  while (1)
                  {
                    v31 = v36 + 1;
                    if (__OFADD__(v36, 1))
                      break;
                    if (v31 >= v60)
                      goto LABEL_62;
                    v35 = *(_QWORD *)(v59 + 8 * v31);
                    ++v36;
                    if (v35)
                      goto LABEL_22;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
                v31 = v36;
              }
            }
          }
        }
LABEL_22:
        v29 = (v35 - 1) & v35;
        v33 = __clz(__rbit64(v35)) + (v31 << 6);
      }
      v37 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
      v37(v14, *(_QWORD *)(v58 + 48) + *(_QWORD *)(v19 + 72) * v33, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18);
      if ((_DWORD)result == 1)
        goto LABEL_63;
      v37(v62, (unint64_t)v14, v18);
      CRKeyPath.init(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v18);
      v39 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1);
        v39 = v67;
      }
      v41 = *(_QWORD *)(v39 + 16);
      v40 = *(_QWORD *)(v39 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v39 = v67;
      }
      ++v30;
      *(_QWORD *)(v39 + 16) = v41 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v39+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v41, v66, v64);
      if (v30 == v57)
        goto LABEL_31;
    }
  }
  swift_bridgeObjectRetain();
  v31 = 0;
LABEL_31:
  v42 = v58;
  v43 = v55;
  v44 = (uint64_t)v56;
  if (!v29)
    goto LABEL_33;
LABEL_32:
  v45 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  for (i = v45 | (v31 << 6); ; i = __clz(__rbit64(v48)) + (v31 << 6))
  {
    v50 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
    v50(v44, *(_QWORD *)(v42 + 48) + *(_QWORD *)(v19 + 72) * i, v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v44, 0, 1, v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v44, 1, v18) == 1)
      goto LABEL_57;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v43, v44, v18);
    v50((uint64_t)v62, (unint64_t)v43, v18);
    CRKeyPath.init(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
    WeakRef.init(id:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v43, v18);
    v51 = v67;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v51 + 16) + 1, 1);
      v51 = v67;
    }
    v53 = *(_QWORD *)(v51 + 16);
    v52 = *(_QWORD *)(v51 + 24);
    v14 = (char *)(v53 + 1);
    if (v53 >= v52 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
      v51 = v67;
    }
    *(_QWORD *)(v51 + 16) = v14;
    (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v51+ ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80))+ *(_QWORD *)(v63 + 72) * v53, v61, v64);
    v44 = (uint64_t)v56;
    if (v29)
      goto LABEL_32;
LABEL_33:
    v47 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_59;
    if (v47 >= v60)
    {
LABEL_56:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v44, 1, 1, v18);
LABEL_57:
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?(v44, &demangling cache variable for type metadata for UUID?);
      return v67;
    }
    v48 = *(_QWORD *)(v59 + 8 * v47);
    ++v31;
    if (!v48)
    {
      v31 = v47 + 1;
      if (v47 + 1 >= v60)
        goto LABEL_56;
      v48 = *(_QWORD *)(v59 + 8 * v31);
      if (!v48)
      {
        v31 = v47 + 2;
        if (v47 + 2 >= v60)
          goto LABEL_56;
        v48 = *(_QWORD *)(v59 + 8 * v31);
        if (!v48)
        {
          v31 = v47 + 3;
          if (v47 + 3 >= v60)
            goto LABEL_56;
          v48 = *(_QWORD *)(v59 + 8 * v31);
          if (!v48)
            break;
        }
      }
    }
LABEL_48:
    v29 = (v48 - 1) & v48;
  }
  v49 = v47 + 4;
  if (v49 >= v60)
    goto LABEL_56;
  v48 = *(_QWORD *)(v59 + 8 * v49);
  if (v48)
  {
    v31 = v49;
    goto LABEL_48;
  }
  while (1)
  {
    v31 = v49 + 1;
    if (__OFADD__(v49, 1))
      break;
    if (v31 >= v60)
      goto LABEL_56;
    v48 = *(_QWORD *)(v59 + 8 * v31);
    ++v49;
    if (v48)
      goto LABEL_48;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v14, 1, 1, v18);
LABEL_63:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)(CGPoint _, UIEvent_optional a2)
{
  uint64_t v2;
  Class isa;
  double y;
  double x;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t ObjectType;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  id v19;
  Swift::Bool v20;

  isa = a2.value.super.isa;
  y = _.y;
  x = _.x;
  v6 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v7 = MEMORY[0x1DF0E666C](v6, *(_QWORD *)&a2.is_nil);
  if (!v7)
    return 0;
  v8 = (void *)v7;
  v9 = *(_QWORD *)(v6 + 8);
  ObjectType = swift_getObjectType();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);
  v12 = v11;
  if (v11 >> 62)
    goto LABEL_16;
  v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter())
  {
    v14 = 4;
    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    while (1)
    {
      v16 = (v12 & 0xC000000000000001) != 0
          ? (_QWORD *)MEMORY[0x1DF0E4D64](v14 - 4, v12)
          : *(id *)(v12 + 8 * v14);
      v17 = v16;
      v18 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      if (((*(uint64_t (**)(void))((*v15 & *v16) + 0x218))() & 1) != 0)
      {

      }
      else
      {
        objc_msgSend(v17, sel_convertPoint_fromCoordinateSpace_, v8, x, y);
        v19 = objc_msgSend(v17, sel_hitTest_withEvent_, isa);

        if (v19)
        {
          v20 = 1;
          goto LABEL_18;
        }
      }
      ++v14;
      if (v18 == v13)
        goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  v20 = 0;
LABEL_18:
  swift_bridgeObjectRelease_n();

  return v20;
}

void CanvasViewSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(void *a1, unint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  char *v15;
  id v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  Swift::Bool v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  uint64_t v27;
  UIEvent_optional v28;

  if (a2 | a3)
  {
    v11 = v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    v12 = (_QWORD *)MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v12)
    {
      v13 = v12;
      v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v15 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x88))();

      if (v15)
      {
        if (a2)
        {
          v16 = (id)a2;
          goto LABEL_9;
        }
        if (a3)
        {
          v16 = objc_msgSend((id)a3, sel__activeEventOfType_, 0);
          if (v16)
          {
LABEL_9:
            v17 = (_QWORD *)MEMORY[0x1DF0E666C](v11);
            if (v17)
            {
              v18 = v17;
              v19 = (_QWORD *)(*(uint64_t (**)(void))((*v14 & *v17) + 0x88))();
              v20 = (id)a2;

              if (v19)
              {
                (*(void (**)(uint64_t *__return_ptr))((*v14 & *v19) + 0x2C8))(&v27);

                if (!(_BYTE)v27)
                {

                  return;
                }
                if (v27 == 2 && (objc_msgSend(v16, sel_PK_isEventFromPencil) & 1) == 0)
                {
                  v21 = v16;
                  v28.value.super.isa = (Class)v16;
                  v22 = CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)((CGPoint)__PAIR128__(*(unint64_t *)&a5, *(unint64_t *)&a4), v28);

                  if (!v22)
                  {
                    v23 = *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
                    if (v23)
                    {
                      v24 = (_QWORD *)(v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
                      if (!*(_QWORD *)(*v24 + 16) && !*(_QWORD *)(v24[1] + 16))
                      {

                        return;
                      }
                      goto LABEL_20;
                    }
                    goto LABEL_24;
                  }
                }
              }
            }
            else
            {
              v25 = (id)a2;
            }
LABEL_20:
            v26 = v16;
            CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(a1, v16, a4, a5);

            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_24:
        __break(1u);
      }
    }
  }
}

uint64_t CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, void *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  int v31;
  char v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  int v41;
  id v42;
  Swift::Bool v43;
  void *v44;
  unsigned int v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t ObjectType;
  void *v52;
  uint64_t v53;
  void *v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  Swift::Bool v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  id v62;
  int v63;
  char v64;
  void *v65;
  Class isa;
  char v67;
  void *v68;
  id v69;
  char v70;
  objc_class *v72;
  char v73;
  _QWORD *v74;
  void *v75;
  char v76;
  id v77;
  id v78;
  uint64_t v79;
  id v80;
  void *v81;
  uint64_t (*v82)(void);
  id v83;
  id v84;
  id v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  UIEvent_optional v89;
  UIEvent_optional v90;

  v9 = type metadata accessor for PKInk();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (v19 = v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView,
        (v20 = MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v16)) != 0))
  {
    v21 = (_QWORD *)v20;
    v22 = (_QWORD *)MEMORY[0x1DF0E666C](v19);
    if (v22)
    {
      v23 = v22;
      v84 = a1;
      v87 = v4;
      v24 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v22) + 0x88))();
      v25 = a2;

      if (v24)
      {
        v85 = v25;
        v26 = *(void **)&v24[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
        v27 = v26;

        if (v26)
        {
          objc_msgSend(v21, sel_convertPoint_toCoordinateSpace_, v27, a3, a4);
          v28 = objc_msgSend(v27, sel_hitTest_withEvent_, v85);
          v83 = v28;
          if (v28)
          {
            v29 = v28;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
            v30 = v29;
            v31 = static NSObject.== infix(_:_:)();

            v86 = v31 ^ 1;
          }
          else
          {
            v86 = 0;
          }
          v82 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x88);
          v33 = v82();
          v80 = v27;
          if (v33)
          {
            v34 = (void *)v33;
            v35 = *(void **)(v33 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
            v36 = v35;

            v81 = v35;
            if (v35)
            {
              v37 = v36;
              objc_msgSend(v21, sel_convertPoint_toCoordinateSpace_, v37, a3, a4);
              v38 = objc_msgSend(v37, sel_hitTest_withEvent_, v85);

              if (v38)
              {
                v79 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
                v39 = v37;
                v40 = v38;
                v41 = static NSObject.== infix(_:_:)();
                v79 = (uint64_t)v40;

                v86 |= v41 ^ 1;
              }
              else
              {
                v79 = 0;
              }
            }
            else
            {
              v79 = 0;
              v81 = 0;
            }
          }
          else
          {
            v79 = 0;
            v81 = 0;
          }
          v42 = v85;
          v89.value.super.isa = (Class)a2;
          v43 = CanvasViewSelectionInteractionDelegate.canvasElementExistsAtPoint(_:for:)((CGPoint)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3), v89);

          if (v43)
          {
            if ((objc_msgSend(v42, sel_modifierFlags) & 0x20000) != 0
              || (objc_msgSend(v42, sel_modifierFlags) & 0x100000) != 0)
            {
              v86 = 1;
            }
            v44 = v83;
            if (v83)
            {
              v45 = objc_msgSend(v84, sel_hasCurrentSelection);
              v86 |= v45 ^ 1;
            }
          }
          else
          {
            v44 = v83;
          }
          v46 = (_QWORD *)v82();
          v85 = v42;
          if (v46)
          {
            v47 = v46;
            (*(void (**)(char *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v46) + 0x2C8))((char *)&v88 + 1);

            v86 |= BYTE1(v88) == 1;
          }
          v48 = MEMORY[0x1DF0E666C](v19);
          if (v48)
          {
            v49 = (_QWORD *)v48;
            v50 = *(_QWORD *)(v19 + 8);
            ObjectType = swift_getObjectType();
            v52 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v49) + 0x88))();
            if (v52)
            {
              v78 = v52;
              v84 = *(id *)(v50 + 144);
              v77 = v85;
              v53 = ((uint64_t (*)(uint64_t, uint64_t))v84)(ObjectType, v50);
              if (v53)
              {
                v54 = (void *)v53;
                v55 = v78;
                objc_msgSend(v78, sel_convertPoint_toCoordinateSpace_, v49, a3, a4);
                v90.value.super.isa = (Class)a2;
                v58 = FormFillingView.hitTestIncludingHiddenFields(_:with:)((CGPoint)__PAIR128__(v57, v56), v90);

                if (v58)
                {
                  v59 = (_QWORD *)v82();
                  if (v59
                    && (v60 = v59,
                        v61 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v59) + 0x320))(),
                        v60,
                        v61))
                  {
                    v62 = objc_msgSend(v61, "ink");

                    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
                    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v13, v9);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
                    v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v18, 1, v9);
                    v44 = v83;
                    v64 = v86;
                    v65 = v81;
                    if (v63 == 1)
                    {
                      isa = 0;
                    }
                    else
                    {
                      isa = PKInk._bridgeToObjectiveC()().super.isa;
                      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
                    }
                  }
                  else
                  {
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
                    isa = 0;
                    v44 = v83;
                    v64 = v86;
                    v65 = v81;
                  }
                  v68 = (void *)v79;
                  v72 = isa;
                  v73 = -[objc_class _isHandwritingInk](v72, "_isHandwritingInk");

                  v74 = (_QWORD *)v82();
                  if (v74)
                  {
                    v75 = v74;
                    (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v74) + 0x2C8))(&v88);

                    if (v88 == 3)
                      v76 = v73;
                    else
                      v76 = 1;
                    v67 = v76 | v64;
                  }
                  else
                  {
                    v67 = 1;
                  }
                  goto LABEL_42;
                }
              }
              else
              {

              }
            }
            else
            {

            }
            v44 = v83;
          }
          v67 = v86;
          v65 = v81;
          v68 = (void *)v79;
LABEL_42:
          v69 = v85;
          v70 = specialized CanvasViewSelectionInteractionDelegate.magicGenerativePlaygroundViewExists(at:for:)(a3, a4);

          v32 = v70 | v67;
          return v32 & 1;
        }

      }
      else
      {

      }
    }

    v32 = 0;
  }
  else
  {
    v32 = 0;
  }
  return v32 & 1;
}

Class @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void))
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  NSArray v12;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  v11 = a5();

  if (v11)
  {
    v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  return v12.super.isa;
}

void closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(void *a1, id a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, sel_layer);
  v4 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(v3, sel_renderInContext_, v4);

}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t result, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  unint64_t v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v28;
  CGFloat MinY;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  CGImage *v45;
  id v46;
  CGImage *v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat v67;
  CGFloat v68;
  CGAffineTransform aBlock;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  __C::CGRect v78;

  if (*(_QWORD *)(result + 16))
  {
    v7 = result;
    v8 = a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    result = MEMORY[0x1DF0E666C](a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (result)
    {
      v9 = (void *)result;
      v55 = a5;
      v10 = *(_QWORD *)(v8 + 8);
      ObjectType = swift_getObjectType();
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(ObjectType, v10);

      objc_msgSend(a3, sel_scale);
      v14 = v13;
      v15 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
      objc_msgSend(v15, sel_scale);
      v17 = v16;

      CGAffineTransformMakeScale(&aBlock, v14 * v17, v14 * v17);
      a = aBlock.a;
      b = aBlock.b;
      c = aBlock.c;
      d = aBlock.d;
      tx = aBlock.tx;
      ty = aBlock.ty;
      objc_msgSend(a3, sel_strokeBounds);
      v67 = b;
      v68 = a;
      aBlock.a = a;
      aBlock.b = b;
      v65 = d;
      v66 = c;
      aBlock.c = c;
      aBlock.d = d;
      v63 = ty;
      v64 = tx;
      aBlock.tx = tx;
      aBlock.ty = ty;
      v71 = CGRectApplyAffineTransform(v70, &aBlock);
      x = v71.origin.x;
      y = v71.origin.y;
      width = v71.size.width;
      height = v71.size.height;
      v28 = -CGRectGetMinX(v71);
      v62 = x;
      v72.origin.x = x;
      v72.origin.y = y;
      v72.size.width = width;
      v72.size.height = height;
      MinY = CGRectGetMinY(v72);
      CGAffineTransformMakeTranslation(&aBlock, v28, -MinY);
      v60 = aBlock.b;
      v61 = aBlock.a;
      v58 = aBlock.d;
      v59 = aBlock.c;
      v56 = aBlock.ty;
      v57 = aBlock.tx;
      v30 = specialized _arrayForceCast<A, B>(_:)(v7);
      v31 = specialized Set.init<A>(_:)(v30);
      swift_bridgeObjectRelease();
      v32 = specialized _ArrayProtocol.filter(_:)(v12, v31);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v32 >> 62)
        goto LABEL_15;
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v33)
      {
        while (v33 >= 1)
        {
          v34 = 0;
          while (1)
          {
            v35 = (v32 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1DF0E4D64](v34, v32)
                : *(id *)(v32 + 8 * v34 + 32);
            v36 = v35;
            objc_msgSend(v35, sel_bounds);
            v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithBounds_, v37, v38, v39, v40);
            v42 = swift_allocObject();
            *(_QWORD *)(v42 + 16) = v36;
            v43 = swift_allocObject();
            *(_QWORD *)(v43 + 16) = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.image(of:);
            *(_QWORD *)(v43 + 24) = v42;
            *(_QWORD *)&aBlock.tx = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
            *(_QWORD *)&aBlock.ty = v43;
            *(_QWORD *)&aBlock.a = MEMORY[0x1E0C809B0];
            *(_QWORD *)&aBlock.b = 1107296256;
            *(_QWORD *)&aBlock.c = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
            *(_QWORD *)&aBlock.d = &block_descriptor_19_1;
            v44 = _Block_copy(&aBlock);
            v45 = v36;
            swift_retain();
            swift_release();
            v46 = objc_msgSend(v41, sel_imageWithActions_, v44);

            _Block_release(v44);
            LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
            swift_release();
            swift_release();
            if ((v41 & 1) != 0)
              break;
            v47 = (CGImage *)objc_msgSend(v46, sel_CGImage);

            if (v47)
            {
              v73.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v45) + 0x178))();
              aBlock.a = v68;
              aBlock.b = v67;
              aBlock.c = v66;
              aBlock.d = v65;
              aBlock.tx = v64;
              aBlock.ty = v63;
              v74 = CGRectApplyAffineTransform(v73, &aBlock);
              aBlock.a = v61;
              aBlock.b = v60;
              aBlock.c = v59;
              aBlock.d = v58;
              aBlock.tx = v57;
              aBlock.ty = v56;
              v75 = CGRectApplyAffineTransform(v74, &aBlock);
              v48 = v75.origin.x;
              v49 = v75.origin.y;
              v50 = v75.size.width;
              v51 = v75.size.height;
              v75.origin.y = y;
              v75.origin.x = v62;
              v75.size.width = width;
              v75.size.height = height;
              v52 = CGRectGetHeight(v75);
              v76.origin.x = v48;
              v76.origin.y = v49;
              v76.size.width = v50;
              v76.size.height = v51;
              v53 = v52 - CGRectGetMinY(v76);
              v77.origin.x = v48;
              v77.origin.y = v49;
              v77.size.width = v50;
              v77.size.height = v51;
              v78.origin.y = v53 - CGRectGetHeight(v77);
              v78.origin.x = v48;
              v78.size.width = v50;
              v78.size.height = v51;
              CGContextRef.draw(_:in:byTiling:)(v47, v78, 0);

              v45 = v47;
            }
            ++v34;

            if (v33 == v34)
              goto LABEL_16;
          }
          __break(1u);
LABEL_15:
          result = _CocoaArrayWrapper.endIndex.getter();
          v33 = result;
          if (!result)
            goto LABEL_16;
        }
        __break(1u);
      }
      else
      {
LABEL_16:
        v54 = swift_bridgeObjectRelease();
        return v55(v54);
      }
    }
  }
  return result;
}

uint64_t @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(uint64_t))
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a5;
  v13 = a1;
  a6(v10);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t result;
  unint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(_QWORD);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  dispatch_queue_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  dispatch_queue_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD aBlock[6];

  v42 = a5;
  v43 = a7;
  v41 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14, v17);
  v18 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v38 - v21;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
    return a3(0);
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v38(v22, v13, v14);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v40 = (dispatch_queue_t)static OS_dispatch_queue.main.getter();
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v22, v14);
    v24 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v25 = (v16 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    v26 = a3;
    v27 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
    v28 = swift_allocObject();
    v39 = v22;
    v29 = v41;
    v30 = v42;
    *(_QWORD *)(v28 + 16) = v42;
    *(_QWORD *)(v28 + 24) = v29;
    v38((char *)(v28 + v24), v18, v14);
    v31 = (_QWORD *)(v28 + v25);
    *v31 = v26;
    v31[1] = a4;
    v32 = v43;
    *(_QWORD *)(v28 + v27) = v43;
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = partial apply for closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:);
    *(_QWORD *)(v33 + 24) = v28;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v33;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_42;
    v34 = _Block_copy(aBlock);
    v35 = v30;
    swift_retain();
    v36 = v32;
    swift_retain();
    swift_release();
    v37 = v40;
    dispatch_sync(v40, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v39, v14);
    LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    result = swift_release();
    if ((v37 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v12;
  size_t v13;
  uint64_t v14;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(a2 + 112))(a3, 0, 0, 0, 1, ObjectType, a2);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView))
  {
    v12 = swift_bridgeObjectRetain();
    v13 = specialized _copyCollectionToContiguousArray<A>(_:)(v12);
    swift_bridgeObjectRelease();
    v14 = specialized _arrayForceCast<A, B>(_:)(v13);
    swift_release();
    a4(v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *CanvasViewSelectionInteractionDelegate.view(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char v28[32];

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v15 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v11);
  if (!v15)
    return 0;
  v16 = (void *)v15;
  v27 = v3;
  v17 = *(_QWORD *)(v14 + 8);
  ObjectType = swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v28);
  swift_dynamicCast();
  MEMORY[0x1DF0E30E4](v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);

  if (*(_QWORD *)(v19 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7), (v21 & 1) != 0))
  {
    v22 = *(void **)(*(_QWORD *)(v19 + 56) + 8 * v20);
    v23 = v22;
  }
  else
  {
    v22 = 0;
  }
  v24 = v27;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v24);
  return v22;
}

uint64_t @objc CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, SEL *a9)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _BYTE v20[32];

  v14 = a3;
  v15 = a4;
  v16 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v17 = a8;
  v18 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)((uint64_t)v15, (uint64_t)v16, a6, (uint64_t)v20, a9);

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  v5[5] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[6] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = (_QWORD *)MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v1
    && (v2 = v1,
        v3 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(),
        *(_QWORD *)(v0 + 56) = v3,
        v2,
        v3))
  {
    v4 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool];
    *(_QWORD *)(v0 + 64) = v4;
    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 24);
      v4;
      v6 = specialized Sequence.compactMap<A>(_:)(v5);
      v7 = specialized Set.init<A>(_:)(v6);
      *(_QWORD *)(v0 + 72) = v7;
      swift_bridgeObjectRelease();
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 80) = v8;
      *v8 = v0;
      v8[1] = closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:);
      return CanvasGenerationTool.initiateMagicGenerativePlayground(for:)(MEMORY[0x1E0DEE9E8], v7, 6, 0);
    }
    swift_release();

  }
  else
  {
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 56);
  v2 = *(void **)(v0 + 64);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, Swift::OpaquePointer a5)
{
  uint64_t v8;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = specialized _copySequenceToContiguousArray<A>(_:)(a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  HandwritingReflowView.replaceStrokes(_:with:animateRefinement:)(a5, (Swift::OpaquePointer)v8, 1);
  return swift_release();
}

uint64_t closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  char *v28;
  id v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  char v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char v49[32];

  v4 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v46 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v48, v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v17, v18);
  v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v45 - v22;
  v26 = MEMORY[0x1E0C80A78](v24, v25);
  v28 = (char *)&v45 - v27;
  v29 = objc_msgSend(*a1, sel_pdfAnnotationUUID, v26);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  CRKeyPath.init(_:)();
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v30(v28, 0, 1, v4);
  outlined init with copy of Any(a2, (uint64_t)v49);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v32 = swift_dynamicCast();
  v33 = *(_QWORD *)(v31 - 8);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
  if ((v32 & 1) != 0)
  {
    v34(v14, 0, 1, v31);
    MEMORY[0x1DF0E3168](v31);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v31);
    v35 = v23;
    v36 = 0;
  }
  else
  {
    v34(v14, 1, 1, v31);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
    v35 = v23;
    v36 = 1;
  }
  v30(v35, v36, 1, v4);
  v37 = (uint64_t)&v10[*(int *)(v48 + 48)];
  v38 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v28, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v23, v37, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v39((uint64_t)v10, 1, v4) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v39(v37, 1, v4) == 1)
    {
      v40 = -1;
    }
    else
    {
      v38 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
      v40 = 0;
    }
  }
  else
  {
    v41 = (uint64_t)v47;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    if (v39(v37, 1, v4) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v41, v4);
      v40 = 0;
      v38 = (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?);
    }
    else
    {
      v42 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v46, v37, v4);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v40 = dispatch thunk of static Equatable.== infix(_:_:)();
      v43 = *(void (**)(char *, uint64_t))(v5 + 8);
      v43(v42, v4);
      v38 = (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      v43(v47, v4);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v38);
  return v40 & 1;
}

void *CanvasViewSelectionInteractionDelegate.activeWidget.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  char *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v17;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v6 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 144))(ObjectType, v4);

    if (v6)
    {
      v7 = (unint64_t *)&v6[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
      swift_beginAccess();
      v8 = *v7;
      swift_bridgeObjectRetain();

      if (v8 >> 62)
        goto LABEL_18;
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
      swift_bridgeObjectRelease();
      v9 = v8;
      while (1)
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v10)
          break;
        while (1)
        {
          v11 = 4;
          while (1)
          {
            v12 = (v9 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1DF0E4D64](v11 - 4, v8)
                : *(id *)(v8 + 8 * v11);
            v13 = v12;
            v14 = v11 - 3;
            if (__OFADD__(v11 - 4, 1))
              break;
            v15 = objc_msgSend(v12, sel_uiControl);
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITextView);
            if ((swift_dynamicCast() & 1) != 0)
            {
              swift_bridgeObjectRelease_n();

              return v13;
            }

            ++v11;
            if (v14 == v10)
              goto LABEL_13;
          }
          __break(1u);
LABEL_18:
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
          swift_bridgeObjectRetain();
          v9 = _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease_n();
          v8 = v9;
          if (!(v9 >> 62))
            break;
          swift_bridgeObjectRetain();
          v10 = _CocoaArrayWrapper.endIndex.getter();
          if (!v10)
            goto LABEL_13;
        }
      }
LABEL_13:
      swift_bridgeObjectRelease_n();
    }
  }
  return 0;
}

id CanvasViewSelectionInteractionDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasViewSelectionInteractionDelegate()
{
  return objc_opt_self();
}

unint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, const CGPath *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const CGPath *v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, unint64_t);
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  CGPathRef v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v3 = v2;
  v69 = a2;
  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v57 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v8);
  v54 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for CGPathFillRule();
  v66 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v10);
  v64 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v68 = (char *)&v52 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v67 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v65 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v53 = (char *)&v52 - v24;
  if (a1 >> 62)
    goto LABEL_21;
  v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v25; v25 = _CocoaArrayWrapper.endIndex.getter())
  {
    v70 = v19;
    v52 = v3;
    v62 = a1 & 0xC000000000000001;
    v59 = *MEMORY[0x1E0C9B8A0];
    v58 = *MEMORY[0x1E0C9B898];
    v71 = v18;
    v72 = MEMORY[0x1E0DEE9D8];
    v26 = 4;
    v60 = v25;
    v61 = a1;
    v27 = v68;
    v19 = v63;
    v28 = v64;
    while (1)
    {
      v3 = v26 - 4;
      v30 = v62 ? (_QWORD *)MEMORY[0x1DF0E4D64](v26 - 4, a1) : *(id *)(a1 + 8 * v26);
      v31 = v30;
      if (__OFADD__(v3, 1))
        break;
      v73 = v26 - 3;
      v78 = v26;
      v32 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v33 = (const CGPath *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v30) + 0x1D8))();
      v34 = v66;
      v35 = *(void (**)(char *, _QWORD, uint64_t))(v66 + 104);
      v35(v27, v59, v19);
      v35(v28, v58, v19);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule, (uint64_t (*)(uint64_t))MEMORY[0x1E0C9B8A8], MEMORY[0x1E0C9B8B0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      LOBYTE(v35) = v76 == v74;
      v36 = *(void (**)(char *, uint64_t))(v34 + 8);
      v36(v28, v19);
      LODWORD(v35) = CGPathIntersectsPath(v33, v69, (BOOL)v35);

      v37 = ((uint64_t (*)(char *, uint64_t))v36)(v27, v19);
      if ((_DWORD)v35)
      {
        v38 = v54;
        (*(void (**)(uint64_t))((*v32 & *v31) + 0xE8))(v37);
        v39 = v56;
        SharedTagged_9.tag.getter();
        v74 = v76;
        v75 = v77;
        MEMORY[0x1DF0E3408](v39);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        v40 = (uint64_t)v67;
        WeakTagged_9.init(_:id:)();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v39);
        v41 = 0;
      }
      else
      {
        v41 = 1;
        v40 = (uint64_t)v67;
      }
      v42 = v70;
      v18 = v71;
      (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v70 + 56))(v40, v41, 1, v71);

      v43 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v42 + 48))(v40, 1, v18);
      a1 = v61;
      v44 = v78;
      if (v43 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v40, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
        v29 = v60;
      }
      else
      {
        v45 = *(void (**)(char *, uint64_t, unint64_t))(v42 + 32);
        v46 = v53;
        v45(v53, v40, v18);
        v45(v65, (uint64_t)v46, v18);
        v47 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
        v18 = *(_QWORD *)(v47 + 16);
        v48 = *(_QWORD *)(v47 + 24);
        v72 = v47;
        v29 = v60;
        if (v18 >= v48 >> 1)
          v72 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v18 + 1, 1, v72);
        v49 = v71;
        v50 = v72;
        *(_QWORD *)(v72 + 16) = v18 + 1;
        v45((char *)(v50+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v18), (uint64_t)v65, v49);
      }
      v26 = v44 + 1;
      if (v73 == v29)
      {
        swift_bridgeObjectRelease();
        return v72;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    v5 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v5, a1) : *(id *)(a1 + 32 + 8 * v5);
      v8 = v7;
      if (__OFADD__(v5++, 1))
        break;
      if (v6)
      {
        swift_bridgeObjectRetain();
        v10 = a2 + 40;
        v11 = v6;
        while (((*(uint64_t (**)(void *))(*(_QWORD *)v10 + 32))(v8) & 1) == 0)
        {
          v10 += 16;
          if (!--v11)
          {

            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        v12 = swift_bridgeObjectRelease();
        MEMORY[0x1DF0E4398](v12);
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
LABEL_17:
        if (v5 == v4)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          return v14;
        }
      }
      else
      {

        if (v5 == v4)
          goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;

  v5 = type metadata accessor for CRKeyPath();
  v25 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v23 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0DEE9D8];
  v27 = MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v21[0] = a1;
    v21[1] = v2;
    v15 = a1 + 32;
    swift_bridgeObjectRetain();
    v24 = MEMORY[0x1E0DEE9B8] + 8;
    v16 = v23;
    v22 = a2;
    do
    {
      outlined init with copy of Any(v15, (uint64_t)v26);
      swift_dynamicCast();
      MEMORY[0x1DF0E30E4](v9);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v9);
      if (*(_QWORD *)(a2 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v18 & 1) != 0))
      {
        v19 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v17);
        v20 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v8, v5);
        MEMORY[0x1DF0E4398](v20);
        if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        a2 = v22;
        v16 = v23;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
      }
      v15 += 32;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    return v27;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;

  v50 = a2;
  v3 = type metadata accessor for CRKeyPath();
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v13);
  v49 = (char *)&v44 - v14;
  v53 = MEMORY[0x1E0DEE9D8];
  v15 = *(_QWORD *)(a1 + 56);
  v45 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v48 = (unint64_t)(v16 + 63) >> 6;
  v51 = a1;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (v18)
  {
    v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v22 = v21 | (v20 << 6);
LABEL_24:
    v26 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v49, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v8 + 72) * v22, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v26, v7);
    v27 = (_QWORD *)MEMORY[0x1DF0E666C](v50 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (v27)
    {
      v28 = v27;
      v52 = v20;
      v29 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v27) + 0x2F8))();
      v31 = v30;

      v32 = v12;
      ObjectType = swift_getObjectType();
      v34 = v7;
      v35 = v7;
      v36 = v32;
      MEMORY[0x1DF0E30E4](v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 32))(ObjectType, v31);

      if (!*(_QWORD *)(v37 + 16))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
        v12 = v36;
        v7 = v34;
        v20 = v52;
        goto LABEL_5;
      }
      v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
      if ((v39 & 1) != 0)
      {
        v40 = *(id *)(*(_QWORD *)(v37 + 56) + 8 * v38);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
        v12 = v36;
        v41 = v36;
        v7 = v34;
        v42 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v41, v34);
        MEMORY[0x1DF0E4398](v42);
        if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized Array._endMutation()();
        v20 = v52;
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v47);
        v12 = v36;
        v43 = v36;
        v7 = v34;
        result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v43, v34);
        v20 = v52;
      }
    }
    else
    {
LABEL_5:
      result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    }
  }
  v23 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v23 >= v48)
    goto LABEL_31;
  v24 = *(_QWORD *)(v45 + 8 * v23);
  ++v20;
  if (v24)
    goto LABEL_23;
  v20 = v23 + 1;
  if (v23 + 1 >= v48)
    goto LABEL_31;
  v24 = *(_QWORD *)(v45 + 8 * v20);
  if (v24)
    goto LABEL_23;
  v20 = v23 + 2;
  if (v23 + 2 >= v48)
    goto LABEL_31;
  v24 = *(_QWORD *)(v45 + 8 * v20);
  if (v24)
    goto LABEL_23;
  v20 = v23 + 3;
  if (v23 + 3 >= v48)
    goto LABEL_31;
  v24 = *(_QWORD *)(v45 + 8 * v20);
  if (v24)
  {
LABEL_23:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_24;
  }
  v25 = v23 + 4;
  if (v25 >= v48)
  {
LABEL_31:
    swift_release();
    return v53;
  }
  v24 = *(_QWORD *)(v45 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_23;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v48)
      goto LABEL_31;
    v24 = *(_QWORD *)(v45 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
LABEL_33:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  int64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_BYTE *, uint64_t);
  unint64_t i;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  void (*v72)(_BYTE *, uint64_t, uint64_t);
  void (*v73)(_BYTE *, unint64_t, uint64_t);
  _BYTE *v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v70 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v69 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v58 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10, v11);
  v68 = &v56[-v12];
  v13 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v13, v14);
  v67 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v63 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v16);
  v18 = &v56[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v57 = &v56[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = &v56[-v25];
  MEMORY[0x1E0C80A78](v27, v28);
  v65 = &v56[-v29];
  v77 = MEMORY[0x1E0DEE9D8];
  v30 = *(_QWORD *)(a1 + 64);
  v59 = a1 + 64;
  v31 = 1 << *(_BYTE *)(a1 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v64 = a2 + OBJC_IVAR___PKDrawingCoherence_model;
  v71 = a1;
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v35 = 0;
  v60 = (unint64_t)(v31 + 63) >> 6;
  v61 = v19;
  v62 = v20;
  v74 = v26;
  v36 = v64;
  if (v33)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v39 = v35 + 1;
    if (!__OFADD__(v35, 1))
    {
      if (v39 < v60)
      {
        v40 = *(_QWORD *)(v59 + 8 * v39);
        v41 = v35 + 1;
        if (v40)
          goto LABEL_23;
        v41 = v35 + 2;
        if (v35 + 2 >= v60)
          goto LABEL_30;
        v40 = *(_QWORD *)(v59 + 8 * v41);
        if (v40)
          goto LABEL_23;
        v41 = v35 + 3;
        if (v35 + 3 >= v60)
          goto LABEL_30;
        v40 = *(_QWORD *)(v59 + 8 * v41);
        if (v40)
          goto LABEL_23;
        v41 = v35 + 4;
        if (v35 + 4 >= v60)
          goto LABEL_30;
        v40 = *(_QWORD *)(v59 + 8 * v41);
        if (v40)
        {
LABEL_23:
          v75 = (v40 - 1) & v40;
          v76 = v41;
          for (i = __clz(__rbit64(v40)) + (v41 << 6); ; i = __clz(__rbit64(v33)) | (v35 << 6))
          {
            v43 = *(_QWORD *)(v71 + 48) + *(_QWORD *)(v20 + 72) * i;
            v44 = v65;
            v73 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v20 + 16);
            v73(v65, v43, v19);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v26, v44, v19);
            Ref.id.getter();
            v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
            lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
            WeakRef.init(id:)();
            v46 = v18;
            v47 = v68;
            v48 = v69;
            v72 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v69 + 16);
            v72(v68, v36, v7);
            type metadata accessor for PKDrawingStruct();
            lazy protocol witness table accessor for type PKDrawingStruct and conformance PKDrawingStruct();
            v49 = v7;
            v50 = (uint64_t)v70;
            v51 = v66;
            WeakRef.subscript.getter();
            (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v47, v49);
            LODWORD(v45) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v50, 1, v45);
            outlined destroy of StocksKitCurrencyCache.Provider?(v50, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
            if ((_DWORD)v45 == 1)
              break;
            v52 = (uint64_t)v57;
            v19 = v61;
            v73(v57, (unint64_t)v74, v61);
            v53 = (uint64_t)v58;
            v72(v58, v36, v49);
            v54 = specialized PKStrokeCoherence.__allocating_init<A>(strokeNodeRef:in:)(v52, v53);
            (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v46, v51);
            v20 = v62;
            v37 = *(uint64_t (**)(_BYTE *, uint64_t))(v62 + 8);
            v7 = v49;
            v18 = v46;
            if (!v54)
              goto LABEL_6;
            v26 = v74;
            v55 = v37(v74, v19);
            MEMORY[0x1DF0E4398](v55);
            if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            result = specialized Array._endMutation()();
            v33 = v75;
            v35 = v76;
            if (!v75)
              goto LABEL_8;
LABEL_7:
            v75 = (v33 - 1) & v33;
            v76 = v35;
          }
          (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v46, v51);
          v19 = v61;
          v20 = v62;
          v37 = *(uint64_t (**)(_BYTE *, uint64_t))(v62 + 8);
          v7 = v49;
          v18 = v46;
LABEL_6:
          v26 = v74;
          v33 = v75;
          v35 = v76;
          result = v37(v74, v19);
          if (!v33)
            continue;
          goto LABEL_7;
        }
        v42 = v35 + 5;
        if (v35 + 5 < v60)
        {
          v40 = *(_QWORD *)(v59 + 8 * v42);
          if (v40)
          {
            v41 = v35 + 5;
            goto LABEL_23;
          }
          while (1)
          {
            v41 = v42 + 1;
            if (__OFADD__(v42, 1))
              goto LABEL_32;
            if (v41 >= v60)
              break;
            v40 = *(_QWORD *)(v59 + 8 * v41);
            ++v42;
            if (v40)
              goto LABEL_23;
          }
        }
      }
LABEL_30:
      swift_release();
      return v77;
    }
    break;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char v21;
  _QWORD v23[2];
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v3 = v2;
  v31 = a2;
  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v26 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v32 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v30 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  v13.n128_f64[0] = MEMORY[0x1E0C80A78](v11, v12);
  v27 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0DEE9D8];
  v33 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v15 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v15)
  {
    while (1)
    {
      v16 = 0;
      v25 = v33 & 0xC000000000000001;
      v23[1] = v3;
      v24 = v33 & 0xFFFFFFFFFFFFFF8;
      v17 = (uint64_t)v27;
      while (v25)
      {
        v18 = (_QWORD *)MEMORY[0x1DF0E4D64](v16, v33, v13);
LABEL_9:
        v19 = v18;
        v3 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_15;
        v20 = v30;
        (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v18) + 0xE8))();
        SharedTagged_9.tag.getter();
        v34 = v36;
        v35 = v37;
        MEMORY[0x1DF0E3408](v8);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        WeakTagged_9.init(_:id:)();
        (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v8);
        v21 = specialized Set.contains(_:)(v17, v31);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v17, v29);
        if ((v21 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v16;
        if (v3 == v15)
          return v38;
      }
      if (v16 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      v15 = _CocoaArrayWrapper.endIndex.getter();
      if (!v15)
        return MEMORY[0x1E0DEE9D8];
    }
    v18 = *(id *)(v33 + 8 * v16 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  void *v7;
  char v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  unint64_t j;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = a1;
  v27 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_27;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
  {
    v21 = v3;
    v5 = 0;
    v24 = v3 & 0xFFFFFFFFFFFFFF8;
    v25 = v3 & 0xC000000000000001;
    v23 = v3 + 32;
    v22 = i;
    v26 = a2 + 56;
    while (1)
    {
      if (v25)
      {
        v6 = (id)MEMORY[0x1DF0E4D64](v5, v21);
        goto LABEL_9;
      }
      if (v5 >= *(_QWORD *)(v24 + 16))
        break;
      v6 = *(id *)(v23 + 8 * v5);
LABEL_9:
      v7 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_26;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v3 = (uint64_t)v6;
        v9 = __CocoaSet.contains(_:)();

        if ((v9 & 1) == 0)
        {

          goto LABEL_5;
        }
LABEL_4:
        v3 = (uint64_t)&v27;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
LABEL_5:
        i = v22;
        if (v5 == v22)
          return v27;
      }
      else
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v3 = (uint64_t)v6;
          v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v11 = -1 << *(_BYTE *)(a2 + 32);
          v12 = v10 & ~v11;
          if (((*(_QWORD *)(v26 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          {
            v3 = type metadata accessor for AnyCanvasElementView();
            v13 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v12);
            v14 = static NSObject.== infix(_:_:)();

            if ((v14 & 1) == 0)
            {
              v15 = ~v11;
              for (j = v12 + 1; ; j = v17 + 1)
              {
                v17 = j & v15;
                if (((*(_QWORD *)(v26 + (((j & v15) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v15)) & 1) == 0)
                  break;
                v18 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v17);
                v19 = static NSObject.== infix(_:_:)();

                if ((v19 & 1) != 0)
                  goto LABEL_4;
              }

              goto LABEL_5;
            }
            goto LABEL_4;
          }
        }

        if (v5 == i)
          return v27;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    ;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t ObjectType;
  unint64_t v13;
  const CGPath *v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  Class isa;
  id v22;
  _QWORD *v23;
  void *v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v36;
  _BYTE v37[24];
  ValueMetadata *v38;
  unint64_t v39;

  v38 = &type metadata for PencilAndPaperFeatureFlags;
  v39 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v37[0] = 0;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  if ((v5 & 1) != 0)
  {
    if (a1)
    {
      v6 = objc_msgSend(a1, sel_CGPath);
      if (v6)
      {
        v7 = v6;
        v8 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
        v9 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
        if (v9)
        {
          v10 = (_QWORD *)v9;
          v11 = *(_QWORD *)(v8 + 8);
          ObjectType = swift_getObjectType();
          v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
          v14 = v7;
          specialized Sequence.compactMap<A>(_:)(v13, v14);
          swift_bridgeObjectRelease();

          v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
          v16 = a1;
          v17 = v15(ObjectType, v11);
          if (v17)
          {
            v18 = (void *)v17;
            v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate);
            if (v19
              && (v20 = *(void **)(v19 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) != 0)
            {
              type metadata accessor for UUID();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
              v36 = v20;
              isa = Set._bridgeToObjectiveC()().super.isa;
              v22 = objc_msgSend(v36, sel_adjustedSelectedStrokes_selectionPath_, isa, v16);

              a2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              swift_bridgeObjectRetain();

            }
          }
          else
          {

            swift_bridgeObjectRetain();
          }
          v28 = swift_bridgeObjectRetain();
          v29 = specialized Set.init<A>(_:)(v28);
          swift_bridgeObjectRelease();
          v30 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
          v31 = specialized Set.init<A>(_:)(v30);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = swift_bridgeObjectRelease();
          v33 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x88))(v32);
          if (v33)
          {
            v34 = (void *)v33;
            AnyCanvas.selection.setter(v29, v31, 6, 0);

          }
          else
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          goto LABEL_18;
        }

      }
    }
    v23 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v23)
    {
      v24 = v23;
      v14 = (const CGPath *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x88))();

      if (v14)
      {
        swift_bridgeObjectRetain();
        v25 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
        v26 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
        v27 = specialized Set.init<A>(_:)(v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        AnyCanvas.selection.setter(v25, v27, 6, 0);
LABEL_18:

      }
    }
  }
  return v5 & 1;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.magicGenerativePlaygroundViewExists(at:for:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  result = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (result)
  {
    v7 = (void *)result;
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)result) + 0x88))();

    if (v9
      && (v10 = (void *)MEMORY[0x1DF0E666C](v5),
          objc_msgSend(v9, sel_convertPoint_toView_, v10, a1, a2),
          v12 = v11,
          v14 = v13,
          v10,
          v15 = (void *)(*(uint64_t (**)(double, double))((*v8 & *v9) + 0x7A0))(v12, v14),
          v9,
          v15))
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t ObjectType;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  CGFloat MidX;
  CGFloat MidY;
  id v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  CGRect v84;
  CGRect v85;

  v10 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v14, v15);
  v75 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v74 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72, v17);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v71 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v79 = (char *)&v69 - v30;
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v73 = (char *)&v69 - v34;
  v35 = v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v36 = MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v33);
  v69 = v13;
  if (v36)
  {
    v37 = (void *)v36;
    v70 = v35;
    v38 = *(_QWORD *)(v35 + 8);
    ObjectType = swift_getObjectType();
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 64))(ObjectType, v38);

    v41 = v40;
    v78 = v40;
    if (v40 >> 62)
    {
      swift_bridgeObjectRetain();
      v41 = v78;
      v42 = _CocoaArrayWrapper.endIndex.getter();
      if (v42)
        goto LABEL_4;
    }
    else
    {
      v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v42)
      {
LABEL_4:
        if (v42 < 1)
        {
          __break(1u);
LABEL_38:
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
          goto LABEL_29;
        }
        v77 = v42;
        v43 = 0;
        v76 = v41 & 0xC000000000000001;
        v5 = MEMORY[0x1E0DEE9D8];
        v44 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        do
        {
          if (v76)
            v45 = (_QWORD *)MEMORY[0x1DF0E4D64](v43, v41);
          else
            v45 = *(id *)(v41 + 8 * v43 + 32);
          v46 = v45;
          v47 = (void *)(*(uint64_t (**)(_QWORD *))((*v44 & *v45) + 0x1D8))(v45);
          v48 = CGPathIntersectsRect();

          if (v48)
          {
            (*(void (**)(uint64_t))((*v44 & *v46) + 0xE8))(v49);
            v50 = v72;
            SharedTagged_9.tag.getter();
            v80 = v82;
            v81 = v83;
            MEMORY[0x1DF0E3408](v50);
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            WeakTagged_9.init(_:id:)();
            (*(void (**)(char *, uint64_t))(v74 + 8))(v19, v50);
            v51 = 0;
          }
          else
          {
            v51 = 1;
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, v51, 1, v24);

          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
          }
          else
          {
            v52 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
            v53 = v73;
            v52(v73, v23, v24);
            v52(v79, v53, v24);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
            v55 = *(_QWORD *)(v5 + 16);
            v54 = *(_QWORD *)(v5 + 24);
            if (v55 >= v54 >> 1)
              v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1, v5);
            *(_QWORD *)(v5 + 16) = v55 + 1;
            v52((char *)(v5+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v55), v79, v24);
          }
          v41 = v78;
          v44 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          ++v43;
        }
        while (v77 != v43);
        goto LABEL_23;
      }
    }
    v5 = MEMORY[0x1E0DEE9D8];
LABEL_23:
    swift_bridgeObjectRelease_n();
    v35 = v70;
    goto LABEL_24;
  }
  v5 = 0;
LABEL_24:
  v56 = MEMORY[0x1DF0E666C](v35);
  if (!v56)
    goto LABEL_32;
  v57 = (void *)v56;
  v58 = *(_QWORD *)(v35 + 8);
  v59 = swift_getObjectType();
  v60 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 144))(v59, v58);

  if (!v60)
    goto LABEL_32;
  v84.origin.x = a1;
  v84.origin.y = a2;
  v84.size.width = a3;
  v84.size.height = a4;
  MidX = CGRectGetMidX(v84);
  v85.origin.x = a1;
  v85.origin.y = a2;
  v85.size.width = a3;
  v85.size.height = a4;
  MidY = CGRectGetMidY(v85);
  v41 = (unint64_t)FormFillingView.widget(at:)(MidX, MidY);

  if (!v41)
    goto LABEL_32;
  if (!v5)
  {

    return 0;
  }
  LOBYTE(v82) = 8;
  v63 = objc_msgSend((id)v41, sel_pdfAnnotationUUID, v69);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_38;
LABEL_29:
  v65 = *(_QWORD *)(v5 + 16);
  v64 = *(_QWORD *)(v5 + 24);
  if (v65 >= v64 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v5);
  *(_QWORD *)(v5 + 16) = v65 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v5+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(_QWORD *)(v25 + 72) * v65, v71, v24);

LABEL_32:
  if (!v5)
    return 0;
  v66 = swift_bridgeObjectRetain();
  v67 = specialized _arrayForceCast<A, B>(_:)(v66);
  swift_bridgeObjectRelease_n();
  return v67;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  unint64_t v8;
  const CGPath *v9;
  unint64_t v10;
  uint64_t v11;

  v2 = objc_msgSend(a1, sel_CGPath);
  v3 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v4 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);

    v9 = (const CGPath *)v2;
    v10 = specialized Sequence.compactMap<A>(_:)(v8, v9);
    swift_bridgeObjectRelease();

    v11 = specialized _arrayForceCast<A, B>(_:)(v10);
    swift_bridgeObjectRelease();

  }
  else
  {

    return 0;
  }
  return v11;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  id v47;
  void *v48;
  NSObject *v49;
  NSObject *v50;
  id v51;
  char v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD v69[5];

  v5 = type metadata accessor for Logger();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69[3] = &type metadata for PencilAndPaperFeatureFlags;
  v69[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v69[0]) = 0;
  v10 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
  if ((v10 & 1) == 0)
  {
    v11 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v11)
    {
      v12 = v11;
      v13 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x88))();

      if (v13)
      {
        v65 = a1;
        v66 = v6;
        v14 = specialized _arrayForceCast<A, B>(_:)(a2);
        v67 = specialized Set.init<A>(_:)((uint64_t)v14);
        swift_bridgeObjectRelease();
        v15 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
        v16 = *(char **)(v13 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
        if (v16)
        {
          v14 = *(NSObject **)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
          v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
          v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
          v19 = v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          v20 = v16;
          v21 = v67;
          v64 = v18;
          LODWORD(v67) = v19;
          CanvasElementResizeView.selection.setter(v21, v17, v18, v19);

          v68 = (char *)v13;
          v22 = *(_QWORD *)(v13 + v15);
          if (v22)
          {
            v23 = v15;
            v24 = v22 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
            v25 = *(_QWORD *)v24;
            v26 = *(_QWORD *)(v24 + 8);
            v27 = *(_QWORD *)(v24 + 16);
            v28 = *(unsigned __int8 *)(v24 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((specialized static Set.== infix(_:_:)((uint64_t)v14, v25) & 1) != 0)
            {
              v63 = v27;
              v29 = specialized static Set.== infix(_:_:)(v17, v26);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v30 = v68;
              v31 = v66;
              if ((v29 & 1) != 0)
              {
                if ((v67 & 1) != 0)
                {
                  if (v28)
                    goto LABEL_40;
                }
                else
                {
                  if (v64 == v63)
                    v52 = v28;
                  else
                    v52 = 1;
                  if ((v52 & 1) == 0)
                  {
LABEL_40:
                    v59 = *(_QWORD *)&v30[v23];
                    if (v59)
                    {
                      v60 = (_QWORD *)(v59 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
                      if (!*(_QWORD *)(*v60 + 16) && !*(_QWORD *)(v60[1] + 16))
                        goto LABEL_48;
                      if ((objc_msgSend(v65, sel_currentSelectionHasStrokes) & 1) != 0)
                      {
                        v61 = 2;
LABEL_47:
                        type metadata accessor for Analytics();
                        swift_initStaticObject();
                        Analytics.recordDidMakeSelection(type:contentType:)(1, v61);
LABEL_48:

                        return;
                      }
                      v62 = *(_QWORD *)&v30[v23];
                      if (v62)
                      {
                        v61 = *(_QWORD *)(*(_QWORD *)(v62 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection)
                                        + 16) > 1uLL;
                        goto LABEL_47;
                      }
LABEL_57:
                      __break(1u);
                      return;
                    }
                    goto LABEL_53;
                  }
                }
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v30 = v68;
              v31 = v66;
            }
            if (one-time initialization token for miniMenuLogger != -1)
              swift_once();
            v32 = __swift_project_value_buffer(v5, (uint64_t)miniMenuLogger);
            (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v9, v32, v5);
            v14 = v30;
            v33 = Logger.logObject.getter();
            v34 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v33, v34))
            {
              v35 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)v35 = 134217984;
              v36 = *(_QWORD *)&v30[v23];
              if (!v36)
              {
LABEL_55:

                __break(1u);
                goto LABEL_56;
              }
              v37 = v35;
              v38 = *(_QWORD *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);

              v69[0] = v38;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl(&dword_1DDB0F000, v33, v34, "Changing selection to have %ld elements", v37, 0xCu);
              MEMORY[0x1DF0E6558](v37, -1, -1);
              v30 = v68;
            }
            else
            {

              v33 = v14;
            }

            v39 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v9, v5);
            MEMORY[0x1E0C80A78](v39, v40);
            *(&v63 - 2) = (uint64_t)v14;
            AnyCanvas.updateCanvasState(_:)();
            if ((-[NSObject isFirstResponder](v14, sel_isFirstResponder) & 1) != 0)
              goto LABEL_34;
            v41 = *(void **)&v30[v23];
            if (!v41)
            {
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
            v42 = v41;
            v43 = swift_bridgeObjectRetain();
            v44 = specialized Sequence.compactMap<A>(_:)(v43, (uint64_t)v42);

            swift_bridgeObjectRelease();
            if (v44 >> 62)
            {
              swift_bridgeObjectRetain();
              v45 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
            if (!v45)
            {
LABEL_34:
              v53 = *(Class *)((char *)&v14->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
              if (v53)
              {
                v54 = v53;
                HandwritingReflowView.updateForNewSelection()();

              }
              v55 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v14->isa) + 0x3A0))();
              v56 = *(_QWORD *)&v30[v23];
              if (!v56)
                goto LABEL_54;
              v57 = (_QWORD *)(v56 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
              if (!*(_QWORD *)(*v57 + 16) && !*(_QWORD *)(v57[1] + 16))
              {
                v58 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)v14->isa) + 0x320))(v55);
                objc_msgSend(v58, sel__clearSelectionIfNecessary);

              }
              goto LABEL_40;
            }
            v46 = v14;
            v47 = -[NSObject window](v46, sel_window);
            if (v47)
            {
              v48 = v47;
              v49 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v47);
              if (v49)
              {
                v50 = v49;
                v51 = -[NSObject _visibilityUpdatesEnabled](v49, sel__visibilityUpdatesEnabled);
                -[NSObject _setVisibilityUpdatesEnabled:](v50, sel__setVisibilityUpdatesEnabled_, 0);
                -[NSObject becomeFirstResponder](v46, sel_becomeFirstResponder);
                -[NSObject _setVisibilityUpdatesEnabled:](v50, sel__setVisibilityUpdatesEnabled_, v51);

                v46 = v50;
LABEL_33:

                goto LABEL_34;
              }

            }
            -[NSObject becomeFirstResponder](v46, sel_becomeFirstResponder);
            goto LABEL_33;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(uint64_t a1, CGFloat *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  void *v27;
  double v28;
  double v29;
  void *v30;
  double v31;
  double v32;
  void *v33;
  void *v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  double v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD v62[2];
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  CGAffineTransform v68;
  CGRect v69;
  CGRect v70;

  v5 = type metadata accessor for CRKeyPath();
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v68.d = &type metadata for PencilAndPaperFeatureFlags;
  *(_QWORD *)&v68.tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v68.a) = 0;
  v14 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  if ((v14 & 1) != 0)
    return;
  v15 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v16 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v16)
    return;
  v17 = (void *)v16;
  v18 = *(_QWORD *)(v15 + 8);
  ObjectType = swift_getObjectType();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);

  v21 = (_QWORD *)MEMORY[0x1DF0E666C](v15);
  if (!v21
    || (v22 = v21,
        v23 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0x88))(),
        v22,
        !v23))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v63 = (_QWORD *)a1;
  v64 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v24 = *(_QWORD *)((char *)v23 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v24)
  {
    __break(1u);
LABEL_28:
    __break(1u);
    return;
  }
  v25 = *(void **)(v24 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
  *(_QWORD *)(v24 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = 1;
  outlined consume of ResizeView.ActiveHandle(v25);
  v26 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x308);
  v27 = (void *)v26();
  v28 = 1.0;
  v29 = 1.0;
  if (v27)
  {
    v30 = v27;
    objc_msgSend(v27, sel_zoomScale);
    v29 = v31;

  }
  v32 = a2[4];
  v33 = (void *)v26();
  if (v33)
  {
    v34 = v33;
    objc_msgSend(v33, sel_zoomScale);
    v28 = v35;

  }
  v36 = a2[5];
  v37 = specialized _arrayForceCast<A, B>(_:)((uint64_t)v63);
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v62[1] = v37;
    v63 = v23;
    v39 = v32 / v29;
    v40 = *a2;
    v41 = a2[1];
    v42 = a2[2];
    v43 = a2[3];
    v44 = v37 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v45 = *(_QWORD *)(v10 + 72);
    v46 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    v47 = v36 / v28;
    v65 = v8;
    v46(v13, v44, v9);
    while (1)
    {
      MEMORY[0x1DF0E30E4](v9);
      if (*(_QWORD *)(v20 + 16) && (v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v49 & 1) != 0))
      {
        v50 = *(id *)(*(_QWORD *)(v20 + 56) + 8 * v48);
        v51 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v8, v67);
        v52 = v20;
        v53 = v46;
        v54 = v45;
        v55 = v10;
        v56 = (uint64_t *)MEMORY[0x1E0DEEDD8];
        v57 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v50) + 0x1E8))(v51);
        v69.origin.x = (*(double (**)(uint64_t))((*v56 & *v50) + 0x170))(v57);
        v68.a = v40;
        v68.b = v41;
        v68.c = v42;
        v68.d = v43;
        v68.tx = v39;
        v68.ty = v47;
        v70 = CGRectApplyAffineTransform(v69, &v68);
        v58 = *v56;
        v10 = v55;
        v45 = v54;
        v46 = v53;
        v20 = v52;
        v8 = v65;
        (*(void (**)(__n128, __n128, __n128, __n128))((v58 & *v50) + 0x180))((__n128)v70.origin, *(__n128 *)&v70.origin.y, (__n128)v70.size, *(__n128 *)&v70.size.height);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v66 + 8))(v8, v67);
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v44 += v45;
      if (!--v38)
        break;
      v46(v13, v44, v9);
    }
    swift_bridgeObjectRelease();
    v59 = swift_bridgeObjectRelease();
    v23 = v63;
  }
  else
  {
    swift_bridgeObjectRelease();
    v59 = swift_bridgeObjectRelease();
  }
  v60 = *(_QWORD *)((char *)v23 + v64);
  if (!v60)
    goto LABEL_28;
  v61 = (_QWORD *)(v60 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(_QWORD *)(*v61 + 16) || *(_QWORD *)(v61[1] + 16))
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x318))(v59);

}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  _QWORD *v21;
  void *v22;
  _BYTE v23[24];
  ValueMetadata *v24;
  unint64_t v25;

  v24 = &type metadata for PencilAndPaperFeatureFlags;
  v25 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v23[0] = 0;
  v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if ((v3 & 1) == 0)
  {
    v4 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
    v5 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v5)
    {
      v6 = (void *)v5;
      v7 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType();
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);

      v10 = (_QWORD *)MEMORY[0x1DF0E666C](v4);
      if (!v10)
        goto LABEL_10;
      v11 = v10;
      v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v13 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x88))();

      if (!v13)
        goto LABEL_10;
      v14 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
      v15 = *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (!v15)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      v16 = *(void **)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(_QWORD *)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = 0;
      outlined consume of ResizeView.ActiveHandle(v16);
      v17 = *(void **)((char *)v13 + v14);
      if (!v17)
      {
LABEL_25:
        __break(1u);
        return;
      }
      objc_msgSend(v17, sel_layoutSubviews);
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_11:
        swift_bridgeObjectRelease();

        return;
      }
      swift_bridgeObjectRetain();
      v18 = specialized Sequence.compactMap<A>(_:)(a1, v9);
      swift_bridgeObjectRelease_n();
      if (((*(uint64_t (**)(unint64_t, uint64_t))((*v12 & *v13) + 0x4F8))(v18, 1) & 1) != 0)
      {
        specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v18);
        goto LABEL_11;
      }
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v19)
          goto LABEL_15;
      }
      else
      {
        v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v19)
        {
LABEL_15:
          if (v19 >= 1)
          {
            for (i = 0; i != v19; ++i)
            {
              if ((v18 & 0xC000000000000001) != 0)
                v21 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v18);
              else
                v21 = *(id *)(v18 + 8 * i + 32);
              v22 = v21;
              (*(void (**)(_QWORD, uint64_t))((*v12 & *v21) + 0x1F0))(0, 1);

            }
            goto LABEL_22;
          }
          __break(1u);
          goto LABEL_24;
        }
      }
LABEL_22:

LABEL_10:
      swift_bridgeObjectRelease();
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;

  v1 = v0;
  v13 = &type metadata for PencilAndPaperFeatureFlags;
  v14 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v12[0] = 0;
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if ((v2 & 1) == 0)
  {
    v3 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v3)
    {
      v4 = v3;
      v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();

      if (v5)
      {
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
        v6 = CanvasViewSelectionInteractionDelegate.activeWidget.getter();

        if (!v6)
        {
LABEL_11:

          return;
        }
        v7 = v5;
        v8 = objc_msgSend(v7, sel_window);
        if (v8)
        {
          v9 = v8;
          v10 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v8);
          if (v10)
          {
            v5 = v10;
            v11 = objc_msgSend(v10, sel__visibilityUpdatesEnabled);
            objc_msgSend(v5, sel__setVisibilityUpdatesEnabled_, 0);
            objc_msgSend(v7, sel_becomeFirstResponder);
            objc_msgSend(v5, sel__setVisibilityUpdatesEnabled_, v11);

            v7 = v9;
LABEL_10:

            goto LABEL_11;
          }

        }
        objc_msgSend(v7, sel_becomeFirstResponder);
        v5 = v7;
        goto LABEL_10;
      }
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t ObjectType;
  unint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  result = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!result)
    return result;
  v3 = (void *)result;
  v4 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);

  v7 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
  if (!v7)
    goto LABEL_12;
  v8 = v7;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x88))();

  if (!v10)
    goto LABEL_12;
  v11 = AnyCanvas.acceptedDropLayouts.getter();

  v12 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
  if (!v12 || (v13 = v12, v14 = (void *)(*(uint64_t (**)(void))((*v9 & *v12) + 0x88))(), v13, !v14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if ((static Selector.== infix(_:_:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if ((static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0
      || (static Selector.== infix(_:_:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      AnyCanvas.selectedCanvasElementIds.getter();
      v20 = v19;

      v21 = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRelease();
      return v21 != 0;
    }
    if ((static Selector.== infix(_:_:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v24 = static Selector.== infix(_:_:)();

      return v24 & 1;
    }
    AnyCanvas.selectedCanvasElementIds.getter();
    v23 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRelease();
    if (!v23)
      goto LABEL_8;

LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  v15 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  v16 = objc_msgSend(v15, sel_itemProviders);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  v6 = specialized Sequence.compactMap<A>(_:)(v17, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_8:
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    v18 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();

  }
  return v18 != 0;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88))();

  if (!v8)
    return 0;
  if (!*(_QWORD *)(a1 + 16) && !*(_QWORD *)(a2 + 16))
    goto LABEL_7;
  v9 = specialized _arrayForceCast<A, B>(_:)(a1);
  swift_bridgeObjectRetain();
  v10 = specialized Set.init<A>(_:)(v9);
  v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4UUIDVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy8PaperKit0K6StrokeVGGGs5NeverOTg503_s8l76Kit13CanvasMembersV14canvasElements11strokeUUIDsACx_q_tcSTRzSTR_9Coherence12gk10_9VyAA0kC7b43VG0L0Rtz10Foundation4UUIDVALRt_r0_lufcAF0J3h6VyAF10i6VyAF06j11K2_2VyAA0K6N11VGGGAPXEfU_Tf1cn_n(a2);
  v12 = specialized Set.init<A>(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))((*v7 & *v8) + 0x638))(v10, v12, 6, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v13)
  {
LABEL_7:

    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v14 + 32) = v13;

  return v14;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  CGFloat a;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char v42;
  uint64_t v43;
  void *v44;
  double v45;
  double x;
  double v47;
  double y;
  id v49;
  id v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  uint64_t v63;
  CGPoint v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  CGAffineTransform v71;
  CGPoint v72;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String)?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13, v15);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v20 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v16);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 8);
    v70 = v20;
    ObjectType = swift_getObjectType();
    v23 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v70) + 0x88))();
    if (!v23)
    {

      return;
    }
    v24 = (_QWORD *)v23;
    v67 = ObjectType;
    v68 = v21;
    v69 = v14;
    v25 = (void *)objc_opt_self();
    v26 = objc_msgSend(v25, sel_generalPasteboard);
    v27 = objc_msgSend(v26, sel_items);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    Array<A>.pasteboardPaperKitURL.getter(v28, (uint64_t)v8);
    swift_bridgeObjectRelease();
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v8, 1, v29) != 1)
    {
      v37 = &v8[*(int *)(v29 + 48)];
      v38 = *(_QWORD *)v37;
      v39 = *((_QWORD *)v37 + 1);
      v40 = &v12[*(int *)(v9 + 48)];
      v41 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
      v41(v12, v8, v13);
      *(_QWORD *)v40 = v38;
      *((_QWORD *)v40 + 1) = v39;
      swift_bridgeObjectRelease();
      v41(v18, v12, v13);
      (*(void (**)(char *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v68 + 112))(v18, 0, 0, 0, 1, v67);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v18, v13);
      return;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for (url: URL, uti: String)?);
    v30 = objc_msgSend(v25, sel_generalPasteboard);
    v31 = objc_msgSend(v30, sel_items);

    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)&v71.a = MEMORY[0x1E0DEE9D8];
    v33 = *(_QWORD *)(v32 + 16);
    if (v33)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v33; ++i)
      {
        v35 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v35);
      }
      swift_bridgeObjectRelease_n();
      a = v71.a;
    }
    else
    {
      swift_bridgeObjectRelease();
      a = MEMORY[0x1E0DEE9D8];
    }
    v42 = specialized Sequence<>.contains(_:)(0xD000000000000011, 0x80000001DDF4B940, *(_QWORD **)&a);
    v43 = swift_bridgeObjectRelease();
    if ((v42 & 1) != 0)
    {

      return;
    }
    v44 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v24) + 0x2F8))(v43);
    objc_msgSend(v44, sel_convertPoint_fromCoordinateSpace_, v24, a1, a2);
    x = v45;
    y = v47;

    v49 = objc_msgSend(v25, sel_generalPasteboard);
    v50 = objc_msgSend(v49, sel_itemProviders);

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSItemProvider);
    v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v51 >> 62)
    {
LABEL_36:
      swift_bridgeObjectRetain();
      v52 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v52)
      {
LABEL_15:
        v53 = 0;
        v68 = v52;
        v69 = v51 & 0xC000000000000001;
        v66 = v51 + 32;
        v67 = v51 & 0xFFFFFFFFFFFFFF8;
        while (1)
        {
LABEL_17:
          if (v69)
          {
            v54 = (id)MEMORY[0x1DF0E4D64](v53, v51);
          }
          else
          {
            if (v53 >= *(_QWORD *)(v67 + 16))
              goto LABEL_35;
            v54 = *(id *)(v66 + 8 * v53);
          }
          v55 = v54;
          if (__OFADD__(v53++, 1))
          {
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          v57 = AnyCanvas.acceptedDropLayouts.getter();
          v58 = *(_QWORD *)(v57 + 16);
          if (v58)
            break;

          swift_bridgeObjectRelease();
          if (v53 == v52)
            goto LABEL_37;
        }
        v59 = v51;
        if (one-time initialization token for canvasElementDefaultSize != -1)
          swift_once();
        v60 = 0;
        v61 = *(double *)&static UIConstants.canvasElementDefaultSize;
        v62 = unk_1F042ED20;
        v51 = v57 + 40;
        while (1)
        {
          v63 = v60 + 1;
          if (__OFADD__(v60, 1))
          {
            __break(1u);
            goto LABEL_34;
          }
          if (((*(uint64_t (**)(void *, _QWORD *, _QWORD, double, double, double, double, double))(*(_QWORD *)v51 + 16))(v55, v24, 0, x, y, v61, v62, 0.0) & 1) != 0)break;
          v51 += 16;
          ++v60;
          if (v63 == v58)
          {

            swift_bridgeObjectRelease();
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease();
        CGAffineTransformMakeTranslation(&v71, 10.0, 10.0);
        v72.x = x;
        v72.y = y;
        v64 = CGPointApplyAffineTransform(v72, &v71);
        x = v64.x;
        y = v64.y;

LABEL_31:
        v51 = v59;
        v52 = v68;
        if (v53 != v68)
          goto LABEL_17;
      }
    }
    else
    {
      v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v52)
        goto LABEL_15;
    }
LABEL_37:

    swift_bridgeObjectRelease();
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(uint64_t a1)
{
  uint64_t v1;
  char v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  ValueMetadata *v30;
  unint64_t v31;

  v30 = &type metadata for PencilAndPaperFeatureFlags;
  v31 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v29) = 0;
  v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  if ((v3 & 1) != 0)
    return 0;
  v5 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v4 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (!v4)
    return (uint64_t)v4;
  v6 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType();
  v8 = specialized _arrayForceCast<A, B>(_:)(a1);
  v9 = specialized Set.init<A>(_:)(v8);
  swift_bridgeObjectRelease();
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v11 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 96))(v9, v11, 6, 0, ObjectType, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  v4 = v10;
  result = specialized Set.startIndex.getter(v12);
  v15 = result;
  v17 = v16;
  v19 = v18 & 1;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(v12 + 32))
  {
    if (((*(_QWORD *)(v12 + 56 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_17;
    if (*(_DWORD *)(v12 + 36) != (_DWORD)v17)
      goto LABEL_18;
    v20 = *(_QWORD *)(v12 + 48);
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = v20 + *(_QWORD *)(v22 + 72) * v15;
    v30 = (ValueMetadata *)v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v22 + 16))(boxed_opaque_existential_1, v23, v21);
    v26 = v4[2];
    v25 = v4[3];
    if (v26 >= v25 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
    v4[2] = v26 + 1;
    outlined init with take of Any(&v29, &v4[4 * v26 + 4]);
    result = specialized _NativeSet.index(after:)(v15, v17, v19 & 1, v12);
    v15 = result;
    v17 = v27;
    v19 = v28 & 1;
    if (!--v13)
    {
      outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(result, v27, v28 & 1);
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  double v22;
  double v23;
  void *v24;
  double v25;
  void (*v26)(_QWORD *__return_ptr);
  CGPoint v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __objc2_prot_list **p_base_prots;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *boxed_opaque_existential_1;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  id v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  CGFloat a;
  char b_low;
  __int128 v60;
  __int128 v61;
  CGAffineTransform v62;
  _QWORD v63[7];
  double v64;
  double v65;
  char v66;
  CGPoint v67;
  CGRect v68;

  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v57 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v56 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52, v8);
  v51 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v54 = *(_QWORD *)(v55 - 8);
  v11 = MEMORY[0x1E0C80A78](v55, v10);
  v53 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v14 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v11);
  if (!v14)
    return 0;
  v15 = (_QWORD *)v14;
  v16 = *(_QWORD *)(v13 + 8);
  ObjectType = swift_getObjectType();
  v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v19 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v15) + 0x88))();
  if (!v19)
  {

    return 0;
  }
  v20 = v19;
  v21 = (void *)(*(uint64_t (**)(void))((*v18 & *v19) + 0x308))();
  v22 = 1.0;
  v23 = 1.0;
  if (v21)
  {
    v24 = v21;
    objc_msgSend(v21, sel_zoomScale);
    v23 = v25;

  }
  v26 = *(void (**)(_QWORD *__return_ptr))((*v18 & *v20) + 0x5B8);
  v48 = v20;
  v26(v63);
  outlined init with take of CGAffineTransform?((uint64_t)v63, (uint64_t)&v64);
  if ((v66 & 1) == 0)
    v22 = sqrt(v64 * v64 + v65 * v65);
  CGAffineTransformMakeScale(&v62, v23 * v22, v23 * v22);
  v67.x = a1;
  v67.y = a2;
  v27 = CGPointApplyAffineTransform(v67, &v62);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, CGFloat))(v16 + 56))(ObjectType, v16, v27.x);
  v29 = v28;
  if (v28 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v30 = result;
  }
  else
  {
    v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v49 = v15;
  if (!v30)
  {
    v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_29:

    swift_bridgeObjectRelease_n();
    return (uint64_t)v34;
  }
  if (v30 >= 1)
  {
    v32 = 0;
    v33 = v29 & 0xC000000000000001;
    v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    p_base_prots = &MiniMenuController.base_prots;
    v50 = v29 & 0xC000000000000001;
    do
    {
      if (v33)
        v36 = (_QWORD *)MEMORY[0x1DF0E4D64](v32, v29);
      else
        v36 = *(id *)(v29 + 8 * v32 + 32);
      v37 = v36;
      objc_msgSend(v36, (SEL)p_base_prots[277]);
      if (v27.y >= CGRectGetMidY(v68))
      {
        v61 = 0u;
        v60 = 0u;
      }
      else
      {
        v38 = v51;
        (*(void (**)(void))((*v18 & *v37) + 0xE8))();
        v39 = v52;
        SharedTagged_9.tag.getter();
        a = v62.a;
        b_low = LOBYTE(v62.b);
        MEMORY[0x1DF0E3408](v39);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        v40 = v53;
        WeakTagged_9.init(_:id:)();
        v41 = v38;
        p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
        v42 = v39;
        v33 = v50;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v42);
        v43 = v55;
        *((_QWORD *)&v61 + 1) = v55;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
        v45 = v40;
        v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(boxed_opaque_existential_1, v45, v43);
      }

      if (*((_QWORD *)&v61 + 1))
      {
        outlined init with take of Any(&v60, &v62);
        outlined init with take of Any(&v62, &v60);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
        v47 = v34[2];
        v46 = v34[3];
        if (v47 >= v46 >> 1)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v34);
        v34[2] = v47 + 1;
        outlined init with take of Any(&v60, &v34[4 * v47 + 4]);
      }
      else
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v60, &demangling cache variable for type metadata for Any?);
      }
      ++v32;
    }
    while (v30 != v32);
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  CGPoint v21;
  UIEvent_optional v22;
  UIView_optional *v23;
  UIEvent_optional v24;
  UIView_optional *v25;
  Class isa;
  objc_class *v27;
  CGAffineTransform v28;
  _QWORD v29[7];
  double v30;
  double v31;
  char v32;
  CGPoint v33;
  CGRect v34;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  result = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (result)
  {
    v7 = (void *)result;
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v9 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)result) + 0x88))();
    if (v9)
    {
      v10 = (_QWORD *)v9;
      v11 = (_QWORD *)MEMORY[0x1DF0E666C](v5);
      if (!v11
        || (v12 = v11, v13 = (char *)(*(uint64_t (**)(void))((*v8 & *v11) + 0x88))(), v12, !v13)
        || (v14 = *(void **)&v13[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView],
            v15 = v14,
            v13,
            !v14))
      {

        return 0;
      }
      v16 = (void *)(*(uint64_t (**)(void))((*v8 & *v10) + 0x308))();
      v17 = 1.0;
      v18 = 1.0;
      if (v16)
      {
        v19 = v16;
        objc_msgSend(v16, sel_zoomScale);
        v18 = v20;

      }
      (*(void (**)(_QWORD *__return_ptr))((*v8 & *v10) + 0x5B8))(v29);
      outlined init with take of CGAffineTransform?((uint64_t)v29, (uint64_t)&v30);
      if ((v32 & 1) == 0)
        v17 = sqrt(v30 * v30 + v31 * v31);
      CGAffineTransformMakeScale(&v28, v18 * v17, v18 * v17);
      v33.x = a1;
      v33.y = a2;
      v21 = CGPointApplyAffineTransform(v33, &v28);
      objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView], sel_frame);
      if (CGRectContainsPoint(v34, v21))
      {
        if (objc_msgSend(v15, sel_isHidden))
        {

          return 1;
        }
        v22.value.super.isa = 0;
        CanvasElementResizeView.hitTestMiniMenu(_:with:)(v23, (CGPoint)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1), v22);
        if (v24.value.super.isa)
        {
          isa = v24.value.super.isa;

        }
        else
        {
          ResizeView.hitTestChrome(_:with:)(v25, (CGPoint)__PAIR128__(*(unint64_t *)&a2, *(unint64_t *)&a1), v24);
          isa = v27;

          if (!isa)
            return 1;
        }

        return 0;
      }

    }
    return 0;
  }
  return result;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v26[0] = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v9 = (void *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v5);
  if (!v9)
    return;
  v10 = *(_QWORD *)(v8 + 8);
  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 56))(ObjectType, v10);

  v13 = MEMORY[0x1E0DEE9D8];
  v30[0] = MEMORY[0x1E0DEE9D8];
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
    {
LABEL_4:
      if (v14 < 1)
      {
        __break(1u);
        goto LABEL_34;
      }
      for (i = 0; i != v14; ++i)
      {
        if ((v12 & 0xC000000000000001) != 0)
          v16 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v12);
        else
          v16 = *(id *)(v12 + 8 * i + 32);
        v17 = v16;
        if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v16) + 0x218))() & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v18 = v30[0];
      v13 = MEMORY[0x1E0DEE9D8];
      if (v30[0] < 0)
        goto LABEL_30;
      goto LABEL_17;
    }
  }
  else
  {
    v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v14)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v18 = MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
    goto LABEL_30;
LABEL_17:
  if ((v18 & 0x4000000000000000) != 0)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v19)
      goto LABEL_31;
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
LABEL_31:
    swift_release();
    return;
  }
LABEL_19:
  v32 = v13;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
  if (v19 < 0)
  {
LABEL_34:
    __break(1u);
    return;
  }
  for (j = 0; j != v19; ++j)
  {
    if ((v18 & 0xC000000000000001) != 0)
      v21 = (_QWORD *)MEMORY[0x1DF0E4D64](j, v18);
    else
      v21 = *(id *)(v18 + 8 * j + 32);
    v22 = v21;
    v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    __swift_allocate_boxed_opaque_existential_1(v30);
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v22) + 0xE8))();
    SharedTagged_9.tag.getter();
    v26[1] = v28;
    v27 = v29;
    MEMORY[0x1DF0E3408](v3);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    WeakTagged_9.init(_:id:)();
    (*(void (**)(char *, uint64_t))(v26[0] + 8))(v7, v3);

    v23 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
      v23 = v32;
    }
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if (v25 >= v24 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v23 = v32;
    }
    *(_QWORD *)(v23 + 16) = v25 + 1;
    outlined init with take of Any(v30, (_OWORD *)(v23 + 32 * v25 + 32));
  }
  swift_release();
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  int64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  void *v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v2, v3);
  v71 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v5, v6);
  v70 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v9 = *(_QWORD *)(v8 - 8);
  v73 = v8;
  v74 = v9;
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v66 - v16;
  v18 = v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v19 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v15);
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v19)
  {
    v21 = v19;
    v22 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x88))();

  }
  else
  {
    v22 = 0;
  }
  v23 = (_QWORD *)MEMORY[0x1DF0E666C](v18);
  if (v23
    && (v24 = v23, v25 = (_QWORD *)(*(uint64_t (**)(void))((*v20 & *v23) + 0x88))(), v24, v25)
    && (v26 = (int64_t *)(*(uint64_t (**)(void))((*v20 & *v25) + 0x320))(), v25, v26))
  {
    type metadata accessor for TiledTextView();
    v27 = swift_dynamicCastClass();
    v28 = v74;
    if (v27)
    {
      v72 = v1;
      v69 = v22;
      v29 = TiledTextView.paperAttachments.getter();
      v30 = v29;
      v67 = v17;
      v68 = v12;
      v31 = v26;
      if (v29 >> 62)
        goto LABEL_42;
      v32 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v32; v32 = _CocoaArrayWrapper.endIndex.getter())
      {
        v77 = v30 & 0xC000000000000001;
        v33 = 4;
        while (1)
        {
          v34 = v77 ? (char *)MEMORY[0x1DF0E4D64](v33 - 4, v30) : (char *)*(id *)(v30 + 8 * v33);
          v22 = v34;
          v35 = v33 - 3;
          if (__OFADD__(v33 - 4, 1))
            break;
          v36 = *(void **)&v34[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v36)
          {
            __break(1u);
            goto LABEL_57;
          }
          v37 = v36;
          v38 = swift_bridgeObjectRetain();
          v39 = specialized Sequence.compactMap<A>(_:)(v38, (uint64_t)v37);

          swift_bridgeObjectRelease();
          if (v39 >> 62)
          {
            swift_bridgeObjectRetain();
            v40 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (v40)
          {

            swift_bridgeObjectRelease_n();
            v28 = v74;
            v17 = v67;
            v12 = v68;
            v1 = v72;
            if (v22)
              goto LABEL_23;
            goto LABEL_35;
          }

          ++v33;
          if (v35 == v32)
            goto LABEL_43;
        }
LABEL_41:
        __break(1u);
LABEL_42:
        swift_bridgeObjectRetain();
      }
LABEL_43:

      swift_bridgeObjectRelease_n();
      v22 = 0;
      v43 = 0;
LABEL_44:
      v12 = v68;
      goto LABEL_45;
    }

    if (!v22)
    {
LABEL_35:
      v43 = 0;
      goto LABEL_45;
    }
  }
  else
  {
    v28 = v74;
    if (!v22)
      goto LABEL_35;
  }
LABEL_23:
  v72 = v1;
  v41 = *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v41)
  {
    v31 = *(int64_t **)(v41 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v42 = v31[2];
    v43 = MEMORY[0x1E0DEE9D8];
    if (v42)
    {
      v68 = v12;
      v69 = v22;
      v78 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
      v43 = v78;
      v44 = specialized Set.startIndex.getter(v31);
      v46 = v45;
      v48 = v47 & 1;
      v75 = v31;
      v76 = (char *)(v31 + 7);
      v30 = v73;
      while ((v44 & 0x8000000000000000) == 0 && v44 < 1 << *((_BYTE *)v31 + 32))
      {
        if (((*(_QWORD *)&v76[((unint64_t)v44 >> 3) & 0xFFFFFFFFFFFFF8] >> v44) & 1) == 0)
          goto LABEL_39;
        if (*((_DWORD *)v31 + 9) != (_DWORD)v46)
          goto LABEL_40;
        LODWORD(v77) = v48;
        v49 = v31[6];
        v50 = *(_QWORD *)(v28 + 72);
        (*(void (**)(char *, int64_t, unint64_t))(v28 + 16))(v17, v49 + v50 * v44, v30);
        v78 = v43;
        v52 = *(_QWORD *)(v43 + 16);
        v51 = *(_QWORD *)(v43 + 24);
        if (v52 >= v51 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
          v30 = v73;
          v43 = v78;
        }
        *(_QWORD *)(v43 + 16) = v52 + 1;
        (*(void (**)(unint64_t, char *, unint64_t))(v28 + 32))(v43+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ v52 * v50, v17, v30);
        v31 = v75;
        v53 = specialized _NativeSet.index(after:)(v44, v46, v77 & 1, v75);
        v44 = v53;
        v46 = v54;
        v48 = v55 & 1;
        if (!--v42)
        {
          outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v53, v54, v48);
          swift_bridgeObjectRelease();
          v22 = v69;
          goto LABEL_44;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
LABEL_45:
    v56 = CanvasViewSelectionInteractionDelegate.activeWidget.getter();
    if (v56)
    {
      v57 = v56;
      if (!v43)
      {

LABEL_55:
        return;
      }
      LOBYTE(v78) = 8;
      v58 = objc_msgSend(v56, sel_pdfAnnotationUUID);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      CRKeyPath.init(_:)();
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
      v60 = *(_QWORD *)(v43 + 16);
      v59 = *(_QWORD *)(v43 + 24);
      v61 = v43;
      v62 = v74;
      if (v60 >= v59 >> 1)
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v61);
      *(_QWORD *)(v61 + 16) = v60 + 1;
      v63 = v61
          + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))
          + *(_QWORD *)(v62 + 72) * v60;
      v64 = *(void (**)(unint64_t, char *, uint64_t))(v62 + 32);
      v43 = v61;
      v64(v63, v12, v73);

    }
    if (v43)
    {
      v65 = swift_bridgeObjectRetain();
      specialized _arrayForceCast<A, B>(_:)(v65);
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_55;
  }
LABEL_57:
  __break(1u);
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2)
  {
    if (a2 != 6)
    {
      v4 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
      if (v4)
      {
        v5 = v4;
        v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x88))();

        if (v6)
        {
          v7 = swift_bridgeObjectRetain();
          v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy05PaperE00L6StrokeVGGGs5NeverOTg503_s8m79Kit13CanvasMembersV7strokes19strokeSelectionTypeACx_So011PKSelectionH0VtcSTRz06d3B08f2V7b18Rtzlufc9Coherence7hi6VyAM10j6VyAM14kl9_2VyAA0R6N11VGGGAJXEfU_Tf1cn_n(v7);
          v9 = specialized Set.init<A>(_:)(v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], v9, a2, 0);

        }
      }
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v11 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v15 - 8);
  v28 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v26 = static OS_dispatch_queue.main.getter();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = v5;
  v19[4] = a3;
  v19[5] = a2;
  v19[6] = a4;
  v19[7] = a5;
  aBlock[4] = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_10_2;
  v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v21 = v5;
  v22 = a3;
  v23 = a2;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v24 = (void *)v26;
  MEMORY[0x1DF0E48C0](0, v18, v14, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v18, v28);
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  char v26;
  id v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for CRKeyPath();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  result = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v10);
  if (result)
  {
    v15 = (void *)result;
    v16 = *(_QWORD *)(v13 + 8);
    ObjectType = swift_getObjectType();
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(ObjectType, v16);

    v19 = specialized _arrayForceCast<A, B>(_:)(a1);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v21 = *(unsigned __int8 *)(v8 + 80);
      v28[1] = v19;
      v22 = v19 + ((v21 + 32) & ~v21);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v24(v12, v22, v7);
      while (1)
      {
        MEMORY[0x1DF0E30E4](v7);
        if (*(_QWORD *)(v18 + 16)
          && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v26 & 1) != 0))
        {
          v27 = *(id *)(*(_QWORD *)(v18 + 56) + 8 * v25);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
          objc_msgSend(v27, sel_setAlpha_, 0.2);

        }
        else
        {
          (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
        v22 += v23;
        if (!--v20)
          break;
        v24(v12, v22, v7);
      }
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t (*v36)(_QWORD, _QWORD);
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;

  v5 = type metadata accessor for CRKeyPath();
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v41 = (id)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v12);
  if (!v41)
    return;
  v16 = *(_QWORD *)(v15 + 8);
  v17 = specialized _arrayConditionalCast<A, B>(_:)(a1);
  if (!v17)
  {

    return;
  }
  v18 = v17;
  if ((a2 | 2) != 2)
  {
    ObjectType = swift_getObjectType();
    v33 = specialized Set.init<A>(_:)(v18);
    swift_bridgeObjectRelease();
    v34 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 88))(v33, v34, 6, 0, ObjectType, v16);

    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    return;
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (!v19)
  {

    goto LABEL_17;
  }
  v20 = swift_getObjectType();
  v21 = *(uint64_t (**)(_QWORD, _QWORD))(v16 + 32);
  v22 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v35[1] = v18;
  v36 = v21;
  v23 = v18 + v22;
  v24 = *(_QWORD *)(v10 + 72);
  v37 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  v38 = v24;
  v37(v14, v18 + v22, v9);
  while (1)
  {
    MEMORY[0x1DF0E30E4](v9);
    v25 = v21(v20, v16);
    if (*(_QWORD *)(v25 + 16) && (v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v27 & 1) != 0))
    {
      v28 = v20;
      v29 = v10;
      v30 = v16;
      v31 = *(id *)(*(_QWORD *)(v25 + 56) + 8 * v26);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
      objc_msgSend(v31, sel_setAlpha_, 1.0);

      v16 = v30;
      v10 = v29;
      v20 = v28;
      v21 = v36;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    v23 += v38;
    if (!--v19)
      break;
    v37(v14, v23, v9);
  }

  swift_bridgeObjectRelease();
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  v7 = a2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](v7);
  if (!v8)
  {
    _Block_copy(a3);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v7 + 8);
  v19 = v8;
  v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x88))();
  if (v10)
  {
    v18 = (id)v10;
    if (a1)
    {
      type metadata accessor for URL();
      v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ();
      v12[3] = v6;
      v12[4] = v19;
      v12[5] = v9;
      v12[6] = v18;
      _Block_copy(a3);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, v11, MEMORY[0x1E0CB0040]);
      v13 = a1;
      swift_retain();
      v14 = v19;
      v15 = v18;
      v16 = (void *)NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
      swift_release();

LABEL_6:
      swift_release();
      return;
    }
    _Block_copy(a3);
    a3[2](a3, 0);
    swift_release();

    v17 = v18;
  }
  else
  {
    _Block_copy(a3);
    swift_release();
    v17 = v19;
  }

}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t ObjectType;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  id v22;
  char *v23;
  _QWORD v24[5];

  v5 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v6 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(ObjectType, v8);

    if (v10)
    {
      v11 = (unint64_t *)&v10[OBJC_IVAR____TtC8PaperKit15FormFillingView_widgets];
      swift_beginAccess();
      v12 = *v11;
      swift_bridgeObjectRetain();

      if (v12 >> 62)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        swift_bridgeObjectRetain();
        v13 = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
        v13 = v12;
      }
      v14 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v14, v15);
      v24[2] = a1;
      v16 = specialized Sequence.first(where:)(partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:), (uint64_t)v24, v13);
      swift_bridgeObjectRelease();
      if (v16)
      {
        objc_msgSend(v16, sel_addControl);
LABEL_13:

        return;
      }
    }
  }
  v17 = (_QWORD *)MEMORY[0x1DF0E666C](v5);
  if (v17)
  {
    v18 = v17;
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v16 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x88))();

    if (v16)
    {
      v20 = CanvasViewSelectionInteractionDelegate.view(for:)(a1);
      if (v20)
      {
        v21 = v20;
        type metadata accessor for LinkCanvasElementView();
        if (swift_dynamicCastClass())
        {
          v22 = v21;
          v23 = LinkCanvasElementView.linkView.getter();
          (*(void (**)(_QWORD))((*v19 & *(_QWORD *)v23) + 0x88))(0);

          v16 = v23;
        }
        else
        {
          (*(void (**)(void *, id, _QWORD))((*v19 & *v16) + 0x4D0))(v21, objc_msgSend(a2, sel_modifierFlags), 0);

          v16 = v21;
        }
      }
      goto LABEL_13;
    }
  }
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char v36[32];

  v5 = type metadata accessor for CRKeyPath();
  v35 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  result = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v12);
  if (!result)
    return result;
  v17 = (void *)result;
  v33 = a2;
  v34 = v5;
  v18 = *(_QWORD *)(v15 + 8);
  ObjectType = swift_getObjectType();
  outlined init with copy of Any(a1, (uint64_t)v36);
  swift_dynamicCast();
  MEMORY[0x1DF0E30E4](v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);

  if (!*(_QWORD *)(v20 + 16))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v34);
    return 0;
  }
  v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  v22 = v34;
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v22);
    return 0;
  }
  v24 = *(id *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v22);
  type metadata accessor for LinkCanvasElementView();
  v25 = swift_dynamicCastClass();
  if (v25)
  {
    v26 = v25;
    v27 = (_QWORD *)MEMORY[0x1DF0E666C](v15);
    if (v27)
    {
      v28 = v27;
      v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v30 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v27) + 0x88))();
      v31 = v24;

      if (v30)
      {
        (*(void (**)(uint64_t, id, _QWORD))((*v29 & *v30) + 0x4D0))(v26, objc_msgSend(v33, sel_modifierFlags), 0);

      }
    }
    else
    {

    }
    return 1;
  }
  else
  {

    return 0;
  }
}

id specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  unint64_t v21;
  char v22;
  id v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];

  v27 = type metadata accessor for CRKeyPath();
  v5 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v16 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v12);
  if (!v16)
    return 0;
  v17 = (void *)v16;
  v26 = a1;
  v18 = *(_QWORD *)(v15 + 8);
  ObjectType = swift_getObjectType();
  outlined init with copy of Any(a2, (uint64_t)v28);
  swift_dynamicCast();
  MEMORY[0x1DF0E30E4](v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);

  if (!*(_QWORD *)(v20 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
    return 0;
  }
  v23 = *(id *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v27);
  v24 = objc_msgSend(v23, sel_contextMenuInteraction_configurationForMenuAtLocation_, v26, 0.0, 0.0);

  return v24;
}

id specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[32];

  v28 = a1;
  v29 = a2;
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v3 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v17 = MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v13);
  if (!v17)
    return 0;
  v18 = (void *)v17;
  v30 = v5;
  v19 = *(_QWORD *)(v16 + 8);
  ObjectType = swift_getObjectType();
  outlined init with copy of Any(a3, (uint64_t)v31);
  swift_dynamicCast();
  MEMORY[0x1DF0E30E4](v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(ObjectType, v19);

  if (!*(_QWORD *)(v21 + 16) || (v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
    return 0;
  }
  v24 = *(id *)(*(_QWORD *)(v21 + 56) + 8 * v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v30);
  v25 = objc_msgSend(v24, sel_contextMenuInteraction_previewForHighlightingMenuWithConfiguration_, v28, v29);

  return v25;
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, (SEL *)&selRef_contextMenuInteraction_willDisplayMenuForConfiguration_animator_);
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, (SEL *)&selRef_contextMenuInteraction_willEndForConfiguration_animator_);
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  unint64_t v24;
  char v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];

  v30 = a5;
  v31 = a2;
  v29 = a1;
  v32 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView;
  v19 = MEMORY[0x1DF0E666C](v5 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView, v15);
  if (v19)
  {
    v20 = (void *)v19;
    v28 = a3;
    v21 = *(_QWORD *)(v18 + 8);
    ObjectType = swift_getObjectType();
    outlined init with copy of Any(a4, (uint64_t)v33);
    swift_dynamicCast();
    MEMORY[0x1DF0E30E4](v12);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 32))(ObjectType, v21);

    if (*(_QWORD *)(v23 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11), (v25 & 1) != 0))
    {
      v26 = *(id *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v32);
      objc_msgSend(v26, *v30, v29, v31, v28);

    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v32);
    }
  }
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(id *a1)
{
  uint64_t v1;

  return closure #1 in CanvasViewSelectionInteractionDelegate.widget(for:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1DDD53B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(void (**)(uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1DDD53C34()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t sub_1DDD53C5C()
{
  id *v0;

  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)()
{
  uint64_t v0;

  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48));
}

uint64_t sub_1DDD53CB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(void *a1)
{
  uint64_t v1;

  closure #1 in CanvasViewSelectionInteractionDelegate.image(of:)(a1, *(id *)(v1 + 16));
}

uint64_t sub_1DDD53CDC()
{
  return swift_deallocObject();
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  char *v5;
  void *v6;
  id v7;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v3)
  {
    v4 = v3;
    v5 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();

    if (v5)
    {
      v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      v7 = v6;

      if (v6)
      {
        HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(a1, MEMORY[0x1E0DEE9D8], 0);

      }
    }
  }
}

void specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8;
  _QWORD *v17;
  void *v18;
  char *v19;
  void *v20;
  Class isa;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  _QWORD aBlock[6];

  v17 = (_QWORD *)MEMORY[0x1DF0E666C](v8 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
  if (v17)
  {
    v18 = v17;
    v19 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x88))();

    if (v19)
    {
      v20 = *(void **)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      v26 = v20;

      if (v20)
      {
        if (objc_msgSend(a4, sel_respondsToSelector_, sel_replaceStrokes_withString_inBounds_completion_))
        {
          type metadata accessor for PKStroke();
          isa = Array._bridgeToObjectiveC()().super.isa;
          v22 = (void *)MEMORY[0x1DF0E41AC](a2, a3);
          v23 = swift_allocObject();
          *(_QWORD *)(v23 + 16) = v26;
          *(_QWORD *)(v23 + 24) = a1;
          aBlock[4] = partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:);
          aBlock[5] = v23;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [NSValue], @guaranteed [CHReflowableTextToken], @guaranteed [PKDrawing]) -> ();
          aBlock[3] = &block_descriptor_26_0;
          v24 = _Block_copy(aBlock);
          v25 = v26;
          swift_bridgeObjectRetain();
          swift_release();
          objc_msgSend(a4, sel_replaceStrokes_withString_inBounds_completion_, isa, v22, v24, a5, a6, a7, a8);
          _Block_release(v24);

        }
        else
        {

        }
      }
    }
  }
}

uint64_t sub_1DDD53FA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  Swift::OpaquePointer v4;

  v4._rawValue = *(void **)(v3 + 24);
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(a1, a2, a3, *(_QWORD *)(v3 + 16), v4);
}

uint64_t specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(double a1, double a2)
{
  uint64_t v2;
  char v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  _BYTE v11[24];
  ValueMetadata *v12;
  unint64_t v13;

  v12 = &type metadata for PencilAndPaperFeatureFlags;
  v13 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v11[0] = 0;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if ((v5 & 1) != 0)
  {
    v6 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView);
    if (v6)
    {
      v7 = v6;
      v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v9 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x88))();

      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, double, double))((*v8 & *v9) + 0x4C0))(1, 1, a1, a2);

      }
    }
  }
  return v5 & 1;
}

uint64_t sub_1DDD540AC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1DDD54158()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1DDD54184()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(a1, a2, *(uint64_t (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t Font.familyName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Font.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL Font.isBold.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_beginAccess();
  return (static Font.Traits.bold & ~v1) == 0;
}

BOOL Font.isItalic.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_beginAccess();
  return (static Font.Traits.italic & ~v1) == 0;
}

void __swiftcall Font.init(_:)(PaperKit::Font *__return_ptr retstr, UIFont a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  id v14;
  unsigned __int8 v15;
  Swift::Int v16;
  uint64_t v17;
  Swift::String v18;
  Swift::Bool v19;
  Swift::String v20;
  Swift::Bool v21;
  Swift::Float v22;

  v4 = -[objc_class fontName](a2.super.isa, sel_fontName);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = -[objc_class familyName](a2.super.isa, sel_familyName);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  -[objc_class pointSize](a2.super.isa, sel_pointSize);
  v13 = v12;
  v14 = -[objc_class fontDescriptor](a2.super.isa, sel_fontDescriptor);
  v15 = objc_msgSend(v14, sel_symbolicTraits);

  if ((v15 & 1) != 0)
  {
    swift_beginAccess();
    v16 = static Font.Traits.italic;
    if ((v15 & 2) == 0)
      goto LABEL_8;
  }
  else
  {
    v16 = 0;
    if ((v15 & 2) == 0)
      goto LABEL_8;
  }
  swift_beginAccess();
  v17 = static Font.Traits.bold;
  if ((static Font.Traits.bold & ~v16) == 0)
    v17 = 0;
  v16 |= v17;
LABEL_8:
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  v19 = String.hasPrefix(_:)(v18);
  swift_bridgeObjectRelease();
  if (v19)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
    v7 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  v21 = String.hasPrefix(_:)(v20);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v21)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
    v11 = 0;
  }
  v22 = v13;
  retstr->_name.value._countAndFlagsBits = v5;
  retstr->_name.value._object = v7;
  retstr->_familyName.value._countAndFlagsBits = v9;
  retstr->_familyName.value._object = v11;
  retstr->pointSize = v22;
  retstr->traits.rawValue = v16;
}

uint64_t Font.supportsBold.getter()
{
  id v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  char v7;

  v0 = Font.platformFont.getter();
  v1 = objc_msgSend(v0, sel_familyName);

  if (!v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v1 = (id)MEMORY[0x1DF0E41AC](v2);
    swift_bridgeObjectRelease();
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_fontNamesForFamilyName_, v1);

  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = v4 + 40; ; i += 16)
    {
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v7 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        break;
      if (!--v5)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t Font.supportsItalic.getter()
{
  id v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v0 = Font.platformFont.getter();
  v1 = objc_msgSend(v0, sel_familyName);

  if (!v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v1 = (id)MEMORY[0x1DF0E41AC](v2);
    swift_bridgeObjectRelease();
  }
  v3 = objc_msgSend((id)objc_opt_self(), sel_fontNamesForFamilyName_, v1);

  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v13 = v4;
    v6 = v4 + 40;
    v14 = v5;
    do
    {
      String.lowercased()();
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      v7 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        break;
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRetain();
    v9 = 0;
    for (i = v13 + 40; ; i += 16)
    {
      v11 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      String.lowercased()();
      swift_bridgeObjectRetain();
      v12 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      ++v9;
      if (v11 == v14)
      {
        swift_bridgeObjectRelease_n();
        return (v7 & 1) != 0;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

void __swiftcall Font.init(name:familyName:pointSize:traits:)(PaperKit::Font *__return_ptr retstr, Swift::String_optional name, Swift::String_optional familyName, Swift::Float pointSize, PaperKit::Font::Traits traits)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v8;
  uint64_t v9;
  Swift::Int v11;
  Swift::String v12;
  Swift::Bool v13;
  Swift::String v14;
  Swift::Bool v15;

  object = familyName.value._object;
  countAndFlagsBits = familyName.value._countAndFlagsBits;
  v8 = name.value._object;
  v9 = name.value._countAndFlagsBits;
  v11 = *(_QWORD *)traits.rawValue;
  if (name.value._object)
  {
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits = 46;
    v12._object = (void *)0xE100000000000000;
    v13 = String.hasPrefix(_:)(v12);
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRelease();
      v9 = 0;
      v8 = 0;
    }
  }
  if (object)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14._countAndFlagsBits = 46;
    v14._object = (void *)0xE100000000000000;
    v15 = String.hasPrefix(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15)
    {
      swift_bridgeObjectRelease();
      countAndFlagsBits = 0;
      object = 0;
    }
  }
  retstr->_name.value._countAndFlagsBits = v9;
  retstr->_name.value._object = v8;
  retstr->_familyName.value._countAndFlagsBits = countAndFlagsBits;
  retstr->_familyName.value._object = object;
  retstr->pointSize = pointSize;
  retstr->traits.rawValue = v11;
}

id Font.platformFont.getter()
{
  float *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  _BOOL4 v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;

  v2 = *(_QWORD *)v0;
  v1 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v3 = *((_QWORD *)v0 + 3);
  v5 = v0[8];
  v6 = *((_QWORD *)v0 + 5);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1358]), sel_init);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x1DF0E41AC](v4, v3);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v7, sel_fontDescriptorWithFamily_, v8);
  }
  else
  {
    if (!v1)
      goto LABEL_6;
    swift_bridgeObjectRetain();
    v8 = (void *)MEMORY[0x1DF0E41AC](v2, v1);
    swift_bridgeObjectRelease();
    v9 = objc_msgSend((id)objc_opt_self(), sel_fontDescriptorWithName_size_, v8, v5);
  }
  v10 = v9;

  v7 = v10;
LABEL_6:
  swift_beginAccess();
  v11 = (static Font.Traits.italic & ~v6) == 0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v6) != 0)
    v12 = v11;
  else
    v12 = v11 | 2u;
  v13 = objc_msgSend(v7, sel_fontDescriptorWithSymbolicTraits_, v12);
  if (v13)
  {
    v14 = v13;

    v7 = v14;
  }
  v15 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v7, v5);
  if (!v15)
  {
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    v15 = (id)static UIConstants.textBoxDefaultFont;
  }

  return v15;
}

uint64_t Font.familyName.setter(uint64_t result, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::String v8;
  Swift::Bool v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v4 = result;
  v5 = *((_QWORD *)v3 + 3);
  if (a2)
  {
    v6 = a2;
    if (v5)
    {
      v7 = *((_QWORD *)v3 + 2) == result && v5 == a2;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      v4 = 0;
      v6 = 0;
    }
  }
  else
  {
    if (!v5)
      return result;
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  *((_QWORD *)v3 + 2) = v4;
  *((_QWORD *)v3 + 3) = v6;
  v15 = *v3;
  v16 = v4;
  LODWORD(v17) = *((_DWORD *)v3 + 8);
  v18 = *((_QWORD *)v3 + 5);
  v10 = Font.platformFont.getter();
  v11 = objc_msgSend(v10, sel_fontName, v15, v16, v6, v17, v18);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  return Font.name.setter(v12, v14);
}

uint64_t Font.isBold.setter(char a1)
{
  return Font.isBold.setter(a1, &static Font.Traits.bold);
}

uint64_t Font.isItalic.setter(char a1)
{
  return Font.isBold.setter(a1, &static Font.Traits.italic);
}

uint64_t Font.isBold.setter(char a1, _QWORD *a2)
{
  __int128 *v2;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    v4 = *((_QWORD *)v2 + 5);
    if ((*a2 & ~v4) != 0)
    {
      v4 |= *a2;
LABEL_6:
      *((_QWORD *)v2 + 5) = v4;
    }
  }
  else
  {
    swift_beginAccess();
    v4 = *((_QWORD *)v2 + 5);
    if ((v4 & *a2) != 0)
    {
      v4 &= ~*a2;
      goto LABEL_6;
    }
  }
  v11 = *v2;
  v12 = v2[1];
  LODWORD(v13) = *((_DWORD *)v2 + 8);
  v14 = v4;
  v5 = Font.platformFont.getter();
  v6 = objc_msgSend(v5, sel_fontName, v11, v12, v13, v14);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  return Font.name.setter(v7, v9);
}

float Font.pointSize.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void Font.pointSize.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

uint64_t (*Font.pointSize.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

void Font.traits.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
}

_QWORD *Font.traits.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = *result;
  return result;
}

uint64_t (*Font.traits.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Font.name.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::String v8;
  Swift::Bool v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v4 = result;
  v5 = *(_QWORD *)(v3 + 8);
  if (a2)
  {
    v6 = a2;
    if (v5)
    {
      v7 = *(_QWORD *)v3 == result && v5 == a2;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 46;
    v8._object = (void *)0xE100000000000000;
    v9 = String.hasPrefix(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      v4 = 0;
      v6 = 0;
    }
  }
  else
  {
    if (!v5)
      return result;
    swift_bridgeObjectRelease();
    v6 = 0;
  }
  *(_QWORD *)v3 = v4;
  *(_QWORD *)(v3 + 8) = v6;
  v15 = v4;
  v16 = *(_OWORD *)(v3 + 16);
  LODWORD(v17) = *(_DWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  v10 = Font.platformFont.getter();
  v11 = objc_msgSend(v10, sel_familyName, v15, v6, v16, v17, v18);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  return Font.familyName.setter(v12, v14);
}

uint64_t (*Font.name.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  _QWORD *v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Font.name.modify;
}

uint64_t Font.name.modify(uint64_t *a1, char a2)
{
  return Font.name.modify(a1, a2, Font.name.setter);
}

uint64_t (*Font.familyName.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Font.familyName.modify;
}

uint64_t Font.familyName.modify(uint64_t *a1, char a2)
{
  return Font.name.modify(a1, a2, Font.familyName.setter);
}

uint64_t Font.name.modify(uint64_t *a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v5 = *a1;
  v4 = a1[1];
  if ((a2 & 1) == 0)
    return a3(*a1, v4);
  swift_bridgeObjectRetain();
  a3(v5, v4);
  return swift_bridgeObjectRelease();
}

uint64_t Font.Traits.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PaperKit::Font::Traits __swiftcall Font.Traits.init(rawValue:)(PaperKit::Font::Traits rawValue)
{
  PaperKit::Font::Traits *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t static Font.Traits.italic.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static Font.Traits.italic;
  return result;
}

uint64_t static Font.Traits.italic.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  static Font.Traits.italic = v1;
  return result;
}

uint64_t (*static Font.Traits.italic.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t static Font.Traits.bold.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = static Font.Traits.bold;
  return result;
}

uint64_t static Font.Traits.bold.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  static Font.Traits.bold = v1;
  return result;
}

uint64_t (*static Font.Traits.bold.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

PaperKit::Font::Traits __swiftcall Font.Traits.init(_:)(UIFontDescriptorSymbolicTraits a1)
{
  uint64_t *v1;
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  PaperKit::Font::Traits result;

  v2 = a1;
  v3 = v1;
  if ((a1 & 1) != 0)
  {
    *(_QWORD *)&a1 = swift_beginAccess();
    v4 = static Font.Traits.italic;
    if ((v2 & 2) == 0)
      goto LABEL_8;
  }
  else
  {
    v4 = 0;
    if ((a1 & 2) == 0)
      goto LABEL_8;
  }
  *(_QWORD *)&a1 = swift_beginAccess();
  v5 = static Font.Traits.bold;
  if ((static Font.Traits.bold & ~v4) == 0)
    v5 = 0;
  v4 |= v5;
LABEL_8:
  *v3 = v4;
  LODWORD(result.rawValue) = a1;
  return result;
}

uint64_t Font.Traits.symbolicTraits.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BOOL4 v2;

  v1 = *v0;
  swift_beginAccess();
  v2 = (static Font.Traits.italic & ~v1) == 0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v1) != 0)
    return v2;
  else
    return v2 | 2u;
}

uint64_t Font.Traits.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;

  v1 = *v0;
  swift_beginAccess();
  if ((static Font.Traits.bold & ~v1) != 0)
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = 1684828002;
    v5[5] = 0xE400000000000000;
  }
  swift_beginAccess();
  if ((static Font.Traits.italic & ~v1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x63696C617469;
    v8[5] = 0xE600000000000000;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v9 = BidirectionalCollection<>.joined(separator:)();
  v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Font.Traits()
{
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
  return CRValue<>.minEncodingVersion.getter();
}

void (*Font.isBold.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(v1 + 40);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = (static Font.Traits.bold & ~v4) == 0;
  return Font.isBold.modify;
}

void Font.isBold.modify(uint64_t a1, uint64_t a2)
{
  Font.isBold.modify(a1, a2, (void (*)(_QWORD))Font.isBold.setter);
}

void (*Font.isItalic.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(v1 + 40);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = (static Font.Traits.italic & ~v4) == 0;
  return Font.isItalic.modify;
}

void Font.isItalic.modify(uint64_t a1, uint64_t a2)
{
  Font.isBold.modify(a1, a2, (void (*)(_QWORD))Font.isItalic.setter);
}

void Font.isBold.modify(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  void *v3;

  v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(_QWORD *)a1 + 32));
  free(v3);
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)rawValue < 4)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::Font::CodingKeys_optional)rawValue;
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::Font::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x656D616E5FLL && stringValue._object == (void *)0xE500000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x7A6953746E696F70 && object == (void *)0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x737469617274 && object == (void *)0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0x4E796C696D61665FLL && object == (void *)0xEB00000000656D61)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 3;
    else
      v7 = 4;
  }
  *v2 = v7;
  return result;
}

PaperKit::Font::CodingKeys_optional __swiftcall Font.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  v2 = 4;
  if ((unint64_t)intValue < 4)
    v2 = intValue;
  *v1 = v2;
  return (PaperKit::Font::CodingKeys_optional)intValue;
}

void *static Font.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Font.CodingKeys.allCases.getter;
}

uint64_t Font.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Font.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Font.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDD55B08 + 4 * byte_1DDF40A80[*v0]))(0x656D616E5FLL, 0xE500000000000000);
}

uint64_t sub_1DDD55B08()
{
  return 0x7A6953746E696F70;
}

uint64_t sub_1DDD55B24()
{
  return 0x737469617274;
}

uint64_t sub_1DDD55B38()
{
  return 0x4E796C696D61665FLL;
}

PaperKit::Font::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Font.CodingKeys(Swift::Int *a1)
{
  return Font.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for static CaseIterable.allCases.getter in conformance Font.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Font.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Font.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Font.CodingKeys()
{
  lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Font.CodingKeys()
{
  lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Font.init(from:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t result;
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;

  lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  swift_retain();
  CRValueStruct.init(from:)();
  if (v1)
  {

    lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
    result = CRValueStruct.init(from:)();
  }
  else
  {
    result = swift_release();
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  return result;
}

uint64_t Font.description.getter()
{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;

  v2 = *v0;
  v1 = (void *)v0[1];
  v4 = v0[2];
  v3 = (void *)v0[3];
  _StringGuts.grow(_:)(49);
  v5._countAndFlagsBits = 0x203A656D616E5BLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  if (v1)
  {
    v6 = v1;
  }
  else
  {
    v2 = 95;
    v6 = (void *)0xE100000000000000;
  }
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v2;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x796C696D6166202CLL;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  if (v3)
    v9 = v4;
  else
    v9 = 95;
  if (v3)
    v10 = v3;
  else
    v10 = (void *)0xE100000000000000;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x53746E696F70202CLL;
  v12._object = (void *)0xED0000203A657A69;
  String.append(_:)(v12);
  Float.write<A>(to:)();
  v13._countAndFlagsBits = 0x737469617274202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = Font.Traits.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 93;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

BOOL static Font.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static EncodedFont.== infix(_:_:)(a1, a2);
}

uint64_t Font.encode(to:)(_QWORD *a1)
{
  return Font.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Font.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys);
}

uint64_t Font.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<Font.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Font@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Font(_QWORD *a1)
{
  return Font.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Font(uint64_t a1, uint64_t a2)
{
  return specialized static EncodedFont.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Font(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type Font and conformance Font, (void (*)(void))lazy protocol witness table accessor for type Font and conformance Font);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Font@<X0>(uint64_t a1@<X8>)
{
  return Font.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Font()
{
  lazy protocol witness table accessor for type Font and conformance Font();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Font()
{
  lazy protocol witness table accessor for type Font and conformance Font();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t Font.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;

  v21 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v19 = v3[2];
  v20 = v10;
  v11 = v3[3];
  v17 = v3[5];
  v18 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v21();
  v12 = v5;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v27 = 0;
  v13 = v22;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v13)
  {
    v14 = v17;
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v25 = v14;
    v24 = 2;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v23 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v12);
}

uint64_t Font.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;

  v25 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v26 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    v13 = v8;
    v31 = 0;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17 = v16;
    v30 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    v19 = v18;
    v28 = 2;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v29;
    v27 = 3;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 16) = v21;
    *(_QWORD *)(a4 + 24) = v23;
    *(_DWORD *)(a4 + 32) = v19;
    *(_QWORD *)(a4 + 40) = v20;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EncodedFont.CodingKeys@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized EncodedFont.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EncodedFont.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDD56408 + 4 * byte_1DDF40A84[*v0]))(0x656D616E5FLL, 0xE500000000000000);
}

uint64_t sub_1DDD56408()
{
  return 0x7A6953746E696F70;
}

uint64_t sub_1DDD56424()
{
  return 0x737469617274;
}

uint64_t sub_1DDD56438()
{
  return 0x4E796C696D61665FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EncodedFont.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized EncodedFont.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance EncodedFont.CodingKeys@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized EncodedFont.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance EncodedFont.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncodedFont.CodingKeys()
{
  lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EncodedFont.CodingKeys()
{
  lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EncodedFont()
{
  return Font.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance EncodedFont()
{
  Font.hash(into:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance EncodedFont@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Font.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<EncodedFont.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EncodedFont(_QWORD *a1)
{
  return Font.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<EncodedFont.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance EncodedFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont, (void (*)(void))lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance EncodedFont()
{
  lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance EncodedFont()
{
  lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance EncodedFont()
{
  lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont();
  return CRValueStruct.minEncodingVersion.getter();
}

void Font.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt32 v2;
  Swift::UInt v3;
  Swift::UInt32 v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v1)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v1)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v2 & 0x7FFFFFFF) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

uint64_t EncodedFont_Incorrect.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EncodedFont_Incorrect.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[2];
  v14 = v1[3];
  v15 = v8;
  v13 = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = 0;
  v9 = v16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v9)
  {
    v10 = v13;
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v18 = v10;
    v17 = 3;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

Swift::Int Font.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v3;
  Swift::UInt v4;
  Swift::UInt32 v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v3 & 0x7FFFFFFF) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t EncodedFont_Incorrect.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EncodedFont_Incorrect.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v27 = 0;
    v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v13 = v12;
    v22 = v10;
    v26 = 1;
    swift_bridgeObjectRetain();
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v16 = v15;
    v21 = v14;
    v25 = 2;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    v18 = v17;
    v23 = 3;
    lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v19 = v24;
    *(_QWORD *)a2 = v22;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v21;
    *(_QWORD *)(a2 + 24) = v16;
    *(_DWORD *)(a2 + 32) = v18;
    *(_QWORD *)(a2 + 40) = v19;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EncodedFont_Incorrect.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDD56C68 + 4 * byte_1DDF40A88[*v0]))(0x656D616E5FLL, 0xE500000000000000);
}

uint64_t sub_1DDD56C68()
{
  return 0x4E796C696D61665FLL;
}

uint64_t sub_1DDD56C88()
{
  return 0x7A6953746E696F70;
}

uint64_t sub_1DDD56CA4()
{
  return 0x737469617274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EncodedFont_Incorrect.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized EncodedFont_Incorrect.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont_Incorrect.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance EncodedFont_Incorrect.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance EncodedFont_Incorrect.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncodedFont_Incorrect.CodingKeys()
{
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EncodedFont_Incorrect.CodingKeys()
{
  lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Font()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v3;
  Swift::UInt v4;
  Swift::UInt32 v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_DWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v2)
      goto LABEL_3;
  }
  Hasher._combine(_:)(0);
LABEL_6:
  if ((v3 & 0x7FFFFFFF) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance EncodedFont_Incorrect@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return EncodedFont_Incorrect.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EncodedFont_Incorrect(_QWORD *a1)
{
  return EncodedFont_Incorrect.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Font@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_DWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance EncodedFont_Incorrect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for CRType.observableDifference(from:with:) in conformance Rectangle(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect, (void (*)(void))lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance EncodedFont_Incorrect()
{
  lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance EncodedFont_Incorrect()
{
  lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance EncodedFont_Incorrect()
{
  lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect();
  return CRValueStruct.minEncodingVersion.getter();
}

unint64_t lazy protocol witness table accessor for type EncodedFont and conformance EncodedFont()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont;
  if (!lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont, &type metadata for EncodedFont);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont and conformance EncodedFont);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect, &type metadata for EncodedFont_Incorrect);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect and conformance EncodedFont_Incorrect);
  }
  return result;
}

BOOL specialized static EncodedFont.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  char v13;
  _BOOL8 result;
  char v15;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(float *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(float *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  if (!v3)
  {
    if (v8)
      return 0;
    goto LABEL_8;
  }
  if (!v8)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v8
    || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
LABEL_8:
    if (!v5)
    {
      result = 0;
      if (v10)
        return result;
      goto LABEL_17;
    }
    if (v10)
    {
      if (v4 == v9 && v5 == v10)
      {
        if (v6 != v11)
          return 0;
        return v7 == v12;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v15 & 1) == 0)
        return result;
LABEL_17:
      if (v6 != v11)
        return result;
      return v7 == v12;
    }
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.CodingKeys and conformance Font.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys;
  if (!lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.CodingKeys, &type metadata for Font.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.CodingKeys and conformance Font.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Font.Traits and conformance Font.Traits()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits;
  if (!lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Font.Traits, &type metadata for Font.Traits);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Font.Traits and conformance Font.Traits);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Font.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Font.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Font.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t sub_1DDD576D4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DDD576E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, Font.name.setter);
}

uint64_t sub_1DDD576EC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1DDD576F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, Font.familyName.setter);
}

uint64_t keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v7 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v6, v7);
}

uint64_t sub_1DDD57744@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return keypath_get_3Tm(a1, &static Font.Traits.bold, a2);
}

uint64_t sub_1DDD57750(char *a1)
{
  return Font.isBold.setter(*a1);
}

uint64_t sub_1DDD57774@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return keypath_get_3Tm(a1, &static Font.Traits.italic, a2);
}

uint64_t keypath_get_3Tm@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X3>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 40);
  result = swift_beginAccess();
  *a3 = (*a2 & ~v5) == 0;
  return result;
}

uint64_t sub_1DDD577D8(char *a1)
{
  return Font.isItalic.setter(*a1);
}

ValueMetadata *type metadata accessor for Font()
{
  return &type metadata for Font;
}

ValueMetadata *type metadata accessor for Font.Traits()
{
  return &type metadata for Font.Traits;
}

ValueMetadata *type metadata accessor for Font.CodingKeys()
{
  return &type metadata for Font.CodingKeys;
}

ValueMetadata *type metadata accessor for EncodedFont_Incorrect()
{
  return &type metadata for EncodedFont_Incorrect;
}

uint64_t destroy for Font()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Font(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Font(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Font(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Font(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Font(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodedFont()
{
  return &type metadata for EncodedFont;
}

unint64_t lazy protocol witness table accessor for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont_Incorrect.CodingKeys, &type metadata for EncodedFont_Incorrect.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont_Incorrect.CodingKeys and conformance EncodedFont_Incorrect.CodingKeys);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EncodedFont_Incorrect.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [EncodedFont_Incorrect.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [EncodedFont_Incorrect.CodingKeys], MEMORY[0x1E0DEAF50]);
}

unint64_t lazy protocol witness table accessor for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys;
  if (!lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for EncodedFont.CodingKeys, &type metadata for EncodedFont.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncodedFont.CodingKeys and conformance EncodedFont.CodingKeys);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in EncodedFont.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [EncodedFont.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [EncodedFont.CodingKeys], MEMORY[0x1E0DEAF50]);
}

unint64_t specialized EncodedFont.CodingKeys.init(rawValue:)(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t specialized EncodedFont.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D616E5FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4E796C696D61665FLL && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

